[
    {
        "content": "<p>What type will the function n-&gt;Sort n have? And how can you characterize the universe hierarchy of lean 4  in terms of the article \"Generalized Universe Hierarchies and First-Class Universe Levels\"?</p>",
        "id": 387976451,
        "sender_full_name": "PaleChaos",
        "timestamp": 1693346484
    },
    {
        "content": "<p>It won't have any type, it does not exist.</p>",
        "id": 387976944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693346665
    },
    {
        "content": "<p>I think(?) Lean's universe hierarchy is equivalent to Coq's (without cumulativity, but that doesn't really make a difference). Levels are not first class, they cannot be written as expressions, so you can't write <code>n -&gt; Sort n</code> unfortunately (or fortunately, in some ways)</p>",
        "id": 387976991,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693346691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94Universe.20hierarchy/near/387976991\">said</a>:</p>\n<blockquote>\n<p>I think(?) Lean's universe hierarchy is equivalent to Coq's (without cumulativity, but that doesn't really make a difference). Levels are not first class, they cannot be written as expressions, so you can't write <code>n -&gt; Sort n</code> unfortunately (or fortunately, in some ways)</p>\n</blockquote>\n<p>So because of this, there is no function <code>gettype: Type u -&gt; Type (u+1)</code>? In sence, if exist such a function, then a function<br>\n<code>def foo : ℕ → Type _\n| 0 := 1\n| n + 1 := gettype (foo n)</code><br>\nalso exist, but there is no <code>Sort ω</code>?</p>",
        "id": 387995007,
        "sender_full_name": "PaleChaos",
        "timestamp": 1693354959
    },
    {
        "content": "<p>I remember there is no one-to-one correspondence between N and Levels. Not sure about embedding thou.</p>",
        "id": 388001918,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693357334
    },
    {
        "content": "<p>What are you imagining <code>gettype</code> does? I don't think there is anything meaningful with that name and signature.</p>",
        "id": 388010436,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693360651
    },
    {
        "content": "<p>To me, it seems that gettype is to embed nats into universes. Is there such a thing?</p>",
        "id": 388012204,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693361434
    },
    {
        "content": "<p>Such a function doesn't exist in the logical foundations of Lean since it's intended codomain doesn't exist.</p>",
        "id": 388014132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693362131
    },
    {
        "content": "<p>There is a function <code>Type u -&gt; Type (u+1)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gettype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>but as people have said, there's no way to write a type for which that <code>foo</code> definition typechecks.</p>\n<p>But I should also add that the way universes work in Lean, they are constants within each declaration. This is why the explicit universe polymorphism syntax attaches level variables to the name (<code>def gettype.{u}</code>) -- <code>u</code> is considered an arbitrary but fixed constant. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">PUnit.unit.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>You could imagine a brand of universe polymorphism where this typechecks (ignoring termination for now), and we can write the type in Lean. But it still does not typecheck, because within the definition, <code>test</code> has type <code>PUnit.{u} -&gt; Unit</code>, and we are applying it to something of type <code>PUnit.{0}</code>. In contrast, once we are outside of <code>test</code>, we can refer to it in any universe we wish:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">PUnit.unit.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n  <span class=\"k\">let</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">PUnit.unit.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n  <span class=\"o\">()</span>\n</code></pre></div>\n<p>This is different from Agda, I think, which has a somewhat more complex universe polymorphism scheme.</p>",
        "id": 388031729,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693371325
    },
    {
        "content": "<p>Point is, even if you could write down a type for <code>foo</code> up there, Lean wouldn't let you declare it because recursion is typechecked after universe levels are fixed.</p>",
        "id": 388031833,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693371405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94Universe.20hierarchy/near/388031729\">said</a>:</p>\n<blockquote>\n<p>There is a function <code>Type u -&gt; Type (u+1)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gettype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>but as people have said, there's no way to write a type for which that <code>foo</code> definition typechecks.</p>\n<p>But I should also add that the way universes work in Lean, they are constants within each declaration. This is why the explicit universe polymorphism syntax attaches level variables to the name (<code>def gettype.{u}</code>) -- <code>u</code> is considered an arbitrary but fixed constant. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">PUnit.unit.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>You could imagine a brand of universe polymorphism where this typechecks (ignoring termination for now), and we can write the type in Lean. But it still does not typecheck, because within the definition, <code>test</code> has type <code>PUnit.{u} -&gt; Unit</code>, and we are applying it to something of type <code>PUnit.{0}</code>. In contrast, once we are outside of <code>test</code>, we can refer to it in any universe we wish:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">PUnit.unit.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n  <span class=\"k\">let</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">PUnit.unit.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n  <span class=\"o\">()</span>\n</code></pre></div>\n<p>This is different from Agda, I think, which has a somewhat more complex universe polymorphism scheme.</p>\n</blockquote>\n<p>Thank you for the great answer!</p>",
        "id": 388060065,
        "sender_full_name": "PaleChaos",
        "timestamp": 1693385412
    },
    {
        "content": "<p>I found that the first function I proposed (<code>n-&gt;Sort n</code>) is a motivating example for the current Agda universe system. However, the transfinite levels in it are not polymorphic and the levels are not first class. It is also obvious that the reasonable maximal level should be ω^2, not 2*ω as in Agda. <br>\nSo, it seems to me that first-class universe levels are the new big deal for type systems in programming after dependent types.</p>",
        "id": 388418234,
        "sender_full_name": "PaleChaos",
        "timestamp": 1693522883
    },
    {
        "content": "<p>What problem would first class universe levels solve? I rather doubt they are a big deal.</p>",
        "id": 388419423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693523615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480649\">PaleChaos</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94Universe.20hierarchy/near/388418234\">said</a>:</p>\n<blockquote>\n<p>I found that the first function I proposed (<code>n-&gt;Sort n</code>) is a motivating example for the current Agda universe system. However, the transfinite levels in it are not polymorphic and the levels are not first class. It is also obvious that the reasonable maximal level should be ω^2, not 2*ω as in Agda. <br>\nSo, it seems to me that first-class universe levels are the new big deal for type systems in programming after dependent types.</p>\n</blockquote>\n<p>Agda's levels are considered to be first-class, it just so happens that \"universe levels\" only really means the ones in the <code>Set</code> hierarchy, and are not really relevant in <code>Setω</code>, there is no notion of universe polymorphism in the higher hierarchy either. Also, There isn't much use in having first-class levels in Agda IMO, and the vast majority of the Agda code works fine without them (you can check so yourself using the <code>--level-universe</code> pragma, which reduces the expressivity of universe levels, and their interactivity with other terms). Furthermore, having first-class levels à la Agda breaks Subject Reduction (see <a href=\"https://github.com/agda/agda/issues/5810\">here</a>), so it's not just \"more expressivity for free\"</p>",
        "id": 388421534,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1693524989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94Universe.20hierarchy/near/388419423\">said</a>:</p>\n<blockquote>\n<p>What problem would first class universe levels solve? I rather doubt they are a big deal.</p>\n</blockquote>\n<p>I can agree that it's really not a \"big\" deal, in sense that there are no important problems with the current universe hierarchy. However, it is a big deal in the following sense: originally, types in programming languages came into existence to allow functions to handle variables correctly. Then functional languages were developed for first-class function. In the community of people related to functional programming, it was noticed that the heart of their language, the type system, turned out to be untyped! And to fix this (and add first-class types), a system with dependent types was developed. A universe hierarchy was used to implement this. And we should probably expect first-class universes to make our lives better, along the lines of the previous cases.<br>\nI hope I was able to more or less clearly state my point of view on this problem, without going into historical details.</p>",
        "id": 388596648,
        "sender_full_name": "PaleChaos",
        "timestamp": 1693600931
    },
    {
        "content": "<p>I did skim the Generalized Hierarchies paper and the framework is quite cool. Maybe someone will work out good inference algorithms within the framework and then we can have usable transfinite universes</p>\n<p>but on the other hand:<br>\n<a href=\"/user_uploads/3121/X6PbR3uoxr_3bw4HKEkkShDz/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/X6PbR3uoxr_3bw4HKEkkShDz/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/X6PbR3uoxr_3bw4HKEkkShDz/image.png\"></a></div>",
        "id": 388607939,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693607140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94Universe.20hierarchy/near/388607939\">said</a>:</p>\n<blockquote>\n<p>but on the other hand:<br>\n<a href=\"/user_uploads/3121/X6PbR3uoxr_3bw4HKEkkShDz/image.png\">image.png</a></p>\n</blockquote>\n<p>Obviously, RealWorld is in <code>Type</code> after all</p>",
        "id": 388608292,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693607367
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 388608718,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693607593
    },
    {
        "content": "<blockquote>\n<p>Obviously, RealWorld is in <code>Type</code> after all</p>\n</blockquote>\n<p>There are useful GADT thou.</p>",
        "id": 388722394,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693683270
    },
    {
        "content": "<p>Universe levels should never have been first class from a type theoretic and proof theoretic perspective. It breaks important assumptions and worsen the properties of type systems for no appearent good apart from oddly satisfying tricks. You can go on and allow ordinal (or even dense or non-wellfounded orders) universe levels as long as it is totally decidable, and it's been studied. And in reality you never use more than 10 universe levels as an extreme overestimate.</p>",
        "id": 388905504,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1693802492
    },
    {
        "content": "<p>I would say a more reasonable direction is McBride's \"Crude but effective stratification\". You can read about that and see how universe levels are almost completely eradicated from that formalism without damaging the essential functionality. It's sort of demoting levels from second-class to third-class instead of trying to make it first-class.</p>",
        "id": 388905646,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1693802589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480649\">PaleChaos</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94Universe.20hierarchy/near/388418234\">said</a>:</p>\n<blockquote>\n<p>I found that the first function I proposed (<code>n-&gt;Sort n</code>) is a motivating example for the current Agda universe system. However, the transfinite levels in it are not polymorphic and the levels are not first class. It is also obvious that the reasonable maximal level should be ω^2, not 2*ω as in Agda. <br>\nSo, it seems to me that first-class universe levels are the new big deal for type systems in programming after dependent types.</p>\n</blockquote>\n<p>I spent some time trying to figure out which ordinal should be the maximum level (if we internalize levels as ordinals, of course), and came to the following conclusions. As a maximal level I would like to have a countable computable predicative limit ordinal, additively and multiplicatively indecomposable. So it's something in between ω^ω and  Feferman–Schütte ordinal. Therefore, ε_0 (closed under exponention) and φ_ω(0) (closed under PRA) seem to be good candidates.</p>",
        "id": 393903491,
        "sender_full_name": "PaleChaos",
        "timestamp": 1695983013
    }
]