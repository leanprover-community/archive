[
    {
        "content": "<p>Hi, I am trying out Lean 4 (since a few hours ago), and I came across this example, which doesn't seem to be in Lean 3. Is there any documentation on this yet? All the <code>Id</code> and things. My limited understanding of functional programming thought that things should be immutable, but here there is a <code>mut</code> keyword, and everything seems to be run in the VM or sth.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime_sieve</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">primes</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Array.empty</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">isp</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkArray</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">isp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"k\">then</span>\n      <span class=\"n\">primes</span> <span class=\"bp\">←</span> <span class=\"n\">primes.append</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n      <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">isp</span> <span class=\"bp\">←</span> <span class=\"n\">isp.modify</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">primes</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">prime_sieve</span> <span class=\"mi\">2000000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList.sum</span>\n</code></pre></div>",
        "id": 337964241,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677318888
    },
    {
        "content": "<p>Hi! Functional Programming in Lean has a detailed chapter, with a nice summary at the very end, on this: <a href=\"https://leanprover.github.io/functional_programming_in_lean/monad-transformers/do.html\">https://leanprover.github.io/functional_programming_in_lean/monad-transformers/do.html</a></p>",
        "id": 337965480,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677319375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> From a cursory search, I don't think the pattern of injecting <code>Id.run</code> is explicitly described anywhere yet? edit: It is at <a href=\"https://leanprover.github.io/functional_programming_in_lean/monad-transformers/do.html?highlight=Id.run#mutable-variables\">https://leanprover.github.io/functional_programming_in_lean/monad-transformers/do.html?highlight=Id.run#mutable-variables</a></p>",
        "id": 337965918,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677319566
    },
    {
        "content": "<p><code>Id</code> simply is the identity monad that lets us use <code>do</code> blocks even for non-monadic code</p>",
        "id": 337966154,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677319643
    },
    {
        "content": "<p>Thanks a lot, I will have a look. These will probably help with numerical computations in Lean, especially with other numerical performance improvements</p>",
        "id": 337969073,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677320761
    },
    {
        "content": "<p>This is in the chapter that is to be released imminently, but perhaps it should occur in earlier as well :-) Sorry for late follow-up here, been busy.</p>",
        "id": 341334502,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1678654257
    },
    {
        "content": "<p>Wait, yes, it's in the monad transformer chapter.</p>",
        "id": 341334611,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1678654332
    }
]