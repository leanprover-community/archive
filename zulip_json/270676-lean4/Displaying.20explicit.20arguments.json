[
    {
        "content": "<p>This is an issue related to the tactic <code>extract_goal</code>.  Is there a way to get Lean to pretty print explicit and implicit arguments in the \"same\" way?  Currently, Lean shows the binding brackets and the user-name of implicit arguments, but not of explicit ones.</p>\n<p>Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">True</span>\n<span class=\"c1\">-- reality:     ∀ {i₁ : Nat}, Nat → ∀ {i₂ : Nat}, True : Prop</span>\n<span class=\"c1\">-- expectation: ∀ {i₁ : Nat} (e : Nat) {i₂ : Nat}, True : Prop</span>\n</code></pre></div>\n<p>Same issue here, although I do not know if this is exactly the same path</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run_tac</span> <span class=\"k\">do</span>   <span class=\"c1\">-- ∀ {i₁ : Nat}, Nat → ∀ {i₂ : Nat}, True</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{g}\"</span>\n</code></pre></div>",
        "id": 366737522,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686904458
    },
    {
        "content": "<p>Similarly with groupings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">True</span>\n<span class=\"c1\">-- reality:     Nat → Nat → ∀ {i₁ i₂ : Nat}, True : Prop</span>\n<span class=\"c1\">-- expectation: ∀ (e₁ e₂ : Nat) {i₁ i₂ : Nat}, True : Prop</span>\n</code></pre></div>",
        "id": 366739171,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686904796
    },
    {
        "content": "<p>Something like this is definitely possible to code, but there is currently no option for it.<br>\nNote that <code>#check &lt;identifier&gt;</code> already does this: <code>#check Prod</code></p>",
        "id": 366910728,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686938378
    },
    {
        "content": "<p>Floris, thank you for the comment!  I'll try to look more into <code>#check</code>: when I tried before, I could extract much, but I'll give it another try!</p>\n<p>The implementation that I have is <a href=\"https://github.com/leanprover-community/mathlib4/pull/4595\">!4#4595</a> and while I agree with the comment that it is very low-tech, I have not been able to leverage more of what is already available...</p>",
        "id": 366945184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686949103
    }
]