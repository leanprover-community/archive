[
    {
        "content": "<p>When using the lean4 variant of induction or cases, the following things happen which I find odd. Let me illustrate with an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">linearListReversalInternal</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">::</span> <span class=\"n\">ls</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linearListReversalInternal</span> <span class=\"n\">ls</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">::</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">linearListReverse</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">linearListReversalInternal</span> <span class=\"n\">xs</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">naiveListReverse</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reversal_identical</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">linearListReverse</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">naiveListReverse</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"c1\">-- Tactic State : No goals</span>\n\n  <span class=\"n\">done</span>\n\n\n<span class=\"c1\">-- error bar here</span>\n</code></pre></div>\n<ol>\n<li>As soon as I type the <code>with</code>, my infoview says \"No goals\". The case distinctions are visible if the \"with\" is not inserted</li>\n<li>The red squiggly line appears well after <code>done</code>which is the last line of the proof presumably (I think it is the parser for <code>induction</code> that is reading too far here). In fact I can push the error further down by adding newlines at the end of my file.</li>\n<li>If I use the <code>case succ n ih</code> style (assuming Nat), and if I have already inserted <code>done</code>. then as I type <code>case ..... </code>, <code>done</code> is treated as the name of one of the hidden variables until I type the <code>=&gt;</code> of the <code>case</code> arm.</li>\n</ol>",
        "id": 402031154,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699981776
    },
    {
        "content": "<p>Of these problems, the most annoying UX-wise is 1. IIRC, 2 and 3 have been discussed before and  I thought they were resolved already.</p>",
        "id": 402031786,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699981985
    },
    {
        "content": "<p><code>induction</code> allows a tactic at the beginning of the <code>with</code> clause, but there's no constraint on the column that that tactic appears in, so it seems <code>done</code> is being used as that tactic. There probably should be a <code>colGt</code> in here.</p>\n<p>The error you see is because <code>induction ... with ...</code> expects one or more cases. Maybe the tactic should permit zero cases for parsing purposes?</p>",
        "id": 402032504,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699982248
    },
    {
        "content": "<p>the problem is if I don't use <code>with</code>, I can see which cases remain on the infoview and I can start <code>| base_case ...</code></p>",
        "id": 402032596,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699982282
    },
    {
        "content": "<p>This doesn't happen with <code>induction' l with ...</code>. The tactic state still shows all the cases.</p>",
        "id": 402032833,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699982358
    },
    {
        "content": "<p>Right, so if it permits zero cases, it can parse, and then when the tactic executes it can report all the cases you're missing.</p>",
        "id": 402032846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699982365
    },
    {
        "content": "<p>even if it is not done parsing, why should the tactic state disappear or show \"no goals\"?</p>",
        "id": 402032924,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699982397
    },
    {
        "content": "<p>I find that when there are parsing errors, sometimes tactic execution gives up completely, but it does seem like <em>something</em> is executing here. One tell-tale I think for why <code>induction</code> isn't doing anything is that <code>done</code> should have an error that the cases weren't done.</p>",
        "id": 402033162,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699982502
    },
    {
        "content": "<p>So we're looking at the same thing, here's the parser for <code>induction</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">inductionAlts</span> <span class=\"o\">:=</span> <span class=\"s2\">\" with\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">tactic</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">colGe</span> <span class=\"n\">inductionAlt</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">induction</span><span class=\"o\">)</span> <span class=\"s2\">\"induction \"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"s2\">\" using \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"o\">(</span><span class=\"s2\">\" generalizing\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">inductionAlts</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>I think it would be more friendly with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">inductionAlts</span> <span class=\"o\">:=</span> <span class=\"s2\">\" with\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">tactic</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">colGe</span> <span class=\"n\">inductionAlt</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402033344,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699982559
    },
    {
        "content": "<p>It would also be nice if the tactic would show you the tactic state for missing alternates, rather than just saying the name of the case.</p>",
        "id": 402033501,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699982625
    },
    {
        "content": "<p>It would definitely be friendlier, but will it fix the <code>no goals</code> issue?</p>",
        "id": 402033631,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699982673
    },
    {
        "content": "<p>I would like to see the remaining goals so that I know which arm I want to work on next and variable names I want to introduce.</p>",
        "id": 402033706,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699982710
    },
    {
        "content": "<p>I removed the <code>done</code>. The issue doesn't go away. I still get <code>no goals</code></p>",
        "id": 402033780,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699982738
    },
    {
        "content": "<p>Your item (1) is in an uncertain state right now because, so long as there are parse errors, I feel like you can't really trust what the infoview is showing you. I think you'll still see \"no goals\", but you'd have a much more informative error message displayed by the <code>induction</code> tactic.</p>",
        "id": 402034024,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699982832
    },
    {
        "content": "<p><code>induction'</code> seems to give no trouble.</p>",
        "id": 402034124,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699982883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Error.20Location.20and.20infoview.20message.20for.20induction/near/402034024\">said</a>:</p>\n<blockquote>\n<p>Your item (1) is in an uncertain state right now because, so long as there are parse errors, I feel like you can't really trust what the infoview is showing you. I think you'll still see \"no goals\", but you'd have a much more informative error message displayed by the <code>induction</code> tactic.</p>\n</blockquote>\n<p>I kinda get why you say that, but from a UX standpoint I usually need to see the induction cases before choosing the arms. So maybe the zero arm induction needs to be a non-error as you say.</p>",
        "id": 402034510,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699983020
    },
    {
        "content": "<p><code>induction'</code> is a completely different tactic, and its <code>with</code> clause is for just choosing names</p>",
        "id": 402034583,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699983055
    },
    {
        "content": "<p>While I think this should still be fixed in some way, do you know about the code action that appears if you don't include <code>with</code>?</p>",
        "id": 402034644,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699983080
    },
    {
        "content": "<p>I don't get a code action on the web editor until I type <code>with</code></p>",
        "id": 402034719,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699983114
    },
    {
        "content": "<p>In the <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> playground I get it without the <code>with</code></p>\n<p><a href=\"/user_uploads/3121/sFpcI8wppLyw_6ng7_eXcgVo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sFpcI8wppLyw_6ng7_eXcgVo/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sFpcI8wppLyw_6ng7_eXcgVo/image.png\"></a></div>",
        "id": 402035000,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699983227
    },
    {
        "content": "<p>okay it appears a bit late. But yes I get it now. Both web and vscode.</p>",
        "id": 402035130,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699983259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Error.20Location.20and.20infoview.20message.20for.20induction/near/402032846\">said</a>:</p>\n<blockquote>\n<p>Right, so if it permits zero cases, it can parse, and then when the tactic executes it can report all the cases you're missing.</p>\n</blockquote>\n<p>Could we try this?</p>",
        "id": 402035230,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699983298
    },
    {
        "content": "<p>I think so</p>",
        "id": 402035548,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699983412
    },
    {
        "content": "<p>should I raise an issue (bug or RFC?)?</p>",
        "id": 402035616,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699983448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as resolved.</p>",
        "id": 402035808,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699983525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as unresolved.</p>",
        "id": 402035822,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699983534
    },
    {
        "content": "<p>Yeah, I think you could write an issue with an mwe of your example, how it's confusing both with and without <code>done</code>, and that you expect it to report an error about the missing cases.</p>\n<p>Here's an mwe I just came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n</code></pre></div>",
        "id": 402036010,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699983614
    },
    {
        "content": "<p>making it error free will still leave problems 2 and 3, but I guess that is more convoluted. I would say making <code>done</code> an optional token to mark the end of a <code>by</code> block ought to help. A parser plugin will have to explicitly take the string between by and done or beginning of the next declaration, whichever comes first, and then call the tactic parser on that string. A key difference between this and \"bring back <code>begin</code> and <code>end</code>\" would be that the  existing proofs would still work and <code>done</code> will remain optional. Currently <code>done</code> is a tactic and can be parsed by <code>induction</code> as an <code>inductionAlt</code> and cause errors.</p>",
        "id": 402036450,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699983789
    },
    {
        "content": "<p>Mario came up with something similar a few months ago for a <code>Proof ... Qed</code> block, but I suspect implementing an optional <code>done</code> token like this will make the change entirely transparent to existing users.</p>",
        "id": 402037605,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699984200
    },
    {
        "content": "<p>Last time I recall showing that a naive implementation doesn't work well for blocks inside a case or a conv, so I am guessing it won't be trivial. <code>done</code>, the tactic as it exists now, can be used at the end of an induction/case arm and <code>have/let</code> declaration.</p>",
        "id": 402038150,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699984421
    },
    {
        "content": "<p>Issue : <a href=\"https://github.com/leanprover/lean4/issues/2876\">https://github.com/leanprover/lean4/issues/2876</a></p>",
        "id": 402044177,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699986645
    },
    {
        "content": "<p>I have not added the third error since that seems to be a related by separate issue with <code>case</code></p>",
        "id": 402044211,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699986661
    },
    {
        "content": "<p>Update: adding both colGt and zero arm should solve errors 1 and 2</p>",
        "id": 402046117,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699987294
    },
    {
        "content": "<p><code>induction n with &lt;missing&gt;</code> is still executed using the induction tactic in spite of the parse error</p>",
        "id": 402154102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700029612
    },
    {
        "content": "<p>and <code>induction</code> always closes all goals unless there are <code>=&gt; ?_</code> arms</p>",
        "id": 402154187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700029643
    },
    {
        "content": "<p>the code action should still trigger even if you have <code>induction n with &lt;missing&gt;</code>, although possibly it doesn't trigger if you have tactics after the <code>with</code>, I didn't test that</p>",
        "id": 402154528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700029802
    },
    {
        "content": "<p>Yeah, but the code action is not the issue. That works well, provided one knows what the bulb is and clicks it.</p>",
        "id": 402174852,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700037328
    },
    {
        "content": "<p>The issue here is about the tactic state and error location.</p>",
        "id": 402195440,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700043461
    },
    {
        "content": "<p>both of those are working as expected</p>",
        "id": 402196270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043685
    },
    {
        "content": "<p>because <code>induction n with ...</code> does not produce any subgoals (all goals are closed by the tactic and its embedded pieces)</p>",
        "id": 402196470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043734
    },
    {
        "content": "<p>Well... from a user experience standpoint it is extremely confusing if after typing <code>induction n with...</code> all I get is \"No Goals\"</p>",
        "id": 402196988,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700043875
    },
    {
        "content": "<p>you don't just get \"no goals\", you get a parse error</p>",
        "id": 402197136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043909
    },
    {
        "content": "<p>and a lightbulb that will fill in the subgoals</p>",
        "id": 402197190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043923
    },
    {
        "content": "<p>Where do I get this error?<br>\n<a href=\"/user_uploads/3121/98-TDaZh0B_wgbR7FaAaxuNK/induction_error_where.png\">induction_error_where.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/98-TDaZh0B_wgbR7FaAaxuNK/induction_error_where.png\" title=\"induction_error_where.png\"><img src=\"/user_uploads/3121/98-TDaZh0B_wgbR7FaAaxuNK/induction_error_where.png\"></a></div>",
        "id": 402197464,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700043996
    },
    {
        "content": "<p>somewhere in line 28</p>",
        "id": 402197531,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044018
    },
    {
        "content": "<p>yes</p>",
        "id": 402197598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044029
    },
    {
        "content": "<p>a tiny squiggle that  I could easily miss.</p>",
        "id": 402197619,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044034
    },
    {
        "content": "<p>Far beyond the expected end of the proof at done</p>",
        "id": 402197671,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044045
    },
    {
        "content": "<p>it shows up in \"all messages\" too</p>",
        "id": 402197672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044045
    },
    {
        "content": "<p>why would I normally  turn on \"All messages\"? I could have hundreds of messages in a file</p>",
        "id": 402197954,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044114
    },
    {
        "content": "<p>you should not have red errors anywhere</p>",
        "id": 402198021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044129
    },
    {
        "content": "<p>At the end of a project yes.</p>",
        "id": 402198104,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044145
    },
    {
        "content": "<p>that's always your first priority to fix</p>",
        "id": 402198126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044148
    },
    {
        "content": "<p>no, ever</p>",
        "id": 402198148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044153
    },
    {
        "content": "<p>if you have red errors in the file then things can be badly broken and you will not get useful suggestions</p>",
        "id": 402198255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044176
    },
    {
        "content": "<p>except for errors on <code>done</code> and <code>by</code>, which have predictable effects similar to <code>sorry</code></p>",
        "id": 402198340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044199
    },
    {
        "content": "<p>and <code>_</code></p>",
        "id": 402198458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044215
    },
    {
        "content": "<p>I start a lot of proofs with <code>done</code> before filling in the details.</p>",
        "id": 402198471,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044217
    },
    {
        "content": "<p>So in a file with a few dozen theorems, I am going to have a few dozen errors</p>",
        "id": 402198560,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044234
    },
    {
        "content": "<p>but parse errors especially make a mess of things</p>",
        "id": 402198590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044240
    },
    {
        "content": "<p>And my point still stands, that is not the right place to show an error.</p>",
        "id": 402198677,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044260
    },
    {
        "content": "<p>you should always have no parse errors when you take your hands away from the keyboard</p>",
        "id": 402198705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044266
    },
    {
        "content": "<p>that is the right place to show a parse error</p>",
        "id": 402198836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044304
    },
    {
        "content": "<p>at least, this one</p>",
        "id": 402198856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044310
    },
    {
        "content": "<p>Think about this from the point of view of a new user who is not well versed in the parser dark arts</p>",
        "id": 402198859,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044311
    },
    {
        "content": "<p>I agree that parse errors in general are very poorly surfaced</p>",
        "id": 402198988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044332
    },
    {
        "content": "<p>they seem to have been built to be resilient to failure but this doesn't really deliver because it still aborts parsing the rest of the command</p>",
        "id": 402199127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044374
    },
    {
        "content": "<p>but they run tactics with missing pieces anyway, and most tactics don't handle this well - pattern matches are assumed to be exhaustive when they aren't, arrays are truncated without warning, weird effects result</p>",
        "id": 402199512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044434
    },
    {
        "content": "<p>but it's hard to complain about a parse error showing up at the first place where the remainder cannot be parsed</p>",
        "id": 402199803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044510
    },
    {
        "content": "<p>I still disagree on the tactic state issue. The basic UX expectation is that if I haven't finished a proof at the cursor point, I should see a tactic state.</p>",
        "id": 402199813,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Error.20Location.20and.20infoview.20message.20for.20induction/near/402199803\">said</a>:</p>\n<blockquote>\n<p>but it's hard to complain about a parse error showing up at the first place where the remainder cannot be parsed</p>\n</blockquote>\n<p>This can be fixed by allowing the parser to finish parsing at zero arms</p>",
        "id": 402199900,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044539
    },
    {
        "content": "<p>What if there is no tactic state because there is a parse error?</p>",
        "id": 402199912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044543
    },
    {
        "content": "<p>Not if you made a different parse error</p>",
        "id": 402199953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044555
    },
    {
        "content": "<p>I agree about zero arms specifically, I have said as much elsewhere, but this is orthogonal to parse error issues</p>",
        "id": 402200111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044598
    },
    {
        "content": "<p>Come on. This is a worst case argument. It is perfectly reasonable that <code>induction n with..</code> is a complete parse so that the induction cases are visible.</p>",
        "id": 402200134,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044606
    },
    {
        "content": "<p>you should probably be more precise about what you want to see fixed</p>",
        "id": 402200213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044629
    },
    {
        "content": "<p>I want this fixed: <a href=\"https://github.com/leanprover/lean4/issues/2876\">https://github.com/leanprover/lean4/issues/2876</a></p>",
        "id": 402200253,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044647
    },
    {
        "content": "<p>because \"induction allows zero arms\" and \"parse errors should show up closer to my cursor position\" are completely separate issues</p>",
        "id": 402200293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044661
    },
    {
        "content": "<p>In this case the root cause of both problems is the same. <code>induction</code> doesn't finish parsing until it sees at least one alternative. Then it can encounter a sorry or a done and try to parse them as an induction argument.</p>",
        "id": 402200605,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044749
    },
    {
        "content": "<p>Allowing zero arms and forcing indentation for inductionAlt makes both these problems go away.</p>",
        "id": 402200655,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044773
    },
    {
        "content": "<p>Besides making induction proof blocks visibly separate from what follows</p>",
        "id": 402200826,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700044813
    },
    {
        "content": "<p>actually there does seem to be a separate issue, compare the parsing of <code>induction n with</code> with <code>induction n with |</code></p>",
        "id": 402201233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044945
    },
    {
        "content": "<p>both are incomplete syntax, but notice that with the cursor on <code>with</code> the goals are still visible in the second case</p>",
        "id": 402201312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700044974
    },
    {
        "content": "<p>I don't get that. I only get a different syntax error <code>unexpected end of input; expected '=&gt;'</code></p>",
        "id": 402202254,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700045275
    },
    {
        "content": "<p>Yes but look at the goals list</p>",
        "id": 402202429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700045325
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/16kBFOklDd24HeX66loV48KX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/16kBFOklDd24HeX66loV48KX/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/16kBFOklDd24HeX66loV48KX/image.png\"></a></div>",
        "id": 402202601,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700045386
    },
    {
        "content": "<p>oh, the <code>done</code> breaks it</p>",
        "id": 402202753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700045436
    },
    {
        "content": "<p>the cause is <a href=\"https://github.com/leanprover/lean4/blob/bbc759522afe063b01086dd87119928981d49f62/src/Lean/Elab/Tactic/Induction.lean#L268-L276\">this code</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">hasAlts</span> <span class=\"o\">:=</span> <span class=\"n\">altsSyntax.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"k\">if</span> <span class=\"n\">hasAlts</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- default to initial state outside of alts</span>\n    <span class=\"c1\">-- HACK: because this node has the same span as the original tactic,</span>\n    <span class=\"c1\">-- we need to take all the info trees we have produced so far and re-nest them</span>\n    <span class=\"c1\">-- inside this node as well</span>\n    <span class=\"k\">let</span> <span class=\"n\">treesSaved</span> <span class=\"bp\">←</span> <span class=\"n\">getResetInfoTrees</span>\n    <span class=\"n\">withInfoContext</span> <span class=\"o\">((</span><span class=\"n\">modifyInfoState</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">trees</span> <span class=\"o\">:=</span> <span class=\"n\">treesSaved</span> <span class=\"o\">})</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">go</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">initialInfo</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">go</span>\n</code></pre></div>\n<p>It is using <code>altsSyntax.size &gt; 0</code> to detect whether this is <code>induction x with ...</code> vs <code>induction x</code> but this fails when there are no alts but <code>with</code> was used (and it is a syntax error)</p>",
        "id": 402202772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700045444
    },
    {
        "content": "<p>okay, but isn't the overall issue with the syntax itself which expects an argument?</p>",
        "id": 402208199,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700047158
    },
    {
        "content": "<p>like I said, this is two separate things. Make an issue specifically about induction 0+ instead of talking about parse errors</p>",
        "id": 402208677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700047277
    },
    {
        "content": "<p>you can have parse errors even with induction 0+, like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span>\n<span class=\"n\">done</span>\n</code></pre></div>",
        "id": 402208783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700047310
    },
    {
        "content": "<p>Issue 2876 was a bug report</p>",
        "id": 402209070,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700047384
    },
    {
        "content": "<p>So included all the bugs I saw in those two examples</p>",
        "id": 402209133,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700047409
    },
    {
        "content": "<p>and that's not helpful for focusing solutions to the problem</p>",
        "id": 402209248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700047438
    },
    {
        "content": "<p>make a bug report with a single bug in it</p>",
        "id": 402209346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700047452
    },
    {
        "content": "<p>then fixes for the bug can close the issue</p>",
        "id": 402209397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700047473
    },
    {
        "content": "<p>Some more info regarding this issue: In the following example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>There is actually an error being thrown from <code>induction</code>, to wit <code>invalid alternative name '[anonymous]'</code>, but apparently errors during tactic evaluation are suppressed in the event of a parse error, so the only error you see is <code>unexpected end of input</code>. Is this deliberate <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ?</p>",
        "id": 402295837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700069881
    },
    {
        "content": "<p>In this case, because of the error, only half of the info tree data has been set up and so the tactic state ends up missing</p>",
        "id": 402296066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700069957
    },
    {
        "content": "<p>this error message is visible using <code>set_option trace.Elab.tactic.backtrack true</code></p>",
        "id": 402296405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700070108
    },
    {
        "content": "<p>Let's understand <a href=\"https://github.com/leanprover/lean4/pull/2876\">lean4#2876</a> to be a user experience issue. It's definitely not a good user experience, and the two issues are intertwined (and not separable unless you're someone like Mario who knows how <code>induction</code> is implemented).</p>",
        "id": 402297114,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700070386
    },
    {
        "content": "<p>We can create separate issues that speak to the underlying technical problems if needed.</p>",
        "id": 402297191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700070424
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2885\">lean4#2885</a> fixes induction so that <code>induction n with</code>, <code>induction n with |</code> and <code>induction n with done</code> all leave approximately the same info tree results (meaning that with your cursor on <code>with</code> the original goal is still visible rather than <code>no goals</code>)</p>",
        "id": 402298981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700071128
    },
    {
        "content": "<p>I am guessing zero_alt will be necessary for induction to show the cases in the infoview</p>",
        "id": 402303618,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700072739
    },
    {
        "content": "<p>I can try to make this PR since it is a small change (a ,+ becomes ,*). It could be my first PR to lean4 proper. I am worried about the consequences of the other change, adding colGt to inductionAlt for proofs</p>",
        "id": 402306692,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700074026
    },
    {
        "content": "<p>I'll make the PR after dinner if you agree</p>",
        "id": 402307028,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700074183
    },
    {
        "content": "<p>it won't be as small a change as you are thinking, because of code like the one I linked above. The induction tactic assumes that no alts = <code>induction x</code> and <code>induction x with ...</code> has 1+ alts</p>",
        "id": 402308644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700074830
    },
    {
        "content": "<p>Okay, then it's a better learning experience</p>",
        "id": 402310037,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700075300
    }
]