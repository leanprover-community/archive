[
    {
        "content": "<p>I find myself using <code>aesop</code> fairly often, and noticing that when it gets stuck I can add or remove one or two simp lemmas to make it succeed - is it possible to give aesop a list of lemmas to add/remove from the simp call (ie if I give it [a,-b,←c] then instead of calling <code>simp</code> it'd call <code>simp [a,-b,←c]</code>), like we can with <code>norm_num</code>? I'm aware of <code>aesop (add simp a)</code>, but I can't get it to work to remove lemmas or reverse them.<br>\n(Tangentially, might it be sensible for <code>ext</code> to be one of the things <code>aesop</code> should try?)</p>",
        "id": 389298831,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693955410
    },
    {
        "content": "<p>You can erase Aesop rules:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">@[irreducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n\n<span class=\"kd\">@[aesop simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_def</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">foo_def</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>The <code>←c</code> syntax for reversing a lemma is currently not supported. Could be added with some effort.</p>\n<p><code>ext</code> sounds like a sensible candidate for the global rule set.</p>",
        "id": 389305263,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693959174
    },
    {
        "content": "<p>Ah, I was misunderstanding the syntax for erase - I tried <code>(erase simp foo_def)</code> - thanks for the clarification</p>",
        "id": 389342436,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693979214
    },
    {
        "content": "<p>If you got it wrong, that probably means the docs are not great. I'll take a look. :)</p>",
        "id": 389463150,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694015444
    },
    {
        "content": "<p>This is a slightly different question, but is it possible to avoid using a lemma tagged <code>@[simp]</code> in an <code>aesop</code> call?</p>",
        "id": 390810796,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694642917
    },
    {
        "content": "<p>A particular lemma tagged <code>@[simp]</code>, or do you want it to not use any simp-lemmas at all?</p>",
        "id": 390928288,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694697405
    },
    {
        "content": "<p>A particular lemma. But either option would be interesting.</p>",
        "id": 390984984,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694711183
    },
    {
        "content": "<p>how's that different from erasing a lemma? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 390991310,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694713755
    },
    {
        "content": "<p>I thought <code>aesop</code> can only erase <code>@[aesop simp]</code> lemmas, not <code>@[simp]</code> lemmas. Am I wrong?</p>",
        "id": 390993724,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694714727
    },
    {
        "content": "<p>Ohhhhh maybe</p>",
        "id": 390994126,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694714899
    },
    {
        "content": "<p>Digging up this thread after the holidays, sorry. Apparently I did implement this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fail_if_success</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">terminal</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 391658219,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695030183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I don't think so: that <code>fail_if_success</code> succeeds, but for the wrong reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">terminal</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"c1\">-- aesop: 'A' is not registered (with the given features) in any rule set.</span>\n</code></pre></div>",
        "id": 393330620,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695762702
    },
    {
        "content": "<p>Do you want me to create an issue on the <code>aesop</code> repo for this?</p>",
        "id": 393330791,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695762767
    },
    {
        "content": "<p>Ah! Sorry, I'll look into it. No issue necessary (but do remind me if I forget).</p>",
        "id": 393330832,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695762783
    },
    {
        "content": "<p>This is now fixed on Aesop master.</p>",
        "id": 394479129,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696267051
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 394481390,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696267859
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7461\">#7461</a> is the mathlib bump</p>",
        "id": 394482378,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696268219
    },
    {
        "content": "<p>Aesop master currently has some other commits that'll (very mildly) break mathlib. <a href=\"https://github.com/leanprover-community/mathlib4/pull/7462\">#7462</a> avoids this breakage.</p>",
        "id": 394485760,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696269435
    },
    {
        "content": "<p>I borsed that but it would be nice to have a better fix where aesop still works there.</p>",
        "id": 394485940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696269506
    },
    {
        "content": "<p>Thanks! The issue with these goals is that they contain an equational hypothesis <code>w</code> that, when rewritten left to right, makes the goal unprovable. Aesop runs <code>simp_all</code> and so potentially rewrites with <code>w</code>. New Aesop still proves the goals when <code>w</code> is cleared. Old Aesop proved the goal in the presence of <code>w</code> because the simp lemmas were applied in a different order, so the correct simp lemma would fire before <code>w</code>. I consider such proofs inherently brittle (there's no guarantee anywhere about the order in which simp lemmas are tried), so I think it's good to replace them.</p>",
        "id": 394486754,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696269830
    },
    {
        "content": "<p>I understand but I thought that <code>aesop</code> was meant to be strictly stronger than <code>simp</code>. Of course, deep down, I know that there is never any such ordering between automation tactic...</p>",
        "id": 394487134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696269995
    },
    {
        "content": "<p>That's fair. I can't guarantee this property, but I'll see if I can avoid this specific discrepancy.</p>",
        "id": 394488426,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696270574
    },
    {
        "content": "<p>Fixed on Aesop master.</p>",
        "id": 394619792,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696334210
    }
]