[
    {
        "content": "<p>I am surprised that the following type checks properly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">impl_</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Data.myrec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">impl_.Data</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">impl_.Data.rec</span> <span class=\"n\">mk</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Data.myrec</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def impl_.Data.myrec.{u} : {motive : impl_.Data → Sort u} →</span>\n<span class=\"cm\">  ((n : Nat) → motive { content := n }) → (x : impl_.Data) → motive x :=</span>\n<span class=\"cm\">fun {motive} mk x =&gt; impl_.Data.rec mk x</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">impl_</span>\n</code></pre></div>\n<p>It seems that <code>variable</code> command resolves the names not at the declaration but at the definition where it brings variables.<br>\nIs this an expected behavior, or bug?</p>\n<p>More subtle example is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Data.True</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x.content</span> <span class=\"bp\">=</span> <span class=\"n\">x.content</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x.True</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">impl_</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Data.myrec</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">impl_.Data</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">impl_.Data.rec</span> <span class=\"n\">mk</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- #print Data.myrec</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">unknown constant 'Data.myrec'</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">impl_</span>\n</code></pre></div>\n<p>This code compiles without errors as well, though uncommenting <code>#print</code> produces a weird error message.<br>\nI think this case is more likely a bug, yet what is going on?</p>\n<p>(EDIT: in the latter code, <code>mk</code> in the argument of <code>mk</code> was <code>autoImplicit</code>ed one. But even if I change it to <code>.mk</code>, the situation doesn't change).</p>",
        "id": 386809688,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692786027
    },
    {
        "content": "<p>this definitely seems like a footgun if not a bug...</p>",
        "id": 386883053,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692800749
    },
    {
        "content": "<p>the latter case is a separate bug, the definition failed but no error was given (<a href=\"https://github.com/leanprover/lean4/pull/2226\">lean4#2226</a>)</p>",
        "id": 386906724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692806518
    },
    {
        "content": "<p>the former case is expected behavior, this is a side effect of doing variable elaboration at the declaration site instead of at the <code>variable</code> line</p>",
        "id": 386907268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692806651
    },
    {
        "content": "<p>Something that might help is if the command state contained not just a list of binders, but also a list of the command states when the binders were introduced, including the current environment at that point. Then when binders get re-elaborated it'd be done with respect to the saved state (the namespace, the open namespaces, the set options, and what's in scope in the saved environment).</p>",
        "id": 386927336,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692814175
    },
    {
        "content": "<p>at that point you may as well just do the elaboration in the old state rather than re-elaborate each time</p>",
        "id": 386929218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692814979
    },
    {
        "content": "<p>Can someone remind me why we don't elaborate them up front again? I thought it might have been to get auto-implicits to all come before all other arguments, to make sure everything has fresh fvarids, to ensure things such as the instance cache are updated correctly, or to keep the CommandM state from needing anything from the TermElabM state.</p>",
        "id": 386929869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692815266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Measure.20is.20overloaded/near/366594733\">said</a>:</p>\n<blockquote>\n<p>I may be responsible for suggesting \"variables should just be inserted syntactically, like macros!\" in order to avoid all our problems with them in Lean 3. Now we have new problems...</p>\n</blockquote>",
        "id": 386931829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816169
    },
    {
        "content": "<p>wait why can't we do the macro hygiene thing here and capture names at the site of the <code>variable</code>..?</p>",
        "id": 386993870,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692851381
    },
    {
        "content": "<p>I think it does, but when the name isn't found it just falls back on use-site lookup</p>",
        "id": 386994184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692851500
    },
    {
        "content": "<p>actually no it doesn't, it's always use-site, although it will give errors about def-site lookup failures (which is confusing)</p>",
        "id": 386994685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692851752
    },
    {
        "content": "<p>that seems like the \"feature\" to change <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> especially if it's configurable with the macro hygiene setting</p>",
        "id": 386996736,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692852767
    },
    {
        "content": "<p>i can't really imagine wanting use-site name resolution in any context other than the macro-hygiene-less/hacky/lean3 <code>parameters</code> situations</p>",
        "id": 386996953,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692852875
    }
]