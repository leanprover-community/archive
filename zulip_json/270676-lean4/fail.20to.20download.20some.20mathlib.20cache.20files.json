[
    {
        "content": "<p>I can't download part of the Mathlib cache files:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get!\n<span class=\"go\">Attempting to download 3512 file(s)</span>\n<span class=\"go\">Downloaded: 2073 file(s) [attempted 3512/3512 = 100%] (59% success)</span>\n<span class=\"go\">Decompressing 2073 file(s)</span>\n</code></pre></div>",
        "id": 371989891,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688387920
    },
    {
        "content": "<p>Did you change any mathlib source file?</p>",
        "id": 371990866,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1688388076
    },
    {
        "content": "<p>I'll check the files soon.</p>",
        "id": 371992516,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688388369
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">my-project-dir/lake-packages/mathlib$ git status</span>\n<span class=\"go\">HEAD detached at f3e62849a</span>\n<span class=\"go\">Changes not staged for commit:</span>\n<span class=\"go\">  (use \"git add &lt;file&gt;...\" to update what will be committed)</span>\n<span class=\"go\">  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)</span>\n<span class=\"go\">        modified:   Mathlib/Algebra/Module/Submodule/Lattice.lean</span>\n\n<span class=\"go\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span>\n</code></pre></div>",
        "id": 371995028,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688388848
    },
    {
        "content": "<p>You won't be able to download a cache for a version of mathlib which doesn't have a cache, and perhaps a random commit won't have a cache</p>",
        "id": 371995320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688388903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> Thanks for your help! I restored the changed Mathlib source file. Now I can download all the cache files.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">my-project-dir/lake-packages/mathlib$ git restore .</span>\n<span class=\"go\">my-project-dir/lake-packages/mathlib$ git status</span>\n<span class=\"go\">HEAD detached at f3e62849a</span>\n<span class=\"go\">nothing to commit, working tree clean</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\n<span class=\"go\">Attempting to download 3512 file(s)</span>\n<span class=\"go\">Downloaded: 3512 file(s) [attempted 3512/3512 = 100%] (100% success)</span>\n<span class=\"go\">Decompressing 3512 file(s)</span>\n</code></pre></div>",
        "id": 371996223,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688389073
    },
    {
        "content": "<p>It'd be nice if Lake printed an error message saying that there are some modified Mathlib cache files.</p>",
        "id": 371998380,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688389431
    },
    {
        "content": "<p>Cache is built on top of how Lake behaves, but Lake is completely unaware of Cache. Lake is a Lean application that's downloaded in the toolchain. Cache is an application that's locally implemented in Mathlib.</p>",
        "id": 372046247,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1688397649
    },
    {
        "content": "<p>Is there no current equivalent of <code>--fallback download-first</code>?</p>",
        "id": 372047295,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688397830
    },
    {
        "content": "<p>I'm not fully aware of what that does, but Cache uses (per file) content addressing to know precisely the cache file it would need. If the file is not available on Azure, it won't try to download anything else (because it wouldn't work anyway)</p>",
        "id": 372050235,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1688398300
    },
    {
        "content": "<p>In Lean 3 it basically means \"download the cache from the most recent ancestor git commit which has a built one\" (and I think would have been the default behavior if not for hysterical raisins)</p>",
        "id": 372059145,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688400060
    },
    {
        "content": "<p>I think that sounds like it should work around the same here right, basically as long as the parent commit has the same per-file contents (which are only likely to differ for a few files on average) then you still save lots of time, no?</p>",
        "id": 372059392,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688400113
    },
    {
        "content": "<p>Ah wait or.are you teaching me it already works this way by nature of operating per file?</p>",
        "id": 372059993,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688400200
    },
    {
        "content": "<p>Probably I should simply learn how it works eh.</p>",
        "id": 372060240,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688400230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/fail.20to.20download.20some.20mathlib.20cache.20files/near/372059993\">said</a>:</p>\n<blockquote>\n<p>Ah wait or.are you teaching me it already works this way by nature of operating per file?</p>\n</blockquote>\n<p>Not that I intend to teach you or anything like that. I'm just describing how Cache works. It doesn't make use of Git commit hashes because it has its own mechanics for hashing. If you branch out from <code>main</code>, make a local commit changing <code>README.md</code> and then try to use Cache, it will work smoothly</p>",
        "id": 372063991,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1688400947
    },
    {
        "content": "<p>Aha! Got it, nice! And the issue above was simply because it was just working tree changes and not a commit? Or did it work that way here too?</p>",
        "id": 372064881,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688401127
    },
    {
        "content": "<p>Apparently the issue was that Bulhwi had some local changes on some file(s), which propagated to the hashes of the files that depend on it/them. Since the cache files that would result from those changes have never been pushed to Azure, there was no (probable) way Cache would succeed at downloading those files (except for some unlucky and unlikely hash collision)</p>",
        "id": 372066849,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1688401543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/fail.20to.20download.20some.20mathlib.20cache.20files/near/371998380\">said</a>:</p>\n<blockquote>\n<p>It'd be nice if Lake printed an error message saying that there are some modified Mathlib cache files.</p>\n</blockquote>\n<p>I slightly clarified the output: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5692\">https://github.com/leanprover-community/mathlib4/pull/5692</a></p>",
        "id": 372079117,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688403966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> Thanks!</p>",
        "id": 372170021,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688440534
    }
]