[
    {
        "content": "<p>Is there a place where I can read up on Lean's IR and how to work with with it?</p>",
        "id": 389275911,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1693946122
    },
    {
        "content": "<p>Which IR in particular are you talking about? I can think of at least 3 from the top of my head</p>",
        "id": 389276039,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693946175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> what does red square mean :P</p>",
        "id": 389277468,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693946607
    },
    {
        "content": "<p>Infrared?</p>",
        "id": 389277508,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693946625
    },
    {
        "content": "<p>Ahhhh</p>",
        "id": 389277533,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693946639
    },
    {
        "content": "<p>I assume there is no Lean UV though :)</p>",
        "id": 389277776,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693946710
    },
    {
        "content": "<p>In the hardware verification world there exists a tool called UVM for universal veritifcation methodology. So it would  be pretty cool if we had Lean UV :P</p>",
        "id": 389278551,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693946910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Learning.20about.20Lean.20IR/near/389276039\">said</a>:</p>\n<blockquote>\n<p>Which IR in particular are you talking about? I can think of at least 3 from the top of my head</p>\n</blockquote>\n<p>My bad <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> , the intermediate representation.</p>",
        "id": 389650431,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1694090878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"572379\">@Lev Stambler</span>  I think <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> is saying he can think of at least 3 intermediate representations.  I think (but could be mistaken) that there is the <code>Syntax</code> IR representing the syntax tree of the code, <del>and the <code>MacroM Syntax</code> IR representing the syntax tree after expanding macros</del>, and the <code>Expr</code> IR representing the proofs and objects at the kernel level after elaboration.  The last is used for type checking and checking proofs.  For running code, <del>C++ is also used as an IR during compiling</del>, and I think there is also a representation used for running in the <del>virtual machine</del> <em>interpreter</em> but I don’t know how it works.  You can see some details in these fairly old slides: <a href=\"https://leanprover.github.io/presentations/20181012_MSR/#/3\">https://leanprover.github.io/presentations/20181012_MSR/#/3</a>  You can also look at the metaprogramming book:  <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">https://github.com/leanprover-community/lean4-metaprogramming-book</a></p>",
        "id": 389669418,
        "sender_full_name": "Jason Rute",
        "timestamp": 1694095595
    },
    {
        "content": "<p>Only half of that is correct.</p>\n<p>indeed there is <code>Syntax</code> for the syntax tree but it is used before and after macro expansion <code>MacroM Syntax</code> is a value wrapped in a reader+state monad stack not an actual value (although it is the monad that is used during macro expansion). Then there is indeed <code>Expr</code>. There is also no C++ used as an IR ever. There are two internal IRs that are both referred to as LCNF (Lean Compiler Normal Form), one for the old and one for the new code generator. But we do indeed translate LCNF into C (or LLVM) in the end.</p>\n<p>And indeed LCNF can also be executed by an interpreter if we want, that's e.g. what usually happens if you run <code>#eval</code> or also how tactic execution works (modulo pre compiled tactics).</p>",
        "id": 389670711,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694095860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"572379\">@Lev Stambler</span> You may also want to say more what you want to do when you say “work with” the IR.  For example, the meta-programming books says a lot about writing macros and tactics.  There are also <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html\">other resources</a> on say using Lean code compiled to C in another non-Lean project.</p>",
        "id": 389701395,
        "sender_full_name": "Jason Rute",
        "timestamp": 1694103324
    },
    {
        "content": "<p>(And some in machine learning are interested in mining Lean expressions for data, and some in PL are interested in external type checkers for Lean proofs or translating Lean to other ITP languages.   So there are a lot of ways to interact with Lean’s various internal representations, and some existing tools for various use cases. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ).</p>",
        "id": 389702501,
        "sender_full_name": "Jason Rute",
        "timestamp": 1694103691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> and <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, thank you for the response! I am looking more for the <code>Expr</code> representation but was hoping to get it into a format like JSON or some other portable format where I would not have to write a parser for <code>Expr</code>.</p>\n<p>Overall, I am looking to run compression algorithms over an \"expanded out\" version of all the theorems in Mathlib. I.e. I want to expand each theorem into its fully elaborated version, replace any names with generic names, and then run compression. I hope to then see if there is some decent way to measure the amount of \"information\" conveyed in one proof</p>",
        "id": 389709947,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1694105614
    },
    {
        "content": "<p>I have gone through a good bit of the meta-programming book before and found the part on expressions quite helpful! I was wondering if there is a canonical way to do things like replace other theorems/ definitions with their elaborated versions and then get out the fully elaborated expression in a portable format? (as mentioned above)</p>",
        "id": 389711872,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1694106125
    },
    {
        "content": "<p>This should be easy if you stay within Lean. The fully elaborated version of a theorem is precisely its <code>Expr</code>; you can get the <code>Expr</code>s for all theorems by iterating through <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment#doc\">docs#Lean.Environment</a>. Replacing each constant (name) with something generic can be done with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Expr.replace#doc\">docs#Expr.replace</a>. Then you can <code>toString</code> the <code>Expr</code> and compress the resulting textual representation.</p>",
        "id": 389713020,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694106423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Learning.20about.20Lean.20IR/near/389713020\">said</a>:</p>\n<blockquote>\n<p>This should be easy if you stay within Lean. The fully elaborated version of a theorem is precisely its <code>Expr</code>; you can get the <code>Expr</code>s for all theorems by iterating through <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment#doc\">docs#Lean.Environment</a>. Replacing each constant (name) with something generic can be done with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Expr.replace#doc\">docs#Expr.replace</a>. Then you can <code>toString</code> the <code>Expr</code> and compress the resulting textual representation.</p>\n</blockquote>\n<p>Fantastic. Thank you, I will check it out!</p>",
        "id": 389713994,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1694106714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Learning.20about.20Lean.20IR/near/389713020\">said</a>:</p>\n<blockquote>\n<p>This should be easy if you stay within Lean. The fully elaborated version of a theorem is precisely its <code>Expr</code>; you can get the <code>Expr</code>s for all theorems by iterating through <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment#doc\">docs#Lean.Environment</a>. Replacing each constant (name) with something generic can be done with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Expr.replace#doc\">docs#Expr.replace</a>. Then you can <code>toString</code> the <code>Expr</code> and compress the resulting textual representation.</p>\n</blockquote>\n<p>I am getting a 404 for the Expr.replace page (https:/​/​leanprover-community.github.io/​mathlib4_docs/​404.html#Expr.replace)</p>",
        "id": 389715011,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1694107045
    },
    {
        "content": "<p>It's in the Lean namespace: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.replace#doc\">docs#Lean.Expr.replace</a></p>",
        "id": 389715213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694107108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572379\">Lev Stambler</span> <a href=\"#narrow/stream/270676-lean4/topic/Learning.20about.20Lean.20IR/near/389709947\">said</a>:</p>\n<blockquote>\n<p>Overall, I am looking to run compression algorithms over an \"expanded out\" version of all the theorems in Mathlib. I.e. I want to expand each theorem into its fully elaborated version, replace any names with generic names, and then run compression. I hope to then see if there is some decent way to measure the amount of \"information\" conveyed in one proof</p>\n</blockquote>\n<p>You will get a lot of implementation-dependent noise.</p>",
        "id": 389716020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694107389
    },
    {
        "content": "<p>One way that Lean’s expressions including proofs is stored is in the olean files.  It’s a binary format.  And there has been a lot of work trying to compress them as much as possible, so you might just be able to look at those compressed olean files.  For Lean 3 at least, there is also a similar export format which is serialized.  It just stores the expression data in a text format which could be compress with say gzip.</p>",
        "id": 389728621,
        "sender_full_name": "Jason Rute",
        "timestamp": 1694111003
    }
]