[
    {
        "content": "<p>I would like to resolve the last sorry here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exFoo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">exFoo</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 397071616,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697536719
    },
    {
        "content": "<p><code>(exFoo α).choose_spec</code>?</p>",
        "id": 397072046,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1697536846
    },
    {
        "content": "<p>Is it a bug that neither <code>exact?</code> nor <code>apply?</code> gave me a suggestion?</p>",
        "id": 397072377,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697536925
    },
    {
        "content": "<p>I don't know, probably <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 397074124,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1697537510
    },
    {
        "content": "<p>Also <code>simp [Foo, exFoo]</code> failed to close the goal (no matter whether <code>classical</code> was called beforehand).</p>",
        "id": 397074807,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697537646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.2Echoose.20problem/near/397072377\">said</a>:</p>\n<blockquote>\n<p>Is it a bug that neither <code>exact?</code> nor <code>apply?</code> gave me a suggestion?</p>\n</blockquote>\n<p>Does it happen after you rewrite exFoo?</p>",
        "id": 397104443,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697547878
    },
    {
        "content": "<p>Wait, never mind. I'd say this is a bug, but maybe this is on the list of 'common' things that is excluded for performance</p>",
        "id": 397104975,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697548055
    },
    {
        "content": "<p>I think it's hard to match on patterns of the style <code>?f x</code></p>",
        "id": 397105157,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697548100
    },
    {
        "content": "<p>I need to say that <code>exact?</code> failed me again today (and so did my memory, but that's besides the point here):<br>\n<a href=\"#narrow/stream/348111-std4/topic/.E2.9C.94.20.60Exists.2Echoose.60.20has.20the.20property\">https://leanprover.zulipchat.com/#narrow/stream/348111-std4/topic/.E2.9C.94.20.60Exists.2Echoose.60.20has.20the.20property</a></p>",
        "id": 401025603,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699478688
    },
    {
        "content": "<p>For future reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exFoo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">exFoo</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">exFoo</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span> <span class=\"c1\">-- no result from `by exact?`</span>\n</code></pre></div>",
        "id": 401025957,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699478862
    },
    {
        "content": "<p>I think <code>exact?</code> looks for theorem whose conclusion starts with <code>Foo</code>, and doesn't find any.</p>",
        "id": 401026131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699478940
    },
    {
        "content": "<p>It is frustrating, but also means <code>exact?</code> can scale to the current size of Mathlib. The Lean 3 version tried to apply every lemma, and I think it would have succeeded here. But it became unusable when Mathlib grew to 1 million lines.</p>",
        "id": 401026298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699479009
    },
    {
        "content": "<p>Well, I don't <code>import Mathlib</code> so the old version was normally fine for me.</p>",
        "id": 401026371,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699479051
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 401026481,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699479112
    },
    {
        "content": "<p>What would I have to do for <code>aesop</code> to find the proof here? It doesn't succeed \"out of the box\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">goal</span> <span class=\"n\">after</span> <span class=\"n\">exhaustive</span> <span class=\"n\">search.</span>\n</code></pre></div>",
        "id": 401026882,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699479275
    },
    {
        "content": "<p>Can we just put this in the docstring of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exist.choose#doc\">docs#Exist.choose</a> ?</p>",
        "id": 401028788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699480162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.2Echoose.20problem/near/401026882\">said</a>:</p>\n<blockquote>\n<p>What would I have to do for <code>aesop</code> to find the proof here? It doesn't succeed \"out of the box\".</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">goal</span> <span class=\"n\">after</span> <span class=\"n\">exhaustive</span> <span class=\"n\">search.</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span><span class=\"o\">]</span> <span class=\"n\">Exists.choose_spec</span>\n</code></pre></div>",
        "id": 401029473,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699480461
    },
    {
        "content": "<p>Jannis' suggestion here initially sounds like an unhelpful answer, but if you read it that way you are missing the point.</p>\n<p>Mostly <code>aesop</code> more powerful is like making <code>simp</code> more powerful: it requires PRs.</p>\n<ul>\n<li>Look at a goal and think \"<code>aesop</code> should prove this\"</li>\n<li>Be sad when it doesn't</li>\n<li>Think about the step it failed at, and come up with an <code>aesop</code> attribute that would help.</li>\n<li>Test locally</li>\n<li><strong>DON'T STOP HERE</strong></li>\n<li>Add that attribute <em>in Mathlib</em> at the earliest relevant point</li>\n<li>Fire off a PR to see if Mathlib builds, and run <code>!bench</code> to make sure it doesn't cause a bad regression</li>\n<li>Now everyone for ever after gets their problems solved by <code>aesop</code>.</li>\n</ul>",
        "id": 401039211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699485568
    },
    {
        "content": "<p>Yes! Sorry if my answer was unclear; Scott's process is what I had in mind.</p>",
        "id": 401039707,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699485899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.2Echoose.20problem/near/401039211\">said</a>:</p>\n<blockquote>\n<p>Mostly <code>aesop</code> more powerful is like making <code>simp</code> more powerful: it requires PRs.</p>\n</blockquote>\n<p>In this case, presumably <code>choose_spec</code> would be a bad <code>simp</code> lemma for performance reasons, as it has nothing to index the head symbol on. Is the same not true of aesop?</p>",
        "id": 401040825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699486693
    },
    {
        "content": "<p>How can I find the \"earliest relevant point\" please?</p>",
        "id": 401087849,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699512626
    },
    {
        "content": "<p>You can try <code>#find_home nameOfLemma</code></p>",
        "id": 401087902,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699512664
    },
    {
        "content": "<p>I didn't know this command, thanks, but I want to find home for the aesop attribute.</p>",
        "id": 401091932,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699515044
    },
    {
        "content": "<p>I am not sure about the specific issue with the <code>aesop</code> attribute, but <code>#find_home</code> tends to work best with <code>import Mathlib</code>: it looks for the earliest file <em>among the ones that are currently imported</em>.</p>",
        "id": 401109785,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699520760
    },
    {
        "content": "<p>Usually <code>aesop</code> attributes should go with the definition. Currently we can't put <code>aesop</code> attributes in Std, but we're thinking about this.</p>",
        "id": 401119459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699523403
    },
    {
        "content": "<p><code>aesop</code> depends on std, so in principle it could have a file for this</p>",
        "id": 401119998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699523591
    },
    {
        "content": "<p>I am a bit dubious about the merit of this particular attribute as mentioned <a href=\"#narrow/stream/270676-lean4/topic/Classical.2Echoose.20problem/near/401040825\">above</a> though</p>",
        "id": 401120216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699523643
    },
    {
        "content": "<p>I think the right way to handle <code>choose_spec</code> is to detect that <code>h.choose</code> is in the goal or hypotheses and add <code>have := h.choose_spec</code> in that case</p>",
        "id": 401120563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699523752
    },
    {
        "content": "<p>unifying it against random goals is horribly inefficient</p>",
        "id": 401120673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699523777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.2Echoose.20problem/near/401120563\">said</a>:</p>\n<blockquote>\n<p>I think the right way to handle <code>choose_spec</code> is to detect that <code>h.choose</code> is in the goal or hypotheses and add <code>have := h.choose_spec</code> in that case</p>\n</blockquote>\n<p>You mean manually, or by a tactic?</p>",
        "id": 401120740,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699523799
    },
    {
        "content": "<p>we're talking about <code>aesop</code> handling here</p>",
        "id": 401120790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699523815
    },
    {
        "content": "<p>of course you can do that by hand too</p>",
        "id": 401120826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699523826
    },
    {
        "content": "<p>but throwing it into a big soup of \"things <code>aesop</code> knows about\" is likely to end badly unless it either learns specifically how this kind of lemma is supposed to be used or it learns specifically about <code>Exists.choose</code> through some hard coded rules</p>",
        "id": 401121088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699523898
    },
    {
        "content": "<p>This would be a fun tactic. It could even be generalized in useful ways, e.g. something that could either:</p>\n<ul>\n<li>look through the context for <code>h.choose</code>, and add <code>h.choose_spec</code> if it didn't already exist</li>\n<li>look through the context for <code>((n : Nat) : Int)</code>, and add <code>h : 0 \\le (n : Int)</code> if it didn't already exist<br>\netc.</li>\n</ul>\n<p>You would specify what patterns to look for, and the statements to construct from them, by some convenient user command.</p>",
        "id": 401126625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699525391
    },
    {
        "content": "<p>The last example should be part of zify, together with trying to create inequalities for every Nat subtraction appearing.</p>",
        "id": 401153821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699535875
    },
    {
        "content": "<p>Indeed the rule I suggested would not be very efficient. <span class=\"user-mention\" data-user-id=\"557459\">@Xavier Généreux</span> and I are currently working on making Aesop's forward reasoning suck less, and part of this will hopefully be efficient support for forward rules that look for a pattern in the goal, such as a <code>choose_spec</code> rule that looks for occurrences of <code>Exists.choose</code>. It'll probably be a while before this is available though.</p>",
        "id": 401228279,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699560477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.2Echoose.20problem/near/401153821\">said</a>:</p>\n<blockquote>\n<p>The last example should be part of zify, together with trying to create inequalities for every Nat subtraction appearing.</p>\n</blockquote>\n<p>Yes, I have something like this in <code>omega</code> now, which is why I suggested it here. It could be more efficient... I'll work out how to make it available separately as well.</p>",
        "id": 401259307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699576068
    },
    {
        "content": "<p>Ideally this sort of pattern-matching-forward reasoning could be made available separately from aesop, even if aesop then uses it.</p>",
        "id": 401259448,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699576119
    },
    {
        "content": "<p><code>saturate | &lt;pat&gt; =&gt; &lt;new-hypothesis&gt;</code>? it'd be really nice in termination-tactics as well, since forward reasoning for termination is a bit awkward atm</p>",
        "id": 401264104,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1699578136
    },
    {
        "content": "<p><code>saturate</code> is the wrong word for it, saturation should be<code>repeat</code>ed application of the forward reasoning tactic</p>",
        "id": 401264429,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1699578252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.2Echoose.20problem/near/401259448\">said</a>:</p>\n<blockquote>\n<p>Ideally this sort of pattern-matching-forward reasoning could be made available separately from aesop, even if aesop then uses it.</p>\n</blockquote>\n<p>That's a good idea; I'll try to keep the implementation self-contained.</p>",
        "id": 401345910,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699613967
    }
]