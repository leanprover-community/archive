[
    {
        "content": "<p>I have updated to a newer version of Lean and I'm getting an error I have not seen before.</p>\n<p>This code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>Produces </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">Bar.toFoo</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Bar</span> <span class=\"n\">A</span> <span class=\"bp\">?</span><span class=\"n\">B</span>\n</code></pre></div>\n<p>Swapping <code>outParam</code> might seem to be quite suspicious. My application of this is:</p>\n<ul>\n<li><code>Foo A B</code> says that <code>A</code> is a container with values <code>B</code> </li>\n<li><code>Bar A B</code> says that <code>A</code> is the canonical container with values <code>B</code></li>\n</ul>\n<hr>\n<p>More concretely, I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">GenericArrayType</span> <span class=\"o\">(</span><span class=\"n\">Cont</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Idx</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Elem</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ArrayType</span> <span class=\"o\">(</span><span class=\"n\">Cont</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Idx</span> <span class=\"n\">Elem</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">GenericArrayType</span> <span class=\"n\">Cont</span> <span class=\"n\">Idx</span> <span class=\"n\">Elem</span>\n</code></pre></div>\n<p>I use <code>ArrayType</code> in notation <code>Elem^Idx</code> which just fetches the corresponding <code>Cont</code></p>",
        "id": 352313219,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682350313
    },
    {
        "content": "<p>That's also a word I haven't seen before</p>",
        "id": 352321930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682352279
    },
    {
        "content": "<p>It is causing problems when just using <code>GetElem</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ArrayType</span> <span class=\"o\">(</span><span class=\"n\">Cont</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Idx</span> <span class=\"n\">Elem</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">GetElem</span> <span class=\"n\">Cont</span> <span class=\"n\">Idx</span> <span class=\"n\">Elem</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I really want this instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ArrayType</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"bp\">//</span> <span class=\"n\">a.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>so I can write <code>Float^(Fin n)</code> and get <code>FloatArray</code></p>",
        "id": 352323277,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682352583
    },
    {
        "content": "<p>It looks like the change happened in <a href=\"https://github.com/leanprover/lean4/commit/4544443d983929a61bc21f973fe2e9726a207311\">4544443</a>. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  Any thoughts on this? Am I doing something bad/discouraged or was this an unintended consequence?</p>",
        "id": 352324268,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682352833
    },
    {
        "content": "<p>Does turning off this <code>synthInstance.checkSynthOrder</code> option help?</p>",
        "id": 352325906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682353247
    },
    {
        "content": "<p>Have you read <a href=\"#narrow/stream/287929-mathlib4/topic/FunLike.20issues/near/345815614\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/FunLike.20issues/near/345815614</a>. Does using <code>SemiOutParam</code> in places help?</p>",
        "id": 352325956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682353261
    },
    {
        "content": "<p>I will give it a read!</p>",
        "id": 352326048,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682353290
    },
    {
        "content": "<p>Disclaimer: I haven't understood the new system myself</p>",
        "id": 352326217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682353336
    },
    {
        "content": "<p>A quick test, this does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ArrayType</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">semiOutParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">GetElem</span> <span class=\"n\">T</span> <span class=\"n\">I</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I have to read up on what <code>semiOutParam</code> is actually doing</p>",
        "id": 352326380,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682353383
    },
    {
        "content": "<p>I see that the attribute <code>infer_tc_goals_rl</code> disappeared. I'm assuming these changes have something to do with typeclass outparams that were causing some issues.</p>",
        "id": 352327024,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682353549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/cannot.20find.20synthesization.20order.20for.20instance/near/352325906\">said</a>:</p>\n<blockquote>\n<p>Does turning off this <code>synthInstance.checkSynthOrder</code> option help?</p>\n</blockquote>\n<p>Yes! This solves the problem. </p>\n<p>But maybe I should rethink my code and have a specialized notation class.</p>",
        "id": 352328133,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682353838
    },
    {
        "content": "<p>The purpose of the check is to prevent <code>[GenericArrayType Cont Idx Elem] [Monoid Elem]</code> from blowing up when you have an <code>ArrayType (Array α) (Fin n) α</code> instance.</p>",
        "id": 352332649,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682354986
    },
    {
        "content": "<p>If you only have instances like the FloatArray one, then you should mark the <code>Idx</code> and <code>Elem</code> parameters (in <code>ArrayType</code>) as <code>semiOutParam</code>.</p>",
        "id": 352332922,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682355060
    },
    {
        "content": "<p>Although that instance will still complain about the <code>n</code> parameter.</p>",
        "id": 352333903,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682355326
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 352334022,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682355358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/cannot.20find.20synthesization.20order.20for.20instance/near/352332649\">said</a>:</p>\n<blockquote>\n<p>The purpose of the check is to prevent <code>[GenericArrayType Cont Idx Elem] [Monoid Elem]</code> from blowing up when you have an <code>ArrayType (Array α) (Fin n) α</code> instance.</p>\n</blockquote>\n<p>I do have instances for algebraic structures  over arrays and I remember running into problems like this quite often but I forgot how I solved it.</p>\n<p>I should probably revise my typeclass hierarchy.</p>",
        "id": 352344361,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682358264
    },
    {
        "content": "<p>I am running into this when trying to define a seemingly simple Category:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">RelHom</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ofRel</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">RelHom</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsRefl</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">Hom</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">RelQuiver</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">RelHom</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsTrans</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CategoryStruct</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n\n<span class=\"c1\">-- cannot find synthesization order for instance instCategoryStruct with type</span>\n<span class=\"c1\">--  (S : Type u) → (r : S → S → Prop) → [inst : IsRefl S r] → CategoryStruct S</span>\n<span class=\"c1\">-- all remaining arguments have metavariables:</span>\n<span class=\"c1\">--  IsRefl S ?r</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsRefl</span> <span class=\"n\">S</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CategoryStruct</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">RelHom</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">id</span>  <span class=\"n\">a</span>   <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofRel</span> <span class=\"o\">(</span><span class=\"n\">IsRefl.refl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can't tell what the issue with the <code>IsRefl S r</code> here.</p>",
        "id": 360148924,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684725910
    },
    {
        "content": "<p><code>set_option synthInstance.checkSynthOrder false</code> solves it (see above)</p>",
        "id": 360159550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684733526
    },
    {
        "content": "<p>Should something be an outParam?</p>",
        "id": 360159693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684733608
    },
    {
        "content": "<p>It \"solves\" it, yes, but I don't know what exactly it's \"solving\" -- it removes the error, but turning off such an option makes me think it's hiding some other failure somewhere.</p>",
        "id": 360160432,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684733947
    },
    {
        "content": "<p>Yes, it solves it in the same way that <code>nolint</code> sweeps issues under the rug.</p>",
        "id": 360397556,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684800300
    },
    {
        "content": "<p>The issue in your example is that the relation <code>r</code> is completely undetermined.  If you've an <code>IsRefl S rel1</code> and and <code>IsRefl S rel2</code> instance, then <code>CategoryStruct S</code> might use either one of them (maybe even depending on the order of the imports in the file).</p>",
        "id": 360397758,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684800460
    },
    {
        "content": "<p>In this example, I'd probably add a <code>def Rel (A : Type u) (r : A -&gt; A -&gt; Prop) := A</code> type alias and use that in the instance (i.e., <code>CategoryStruct (Rel S r)</code></p>",
        "id": 360397874,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684800538
    },
    {
        "content": "<p>Why doesn't it complain about possibly overlapping instances at the RelQuiver decl, where r only factors into the body of the Quiver, not the type?</p>",
        "id": 360399034,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684801301
    },
    {
        "content": "<p>Oh, the <code>RelQuiver</code> instance is also super problematic, as it will always apply and never work since it can't figure out the <code>r</code> (and Lean will only notice this at the very end so this has the effect of disabling the other <code>Quiver</code> instances..).</p>",
        "id": 360400379,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684802044
    },
    {
        "content": "<p>The reason why Lean doesn't print an error for that is because that check can be implemented as a linter in mathlib.</p>",
        "id": 360400468,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684802090
    }
]