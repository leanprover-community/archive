[
    {
        "content": "<p>I'd like to have a hole in my lemma statement so that I don't have to calculate beforehand what the result of the lemma will be. Interestingly, this seems to work perfectly but also throws an error. How do I get the error to go away? Is this a bug that it's an error in the first place? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Lagrange</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- when the resulting type of a declaration is explicitly provided, all holes (e.g., `_`) in the header are resolved before the declaration body is processed</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- Works fine, state shows 4 + a = a + 4 after foo</span>\n</code></pre></div>",
        "id": 400364546,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1699164145
    },
    {
        "content": "<p>you can't do this for <code>lemma</code>, but if you use <code>def</code> you can omit the return type entirely and put it inside the body of the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 400366141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699165673
    },
    {
        "content": "<p>this is a deliberate restriction, to make it easier to read theorem statements, avoid surprising changes to the theorem statement caused by tactics in the body, and also (in theory) to allow theorem bodies to be processed in parallel</p>",
        "id": 400366267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699165780
    }
]