[
    {
        "content": "<p>I was hoping to set up some very basic tools for benchmarking, but unfortunately my naiive attempt doesn't work (MWE)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">before</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoNanosNow</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">$</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">20</span> <span class=\"bp\">-</span> <span class=\"mi\">17</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">after</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoNanosNow</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">after</span> <span class=\"bp\">-</span> <span class=\"n\">before</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems like the Lean compiler is smart enough to eliminate the un-used line <code>discard $ pure (f $ 2^20 -17)</code>, and I'm not getting any sensible timing information (you can even try this with some insanely expensive computation)</p>\n<p>I arrived at a kind of unsatisfying hack that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mkEmpty</span> <span class=\"mi\">20</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">before</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoNanosNow</span>\n    <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">17</span><span class=\"o\">))</span>\n    <span class=\"k\">let</span> <span class=\"n\">after</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoNanosNow</span>\n    <span class=\"n\">times</span> <span class=\"o\">:=</span> <span class=\"n\">times.push</span> <span class=\"o\">(</span><span class=\"n\">after</span> <span class=\"bp\">-</span> <span class=\"n\">before</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">times</span>\n</code></pre></div>\n<p>Is there a way of using something like <code>discard</code> without Lean being too clever?</p>",
        "id": 338715154,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1677627927
    },
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=timeit#doc\">docs4#timeit</a></p>",
        "id": 338715465,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677628088
    },
    {
        "content": "<p>Looking at the type signature I'm not sure I understand how to use that it... Is there a way to get the timing out?</p>",
        "id": 338715867,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1677628315
    },
    {
        "content": "<p>It also seems to suffer from the same issue about being optimized out if I use <code>timeit &lt;| discard ...</code></p>",
        "id": 338716167,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1677628480
    },
    {
        "content": "<p>timeit prints the output to debug. I used basically your hack in the past:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">pre</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"bp\">←</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">post</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">pre</span><span class=\"o\">,</span> <span class=\"n\">ret</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which also just forces the result to not be optimized away</p>",
        "id": 338717704,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677629307
    }
]