[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I was trying to use Aesop for automation, and reached a case where it reached an apparent hard limit, ending with an exhaustive search failure. Here is the example. </p>\n<p>What I am trying to prove using Aesop is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Relator.LeftUnique.flip.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n  <span class=\"n\">Relator.LeftUnique</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">Relator.RightUnique</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>If I start dropping the arguments, at some point Aesop fails. Concretely, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n  <span class=\"n\">Relator.LeftUnique</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">Relator.RightUnique</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"n\">h</span>    <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n <span class=\"n\">intro</span> <span class=\"n\">x</span>\n <span class=\"n\">aesop</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>working and suggesting </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"n\">on_goal</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">a_1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>but if I drop <code>intro x</code> Aesop seems unable to modify the first line to <code>intro x b c a a_1</code> even if I remove all limits. Is there some reason why this step cannot be added to the search?</p>",
        "id": 384754221,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692014917
    },
    {
        "content": "<p>To discover that the type after <code>fun {α} {β} {r}</code> is a <code>forall</code>, Aesop needs to unfold <code>Relator.LeftUnique</code>. I suspect that this is a <code>def</code> rather than an <code>abbrev</code>, but Aesop <code>intro</code> by default only unfolds <code>reducible</code> definitions. If that is indeed the culprit, you can change the transparency used by <code>intro</code> with <code>aesop (options := { introsTransparency? := some .default })</code> (or similar; I'm not sure what exactly the option name was). Alternatively, you can add an explicit <code>unfold</code> rule for <code>LeftUnique</code>.</p>",
        "id": 384766022,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692017363
    },
    {
        "content": "<p>Thanks a lot. Indeed with that option it worked all the way (needed no <code>fun</code>). Is the only disadvantage a longer search, or are there cases where the <code>intro</code> prevents Aesop from proving?</p>",
        "id": 384767178,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692017591
    },
    {
        "content": "<p>In the latter case I will at least try both settings.</p>",
        "id": 384767268,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692017610
    },
    {
        "content": "<p>Nice! The default setting prevents Aesop from over-eagerly punching through abstractions. Once you've developed the API for a <code>def</code>, you usually want to interact with the <code>def</code>-ed object only via its API. (With that said, <code>aesop_cat</code> uses <code>introsTransparency := default</code> globally.)</p>\n<p>In a sensible rule set, punching through the abstraction should not prevent Aesop from proving a goal, but since rules can do anything, you can easily construct non-sensible rule sets.</p>",
        "id": 384769620,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692018065
    },
    {
        "content": "<p>My rulesets will be AI generated so often not sensible. But I have two options to experiment with: try multiple settings for <code>introsTransparency</code> and other such settings, and introduce unsafe rules for unfolding definitions that appear in the statement of a goal.</p>",
        "id": 384782081,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692020380
    },
    {
        "content": "<p>For that use case, I would expect the more aggressive <code>introsTransparency</code> setting to be more useful than harmful.</p>",
        "id": 384786563,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692021187
    },
    {
        "content": "<p>It went both ways - some new stuff was proved and some stuff no longer proved. The following seems to be a bug though, as there is a panic for unreachable code in <code>whnf</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Membership.mem.out</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">introsTransparency</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> is this known (my version of Aesop may be out of date).</p>",
        "id": 384819324,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692027038
    },
    {
        "content": "<p>In any case, it seems the best of both worlds is to have additional <code>intro</code> rules with other transparency settings as \"unsafe\" rules (copying and modifying Aesop' code). Will do this.</p>",
        "id": 384942122,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692061641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Limits.20of.20Aesop.3F/near/384819324\">said</a>:</p>\n<blockquote>\n<p>The following seems to be a bug though, as there is a panic for unreachable code in <code>whnf</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Membership.mem.out</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">introsTransparency</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">})</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This MWE works for me on current mathlib master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">introsTransparency</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>I recall fixing a bug that manifested as this <code>whnf</code> panic, so you probably just need to update Aesop.</p>",
        "id": 385676626,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692279912
    },
    {
        "content": "<p>Confirming that this bug is fixed in the latest mathlib aesop dependency.</p>",
        "id": 385862300,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692348505
    },
    {
        "content": "<p>Just to close this issue, when I added an unsafe tactic intro rule with default transparency by copy-pasting the code from Aesop with tinny modifications, Aesop could prove the above example (but excessive unfolding would still be avoided).</p>",
        "id": 386217783,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692534396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I run into another limit of the intro rule, even with the transparency configuration (without it this fails earlier). Here is an example (the <code>print</code> refers to the actual statement, so the full proof from which this was built).</p>\n<p>The following works fine. But if I drop the <code>p</code> from the <code>intro</code> statement then Aesop fails with an exhaustive search.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">Set.antitone_setOf</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">Antitone</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Antitone</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">p</span>\n    <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">introsTransparency</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 386357921,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692613861
    },
    {
        "content": "<p>The behaviour is the same with <code>.all</code> as transparency, and with other transparencies even the above fails.</p>",
        "id": 386358247,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692613967
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 386369587,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692618098
    },
    {
        "content": "<p>That one was indeed a plain bug (missing <code>withContext</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>). Now fixed on master. Thanks for the report!</p>",
        "id": 386642964,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692720043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Another puzzle for me with Aesop. The following works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">StarMul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">},</span>\n  <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">unitary</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">star</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span> <span class=\"n\">Iff.rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But a variant fails with aesop failing after exhaustive search:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">StarMul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">},</span>\n  <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">unitary</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">star</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"n\">Iff.rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What is it that can cause the unsafe search to fail lie this?</p>",
        "id": 389711317,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694105998
    },
    {
        "content": "<p>Probably in the second example, some safe rule changes the goal before <code>Iff.rfl</code> can fire. If you have an MWE (doesn't have to be super minimal), I can take a look.</p>",
        "id": 389713510,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694106560
    },
    {
        "content": "<p>Thanks. Would that mean that the order of the safe rules is crucial?</p>\n<p>I have a whole bunch of these but auto-generated. I will try to minimize one tomorrow morning (it is midnight in India). One more example is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ONote</span><span class=\"o\">),</span>\n  <span class=\"n\">ONote.FundamentalSequenceProp</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">ONote.repr</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">Order.succ</span> <span class=\"o\">(</span><span class=\"n\">ONote.repr</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">ONote.NF</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">ONote.NF</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">Iff.rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Again, changing to unsafe breaks this.</p>",
        "id": 389730079,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694111332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Thanks for pointing out about safe rules applying first. Indeed this is a case where splitting proving <code>A ∧ B</code> to separately proving <code>A</code> and <code>B</code> caused the next step to fail (so my use of Aesop is too naive, no error in Aesop).</p>\n<p>But there is an issue to report: In exactly the same example if I <code>aesop?</code> the <code>Try This</code> is wrong. It introduces incorrect indentations so that the result is parsed as a single (incorrect) tactic.</p>",
        "id": 389784587,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694134769
    },
    {
        "content": "<p>Yeah, this is a limitation of the <code>Try this</code> widget, which doesn't seem to be set up for multi-line output (or maybe the Lean pretty-printer is to blame; I don't know). I'm not sure where to report this.</p>",
        "id": 389929024,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694197332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Limits.20of.20Aesop.3F/near/389929024\">said</a>:</p>\n<blockquote>\n<p>Yeah, this is a limitation of the <code>Try this</code> widget, which doesn't seem to be set up for multi-line output (or maybe the Lean pretty-printer is to blame; I don't know). I'm not sure where to report this.</p>\n</blockquote>\n<p>Maybe ping the one who wrote the widget here?</p>",
        "id": 389974214,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694222870
    },
    {
        "content": "<p>Discussed at <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/.02klzzwxh.3A0000.03.20widget.20doesn.27t.20support.20multi-line.20suggestions\">#std4 &gt; <code>TryThis</code> widget doesn't support multi-line suggestions</a> (which turns out to be a misleading title).</p>",
        "id": 390050139,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694278760
    }
]