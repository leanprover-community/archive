[
    {
        "content": "<p>There are often several ways to write a function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">body</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">body</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f3</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">body</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f4</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">body</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f5</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">body</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f6</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">body</span>\n</code></pre></div>\n<p>Imagine that there may be case splitting on <code>a</code> and <code>b</code> so that the match statements aren't trivial. Do these wind up being different internally or in terms of efficiency? Should one be preferred over another in certain circumstances?</p>\n<p>I realize this is vague, but I was wondering if there were any vague rules of thumb, or, better, some general way to think about how these might differ underneath the hood. I also thought it might be an interesting conversation topic and might provide a small window into how lean works under the hood. :)</p>",
        "id": 373663262,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688897828
    },
    {
        "content": "<p>I would suspect that f1 and f2 behave the same, there might be some veeeeeeeery subtle effects regarding cache? That is if one argument still happens to be on a cache line and the other doesnt you could measure a difference but that seems unlikely to be important.</p>\n<p>f1 and f3 get compiled exactly the same way.</p>\n<p>I don't quite understand how you wish to compare f4-f6, depending on how the case splits look exactly they could be completely different.</p>",
        "id": 373664195,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1688898094
    },
    {
        "content": "<p>But if you are optimizing at this level you have very different issues. The majority of performance issues that you see in Lean code are usually:</p>\n<ol>\n<li>Algorithmic in nature</li>\n<li>Violate linearity on linearly efficient data structures</li>\n<li>Boxing related</li>\n</ol>",
        "id": 373664432,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1688898145
    },
    {
        "content": "<p>I see, thanks! Also, sorry, I should have said to imagine that all matching against <code>a</code> and <code>b</code> might involve case splits, not just the match statements (so whatever case splits you'd do in e.g. <code>f4</code>, you'd also do in e.g. <code>f1</code>). But it's good to know that this is usually not the source of any performance issues!</p>",
        "id": 373666658,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688898674
    },
    {
        "content": "<p>Though, how might boxing hurt your performance? (I only just learned what boxing is now, so apologies if this is a standard issue across programming languages)</p>",
        "id": 373667008,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688898744
    },
    {
        "content": "<p>Say that for example you have an <code>Array UInt32</code>, given the fact that <code>UInt32</code> is unboxed in Lean you would expect that in order to access the value you can just index the array and you have the value right? But this is not the case, the values that <code>Array</code> manages are boxed. THat means you have to follow a pointer to get to the value. Following a pointer means access to memory -&gt; potential cache misses -&gt; slow.</p>",
        "id": 373684104,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1688903553
    },
    {
        "content": "<p>Ahh, gotcha. Makes sense! :) I can see how it might be hard to anticipate what’s boxed and what’s not…</p>",
        "id": 373693040,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688906327
    }
]