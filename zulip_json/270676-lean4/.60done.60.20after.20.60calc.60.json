[
    {
        "content": "<p>I was expecting this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">done</span> <span class=\"c1\">-- unexpected end of input; expected ':='</span>\n</code></pre></div>\n<p>The context: I was just rehearsing a live Lean demo which I'm giving this afternoon in a departmental colloquium, and I always use <code>done</code> at the end of proofs in this situation so that the error on an incomplete proof isn't on <code>by</code> (in fact I even use a modified <code>done</code> which gives us a tada emoji), but this proof happened to end in a <code>calc</code> block and when I'd finished the job I didn't get the tada emoji, I just got an error.</p>\n<p>Is there a quick hack fix for this? If not then my talk is going to be tada-free this afternoon...</p>",
        "id": 400905817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699436251
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 400910659,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699437745
    },
    {
        "content": "<p>Itâ€™s inelegant, but surrounding the calc block with parentheses seems to get rid of the error</p>",
        "id": 400911517,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699438019
    },
    {
        "content": "<p>For some reason, also this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span>\n</code></pre></div>\n<p>seems to get rid of the error (at least on the FRO-hosted Lean server).</p>",
        "id": 400922832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699442135
    },
    {
        "content": "<p>and this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">calc</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Maybe <code>calc</code> expects at least one chaining, so at least two lines and otherwise does something strange?</p>",
        "id": 400923532,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699442422
    },
    {
        "content": "<p>Indeed, why use <code>calc</code> without chaining?</p>",
        "id": 400993066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699465112
    },
    {
        "content": "<p>This form works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>As does this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"n\">_</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 400999682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699467582
    },
    {
        "content": "<p>I'm guessing what's happening is that since calc steps have <code>colGe</code> instead of <code>colGt</code> in the parser, the <code>done</code> is being parsed as a term and not a tactic, but I don't really know why adding a \"calcFirstStep\" makes it parse correctly.</p>",
        "id": 400999852,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699467637
    },
    {
        "content": "<p>Support for the guess:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">done</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">done</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">done</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 401000213,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699467795
    },
    {
        "content": "<p>Oh whitespace! I should get better at spotting \"this bizarre error is due to whitespace issues\" errors. Thanks!</p>",
        "id": 401029933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699480683
    }
]