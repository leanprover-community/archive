[
    {
        "content": "<p>If I work with <code>Bool</code> (as opposed to <code>Prop</code>), I write <code>==</code> (as opposed to <code>=</code>).<br>\nOtherwise, Lean 4 would have to do some typecasting on the background.</p>\n<p>What should I write in place of <code>&lt;</code> when I want the output to be <code>Bool</code> (as opposed to <code>Prop</code>)?</p>",
        "id": 328441498,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676632255
    },
    {
        "content": "<p><code>x &lt; y</code> would be <code>!x &amp;&amp; y</code>, right?</p>",
        "id": 328442388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676632565
    },
    {
        "content": "<p>I think <code>x</code> and <code>y</code> are, say, <code>Int</code></p>",
        "id": 328442798,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676632701
    },
    {
        "content": "<p>I just use <code>&lt;</code>.</p>",
        "id": 328442803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676632704
    },
    {
        "content": "<p>What is the idiomatic way?</p>",
        "id": 328442816,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676632708
    },
    {
        "content": "<p>The idiomatic way is to use decidability to turn your Prop into a Bool.</p>",
        "id": 328443002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676632772
    },
    {
        "content": "<p>The idiomaticcer way might be to use <code>Prop</code> instead of <code>Bool</code>.</p>",
        "id": 328443098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676632800
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"c1\">-- returns `Prop`</span>\n<span class=\"k\">#eval</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"c1\">-- returns `true : Bool` not `True : Prop`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"k\">#check</span> <span class=\"n\">res</span> <span class=\"c1\">-- `Prop`</span>\n<span class=\"c1\">--#eval res -- failed to synthesize `Decidable res`</span>\n<span class=\"kd\">def</span> <span class=\"n\">resBool</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"k\">#check</span> <span class=\"n\">resBool</span> <span class=\"c1\">-- `Bool`</span>\n<span class=\"k\">#eval</span> <span class=\"n\">resBool</span> <span class=\"c1\">-- `true`</span>\n</code></pre></div>",
        "id": 328443954,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676633051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328443098\">said</a>:</p>\n<blockquote>\n<p>The idiomaticcer way might be to use <code>Prop</code> instead of <code>Bool</code>.</p>\n</blockquote>\n<p>Even when used as an argument for <code>List.filter</code> for example?</p>",
        "id": 328444154,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676633125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328443002\">said</a>:</p>\n<blockquote>\n<p>The idiomatic way is to use decidability to turn your Prop into a Bool.</p>\n</blockquote>\n<p>Would you let decidability do it even for <code>=</code> although <code>==</code> is readily available?</p>",
        "id": 328444519,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676633246
    },
    {
        "content": "<p>I personally always use the <code>Prop</code> version.</p>",
        "id": 328446881,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676633948
    },
    {
        "content": "<p>Lean itself seems to use mainly <code>==</code>, but also occasionally <code>=</code></p>",
        "id": 328447036,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676633989
    },
    {
        "content": "<p>I am writing a Czech material about Lean.<br>\nThe first part will be an introduction to functional programming.<br>\nThe second part will be an introduction to theorem proving.</p>\n<p>I think it is important to decide whether to use <code>=</code> or ´==´ throughout the first part.</p>",
        "id": 328448092,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676634263
    },
    {
        "content": "<p>In that case I wouldn't necessarily feel constrained by what is \"idiomatic\" (I'm not sure this is well-defined yet).<br>\nDo you need to also introduce <code>&lt;</code> in the first part? Then maybe it is better for consistency to use <code>=</code> as well.<br>\nOr, maybe you want to start out with <code>==</code> to avoid discussing decidability for a while.</p>",
        "id": 328448570,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676634396
    },
    {
        "content": "<p>I started along the lines:<br>\nLet's not confuse the readers with there being a difference between <code>Bool</code> and <code>Prop</code> and just use <code>=</code> everywhere.<br>\nThen I noticed that <code>=</code> doesn't work for <code>Float</code> numbers.<br>\nI realize that using <code>==</code> for <code>Float</code> and <code>=</code> for everything else might be even more confusing.<br>\nPlease, keep aside now that comparing <code>Float</code> numbers for equality is not a best thing to do.</p>",
        "id": 328448753,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676634453
    },
    {
        "content": "<p>You could use the heuristic \"<code>=</code> is for well-behaved equality, <code>==</code> is the \"dont do this\" float equality\"</p>",
        "id": 328452642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676635650
    },
    {
        "content": "<p>If you write code thinking \"what if I want to be able to choose between these equalities\", what you probably meant to generalize to is some arbitrary (decidable) relation <code>r : X -&gt; X -&gt; Prop</code>.</p>",
        "id": 328452848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676635704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328448570\">said</a>:</p>\n<blockquote>\n<p>Or, maybe you want to start out with <code>==</code> to avoid discussing decidability for a while.</p>\n</blockquote>\n<p>Ideally, I would avoid discussing decidability altogether.<br>\nI don't know if I can.</p>",
        "id": 328459214,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676637443
    },
    {
        "content": "<p>Isn't the biggest problem with float that NaN ==NaN evaluates to false, thus inconsistent with reflexivity?</p>",
        "id": 328459912,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676637619
    },
    {
        "content": "<p>I don't know what NaN==NaN evaluates to but I know that floats are inconsistent with pretty much anything mathematical.</p>",
        "id": 328460226,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676637717
    },
    {
        "content": "<p>Yes, they are mathematically a mess. Right now Float is just an opaque type you can't do much proving with. However there is native_decide tactic and having decidable equality(similarly how we have inequality now) on floats would allow you to prove <code>¬(NaN = NaN) := by native_decide</code> and combining with reflexivity you can get a proof of False.</p>",
        "id": 328463054,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676638478
    },
    {
        "content": "<p>I want to use floats just for one or two exercises on programming, not in proofs.</p>",
        "id": 328463800,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676638706
    },
    {
        "content": "<p>the nice thing about <code>Decidable</code> is that you can do <code>if</code> <code>then</code> <code>else</code> with it and the code will execute the decision procedure. \"under the hood\", that's why using <code>=</code> works (when you have an instance of <code>DecidableEq</code>)</p>",
        "id": 328464395,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1676638889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328443954\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"c1\">-- returns `Prop`</span>\n<span class=\"k\">#eval</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"c1\">-- returns `true : Bool` not `True : Prop`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"k\">#check</span> <span class=\"n\">res</span> <span class=\"c1\">-- `Prop`</span>\n<span class=\"c1\">--#eval res -- failed to synthesize `Decidable res`</span>\n<span class=\"kd\">def</span> <span class=\"n\">resBool</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"k\">#check</span> <span class=\"n\">resBool</span> <span class=\"c1\">-- `Bool`</span>\n<span class=\"k\">#eval</span> <span class=\"n\">resBool</span> <span class=\"c1\">-- `true`</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>that's why you get that behavior</p>",
        "id": 328464569,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1676638931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328464395\">said</a>:</p>\n<blockquote>\n<p>the nice thing about <code>Decidable</code> is that you can do <code>if</code> <code>then</code> <code>else</code> with it and the code will execute the decision procedure. \"under the hood\", that's why using <code>=</code> works (when you have an instance of <code>DecidableEq</code>)</p>\n</blockquote>\n<p>Isn't <code>if</code> <code>then</code> <code>else</code> just a syntactic sugar for <code>ite</code>?</p>",
        "id": 328465755,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676639269
    },
    {
        "content": "<p>I would recommend never writing <code>def res := x &lt; y</code>, and writing either <code>def res : Prop := x &lt; y</code> or <code>def res : Bool := x &lt; y</code>. Being able to omit types is great, but in a language where types are so important it's very easy to get confused if you don't write them down explicitly</p>",
        "id": 328466382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676639466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328465755\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328464395\">said</a>:</p>\n<blockquote>\n<p>the nice thing about <code>Decidable</code> is that you can do <code>if</code> <code>then</code> <code>else</code> with it and the code will execute the decision procedure. \"under the hood\", that's why using <code>=</code> works (when you have an instance of <code>DecidableEq</code>)</p>\n</blockquote>\n<p>Isn't <code>if</code> <code>then</code> <code>else</code> just a syntactic sugar for <code>ite</code>?</p>\n</blockquote>\n<p>yep, that's what I meant with that</p>",
        "id": 328467711,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1676639847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328442803\">said</a>:</p>\n<blockquote>\n<p>I just use <code>&lt;</code>.</p>\n</blockquote>\n<p>The conclusion probably is that the idiomatic way is to use decidable propositions as if they were booleans.</p>\n<p>Is there any other way? Something that doesn't require Lean 4 to change types of my terms?<br>\nI'm not saying I want to do it the latter way. I just want to inform myself.</p>",
        "id": 328468031,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676639938
    },
    {
        "content": "<p>well there's the <code>Lawful</code> way too, where you can reconstruct the proofs from the bools, like <code>LafwfulBEq</code> for <code>==</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`LawfulBEq α` is a typeclass which asserts that the `BEq α` implementation</span>\n<span class=\"sd\">(which supplies the `a == b` notation) coincides with logical equality `a = b`.</span>\n<span class=\"sd\">In other words, `a == b` implies `a = b`, and `a == a` is true.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">LawfulBEq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- If `a == b` evaluates to `true`, then `a` and `b` are equal in the logic. -/</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"sd\">/-- `==` is reflexive, that is, `(a == a) = true`. -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 328468424,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1676640046
    },
    {
        "content": "<p>I guess in a sense that's going the opposite way, and you can be sure that your bools stay bool</p>",
        "id": 328468666,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1676640115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328467711\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328465755\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328464395\">said</a>:</p>\n<blockquote>\n<p>the nice thing about <code>Decidable</code> is that you can do <code>if</code> <code>then</code> <code>else</code> with it and the code will execute the decision procedure. \"under the hood\", that's why using <code>=</code> works (when you have an instance of <code>DecidableEq</code>)</p>\n</blockquote>\n<p>Isn't <code>if</code> <code>then</code> <code>else</code> just a syntactic sugar for <code>ite</code>?</p>\n</blockquote>\n<p>yep, that's what I meant with that</p>\n</blockquote>\n<p>The definition of <code>ite</code> eats a decidable proposition. Therefore, I don't hesitate to use <code>=</code> there.<br>\nHowever, the definition of <code>List.filter</code> eats a boolean. Therefore, I have a natural inclination to write <code>==</code> there in order to avoid hidden type juggling.</p>",
        "id": 328468841,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676640159
    },
    {
        "content": "<p>You can normally rely on implicit coercions to do the work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Or with an explicit lambda:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Also consider using <code>Ord</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">compare</span> <span class=\"mi\">3</span> <span class=\"bp\">.</span> <span class=\"bp\">==</span> <span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I once thought it might be useful to have <code>BLE</code> and <code>BLT</code> classes like <code>BEq</code>, but <code>Ord</code> was always more convenient in the cases where <code>LE</code> and <code>LT</code> didn't do.</p>",
        "id": 328476415,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1676642314
    },
    {
        "content": "<p>Is relying on implicit coercions the best thing to do even when make it a teaching material?<br>\nI am not saying it isn't. I just want to hear some reassurance.</p>",
        "id": 328480752,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676643396
    },
    {
        "content": "<p>It depends on what you are trying to teach, IMHO. If you're trying to teach programming language theory, coercions might obfuscate minutia that you want to teach explicitly, whereas if you want to teach say formalizing mathematics, you might want to hide away the nitty-gritty details of the type theory wherever you can. Just my two cents on it.</p>",
        "id": 328483128,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1676644019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328452642\">said</a>:</p>\n<blockquote>\n<p>You could use the heuristic \"<code>=</code> is for well-behaved equality, <code>==</code> is the \"dont do this\" float equality\"</p>\n</blockquote>\n<p>I will probably go for the implicit coercion and follow the advice of Eric Wieser.</p>",
        "id": 328483793,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676644226
    },
    {
        "content": "<p>I'm thinking about omitting <code>==</code> altogether. Is there a function for almost equality of <code>Float</code> numbers in STD?</p>",
        "id": 328486906,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676644996
    },
    {
        "content": "<p>(which would be the proper thing to call anyway)</p>",
        "id": 328486993,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676645020
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Float.beq#doc\">docs4#Float.beq</a>, but you should really use <code>==</code> if you need that. Using that would be like using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add#doc\">docs4#Nat.add</a> instead of <code>+</code></p>",
        "id": 328500866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676648532
    },
    {
        "content": "<p>Is it \"up to epsilon\" equality?</p>",
        "id": 328501361,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676648666
    },
    {
        "content": "<p>Oh sorry, I thought you meant \"almost equal\" as in \"almost an equivalence relation\"</p>",
        "id": 328501791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676648766
    },
    {
        "content": "<p>No, I don't think that exists, but you could certainly define it for your own use</p>",
        "id": 328501851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676648781
    },
    {
        "content": "<p>(it doesn't exist in the C standard library either)</p>",
        "id": 328501885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676648790
    },
    {
        "content": "<p>You can use <code>f \\in Set.Icc (x - eps) (x + eps)</code></p>",
        "id": 328502005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676648824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20.60.3C.60/near/328468841\">said</a>:</p>\n<blockquote>\n<p>The definition of <code>ite</code> eats a decidable proposition. Therefore, I don't hesitate to use <code>=</code> there.<br>\nHowever, the definition of <code>List.filter</code> eats a boolean. Therefore, I have a natural inclination to write <code>==</code> there.</p>\n</blockquote>\n<p>Is the consensus that we don't care at all if the definition asks<br>\nfor an argument of type <code>Bool</code> or<br>\nfor <code>(c : Prop) [h : Decidable c]</code> as an argument?</p>",
        "id": 328544766,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676661030
    },
    {
        "content": "<p>By the way, <a href=\"https://github.com/leanprover/lean4/pull/2038\">PR #2038</a> is very relevant here. Unfortunately, it's a very complicated PR and, since everyone is very busy right now, it may take a while to get finalized.</p>",
        "id": 328563308,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1676668022
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Pe0P3CXjgjPuy01UoTMGs4bj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Pe0P3CXjgjPuy01UoTMGs4bj/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Pe0P3CXjgjPuy01UoTMGs4bj/image.png\"></a></div>",
        "id": 328565793,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676669088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 329214562,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676992117
    }
]