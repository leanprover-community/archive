[
    {
        "content": "<p>I'm very new to metacoding and I have a (hopefully simple) question. How do I turn an element (call it <code>sig</code>) of type <code>TSyntax `Lean.Parser.Command.declSig</code> into an <code>Expr</code>?</p>\n<p>For context, I am adding a new theorem to context using <code>let thmStatement ← `(theorem $(mkIdent name) $sig $val)</code> and I would<br>\nlike to check if it is the same statement as another (specified) theorem that's already in context.</p>\n<p>I get the existing theorem's type with <code>((← getEnv).constants.map₁.find! thmName.getId).type</code>, which is an <code>Expr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.instMembershipSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Set.univ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and <code>dbg_trace sig</code> gives the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Command.declSig</span>\n <span class=\"o\">[(</span><span class=\"n\">Term.implicitBinder</span> <span class=\"s2\">\"{\"</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"s2\">\":\"</span> <span class=\"o\">(</span><span class=\"n\">Term.type</span> <span class=\"s2\">\"Type\"</span> <span class=\"o\">[])]</span> <span class=\"s2\">\"}\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.explicitBinder</span> <span class=\"s2\">\"(\"</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"s2\">\":\"</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[]</span> <span class=\"s2\">\")\"</span><span class=\"o\">)]</span>\n <span class=\"o\">(</span><span class=\"n\">Term.typeSpec</span> <span class=\"s2\">\":\"</span> <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">∈</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"s2\">\"∈\"</span> <span class=\"o\">(</span><span class=\"n\">Term.typeAscription</span> <span class=\"s2\">\"(\"</span> <span class=\"bp\">`</span><span class=\"n\">univ</span> <span class=\"s2\">\":\"</span> <span class=\"o\">[(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">Set</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"o\">])]</span> <span class=\"s2\">\")\"</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>which is a <code>TSyntax `Lean.Parser.Command.declSig</code>. I'd guess that's some sort of elaboration of <code>sig</code> but I don't understand elaboration enough yet, so I'm also struggling constructing a compact mwe.</p>",
        "id": 349295287,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1681459474
    }
]