[
    {
        "content": "<p>The instance for <code>MonadControl m (StateRefT' ω σ m)</code> looks a little odd to me—namely, it's just <code>inferInstanceAs (MonadControl m (ReaderT _ _))</code>. But I don't see how this would manage to restore the state via <code>restoreM</code>.</p>\n<p>Is it correct and I just don't understand it, or should it be more like the instance for <code>StateT</code>? Here's what I would naively expect it to look like if it were patterned off of <code>StateT</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MonadControl</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">StateRefT'</span> <span class=\"n\">ω</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">stM</span> <span class=\"n\">α</span>      <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span>\n  <span class=\"n\">liftWith</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"bp\">;</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.run</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"n\">restoreM</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>(But I don't know if more subtlety is required to properly handle the ref.)</p>",
        "id": 403718439,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700717778
    },
    {
        "content": "<p>Motivation: my suspicion is that this led to the odd behavior in <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.238435.3A.20run.20hint.20tactics.20in.20parallel\">#PR reviews &gt; #8435: run hint tactics in parallel</a>; namely, I noticed in tests that the tactic state would persist from one task to the other if <code>MonadControl</code> was used to collapse some repeated definitions.</p>",
        "id": 403718550,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700717870
    },
    {
        "content": "<p>I've just tested: if I include my version of the instance before the <code>MonadControl</code> definitions involved, it fixes the unusual behavior.</p>",
        "id": 403718931,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700718116
    },
    {
        "content": "<p>Interesting! Just a heads up that modifying <code>MonadControl</code> instances in Lean would be a slow and careful process. A lot of subtle stuff depends on this.</p>",
        "id": 403750116,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700732158
    },
    {
        "content": "<p>Issue: <a href=\"https://github.com/leanprover/lean4/pull/3001\">lean4#3001</a></p>",
        "id": 405233650,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701390286
    }
]