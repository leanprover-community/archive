[
    {
        "content": "<p>It seems that interrupting commands that invokes <code>IO.Process.spawn</code> in VSCode does not kill the child being spawned. Here is a mwe (in Linux(WSL)):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">spawnSleep</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">proc</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.spawn</span>\n    <span class=\"o\">{</span><span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"sleep\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span><span class=\"o\">]}</span>\n  <span class=\"n\">proc.wait</span>\n\n<span class=\"c1\">-- Type something here --&gt; &lt;-- multiple times to interrupt the normal execution of the following command</span>\n<span class=\"k\">#eval</span> <span class=\"n\">spawnSleep</span> <span class=\"mi\">30</span>\n</code></pre></div>\n<p>If we type at the <code>--&gt; &lt;--</code> multiple times with short pauses in between, we can see multiple <code>sleep</code> running in the background.</p>",
        "id": 400726834,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699359036
    },
    {
        "content": "<p>Some context: I'm working on a tactic that invokes external commands. If some theorem in a file invokes my tactic, and I keep editing that file for a while, my computer becomes extremely slow and sometimes even crashes.</p>",
        "id": 400727372,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699359246
    },
    {
        "content": "<p>Restarting lean server on the file (ctrl+shift+x) kills the spawned process</p>",
        "id": 400784532,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699377454
    },
    {
        "content": "<p>But re-loading the imports can take a long time.</p>",
        "id": 400784687,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699377514
    },
    {
        "content": "<p><code>wait</code> maps more or less directly to the OS primitive, there isn't really anything the elaborator could do to interrupt it. I would suggest busy-waiting with a small sleep and using <code>Child.kill</code> if <code>IO.checkCanceled</code> returns <code>true</code>, which the elaborator sets on cancellation starting with 4.3.0-rc1.</p>",
        "id": 400792426,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699380562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"524339\">@Yicheng Qian</span> I'm working on <a href=\"https://github.com/joehendrix/lean-libuv\">Lean bindings to <code>libuv</code></a> as a side project.  Right now, there isn't much there, but I am working on TCP.   I plan to start adding process creation once that's done.</p>\n<p>I'll see if we can have a way of creating a libuv async that is triggered when <code>IO.checkCanceled</code> is set.   That should provide a mechanism for waiting for processes but killing them if the elaborator sets cancellation.  This doesn't help immediately, but should provide a more robust long term API.</p>",
        "id": 400797382,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699382763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Interrupting.20.60.60spawn.60.60.20in.20VSCode.20does.20not.20kill.20child/near/400792426\">said</a>:</p>\n<blockquote>\n<p><code>wait</code> maps more or less directly to the OS primitive, there isn't really anything the elaborator could do to interrupt it. I would suggest busy-waiting with a small sleep and using <code>Child.kill</code> if <code>IO.checkCanceled</code> returns <code>true</code>, which the elaborator sets on cancellation starting with 4.3.0-rc1.</p>\n</blockquote>\n<p>Sorry, I'm confused about the approach, and I can't find busy-waiting primitives (non-blocking ones) in Lean. Can you provide a modified <code>spawnSleep</code> that kills the child when interrupted?</p>",
        "id": 400861657,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699414047
    },
    {
        "content": "<p>I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">spawnSleep</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">proc</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.spawn</span>\n    <span class=\"o\">{</span><span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"sleep\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span><span class=\"o\">]}</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">IO.asTask</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n    <span class=\"n\">while</span> <span class=\"n\">true</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.sleep</span> <span class=\"mi\">100</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">IO.checkCanceled</span> <span class=\"k\">then</span>\n        <span class=\"n\">proc.kill</span>\n        <span class=\"n\">break</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">start</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2000</span> <span class=\"k\">then</span>\n        <span class=\"n\">break</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">proc.wait</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>But the <code>sleep</code> is not killed when the command  is interrupted.</p>",
        "id": 400862468,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699414412
    },
    {
        "content": "<p>Oh, if you do that in a separate <code>Task</code>, it will have its own cancellation flag. If you switch it around, i.e. do the <code>Child.wait</code> in a task and busy-wait on it in the main thread using <code>IO.hasFinished</code>, I believe it should work on 4.3.0-rc1+.</p>",
        "id": 400882039,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699426381
    },
    {
        "content": "<p>If we had <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html#method.try_wait\">https://doc.rust-lang.org/std/process/struct.Child.html#method.try_wait</a>, the additional task would not be necessary</p>",
        "id": 400882198,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699426468
    },
    {
        "content": "<p>Great! Now it works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">spawnSleep₂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">proc</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.spawn</span>\n    <span class=\"o\">{</span><span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"sleep\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span><span class=\"o\">]}</span>\n  <span class=\"k\">let</span> <span class=\"n\">tsk</span> <span class=\"bp\">←</span> <span class=\"n\">IO.asTask</span> <span class=\"n\">proc.wait</span>\n  <span class=\"n\">while</span> <span class=\"n\">true</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.sleep</span> <span class=\"mi\">100</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">IO.checkCanceled</span> <span class=\"k\">then</span>\n      <span class=\"n\">proc.kill</span>\n      <span class=\"n\">break</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">IO.hasFinished</span> <span class=\"n\">tsk</span> <span class=\"k\">then</span>\n      <span class=\"n\">break</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- Type something here --&gt; &lt;-- multiple times to interrupt the normal execution of the following command</span>\n<span class=\"k\">#eval</span> <span class=\"n\">spawnSleep₂</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 400886890,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699428635
    },
    {
        "content": "<p>But this seems a bit magical to me.</p>",
        "id": 400886963,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699428677
    },
    {
        "content": "<p>Why <code>proc.kill</code> is still executed even after the command is interrupted ...</p>",
        "id": 400887035,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699428716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"524339\">Yicheng Qian</span> <a href=\"#narrow/stream/270676-lean4/topic/Interrupting.20.60.60spawn.60.60.20in.20VSCode.20does.20not.20kill.20child/near/400886963\">said</a>:</p>\n<blockquote>\n<p>But this seems a bit magical to me.</p>\n</blockquote>\n<p>I wouldn't call it ergonomic, but from my point of view it would be more magical if the original code just worked :)</p>",
        "id": 400887627,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699428981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"524339\">Yicheng Qian</span> <a href=\"#narrow/stream/270676-lean4/topic/Interrupting.20.60.60spawn.60.60.20in.20VSCode.20does.20not.20kill.20child/near/400887035\">said</a>:</p>\n<blockquote>\n<p>Why <code>proc.kill</code> is still executed even after the command is interrupted ...</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 400887657,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699428990
    },
    {
        "content": "<p>I'm thinking that, when the command <code>#eval spawnSleep₂ 5</code> is interrupted (when I type something above it), it's likely that we're in <code>IO.sleep 100</code>, and everything below will not be executed after the interruption. So I'm surprised that <code>proc.kill</code> is still executed and <code>sleep</code> is killed.</p>",
        "id": 400888274,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699429263
    },
    {
        "content": "<p>Task cancellation is cooperative, nothing will be skipped until someone uses <code>checkCanceled</code>. I/O primitives like <code>sleep</code> don't check it, and the sleep itself is not interruptible either.</p>",
        "id": 400888528,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699429380
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 400890455,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699430376
    },
    {
        "content": "<p>I certainly didn't know that before. I though that lean would just interrupt the task right at the command it's executing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">spin</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">while</span> <span class=\"n\">true</span> <span class=\"k\">do</span>\n    <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"mi\">10000000</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Oh\"</span>\n\n<span class=\"c1\">-- Type something here --&gt; &lt;-- multiple times to interrupt the normal execution of the following command</span>\n<span class=\"k\">#eval</span> <span class=\"n\">spin</span>\n</code></pre></div>\n<p>If I type at <code>--&gt; &lt;--</code> for <code>k</code> times, <code>top</code> will tell me that <code>lean</code> uses <code>(k+1) * 100%</code> CPU :)</p>",
        "id": 400892531,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699431316
    },
    {
        "content": "<p>So this issue is not necessarily related to <code>IO.spawn</code>.</p>",
        "id": 400892573,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699431341
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Interrupting.20.02klzzwxh.3A0000.03.20in.20VSCode.20does.20not.20kill.20child\">#lean4 &gt; Interrupting <code>spawn</code> in VSCode does not kill child</a> by <span class=\"user-mention silent\" data-user-id=\"524339\">Yicheng Qian</span>.</p>",
        "id": 400892731,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699431423
    },
    {
        "content": "<p>Anyway <code>checkCanceled</code> still solves the issue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">spin</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">while</span> <span class=\"n\">true</span> <span class=\"k\">do</span>\n    <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"mi\">10000000</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Oh\"</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">IO.checkCanceled</span> <span class=\"k\">then</span>\n      <span class=\"n\">break</span>\n</code></pre></div>",
        "id": 400892938,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699431542
    },
    {
        "content": "<p>Btw</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">spin</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">while</span> <span class=\"n\">true</span> <span class=\"k\">do</span>\n    <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">spin</span>\n</code></pre></div>\n<p>causes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"n\">server</span> <span class=\"n\">printed</span> <span class=\"n\">an</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span> <span class=\"n\">code</span>\n</code></pre></div>\n<p>should this be considered an issue?</p>",
        "id": 400893111,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1699431613
    },
    {
        "content": "<p>That does look like an issue</p>",
        "id": 400894944,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699432470
    }
]