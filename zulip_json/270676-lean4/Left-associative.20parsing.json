[
    {
        "content": "<p>Hi, when trying to make a parser for a functional programming langage, I encountered the following issue: here, <code>a b c</code> parses as a syntax of the form <code>[a,[b,[c]]]</code> when I'd like it to be parsed as <code>[a,[b,c]]</code>. What would be the easiest way to do that ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"n\">foo</span> <span class=\"n\">foo</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 347601436,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1680856612
    },
    {
        "content": "<p>I think that is just how the <code>+</code> combinator works (it accepts at least 1 but potentially more <code>foo</code>s). You may want a more explicit recursion like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">11</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"n\">foo</span><span class=\"o\">:</span><span class=\"mi\">11</span> <span class=\"n\">foo</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>using precedences you can make the desired associativity clear :)</p>",
        "id": 347603007,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680857123
    },
    {
        "content": "<p>(swapping the 10 and 11 in the last rule gives a left-associative parse tree)</p>",
        "id": 347603133,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680857164
    },
    {
        "content": "<p>That's exactly what I was looking for !  Thanks a lot :)</p>",
        "id": 347603351,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1680857254
    },
    {
        "content": "<p>I'm not sure if you've stumbled onto it yet but the <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">metaprogramming book</a> is a great general resource on syntax/macros/elaboration. Might be worth a gander :D</p>",
        "id": 347603839,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680857417
    },
    {
        "content": "<p>I did, and I thought that working with precedences would probably resolve the issue, but it wasn't clear to me how. In particular, the book only shows (and doesn't detail) that you can put precedence on the <code>syntax</code> keyword, but not on the syntax categories themselves like <code>syntax foo:10 : bar</code>, this was the missing piece for me. I should have probably paid more attention to the part describing notations, which did introduce precedence.</p>",
        "id": 347604482,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1680857635
    },
    {
        "content": "<p>That's a good point. Maybe open an issue on the repo, since (IMO) that should be discussed when it brings up precedences</p>",
        "id": 347718058,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680890213
    }
]