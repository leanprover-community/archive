[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236447.20Right.20exactness.20of.20tensor.20product/near/388601783\">said</a>:</p>\n<blockquote>\n<p>Why can't we have a erm lake? option which just says \"yes please, compile all the lean files in this project, because that's obviously what we want, like most projects\"</p>\n</blockquote>\n<p>Can we have a think about ways to reduce the pain of contributors having to maintain <code>Mathlib.lean</code>? This is an annoying pain point.</p>\n<p>I'd be happy for options that either worked without any <code>Mathlib.lean</code> at all, or options that just automatically updated it with a <code>lake build</code> (although perhaps we can't even assume that PR authors are running this before committing).</p>\n<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> for thoughts?</p>",
        "id": 388871259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693782679
    },
    {
        "content": "<p>Isn't there a PR that implements the update for that file with a Lake script?</p>\n<p>As far as I remember, keeping a <code>Mathlib.lean</code> file is not a necessity from the perspective of the Lean 4 toolchain: it's there for mathlib's own maintenance reasons (CI stuff?)</p>\n<p>So moving towards that direction would probably require distilling the all reasons why it exists and then evaluate an alternative route for each of them</p>",
        "id": 388887425,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693791786
    },
    {
        "content": "<p>Have we considered using <code>globs := #[.andSubmodules …]</code> as a lake option with an empty ’Mathlib.lean` file? <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> taught be this trick.</p>",
        "id": 388889003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693792623
    },
    {
        "content": "<p>I do remember someone mentioning this a while ago. And in my memory, one of the reasons why <code>Mathlib.lean</code> is needed is due to how the linters run, which I don't understand (needs confirmation!)</p>\n<p>Another reason is the current implementation of <code>Cache</code>, which infers all the files that need to have oleans cached (and downloaded) by traversing imports, starting from <code>Mathlib.lean</code></p>",
        "id": 388889709,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693793035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20option/near/388871259\">said</a>:</p>\n<blockquote>\n<p>I'd be happy for options that either worked without any <code>Mathlib.lean</code> at all, or options that just automatically updated it with a <code>lake build</code> (although perhaps we can't even assume that PR authors are running this before committing).</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20option/near/388887425\">said</a>:</p>\n<blockquote>\n<p>Isn't there a PR that implements the update for that file with a Lake script?</p>\n</blockquote>\n<p>Yep, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5593\">mathlib4#5593</a>. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> was concerned about the script increasing configuration elaboration time, but that should no longer be a concern with <a href=\"https://github.com/leanprover/lean4/pull/2480\">lean4#2480</a>.</p>",
        "id": 388892549,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693794585
    },
    {
        "content": "<p>If someone were interested, they could rebase <a href=\"https://github.com/leanprover-community/mathlib4/pull/5593\">#5593</a> onto <a href=\"https://github.com/leanprover-community/mathlib4/pull/6910\">#6910</a> (which is the PR that brings <a href=\"https://github.com/leanprover/lean4/pull/2480\">lean4#2480</a> to mathlib), and then check the elaboration time issue again.</p>",
        "id": 388893202,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693794934
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span><br>\n(I hope I ping'd the right person)</p>",
        "id": 388895545,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693796287
    },
    {
        "content": "<p>Thanks for the ping. I've been busy with travel lately, but I'd be glad to benchmark the elaboration time and add an option to build <code>Mathlib.Tactic</code> over the weekend.</p>",
        "id": 388936397,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1693816747
    }
]