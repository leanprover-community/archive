[
    {
        "content": "<p>Hi, consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">aEqc</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">leAEqLeC</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">LE.le</span> <span class=\"n\">aEqc</span>\n    <span class=\"k\">have</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span> <span class=\"n\">leAEqLeC</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n</code></pre></div>\n<p>It works fine, but if I try to create a macro for <code>LE.le c b</code>, it seems to try to expand the definition of <code>Int.le</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">aEqc</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">macro1</span> <span class=\"o\">:=</span> <span class=\"n\">LE.le</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n  <span class=\"k\">have</span> <span class=\"n\">leAEqLeC</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">LE.le</span> <span class=\"n\">aEqc</span>\n  <span class=\"k\">have</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">macro1</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span> <span class=\"n\">leAEqLeC</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- error</span>\n  <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n</code></pre></div>\n<p>the error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">congr</span> <span class=\"n\">leAEqLeC</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">leAEqLeC</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">LE.le</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">LE.le</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">LE.le</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Int.NonNeg</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Is this the intended behavior? Is there an alternative for defining macros inside the tactic block that would avoid this? Thanks</p>",
        "id": 394870993,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1696434918
    },
    {
        "content": "<p>Higher order unification is failing here -- higher order unification is algorithmically undecidable so I guess it's expected to fail sometimes. Giving <code>congr</code> a hint fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">macro1</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">fâ‚‚</span> <span class=\"o\">:=</span> <span class=\"n\">LE.le</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">leAEqLeC</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 394876320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696436749
    },
    {
        "content": "<p>interesting, I guess I will try to avoid <code>congr</code> and use <code>congrArg</code> then</p>",
        "id": 394876731,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1696436902
    },
    {
        "content": "<p>I should say that I have absolutely no idea where <code>Int.NonNeg</code> is coming from :-)</p>",
        "id": 394877497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696437159
    },
    {
        "content": "<p>I believe it is expanding the definition of <code>LE.le</code> for integers, for some reason</p>",
        "id": 394877588,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1696437208
    },
    {
        "content": "<p>For higher order unification you're relying on heuristics which will inevitably be wrong sometimes.</p>\n<p>I think your explanation is correct:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LE</span> <span class=\"n\">Int</span> <span class=\"c1\">-- Int.instLEInt</span>\n<span class=\"k\">#print</span> <span class=\"n\">Int.instLEInt</span> <span class=\"c1\">-- Int.le</span>\n<span class=\"k\">#print</span> <span class=\"n\">Int.le</span> <span class=\"c1\">-- Int.NonNeg!</span>\n</code></pre></div>",
        "id": 394877886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696437327
    },
    {
        "content": "<p>I should say that let bindings have nothing to do with macros :)</p>",
        "id": 394878150,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696437411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes</span> has marked this topic as resolved.</p>",
        "id": 394886020,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696440439
    }
]