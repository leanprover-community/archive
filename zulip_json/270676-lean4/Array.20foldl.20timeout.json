[
    {
        "content": "<p>Continuing tests with Lean data structures, I came across the following timeout with an array of 1 Billion natural <code>1</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constArray</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkArray</span> <span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arraySum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">target₁</span> <span class=\"o\">:=</span> <span class=\"n\">arraySum</span> <span class=\"n\">constArray</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {target₁}!\"</span>\n</code></pre></div>\n<p>Running with latest nightly, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Main\n<span class=\"o\">[</span><span class=\"m\">1</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Performance\n<span class=\"o\">[</span><span class=\"m\">4</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>performance\n<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span><span class=\"w\">    </span><span class=\"m\">193754</span><span class=\"w\"> </span>killed<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"m\">4</span>.88s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">92</span>.96s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">92</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>:45.32<span class=\"w\"> </span>total\n</code></pre></div>\n<p>I presume this kill is some kind of timeout from the runtime, because I did not see a segfault (can someone confirm?).  If instead of a <code>foldl</code> I manually iterate over array entries and sum them, I get the same timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">manualSum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"k\">do</span>\n    <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">sum</span> <span class=\"bp\">+</span> <span class=\"n\">i</span>\n  <span class=\"n\">return</span> <span class=\"n\">sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">target₁</span> <span class=\"o\">:=</span> <span class=\"n\">manualSum</span> <span class=\"n\">constArray</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span><span class=\"w\">    </span><span class=\"m\">194957</span><span class=\"w\"> </span>killed<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"m\">4</span>.70s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">77</span>.73s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">93</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>:28.15<span class=\"w\"> </span>total\n</code></pre></div>\n<p>The curious thing is, if I reduce the array size from 1 Billion to 100 Million, the above code executes successfully in approximately 1.2 seconds on my machine.  So something is happening when accessing the high indices.  Is Array element access not constant time?</p>",
        "id": 377901966,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690137248
    },
    {
        "content": "<p>this most likely means you are running out of memory</p>",
        "id": 377904092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690137799
    },
    {
        "content": "<p>But I have 16 Gigabytes and I am not running anything, my PC is quite capable.</p>",
        "id": 377904300,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690137859
    },
    {
        "content": "<p>the array there is about 8 gigabytes, two copies of it are enough to run out of RAM</p>",
        "id": 377904424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690137902
    },
    {
        "content": "<p>I see, is there no swapping happening automatically?</p>",
        "id": 377904545,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690137933
    },
    {
        "content": "<p>that depends on the OS settings</p>",
        "id": 377904594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690137948
    },
    {
        "content": "<p>Also, why are there two copies?  Is the fold not happening in place?</p>",
        "id": 377904699,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690137971
    },
    {
        "content": "<p>It is likely to be preinitialized and then copied at \"runtime\"</p>",
        "id": 377904761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690137998
    },
    {
        "content": "<p>you can avoid this behavior using <code>set_option compiler.extract_closed false</code></p>",
        "id": 377904803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690138013
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 377904856,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690138030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> has marked this topic as resolved.</p>",
        "id": 377904871,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690138034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> has marked this topic as unresolved.</p>",
        "id": 377905802,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690138281
    },
    {
        "content": "<p>I added this option to the main file, but it is still getting killed.  Weird.</p>",
        "id": 377905904,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690138311
    },
    {
        "content": "<p>what is the full program?</p>",
        "id": 377906000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690138335
    },
    {
        "content": "<p>you probably need it on <code>target1</code></p>",
        "id": 377906059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690138350
    },
    {
        "content": "<p>and <code>constArray</code></p>",
        "id": 377906166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690138382
    },
    {
        "content": "<p>Sorry for the delay, my computer crashed.</p>\n<p>The full program is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Performance.lean</span><span class=\"o\">:</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span>\n<span class=\"kd\">def</span> <span class=\"n\">constArray</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkArray</span> <span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">--def arraySum (a : Array Nat) : Nat :=</span>\n<span class=\"c1\">--  Array.foldl (. + .) 0 a</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span>\n<span class=\"kd\">def</span> <span class=\"n\">manualSum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"k\">do</span>\n    <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">sum</span> <span class=\"bp\">+</span> <span class=\"n\">i</span>\n  <span class=\"n\">return</span> <span class=\"n\">sum</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span>\n<span class=\"kd\">def</span> <span class=\"n\">target₁</span> <span class=\"o\">:=</span> <span class=\"n\">manualSum</span> <span class=\"n\">constArray</span>\n\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">Performance</span><span class=\"bp\">»</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {target₁}!\"</span>\n</code></pre></div>\n<p>I am not really sure how these options work or where I can read about them.</p>",
        "id": 377907927,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690138877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"577163\">@Ioannis Konstantoulas</span>  Have you tried creating a similar array in C? I imagine it may be possible that allocator may be having some trouble figuring out how to properly page such a large contiguous data structure.</p>",
        "id": 377930649,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690145953
    },
    {
        "content": "<p>FWIW when I run the last thing you wrote on my machine with 48 gigs it works and has a peak memory usage of ~16GB</p>",
        "id": 377932184,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1690146744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.20foldl.20timeout/near/377930649\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span>  Have you tried creating a similar array in C? I imagine it may be possible that allocator may be having some trouble figuring out how to properly page such a large contiguous data structure.</p>\n</blockquote>\n<p>Hello; C does not have a problem with this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#define SIZE 1000000000</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">((</span><span class=\"n\">SIZE</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Malloc failed!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">SIZE</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">SIZE</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt;<span class=\"w\"> </span>gcc<span class=\"w\"> </span>myar.c<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>./a.out\n<span class=\"m\">1000000000</span>\n</code></pre></div>",
        "id": 378095988,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690197265
    },
    {
        "content": "<p>Note: although I allocated with <code>sizeof(int)</code>, the same success occurs if I change everything to <code>long</code>.</p>",
        "id": 378102775,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690198540
    },
    {
        "content": "<p>In C, <code>int</code> is a 32-bit value. In Lean, <code>Nat</code> is an arbitrary precision number. Moreover, in the current Lean runtime, the <code>Array</code> type is represented as an array of pointers / boxed values. The types <code>ByteArray</code> and <code>FloatArray</code> are represented as arrays of scalar values.</p>",
        "id": 378142872,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1690205390
    },
    {
        "content": "<p>The manual led me to believe that for not too big <code>Nat</code>s, the storage is in an 8 byte <code>long</code>, so a 1 Billion element array of <code>(1 : Nat)</code> should take approximately 8 GB of RAM, plus the data structure overhead.  But if the Array is a collection of pointers to values elsewhere allocated, it makes sense that the total usage will be double that, amounting to approximately 16 GB.</p>\n<p>So, currently, to create an array of ints and perform integer or modular arithmetic on it, would it make sense to create a large <code>ByteArray</code>, assemble <code>UIntXX</code> values out of consecutive array elements, perform arithmetic, and decompose back and store into bytes?</p>",
        "id": 378172710,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690210379
    },
    {
        "content": "<p>If all values in the array are <code>1</code> and less than 2^63 (?), they will be stored inside the tagged \"pointers\" and won't consume twice as much memory.</p>",
        "id": 378197583,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1690214691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587706\">Daniil Kisel</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.20foldl.20timeout/near/378197583\">said</a>:</p>\n<blockquote>\n<p>If all values in the array are <code>1</code> and less than 2^63 (?), they will be stored inside the tagged \"pointers\" and won't consume twice as much memory.</p>\n</blockquote>\n<p>Well, then why are we seeing 16 GB of memory consumption in the above code, even with the <code>compiler.extract_closed false</code> option?</p>",
        "id": 378203909,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690215914
    },
    {
        "content": "<p>Maybe array doubles the capacity of the underlying array? Looking at valgrind, <code>compiler.extract_closed</code> doesn't affect memory consumption (because the array is not modified), and while array of size 2^20 uses <code>+ 20508KB</code>, with size 2^20 + 1 it uses <code>+ 32796KB</code> (where + means compared to allocating array with one element).</p>\n<p>Though <code>lean_mk_array</code> doesn't extend capacity, so my guess is wrong. Maybe the cause is in the allocator lean uses? Wrong again, it uses <code>malloc</code> for allocations bigger than 4096.</p>",
        "id": 378213977,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1690218035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"577163\">@Ioannis Konstantoulas</span> have you tried the C version with <code>(SIZE)*sizeof(size_t)</code> instead of <code>(SIZE)*sizeof(int)</code>?</p>",
        "id": 378220708,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1690219499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587706\">Daniil Kisel</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.20foldl.20timeout/near/378220708\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> have you tried the C version with <code>(SIZE)*sizeof(size_t)</code> instead of <code>(SIZE)*sizeof(int)</code>?</p>\n</blockquote>\n<p>Yes, there is no difference; I also tested a bigger array to run out of memory deliberately, and the C program above automatically used swap space and terminated successfully.</p>",
        "id": 378238906,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690223852
    },
    {
        "content": "<p>Using swap isn't exactly a choice of your program, the OS can decide to swap. However if you allocate too much too fast it can also decide to murder your process because its swapping cant keep up</p>",
        "id": 378240906,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690224372
    }
]