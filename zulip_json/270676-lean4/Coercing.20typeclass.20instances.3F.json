[
    {
        "content": "<p>I need help with the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. This is based on me trying to work with sets and pushing away finiteness issues until they are really needed at multiple places. I am not comfortable with <code>HEq</code> wizardry yet. Is that what I need here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">instFin</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Set.Finite.intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">instFin</span> <span class=\"c1\">-- fails. ↑s is `@Set.Elem Q s`, the set of elements of s</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">instFin</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Set.Finite.intro</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Set.Elem</span> <span class=\"n\">Q</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">instFin</span><span class=\"o\">)</span> <span class=\"c1\">-- also fails. I can see why. In the lhs of `h`, `s` already got coerced</span>\n\n<span class=\"c1\">-- Additional question below</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">instFin</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Set.Finite.intro</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Set.Elem</span> <span class=\"n\">Q</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fintype.mk</span><span class=\"o\">)</span> <span class=\"c1\">-- why doesn't `apply` produce goals for implicit types?</span>\n</code></pre></div>",
        "id": 407357479,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702347550
    },
    {
        "content": "<p>The idiomatic expression is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s.toFinite</span>\n</code></pre></div>",
        "id": 407369589,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702351148
    },
    {
        "content": "<p>Thanks a lot :) that works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 407369930,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702351261
    }
]