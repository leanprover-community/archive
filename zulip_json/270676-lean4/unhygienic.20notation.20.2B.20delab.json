[
    {
        "content": "<p>I'm doing some PL formalization (a mistake). I want to have an unhygienic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Entails</span>\n</code></pre></div>\n<p>before declaring the <code>Entails</code> type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Entails</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Bunch</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Typ</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>But after that declaration, I'd like an auto-generated delaborator for the syntax... how to do it? It seems like making the notation <code>local</code> causes the inductive to fail to compile (will put together an MWE)</p>",
        "id": 405704488,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701642974
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Entails</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Entails</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"s2\">\"hi\"</span> <span class=\"bp\">⊢</span> <span class=\"s2\">\"hi\"</span>  <span class=\"c1\">-- unexpected token '⊢'; expected command</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Entails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"s2\">\"bye\"</span> <span class=\"bp\">⊢</span> <span class=\"s2\">\"what\"</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405704858,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701643309
    },
    {
        "content": "<p>The <code>in</code> combinator can be very confusing: it's wrapping both commands in a fresh section, so the <code>inductive</code> never sees that local notation.</p>",
        "id": 405704999,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701643416
    },
    {
        "content": "<p>i .. i see</p>",
        "id": 405705100,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701643472
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Entails</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Entails</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"s2\">\"hi\"</span> <span class=\"bp\">⊢</span> <span class=\"s2\">\"hi\"</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Entails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"s2\">\"bye\"</span> <span class=\"bp\">⊢</span> <span class=\"s2\">\"what\"</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>works. thanks kyle :)</p>",
        "id": 405705128,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701643504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> That construct is also evil, but it works exactly as one would hope so it's hard to say that it's wrong. What actually happens when you do <code>set_option hygiene false in section</code> is that it expands, as normal, to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kn\">section</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but the <code>section</code> you wrote matches with the <code>end</code> from the macro expansion resulting in an empty section, and the first <code>section</code> from the macro expansion matches with the <code>end</code> that you wrote further down. It all works out, but it's a bit reminiscent of C preprocessor macros that expand to an open brace...</p>",
        "id": 405742816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701664036
    },
    {
        "content": "<p>my alternative suggestion would be to just write <code>section; set_option hygiene false</code> instead</p>",
        "id": 405742964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701664106
    },
    {
        "content": "<p>I suppose a concrete thing to point to for why this is maybe not optimal is that you can't write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kn\">section</span> <span class=\"n\">foo</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 405743184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701664226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unhygienic.20notation.20.2B.20delab/near/405743184\">said</a>:</p>\n<blockquote>\n<p>I suppose a concrete thing to point to for why this is maybe not optimal is that you can't write</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kn\">section</span> <span class=\"n\">foo</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Would it be unreasonable to change the behavior of <code>in</code> to actually work the way one intuitively expects in this case (i.e. when followed by a <code>section</code>)?</p>",
        "id": 405778674,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701680767
    },
    {
        "content": "<p>I would like to overhaul the whole implementation, I don't think the mini section is the right semantics for quite a lot of cases of <code>in</code></p>",
        "id": 405779817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701681142
    },
    {
        "content": "<p>Something that would be nice is if the commands in <code>in</code> could know they are in <code>in</code>, like in <code>set_attribute [instance] Foo in ...</code> you'd want that to either raise an error that this is certainly not what you want or act like <code>set_attribute [local instance] Foo</code> automatically.</p>",
        "id": 405900579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701719278
    },
    {
        "content": "<p>(Maybe you're thinking about overhauling it by making it so what comes before <code>in</code> is a new class of commands, in which case this is more straightforward. Otherwise, there would need to be some CommandElabM state recording whether we're in an <code>in</code>.)</p>",
        "id": 405900703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701719328
    }
]