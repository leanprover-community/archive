[
    {
        "content": "<p>This following minimum example crashes Lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">listify</span> <span class=\"o\">(</span><span class=\"n\">tys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tys.map</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think this should type check just fine. But Lean gave the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">ec941735c80d</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">_private.Lean.Compiler.LCNF.CompilerM.0.Lean.Compiler.LCNF.normFVarImp</span> <span class=\"n\">Lean.Compiler.LCNF.CompilerM</span><span class=\"o\">:</span><span class=\"mi\">236</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">LCNF</span> <span class=\"n\">substitution</span> <span class=\"n\">of</span> <span class=\"n\">free</span> <span class=\"kd\">variable</span> <span class=\"k\">with</span> <span class=\"n\">expression</span> <span class=\"n\">List.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 391266442,
        "sender_full_name": "Paul Mure",
        "timestamp": 1694813105
    },
    {
        "content": "<p>It works fine if you add <code>noncomputable</code> (i.e., the crash is in the compiler, but I guess you can see that in the message)</p>",
        "id": 391268242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694814105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"mi\">7</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(lean_panic_fn+0x9e)[0x7f746091743e]</span>\n  <span class=\"mi\">8</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l___private_Lean_Compiler_LCNF_CompilerM_0__Lean_Compiler_LCNF_normLetValueImp+0x110)[0x7f745ff7ef00]</span>\n  <span class=\"mi\">9</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Internalize_internalizeLetDecl+0x1aa)[0x7f745ff4b7aa]</span>\n <span class=\"mi\">10</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Internalize_internalizeCode+0x6f)[0x7f745ff4c95f]</span>\n <span class=\"mi\">11</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Array_mapMUnsafe_map___at_Lean_Compiler_LCNF_Internalize_internalizeCode___spec__3+0x277)[0x7f745ff4f397]</span>\n <span class=\"mi\">12</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Internalize_internalizeCode+0x1719)[0x7f745ff4e009]</span>\n <span class=\"mi\">13</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_mkSpecDecl_go+0xcb7)[0x7f74600df007]</span>\n <span class=\"mi\">14</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_mkSpecDecl+0x2ea)[0x7f74600e046a]</span>\n <span class=\"mi\">15</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_specializeApp_x3f___lambda__3+0x652)[0x7f74600e72f2]</span>\n <span class=\"mi\">16</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_specializeApp_x3f___lambda__4+0xc67)[0x7f74600e9047]</span>\n <span class=\"mi\">17</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_specializeApp_x3f___lambda__5+0x720)[0x7f74600e98b0]</span>\n <span class=\"mi\">18</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_specializeApp_x3f___lambda__6+0x715)[0x7f74600ea225]</span>\n <span class=\"mi\">19</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_specializeApp_x3f___lambda__7+0x25b)[0x7f74600eac5b]</span>\n <span class=\"mi\">20</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_specializeApp_x3f+0x26d)[0x7f74600eb17d]</span>\n <span class=\"mi\">21</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_visitCode+0x17a)[0x7f74600e3dda]</span>\n <span class=\"mi\">22</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Specialize_main+0x4c9)[0x7f74600ef989]</span>\n <span class=\"mi\">23</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_Decl_specialize+0x111)[0x7f74600f0b81]</span>\n <span class=\"mi\">24</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Array_foldlMUnsafe_fold___at_Lean_Compiler_LCNF_specialize___elambda__1___spec__1+0x1a0)[0x7f74600f1030]</span>\n <span class=\"mi\">25</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/../lib/lean/libleanshared.so(l_Lean_Compiler_LCNF_specialize___elambda__1+0x245)[0x7f74600f1595]</span>\n</code></pre></div>\n<p>it's a bug in the specializer</p>",
        "id": 391278878,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1694818581
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">listify</span> <span class=\"o\">(</span><span class=\"n\">tys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tys.map</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>Further minimised</p>",
        "id": 391279206,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1694818711
    },
    {
        "content": "<p>Does anyone know if there is an existing issue filed already?</p>",
        "id": 391290633,
        "sender_full_name": "Paul Mure",
        "timestamp": 1694823285
    },
    {
        "content": "<p>Looks like it is alredy an active <a href=\"https://github.com/leanprover/lean4/issues/2285\">issue</a>.</p>",
        "id": 391292289,
        "sender_full_name": "Paul Mure",
        "timestamp": 1694824032
    }
]