[
    {
        "content": "<p>There have been multiple situations now where we've put <code>noncomputable</code> on a definition in mathlib4 not because it uses <code>choice</code>, but because it takes too long for the compiler to compile. Is there a tracking issue for this? Should we be filing issues for when the kernel check is quick but compilation is slow?</p>",
        "id": 392006644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695163616
    },
    {
        "content": "<p>Perhaps the answer to my first question is <a href=\"https://github.com/leanprover-community/mathlib4/pull/7103\">#7103</a></p>",
        "id": 392007548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695164191
    },
    {
        "content": "<p>It's great if Mathlib can catch these issues before programming projects get big enough to run into them <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 392011020,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695166540
    },
    {
        "content": "<p>As an extreme example; the <code>noncomputable</code> keyword in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7265\">#7265</a> makes things 30x faster</p>",
        "id": 392013382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695168139
    },
    {
        "content": "<p>Make your lean code 30x faster with this one weird trick</p>",
        "id": 392014548,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695168857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputable.20for.20performance/near/392011020\">said</a>:</p>\n<blockquote>\n<p>It's great if Mathlib can catch these issues before programming projects get big enough to run into them <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>I wonder if programs that are actually designed to be run would ever run in to these issues though? It seems these issues come from trying to generate code from highly nontrivial mathematical definitions which are fairly nested, which is probably not super nice code at all</p>",
        "id": 392014795,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695168970
    },
    {
        "content": "<p>I don't think anyone has attempted a minimization yet</p>",
        "id": 392014894,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695169033
    },
    {
        "content": "<p>Are these any trace diagnostics available to find out which parts of the compiler are to blame here?</p>",
        "id": 392074746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695201260
    },
    {
        "content": "<p>you can trace the new compiler with <code>set_option trace.Compiler true</code> and get proper nested timings etc.</p>",
        "id": 392079675,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695203045
    },
    {
        "content": "<p>If it's in the new compiler my bet would be that the simplifier is slow.</p>",
        "id": 392079719,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695203062
    },
    {
        "content": "<p>Is \"the simplifier\" unrelated to <code>simp</code>?</p>",
        "id": 392081591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695203761
    },
    {
        "content": "<p>Yes, although it too is called simp in the compiler trace^^</p>",
        "id": 392087875,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695205840
    },
    {
        "content": "<p>(the terminology is from GHC, and perhaps even older than that)</p>",
        "id": 392096211,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695209036
    }
]