[
    {
        "content": "<p>Hi all! Lean4 newbie and Coq expert here. I'm wondering if Lean4 plans to support real logic-programming-style backtracking across tactics, to fix the 2nd/3rd example (like in Coq &gt;= 8.4):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">repeat</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">repeat</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">mplus</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span> <span class=\"c1\">-- pseudocode</span>\n</code></pre></div>\n<p>I'm aware of <code>MonadBacktrack</code> and TC search, but I'm not sure either's an answer — and while in mathlib this might not matter, it seems useful enough in syntactic proofs that are useful in proof theory / programming languages / (metatheory of) program verification</p>",
        "id": 325708858,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675452459
    },
    {
        "content": "<p>I also appreciate that sort-of backtracking is exponential, but that doesn't always make it \"too\" slow</p>",
        "id": 325709938,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675452850
    },
    {
        "content": "<p>(what's \"too slow\" varies, but in practice I'm bothered by tactics taking more than &gt;= 0.1s)</p>",
        "id": 325710385,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675453022
    },
    {
        "content": "<p><code>mplus</code> is spelled <code>first</code> btw</p>",
        "id": 325710912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675453213
    },
    {
        "content": "<p>not quite, <code>first</code> isn't a sufficient <code>mplus</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 325711394,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675453414
    },
    {
        "content": "<p>Can you describe in words how you want the search to proceed?</p>",
        "id": 325711465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675453436
    },
    {
        "content": "<p>it's not immediately obvious to me what semantics you want from that syntax</p>",
        "id": 325711546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675453453
    },
    {
        "content": "<p>One way to do a recursive backtracking search here is with a recursive macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"stuff\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">stuff</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">assumption</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span><span class=\"bp\">;</span> <span class=\"n\">stuff</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"bp\">;</span> <span class=\"n\">stuff</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">stuff</span>\n</code></pre></div>",
        "id": 325711588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675453471
    },
    {
        "content": "<p>I think there is a way to do this with one of the repeat combinators but I haven't thought too hard about it</p>",
        "id": 325711642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675453497
    },
    {
        "content": "<p>you can also use a multiply-defined macro to similar effect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"stuff\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">stuff</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">stuff</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">Or.inl</span><span class=\"bp\">;</span> <span class=\"n\">stuff</span><span class=\"o\">))</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">stuff</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"bp\">;</span> <span class=\"n\">stuff</span><span class=\"o\">))</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">stuff</span>\n</code></pre></div>",
        "id": 325711825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675453552
    },
    {
        "content": "<p>There is certainly no difficulty in defining a combinator that has backtracking behavior, but <code>&lt;;&gt;</code> and <code>repeat</code> do not backtrack</p>",
        "id": 325712270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675453689
    },
    {
        "content": "<p>applying <code>mplus (a; b) &lt;;&gt; c</code> on a goal would attempt <code>a</code>, then attempt <code>c</code>, and if that fails backtrack to try <code>b</code> then <code>c</code>.</p>",
        "id": 325712354,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675453720
    },
    {
        "content": "<p>If there is no difficulty, can you define <code>mplus</code>? Your examples encode the specific example, but I'm not sure they generalize</p>",
        "id": 325712577,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675453804
    },
    {
        "content": "<p>I guess it's possible to define <code>LogicTacticM</code> by stacking an actual logic monad with backtracking on top of <code>TacticM</code>, lifting all tactics to <code>LogicTacticM</code>, and adapting tactics to be multi-success where appropriate, but that seems invasive.</p>",
        "id": 325713290,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675454067
    },
    {
        "content": "<p>This does what your description says, but it doesn't seem to be correct, since there is no recursion involved</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"mplus \"</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">colGe</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n  <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">mplus</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">after</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"n\">tac.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">after</span><span class=\"o\">)))</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mplus</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 325713656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675454231
    },
    {
        "content": "<p>while your workaround lets me define a new tactic for any fixed <code>mplus (a; b) &lt;;&gt; c</code>, but I don't see how to write a first-class <code>mplus (a; b)</code> — the correct denotational semantics supports returning multiple successes.</p>",
        "id": 325713762,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675454272
    },
    {
        "content": "<p>Note that we have to take over the <code>&lt;;&gt;</code> tactic here, since as I said that tactic doesn't backtrack and the way you have nested things makes it impossible for <code>&lt;;&gt;</code> to do its work after <code>mplus</code> is done</p>",
        "id": 325713867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675454306
    },
    {
        "content": "<p>You could have a special <code>backtrackingTactic</code> syntax class and define all these combinators, but as you say that would be invasive. Do you have an example that can't be trivially rewritten so that the repetition can't be lifted to an explicit tactic combinator call?</p>",
        "id": 325714129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675454418
    },
    {
        "content": "<p>That is, this is easy if you allow putting <code>mplus</code> as the root combinator and nesting <code>&lt;;&gt; c</code> inside it, the problem is only with having <code>mplus</code> passing multiple results and having everything after it get transparently run multiple times. This was an explicit design decision of the tactic language; we were aware of this behavior in Isabelle and Coq and chose not to replicate it because it leads to more difficult to understand control flow</p>",
        "id": 325714612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675454616
    },
    {
        "content": "<p>are you asking for evidence that (pure) Prolog doesn't trivially translate to functional programming? I'll admit I don't have a compelling one ready, mostly because I'd have to reverse-engineer old proofs</p>",
        "id": 325715092,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675454793
    },
    {
        "content": "<p>I think the general version I posted above is equivalent in power to your <code>mplus (a; b)</code>, you just have to pass the rest of the block (the scope of stuff that should be run multiple times) in the <code>=&gt;</code>, CPS style</p>",
        "id": 325715128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675454806
    },
    {
        "content": "<p>ah, that could work</p>",
        "id": 325715194,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675454835
    },
    {
        "content": "<p>yeah, I buy that CPS is systematically sufficient. I'd have to reimplement needed tactics (here, <code>constructor</code> and <code>repeat</code>), but it should be doable as needed.</p>",
        "id": 325715611,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675454977
    },
    {
        "content": "<p>do I understand correctly that <code>constructor</code> nondeterministically picks a constructor to apply and <code>repeat</code> nondeterministically decides how many times to iterate?</p>",
        "id": 325715837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675455050
    },
    {
        "content": "<p>I'm not sure exactly how <code>repeat</code> interacts with the nondeterminism here</p>",
        "id": 325716026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675455116
    },
    {
        "content": "<p>I expect Coq's <code>repeat</code> is greedy, but <code>constructor</code> is multi-success</p>",
        "id": 325716035,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675455118
    },
    {
        "content": "<p>but if you want to make a language out of this I think you could generalize the <code>mplus</code> combinator above to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"nondet\"</span> <span class=\"n\">nondetTactic</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"constructor\"</span> <span class=\"o\">:</span> <span class=\"n\">nondetTactic</span>\n<span class=\"n\">syntax</span>  <span class=\"s2\">\"any\"</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">colGe</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nondetTactic</span>\n<span class=\"c1\">-- etc</span>\n</code></pre></div>",
        "id": 325716301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675455217
    },
    {
        "content": "<p>thank you; I'll need a bunch of reading to follow that, but this is good enough for now</p>",
        "id": 325716658,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675455358
    },
    {
        "content": "<p>I guess the reading will need \"Beyond Notations: Hygienic Macro Expansion for Theorem Proving Languages\" and/or <a href=\"https://leanprover.github.io/lean4/doc/macro_overview.html\">https://leanprover.github.io/lean4/doc/macro_overview.html</a>.</p>\n<p>I hope I won't need the videos in <a href=\"https://leanprover.github.io/lean4/doc/elaborators.html\">https://leanprover.github.io/lean4/doc/elaborators.html</a>...</p>",
        "id": 325718599,
        "sender_full_name": "Paolo G. Giarrusso",
        "timestamp": 1675456168
    },
    {
        "content": "<p>Hey Paolo! You might also find the community-authored <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/\">https://github.com/arthurpaulino/lean4-metaprogramming-book/</a> useful</p>",
        "id": 325722529,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675457630
    }
]