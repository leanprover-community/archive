[
    {
        "content": "<p>After you write <code>by</code> or <code>· </code> (focus on 1 goal), you often look at the goal state for a while before deciding what tactic to apply next. It is annoying that these two pieces of syntax are illegal by themselves, since they require a nonempty sequence of tactics to follow. This has 2 negative consequences:</p>\n<ul>\n<li>A distracting parser error is shown</li>\n<li>Potential other errors are not shown</li>\n</ul>\n<p>Suggestion: can the parser allow <code>by</code> or <code>· </code> (focus) followed by an empty sequence of tactics?</p>\n<p>The following MWE shows some examples of parser errors even though there is a \"more important\" error to show in both cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">doesntExist</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 398765544,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698353510
    },
    {
        "content": "<p>I have seen this \"don't report the important error until much later than expected\" phenomenon several times before, but it's only now that I understand what's going on! Certainly after the dot my muscle memory now immediately types <code>sorry</code> and this is probably why.</p>",
        "id": 398767780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698354466
    },
    {
        "content": "<p>This has been suggested before but this is a nice analysis of further issues. I'm not aware of any downsides, it just hasn't been done so far.</p>",
        "id": 398768469,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698354779
    },
    {
        "content": "<p>Yes please! Other lists of 1 or more that should be 0 or more:</p>\n<ul>\n<li><code>def foo : type where</code></li>\n<li><code>mutual end</code></li>\n<li><code>variable</code></li>\n<li><code>universe</code></li>\n<li><code>export Foo ()</code></li>\n<li><code>open Foo ()</code></li>\n<li><code>open Foo hiding</code></li>\n<li><code>open Foo renaming</code></li>\n<li><code>open</code></li>\n<li><code>attribute [attr]</code></li>\n<li><code>do {}</code></li>\n<li><code>do</code></li>\n<li><code>if cond then</code> &lt;-- this one should probably be a warning, unindented code after <code>if cond then</code> is almost certainly a bug</li>\n</ul>\n<p>In most cases, the nullary case does nothing, but it should be a warning/error at elaboration time, not a parse error (since this generally results in degraded errors or spuriously grabbing the next token out of desperation)</p>",
        "id": 398806355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698374970
    },
    {
        "content": "<p>Is this related to needing to put <code>sorry</code> after the statement of a theorem before any errors in the way the theorem is stated are shown?</p>",
        "id": 398806889,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1698375234
    },
    {
        "content": "<p>And needing to go to the correct indentation before the next goal is shown?</p>",
        "id": 398807189,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1698375368
    },
    {
        "content": "<p>I guess yes on the first, maybe not on the second.</p>",
        "id": 398807684,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1698375612
    }
]