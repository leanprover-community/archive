[
    {
        "content": "<p>I'm looking for a tactic that allows me to make an assertion - a cut tactic.  Seems like \"have\" is not a tactic - must be something  similar.</p>",
        "id": 340478648,
        "sender_full_name": "James Caldwell",
        "timestamp": 1678315481
    },
    {
        "content": "<p>it is a tactic and a term</p>",
        "id": 340478899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678315581
    },
    {
        "content": "<p>the answer to your question is <code>have</code></p>",
        "id": 340478920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678315593
    },
    {
        "content": "<p>OK - thanks.  I hate being so dense.</p>",
        "id": 340478984,
        "sender_full_name": "James Caldwell",
        "timestamp": 1678315634
    },
    {
        "content": "<p>I prefer the tactic <code>have</code> that comes from <code>Mathlib.Tactic.Have</code> which is afaik different from the one in the core.</p>",
        "id": 340561843,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678356766
    },
    {
        "content": "<p>the <code>have</code> from mathlib is an addition to the one from core, it doesn't do anything to the original</p>",
        "id": 340562634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678356985
    },
    {
        "content": "<p>the original is <code>have : ty := e</code> or <code>have : ty := by tac</code>, the one from mathlib is <code>have : ty</code> which produces a subgoal which can be proved by <code>. tac</code></p>",
        "id": 340562810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678357042
    },
    {
        "content": "<p>Can I use the new <code>have</code> with a proof term without writing <code>exact</code> please?</p>",
        "id": 340565642,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678357666
    },
    {
        "content": "<p>that's <code>have : ty := e</code></p>",
        "id": 340574317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678359732
    },
    {
        "content": "<p>you don't need mathlib for that</p>",
        "id": 340574356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678359744
    },
    {
        "content": "<p>I mean, if the Mathlib's <code>have</code> is imported, does the <code>:=</code> notation still work?</p>",
        "id": 340574476,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678359784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Does.20.22have.22.20work.20in.20Lean4/near/340562634\">said</a>:</p>\n<blockquote>\n<p>the <code>have</code> from mathlib is an addition to the one from core, it doesn't do anything to the original</p>\n</blockquote>",
        "id": 340576557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678360321
    },
    {
        "content": "<p>You mean; the elaborator automatically finds out which of them I am using?</p>",
        "id": 340576899,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678360404
    },
    {
        "content": "<p>They are different tactics with different syntax. (Unlike lean 3, in lean 4 the whole tactic parse can be used to distinguish different tactics. They don't have to start with unique words; this is only conventional.)</p>",
        "id": 340578986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678360961
    },
    {
        "content": "<p>the mathlib tactic has the syntax <code>\"have\" name? [: expr]?</code> while the lean tactic has the syntax <code>\"have\" name? [: expr?] := expr</code></p>",
        "id": 340579269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678361045
    }
]