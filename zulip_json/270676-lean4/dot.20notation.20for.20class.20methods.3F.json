[
    {
        "content": "<p>Consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a1</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">A.a</span> <span class=\"o\">()</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">def</span> <span class=\"n\">a2</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"o\">()</span> <span class=\"c1\">-- error: invalid dotted identifier notation, expected type is not of the form (... → C ...) where C is a constant α</span>\n</code></pre></div>\n<p>Should the dot notation feature also resolve methods in scope for the result type (in this case, methods from A α) automatically?</p>",
        "id": 290415830,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658428562
    },
    {
        "content": "<p>How would you define \"methods in scope\"?</p>",
        "id": 290416214,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658428752
    },
    {
        "content": "<p>I am out of my depth here, but my initial intuition would be to consider only the classes explicitly declared for the return type above.</p>",
        "id": 290417743,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658429374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span>  so you want it to automatically open the namespace? wouldn't that be a bit going against the point of namespaces?</p>",
        "id": 290524104,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658503054
    },
    {
        "content": "<p>you can also <code>open</code> the namespace and it will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a1</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">A.a</span> <span class=\"o\">()</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">def</span> <span class=\"n\">a2</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">()</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 290524149,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658503075
    },
    {
        "content": "<p>No he wants to extend dot notation to respect type classes as well, note that he is doing <code>.a</code> instead of <code>a</code>. We already support this if we have a term: <code>.func a b c</code> and the expected type is known to be a certain <code>T</code> and <code>T.func</code> exists Lean will intelligently translate the term into <code>T.func a b c</code>. The exact point of this notation is that you do not open the namespace but that type inference figures the namespace out for you.</p>\n<p>The thing that is at question is what heuristic to use to also capture type classes on <code>T</code> instead of just functions directly declared on <code>T</code></p>",
        "id": 290524669,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658503275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> yes, exactly what <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> described.</p>\n<p>It is an extra convenience, although I am not sure about the underlying implications. So just a thought.</p>",
        "id": 290524932,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658503372
    },
    {
        "content": "<p>Note that if <code>A</code> is long and you want to avoid typing it, you can usually use dot-notation on the instance itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">LongClassName</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a1</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">LongClassName</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">i.a</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 290525795,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658503744
    },
    {
        "content": "<p>Ahh, I see. I guess in a lot of cases it coincides, right? At least when I've implemented instances like <code>ToString</code> I do so in that namespace (e.g. <code>A.toString</code>), but for derived instances or examples like yours it seems convienient</p>",
        "id": 290525823,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658503756
    },
    {
        "content": "<p>Given the previous discussion in <a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a> about having a rust style stream/iterator API I'd like to bring this point up again. Rust does have support for this type of syntax as well and that is what enables it to define its stream API in the way it does. As I see it the rust trait system comes close to our type class system so why can we not have dot notation for type class instances as proposed here?</p>\n<p>Given that both the iterator API and the dot notation of type class methods would follow the default design heuristic of: If Rust does it we can do it.</p>",
        "id": 354987618,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682979896
    },
    {
        "content": "<p>One issue with implementing this a la rust is that unlike in rust, typeclass methods don't really have a distinguished \"receiver\" argument. In fact in the example it's not even an argument being used for the lookup! (You can argue that there is a distinguished \"co-receiver\" though, since functions only have one return value.) But for a multi-arg function with a multi-type typeclass it's not really clear what to dispatch on.</p>",
        "id": 354989377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682980814
    },
    {
        "content": "<p>How does this work with regular dot notation, there is no distinguished receiver there either, no? IIRC, we take the first argument of the namespace type as receiver, maybe we do something similar here; the first (explicit) type argument to a typeclass can be it's receiver</p>",
        "id": 355065695,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1683015086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/dot.20notation.20for.20class.20methods.3F/near/354989377\">said</a>:</p>\n<blockquote>\n<p>One issue with implementing this a la rust is that unlike in rust, typeclass methods don't really have a distinguished \"receiver\" argument. In fact in the example it's not even an argument being used for the lookup! (You can argue that there is a distinguished \"co-receiver\" though, since functions only have one return value.) But for a multi-arg function with a multi-type typeclass it's not really clear what to dispatch on.</p>\n</blockquote>\n<p>That's a fair point but I'd say we can at least implement this for single argument type classes? (or even funkier: type classes that only have 1 parameter that is not an out param?) in which case (given that we know the type of  the thing that is getting \"dotted\" of course) we should be able to come up with a correct TC synthesis query? Another interesting question might be how to deal with type classes like functor? So for example when I have <code>x : Array a</code> and I do <code>x.map ...</code> the query would have to..I guess speculatively try to find instances for just <code>Array</code>? That does seem kinda hacky as well though so maybe it would be better to limit to just: Type classes that only have a single not  out param.</p>",
        "id": 355221210,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683048806
    },
    {
        "content": "<p>might have already suggested this, but I think I'd prefer if there were an annotation to register these dot notation extensions and lets you specify the argument to dot on. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"kd\">@[dotExt _ α β f c =&gt; c]</span>\n  <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span>\n  <span class=\"n\">mapConst</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>taking inspiration from termination_by clauses</p>",
        "id": 355268018,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1683062548
    },
    {
        "content": "<p>What does the underscore do here?</p>",
        "id": 355268082,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683062577
    },
    {
        "content": "<p>stand-in for <code>map</code>, but now that I think about it, if we were using the termination_by syntax you could write this as <code>@[dotExt c =&gt; c]</code> since the parameters are added right to left</p>",
        "id": 355268201,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1683062636
    },
    {
        "content": "<p>Well either way in this syntax lean should know that it is map that you are referring to since you are tagging it directly. However putting arguments like this is currently not possible iirc?</p>",
        "id": 355268346,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683062689
    },
    {
        "content": "<p>Noted. A non-annotation command would also be fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">addDotExtension</span> <span class=\"bp\">@</span><span class=\"n\">Functor.map</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 355268569,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1683062778
    },
    {
        "content": "<p>I also think having a command to register each function is very reasonable, since this is a feature that is primarily intended for <code>Std</code> and other libraries to make use of (introducing class methods to the dot namespace is an advanced feature, even if the resulting extended dot notation is a beginner feature)</p>",
        "id": 355269018,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1683063004
    }
]