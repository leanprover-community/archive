[
    {
        "content": "<p>I am confused about proof-by-term and proof-by-tactic, so let me ask some beginner questions.<br>\nI thought that \"genuine proofs\" are written in terms of terms while tactics are a kind of scripts generating them.<br>\nBut now, I am a little bit unsure about it seeing the following code where <code>show_term</code> fails in two different levels:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- \"Try this\" fails</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">f_def</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.casesOn</span> <span class=\"mi\">0</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"n\">show_term</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- `show_term` itself fails</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">f_apply</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n.casesOn</span> <span class=\"mi\">0</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> show_term -/</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.match_1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>My questions are</p>\n<ul>\n<li>Why do these <code>show_term</code> fail?</li>\n<li>Can we write the proofs of <code>f_def</code> and <code>f_apply</code> above without use of tactics?</li>\n<li>I don't doubt the soundness, but why is the failure of <code>show_term</code> acceptable in this point of view?</li>\n</ul>",
        "id": 396720741,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697349744
    },
    {
        "content": "<p><code>show_term</code> is not really at fault here, it is elaboration that is acting strangely</p>",
        "id": 396726607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697354464
    },
    {
        "content": "<p>this proof works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">f_def</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.casesOn</span> <span class=\"mi\">0</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">f</span> <span class=\"n\">f.match_1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but removing the <code>delta</code> fails</p>",
        "id": 396726623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697354485
    },
    {
        "content": "<p>I believe the reason is because these definitions have \"smart unfolding\" lemmas (<code>f._sunfold</code>) which, when present, suppress unfolding of the unapplied constant</p>",
        "id": 396726709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697354541
    },
    {
        "content": "<p>I see <code>delta</code> does the trick in <code>f_apply</code> too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">f_apply'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n.casesOn</span> <span class=\"mi\">0</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"n\">show_term</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">f</span> <span class=\"n\">f.match_1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Why doesn't <code>show_term</code> go well with <code>dsimp</code>?</p>",
        "id": 396728324,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697356037
    },
    {
        "content": "<p>it's not <code>show_term</code>, it is the re-elaboration of the term that is the issue</p>",
        "id": 396728538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356213
    },
    {
        "content": "<p>The output of all of these tactics is the term <code>Eq.refl f</code>, but if you ask the elaborator to prove that <code>Eq.refl f</code> is a proof of <code>f = fun n =&gt; n.casesOn 0 id</code> it fails (even though it really is a proof of this and the kernel will agree)</p>",
        "id": 396728589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356267
    },
    {
        "content": "<p>because it refuses to unfold <code>f</code> unapplied</p>",
        "id": 396728601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356288
    },
    {
        "content": "<p>Does adding <code>set_option pp.all in</code> before <code>show_term</code> give something that works?</p>",
        "id": 396728710,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697356375
    },
    {
        "content": "<p>the story is similar for <code>f n = ...</code> instead of <code>f = ...</code>, the smart unfolding lemma says not to unfold <code>f _</code> unless <code>_</code> unifies against one of the patterns, here <code>0</code> and <code>n+1</code></p>",
        "id": 396728717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356381
    },
    {
        "content": "<p>no it won't help, the term is just <code>Eq.refl f</code> and there is no hidden argument in there other than the type</p>",
        "id": 396728743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you mean <code>Term.elabTermEnsuringType</code> in the implementation of <code>show_term</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">showTermImpl</span><span class=\"o\">)</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"show_term_impl \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTermEnsuringType</span> <span class=\"n\">t</span> <span class=\"n\">ty</span>\n  <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"n\">addTermSuggestion</span> <span class=\"n\">tk</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">headBeta</span> <span class=\"o\">(</span><span class=\"n\">origSpan</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 396728868,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697356494
    },
    {
        "content": "<p>regarding the second example of a failure in <code>show_term</code>, it's actually the <code>no_implicit_lambda%</code> combinator that is failing</p>",
        "id": 396729014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356605
    },
    {
        "content": "<p>I don't see a particularly good reason for this, but I think the elaborator wasn't expecting to end up in this position and it's possible that one of these methods ends up re-asserting the type and failing by surprise</p>",
        "id": 396729159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356737
    },
    {
        "content": "<p>note that this also fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">f_apply</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n.casesOn</span> <span class=\"mi\">0</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n   <span class=\"n\">no_implicit_lambda</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.match_1</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 396729197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356785
    },
    {
        "content": "<p>oh wait, no the <code>dsimp</code> doesn't close the goal</p>",
        "id": 396729309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356835
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">f_apply'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n.casesOn</span> <span class=\"mi\">0</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"n\">show_term</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.match_1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works</p>",
        "id": 396729361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356879
    },
    {
        "content": "<p>it seems that <code>dsimp</code> doesn't close rfl goals wrapped in a noImplicitLambda annotation</p>",
        "id": 396729385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697356907
    },
    {
        "content": "<p>I also checked that replacing <code>show_term</code> with (redefined) <code>show_term_impl</code> also works in <code>f_apply</code>. Can you explain what <code>no_implicit_lambda%</code> does and why <code>show_term</code> uses it?</p>",
        "id": 396730046,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697357359
    },
    {
        "content": "<p><code>no_implicit_lambda%</code> prevents <code>elabTerm</code> from automatically introducing lambdas when the goal is an implicit forall type like <code>\\forall {x : Nat}, x = x</code></p>",
        "id": 396730274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697357540
    },
    {
        "content": "<p>Thank you, I think I now understand the reason of the error in <code>f_apply</code> example.<br>\nAnd as for my second question, it seems no way to write the proof of <code>f_def</code> without tactics. Is there any way to say \"please unfold this definition\" in the term-mode?</p>",
        "id": 396730946,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697358157
    },
    {
        "content": "<p><code>delta%</code> could conceivably be a term elaborator, but otherwise I think not</p>",
        "id": 396732363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697359432
    },
    {
        "content": "<p>So, I have to correct my naive picture about proof-by-term vs proof-by-tactic in the first post.</p>\n<ul>\n<li>The former is strictly weaker than the latter in view of the ability for proofs.</li>\n<li>This is because tactics not only generate terms but also convince the kernel of definitional equality.</li>\n<li>The full provability in the theoretical type system of Lean is available only with tactics.</li>\n</ul>\n<p>Are they all right?</p>",
        "id": 396756028,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697377921
    },
    {
        "content": "<p>No. You are confusing the elaborator and the kernel</p>",
        "id": 396758340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697379793
    },
    {
        "content": "<p>The theory behind Lean has no idea about tactics, tactics, at their core, generate terms of type <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs#Lean.Expr</a> which get typechecked by the kernel. In theory you can write these terms out yourself as well, always.</p>",
        "id": 396758826,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697380214
    },
    {
        "content": "<p>When you write terms in the source language, they are being elaborated and typechecked by the elaborator. This is the one that gives you the nice errors and has support for unification, inference and so on. Both term mode and tactic mode are mechanisms for talking to the elaborator, they just have slightly different syntax. Once the elaborator has decided everything is okay it creates a term and sends it to the kernel, which typechecks the term again. For the elaborator to be correct, its typechecker needs to be an underestimate of what the kernel can accept, but it need not be exactly the same, and there are some cases where it deliberately hides a definitional equality that the kernel would accept, such as when you assert an <code>@[irreducible] def</code> is equal to its unfolding.</p>",
        "id": 396759384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697380690
    },
    {
        "content": "<p>If you write a tactic or term elaborator yourself, you can choose to bypass the normal elaborator procedure and produce a term for the kernel directly without typechecking it. In this case you can get around the additional limitations of the elaborator's typechecker, but if you produce something the kernel doesn't accept then it will produce a relatively low level error and someone will report a bug in your tactic. This is a useful technique if you know your tactic will produce well typed terms and you don't want to pay the cost of two typechecks. <code>ring</code> does this because it produces potentially large terms that are correct by construction, and <code>delta</code> also does this to unfold irreducible defs and the like.</p>",
        "id": 396759720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697380938
    },
    {
        "content": "<p>So is there a source syntax for terms that get fed to the kernel directly and only?</p>",
        "id": 396760681,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697381725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you very much for the very detailed explanation. Now I see my confusion very clearly. The points are</p>\n<ul>\n<li>Any elaborator may introduce additional layer of validity, and even the default term elaborator used by <code>def</code>/<code>theorem</code> does; such as the transparency of definitions. This seems reasonable to me in view of Lean as a programming language.</li>\n<li>As a result, a term elaborator may reject a <code>term</code> syntax tree because of this layer even if it is equivalent to a <code>Lean.Expr</code> tree which is valid from the kernel point of view.</li>\n<li>In my example, it is not the kernel but the term elaborator that reject the proof of <code>f_def</code> and <code>f_apply</code>. Because <code>f.match_1</code> has a special kind of transparency, maybe?</li>\n<li>With tactic, it is easier to control validity layers than the default term elaborator; e.g. <code>delta</code>, <code>unfold</code>, <code>dsimp</code>, ... But the result value is anyway of type <code>Lean.Expr</code>. It doesn't matter for the kernel whether it is created by a term elaborator, by tactic, or else.</li>\n</ul>",
        "id": 396766498,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697385926
    },
    {
        "content": "<p>Oh, my post is almost just rephrasing of yours. But it means I am finally right?</p>",
        "id": 396767045,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697386328
    },
    {
        "content": "<blockquote>\n<p>Because f.match_1 has a special kind of transparency, maybe?</p>\n</blockquote>\n<p>It has a \"smart unfolding lemma\", used for match expressions, which when present causes the elaborator to only unfold when the discriminant has the form of one of the patterns</p>",
        "id": 396767518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697386869
    },
    {
        "content": "<p>The point of this mechanism is to avoid unfolding <code>a + b</code> into some <code>brecOn</code> mess during unification, and unfold <code>a + succ b</code> to <code>succ (a + b)</code> instead of <code>succ &lt;brecOn nonsense&gt;</code></p>",
        "id": 396767589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697386937
    },
    {
        "content": "<p>Thank you for supplementary comment. That \"smart unfolding\" is reasonable from some point of views. It also prevents <code>f (n+1)</code> from becoming <code>Nat.rec 0 (fun n _ =&gt; n)</code> and keeps the reasonable form of the term using <code>f</code>. Even though it is the culprit in the <code>f_def</code> example, I don't want to see such a raw recursor so often in my daily proof writing.</p>",
        "id": 396769977,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697389633
    }
]