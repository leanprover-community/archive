[
    {
        "content": "<p>I am working on a lemma that has proved to be much more difficult to prove than I anticipated.  This is what I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Order.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Field.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cna_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">adn</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h.symm</span>\n  <span class=\"k\">have</span> <span class=\"n\">acn</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.mul_div_cancel'</span> <span class=\"n\">adn</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel₀</span> <span class=\"n\">z</span>\n  <span class=\"n\">exact</span> <span class=\"n\">acn.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_neq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"mi\">0</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">recip_ineq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">z₁</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₂</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₃</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">&lt;</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">c_def</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">cna_inv</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">lt_neq</span> <span class=\"n\">b</span> <span class=\"n\">z₂</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">d_def</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">cna_inv</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">lt_neq</span> <span class=\"n\">a</span> <span class=\"n\">z₁</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">c_def</span><span class=\"o\">,</span> <span class=\"n\">d_def</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- apply div_lt_div_of_lt_left z₃ z₁ g</span>\n</code></pre></div>\n<p>As you will see, the last line does not work because it \"Failed to synthesize instance LinearOrderedSemifield\".  I haven't been able to find any result like this for naturals, although it certainly is true under certain assumptions.  Any help pointing me in the right direction would be very useful!</p>",
        "id": 391221744,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694797289
    },
    {
        "content": "<p>What is <code>cna_inv</code>?</p>",
        "id": 391222322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694797471
    },
    {
        "content": "<p><code>rw [Nat.div_lt_iff_lt_mul' z₂, ←h, Nat.mul_div_cancel_left, mul_comm]</code> makes some good progress</p>",
        "id": 391224230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694798048
    },
    {
        "content": "<p>you may also want to import <code>Mathlib.Tactic.LibrarySearch, Mathlib.Tactic.Rewrites</code> so that you can use the <code>apply?, exact?, rw?</code> tactics, which will be helpful here</p>",
        "id": 391224753,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694798240
    },
    {
        "content": "<p>Sorry forgot to include cna_inv and lt_neq</p>",
        "id": 391227083,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694798995
    },
    {
        "content": "<p>This still doesn't compile for me. If you cut and paste into a file of its own, does it compile for you?</p>",
        "id": 391228912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694799593
    },
    {
        "content": "<p>It compiles for me except for the last line which is included to show the issue I'm facing.  I changed it to have a sorry and commented out the line that is not working.</p>",
        "id": 391230540,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694800153
    },
    {
        "content": "<p>Lean didn't know the type of <code>n</code> for me. Maybe we have different default settings for <code>autoImplicit</code>?</p>",
        "id": 391232721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800915
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- I need this</span>\n\n<span class=\"c1\">-- you don't need this</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cna_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_eq_of_eq_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">H1</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"c1\">-- from `apply?`</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">z</span> <span class=\"c1\">-- from `exact?`</span>\n\n<span class=\"c1\">-- you don't need this either</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_neq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- learn to use this!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">recip_ineq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">z₁</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₂</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₃</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">&lt;</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span> <span class=\"c1\">-- by contradiction</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdc</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 391233640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694801237
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">recip_ineq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">z₁</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₂</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₃</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">&lt;</span><span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdc</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">gcongr</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">gcongr</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 391233951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694801361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"648334\">@Teddy Baker</span>  -- wasn't it you who was doing natural subtraction in an earlier thread? All the comments there about how subtraction should be avoided apply just as well to division for naturals -- it is not a mathematically reasonable operator (e.g. 5/2=2) so should be avoided unless absolutely necessary.</p>",
        "id": 391240437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694803229
    },
    {
        "content": "<p>Yes agreed, both of those operations on nats seem to cause a lot of problems.  Thanks so much for your help!</p>",
        "id": 391249765,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694806761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648334\">Teddy Baker</span> has marked this topic as resolved.</p>",
        "id": 391249774,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694806765
    },
    {
        "content": "<p>One more thing, it didn't work for me as written, I had to add Aesop to my lakefile and also import the gcongr tactic, just for anyone who looks at this in the future</p>",
        "id": 391652776,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1695028854
    }
]