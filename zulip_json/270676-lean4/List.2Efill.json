[
    {
        "content": "<p>A few times I needed a <code>List</code> of a fixed size initialized with a certain value so I wrote a simple <code>List.fill</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.fill</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fill</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">fill</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">as</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fill</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">List.fill</span> <span class=\"n\">false</span> <span class=\"mi\">3</span>\n<span class=\"c1\">-- [false, false, false]</span>\n</code></pre></div>\n<p>This is pretty common in other programming languages but I'm curious why it's not built into Lean. Is this not useful enough to belong in Lean's standard library?</p>",
        "id": 400634387,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1699317232
    },
    {
        "content": "<p>Or does it already exist and I clearly don't know how to find it?</p>",
        "id": 400634529,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1699317302
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.replicate#doc\">docs#List.replicate</a> what you were looking for?</p>",
        "id": 400634933,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699317484
    },
    {
        "content": "<p>Let me loogle this for you: <a href=\"https://loogle.lean-lang.org/?q=%3Fa+-%3E+Nat+-%3E+List+%3Fa\">https://loogle.lean-lang.org/?q=%3Fa+-%3E+Nat+-%3E+List+%3Fa</a></p>",
        "id": 400634953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699317489
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.replicate#doc\">docs#List.replicate</a> is indeed the second hit.</p>",
        "id": 400635015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699317524
    },
    {
        "content": "<p>Excellent, thanks!</p>",
        "id": 400635496,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1699317761
    },
    {
        "content": "<p>It would not be insane to write a wrapper around <code>exact?</code> that \"checked examples\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">List</span> <span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">spec</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>This would synthesize terms for <code>f</code> by searching the library and then filter results by running <code>rfl</code> on the property.</p>",
        "id": 400657339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699328914
    },
    {
        "content": "<p>In fact this should be pretty easy.</p>",
        "id": 400657377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699328946
    }
]