[
    {
        "content": "<p>In the MWE below, when defining <code>MyNat</code>, it automatically creates a <code>simp</code>-lemma <code>MyNat.succ.injEq</code>. Is there a way to disable this feature, i.e. to have a completely empty <code>simp</code>-set and only add things manually? This is for a learning game and I would like <code>simp</code> to become successively stronger after each level.</p>\n<p>I can do <code>attribute [-simp] MyNat.succ.injEq</code>, but when importing the definition in a different file, it seems that the attribute is back. Maybe there is a way to remove the attribute globally for all files importing this one, too?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">â†’</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">MyNat.succ.injEq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyNat.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyNat.succ</span> <span class=\"o\">(</span><span class=\"n\">MyNat.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MyNat.succ</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- should not make progress</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 352496829,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682418967
    },
    {
        "content": "<p>I know that in Lean 3 it was impossible to unsimp a lemma globally when it was simped -- core lean had <code>sub_eq_add_neg</code> as a simp lemma for years and it drove the mathlib community nuts but there was nothing we could do about it until the lean 3 fork.</p>",
        "id": 352500047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682419737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/Disable.20all.20simp.20lemmas/near/352496829\">said</a>:</p>\n<blockquote>\n<p>I can do <code>attribute [-simp] MyNat.succ.injEq</code>, but when importing the definition in a different file, it seems that the attribute is back. Maybe there is a way to remove the attribute globally for all files importing this one, too?</p>\n</blockquote>\n<p>This is not possible with the current implementation of attributes. (The notation should probably reflect this: <code>local attribute [-simp] ...</code> would be more suggestive.) I don't see a way to keep <code>injEq</code>s out of the <code>simp</code> set short of overriding the <code>inductive</code> command. If you can tell <code>simp</code> not to use the default simp set (which I don't know), you could override <code>simp</code> with a variant that uses only some custom simp set.</p>",
        "id": 352500451,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1682419868
    },
    {
        "content": "<p>That's okay, thanks! In that case I don't have to spend time trying ;)<br>\nFor the game, I can just remove it for the few levels manually until it's been proven.</p>",
        "id": 352501778,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682420227
    },
    {
        "content": "<p>How about you define <code>MyNat_aux</code> inductively and then define <code>MyNat</code> to equal <code>MyNat.aux</code> and move over precisely the lemmas which you want?</p>\n<p>In the natural number game I tell lies. The thing I say is tactic mode is not tactic mode, it's a modified tactic mode where tactics do different things. I found it quite difficult to do things without telling lies, because Lean is optimised for getting things done, not for education. Another possibility is that you could modify <code>simp</code> to be your own <code>simp</code> with your own <code>simp</code> set, or just make a new tactic <code>simpl</code> or whatever.</p>",
        "id": 352517457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682424429
    },
    {
        "content": "<p>Redefining one of the things is indeed what I would do, I already redefined several other tactics, but if there would have been an easy way to nuke all simp lemmas, that would have been the easiest.</p>\n<p>Btw, it's exactly about the NNG. As a second test-game I ported it to our lean4 game engine:</p>\n<p><a href=\"https://adam.math.hhu.de/#/game/nng\">https://adam.math.hhu.de/#/game/nng</a></p>\n<p>I was going to dm you, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, shortly about that</p>",
        "id": 352549761,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682431987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> the game engine looks great, so pretty and click-y! Congrats!</p>",
        "id": 352551118,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682432352
    },
    {
        "content": "<p>You probably are aware, but there are still various bits of un-translated German. (\"bisheriger beweis\", \"aktuelles goal\")</p>",
        "id": 352551214,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682432386
    },
    {
        "content": "<p>Yes, that's exactly what Im doing now<span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> And I'd want an option to load new games from separate github repos.</p>\n<p>And... the server does probably only handle about 10-14ppl at any timeðŸ«¢</p>\n<p>consider it an inofficial pre-release</p>",
        "id": 352551941,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682432530
    },
    {
        "content": "<p>It looks great! I'm super happy that my experiment from last summer turned into this, and I can't wait to discuss it with you and the rest of the team in DÃ¼sseldorf!</p>",
        "id": 352561196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682434428
    },
    {
        "content": "<p>This really looks like it has a lot of potential. Mohammad and I just threw something together because we knew Imperial students enjoyed playing the game at Xena when I set it up on their computers. The material is in the course which I teach to the 1st years, and the game was just a Xena thing at first. Then Mohammad suggested we get it online somehow, told me what Lean files he wanted, and did everything else himself. It was never supposed to be more than a demo in some sense, the github repo is full of issues but I figure if it ain't broke then what the heck (the real issue is that I don't have a clue how to compile and deploy it , I just have to relearn every time from all the readmes because I'm old and stupid), and I don't remember my own code really.</p>",
        "id": 352564861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682435187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/Disable.20all.20simp.20lemmas/near/352549761\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://adam.math.hhu.de/#/game/nng\">https://adam.math.hhu.de/#/game/nng</a></p>\n</blockquote>\n<p>This looks really great!</p>\n<p>One tiny bit of feedback. (Maybe it isn't even NNG specific, and more directed at Lean 4 in general.) If you hover over an expression like <code>a + 0</code>, then you get a pop-up which starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">â„•</span> <span class=\"n\">â„•</span> <span class=\"n\">â„•</span> <span class=\"n\">instHAdd</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span>\n</code></pre></div>\n<p>(The same happens in VSCode.)</p>\n<p>I think this looks quite intimidating.</p>",
        "id": 352626308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682451663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Disable.20all.20simp.20lemmas/near/352626308\">said</a>:</p>\n<blockquote>\n<p>I think this looks quite intimidating.</p>\n</blockquote>\n<p>Doesn't it? Right now it just shows the same pop-ups as it would in VsCode</p>",
        "id": 352627099,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682451933
    },
    {
        "content": "<p>Which is intimidating (to me, and I'm supposed to be an expert).</p>",
        "id": 352632091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682453712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/Disable.20all.20simp.20lemmas/near/352549761\">said</a>:</p>\n<blockquote>\n<p>Btw, it's exactly about the NNG. As a second test-game I ported it to our lean4 game engine:</p>\n<p><a href=\"https://adam.math.hhu.de/#/game/nng\">https://adam.math.hhu.de/#/game/nng</a></p>\n</blockquote>\n<p>This is fun! </p>\n<p>There is a typo in the latex above <code>add_mul</code>.</p>",
        "id": 352767662,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1682508421
    },
    {
        "content": "<p>Thx!</p>",
        "id": 352792002,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682513818
    }
]