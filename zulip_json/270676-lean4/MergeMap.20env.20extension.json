[
    {
        "content": "<p>Lean has a builtin env extension that can map declarations to arbitrary data. The problem is that you can add data only in the same file as the declaration. This is a limitation that is not working for me. So I wrote a <code>MergeMapDeclarationExtension</code> which is exactly like <code>MapDeclarationExtension</code> but it merges the data from different files.</p>\n<p>The <code>MergeMapDeclarationExtension</code> seems to work nicely but I'm a bit concerned with performance. I'm really unsure how to utilize the <code>ImportM</code> monad. I would appreciate any comments on how to improve this. Or better, doesn't matlib or std have this already?</p>",
        "id": 349233550,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1681430024
    },
    {
        "content": "<p>the code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.RBMap.Alter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Array.joinlM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span> <span class=\"k\">then</span>\n    <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:]</span><span class=\"bp\">.</span><span class=\"n\">foldlM</span> <span class=\"o\">(</span><span class=\"n\">init</span><span class=\"o\">:=(</span><span class=\"bp\">←</span> <span class=\"n\">map</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]))</span> <span class=\"bp\">λ</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">op</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">map</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Array.joinl</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"n\">xs.joinlM</span> <span class=\"n\">map</span> <span class=\"n\">op</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MergeMapDeclarationExtension.Merge</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">merge</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">is_valid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">merge</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">merge</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n             <span class=\"bp\">∧</span>\n             <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">merge</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">merge</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MergeMapDeclarationExtension</span> <span class=\"k\">in</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Similar to `MapDeclarationExtension` but it allows you to insert declarations that were not declared in the same file.</span>\n<span class=\"sd\">However, you have to provide how to merge the values and to guarantee consistency i.e. merging should be associative and commutative.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">MergeMapDeclarationExtension</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">PersistentEnvExtension</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Std.RBMap</span> <span class=\"n\">Name</span> <span class=\"n\">α</span> <span class=\"n\">Name.quickCmp</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MergeMapDeclarationExtension</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkMergeMapDeclarationExtension</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"o\">:</span> <span class=\"n\">Merge</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">decl_name</span><span class=\"bp\">%</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">MergeMapDeclarationExtension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">registerPersistentEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span>          <span class=\"o\">:=</span> <span class=\"n\">name</span>\n    <span class=\"n\">mkInitial</span>     <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">default</span>\n    <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"bp\">λ</span> <span class=\"n\">s'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ofArray</span> <span class=\"n\">s'</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">joinl</span> <span class=\"n\">id</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mergeWith</span> <span class=\"n\">merge.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"n\">pure</span> <span class=\"n\">m</span>\n    <span class=\"n\">addEntryFn</span>    <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">val'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s.alter</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">val</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">val</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">merge.1</span> <span class=\"n\">n</span> <span class=\"n\">val</span> <span class=\"n\">val'</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val'</span><span class=\"o\">))</span>\n    <span class=\"n\">exportEntriesFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.toList.toArray</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MergeMapDeclarationExtension</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">MergeMapDeclarationExtension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">PersistentEnvExtension</span> <span class=\"bp\">..</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">MergeMapDeclarationExtension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext.addEntry</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">declName</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">MergeMapDeclarationExtension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ext.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">declName</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">contains</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">MergeMapDeclarationExtension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ext.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">declName</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MergeMapDeclarationExtension</span>\n</code></pre></div>",
        "id": 349233660,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1681430094
    }
]