[
    {
        "content": "<p>I'm wondering if anyone has examples of a simple type directed macro.</p>\n<p>I'm basically trying to have <code>t⦃s⦄</code> elaborate to <code>f t s</code> when <code>t : T1</code>, to <code>g t s</code> when <code>t : T2</code>, and to error otherwise. I've tried copying some of the code from the \"Beyond Notations\" paper but it doesn't seem to work, and it's also doing something much more complicated than what I have in mind.</p>\n<p>Are there good examples for this kind of type-directed overloading?</p>\n<p>I know I <em>could</em> make this work for type classes, but that seems like overkill for a case where I know that it will be one of two given types.</p>",
        "id": 393124642,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1695682043
    },
    {
        "content": "<p>The big advantage of type classes here is you can then write <code>def foo [HasMySyntax T] (t : T)(s : S) := t⦃s⦄ + t⦃s⦄</code> and this one function will work for <code>T1</code> and <code>T2</code></p>",
        "id": 393126661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695683039
    },
    {
        "content": "<p>Can macros be type-directed at all? I thought they were purely syntax-to-syntax transformations, with no type information present.</p>",
        "id": 393219276,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695729865
    },
    {
        "content": "<p>When you overload the same syntax with different macros lean will try to elaborate all versions and iff only a single one succeeds it will take that and be happy so I guess that can be viewed as a very rudimentary version of that. But in general using type classes is much preferred over this and alternatively an elaborator directly. Trying to elaborate all of the variants to expand the syntax can be slow.</p>",
        "id": 393219957,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695730129
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5133\">mathlib4#5133</a> has an experimental type-directed elaborator for adjoining elements or sets to a field. It supports <code>F⟮S⟯</code> and <code>F⟮α⟯</code>, which elaborate to <code>adjoin F S</code> for the set <code>S</code> and <code>adjoin F {α}</code> for the non-set <code>α</code>. Here, the non-set version is taken to be the default, which part of the reason why there is the complexity of a custom elaborator instead of just using notation overloading or typeclasses.</p>",
        "id": 393225219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695732204
    },
    {
        "content": "<p>Like what Henrik said, you can use the fact that notations/macros will all be elaborated if there is an ambiguity, so this works as a simple-type-directed macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">T1</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">T2</span> <span class=\"n\">where</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">t</span> <span class=\"s2\">\"⦃\"</span> <span class=\"n\">s</span> <span class=\"s2\">\"⦄\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T1.x</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n<span class=\"kd\">notation</span> <span class=\"n\">t</span> <span class=\"s2\">\"⦃\"</span> <span class=\"n\">s</span> <span class=\"s2\">\"⦄\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T2.y</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">T2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span><span class=\"o\">⦃</span><span class=\"mi\">2</span><span class=\"o\">⦄</span>\n<span class=\"k\">#check</span> <span class=\"n\">b</span><span class=\"o\">⦃</span><span class=\"mi\">2</span><span class=\"o\">⦄</span>\n</code></pre></div>\n<p>It's got the downside that Eric mentioned, where you can't make theorems or definitions that are polymorphic in the interpretation of the notation.</p>",
        "id": 393225867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695732445
    }
]