[
    {
        "content": "<p>Another very basic tactic-writing question: let's I know a new local hypothesis has been added using a particular <code>Name</code>. How can I quickly access the new expression/localDecl associated with that name? I've tried <code>findFromUserName</code> and <code>(&lt;- getEnv).find?</code>and <code>getFVarFromUserName</code> but none seem to find it... </p>\n<p>Here's my mwe. If any of this is \"anti-pattern\" that would also be good to know</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">destruct_conj</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">left</span>  <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">A</span>\n  <span class=\"k\">let</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">B</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- let B_expr ← ? &lt;- trying to fill this in</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"mytac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"mytac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">destruct_conj</span> <span class=\"bp\">`</span><span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">mytac</span>\n</code></pre></div>",
        "id": 325740437,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1675465683
    },
    {
        "content": "<p>I guess at a more basic level, I'm just not able to access the local context in the way I would expect. Any idea what I'm doing wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"mytac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"mytac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span>  <span class=\"n\">ctx.fvarIdToDecl.find</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">mytac</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>",
        "id": 325845835,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1675524991
    },
    {
        "content": "<p>does it work if you use <code>LocalContext.findFromUserName?</code>?</p>",
        "id": 325846585,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675525313
    },
    {
        "content": "<p>Wow, I guess it does... weird, I could have sworn I had tried that one yesterday but was running into the same failure issues.  I must have been doing something else wrong. Thanks a lot, David!</p>",
        "id": 325847111,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1675525557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319223\">Logan Murphy</span> has marked this topic as resolved.</p>",
        "id": 325847166,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675525572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319223\">Logan Murphy</span> has marked this topic as unresolved.</p>",
        "id": 325853545,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675528112
    },
    {
        "content": "<p>Hmm, I'm actually still running into my original problem. Is using <code>evalTactic</code> in this manner somehow preventing me from finding \"newly introduced\" local decls in the context?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"mytac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"mytac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- start by checking that I can find the premise 'h'</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>  <span class=\"n\">ctx.findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"c1\">-- successfully finds localDecl named h</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.isNone</span> <span class=\"k\">then</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"No hyp named {`h}\"</span>\n <span class=\"c1\">-- now let's add a new local decl</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">p</span><span class=\"o\">)))</span>\n <span class=\"c1\">-- shouldn't this new local context include p : true?</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx'</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span>  <span class=\"n\">ctx'.findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">p</span>\n  <span class=\"k\">if</span> <span class=\"n\">e'.isNone</span> <span class=\"k\">then</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"No hyp named {`p}\"</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">mytac</span>\n</code></pre></div>",
        "id": 325853689,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1675528181
    },
    {
        "content": "<p>Does it work if you call <code>Lean.Elab.Tactic.withMainContext</code> again?</p>",
        "id": 325853886,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675528235
    },
    {
        "content": "<p>after the <code>evalTactic</code></p>",
        "id": 325853907,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675528245
    },
    {
        "content": "<p>Yes, it does! So whenever I want to refresh the local context, I can just do <code>let ctx ← withMainContext getLCtx </code>instead of just <code>getLCtx</code>, it seems.</p>\n<p>Thanks again David.</p>",
        "id": 325854908,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1675528658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319223\">Logan Murphy</span> has marked this topic as resolved.</p>",
        "id": 325855037,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675528704
    },
    {
        "content": "<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>and then subsequent lines will get the new context too</p>",
        "id": 325855585,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675528930
    },
    {
        "content": "<p>The safe pattern is: whenever you change the local context in any way, call <code>withMainContext</code> (or, more generally, <code>newGoal.withContext</code>) afterwards like David suggests. You can then remove some of the <code>withMainContext</code>s again if you're sure that the functions you call don't access the current local context. The typical error if you forget to do this is 'unknown fvar'.</p>",
        "id": 326126959,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675691313
    },
    {
        "content": "<p>Makes sense -- thanks Jannis!</p>",
        "id": 326142903,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1675693800
    }
]