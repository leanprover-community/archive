[
    {
        "content": "<p>I think there are redundant parts of the definitions of <code>String.splitOnAux</code> and <code>String.splitOn</code>. See <a href=\"https://github.com/chabulhwi/lean4/commit/a4ba050e7400c6b015c810091513bf53dd1e548d\">my commit</a>. The redefined <code>splitOnAux</code> is not equal to the previous one, but this is what I intended. I guess the new <code>splitOn</code> equals the old one.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Redefined functions</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitOnAux'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.atEnd</span> <span class=\"n\">i</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s.extract</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)::</span><span class=\"n\">r</span>\n    <span class=\"n\">r.reverse</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_lt_sub_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.gt_of_not_le</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">decide_eq_true</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">lt_next</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">s.get</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">sep.get</span> <span class=\"n\">j</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">s.next</span> <span class=\"n\">i</span>\n      <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">sep.next</span> <span class=\"n\">j</span>\n      <span class=\"k\">if</span> <span class=\"n\">sep.atEnd</span> <span class=\"n\">j</span> <span class=\"k\">then</span>\n        <span class=\"n\">splitOnAux'</span> <span class=\"n\">s</span> <span class=\"n\">sep</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">s.extract</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">splitOnAux'</span> <span class=\"n\">s</span> <span class=\"n\">sep</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">r</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">splitOnAux'</span> <span class=\"n\">s</span> <span class=\"n\">sep</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">s.next</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">r</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.endPos.1</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitOn'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\" \"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">splitOnAux'</span> <span class=\"n\">s</span> <span class=\"n\">sep</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">chabulhwi</span> <span class=\"o\">:=</span> <span class=\"s2\">\"차_!_불_!_휘_!_\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOn</span> <span class=\"s2\">\"_!_\"</span> <span class=\"c1\">-- output: [\"차\", \"불\", \"휘\", \"\"]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOnAux</span> <span class=\"s2\">\"_!_\"</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">[</span><span class=\"s2\">\"휘\"</span><span class=\"o\">,</span> <span class=\"s2\">\"불\"</span><span class=\"o\">,</span> <span class=\"s2\">\"차\"</span><span class=\"o\">]</span> <span class=\"c1\">-- [\"차\", \"불\", \"휘\", \"\"]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOnAux</span> <span class=\"s2\">\"_!_\"</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">⟩</span> <span class=\"o\">[</span><span class=\"s2\">\"휘\"</span><span class=\"o\">,</span> <span class=\"s2\">\"불\"</span><span class=\"o\">,</span> <span class=\"s2\">\"차\"</span><span class=\"o\">]</span> <span class=\"c1\">-- [\"차\", \"불\", \"휘\", \"\", \"\"]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOn'</span> <span class=\"s2\">\"_!_\"</span> <span class=\"c1\">-- [\"차\", \"불\", \"휘\", \"\"]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOnAux'</span> <span class=\"s2\">\"_!_\"</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">[</span><span class=\"s2\">\"휘\"</span><span class=\"o\">,</span> <span class=\"s2\">\"불\"</span><span class=\"o\">,</span> <span class=\"s2\">\"차\"</span><span class=\"o\">]</span> <span class=\"c1\">-- [\"차\", \"불\", \"휘\", \"\"]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOnAux'</span> <span class=\"s2\">\"_!_\"</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">⟩</span> <span class=\"o\">[</span><span class=\"s2\">\"휘\"</span><span class=\"o\">,</span> <span class=\"s2\">\"불\"</span><span class=\"o\">,</span> <span class=\"s2\">\"차\"</span><span class=\"o\">]</span> <span class=\"c1\">-- [\"차\", \"불\", \"휘\", \"\"]</span>\n</code></pre></div>\n</div></div>",
        "id": 365899332,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1686668439
    },
    {
        "content": "<p>Did you try testing <code>chabulhwi.splitOn \"\"</code>?</p>",
        "id": 365902008,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1686668914
    },
    {
        "content": "<p>I think the other change looks correct, though, because assuming <code>sep</code> is not empty one can prove that <code>sep.atEnd j</code> is always false at the start of the function.</p>",
        "id": 365904150,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1686669352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/should.20we.20redefine.20.60String.2EsplitOn.60.3F/near/365902008\">said</a>:</p>\n<blockquote>\n<p>Did you try testing <code>chabulhwi.splitOn \"\"</code>?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOn</span>  <span class=\"s2\">\"\"</span> <span class=\"c1\">-- [\"차_!_불_!_휘_!_\"]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOn'</span> <span class=\"s2\">\"\"</span> <span class=\"c1\">-- [\"차_!_불_!_휘_!_\", \"\"]</span>\n</code></pre></div>\n<p>Oh. Then I suggest redefining only <code>splitOnAux</code>, not <code>splitOn</code>.</p>",
        "id": 365904184,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1686669360
    },
    {
        "content": "<p>That being said, the original function looks a bit buggy. Does <code>\"ababcab\".splitOn \"abc\"</code> work there? It does look like it is missing some partial match handling (KMP-style or otherwise).</p>",
        "id": 365905633,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1686669622
    },
    {
        "content": "<p>I don't think it works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"s2\">\"ababcab\"</span><span class=\"bp\">.</span><span class=\"n\">splitOn</span> <span class=\"s2\">\"abc\"</span> <span class=\"c1\">-- [\"ababcab\"]</span>\n</code></pre></div>",
        "id": 365906338,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1686669726
    },
    {
        "content": "<p>I probably shouldn't have used the word \"buggy\". Proper handling of this case would either increase memory costs or time costs, which might be undesirable depending on how the function is used. But that output is not what I expect from the function name.</p>",
        "id": 365906643,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1686669783
    },
    {
        "content": "<p>GitHub PR: <a href=\"https://github.com/leanprover/lean4/pull/2271\">lean4#2271</a></p>",
        "id": 365920064,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1686672304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/should.20we.20redefine.20.60String.2EsplitOnAux.60.3F/near/365904184\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOn</span>  <span class=\"s2\">\"\"</span> <span class=\"c1\">-- [\"차_!_불_!_휘_!_\"]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOn'</span> <span class=\"s2\">\"\"</span> <span class=\"c1\">-- [\"차_!_불_!_휘_!_\", \"\"]</span>\n</code></pre></div>\n<p>Oh. Then I suggest redefining only <code>splitOnAux</code>, not <code>splitOn</code>.</p>\n</blockquote>\n<p>There was a mistake: I used the old functions in the body of the redefined ones. The correct results are the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOn</span>  <span class=\"s2\">\"\"</span> <span class=\"c1\">-- [\"차_!_불_!_휘_!_\"]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">chabulhwi.splitOn'</span> <span class=\"s2\">\"\"</span> <span class=\"c1\">-- [\"차_!_불_!_휘_!_\"]</span>\n</code></pre></div>",
        "id": 365926472,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1686673665
    }
]