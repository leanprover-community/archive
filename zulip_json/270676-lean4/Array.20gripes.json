[
    {
        "content": "<p>this is a complain-y thread, but I am hoping to learn something:</p>\n<p>The design of <code>Array</code> and <code>GetElem</code> just makes me feel like it's working against me in the realm of proof. Just as an example (all of these are with <code>Std</code> imported):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">mem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">A.size</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I didn't try very hard to prove this, but it also shouldn't be hard to prove this?</p>\n<p>and you might ask, James, why are you using a non-standard definition of mem on arrays?? well, because this doesn't compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>because the <code>Membership</code> instance (from core!) requires <code>DecidableEq</code> for some reason. okay fine, let's weaken the statement then:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but proving this requires digging into very complicated definitions. I know that the answer is probably \"add more simp lemmas\", but I'm really struggling to blindly believe this is the right solution, compared with re-thinking our approach.</p>\n<p>thoughts or hope would be appreciated.</p>",
        "id": 399995134,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698947838
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">mem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">A.size</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Nat.not_succ_le_zero</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y.prop</span>\n</code></pre></div>",
        "id": 399996577,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698948346
    },
    {
        "content": "<p>ok, if you want an example that doesn't have an escape hatch from digging through the expressions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399996960,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698948508
    },
    {
        "content": "<p>(or maybe I should generalize further to <code>Array.push</code> so that you can't just case on the value of <code>Fin 1</code>)</p>",
        "id": 399997057,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698948559
    },
    {
        "content": "<p>contrast with list, where simp can just do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 399997320,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698948672
    },
    {
        "content": "<p>I can't see why <code>DecidableEq</code> is necessary -- the type of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.instMembershipArray#doc\">docs#Array.instMembershipArray</a> doesn't require it... If you check the term, the <code>DecidableEq</code> instance doesn't even appear.</p>",
        "id": 399997492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698948734
    },
    {
        "content": "<p>then that must have changed since <code>4.2.0-rc1</code></p>",
        "id": 399997566,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698948775
    },
    {
        "content": "<p>I'm not saying I'm not seeing the same behavior</p>",
        "id": 399997669,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698948828
    },
    {
        "content": "<p>It seems like the real issue is some interaction with <code>autoImplicit</code></p>",
        "id": 399997716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698948843
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399997858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698948912
    },
    {
        "content": "<p>oh, Joachim just changed this 4 days ago</p>",
        "id": 399998008,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698948977
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2774\">https://github.com/leanprover/lean4/pull/2774</a></p>",
        "id": 399998046,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698949006
    },
    {
        "content": "<p>Oh, so he did (I just checked the blame)</p>",
        "id": 399998065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698949016
    },
    {
        "content": "<p>Still, even with this change, I found that adding <code>DecidableEq</code> somehow made it go through, as did adding <code>(x : α)</code>, or adding a <code>variable</code> line to introduce <code>α</code></p>",
        "id": 399998172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698949080
    },
    {
        "content": "<p>Re Array and GetElem, it seems worth adding the Array version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mem_iff_get#doc\">docs#List.mem_iff_get</a> so that you can go back and forth between your Exists formulation and the main definition.</p>",
        "id": 399998722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698949335
    },
    {
        "content": "<p>well, the new definition is also fine for my use case, because I can write a lemma that <code>Array.push A x = Array.ofList (A.toList ++ [x])</code>. But I'd prefer if that lemma were <code>simp</code>.</p>",
        "id": 399999231,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698949559
    },
    {
        "content": "<p>Oh, I didn't know the membership relation on <code>Array</code> was changed. I agree that <code>DecidableEq</code>-free version is appreciated, but this is a serious breaking change (wrt my personal projects).<br>\nSpecifically, the change drops the link between <code>Membership</code> and <code>Array.contains</code>, so I need to replace code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"k\">then</span> <span class=\"gr\">sorry</span> <span class=\"k\">else</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to the ones using <code>Array.contains</code>.<br>\nSo, I would like to ask if there is any plan that the core / Std has theorem like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Array.mem_iff_contains</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span> <span class=\"bp\">↔</span> <span class=\"n\">as.contains</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The following is my solution extracted from my project (I hide it since it's huge), but I hesitate to make PR on it since the code is not clean and contains a bunch of materials.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proof of Array.mem_iff_contains</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Array</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Cons</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as.data</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">data_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array.data</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as.data</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">size_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">as.size.succ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">getElem_cons_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">x.size.zero_lt_succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">getElem_cons_succ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)[</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- Induction step for `Array` based on `Array.empty` (aka `#[]`) and `Array.cons`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">elab_as_elim</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cons_induction</span>\n    <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x.rec</span> <span class=\"bp\">$</span> <span class=\"n\">List.rec</span> <span class=\"n\">empty</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">as</span><span class=\"o\">⟩</span> <span class=\"n\">IH</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Cons</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">Any</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">anyM_loop_empty</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">stop</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">anyM.loop</span> <span class=\"n\">p</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">stop</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">anyM.loop</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">i.not_lt_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">anyM_loop_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">stop</span> <span class=\"bp\">≤</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">anyM.loop</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stop</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">anyM.loop</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">stop</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">anyM.loop</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stop</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">hlt</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_lt_succ</span> <span class=\"n\">hlt</span><span class=\"o\">)]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">bind_congr</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">b</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">anyM_loop_cons_succ</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">hnlt</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">hnlt</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hnlt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">anyM_loop_cons_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">stop</span> <span class=\"bp\">≤</span> <span class=\"n\">x.size</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">anyM.loop</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stop</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">anyM.loop</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">stop</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">anyM.loop</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">stop.zero_lt_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">getElem_cons_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bind_congr</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">anyM_loop_cons_succ</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">anyM_empty</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">anyM</span> <span class=\"n\">p</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">anyM</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"o\">[]</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">anyM_loop_empty</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">start</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">anyM_loop_empty</span> <span class=\"n\">p</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">start</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">anyM_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">anyM</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">anyM</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">anyM</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">≤</span> <span class=\"n\">x.size</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">anyM_loop_cons_succ</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">start</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.le_of_succ_le_succ</span> <span class=\"n\">h'</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">anyM_loop_cons_succ</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">start</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">anyM_cons_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">anyM</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">anyM</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">anyM</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">≤</span> <span class=\"n\">x.size</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">anyM_loop_cons_zero</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.le_of_succ_le_succ</span> <span class=\"n\">h'</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">anyM_loop_cons_zero</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">.</span><span class=\"n\">refl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">any_empty</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">any</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">p</span> <span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"n\">anyM_empty</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">any_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">any</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">any</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">anyM_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">any_cons_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">any</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">any</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">any</span><span class=\"o\">,</span> <span class=\"n\">Id.run</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">anyM_cons_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.true_or</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"n\">Bool.false_or</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">any_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">any</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">any</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">size_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">any_cons_zero</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Any</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_iff_mem_data</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as.data</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Array.Mem.mk</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">contains_empty</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">contains</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">contains_cons</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">contains</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">||</span> <span class=\"n\">contains</span> <span class=\"n\">as</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">any_cons</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_iff_contains</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span> <span class=\"bp\">↔</span> <span class=\"n\">as.contains</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">mem_iff_mem_data</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">as</span> <span class=\"n\">using</span> <span class=\"n\">cons_induction</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n    <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">heq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">heq</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">as.data</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">htl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"n\">b</span> <span class=\"n\">htl</span>\n\n  <span class=\"kd\">end</span> <span class=\"n\">Array</span>\n</code></pre></div>\n</div></div>",
        "id": 400056118,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1698981352
    },
    {
        "content": "<p>This should definitely be a theorem in Std (we shouldn't have shipped without it, sorry)</p>",
        "id": 400056210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698981394
    },
    {
        "content": "<p>In fact it seems there isn't even a decidable instance? That theorem would need to be part of it</p>",
        "id": 400056441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698981545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.20gripes/near/400056441\">said</a>:</p>\n<blockquote>\n<p>In fact it seems there isn't even a decidable instance? That theorem would need to be part of it</p>\n</blockquote>\n<p>I hope that <code>Decidable (a ∈ #[1,2,3])</code> wouldn't go through <code>Array.toList</code> but just use <code>Array.contains</code> since the former is way slow. That is one reason we need <code>Array.mem_iff_contains</code> above.</p>",
        "id": 400056799,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1698981785
    },
    {
        "content": "<p>yes, that's what I mean</p>",
        "id": 400057329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698982124
    },
    {
        "content": "<p>I see, thanks. I just wanted to make sure I understand the situation correctly.</p>",
        "id": 400058714,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1698983088
    },
    {
        "content": "<p>I'll push a fix soon</p>",
        "id": 400058768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698983111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433695\">@Jun Yoshida</span> fixed</p>",
        "id": 400068549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698990249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Great! Thank you for all your efforts making the fix so quickly.</p>",
        "id": 400069160,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1698990799
    }
]