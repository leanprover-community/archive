[
    {
        "content": "<p>While porting a file with an <code>induction_on</code> tagged as <code>elab_as_elim</code>, all proof using it broke down.  A partial fix appears to be to remove the <code>elab_as_elim</code> tag.  Below is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of the kind of failure observed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Eq</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">)</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span><span class=\"o\">,</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">--@[elab_as_elim]  -- uncommenting the `elab_as_elim` tag, breaks the `example`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.inductionOn</span> <span class=\"n\">x</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">induction_on</span> <span class=\"n\">x</span>                        <span class=\"c1\">-- works *only without* `elab_as_elim`</span>\n  <span class=\"c1\">--apply induction_on (C := fun y =&gt; y = y)  -- works with or without `elab_as_elim`</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is there a standard solution to this?  Note that just removing the tag does not \"just work\" in the use case, but goes some way.</p>",
        "id": 360593466,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684862044
    },
    {
        "content": "<p>It looks like a workaround is <code>refine induction_on x ?_</code>. I'm not sure why <code>apply</code> doesn't work here</p>",
        "id": 360594463,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684862291
    },
    {
        "content": "<p>In the case that spurred this, refine also fails.</p>",
        "id": 360594559,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684862324
    },
    {
        "content": "<p><code>refine</code> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Eq</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">)</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span><span class=\"o\">,</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[elab_as_elim]</span>  <span class=\"c1\">-- uncommenting the `elab_as_elim` tag, breaks the `example`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.inductionOn</span> <span class=\"n\">x</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">_</span>                        <span class=\"c1\">-- works *only without* `elab_as_elim`</span>\n  <span class=\"c1\">--apply induction_on (C := fun y =&gt; y = y)  -- works with or without `elab_as_elim`</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 360594980,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684862432
    },
    {
        "content": "<p>On my computer, <code>rfl</code> gives an error...</p>",
        "id": 360595377,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684862529
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rfl'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">lhs</span>\n  <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">mk</span> <span class=\"n\">x</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 360595461,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684862553
    },
    {
        "content": "<p>Sorry, this example works: I had forgotten to reinstate the <code>elab_as_elim</code>, with the <code>refine</code>.  However, in the port, <code>refine</code> does not work.</p>",
        "id": 360595832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684862651
    },
    {
        "content": "<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/4271\">!4#4271</a></p>",
        "id": 360595889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684862671
    },
    {
        "content": "<p>There are indeed some nasty timeouts in that PR. I think <code>apply @AdjoinRoot.induction_on (x := x)</code> works in the first error I saw. That seems to be a way to disable <code>elab_as_elim</code> in that application.<br>\nI expect that removing the attribute will cause other places to fail...</p>",
        "id": 360600194,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684863881
    },
    {
        "content": "<p>Does <code>induction x using AdjoinRoot.induction_on</code> work?</p>",
        "id": 360612159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684866916
    },
    {
        "content": "<p>oh, that indeed works, and is nicer.</p>",
        "id": 360619380,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684869114
    },
    {
        "content": "<p>I also met this in the Galois adjunction file for Düsseldorf. In Lean 3 we learned that <code>induction ... using</code> was either broken or not better than <code>refine</code>, but we clearly need to unlearn that.</p>",
        "id": 360619915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684869271
    },
    {
        "content": "<p>Ok, I'll switch to Eric's version.  Most of these proof were in term-mode: is it ok, then, to change to tactic mode?</p>",
        "id": 360621108,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684869575
    },
    {
        "content": "<p>Eric's spelling works very well!</p>\n<p>Is there a way to name the introduced variable?  I tried putting <code>with x</code>, either before or after the <code>using</code> but it never seems to work...</p>",
        "id": 360626146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684871299
    },
    {
        "content": "<p>You may need to use a new style version, with <code>|</code> and <code>=&gt;</code></p>",
        "id": 360626294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684871347
    },
    {
        "content": "<p>I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">AdjoinRoot.induction_on</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span>    <span class=\"c1\">-- invalid alternative name 'd'</span>\n</code></pre></div>\n<p>(changing <code>d</code> to another name does not fix it, although I have not tried the whole alphabet...).  What am I doing wrong?</p>",
        "id": 360626669,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684871492
    },
    {
        "content": "<p>I've fixed one timeout, but we should understand why this file is getting very very slow</p>",
        "id": 360627148,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684871684
    },
    {
        "content": "<p>What's happening is that in results like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/adjoin_root.quot_map_C_map_span_mk_equiv_quot_map_C_quot_map_span_mk_symm_quot_quot_mk\">docs#adjoin_root.quot_map_C_map_span_mk_equiv_quot_map_C_quot_map_span_mk_symm_quot_quot_mk</a> the ideal in the RHS is <code>_</code> in Lean3, and Lean4 is not able to guess it. So I am essentially giving it explictely.</p>",
        "id": 360627778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684871944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Another style is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">AdjoinRoot.induction_on</span>\n<span class=\"n\">next</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">...</span>\n<span class=\"n\">next</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>if you don't want to figure out the constructor names</p>",
        "id": 360628229,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684872102
    },
    {
        "content": "<p>Kyle, thanks!  I actually do not know how to find out what the constructor is in this case, but <code>next</code> works well!</p>",
        "id": 360628905,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684872337
    },
    {
        "content": "<p>Even cooler, if you write <code>induction x</code>, you should get a <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> icon that fills in the <code>|</code> syntax</p>",
        "id": 360629476,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684872514
    },
    {
        "content": "<p>Ruben, that's very nice!  Although, I am not able to get it to help with <code>using</code>, right?</p>",
        "id": 360629793,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684872617
    },
    {
        "content": "<p>Oh, good question. I don't know</p>",
        "id": 360633261,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684873880
    },
    {
        "content": "<p>Spelling out all the ideals it's really annoying...</p>",
        "id": 360635741,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684874785
    },
    {
        "content": "<p>You can get the name of the cases by looking at the names of the arguments to <code>AdjoinRoot.induction_on</code></p>",
        "id": 360640052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684876496
    },
    {
        "content": "<p>Eric, thanks!  Indeed, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">AdjoinRoot.induction_on</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ih</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin_singleton_eq_range_aeval</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">aeval_eq</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 360640333,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684876598
    },
    {
        "content": "<p>It's probably not a priority in the port, but once it's all over we should probably go over every lemma tagged <code>elab_as_elim</code> and check the hypotheses are well-named</p>",
        "id": 360640637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684876722
    },
    {
        "content": "<p>Indeed, I was thinking that this (as well as the possibility of passing implicit arguments via <code>(name := ...)</code>), makes the choice of hypotheses names more important.</p>",
        "id": 360640779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684876779
    },
    {
        "content": "<p>If you don't want to type <code>with |</code> you can also use <code>case</code> btw:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">AdjoinRoot.induction_on</span>\n<span class=\"n\">case</span> <span class=\"n\">ih</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is nice because you can alternative it with <code>all_goals simp only [foo]</code>.</p>",
        "id": 360641876,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684877250
    }
]