[
    {
        "content": "<p>I would like to write code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∂</span> <span class=\"n\">x'</span><span class=\"o\">:=</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"bp\">*</span><span class=\"n\">x'</span> <span class=\"bp\">+</span> <span class=\"n\">x'</span><span class=\"o\">))</span> <span class=\"n\">rewrite_by</span> <span class=\"n\">symdiff</span>\n</code></pre></div>\n<p>where <code>(∂ x':=x, (x'*x' + x'))</code> differentiates the expression w.r.t. to <code>x'</code> and evaluates it in <code>x</code>. The <code>x:term rewrite_by c:conv</code> rewrites <code>x</code> with tactic <code>c</code>.  The above definition simplifies to <code>def foo {K} [IsROrC K] (x : K) := 1 + x * 2</code>, but I really want to write it down in the original form.</p>\n<p>Afterwards I really want to evaluate <code>foo</code> on floats. My idea is to create fake instance <code>IsROrC Float</code> and call <code>foo (1.0 : Float)</code>. Unfortunately, this does not work as the instance <code>IsROrC Float</code> has to be marked noncomputable because it uses reals. My hope that it would work because <code>foo</code> is not using any of the noncomputable parts of <code>IsROrC</code>.</p>\n<p>Here is mwe demonstrating the problem where <code>Foo</code> simulates the class <code>IsROrC</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instFooNat</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>  <span class=\"c1\">-- here I require `Foo` as it might be required for some rewrites</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"c1\">-- fails as it depends on noncomputable `instFooNat` however `foo` is not using the noncomputable `Foo.norm`</span>\n</code></pre></div>\n<p>Any ideas how to deal/sidestep this?</p>",
        "id": 387116186,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692893476
    },
    {
        "content": "<p>Use <code>unsafe</code> instead of <code>noncomputable</code></p>",
        "id": 387117776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692893902
    },
    {
        "content": "<p>Can you make a slightly less minimal example that uses <code>Real</code> but not <code>IsROrC</code>?</p>",
        "id": 387118016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692893977
    },
    {
        "content": "<p>If your problem really is the norm, I would expect the following to be computable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.abs.toRat</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(assuming we have <code>Float.abs</code> and <code>Float.toRat</code>)</p>",
        "id": 387118374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692894088
    },
    {
        "content": "<p>The norm is not the issue, I will try to create a different mwe</p>",
        "id": 387118726,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692894191
    },
    {
        "content": "<p>I started dissecting <code>IsROrC</code> and the problem disappeared ... and I don't have to mark the instance <code>isROrC Float</code> as noncomputable anymore. I will have to investigate more what is going on.</p>",
        "id": 387124095,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692895974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Note that you can get your original example to work by marking the instance <code>macro_inline</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">@[macro_inline]</span> <span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instFooNat</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 387168202,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692914431
    },
    {
        "content": "<p>This will result in the structure being unpacked before the noncomputable checker kicks in.</p>",
        "id": 387168346,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692914524
    },
    {
        "content": "<p>Cool, I haven't thought of using that. I managed to solve the issue differently but I will keep this in mind for the future.</p>",
        "id": 387168487,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692914616
    }
]