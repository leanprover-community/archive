[
    {
        "content": "<p>I'm having issues using c++ standard library with ffi. I'm getting errors like <code>undefined symbol: _ZSt4cout</code> </p>\n<p>I'm following the <a href=\"https://github.com/leanprover/lake/blob/a2ced44b7e5e30c2a6b84b420e1bbdd8d6d8e079/examples/ffi/lib/lakefile.lean\">ffi example</a>, but it does not work as expected.</p>\n<p>The issue seems to be that linking is done with <code>leanc</code>, I tried to replace it with <code>clang++</code> with appropriate flags and then it works. </p>\n<p>Main.lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"print_integer\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">printInt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">USize</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {printInt 42}!\"</span>\n</code></pre></div>\n<p>c/ffi.cpp</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">iostream</span><span class=\"bp\">&gt;</span>\n\n<span class=\"n\">extern</span> <span class=\"s2\">\"C\"</span> <span class=\"n\">size_t</span> <span class=\"n\">print_integer</span><span class=\"o\">(</span><span class=\"n\">size_t</span> <span class=\"n\">n</span><span class=\"o\">){</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"s2\">\"input integer is\"</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"bp\">;</span>\n    <span class=\"n\">return</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>lakefile.lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">fFI</span><span class=\"bp\">»</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">fFI</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">target</span> <span class=\"n\">ffi.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.cpp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"ffi.cpp\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"n\">flags</span> <span class=\"s2\">\"c++\"</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libleanffi</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leanffi\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">ffi.o</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 385966492,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692382776
    },
    {
        "content": "<p>Yes, leanc is not a C++ compiler, it won't implicitly link in a C++ stdlib</p>",
        "id": 385976392,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692387187
    },
    {
        "content": "<p>How can I create a lean package that has external library written in C++?</p>",
        "id": 385979022,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692388224
    },
    {
        "content": "<p>btw, cc: <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> on the unusual casing of <code>package «fFI» {}</code>. I'm guessing this project was created using <code>lake new FFI</code></p>",
        "id": 385979717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692388522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I believe that has since been fixed and it is due to using an old Lake version.</p>",
        "id": 385986066,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692391280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/using.20c.2B.2B.20std.20with.20ffi/near/385979022\">said</a>:</p>\n<blockquote>\n<p>How can I create a lean package that has external library written in C++?</p>\n</blockquote>\n<p>You need to explicitly link <code>libstdc++</code> to it (e.g., via <code>moreLinkArgs := #[\"-lstdc++\"]</code>).</p>",
        "id": 385986318,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692391439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/using.20c.2B.2B.20std.20with.20ffi/near/385986066\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> I believe that has since been fixed and it is due to using an old Lake version.</p>\n</blockquote>\n<p>I just realized that I created the project on an ancient version of lean</p>",
        "id": 385987134,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692391820
    },
    {
        "content": "<p>Where do I add <code>moreLinkArgs := #[\"-lstdc++\"]</code> ? </p>\n<p>Adding it in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">fFI</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-lstdc++\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>does nothing and still leads to the same error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">_ZSt4cout</span>\n</code></pre></div>\n<p>Adding it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">fFI</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-lstdc++\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>produces a new error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"n\">libc</span><span class=\"bp\">++.</span><span class=\"n\">so.1</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"kn\">open</span> <span class=\"n\">shared</span> <span class=\"n\">object</span> <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div>",
        "id": 385987974,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692392211
    },
    {
        "content": "<p>Not sure if this will help, but there's some documentation of what worked for me here <a href=\"#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/307471978\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/C.20FFI.20usage/near/307471978</a></p>",
        "id": 386052251,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692425955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Do you have your WIP code in a repo somewhere? It is hard to debug linking errors without seeing the full configuration.</p>",
        "id": 386145278,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692479492
    },
    {
        "content": "<p>I will set it up in a moment.</p>",
        "id": 386145342,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692479545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/using.20c.2B.2B.20std.20with.20ffi/near/386145278\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> Do you have your WIP code in a repo somewhere? It is hard to debug linking errors without seeing the full configuration.</p>\n</blockquote>\n<p>Here is the repo: <a href=\"https://github.com/lecopivo/lean-cpp-ffi\">https://github.com/lecopivo/lean-cpp-ffi</a></p>",
        "id": 386149990,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692483449
    },
    {
        "content": "<p>Was the yesterday <a href=\"https://github.com/leanprover/lean4/commit/898cd0b64733ed4e6990fd99d06c9bd9fe5093dd\">patch</a> supposed to fix this issue? Because it still does not work :( It is still unclear how am I supposed to link c++ standard library.</p>",
        "id": 387142602,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692901989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I can haz backtrace? :)</p>",
        "id": 387142783,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692902058
    },
    {
        "content": "<p>Backtrace of what? How do I get it?</p>",
        "id": 387143264,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692902271
    },
    {
        "content": "<p>I was wondering what the precise error was when you ran <code>lake build</code>.</p>",
        "id": 387143494,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692902365
    },
    {
        "content": "<p>The output is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cpp</span><span class=\"bp\">-</span><span class=\"n\">ffi</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Main</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tskrivan</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-24/bin/lean ./././Main.lean -R ././. -o ./build/lib/Main.olean -i ./build/lib/Main.ilean -c ./build/ir/Main.c --load-dynlib=./build/lib/libleanffi.so</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">_ZSt4cout</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tskrivan</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-24/bin/lean` exited with code 134</span>\n</code></pre></div>",
        "id": 387143563,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692902400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Did you add <code>-lstdc++</code> (or <code>-lc++</code> on MacOS) to <code>moreLinkArgs</code>?</p>",
        "id": 387169287,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692915220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/using.20c.2B.2B.20std.20with.20ffi/near/387169287\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> Did you add <code>-lstdc++</code> (or <code>-lc++</code> on MacOS) to <code>moreLinkArgs</code>?</p>\n</blockquote>\n<p>Yes I <a href=\"https://github.com/lecopivo/lean-cpp-ffi/blob/84648272d778306a433934f67779d573da10241e/lakefile.lean#L10\">did</a></p>",
        "id": 387169464,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692915317
    },
    {
        "content": "<p>Oh wait, I confused myself. No, that patch was not mean to fix this. That patch was mean to fix compilation of precompiled dynlibs (which is the step before this). This is an issue with using C++ symbols in interactive mode. To fix this you need to add <code>--load-dynlib=stdc++</code> or <code>--load-dynlib=path/to/stdc++.so</code> to your <code>moreLeanArgs</code>.</p>",
        "id": 387170348,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692915920
    },
    {
        "content": "<p>That is, your problem here is that <code>lean</code> itself does not have access to the symbol.</p>",
        "id": 387170376,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692915946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> can you explain what the intended behaviour of the lakefile below is supposed to be?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">FFI</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">FFI</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-lc++abi\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-lstdc++\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">target</span> <span class=\"n\">ffi.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.cpp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"ffi.cpp\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"n\">flags</span> <span class=\"s2\">\"c++\"</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libleanffi</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leanffi\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">ffi.o</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Am I right in assuming that this is supposed to build a <code>libleanffi</code> and link this into the executable <code>FFI</code>?</p>",
        "id": 387170454,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692915975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/using.20c.2B.2B.20std.20with.20ffi/near/387170348\">said</a>:</p>\n<blockquote>\n<p>Oh wait, I confused myself. No, that patch was not mean to fix this. That patch was mean to fix compilation of precompiled dynlibs. This is an issue with using C++ symbols in interactive mode. To fix this you need to add <code>--load-dynlib=stdc++</code> or <code>--load-dynlib=path/to/stdc++.so</code> to your <code>moreLeanArgs</code>.</p>\n</blockquote>\n<p>Yes, this is what I don't understand. Why does the above lakefile cause </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Main</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">t</span><span class=\"bp\">-</span><span class=\"n\">sibhat</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-23/bin/lean ./././Main.lean -R ././. -o ./build/lib/Main.olean -i ./build/lib/Main.ilean -c ./build/ir/Main.c --load-dynlib=./build/lib/libleanffi.so</span>\n</code></pre></div>\n<p>to be executed, where _lean_ (the compiler) tries to load <code>libleanffi.so</code> dynamically?</p>",
        "id": 387170502,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692916017
    },
    {
        "content": "<p>I find the fact that <code>lake</code> adds the argument <code> --load-dynlib=./build/lib/libleanffi.so</code> confusing.</p>",
        "id": 387170619,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692916092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Because Lake tries to load external libraries into Lean's environment so that you can use the symbols interactively.</p>",
        "id": 387170630,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692916098
    },
    {
        "content": "<p>i.e., so that end-users calling <code>#eval someDefThatUsesAnExternSomewhereWithin</code> works and doesn't cause the server to crash.</p>",
        "id": 387170822,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692916209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Shouldn't the principled solution be to add the used definitions from <code>stdc++</code> and <code>c++abi</code> into the static library (<code>libleanffi.a</code>)?</p>",
        "id": 387170935,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692916303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Yes, that would be most ideal. However, statically linking  the C++ stdlib is not always easy.</p>",
        "id": 387171206,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692916453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/using.20c.2B.2B.20std.20with.20ffi/near/387170348\">said</a>:</p>\n<blockquote>\n<p>Oh wait, I confused myself. No, that patch was not mean to fix this. That patch was mean to fix compilation of precompiled dynlibs (which is the step before this). This is an issue with using C++ symbols in interactive mode. To fix this you need to add <code>--load-dynlib=stdc++</code> or <code>--load-dynlib=path/to/stdc++.so</code> to your <code>moreLeanArgs</code>.</p>\n</blockquote>\n<p>The <code>--load-dynlib=stdc++</code> does not work. This is probably because <br>\n<code>.elan/toolchains/leanprover--lean4---nightly-2023-08-23/lib/libc++.so.1</code> does not have the symbol <code>_ZSt4cout</code></p>\n<p>The only library on my machine that has <code>_ZSt4cout</code> is <code>/usr/lib/gcc/x86_64-linux-gnu/9/libstdc++.a</code> which is not a shared library.</p>",
        "id": 387171236,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692916477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> In that case, you can hopefully do what <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> suggested and build a static library from your FFI and your static standard library.</p>",
        "id": 387171296,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692916537
    },
    {
        "content": "<p>What is the lake idiomatic way to organize such a thing?</p>",
        "id": 387171432,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692916635
    },
    {
        "content": "<p>Do I use the command <code>extern_lib</code> and inside do whatever needed to build my static library and output its name?</p>",
        "id": 387171536,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692916697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Sadly, I have not tested Lake before with the C++ standard library. So, it might be best for me to try to get your example working and then come back with a solution. Alternatively, I could give you suggestions and debug failures, but that seems inefficient for both of us.</p>",
        "id": 387171775,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692916878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> For reference, what OS are you on?</p>",
        "id": 387172218,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692917168
    },
    {
        "content": "<p>I'm happy to wait and I would really appreciate you looking into this!</p>\n<p>My ultimate goal is to create bindings for linear algebra library Eigen, I have this repo <a href=\"https://github.com/lecopivo/EigenLean\">https://github.com/lecopivo/EigenLean</a> but <code>lake build sparse</code> which builds example file for sparse matrices ends up with bunch of linker errors.</p>\n<p>I'm on Linux, Ubuntu 20.04 to be precise, but I would really like the Eigen bindings to work on all platforms</p>",
        "id": 387172569,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692917393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> / <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>  I see two potential solutions here:</p>\n<ol>\n<li>Extend the <code>extern_lib</code> syntax to support additional linking arguments when building the shared library from the static one. At this stage, with some additional options (e.g., <code>-static -lstdc++</code>) we could statically link the system libraries with the FFI code to make a self-contained shared library.</li>\n<li>Locate the static library version of the system library and build a fat self-contained static library containing both the FFI code and static system library.</li>\n</ol>",
        "id": 387174230,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692918422
    },
    {
        "content": "<p>(2) is a possible stop-gap solution until a Lake change. (1) has the advantage of avoiding system-dependent lookup of shared libraries in Lean but does require a breaking Lake change.</p>",
        "id": 387174402,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692918524
    },
    {
        "content": "<p>This is all black magic to me and I don't think I understand the trade off between (1) vs (2) properly, so what ever is easier for you :)</p>",
        "id": 387174665,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692918692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Here is a dumb implementation of (2) that should work in the meantime (if you want to start debugging something):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">FFI</span><span class=\"bp\">»</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">FFI</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">target</span> <span class=\"n\">ffi.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.cpp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"ffi.cpp\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"n\">flags</span> <span class=\"s2\">\"c++\"</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libleanffi</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leanffi\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">ffi.o</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdlib</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"/path/to/lib/libstdc++.a\"</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">,</span> <span class=\"n\">stdlib</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 387174911,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692918849
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">➜</span>  <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cpp</span><span class=\"bp\">-</span><span class=\"n\">ffi</span> <span class=\"n\">git</span><span class=\"o\">:(</span><span class=\"n\">master</span><span class=\"o\">)</span> <span class=\"bp\">✗</span> <span class=\"n\">cat</span> <span class=\"n\">lakefile.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">FFI</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">FFI</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"c1\">-- moreLinkArgs := #[\"-L/usr/lib/gcc/x86_64-linux-gnu/11/\", \"-lstdc++\"]</span>\n  <span class=\"c1\">-- moreLeanArgs := #[\"--load-dynlib=/usr/lib/gcc/x86_64-linux-gnu/11/libstdc++.so\"]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">target</span> <span class=\"n\">ffi.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.cpp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"ffi.cpp\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"n\">flags</span> <span class=\"s2\">\"c++\"</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libleanffi</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leanffi\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">ffi.o</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdlib</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"/usr/lib/gcc/x86_64-linux-gnu/11/libstdc++.a\"</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">,</span> <span class=\"n\">stdlib</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">➜</span>  <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cpp</span><span class=\"bp\">-</span><span class=\"n\">ffi</span> <span class=\"n\">git</span><span class=\"o\">:(</span><span class=\"n\">master</span><span class=\"o\">)</span> <span class=\"bp\">✗</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">Creating</span> <span class=\"n\">libleanffi.a</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">libleanffi.so</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">t</span><span class=\"bp\">-</span><span class=\"n\">sibhat</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-23/bin/leanc -shared -o ./build/lib/libleanffi.so -Wl,--whole-archive ./build/lib/libleanffi.a -Wl,--no-whole-archive</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.a</span><span class=\"o\">(</span><span class=\"n\">libstdc</span><span class=\"bp\">++.</span><span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"n\">ELF</span> <span class=\"n\">file</span>\n<span class=\"n\">clang</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">t</span><span class=\"bp\">-</span><span class=\"n\">sibhat</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-23/bin/leanc` exited with code 1</span>\n</code></pre></div>",
        "id": 387175278,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692919141
    },
    {
        "content": "<p>I'm getting the same error :/</p>",
        "id": 387175554,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692919345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> ,  I don't think it likes us having an archive containing an archive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">c</span><span class=\"bp\">++</span>  <span class=\"bp\">-</span><span class=\"n\">shared</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span> <span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--whole-archive ./build/lib/libleanffi.a -Wl,--no-whole-archive</span>\n<span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.a</span><span class=\"o\">:</span> <span class=\"n\">member</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.a</span><span class=\"o\">(</span><span class=\"n\">libstdc</span><span class=\"bp\">++.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">archive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"n\">object</span>\n<span class=\"n\">collect2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ld</span> <span class=\"n\">returned</span> <span class=\"mi\">1</span> <span class=\"n\">exit</span> <span class=\"n\">status</span>\n</code></pre></div>",
        "id": 387175617,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692919413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> / <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Sorry, yeah, my code is buggy. I realized only after I posted that that it was not doing what it was supposed to.</p>",
        "id": 387175860,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692919578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Thanks for helping with this!</p>",
        "id": 387175883,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692919599
    },
    {
        "content": "<p>As per <a href=\"https://stackoverflow.com/questions/3821916/how-to-merge-two-ar-static-libraries-into-one\">https://stackoverflow.com/questions/3821916/how-to-merge-two-ar-static-libraries-into-one</a>, it seems like maybe we can teach <code>lake</code> to generate an <code>MRI</code> script on the fly and feed that into <code>ar</code>?</p>",
        "id": 387175944,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692919653
    },
    {
        "content": "<p><a href=\"https://github.com/google/shaderc/issues/473#issuecomment-409754031\">https://github.com/google/shaderc/issues/473#issuecomment-409754031</a> </p>\n<p>Jeez, so an <code>MRI</code> script does not like to have <code>+</code>s in it, so no linking to <code>stdc++</code> :P</p>",
        "id": 387176334,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692919936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> / <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Here is an extremely hacky, but now working, Linux solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">FFI</span><span class=\"bp\">»</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">ffi</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"--load-dynlib=./build/lib/libstdcpp.so\"</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-Lbuild/lib\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-lstdc++\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">target</span> <span class=\"n\">ffi.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.cpp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"ffi.cpp\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"n\">flags</span> <span class=\"s2\">\"c++\"</span>\n\n<span class=\"c1\">-- Path to system static lib</span>\n<span class=\"kd\">def</span> <span class=\"n\">staticStdlib</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/usr/lib/gcc/x86_64-linux-gnu/9/libstdc++.a\"</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libstdcpp</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">libFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"stdcpp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">contents</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readBinFile</span> <span class=\"n\">staticStdlib</span>\n  <span class=\"n\">createParentDirs</span> <span class=\"n\">libFile</span>\n  <span class=\"n\">IO.FS.writeBinFile</span> <span class=\"n\">libFile</span> <span class=\"n\">contents</span>\n  <span class=\"n\">inputFile</span> <span class=\"n\">libFile</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libleanffi</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leanffi\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">ffi.o</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 387182280,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692923745
    },
    {
        "content": "<p>Attempting to construct a working example revealed a number of bugs and missing features in Lake, which I hope to fix soon.</p>",
        "id": 387182408,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692923794
    }
]