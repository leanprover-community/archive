[
    {
        "content": "<p>I just implemented <a href=\"https://github.com/digama0/lean4lean/commit/7591bedb00d5c19412cef7c001cae82800ed8b5b\">checking primitive declarations in <code>lean4lean</code></a> because it's needed for having any hope of proving soundness. This is a longstanding known soundness hole in the kernel (<a href=\"https://github.com/leanprover/lean4/pull/188\">lean4#188</a>), but low priority because it's only an issue if people write a replacement for <code>Prelude.lean</code>, which is not a supported use case. But I'd like to backport this to the lean kernel and finally close this gap.</p>\n<p>Before doing so however I think it's worth discussing whether we should consider another implementation. The approach I took is to not change the main part of the kernel at all, and instead say that declarations like <code>Nat</code>, <code>String</code>, <code>Nat.add</code> are \"magic names\" such that if they exist in the environment at all then they are the expected definitions. This way the code for inferring types of literals and doing kernel accelerated evaluation of the nat definitions can carry on as before, but now you are no longer allowed to write <code>def Nat := Empty</code> and other things like that.</p>\n<p>An alternative (and IMO saner) design would be to have flags in the environment like <code>quotInit</code> for kernel accelerated definitions. So for example there would be one allowing you to use string literals, one enabling natural number literals, and one or more for each of the kernel accelerated nat functions. It would be an explicit directive which is sequenced with respect to others, avoiding the issue of <a href=\"https://github.com/digama0/lean4lean/blob/7591bedb00d5c19412cef7c001cae82800ed8b5b/Main.lean#L153-L158\">silent dependencies that are not reflected in the declaration</a>. This is <a href=\"https://github.com/coq/coq/blob/563653057574632aa261adc0299e1d7a5b99f855/theories/Numbers/Cyclic/Int63/PrimInt63.v#L13-L19\">how Coq does it</a>.</p>\n<p>As regards the current design, there are <a href=\"https://github.com/digama0/lean4lean/blob/7591bedb00d5c19412cef7c001cae82800ed8b5b/Lean4Lean/Primitive.lean#L69\">still some TODOs</a> relating to checking <code>Nat.div</code> and <code>Nat.mod</code>, because unlike the others these are not structurally recursive, so there isn't an easy choice of definitional equalities which witness that all ground terms evaluate (definitionally!) as expected. I think it may be necessary to PR a change to the definition to replace the definition with one that does structural recursion instead; I don't think it should cause any breakage since WF definitions more or less don't reduce anyway.</p>",
        "id": 408455066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702831361
    },
    {
        "content": "<p>Would this be structural recursive version of <code>Nat.div</code>and <code>Nat.mod</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat.divMod</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">divMod</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n      <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 408469451,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1702838558
    },
    {
        "content": "<p>I was thinking of something closer to the original definition, with a fuel variable</p>",
        "id": 408469696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702838681
    },
    {
        "content": "<p>but that definition would work (modulo some <a href=\"https://github.com/leanprover/lean4/blob/8475ec7e362f3f80809973fcdda410388f72b42b/src/Init/Data/Nat/Div.lean#L77-L82\">special cases</a>)</p>",
        "id": 408470808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702839150
    },
    {
        "content": "<p>Here's a variation that doesn't involve having to introduce any new primitives (in your version we would need: <code>ite</code>, <code>=</code>, <code>Decidable</code>, <code>instDecidableEqNat</code>, <code>Prod.mk</code>, <code>Prod.casesOn</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divMod1</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">divMod2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"mi\">0</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">divMod2</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">divMod1</span> <span class=\"o\">(</span><span class=\"n\">Nat.beq</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 408473147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702840252
    },
    {
        "content": "<p>that is, to validate this we would check the definitional equalities:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">divMod1</span> <span class=\"n\">true</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"n\">divMod1</span> <span class=\"n\">false</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">divMod2</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"mi\">0</span> <span class=\"n\">n</span>\n<span class=\"n\">divMod2</span> <span class=\"mi\">0</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"n\">divMod2</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">divMod2</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">divMod1</span> <span class=\"o\">(</span><span class=\"n\">Nat.beq</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 408473351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702840426
    },
    {
        "content": "<p>Playing with the original definition some more I found a completely elementary version which is however pretty obfuscated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divCore</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">modCore</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">divModCore</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">divModCore</span> <span class=\"n\">y</span> <span class=\"n\">k</span> <span class=\"n\">fuel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.ble</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mod</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">divModCore</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">modCore</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">div</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">divModCore</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">divCore</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 408474617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702841556
    },
    {
        "content": "<p>I like Agda's approach, which is to put a <code>BUILTIN</code> annotation on each builtin/overridden declaration. The annotation checks that the definition is really the expected one. See e.g. <a href=\"https://github.com/agda/agda/blob/ee876ee229cdc2f3b1ff80f6d60568a1869f9385/src/data/lib/prim/Agda/Builtin/Nat.agda\">here</a> for natural numbers; example from that file:</p>\n<div class=\"codehilite\" data-code-language=\"Agda\"><pre><span></span><code><span class=\"kr\">data</span><span class=\"w\"> </span>Nat<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"w\">  </span><span class=\"nf\">zero</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>Nat\n<span class=\"w\">  </span><span class=\"nf\">suc</span><span class=\"w\">  </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"o\">(</span>n<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>Nat<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>Nat\n\n<span class=\"cm\">{-# BUILTIN NATURAL Nat #-}</span>\n</code></pre></div>",
        "id": 408565769,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702890610
    },
    {
        "content": "<p>That sounds isomorphic to the coq version, modulo syntax</p>",
        "id": 408565925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702890676
    },
    {
        "content": "<p>what happens if you put stuff between the declaration and the annotation?</p>",
        "id": 408565983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702890705
    },
    {
        "content": "<p>I would assume that <code>Nat</code> is treated like any other inductive type before the <code>BUILTIN</code> annotation.</p>",
        "id": 408566176,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702890777
    },
    {
        "content": "<p>(I think that an attribute on the declaration would make a reasonable concrete syntax for the annotation in lean.)</p>",
        "id": 408566274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702890814
    },
    {
        "content": "<p>I've wanted to have these anyway if only for documentation purposes (since otherwise you would have no idea looking at the definition that it is magic)</p>",
        "id": 408566454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702890870
    },
    {
        "content": "<p>in lean 3 we had this issue a lot with meta constants, at least in lean 4 these need an <code>@[extern]</code> annotation so they don't pass unnoticed</p>",
        "id": 408566630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702890934
    }
]