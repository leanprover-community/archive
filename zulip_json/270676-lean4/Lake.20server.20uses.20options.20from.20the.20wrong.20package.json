[
    {
        "content": "<p>If you ctrl-click on a <code>import Std.Data.List.Basic</code> from mathlib, you get errors when processing the file because of autoimplicits (mathlib uses <code>relaxedAutoImplicit=false</code>, std doesn't). This seems like a configuration issue in lake, it should be using the options from the original package.</p>",
        "id": 376826199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689817615
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 376826407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689817743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This is a VSCode issue. VSCode processes go-to-def files using the workspace server, which is configured according to the root package. Thus, if you go-to-def any file within a mathlib workspace, it will use mathlib's configuration.</p>",
        "id": 376826650,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689817893
    },
    {
        "content": "<p>I'm also suspecting that mathlib should not be setting <code>moreServerArgs</code> at all, the option <code>relaxedAutoImplicit=false</code> is relevant to compilation and should be set directly on lean, not on the server</p>",
        "id": 376826769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689817953
    },
    {
        "content": "<p>it is currently being set on both</p>",
        "id": 376826788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689817966
    },
    {
        "content": "<p>do <code>moreLeanArgs</code> settings also take effect when browsing relevant files in the server?</p>",
        "id": 376826865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689818022
    },
    {
        "content": "<p>it doesn't seem to be</p>",
        "id": 376827060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689818156
    },
    {
        "content": "<p>which is awkward, I think it means it is impossible to set these options correctly</p>",
        "id": 376827135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689818178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> This doesn't really sound like a vscode issue though. We have one server running, okay, but the options to pass to lean when running a file worker need to be customized per-file, how is that configuration passed along? How <em>should</em> it be passed along?</p>",
        "id": 376828668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689819060
    },
    {
        "content": "<p>also cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> since this seems like a server issue</p>",
        "id": 376828869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689819208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The most principled way to fix this would be for Lake to manage the watchdog and spawn workers with proper settings based on its knowledge of the workspace configuration (and the ability to load any workspaces in subdirectories).</p>",
        "id": 376829758,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689819716
    },
    {
        "content": "<p>However, that is a large refactor, and the question is what is the best large refactor to do next.</p>",
        "id": 376829850,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689819762
    },
    {
        "content": "<p>how is this data getting around right now?</p>",
        "id": 376829880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689819785
    },
    {
        "content": "<p>Lake spawns the server with fixed environment variables and arguments, the server spawns a lake process to build module dependencies and receives some information about their configuration in the build output before elaborating the module. That is the sum total of their interaction.</p>",
        "id": 376830069,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689819906
    },
    {
        "content": "<p>am I right in understanding that:</p>\n<ul>\n<li><code>lake serve</code> is run at the workspace root by vscode</li>\n<li><code>lake</code> picks up the <code>moreServerArgs</code> settings from the root lakefile</li>\n<li><code>lake</code> calls <code>lean --server</code> with these args</li>\n<li><code>Lean.Server</code> stores these args somewhere and passes them to file workers</li>\n</ul>",
        "id": 376830075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689819908
    },
    {
        "content": "<p>Yes</p>",
        "id": 376830116,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689819938
    },
    {
        "content": "<p>and I guess the only reason the server can even find the files is because lake sets the LEAN_SRC_PATH</p>",
        "id": 376830209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689819987
    },
    {
        "content": "<p>how does the server rebuild the file dependencies if it's out of date?</p>",
        "id": 376830322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689820017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  <code>lake print-paths</code></p>",
        "id": 376844721,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689827573
    },
    {
        "content": "<p>(let me take this moment to comment on how poorly named that command is)</p>",
        "id": 376844788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689827625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  my understanding is that Sebastian is responsible for the name ;)</p>",
        "id": 376844983,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689827753
    },
    {
        "content": "<p>And, admittedly, it <em>does</em> print paths.</p>",
        "id": 376845110,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689827812
    },
    {
        "content": "<p>On that note I also have a simple implementation of the JSON export mentioned at <a href=\"https://github.com/leanprover/lake/pull/176\">!lake#176</a> , and perhaps if it is merged into lake it can be used by the server as an actual \"print-paths\" so it knows where the packages are and the lake options for them, although this would require the json data structures being in the Lean package or otherwise in some commonly accessible location</p>",
        "id": 376845158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689827844
    },
    {
        "content": "<p>perhaps the recent move of lake into lean4 repo will simplify this</p>",
        "id": 376845174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689827863
    },
    {
        "content": "<p>Here is the export program: <a href=\"https://github.com/digama0/lean-cache/blob/main/lake-ext/Main.lean\">https://github.com/digama0/lean-cache/blob/main/lake-ext/Main.lean</a> . Is there anything you think should not be included in the output <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> ?</p>",
        "id": 376846987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689828927
    },
    {
        "content": "<p>sample output: <a href=\"/user_uploads/3121/50yeuG1pJg3TmiWi8CqYCdYj/workspace-manifest.json\">workspace-manifest.json</a></p>",
        "id": 376847531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689829244
    },
    {
        "content": "<p>Most of the data is generic stuff useful for any tool like <code>lake exe cache</code> or the server to find your way around the packages and libraries in the workspace. Some of it is specific to the user's machine, e.g. absolute paths to the project itself or to the lean installation folder</p>",
        "id": 376847914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689829449
    },
    {
        "content": "<p>another unfortunate thing is that it does not reflect any <code>-K</code> flag specific things encoded by <code>meta if</code> in the lakefile, but this is kind of inherent in the way lake processes the lakefile</p>",
        "id": 376848015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689829520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That is definitely very different from what I was thinking of for 176. I  would not include build-related data like lean lib/exe configs or environment/platform data like <code>Lake.Env</code> in the manifest. What I would stick in there is just layout data from the workspace/package (e.g., <code>buildDir</code>, <code>libDir</code>, etc.) along with paths  (e.g., <code>leanPath</code>, etc. -- some of which may just be derivable from the layout info) and package configurations options (e.g., <code>-K</code> settings).</p>",
        "id": 376854155,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689832214
    },
    {
        "content": "<p>As such, I suspect you have a different kind of use case in mind. I am curious to see how you use those results in practice.</p>",
        "id": 376854308,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689832284
    },
    {
        "content": "<p>See the other thread :)</p>",
        "id": 376854329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689832294
    },
    {
        "content": "<p>What other thread?</p>",
        "id": 376854356,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689832309
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite</a></p>",
        "id": 376854371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689832315
    },
    {
        "content": "<p>Oh, I see you are mostly using the exports to generate traces yourself.</p>",
        "id": 376855156,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689832649
    },
    {
        "content": "<p>However, you are not really using much of what you export either. So, my initial thought of just layout would get you most of the way there, the only thing else you are looking for is the arguments.</p>",
        "id": 376855414,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689832785
    },
    {
        "content": "<p>the only part of the <code>Lake.Env</code> I am using right now is the githash</p>",
        "id": 376855626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689832858
    },
    {
        "content": "<p>I guess because it's a component in the trace</p>",
        "id": 376855744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689832894
    },
    {
        "content": "<p>which you could also just call <code>lean --githash</code> to get.</p>",
        "id": 376855755,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689832897
    },
    {
        "content": "<p>what a waste of 183 ms</p>",
        "id": 376855886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689832938
    },
    {
        "content": "<p>I don't see a reason to keep that out of the workspace manifest, in fact do you have a clear statement of what things should not be in there and why?</p>",
        "id": 376856195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833054
    },
    {
        "content": "<p>because (as you can tell) I took a pretty maximalist approach, stashing pretty much everything that can be json encoded from lake's state</p>",
        "id": 376856293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833091
    },
    {
        "content": "<p>Well, I would argue it is duplicate information.</p>",
        "id": 376856299,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833096
    },
    {
        "content": "<p>duplicating what?</p>",
        "id": 376856328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833105
    },
    {
        "content": "<p>Information already derivable from the <code>lean-toolchain</code>.</p>",
        "id": 376856381,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833126
    },
    {
        "content": "<p>the lean toolchain does not have a githash?</p>",
        "id": 376856452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833146
    },
    {
        "content": "<p>you have to hit the network to turn it into a githash</p>",
        "id": 376856492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833159
    },
    {
        "content": "<p>that's the whole point of precomputing this stuff</p>",
        "id": 376856588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833182
    },
    {
        "content": "<p>it is all derivable, of course, it just takes way too long to do it all the time</p>",
        "id": 376856629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833197
    },
    {
        "content": "<p>Also, your custom trace computation is relying on underspecified behavior of Lake (the trace computation is not part of Lake's public API).</p>",
        "id": 376856633,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833198
    },
    {
        "content": "<p>that's nice</p>",
        "id": 376856651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833210
    },
    {
        "content": "<p>It is fine for now (and it may be fine for a long while), but I would not consider breaking it a breaking change. It is also why I would keep your version of <code>lake_ext</code> independent.</p>",
        "id": 376856790,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833274
    },
    {
        "content": "<p>if you change it, this program would just change to match</p>",
        "id": 376856894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376856492\">said</a>:</p>\n<blockquote>\n<p>you have to hit the network to turn it into a githash</p>\n</blockquote>\n<p>In order to run Lake, you need to have already downloaded the toolchain, so it is just a CLI call, not a network call.</p>",
        "id": 376856928,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833315
    },
    {
        "content": "<p>I'm not running lake though, that's the point</p>",
        "id": 376856971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833335
    },
    {
        "content": "<p>Or Lean.</p>",
        "id": 376857003,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833347
    },
    {
        "content": "<p>I'm not running lean either</p>",
        "id": 376857025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833354
    },
    {
        "content": "<p>I'm running curl</p>",
        "id": 376857049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833363
    },
    {
        "content": "<p>You cannot do anything of relevance without a downloaded toolchain.</p>",
        "id": 376857054,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833364
    },
    {
        "content": "<p>What is the point of downloading oleans without a toolchain?</p>",
        "id": 376857089,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833380
    },
    {
        "content": "<p>the point is that running external tools is slow and I'm trying to make <code>lake exe cache</code> not take 10 seconds</p>",
        "id": 376857210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376856971\">said</a>:</p>\n<blockquote>\n<p>I'm not running lake though, that's the point</p>\n</blockquote>\n<p>According to your stats, running Lake only has a 1s impact, that does not seem to be the major time factor here.</p>",
        "id": 376857247,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833431
    },
    {
        "content": "<p>That's a 1 second impact whenever you run anything using lake, including <code>lake env</code></p>",
        "id": 376857353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833471
    },
    {
        "content": "<p>I assure you <code>env</code> doesn't take 1 second</p>",
        "id": 376857410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833493
    },
    {
        "content": "<p>Yes, and I agree that is something that needs to be fixed.</p>",
        "id": 376857414,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833494
    },
    {
        "content": "<p>But that is separate from the trace computation you are doing.</p>",
        "id": 376857470,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833520
    },
    {
        "content": "<p>the trace computation is about 4 seconds IIRC, it can be brought down to 1 second by caching the hashes of oleans (which I would like to upstream to lake as well)</p>",
        "id": 376857658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833573
    },
    {
        "content": "<p>My point with the time save was that your new cache has went from 10s with lake+old-cache to 4s with new-cache plus 1 sec from lake.</p>",
        "id": 376857743,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833602
    },
    {
        "content": "<p>What interests me is why why new-cache is still 2x faster even with Lake factored out.</p>",
        "id": 376857916,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833646
    },
    {
        "content": "<p>old-cache isn't even doing the trace computation</p>",
        "id": 376858024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833697
    },
    {
        "content": "<p>it's one of the more expensive parts of new-cache</p>",
        "id": 376858088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689833713
    },
    {
        "content": "<p>Okay, then I am very confused.</p>",
        "id": 376858129,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376857658\">said</a>:</p>\n<blockquote>\n<p>the trace computation is about 4 seconds IIRC, it can be brought down to 1 second by caching the hashes of oleans (which I would like to upstream to lake as well)</p>\n</blockquote>\n<p>What do you mean by caching the hash of an olean?</p>",
        "id": 376858227,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689833775
    },
    {
        "content": "<p>The trace computation for a lean file involves the <code>olean+ilean</code> hash of the dependencies. This is silly, because those are output files. You can calculate the hash of these files right after you build them and store a <code>.olean.trace</code> file, then when you are later looking for the hash of this file you instead just read it out of the <code>.olean.trace</code> file. These files are huge and numerous, reading them is the majority of the cost of the trace computation</p>",
        "id": 376858786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376857210\">said</a>:</p>\n<blockquote>\n<p>the point is that running external tools is slow and I'm trying to make <code>lake exe cache</code> not take 10 seconds</p>\n</blockquote>\n<p>Which is fair. My suggestion is that Lake be updated to export the layout data into the manifest and <code>lean_ext</code> can be used to export trace related stuff into a different manifest (e.g., the args and githash).</p>",
        "id": 376858833,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834016
    },
    {
        "content": "<p>sure, if you want two json files that's fine too</p>",
        "id": 376859030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834099
    },
    {
        "content": "<p>it would be preferable to not have to ship <code>lean_ext</code> though, and it's really hard to write that code from rust without FFI bindings for lake</p>",
        "id": 376859156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376858786\">said</a>:</p>\n<blockquote>\n<p>The trace computation for a lean file involves the <code>olean+ilean</code> hash of the dependencies. This is silly, because those are output files. You can calculate the hash of these files right after you build them and store a <code>.olean.trace</code> file, then when you are later looking for the hash of this file you instead just read it out of the <code>.olean.trace</code> file.</p>\n</blockquote>\n<p>Ah so you are saying to precompute the hash on (every) build, store it, and used the stored version when doing a trace double-check. That sounds good to me.</p>",
        "id": 376859215,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376859156\">said</a>:</p>\n<blockquote>\n<p>it would be preferable to not have to ship <code>lean_ext</code> though</p>\n</blockquote>\n<p>What is the difficulty with shipping a separate package? The reason why I don't want to include in Lake is simply because this part of Lake (trace computation / build details) is not meant to be public API and thus I do not want to present a false sense of guaranteed maintenance or continued functioning.</p>",
        "id": 376860112,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834435
    },
    {
        "content": "<p>Along these lines, it is worth noting your trace computation will break with custom dependencies / builds for a library / executable.</p>",
        "id": 376860320,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834498
    },
    {
        "content": "<p>which part of <code>lake_ext</code> don't you want to export?</p>",
        "id": 376860330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834501
    },
    {
        "content": "<p>Primarily, build configs.</p>",
        "id": 376860402,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834531
    },
    {
        "content": "<p>The trace computation is partial, if you depend on precompileModules then it doesn't try to compute the trace, and as a result it doesn't have to deal with extern libs either</p>",
        "id": 376860664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834607
    },
    {
        "content": "<p>Build configs are a user-facing customization feature. That is, the public interface is a stable part of  Lake, but how they are used internally to perform builds is not.</p>",
        "id": 376860689,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834614
    },
    {
        "content": "<p>I'm pretty sure the computation is correct in all cases where it returns a value</p>",
        "id": 376860729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> oh, what about <code>extraDepTargets</code>?</p>",
        "id": 376860838,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834678
    },
    {
        "content": "<p>(and cloud releases i.e. <code>preferReleaseBuild</code>)</p>",
        "id": 376860879,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834699
    },
    {
        "content": "<p>you can't have any under these conditions, I checked</p>",
        "id": 376860900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834706
    },
    {
        "content": "<p>(I had to include all of these things because they are inputs to the hash)</p>",
        "id": 376861021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you can't have them under what condition?</p>",
        "id": 376861028,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834745
    },
    {
        "content": "<p>(you can certainly have them without <code>precompileModules</code>)</p>",
        "id": 376861074,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834765
    },
    {
        "content": "<p>or do you mean you check to make sure the array is empty?</p>",
        "id": 376861157,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834791
    },
    {
        "content": "<p>if <code>precompileModules</code> is false, then you always have 0 precompile modules, so you have 0 modJobs, 0 externJobs and 0 externDynlibs</p>",
        "id": 376861314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689834849
    },
    {
        "content": "<p>Also, a near-term TODO is to add <code>extraDepTargets</code> (or similar) to libraries and executables as well.</p>",
        "id": 376861317,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376861314\">said</a>:</p>\n<blockquote>\n<p>if <code>precompileModules</code> is false, then you always have 0 precompile modules, so you have 0 modJobs, 0 externJobs and 0 externDynlibs</p>\n</blockquote>\n<p>Yes, but you can still set <code>extraDepTargets</code> on a <code>package</code>, which will feed into the library, executable, and module traces.</p>",
        "id": 376861360,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834873
    },
    {
        "content": "<p>(e.g., the <code>extraDepJob</code> in <code>Module.recBuildDeps</code>)</p>",
        "id": 376861589,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689834959
    },
    {
        "content": "<p>(did you rebase <code>origin/master</code>?)</p>",
        "id": 376861854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689835045
    },
    {
        "content": "<p>In fact, more customization of builds is something that, for instance, Wojciech could really use in ProofWidgets.</p>",
        "id": 376861865,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376861854\">said</a>:</p>\n<blockquote>\n<p>(did you rebase <code>origin/master</code>?)</p>\n</blockquote>\n<p>huh?</p>",
        "id": 376861903,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835069
    },
    {
        "content": "<p>not in a good while?</p>",
        "id": 376862010,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835093
    },
    {
        "content": "<p>I can't ff merge <code>master</code>, I'm on a commit from 3 weeks ago which looks like it got rewritten</p>",
        "id": 376862061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689835113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376861865\">said</a>:</p>\n<blockquote>\n<p>In fact, more customization of builds is something that, for instance, Wojciech could really use in ProofWidgets.</p>\n</blockquote>\n<p>The reason I am mentioned this is because any such customization will further introduce opportunities to break static trace computation.</p>",
        "id": 376862146,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376862061\">said</a>:</p>\n<blockquote>\n<p>I can't ff merge <code>master</code>, I'm on a commit from 3 weeks ago which looks like it got rewritten</p>\n</blockquote>\n<p>Yes, possibly, if you were unlucky and happen to pull right when I was fixing a test.</p>",
        "id": 376862281,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835192
    },
    {
        "content": "<p>okay I'm back on origin/master (I wasn't able to find <code>recBuildDeps</code>, I guess it was recently renamed)</p>",
        "id": 376862473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689835259
    },
    {
        "content": "<p>However, <code>extraDepJob</code> has been there for a long time.</p>",
        "id": 376862490,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835262
    },
    {
        "content": "<p>okay, I see it now... <code>extraDepJob</code> is there but it doesn't seem to contribute to the trace</p>",
        "id": 376862672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689835319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376862473\">said</a>:</p>\n<blockquote>\n<p>okay I'm back on origin/master (I wasn't able to find <code>recBuildDeps</code>, I guess it was recently renamed)</p>\n</blockquote>\n<p>Ah, yeah, that was introduced in a refactor 2 weeks ago. Sorry, I was going to mention that, but your rebase concern confused me and led me to believe something else was the matter. <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 376862767,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376862672\">said</a>:</p>\n<blockquote>\n<p>okay, I see it now... <code>extraDepJob</code> is there but it doesn't seem to contribute to the trace</p>\n</blockquote>\n<p>Oh, you are right! That is a bug.</p>",
        "id": 376862889,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835373
    },
    {
        "content": "<p>I am surprised I never noticed that.</p>",
        "id": 376862981,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835396
    },
    {
        "content": "<p>I'll wait until you fix this upstream before handling it in new-cache, but I'm guessing that it will involve using <code>none</code> for the trace if anything we can't run shows up</p>",
        "id": 376863392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689835525
    },
    {
        "content": "<p>for the cache it's fine if the calculation is approximate, we just want to determine when <code>lake</code> will think the file is up to date so we don't have to download/unpack it</p>",
        "id": 376864007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689835684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> How often are you expecting to be able to run <code>new-cache</code> without a <code>lake-ext</code> right before? I am having a hard time coming up with cases where this would occur outside of exceptional circumstances.</p>",
        "id": 376864885,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689835955
    },
    {
        "content": "<p>The reason I ask, is it might just be more useful to have lake spit out the dirty files instead?</p>",
        "id": 376865134,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689836039
    },
    {
        "content": "<p>The intention is to have a <code>workspace-manifest.trace</code> file as well, so we know when to re-run <code>lake-ext</code>. (Right now it just prompts the user to do so)</p>",
        "id": 376865412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836105
    },
    {
        "content": "<p>but in many situations it doesn't get invalidated even if you change branches</p>",
        "id": 376865657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836175
    },
    {
        "content": "<p>How would that work? There does not seem to be a way to generate that without running lake, and if you are running lake you might as well just regenerate the file.</p>",
        "id": 376865688,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689836185
    },
    {
        "content": "<p>generate what</p>",
        "id": 376865821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836222
    },
    {
        "content": "<p><code>workspace-manifest.trace</code></p>",
        "id": 376865920,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689836250
    },
    {
        "content": "<p>it's just the hash of the lakefile right now</p>",
        "id": 376866020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836275
    },
    {
        "content": "<p>But the lakefile can dynamically change based on configuration and just pure IO?</p>",
        "id": 376866182,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689836311
    },
    {
        "content": "<p>I guess the goal here is just best effort?</p>",
        "id": 376866259,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689836337
    },
    {
        "content": "<p>sure, you could put a random number generator in the lakefile but then you have bigger problems</p>",
        "id": 376866286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836344
    },
    {
        "content": "<p>we are indeed making the assumption that the workspace manifest is a pure function of the lakefile contents and the OS configuration</p>",
        "id": 376866424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836399
    },
    {
        "content": "<p>The lakefile can also use things like platform, architecture, package versions, etc. to change the configuration.</p>",
        "id": 376866514,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689836413
    },
    {
        "content": "<p>I'm not assuming it is platform independent</p>",
        "id": 376866641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376866424\">said</a>:</p>\n<blockquote>\n<p>we are indeed making the assumption that the workspace manifest is a pure function of the lakefile contents and the OS configuration</p>\n</blockquote>\n<p>Which is fine as a simplifying assumption, but not as a general one.</p>",
        "id": 376866656,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689836458
    },
    {
        "content": "<p>I mean, you are already in trouble just with file paths</p>",
        "id": 376866718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836476
    },
    {
        "content": "<p>it's fine for something that does caching, because if you have a random number generator in the lakefile then caching is pointless</p>",
        "id": 376866800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376866641\">said</a>:</p>\n<blockquote>\n<p>I'm not assuming it is platform independent</p>\n</blockquote>\n<p>Fair, but I was also thinking of a lakefile that builds differently depending on which system libraries are available.</p>",
        "id": 376866802,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689836507
    },
    {
        "content": "<p>yeah, <code>-K</code> options are also problematic for the same reason</p>",
        "id": 376866968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836545
    },
    {
        "content": "<p>there isn't much that can be done about it</p>",
        "id": 376867010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836553
    },
    {
        "content": "<p>ultimately <code>lakefile.lean</code> is a program that generates output, and <code>workspace-manifest.json</code> is that output</p>",
        "id": 376867140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836591
    },
    {
        "content": "<p>If there was a <code>dont-cache-me-bro</code> flag that you could set in the lakefile then it could be used to signal shenanigans and avoid this issue</p>",
        "id": 376867406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836658
    },
    {
        "content": "<p>for most system configuration, I think it is safe to assume that it doesn't change that often, at least not between branches of the same project (which is the primary use case of <code>lake exe cache</code>)</p>",
        "id": 376867722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689836754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376865134\">said</a>:</p>\n<blockquote>\n<p>The reason I ask, is it might just be more useful to have lake spit out the dirty files instead?</p>\n</blockquote>\n<p>This would be a useful feature regardless</p>",
        "id": 376869366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689837240
    },
    {
        "content": "<p>Is... there a tl;dr? Are we still talking about the original issue?</p>",
        "id": 376899764,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689844157
    },
    {
        "content": "<p>Note that we have not yet implemented multi-root workspaces support in vscode-lean4, though I believe roots have to be added manually. In Emacs this all just works out of the box afaik...</p>",
        "id": 376903788,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689844890
    }
]