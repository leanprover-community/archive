[
    {
        "content": "<p>Hello <code>WfRel</code> experts! I gave <a href=\"#narrow/stream/113488-general/topic/Rustan's.20challenge\">Rustan's challenge</a> a shot using a big-step normalization relation. But proofs by structural recursion on derivations of this relation are failing, and I am not entirely sure how to fix them other than by coming up with a manual termination measure based on a data-relevant argument . I would be grateful for tips as to why the<code>sizeOf h &lt; sizeOf h'</code> hint doesn't help.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Var</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Env</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Env</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">Env</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">Var</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"bp\">∅</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">vars_cons</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">insert</span> <span class=\"n\">p.1</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">vars</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getVar</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Var</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Γ.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Env</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">lit</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">fls</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">lit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ.</span><span class=\"n\">getVar</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">cv</span> <span class=\"bp\">←</span> <span class=\"n\">eval</span> <span class=\"bp\">Γ</span> <span class=\"n\">c</span>\n    <span class=\"k\">if</span> <span class=\"n\">cv</span> <span class=\"k\">then</span> <span class=\"n\">eval</span> <span class=\"bp\">Γ</span> <span class=\"n\">t</span>\n    <span class=\"k\">else</span> <span class=\"n\">eval</span> <span class=\"bp\">Γ</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">fv</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">Var</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fv</span> <span class=\"n\">c</span> <span class=\"bp\">∪</span> <span class=\"n\">fv</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">fv</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- A big-step 'normalizes to' relation `Γ | e ↝ e'`.</span>\n<span class=\"sd\">The output is guaranteed to be in normal form.</span>\n<span class=\"sd\">We first verify the correctness of this relation,</span>\n<span class=\"sd\">and then write a function to compute it. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Norm</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nLit</span> <span class=\"o\">:</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">lit</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lit</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nVar</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"bp\">Γ.</span><span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nVarMem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lit</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteTr</span> <span class=\"o\">:</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">c</span> <span class=\"n\">tr</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">t'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteFls</span> <span class=\"o\">:</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">c</span> <span class=\"n\">fls</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteVarEq</span> <span class=\"o\">:</span>\n    <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"bp\">→</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">t'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteVarNe</span> <span class=\"o\">:</span>\n    <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"bp\">→</span> <span class=\"n\">t'</span> <span class=\"bp\">≠</span> <span class=\"n\">f'</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t'</span> <span class=\"n\">f'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteIteEq</span> <span class=\"o\">:</span>\n    <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t'</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">t'</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">t''</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">f'</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f''</span> <span class=\"bp\">→</span> <span class=\"n\">t''</span> <span class=\"bp\">=</span> <span class=\"n\">f''</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">t''</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteIteNe</span> <span class=\"o\">:</span>\n    <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t'</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">t'</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">t''</span> <span class=\"bp\">→</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">f'</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f''</span> <span class=\"bp\">→</span> <span class=\"n\">t''</span> <span class=\"bp\">≠</span> <span class=\"n\">f''</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t''</span> <span class=\"n\">f''</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Norm</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Γ</span> <span class=\"s2\">\" ∣ \"</span> <span class=\"n\">e</span> <span class=\"s2\">\" ↝ \"</span> <span class=\"n\">e'</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Norm</span> <span class=\"bp\">Γ</span> <span class=\"n\">e</span> <span class=\"n\">e'</span>\n\n<span class=\"sd\">/-- `Nf X e` means that `e` is in normal form and none of its free variables appear in `X`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Nf</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nfLit</span> <span class=\"o\">:</span> <span class=\"n\">Nf</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">lit</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nfVar</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Nf</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nfIte</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Nf</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Nf</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Nf</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nf</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nf.var_subset</span> <span class=\"o\">(</span><span class=\"n\">hYX</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nf</span> <span class=\"n\">X</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">Nf</span> <span class=\"n\">Y</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nfLit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nfLit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nfVar</span> <span class=\"n\">hX</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nfVar</span> <span class=\"k\">fun</span> <span class=\"n\">hY</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hX</span> <span class=\"o\">(</span><span class=\"n\">hYX</span> <span class=\"n\">hY</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nfIte</span> <span class=\"n\">hX</span> <span class=\"n\">hNe</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">nfIte</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hY</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hX</span> <span class=\"o\">(</span><span class=\"n\">hYX</span> <span class=\"n\">hY</span><span class=\"o\">))</span> <span class=\"n\">hNe</span>\n      <span class=\"o\">(</span><span class=\"n\">h₁.var_subset</span> <span class=\"o\">(</span><span class=\"n\">Y.insert_subset_insert</span> <span class=\"n\">_</span> <span class=\"n\">hYX</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">h₂.var_subset</span> <span class=\"o\">(</span><span class=\"n\">Y.insert_subset_insert</span> <span class=\"n\">_</span> <span class=\"n\">hYX</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finsetext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iff_of_eq</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"n\">Membership.mem</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nf.disjoint_fv</span> <span class=\"o\">:</span> <span class=\"n\">Nf</span> <span class=\"n\">X</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">fv</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nfLit</span> <span class=\"bp\">|</span> <span class=\"n\">nfVar</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nfIte</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Finset.subset_empty.mp</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">ih₁</span> <span class=\"o\">:=</span> <span class=\"n\">finsetext</span> <span class=\"n\">x</span> <span class=\"n\">ih₁</span>\n    <span class=\"k\">have</span> <span class=\"n\">ih₂</span> <span class=\"o\">:=</span> <span class=\"n\">finsetext</span> <span class=\"n\">x</span> <span class=\"n\">ih₂</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">aesop</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Norm.nf</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∣</span> <span class=\"n\">e</span> <span class=\"bp\">↝</span> <span class=\"n\">e'</span> <span class=\"bp\">→</span> <span class=\"n\">Nf</span> <span class=\"bp\">Γ.</span><span class=\"n\">vars</span> <span class=\"n\">e'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nLit</span> <span class=\"bp\">|</span> <span class=\"n\">nVarMem</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nfLit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nVar</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nfVar</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">nIteTr</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">nIteFls</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- why doesn't this help?</span>\n    <span class=\"n\">h.nf</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteVarEq</span> <span class=\"n\">_</span> <span class=\"n\">he</span> <span class=\"n\">hf</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">he.nf.var_subset</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finset.subset_insert</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteVarNe</span> <span class=\"n\">hc</span> <span class=\"n\">ht</span> <span class=\"n\">hf</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">hc.nf.disjoint_fv</span>\n    <span class=\"k\">have</span> <span class=\"n\">ht</span> <span class=\"o\">:=</span> <span class=\"n\">ht.nf</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">hf.nf</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nfIte</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteIteEq</span> <span class=\"n\">_</span> <span class=\"n\">he</span> <span class=\"n\">hf</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">he.nf.var_subset</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finset.subset_insert</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteIteNe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hc</span> <span class=\"n\">ht</span> <span class=\"n\">hf</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">finsetext</span> <span class=\"n\">x</span> <span class=\"n\">hc.nf.disjoint_fv</span>\n    <span class=\"k\">have</span> <span class=\"n\">ht</span> <span class=\"o\">:=</span> <span class=\"n\">ht.nf</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">hf.nf</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nfIte</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">nf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 398786000,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698365100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Have you tried proving that <code>have</code> statement? Because it's not true, and the reason <code>simp</code> fails is because the preprocessing reduced the goal to <code>False</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">sizeOf</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 398811399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698377477
    },
    {
        "content": "<p>It doesn't work because <code>Γ ∣ e ↝ e'</code>, being a proposition, has at most one element and hence its <code>SizeOf</code> instance is trivial</p>",
        "id": 398811524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698377537
    },
    {
        "content": "<p>The match compiler doesn't understand structural recursion over inductive propositions, but you should be able to write this using the <code>induction</code> tactic instead</p>",
        "id": 398811649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698377608
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Norm.nf</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∣</span> <span class=\"n\">e</span> <span class=\"bp\">↝</span> <span class=\"n\">e'</span> <span class=\"bp\">→</span> <span class=\"n\">Nf</span> <span class=\"bp\">Γ.</span><span class=\"n\">vars</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nLit</span> <span class=\"bp\">|</span> <span class=\"n\">nVarMem</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">nfLit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nVar</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">nfVar</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteTr</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">|</span> <span class=\"n\">nIteFls</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteVarEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ihf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ihf.var_subset</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finset.subset_insert</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteVarNe</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">ihc</span> <span class=\"n\">iht</span> <span class=\"n\">ihf</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">ihc.disjoint_fv</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nfIte</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nIteIteEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ihf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ihf.var_subset</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finset.subset_insert</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">nIteIteNe</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">ihc</span> <span class=\"n\">iht</span> <span class=\"n\">ihf</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">finsetext</span> <span class=\"n\">x</span> <span class=\"n\">ihc.disjoint_fv</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nfIte</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 398812268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698377894
    },
    {
        "content": "<p>Ah, false assumption would do it! Of course we can't eliminate <code>Prop</code> into <code>Nat</code>. <code>induction</code> was the first thing I tried, but it gave me a scary error about indices. It works now, however. Thanks!</p>",
        "id": 398814430,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698378975
    }
]