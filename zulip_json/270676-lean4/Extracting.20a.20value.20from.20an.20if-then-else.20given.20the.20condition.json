[
    {
        "content": "<p>Suppose we use an if-then-else to define some function, how can we prove that if the condition is met we get the associated result. </p>\n<p>As a minimal example of what I mean, how could I prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"s2\">\"small\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"big\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"s2\">\"small\"</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n_lt_10</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It's obvious that the result is true, however it's unclear to me how to even begin proving it.</p>\n<p>If the condition had've been <code>n = 10</code> or such, it would be easy to do with <code>n_eq_10 ▸ Eq.refl (f n)</code>. However we have <code>n &lt; 10</code>, though we essentially want to perform the same sort've substitution so that <code>if ... then ... else</code> further reduces away to just the desired case (just like <code>▸</code> manages to do).</p>",
        "id": 326568377,
        "sender_full_name": "James Browning",
        "timestamp": 1675857042
    },
    {
        "content": "<p>Are you aware of the lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=if_pos#doc\">docs4#if_pos</a> ?</p>",
        "id": 326568568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675857102
    },
    {
        "content": "<p>No, I've mostly been following the book : <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/type_classes.html\">https://leanprover.github.io/theorem_proving_in_lean4/type_classes.html</a></p>\n<p>I would say the book does a pretty good job of explaing the core of dependent type theory and at least the syntax of Lean, but it really lacks examples of things in the standard library and generally how one would even create things in the standard library</p>\n<p>There is also a fair bit of lack of searchability of especially the builtin library, like I've looked around mathlib a bit and for the most part things have textual descriptions that show up when searching, however <em>a lot</em> of the builtin (i.e.<code>Init</code>/<code>Prelude</code>/etc) just flat out have no descriptions let alone examples of usage so it becomes quite difficult to search for things</p>",
        "id": 326575511,
        "sender_full_name": "James Browning",
        "timestamp": 1675859324
    },
    {
        "content": "<p>I agree the discoverability is not great at the moment, which is partly due to a lack of polish (after all Lean 4 is not officially released yet).<br>\nIn particular a lot of stuff in the core library is <em>defined</em> (maybe by necessity) in <code>Init.Prelude</code>, while all the functions and lemmas for working with it are elsewhere.<br>\nMy best survival tip for now is to rely on autocompletion a lot.</p>",
        "id": 326577250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675859870
    },
    {
        "content": "<p>For example even if you know or figure out that <code>if then else</code> is syntax for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite#doc\">docs4#ite</a>, that function is defined in <code>Init.Prelude</code> while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=if_pos#doc\">docs4#if_pos</a> is in <code>Init.Core</code>.</p>",
        "id": 326578295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675860175
    },
    {
        "content": "<blockquote>\n<p>My best survival tip for now is to rely on autocompletion a lot.</p>\n</blockquote>\n<p>Autocompletion has been generally useful, although it would probably be easier to find things like <code>if_pos</code> if they were in some namespace, like I did actually check if <code>Decidable.*</code> had anything like that but I couldn't find anything</p>\n<p>In this regard <code>Nat</code> is pretty good, to the extent that Lean provides theorems for <code>Nat</code> I've generally been able to find them just by auto-complete by typing <code>Nat.</code> and a related word</p>",
        "id": 326581152,
        "sender_full_name": "James Browning",
        "timestamp": 1675861054
    },
    {
        "content": "<p>I'd probably do a tactic proof. Here, I'm telling <code>simp</code> to unfold <code>f</code> and also make use of the <code>n &lt; 10</code> hypothesis. Presumably it uses <code>if_pos</code> but I didn't check.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"s2\">\"small\"</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 326582270,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675861359
    },
    {
        "content": "<p>Here's another proof that makes use of the <code>split</code> tactic, which can turn an <code>if</code> into cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"s2\">\"small\"</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Amusingly, it seems <code>split</code> knows how to make use of assumptions and both cases end up being the same case (with <code>f n</code> being replaced by <code>\"small\"</code>). I'm guessing this is a small bug in <code>split</code> that it creates a redundant case?</p>",
        "id": 326582623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675861470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Extracting.20a.20value.20from.20an.20if-then-else.20given.20the.20condition/near/326582270\">said</a>:</p>\n<blockquote>\n<p>I'd probably do a tactic proof. Here, I'm telling <code>simp</code> to unfold <code>f</code> and also make use of the <code>n &lt; 10</code> hypothesis. Presumably it uses <code>if_pos</code> but I didn't check.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"s2\">\"small\"</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It will simplify the expression to <code>true</code> (or <code>True</code>, not sure), and then use <code>if_true</code>.</p>",
        "id": 326591183,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675863844
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> wrong thread?)</p>",
        "id": 326673210,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1675886126
    },
    {
        "content": "<p>No, why?</p>",
        "id": 326677895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675887820
    },
    {
        "content": "<p>Oh I guess it got moved</p>",
        "id": 326678710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675888100
    }
]