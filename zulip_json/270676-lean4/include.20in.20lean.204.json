[
    {
        "content": "<p>Just for some practice, I'm trying to convert some simple exercises from a class I took in Lean 3 into Lean 4. We defined the following variables</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span>  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span>  <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">mono_f</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">mono_g</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">g</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">adj1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">adj2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>And then to include <code>mono_f</code> and <code>mono_g</code> as hypotheses in the following results, we used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">include</span> <span class=\"n\">mono_f</span> <span class=\"n\">mono_g</span>\n</code></pre></div>\n<p>This all worked fine in Lean 3, but Lean 4 does not seem to like this. Is there an analogue of this in Lean 4, or should I do something else?</p>",
        "id": 395960870,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1696972054
    },
    {
        "content": "<p>It will get included. Everything gets included in Lean 4. It will even look like it includes too much (but things you don't use do not stay in the lemma).</p>",
        "id": 395961195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696972223
    },
    {
        "content": "<p>Ah, I see. Thank you!</p>",
        "id": 395961494,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1696972435
    }
]