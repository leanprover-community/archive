[
    {
        "content": "<p>Hi! Say I have a <code>String</code> that corresponds to the <code>Syntax</code> for invoking a tactic. How do I write a metaprogram that evaluates this string, in the same style as <code>evalTactic</code>? I tried the following, but it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"trivial\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">test</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTest</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ictx</span><span class=\"o\">:</span> <span class=\"n\">InputContext</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- string that I have</span>\n      <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n      <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">dummyEnv</span> <span class=\"bp\">←</span> <span class=\"n\">mkEmptyEnvironment</span>\n    <span class=\"k\">let</span> <span class=\"n\">parserState</span> <span class=\"o\">:=</span> <span class=\"n\">tacticParser.fn.run</span> <span class=\"n\">ictx</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">dummyEnv</span><span class=\"o\">,</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"o\">}</span> <span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">mkParserState</span> <span class=\"n\">ictx.input</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">arrStx</span> <span class=\"o\">:=</span> <span class=\"n\">SyntaxStack.extract</span> <span class=\"n\">parserState.stxStack</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">arrStx.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx</span><span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"c1\">-- unsolved goals</span>\n</code></pre></div>",
        "id": 396331376,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1697130594
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"trivial\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">test</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTest</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">foo</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 396332195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697130894
    },
    {
        "content": "<p>I think your code could likely be much simpler, but the main issue is that you are using an empty environment instead of <code>getEnv</code> so that the <code>trivial</code> tactic is not even defined.</p>\n<p>Edit: and indeed mario has written the simple version in the time it took me to debug the problem lol</p>",
        "id": 396332204,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697130896
    },
    {
        "content": "<p>oh, got it... thanks!!</p>",
        "id": 396332475,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1697130984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes</span> has marked this topic as resolved.</p>",
        "id": 396332525,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697131009
    },
    {
        "content": "<p>One issue with doing this is that the generated syntax has positions indexing into the provided string rather than the source text, meaning that error positions are wrong. For example, try <code>\"exact ()\"</code> instead of <code>\"trivial\"</code> and you will notice a red squiggle over the first 8 characters in the file</p>",
        "id": 396332650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697131064
    },
    {
        "content": "<p>I see... this is fine for my use case</p>",
        "id": 396333147,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1697131233
    }
]