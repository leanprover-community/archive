[
    {
        "content": "<p>It seems that <code>|-</code> is a token in Lean 4. Is that correct? Is there any way to fix this? This prevents using Lean for mathematics, for instance stating <code>|-a|= |a|</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/e703ae87cdacf4b5445b4d174d81bf13f423689d/Mathlib/Algebra/Order/Group/Abs.lean#L87\">here</a>.</p>",
        "id": 370439974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687960535
    },
    {
        "content": "<p>I think we should keep only <code>⊢</code> for \"prove\".</p>",
        "id": 370440833,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1687960677
    },
    {
        "content": "<p>Yes, ascii-art variations always lead to issues like this.</p>",
        "id": 370443191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687961064
    },
    {
        "content": "<p>This is easy to fix if the core Lean developers are fine with removing it. Otherwise I don't know if there is any fix.</p>",
        "id": 370452558,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687962534
    },
    {
        "content": "<p>It is currently used in two places: specifying the goal as a location (for e.g. <code>rw</code> and <code>simp</code>) and declaring unification hints, but in both cases <code>⊢</code> is already a valid alternative.</p>",
        "id": 370452790,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687962581
    },
    {
        "content": "<p>I PR'd this in <a href=\"https://github.com/leanprover/lean4/pull/2299\">lean4#2299</a>.</p>",
        "id": 370466081,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687964759
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 370471071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687965590
    },
    {
        "content": "<p>We have had at least one blind user tell us they appreciate Lean being usable without Unicode characters. But I suppose we could use <code>\"|\" noWs \"-\"</code></p>",
        "id": 370481492,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687967159
    },
    {
        "content": "<p>At least in Lean 3 there were lots of ascii art abbreviations removed for the same purpose. For instance <code>(|</code> used to be reserved.</p>",
        "id": 370482012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687967239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I think <code>\"|\" noWs \"-\"</code> won't help with the <code>|-a|</code> example, since <a href=\"https://github.com/leanprover-community/mathlib4/blob/e703ae87cdacf4b5445b4d174d81bf13f423689d/Mathlib/Algebra/Abs.lean#L66\">the absolute value notation</a> uses <code>noWs</code> itself to try to parse in an unambiguous way.</p>",
        "id": 370499850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687970278
    },
    {
        "content": "<p>There's <code>|(-a)|</code> to deal with the ambiguity with <code>|-</code>, but it'd be nice to avoid needing to add parentheses.</p>",
        "id": 370500181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687970328
    },
    {
        "content": "<p>I thought it would help, since we're not parsing a <code>withLocation</code> or <code>UnificationHint</code>, we're parsing a term, so it should be unambiguous, right?</p>",
        "id": 370501507,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687970600
    },
    {
        "content": "<p>What's causing <code>|-a|</code> to give \"expecting term\" at the first <code>|</code>?  Is the location syntax <code>|-</code> reserving something even in the term parser? I had only ever noticed that only identifiers could be reserved as keywords.</p>",
        "id": 370506711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687971588
    },
    {
        "content": "<p>(For an unexpander, I put in a special case for negatives to keep the notation round-trippable. <a href=\"https://github.com/leanprover-community/mathlib4/pull/5559\">#5559</a>)</p>",
        "id": 370518234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687973781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.7C-/near/370506711\">said</a>:</p>\n<blockquote>\n<p>What's causing <code>|-a|</code> to give \"expecting term\" at the first <code>|</code>?  Is the location syntax <code>|-</code> reserving something even in the term parser? I had only ever noticed that only identifiers could be reserved as keywords.</p>\n</blockquote>\n<p>It's a token. The tokenizer uses longest-match rules for breaking the text into tokens, which are then parsed. So <code>|-</code> is lexed as a single token (the token table is not context dependent and this token was added by the location parser) and hence it can't be parsed by <code>\"|\" term \"|\"</code></p>",
        "id": 370569343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687984690
    },
    {
        "content": "<p>another trick you could do is to have a macro that expands <code>\"|-\" a:term noWs \"|\"</code> to <code>|(-$a)|</code></p>",
        "id": 370569506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687984750
    },
    {
        "content": "<p>that's the same trick we use to make the <code>?</code> option on many tactics work</p>",
        "id": 370569575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687984775
    },
    {
        "content": "<p><code>rcases</code> has had this exact trick since forever, to parse <code>rcases foo with -|-</code> correctly</p>",
        "id": 370569788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687984835
    },
    {
        "content": "<p>The reason I'm asking is that I've only noticed that identifier-like strings becoming tokens (and that encompasses the <code>?</code> trick).</p>\n<p>I'd done an experiment like this one to try to understand the behavior. I added syntax to the <code>attr</code> category to make sure we aren't doing anything to the <code>term</code> category.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tag</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"+\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"s2\">\"+\"</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"s2\">\"|\"</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"+-\"</span> <span class=\"n\">attr</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"|+\"</span> <span class=\"n\">attr</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"-|\"</span> <span class=\"n\">attr</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">+-</span><span class=\"n\">n</span>   <span class=\"c1\">-- tag \"+\" (-n) : α</span>\n<span class=\"k\">#check</span> <span class=\"bp\">|+</span><span class=\"n\">n</span>   <span class=\"c1\">-- tag \"|\" (tag \"+\" n) : α</span>\n<span class=\"k\">#check</span> <span class=\"bp\">-|</span><span class=\"n\">n</span>   <span class=\"c1\">-- -tag \"|\" n : α</span>\n</code></pre></div>",
        "id": 370591422,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687992239
    },
    {
        "content": "<p>However, I just learned that if the string isn't the first item, so if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"something\"</span> <span class=\"s2\">\"+-\"</span> <span class=\"n\">attr</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"something\"</span> <span class=\"s2\">\"|+\"</span> <span class=\"n\">attr</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"something\"</span> <span class=\"s2\">\"-|\"</span> <span class=\"n\">attr</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n</code></pre></div>\n<p>then the second string reserves a token, which you can infer because it breaks the <code>#check</code>s</p>",
        "id": 370591579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687992294
    },
    {
        "content": "<p>yeah, the first token in <code>attr</code> and <code>tactic</code> is not reserved as a token</p>",
        "id": 370592306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687992607
    },
    {
        "content": "<p>otherwise <code>ring</code>, <code>rw</code>, <code>exact</code> etc would all be illegal as identifiers</p>",
        "id": 370592336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687992630
    },
    {
        "content": "<p><code>stop</code> would definitely be a problem</p>",
        "id": 370592388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687992662
    }
]