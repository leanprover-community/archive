[
    {
        "content": "<p>Sorry for the vague question, but maybe there are obvious remidies to try: lean in vscode is getting slower and slower as I progress with my proof, that it is almost not interactive anymore. I have 550 lines, the current lemma is 80 lines, so not huge. Any quick ideas?</p>",
        "id": 359936833,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684605278
    },
    {
        "content": "<p>80 lines in a proof is quite a lot already</p>",
        "id": 359937183,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684605463
    },
    {
        "content": "<p>use <code>save</code> while interactively writing it. Generally speaking Lean is (right now) not as smart as Coq about proof editing and will re-elaborate all of your proof script every time that it is edited, you can however manually instruct it to create checkpoints in your proof. It will then only re-elaborate stuff after those checkpoints.</p>\n<p>So for example I can go</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n  <span class=\"n\">tac3</span>\n  <span class=\"n\">tac4</span>\n  <span class=\"n\">save</span>\n  <span class=\"n\">tac5</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">edit</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>now it will only ree-lab tac5 + the stuff you added</p>",
        "id": 359937320,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684605534
    },
    {
        "content": "<p>Thanks! Although even with <code>save</code> based on the colour flashes it re-processes more than it ought. Maybe it’s just normal and I’m spoiled, and I should write smaller lemmas :-)</p>",
        "id": 359937824,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684605740
    },
    {
        "content": "<p>The colour flashes are not telling the truth in this case. It says that it is re-relaborating the whole section of your file, which is correct, but <code>save</code> should cache the part above so it should go through faster regardless.</p>",
        "id": 359938181,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684605890
    },
    {
        "content": "<p>You can measure with a stopwatch if it actually works I guess :D</p>",
        "id": 359938502,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684606011
    },
    {
        "content": "<p>80 lines is really long. Open a random mathlib file and I bet that no proof in it is anywhere near that long.</p>",
        "id": 359940721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684606987
    },
    {
        "content": "<p>It’s only one page in the paper I’m mechanizing :-)</p>",
        "id": 359950653,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684612110
    },
    {
        "content": "<p>That doesn't mean it has to be one proof!</p>",
        "id": 359953617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684613946
    },
    {
        "content": "<p>True… but at least during initial development I’d prefer to be able to just plow ahead, without having to break it up just because it overwhealms lean. (I may be slightly spoiled by other tools here, and have somewhat unreasonable first expectations)</p>",
        "id": 359954366,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684614364
    },
    {
        "content": "<p>This might just be the price you pay for using a more complex type theory. Doesn't AFP compile in like 10 seconds or something? And Mathlib is half the size but takes 6 hours.</p>",
        "id": 359954963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684614757
    },
    {
        "content": "<p>Nah, AFP certainly takes a long time, too. And I’m not sure if type theory is to be blamed here; maybe I am just too optimistic about how much processing lean can re-use as I edit in leafs in a structured proofs.</p>",
        "id": 359955223,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684614927
    },
    {
        "content": "<p>I would be interested to know if the <code>save</code> thing actually makes your life any better. I hadn't realised that it was working, I just remember people talking about it.</p>",
        "id": 359955584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684615134
    },
    {
        "content": "<p>(I hope zulip will collapse this message, lest I be more impolite than I intend to)…<br>\nSo I shouldn’t be expecting that I can write my proofs like this then ;-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lemma1</span>\n  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">phi_le</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n       <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">phi_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp1</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp3</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.case_strong_induction_on</span>\n  <span class=\"n\">case</span> <span class=\"n\">hz</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">v_2</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hp2</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n      <span class=\"n\">nlinarith</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">lt_of_mul_lt_mul_right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">nlinarith</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">v_2</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hp2</span><span class=\"o\">),</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span> <span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nlinarith</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_of_sub_neg</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">nlinarith</span> <span class=\"o\">:</span>\n        <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">))</span> <span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_neg_of_neg_of_pos</span>\n      <span class=\"bp\">.</span> <span class=\"n\">nlinarith</span>\n      <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n        <span class=\"k\">calc</span>\n          <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n          <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n  <span class=\"n\">case</span> <span class=\"n\">hi</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">add_one</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">cast_add</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[(</span><span class=\"bp\">?</span><span class=\"n\">eq</span> <span class=\"o\">:</span>\n      <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))]</span>\n    <span class=\"n\">case</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">trans</span>\n      <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">v_eq_v_simp</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">nlinarith</span><span class=\"o\">)</span> <span class=\"n\">hp2</span>\n        <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi1</span> <span class=\"n\">hi2</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">pointless</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nat_intervals</span>\n          <span class=\"n\">replace</span> <span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hi1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">IH</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hi1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">IH</span>\n          <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n      <span class=\"bp\">.</span> <span class=\"n\">unfold</span> <span class=\"n\">v_simp</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">case</span> <span class=\"n\">hnc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linarith</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_eq_left</span><span class=\"o\">]</span>\n        <span class=\"bp\">.</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n        <span class=\"bp\">.</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">cast_add</span><span class=\"o\">]</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≥</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">apply</span> <span class=\"n\">iter_fast_growth_add</span> <span class=\"n\">_</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi1</span> <span class=\"n\">hi2</span>\n              <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nat_intervals</span>\n              <span class=\"n\">replace</span> <span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hi1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">IH</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hi1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">IH</span>\n              <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n            <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n            <span class=\"bp\">.</span> <span class=\"n\">linarith</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cast_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cast_ofNat</span><span class=\"o\">]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))]</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n\n    <span class=\"n\">specialize</span> <span class=\"n\">IH</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">IH</span>  <span class=\"k\">with</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">case</span> <span class=\"n\">left</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n      <span class=\"n\">linarith</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"bp\">←</span> <span class=\"n\">mul_inv_le_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">div_pow</span> <span class=\"o\">]</span>\n      <span class=\"n\">linarith</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hp1</span><span class=\"bp\">;</span> <span class=\"n\">positivity</span>\n    <span class=\"n\">case</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">ring</span>\n        <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"c1\">-- congr_rel!</span>\n          <span class=\"n\">apply</span> <span class=\"n\">sub_lt_sub_right</span>\n          <span class=\"n\">apply</span> <span class=\"n\">add_lt_add_right</span>\n          <span class=\"n\">apply</span> <span class=\"n\">add_lt_add_right</span>\n          <span class=\"n\">apply</span> <span class=\"n\">mul_lt_mul_of_pos_left</span>\n          <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">IH2</span>\n          <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">lt_sub_right_of_add_lt</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n            <span class=\"n\">apply</span> <span class=\"n\">pow_lt_one</span>\n            <span class=\"bp\">.</span> <span class=\"n\">linarith</span>\n            <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hp2</span>\n            <span class=\"bp\">.</span> <span class=\"n\">simp</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_pow</span><span class=\"o\">]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel'</span><span class=\"o\">]</span>\n          <span class=\"n\">ring</span>\n          <span class=\"n\">linarith</span>\n        <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"c1\">-- congr_rel</span>\n          <span class=\"n\">apply</span> <span class=\"n\">sub_le_sub_left</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">_root_.pow_succ</span> <span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">mul_le_of_le_one_left</span>\n          <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">pow_nonneg</span>\n            <span class=\"n\">apply</span> <span class=\"n\">div_nonneg</span>\n            <span class=\"n\">linarith</span>\n            <span class=\"n\">linarith</span>\n          <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">div_le_iff</span> <span class=\"o\">]</span>\n            <span class=\"n\">linarith</span>\n            <span class=\"n\">linarith</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">div_pow</span> <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 359955617,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684615149
    },
    {
        "content": "<p>It didn't noticably help here. When I was at the bottom of that proof, even with <code>save</code> I was tempted to switch to zulip and chat while waiting for the next <code>apply</code> to be processed, or the next tooltip to appear.</p>",
        "id": 359955790,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684615240
    },
    {
        "content": "<p><code>linarith</code> and <code>nlinarith</code> might be quite costly tactics (esp nlinarith, at least in Lean 3). As is <code>ring</code> if you don't use it as a finishing tactic. I have no idea about the concept of compiling tactics but I thought that one of the perks of Lean 4 was that you were supposed to be able to compile tactics. Question which indicates that I have no understanding of what's going on: is nlinarith a compiled tactic? If not, what happens if you compile it (if that is indeed possible)?</p>",
        "id": 359955908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684615327
    },
    {
        "content": "<p>Tactics in Isabelle too can be compiled that's not really a unique advantage of Lean. The compile tactics things can be enable with the precompiledModules flag in lake although I do remember I think it might have been Sebastian or Gabriel mentioning that the performance impact was not that crazy.</p>",
        "id": 359956114,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684615476
    },
    {
        "content": "<p>My feeling is that it is less about tactics being slow, but rather that they are more often re-run than needed, i.e. not robust enough incremental editing.<br>\nIt seems that an empty <code>.</code> to structure the proofs throws the parser off a bit (or something like that), the next character fixes that, but by then lean has thrown away all the work it did on the lines above.</p>",
        "id": 359956160,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684615508
    },
    {
        "content": "<p>For me, the most effective way of speeding up proofs while I'm writing them is to <code>sorry</code> out as much as I can, put <code>#exit</code> after the proof and <code>.</code> before it (the dot might be a Lean3 thing, I do not remember).</p>",
        "id": 359956304,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684615586
    },
    {
        "content": "<p>Yeah in Lean 3 if you really wanted to write a long proof then the trick was to get a costly part of it compiling and then sorry it out, and only unsorry at the very end. I was hoping that <code>save</code> would save us from having to do this.</p>",
        "id": 359957737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684616422
    },
    {
        "content": "<p>Do we have an easy way to sorry things out?</p>",
        "id": 360000392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684650738
    },
    {
        "content": "<p>In lean3 you could replace <code>{</code> with <code>sorry {</code></p>",
        "id": 360000406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684650752
    },
    {
        "content": "<p>I don't know how to do that with <code>\\.</code></p>",
        "id": 360000458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684650773
    },
    {
        "content": "<p><code>stop</code> is the lean 4 spelling of <code>sorry {</code></p>",
        "id": 360017122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684659568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> do <code>save</code> and <code>stop</code> together solve your problems? It would be great to actually have a way of writing 80 line proofs. I kind of like the idea that in general there is a policy of \"lots of small proofs, not one big proof\", but perhaps that policy is partly driven by the issue which you have discovered, namely that right now \"one big proof\" is very inconvenient to work with. As you observe, there is not obviously a reason why this should be the case; why should we be recompiling all of a long and possibly inefficient (if we're experimenting) proof every time someone presses a button?</p>",
        "id": 360019495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684660557
    },
    {
        "content": "<p>Putting <code>stop</code> in various other branches of the proof certainly helps (from 7 second to 1.5 seconds until lean tells me after adding one letter that <code>linarithx</code> isn’t a tactic). So thanks, I’ll keep that in mind!<br>\n(<code>save</code> doesn’t seem to be needed and doesn't seem to do much in my simple experiments.)</p>",
        "id": 360318477,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684772088
    }
]