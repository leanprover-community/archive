[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> noticed something curious </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"c1\">-- okay</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Can someone explain what's going on? Note that all three would fail in lean3.</p>",
        "id": 353501156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682631137
    },
    {
        "content": "<p>Specifically, I'm wondering what mechanism makes the first example work?</p>",
        "id": 353501363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682631172
    },
    {
        "content": "<p>Even stranger</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>\n</code></pre></div>",
        "id": 353502393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682631359
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"c1\">-- okay</span>\n<span class=\"k\">#print</span> <span class=\"n\">f1</span> <span class=\"c1\">-- f is universe polymorphic (n is a universe level here).</span>\n<span class=\"c1\">-- The definition above is equivalent too</span>\n<span class=\"kd\">def</span> <span class=\"n\">f1'.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"c1\">-- okay</span>\n</code></pre></div>",
        "id": 353502876,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1682631451
    },
    {
        "content": "<p>so n becomes autoImplicit-ed but as a universe parameter?</p>",
        "id": 353503237,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682631518
    },
    {
        "content": "<p>Aha, I see.</p>",
        "id": 353503451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682631569
    },
    {
        "content": "<p>(obviously not real autoImplicit but conceptually)</p>",
        "id": 353503478,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682631575
    },
    {
        "content": "<p>I should have checked that this fails :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 353503648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682631601
    },
    {
        "content": "<p>The <code>{m+n}</code> examples fail because <code>+</code> expects a nat literal on the right-hand side, not a universe variable</p>",
        "id": 353503777,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1682631623
    },
    {
        "content": "<p>Yeah, with the autoImplicit option off, everything is now clear.</p>",
        "id": 353503856,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682631639
    },
    {
        "content": "<p>I think it would be reasonable for autoImplicit to check this though right? This seems like something that is easily fixable but could trip people up</p>",
        "id": 353503994,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682631667
    },
    {
        "content": "<p>What would need to be done to make this syntax work as “expected”?</p>",
        "id": 353506110,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682632065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/270676-lean4/topic/Nats.20instead.20of.20Levels/near/353503777\">said</a>:</p>\n<blockquote>\n<p>The <code>{m+n}</code> examples fail because <code>+</code> expects a nat literal on the right-hand side, not a universe variable</p>\n</blockquote>\n<p>To be precise, I think the <code>+</code> fails for the same reason as the following fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>\n</code></pre></div>\n<p>I.e. the operations allowed on universe levels are (i)max, and <code>+ numeral</code>. I guess this is what you said, sorry for the noise.</p>",
        "id": 353509961,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682632791
    },
    {
        "content": "<p>Do not autoImplicit a universe parameter when there is already a variable bound with the same name I would say <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span></p>",
        "id": 353510156,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682632817
    },
    {
        "content": "<p>(and vice versa, dont autoImplicit an expression name when there is a universe level bound at the same name, but this should be rare since universe levels are rare)</p>",
        "id": 353510901,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682632948
    },
    {
        "content": "<p>Sorry. I should be more clear. I was thinking <code>Type.{u+ Nat.succ n}</code> gives <code>Type.{u + n +1}</code></p>",
        "id": 353511270,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682633016
    },
    {
        "content": "<p>This goes back to discussions in <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.214.233463.20universe.20constraint.20issues\">#mathlib4 &gt; !4#3463 universe constraint issues</a> where in categorical contexts it is natural to require universe level inequalities as hypotheses.</p>",
        "id": 353511967,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682633147
    },
    {
        "content": "<p>Oh no not at all, universe levels in Lean are fully distinct from expressions. They are their own thing: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs4#Lean.Expr</a> vs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Level#doc\">docs4#Lean.Level</a> (well noot 100% as you can see, sorts contain levels, the point is that an expressioon cannnot appear as a level). What is happening in the above example is that Lean decided to introduce a universe parameter <code>n</code> <em>distinct</em> from the <code>n : Nat</code> so it <em>seems</em> like the Nat is acting as a universe parameter when this is in fact not the  case. And my proposal to fix this UX issue would be: don't autoImplicit a universe parameter when there is an expr parameter of the same name already bound at the point</p>",
        "id": 353512218,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682633186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Nats.20instead.20of.20Levels/near/353512218\">said</a>:</p>\n<blockquote>\n<p>And my proposal to fix this UX issue would be: don't autoImplicit a universe parameter when there is an expr parameter of the same name already bound at the point</p>\n</blockquote>\n<p>I think this is very reasonable.</p>",
        "id": 353512425,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682633229
    },
    {
        "content": "<p>Yes I agree with that too</p>",
        "id": 353512499,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682633243
    },
    {
        "content": "<p>What I was asking (poorly) was more a wish. If I wanted to try to parse <code>Nat</code>’s as universe levels, what would I need to do?</p>",
        "id": 353512933,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682633323
    },
    {
        "content": "<p>You can't, expressions are distinct from levels. if you have a <code>(n : Nat)</code> in scope you cannot make Lean understand that you want the same <code>n</code> to be a universe parameter. This is also reasonable I'd say. universe parameters (unlike <code>n : Nat</code>) do never get filled in at runtime, they <em>always</em> have to be resolved at compile time to a concrete universe.</p>",
        "id": 353514223,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682633558
    },
    {
        "content": "<p>Is this only a code generation concern or does it extend beyond that?</p>",
        "id": 353515933,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682633878
    },
    {
        "content": "<p>In the code generator we don't really care about universe levels at all. universe levels only make sennse if you have a value <code>x : Type u</code> and since types are not code generation relevant they get erased ASAP in the code generation pipeline.</p>\n<p>That being said I do not know why Lean enforces universe polymorphic code to always be resolved at compile time, someone else will have to shine a light at that.</p>",
        "id": 353517143,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682634110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Nats.20instead.20of.20Levels/near/353514223\">said</a>:</p>\n<blockquote>\n<p>You can't, expressions are distinct from levels. if you have a <code>(n : Nat)</code> in scope you cannot make Lean understand that you want the same <code>n</code> to be a universe parameter. This is also reasonable I'd say. universe parameters (unlike <code>n : Nat</code>) do never get filled in at runtime, they <em>always</em> have to be resolved at compile time to a concrete universe.</p>\n</blockquote>\n<p>Maybe this paragraph makes more sense if I rephrase to \"at type checking time\"^^</p>",
        "id": 353518168,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682634298
    },
    {
        "content": "<p>While you can't go from Nat to level, you can to some degree go from level to Nat (see also the <code>ToLevel</code> type class in mathlib):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">LevelOf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span> <span class=\"n\">levelOf</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">export</span> <span class=\"n\">LevelOf</span> <span class=\"o\">(</span><span class=\"n\">levelOf</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LevelOf.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">where</span> <span class=\"n\">levelOf</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LevelOf.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">LevelOf.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">where</span> <span class=\"n\">levelOf</span> <span class=\"o\">:=</span> <span class=\"n\">levelOf.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">levelOf.</span><span class=\"o\">{</span><span class=\"mi\">13</span><span class=\"o\">}</span> <span class=\"c1\">-- 13</span>\n</code></pre></div>",
        "id": 353519151,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682634482
    },
    {
        "content": "<p>(If you want to be surprised, try <code>#eval levelOf</code>)</p>",
        "id": 353519376,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682634520
    },
    {
        "content": "<p>Why is it that value?</p>",
        "id": 353519498,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682634543
    },
    {
        "content": "<p>Because of <code>synthInstance.maxSize</code>.</p>",
        "id": 353519777,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682634599
    },
    {
        "content": "<p>(I think it should rather fail than succeed when exceeding the limit though.)</p>",
        "id": 353520089,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682634641
    },
    {
        "content": "<p>Can you tell us why Lean does the \"I want to resolve universe polymorphism\" thing?^^</p>",
        "id": 353520356,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682634689
    },
    {
        "content": "<p>I'm not sure if I understand the question completely.  Are you asking why levels are not first-class values.  That's because it would be unsound, what universe would <code>(i : Level) → Type i</code> live in (it must be larger any of the levels you can pass into that function)?</p>",
        "id": 353521900,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682634962
    },
    {
        "content": "<p>Are universes first class values in agda, or am I misremembering something?</p>",
        "id": 353524287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682635420
    },
    {
        "content": "<p>iirc the answer is it's complicated: you can make expressions like the one above, and they live in <code>Type ω : Type ω_1 : Type ω_2...</code>, but you can't parametrize over types in <code>Type ω</code>.</p>",
        "id": 353524876,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682635533
    },
    {
        "content": "<p>Aha, I see.</p>",
        "id": 353524996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682635554
    },
    {
        "content": "<p>To be more clear, levels are represented as a type <code>Level</code> in Agda, which means that one may create a function <code>toLevel : Nat -&gt; Level</code>. However, the <code>Level</code> type doesn’t have any elimination principle, so one cannot make a non-trivial function <code>toNat : Level -&gt; Nat</code> for example. In practice, Levels are still handled in a special way during type-checking, to account for things like the commutativity of the max operator when checking equality between levels, but their lack of elimination principle means that they can easily be erased at runtime</p>",
        "id": 353527839,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1682636094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Nats.20instead.20of.20Levels/near/353519151\">said</a>:</p>\n<blockquote>\n<p>While you can't go from Nat to level, you can to some degree go from level to Nat (see also the <code>ToLevel</code> type class in mathlib):</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">LevelOf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span> <span class=\"n\">levelOf</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">export</span> <span class=\"n\">LevelOf</span> <span class=\"o\">(</span><span class=\"n\">levelOf</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LevelOf.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">where</span> <span class=\"n\">levelOf</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LevelOf.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">LevelOf.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">where</span> <span class=\"n\">levelOf</span> <span class=\"o\">:=</span> <span class=\"n\">levelOf.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">levelOf.</span><span class=\"o\">{</span><span class=\"mi\">13</span><span class=\"o\">}</span> <span class=\"c1\">-- 13</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Actually you can also go the other way using a similar trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ToLevel.Out</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit</span>\n<span class=\"k\">#check</span> <span class=\"n\">ToLevel.Out</span> <span class=\"mi\">13</span> <span class=\"c1\">-- ToLevel.Out 13 : Type 12</span>\n</code></pre></div>\n<p>(It's hard to write a function which returns a universe level so this one returns a value whose type is <code>Sort u</code> where <code>u</code> is the output)</p>",
        "id": 353643502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682658292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Nats.20instead.20of.20Levels/near/353512425\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Nats.20instead.20of.20Levels/near/353512218\">said</a>:</p>\n<blockquote>\n<p>And my proposal to fix this UX issue would be: don't autoImplicit a universe parameter when there is an expr parameter of the same name already bound at the point</p>\n</blockquote>\n<p>I think this is very reasonable.</p>\n</blockquote>\n<p>I spent a few minutes digging and I believe this would be the correct location to insert: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Level.lean#L76\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Level.lean#L76</a> but LevelElabM does not have the currently bound term variables in its context yet so one would have to slightly refactor that to include such a thing as well. Then it should be possible to efficiently do this.</p>",
        "id": 353826102,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682683427
    },
    {
        "content": "<p>This looks like a pretty rare edge case to guard against in core; variables of different kinds inhabiting different namespaces is also not unusual in programming languages. If someone was sufficiently motivated, this could be flagged by a custom linter.</p>",
        "id": 353841493,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682685396
    },
    {
        "content": "<p>Are there any other programming languages with <code>autoImplicit</code> behavior?</p>",
        "id": 353854108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682686895
    },
    {
        "content": "<p>I think Haskell does, for types at least. I don't know of any lang that has <code>autoImplicit</code> behaviours across different namespaces.</p>",
        "id": 353859753,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1682687533
    }
]