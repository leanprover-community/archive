[
    {
        "content": "<p>Inspired by this lovely <a href=\"https://0.30000000000000004.com\">URL</a>, I wanted to see how Lean handles 0.1 + 0.2 using floats. </p>\n<p><code>#eval 0.1 + 0.2</code>only prints <code>0.300000</code>, truncating the output. <br>\n<code>#eval 0.1 + 0.2 &gt; 0.3</code> returns <code>true</code>, as expected</p>\n<p>How can I see all the digits?</p>",
        "id": 385568789,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1692233372
    },
    {
        "content": "<p>Okay, this seems to work to extract the exact rational value of a (finite) Float:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toRatParts</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">f.isFinite</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f.frExp</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">53</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFloat</span> <span class=\"bp\">*</span> <span class=\"n\">f'</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">floor.toUInt64.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">(</span><span class=\"n\">x.floor.toUInt64.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"bp\">-</span> <span class=\"mi\">53</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toRat</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">toRatParts</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">exp</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">exp.toNat</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">exp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span><span class=\"n\">Rat</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toStringFull</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">toRatParts</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span> <span class=\"n\">v.natAbs</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">exp</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">v'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">exp.toNat</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">exp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span>\n      <span class=\"k\">let</span> <span class=\"n\">intPart</span> <span class=\"o\">:=</span> <span class=\"n\">v'</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">e</span>\n      <span class=\"k\">let</span> <span class=\"n\">rem</span> <span class=\"o\">:=</span> <span class=\"n\">v'</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">e</span>\n      <span class=\"k\">if</span> <span class=\"n\">rem</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">toString</span> <span class=\"n\">intPart</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">rem</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">v'</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span><span class=\"bp\">^</span><span class=\"n\">e</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">rem</span> <span class=\"o\">:=</span> <span class=\"n\">rem.dropRightWhile</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">==</span> <span class=\"sc\">'0'</span><span class=\"o\">)</span>\n        <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{intPart}.{rem.extract ⟨1⟩ rem.endPos}\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"-{s}\"</span> <span class=\"k\">else</span> <span class=\"n\">s</span>\n  <span class=\"k\">else</span> <span class=\"s2\">\"not finite\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">toRat</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"c1\">-- (1351079888211149 : Rat)/4503599627370496</span>\n<span class=\"k\">#eval</span> <span class=\"n\">toRat</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>       <span class=\"c1\">-- (5404319552844595 : Rat)/18014398509481984</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">toStringFull</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"c1\">-- 0.3000000000000000444089209850062616169452667236328125</span>\n<span class=\"k\">#eval</span> <span class=\"n\">toStringFull</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>       <span class=\"c1\">-- 0.299999999999999988897769753748434595763683319091796875</span>\n</code></pre></div>",
        "id": 385571254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692234266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/270676-lean4/topic/Printing.20all.20float.20digits/near/385568789\">said</a>:</p>\n<blockquote>\n<p>Inspired by this lovely <a href=\"https://0.30000000000000004.com\">URL</a>, I wanted to see how Lean handles 0.1 + 0.2 using floats. </p>\n<p><code>#eval 0.1 + 0.2</code>only prints <code>0.300000</code>, truncating the output. <br>\n<code>#eval 0.1 + 0.2 &gt; 0.3</code> returns <code>true</code>, as expected</p>\n<p>How can I see all the digits?</p>\n</blockquote>\n<p>As far as <em>all</em> digits, I don't know that there's a way to arbitrarily extend the number of decimal digits displayed. Based on quickly skimming through some of the Float documentation, I think that the Lean does the truncation when it's told to display the value (e.g. via # eval), but for mathematical interests it handles further decimals appropriately. <br>\n<code>#eval (0.1 + 0.3)*(10.0^24.0)--400000000000000033554432.000000</code><br>\nI tried to see if multiplication like this would \"push\" v. small decimal values past the decimal to be displayed. I have no idea where these  values come from, the decimal zeros are persistent, even when you increase/decrease the exponential term, so I'm skeptical of the exact nature of these values.<br>\n<code>#eval (0.1 + 0.3).toString.toList[8]? -- none</code><br>\nI think this is limited for the same reason that I think Lean's display of Floats is limited.<br>\n<code>#eval (0.0000000000000000123456 * 10.0^16.0) -- 0.123456</code><br>\nThis isn't useful for instances like <code>0.1 + 0.2</code>where the decimal of interest has an unknown value and location (if it even exists), but shows that Lean does appropriately handle decimals in excess of 6 places.</p>",
        "id": 385576204,
        "sender_full_name": "John Velkey ⚛️",
        "timestamp": 1692237113
    },
    {
        "content": "<blockquote>\n<p>I tried to see if multiplication like this would \"push\" v. small decimal values past the decimal to be displayed. I have no idea where these values come from, the decimal zeros are persistent, even when you increase/decrease the exponential term, so I'm skeptical of the exact nature of these values.</p>\n</blockquote>\n<p>This fails because <code>Float</code> is a 64-bit floating point value (with 53 bits of mantissa), and numbers in the vicinity of <code>400000000000000033554432</code> require more than that many bits of precision to represent. The random numbers at the end are where the precision runs out</p>",
        "id": 385576962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692237604
    },
    {
        "content": "<p>you can confirm this by noting that <code>400000000000000033554432</code> is unusually divisible by 2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">400000000000000033554432</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">26</span> <span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">26</span> <span class=\"c1\">-- 67108864</span>\n</code></pre></div>\n<p>It is in fact the nearest multiple of <code>2^26</code> to <code>400000000000000000000000</code></p>",
        "id": 385577353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692237813
    },
    {
        "content": "<p>Oh, and on the subject of <a href=\"http://0.30000000000000004.com\">0.30000000000000004.com</a> , it is worth mentioning of course that if you use <code>Rat</code> instead of <code>Float</code> you get the exactly correct answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span>  <span class=\"c1\">-- (3 : Rat)/10</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span>        <span class=\"c1\">-- (3 : Rat)/10</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 385579563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692239132
    },
    {
        "content": "<p>Neat, thanks!</p>",
        "id": 385592971,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1692246109
    },
    {
        "content": "<p>Perhaps someone should write a Lean version of Grisu3 or Dragon4 (numpy uses the latter); <a href=\"https://cseweb.ucsd.edu/~lerner/papers/fp-printing-popl16.pdf\">this paper</a> has some background.</p>",
        "id": 385623681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692260599
    },
    {
        "content": "<p>Instead of printing _all_ the digits, these are about printing the shortest sequence of digits that parses to the float in question</p>",
        "id": 385623856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692260660
    },
    {
        "content": "<p>I think <a href=\"https://github.com/ulfjack/ryu\">https://github.com/ulfjack/ryu</a> is the state of the art. But printing the shortest sequence of digits that reprints is a rather different problem than the one here</p>",
        "id": 385626143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692261536
    },
    {
        "content": "<p>Maybe the best way to solve this is to implement computable reals with print functionality and then define a map from floats to computable reals</p>",
        "id": 385647175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692269021
    },
    {
        "content": "<p>This is a bit confounding but printing digits is not computable even for computable reals!</p>",
        "id": 385670556,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692277866
    },
    {
        "content": "<p>(You need a subring of R with decidable equality to get around the \"table maker's dilemma\".)</p>",
        "id": 385671373,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692278200
    }
]