[
    {
        "content": "<p>I notice that if a local hypothesis is introduced using <code>have</code> or <code>obtain</code>, the <code>expr</code> of the newly introduced <code>LocalDecl</code> looks like some kind of metavariable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"myTac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"myTac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n    <span class=\"n\">for</span> <span class=\"n\">ldecl</span> <span class=\"k\">in</span> <span class=\"n\">ctx</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">τ</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ldecl.toExpr</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">ldecl.userName</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">H''</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">H'</span>\n  <span class=\"n\">myTac</span>\n\n<span class=\"c1\">-- Trace:</span>\n<span class=\"c1\">-- H</span>\n<span class=\"c1\">-- _uniq.4545 -&gt; _uniq.4546</span>\n<span class=\"c1\">-- H'</span>\n<span class=\"c1\">-- _uniq.4545</span>\n<span class=\"c1\">-- H''</span>\n<span class=\"c1\">-- ?_uniq.4552</span>\n</code></pre></div>\n<p>In the above, I would expect the type of <code>H''</code> to match exactly with the RHS of the type of <code>H</code>. I'm guessing there's something I need to do to instantiate <code>H''</code> to get that result? If I add <code>instantiateMVars</code> to the line with <code>inferType</code>, it doesn't seem to help</p>",
        "id": 338951281,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1677703300
    },
    {
        "content": "<p><code>instantiateMVars</code> works for me.</p>",
        "id": 338951735,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677703470
    },
    {
        "content": "<p>Weird, doesn't seem to work here. Am I doing something wrong? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"myTac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"myTac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n    <span class=\"n\">for</span> <span class=\"n\">ldecl</span> <span class=\"k\">in</span> <span class=\"n\">ctx</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">ldecl.toExpr</span>\n      <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n      <span class=\"k\">let</span> <span class=\"n\">τ</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e'</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">ldecl.userName</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">H''</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">H'</span>\n  <span class=\"n\">myTac</span>\n\n<span class=\"c1\">-- ....</span>\n<span class=\"c1\">-- H</span>\n<span class=\"c1\">-- _uniq.4796 -&gt; _uniq.4797</span>\n<span class=\"c1\">-- H'</span>\n<span class=\"c1\">-- _uniq.4796</span>\n<span class=\"c1\">-- H''</span>\n<span class=\"c1\">-- ?_uniq.4803</span>\n</code></pre></div>",
        "id": 338952189,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1677703645
    },
    {
        "content": "<p>Yes, you need to do the instantiateMVars after the inferType</p>",
        "id": 338952299,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677703689
    },
    {
        "content": "<p>Ah, gotcha! I get it now. Thanks Gabriel!</p>",
        "id": 338952408,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1677703736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319223\">Logan Murphy</span> has marked this topic as resolved.</p>",
        "id": 338952411,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677703739
    }
]