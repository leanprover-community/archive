[
    {
        "content": "<p>Hi, </p>\n<p>Is it possible for Lean 4 to export ASTs  similar to <code>lean --ast --tsast --tspp</code> in Lean 3? I'm building a tool for analyzing Lean 4 code, and having access to ASTs and tactic states would make things much easier. </p>\n<p>If this feature is not readily available, what would be a potential avenue to implement it in Lean 4? Thank you so much!</p>",
        "id": 338980369,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1677715969
    },
    {
        "content": "<p>in lean 4 it is easiest to just use the metaprogramming framework to get <code>Syntax</code> objects for each command and do whatever with them</p>",
        "id": 338980874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677716255
    },
    {
        "content": "<p>The tactic states are available in the info tree after processing the command</p>",
        "id": 338981007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677716313
    },
    {
        "content": "<p>Hi Mario,</p>\n<p>I'm pretty new to Lean 4 and not familiar with <code>Syntax</code> or info trees. But they're really valuable pointers for me to take a deeper look! Please let me know if you're aware of any documentation or existing code samples using them.   Thank you!</p>",
        "id": 338981615,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1677716646
    },
    {
        "content": "<p>You can learn a lot about <code>Syntax</code> through the metaprogramming book available <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">here</a> :)</p>",
        "id": 338990431,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677722682
    },
    {
        "content": "<p>Thank you, Thomas!</p>",
        "id": 338990975,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1677723161
    },
    {
        "content": "<p>Yeah. Even the VSCode Lean4 plugin does the heavy lifting <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Server/FileWorker/RequestHandling.lean\">inside the Lean4 compiler directly</a>, so it has access to all the fancy features.</p>",
        "id": 339050364,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1677750963
    },
    {
        "content": "<p>Another entry point is the source code of <a href=\"https://github.com/leanprover/LeanInk/\">LeanInk</a>.</p>",
        "id": 339052462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1677751544
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/Access.20to.20the.20proof.20goal/near/323185812\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Access.20to.20the.20proof.20goal/near/323185812</a>.</p>",
        "id": 339052640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1677751585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üê∫</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  This is very helpful. Thanks!</p>",
        "id": 339186634,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1677784746
    }
]