[
    {
        "content": "<p>Is Lean 4 different in that, for example, if <code>simp</code> finds no simplifications, it still succeeds? Is the only indication of this that the goal does not change and nothing in the goal is highlighted in green? Is it possible to have the tactic in the .lean file be highlighted in some way?</p>",
        "id": 366038803,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686713831
    },
    {
        "content": "<p>you can wrap the tactic in <code>fail_if_no_progress</code></p>",
        "id": 366038994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686713971
    },
    {
        "content": "<p>I see.</p>",
        "id": 366039210,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686714077
    },
    {
        "content": "<p>(that is a workaround, I think we will probably make <code>simp</code> do this automatically at some point)</p>",
        "id": 366039306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686714138
    },
    {
        "content": "<p>Can the whole tactic proof be wrapped like that, or would it need to be wrapped around each tactic?</p>",
        "id": 366039397,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686714224
    },
    {
        "content": "<p>(I am assuming that <code>simp</code> is not the only tactic that does this)</p>",
        "id": 366039509,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686714255
    },
    {
        "content": "<p>Each tactic would have to be wrapped, or you can (should) make a macro which does the wrapping</p>",
        "id": 366039534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686714281
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"simp\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fail_if_no_progress</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(untested, might loop)</p>",
        "id": 366039573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686714314
    },
    {
        "content": "<p>Ok. Thank you.</p>",
        "id": 366039606,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686714345
    },
    {
        "content": "<p>Seems to work.</p>",
        "id": 366042862,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686716246
    },
    {
        "content": "<p>Is there a way to have it also work with <code>simp at</code>?</p>",
        "id": 366045129,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686717497
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">simp'</span><span class=\"o\">)</span> <span class=\"s2\">\"simp\"</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">discharger</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\" only\"</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"o\">(</span><span class=\"s2\">\" [\"</span> <span class=\"n\">withoutPosition</span><span class=\"o\">((</span><span class=\"n\">simpStar</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">simpErase</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">simpLemma</span><span class=\"o\">),</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">simp'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fail_if_no_progress</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">stx.setKind</span> <span class=\"bp\">``</span><span class=\"n\">Tactic.simp</span><span class=\"o\">⟩))</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 366045792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686717843
    },
    {
        "content": "<p>I'm not at a computer right now, but <code>rw</code> and <code>simp_rw</code> have a similar behaviour...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 366045975,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686717935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/tactics.20that.20have.20no.20effect/near/366045792\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">simp'</span><span class=\"o\">)</span> <span class=\"s2\">\"simp\"</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">discharger</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\" only\"</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"o\">(</span><span class=\"s2\">\" [\"</span> <span class=\"n\">withoutPosition</span><span class=\"o\">((</span><span class=\"n\">simpStar</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">simpErase</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">simpLemma</span><span class=\"o\">),</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">simp'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fail_if_no_progress</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">stx.setKind</span> <span class=\"bp\">``</span><span class=\"n\">Tactic.simp</span><span class=\"o\">⟩))</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 366046189,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1686718053
    },
    {
        "content": "<p>I would argue that not erroring is the correct behavior for <code>rw []</code>, and also for <code>rw [show 1 = 1 by rfl]</code> on <code>f 1</code></p>",
        "id": 366046733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686718289
    },
    {
        "content": "<p><code>rw [show 1 = 1 by rfl]</code> on <code>f 2</code> should error (and does error)</p>",
        "id": 366046773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686718304
    },
    {
        "content": "<p>Mario, sure.  However, sometimes (not just with <code>rw</code>) I am confused as to whether not seeing a change in the infoview is a consequence of a tactic having done nothing or of having no pretty-printed effect.  It would be nice to have a flag to avoid \"useless\" tactics.</p>",
        "id": 366048779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686719188
    },
    {
        "content": "<p>Ah, i remembered that <code>congr</code> also does nothing silently!</p>",
        "id": 366048929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686719266
    },
    {
        "content": "<p>On the subject, <a href=\"https://github.com/leanprover-community/mathlib4/pull/4774\">!4#4774</a> has been sitting on the review queue for a while: it proposes making <code>casesm</code> fail if it doesn't do anything.</p>",
        "id": 366063213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686724350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/tactics.20that.20have.20no.20effect/near/366039573\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"simp\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fail_if_no_progress</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Would <code>simp!</code> be a good name for this tactic?</p>",
        "id": 367288255,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687058920
    },
    {
        "content": "<p>Also, in general would it be reasonable to overload the <code>!</code> suffix for these kind of actions?</p>",
        "id": 367288309,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687058976
    },
    {
        "content": "<p>I'd really prefer if the default behaviour on doing nothing is failure.</p>\n<p>It is easier to do flow control in tactics that use these tactics as building blocks, it is more informative to the user, and in particular it gives better information as the behaviour of tactics in a committed proof change due to changes in the simp set, etc.</p>",
        "id": 367288669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687059212
    },
    {
        "content": "<p>No one likes having to inspect the goal state carefully to see if it actually changed after calling <code>simp</code>.</p>",
        "id": 367288775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687059287
    },
    {
        "content": "<p>A recent example where I would have liked this, is the change to <code>push_neg</code>.  During the port, right after calls to <code>push_neg</code> there were <code>simp [not_...]</code> calls, to remove the <code>¬</code> that were left by the earlier tactic.  These <code>simp</code>s are now silently doing nothing.</p>",
        "id": 367297188,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687064771
    },
    {
        "content": "<p>An example with <code>simp_rw</code> instead of <code>simp</code> is the change in <code>PartitionOfUnity</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5132\">!4#5132</a>.</p>",
        "id": 367297366,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687064891
    },
    {
        "content": "<p>Also, <code>fail_if_no_progress</code> tests <code>isDefEq</code>, whereas maybe actual term equality (or something in-between) might be better.</p>",
        "id": 367304669,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687069706
    }
]