[
    {
        "content": "<p>I'm elaborating and evaluating an array literal expression, but for some reason when it reaches &gt; 32 elements and starts nesting lists, some of the metavariables in the expression that I thought should be assigned during elaboration are instead left unassigned?</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Qq</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"genStatusCodes!\"</span> <span class=\"n\">codes</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">expectedType</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTermEnsuringType</span> <span class=\"n\">codes</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">unassigned</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getUnassignedExprMVars</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">name</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">unassigned.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">unassigned</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">expr</span>\n    <span class=\"n\">throwError</span> <span class=\"n\">default</span>\n\n<span class=\"n\">genStatusCodes</span><span class=\"bp\">!</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n  <span class=\"mi\">00</span><span class=\"o\">,</span><span class=\"mi\">01</span><span class=\"o\">,</span><span class=\"mi\">02</span><span class=\"o\">,</span><span class=\"mi\">03</span><span class=\"o\">,</span><span class=\"mi\">04</span><span class=\"o\">,</span><span class=\"mi\">05</span><span class=\"o\">,</span><span class=\"mi\">06</span><span class=\"o\">,</span><span class=\"mi\">07</span><span class=\"o\">,</span><span class=\"mi\">08</span><span class=\"o\">,</span><span class=\"mi\">09</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">12</span><span class=\"o\">,</span><span class=\"mi\">13</span><span class=\"o\">,</span><span class=\"mi\">14</span><span class=\"o\">,</span><span class=\"mi\">15</span><span class=\"o\">,</span><span class=\"mi\">16</span><span class=\"o\">,</span><span class=\"mi\">17</span><span class=\"o\">,</span><span class=\"mi\">18</span><span class=\"o\">,</span><span class=\"mi\">19</span><span class=\"o\">,</span><span class=\"mi\">20</span><span class=\"o\">,</span><span class=\"mi\">21</span><span class=\"o\">,</span><span class=\"mi\">22</span><span class=\"o\">,</span><span class=\"mi\">23</span><span class=\"o\">,</span><span class=\"mi\">24</span><span class=\"o\">,</span><span class=\"mi\">25</span><span class=\"o\">,</span><span class=\"mi\">26</span><span class=\"o\">,</span><span class=\"mi\">27</span><span class=\"o\">,</span><span class=\"mi\">28</span><span class=\"o\">,</span><span class=\"mi\">29</span><span class=\"o\">,</span><span class=\"mi\">30</span><span class=\"o\">,</span><span class=\"mi\">31</span>\n  <span class=\"c1\">-- uncomment for error</span>\n  <span class=\"c1\">--, 32</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>The metavariables are all the typeclass args of the <code>OfNat</code> expressions.</p>\n<p>I assume I need something beyond <code>instantiateMVars</code>, but I'm not quite sure what I'm missing!</p>",
        "id": 390104374,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694324817
    },
    {
        "content": "<p>The missing piece is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.synthesizeSyntheticMVars#doc\">docs#Lean.Elab.Term.synthesizeSyntheticMVars</a> (or the combinator version <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.withSynthesize#doc\">docs#Lean.Elab.Term.withSynthesize</a>, which also handles default instances)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">Term.withSynthesize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Term.elabTermEnsuringType</span> <span class=\"n\">codes</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390149047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694354428
    },
    {
        "content": "<p>This combinator ensures that all typeclass problems are solved for (and in general, that all synthetic metavariables have their associated code be evaluated)</p>",
        "id": 390149160,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694354503
    },
    {
        "content": "<p>works perfectly, thank you!!</p>\n<p>is there a list of metaprogramming book to-dos? typeclass elaboration (and I guess synthetic mvars?) would be a nice topic to have some more discussion of</p>",
        "id": 390149949,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694355042
    }
]