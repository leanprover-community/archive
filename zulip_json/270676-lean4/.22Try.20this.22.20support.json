[
    {
        "content": "<p>As a test of the code actions support, I have an initial implementation of the \"try this\" behavior from lean 3. Suggestions for improvement are welcome. The plan is to clean this up and add it to std, where it can be used by mathlib tactics.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Server</span> <span class=\"n\">Lsp</span> <span class=\"n\">RequestM</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">TryThisInfo</span> <span class=\"n\">where</span>\n  <span class=\"n\">replacement</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">TypeName</span>\n\n<span class=\"kd\">@[codeActionProvider]</span> <span class=\"kd\">def</span> <span class=\"n\">tryThisProvider</span> <span class=\"o\">:</span> <span class=\"n\">CodeActionProvider</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">params</span> <span class=\"n\">snap</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"bp\">←</span> <span class=\"n\">readDoc</span>\n  <span class=\"k\">let</span> <span class=\"n\">startPos</span> <span class=\"o\">:=</span> <span class=\"n\">doc.meta.text.lspPosToUtf8Pos</span> <span class=\"n\">params.range.start</span>\n  <span class=\"k\">let</span> <span class=\"n\">endPos</span> <span class=\"o\">:=</span> <span class=\"n\">doc.meta.text.lspPosToUtf8Pos</span> <span class=\"n\">params.range.end</span>\n  <span class=\"k\">have</span> <span class=\"n\">results</span> <span class=\"o\">:=</span> <span class=\"n\">snap.infoTree.foldInfo</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"n\">_ctx</span> <span class=\"n\">info</span> <span class=\"n\">result</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ofCustomInfo</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">info</span> <span class=\"bp\">|</span> <span class=\"n\">result</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">tti</span> <span class=\"o\">:=</span> <span class=\"n\">info.value.get</span><span class=\"bp\">?</span> <span class=\"n\">TryThisInfo</span> <span class=\"bp\">|</span> <span class=\"n\">result</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">info.stx.getPos</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">info.stx.getTailPos</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">result</span>\n    <span class=\"n\">unless</span> <span class=\"n\">head</span> <span class=\"bp\">≤</span> <span class=\"n\">endPos</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">startPos</span> <span class=\"bp\">≤</span> <span class=\"n\">tail</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">result</span>\n    <span class=\"n\">result.push</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">tti</span><span class=\"o\">)</span>\n  <span class=\"n\">results.mapM</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">tti</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">eager</span> <span class=\"o\">:</span> <span class=\"n\">CodeAction</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">title</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Apply 'Try this'\"</span><span class=\"o\">,</span> <span class=\"n\">kind</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"s2\">\"refactor\"</span> <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">lazy</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">CodeAction</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">td</span> <span class=\"o\">:=</span> <span class=\"n\">params.textDocument</span>\n      <span class=\"k\">let</span> <span class=\"n\">action</span> <span class=\"o\">:=</span> <span class=\"n\">PrettyPrinter.ppCategory</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tti.replacement</span>\n      <span class=\"k\">let</span> <span class=\"n\">fmt</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">snap.runCoreM</span> <span class=\"n\">doc.meta</span> <span class=\"n\">action</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toBaseIO</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e.toMessageData.toString</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">edit</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">WorkspaceEdit.ofTextEdit</span> <span class=\"n\">td.uri</span> <span class=\"o\">{</span>\n        <span class=\"n\">range.start</span> <span class=\"o\">:=</span> <span class=\"n\">doc.meta.text.utf8PosToLspPos</span> <span class=\"n\">head</span>\n        <span class=\"n\">range.end</span> <span class=\"o\">:=</span> <span class=\"n\">doc.meta.text.utf8PosToLspPos</span> <span class=\"n\">tail</span>\n        <span class=\"n\">newText</span> <span class=\"o\">:=</span> <span class=\"n\">Format.pretty</span> <span class=\"n\">fmt</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">eager</span> <span class=\"k\">with</span> <span class=\"n\">edit</span><span class=\"bp\">?</span> <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">eager</span><span class=\"o\">,</span> <span class=\"n\">lazy</span><span class=\"bp\">?</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[widget]</span> <span class=\"kd\">def</span> <span class=\"n\">tryThisWidget</span> <span class=\"o\">:</span> <span class=\"n\">Widget.UserWidgetDefinition</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Tactic replacement\"</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">import * as React from 'react';</span>\n<span class=\"s2\">import { EditorContext, RpcContext } from '@leanprover/infoview';</span>\n<span class=\"s2\">const e = React.createElement;</span>\n<span class=\"s2\">export default function(props) {</span>\n<span class=\"s2\">  const editorConnection = React.useContext(EditorContext)</span>\n<span class=\"s2\">  function onClick() {</span>\n<span class=\"s2\">    editorConnection.api.applyEdit({</span>\n<span class=\"s2\">      changes: { [props.pos.uri]: [{ range: props.range, newText: props.replacement }] }</span>\n<span class=\"s2\">    })</span>\n<span class=\"s2\">  }</span>\n<span class=\"s2\">  return e('div', {className: 'ml1'}, e('pre', {className: 'font-code pre-wrap'},</span>\n<span class=\"s2\">    ['Try this: ', e('a', { onClick }, props.replacement)]))</span>\n<span class=\"s2\">}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tryThisAt</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">ref</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Try this: {stx}\"</span>\n  <span class=\"n\">pushInfoLeaf</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofCustomInfo</span> <span class=\"o\">{</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">ref</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">Dynamic.mk</span> <span class=\"o\">(</span><span class=\"n\">TryThisInfo.mk</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"o\">})</span>\n  <span class=\"k\">let</span> <span class=\"n\">text</span> <span class=\"o\">:=</span> <span class=\"n\">Format.pretty</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.ppCategory</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">stx.getPos</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">stx.getTailPos</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">map</span> <span class=\"bp\">←</span> <span class=\"n\">getFileMap</span>\n    <span class=\"k\">let</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">Lsp.Range.mk</span> <span class=\"o\">(</span><span class=\"n\">map.utf8PosToLspPos</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map.utf8PosToLspPos</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">json</span> <span class=\"o\">:=</span> <span class=\"n\">Json.mkObj</span> <span class=\"o\">[(</span><span class=\"s2\">\"replacement\"</span><span class=\"o\">,</span> <span class=\"n\">text</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"range\"</span><span class=\"o\">,</span> <span class=\"n\">toJson</span> <span class=\"n\">range</span><span class=\"o\">)]</span>\n    <span class=\"n\">Widget.saveWidgetInfo</span> <span class=\"bp\">``</span><span class=\"n\">tryThisWidget</span> <span class=\"n\">json</span> <span class=\"n\">ref</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mysimp\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">tryThisAt</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">stx</span>\n  <span class=\"n\">Tactic.evalTactic</span> <span class=\"n\">stx</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mysimp</span>\n</code></pre></div>",
        "id": 356367716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683405478
    },
    {
        "content": "<p>The observable behavior is:</p>\n<ul>\n<li>There is a message over <code>mysimp</code> which says <code>Try this: simp</code></li>\n<li>There is a widget over <code>mysimp</code> which also says <code>Try this: simp</code> but <code>simp</code> is a link which if clicked replaces the span of <code>mysimp</code> with <code>simp</code></li>\n<li>There is a code action (a lightbulb, also triggered by ctrl-.) which says \"Apply 'Try this'\" which will replace the span of <code>mysimp</code> with <code>simp</code></li>\n</ul>",
        "id": 356367964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683405634
    },
    {
        "content": "<p>Ideally, the link would just be in the original message instead of being its own widget; this seems to be blocked on <a href=\"https://github.com/leanprover/lean4/pull/2064\">lean4#2064</a> (see <a href=\"#narrow/stream/270676-lean4/topic/Links.20in.20messages.3F\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Links.20in.20messages.3F</a>)</p>",
        "id": 356368052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683405715
    },
    {
        "content": "<p>I wrote a little bit of code to connect Mario's code with both <code>library_search</code> and <code>propose</code> (which I renamed to <code>suggest</code> and <code>recommend</code> respectively in my code) <a href=\"https://gist.github.com/fpvandoorn/8d19febcf97f0e32bf5e33c255d4578a\">here</a>. This might be useful for demos<br>\nHere is the output (in VSCode dark mode; the blue text is clickable)<br>\n<a href=\"/user_uploads/3121/tFqtTHz49ieHRpQYhVuaBKqp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tFqtTHz49ieHRpQYhVuaBKqp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tFqtTHz49ieHRpQYhVuaBKqp/image.png\"></a></div>",
        "id": 356715782,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1683553973
    },
    {
        "content": "<p>I changed the JSON a little bit by having a field for extra text that will not be used in the replacement.</p>",
        "id": 356717033,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1683554218
    },
    {
        "content": "<p>Can't wait!</p>",
        "id": 356814110,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683580012
    },
    {
        "content": "<p>You don't have to wait, he posted a link to his code.</p>",
        "id": 356814679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683580207
    },
    {
        "content": "<p>Yes, I ran it, but I want it everywhere. :-)</p>",
        "id": 356815057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683580352
    },
    {
        "content": "<p>I really works beautifully! The only weird thing from a UI point of view is that the links don't react as links when the mouse cursor is over them. They react like ordinary text.</p>",
        "id": 356820888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683582846
    },
    {
        "content": "<p>Is there some parent CSS that's used here? Presumably something should be added there to make the cursor work properly for the links, but here's a hacky inline version (everything else kept the same, of course)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[widget]</span> <span class=\"kd\">def</span> <span class=\"n\">tryThisWidget</span> <span class=\"o\">:</span> <span class=\"n\">Widget.UserWidgetDefinition</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Tactic replacement\"</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">import * as React from 'react';</span>\n<span class=\"s2\">import { EditorContext, RpcContext } from '@leanprover/infoview';</span>\n<span class=\"s2\">const e = React.createElement;</span>\n<span class=\"s2\">export default function(props) {</span>\n<span class=\"s2\">  const editorConnection = React.useContext(EditorContext)</span>\n<span class=\"s2\">  function onClick() {</span>\n<span class=\"s2\">    editorConnection.api.applyEdit({</span>\n<span class=\"s2\">      changes: { [props.pos.uri]: [{ range: props.range, newText: props.replacement }] }</span>\n<span class=\"s2\">    })</span>\n<span class=\"s2\">  }</span>\n<span class=\"s2\">  return e('div', {className: 'ml1'}, e('pre', {className: 'font-code pre-wrap'},</span>\n<span class=\"s2\">    ['Try this: ', e('a', { onClick, style: { cursor: 'pointer' } }, props.replacement)]))</span>\n<span class=\"s2\">}\"</span>\n</code></pre></div>",
        "id": 356822301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683583559
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 356822698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683583766
    },
    {
        "content": "<p>This is up at <a href=\"https://github.com/leanprover/std4/pull/130\">std4#130</a> BTW. It could use a review, although I am usually the one doing std4 reviews. Perhaps <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> has some tips</p>",
        "id": 356845176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683595562
    },
    {
        "content": "<p>I will add Floris's extra text field and Adam's pointer cursor</p>",
        "id": 356845277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683595617
    },
    {
        "content": "<p>BTW I just cribbed the existing CSS used for messages, there is no extra CSS being sent</p>",
        "id": 356846832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683596791
    },
    {
        "content": "<p>quite a lot of this setup is done in the vscode extension; I would prefer if more of it was in lean since otherwise other editors can't benefit from it</p>",
        "id": 356846890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683596850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what do you mean by 'this setup'? Gabriel and I discussed this regarding <a href=\"https://github.com/leanprover/lean4/pull/2064\">lean4#2064</a>, and we figured a workable solution would be to simply hardcode the internal name of the <code>try this</code> widget into other extensions (e.g. nvim-lean).</p>",
        "id": 356847015,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683596946
    },
    {
        "content": "<p>Regarding pointers, it should suffice to put <code>className: 'link pointer dim'</code> on the <code>&lt;a&gt;</code>.</p>",
        "id": 356847242,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683597120
    },
    {
        "content": "<p>I think hardcoding the widgets is not a very good solution. I would rather have widgets have a way to gracefully degrade to text formats</p>",
        "id": 356847484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683597272
    },
    {
        "content": "<p>How would you encode the fact that clicking the link is supposed to edit something in the proof script in a text format? The issue with this approach is that it quickly converges to 'implement a custom interactive UI framework that works in many text editors'.</p>",
        "id": 356848032,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683597633
    },
    {
        "content": "<p>(We could definitely have them degrade gracefully to non-interactive text, the hardcoding is just to make clicking work.)</p>",
        "id": 356848090,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683597673
    },
    {
        "content": "<blockquote>\n<p>The issue with this approach is that it quickly converges to 'implement a custom interactive UI framework that works in many text editors'.</p>\n</blockquote>\n<p>You say that like it's a bad thing</p>",
        "id": 356848236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683597748
    },
    {
        "content": "<p>LSP is a standardized way to perform edits to the text</p>",
        "id": 356848254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683597764
    },
    {
        "content": "<p>the part that can't be done without JS is having a link which calls back into lean or has some other custom behavior, that's the part that would be lost / reimplemented</p>",
        "id": 356848380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683597838
    },
    {
        "content": "<p>I think for a lot of applications you don't need the full power of JS. One thing I often want to do is to have links which call server callbacks. This seems very appropriate next to all the other <code>ofExpr</code>, <code>ofSyntax</code> etc stuff in <code>MessageData</code> and would not be as hardcoded as <code>ofTryThis</code></p>",
        "id": 356848543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683597937
    },
    {
        "content": "<p>Which other LSP operations besides making an edit would you like to use?</p>",
        "id": 356848635,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683597983
    },
    {
        "content": "<p>I don't think you even need to do anything special for edits</p>",
        "id": 356848663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683598001
    },
    {
        "content": "<p>just call back to the server and it will make an LSP edit action</p>",
        "id": 356848688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683598014
    },
    {
        "content": "<p>that's not how I implemented it above, but it could be done that way</p>",
        "id": 356848769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683598068
    },
    {
        "content": "<p>I'm a little unclear on the proposal. Is it to have a <code>MessageData.ofLspCall name params</code> constructor that renders in every client as a link that, when clicked, makes a call to server method <code>name</code> with the parameters <code>params</code>?</p>",
        "id": 356848867,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683598118
    },
    {
        "content": "<p>it would also have a body, of course, and a text only view would ignore the link part</p>",
        "id": 356848945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683598179
    },
    {
        "content": "<p>I think it would be good to see a concrete use case for this that's not try this before thinking about whether the generalization is useful.</p>",
        "id": 356848953,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683598191
    },
    {
        "content": "<p>I wanted to implement the <code>#help</code> command to have links for go-to-definition, but <code>ofExpr</code> doesn't let you customize the link text</p>",
        "id": 356849058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683598230
    },
    {
        "content": "<p>Could you give a concrete example? Is it that you want to have a link that goes to the definition of some constant, but render the link as something else than the syntax of that constant?</p>",
        "id": 356849251,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683598356
    },
    {
        "content": "<p>yes</p>",
        "id": 356849257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683598363
    },
    {
        "content": "<p>currently the output looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.HelpCmd</span>\n\n<span class=\"k\">#help</span> <span class=\"n\">tactic</span> <span class=\"n\">by_cases</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"by_cases\"</span><span class=\"bp\">...</span> <span class=\"o\">[</span><span class=\"n\">Classical.</span><span class=\"bp\">«</span><span class=\"n\">tacticBy_cases_</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">»</span><span class=\"o\">]</span>\n  <span class=\"bp\">`</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:)</span><span class=\"bp\">?</span> <span class=\"n\">p</span><span class=\"bp\">`</span> <span class=\"n\">splits</span> <span class=\"n\">the</span> <span class=\"n\">main</span> <span class=\"n\">goal</span> <span class=\"n\">into</span> <span class=\"n\">two</span> <span class=\"n\">cases</span><span class=\"o\">,</span> <span class=\"n\">assuming</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">first</span>\n<span class=\"n\">branch</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">second</span> <span class=\"n\">branch.</span>\n</code></pre></div>\n<p>the thing in brackets is an expr you can ctrl-click</p>",
        "id": 356849355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683598428
    },
    {
        "content": "<p>I would rather get clicky stuff on the <code>\"by_cases\"</code> and hide the ugly name of the constant</p>",
        "id": 356849504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683598519
    },
    {
        "content": "<p>Ah, I see. So this is starting to sound a lot like ProofWidgets3 which was hoping to describe an editor-independent system for building UIs. The thing is, implementing this in a way that's not going to be forever half-broken is a large undertaking and I don't think we have the resources for it. I think special-casing certain widgets in certain editors would totally work; for your proposal, instead of special-casing a 'try this' widget, we'd special-case a 'make lsp call' widget instead. But as far as <code>MessageData</code> is concerned, there'd still only be one 'widget message' constructor.</p>",
        "id": 356849752,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683598635
    },
    {
        "content": "<p>(Btw, this whole discussion should probably go on <a href=\"https://github.com/leanprover/lean4/pull/2064\">lean4#2064</a>.)</p>",
        "id": 356850019,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683598808
    }
]