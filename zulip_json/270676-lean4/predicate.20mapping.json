[
    {
        "content": "<p>I would like to implement a function like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">Qs</span> <span class=\"n\">Ps</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Qt</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Qs</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">Ps</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">poss</span> <span class=\"n\">e</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">_of_p</span> <span class=\"n\">e</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">compound</span> <span class=\"n\">e</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">Pt</span> <span class=\"n\">Qt</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>But <code>Qt</code> and <code>Pt</code> are 'translations' from <code>Qs</code> and <code>Ps</code>. So it  would be better to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">Qs</span> <span class=\"n\">Ps</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">???</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Qs</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">Ps</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">poss</span> <span class=\"n\">e</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">_of_p</span> <span class=\"n\">e</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">compound</span> <span class=\"n\">e</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">Ps</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">Qs</span><span class=\"o\">)</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>What options do I have to implement the mapping? An inductive type? How do we extract the mapping from types like the ones below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">inductive</span> <span class=\"n\">NodeMap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"bp\">|</span> <span class=\"n\">nm_benzene</span> <span class=\"o\">:</span> <span class=\"n\">NodeMap</span> <span class=\"n\">_benzene_n_1</span> <span class=\"n\">benzene</span>\n\n <span class=\"kd\">inductive</span> <span class=\"n\">EdgeMap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n <span class=\"bp\">|</span> <span class=\"n\">em_toxicity</span> <span class=\"o\">:</span> <span class=\"n\">EdgeMap</span> <span class=\"n\">_toxicity_n_1</span> <span class=\"n\">toxicity</span>\n</code></pre></div>",
        "id": 392612142,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1695422979
    },
    {
        "content": "<p>Another option would be implementing a hashtable from <code>x → Prop</code> to <code>t</code> (node mappings).  The point is that  those mappings will be obtained from external processes.</p>",
        "id": 393065378,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1695661164
    }
]