[
    {
        "content": "<p>I figured I'd try to do a bit of gratuitously dependently typed representation of a little lambda calculus (hey, I'm on vacation this week!) and I ran into an error message that is not so excellent that I think may be a bug. This code is reduced from a larger example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Scope</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">//</span> <span class=\"n\">True</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Scope.empty</span> <span class=\"o\">:</span> <span class=\"n\">Scope</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[],</span> <span class=\"n\">True.intro</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Scope.extend</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Scope</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Scope</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs.val</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs.val</span><span class=\"o\">,</span> <span class=\"n\">True.intro</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsSome</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">isSome</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsSome</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">where</span>\n  <span class=\"n\">isSome</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Context</span> <span class=\"o\">:</span> <span class=\"n\">Scope</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">sc</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">IsSome</span> <span class=\"o\">(</span><span class=\"n\">sc.extend</span><span class=\"bp\">?</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">sc'</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Context</span> <span class=\"n\">sc'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">Scope</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">sc.val</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Context.lookup</span> <span class=\"o\">{</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">Scope</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">sc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"n\">sc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">sc</span><span class=\"o\">,</span> <span class=\"bp\">Γ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨[],</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">Context.empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">x.property</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">Context.extend</span> <span class=\"bp\">Γ'</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">true</span>\n</code></pre></div>\n<p>In the real version, scopes have unique contents, and the types are an inductive type rather than <code>Bool</code>.</p>\n<p>The error I get is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">function</span> <span class=\"n\">expected</span>\n   <span class=\"n\">_x_28</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"bp\">Γ✝</span> <span class=\"bp\">Γ✝</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This occurred after the pattern-match compiler didn't seem to be doing the dependent pattern matching that I expected, but those intermediate states of the code didn't survive. </p>\n<p>Any pointers? I think that at least the error message is a bug. I'm running Lean 4.1.0.</p>",
        "id": 393160166,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1695703148
    },
    {
        "content": "<p>Same thing happens in 4.2.0-rc1</p>",
        "id": 393160410,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1695703335
    },
    {
        "content": "<p><code>(kernel)</code> errors are almost always bugs</p>",
        "id": 393161558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695704244
    },
    {
        "content": "<p>my guess is that the dependent pattern matcher generated a bad term, although it's also possible that the input is bad (which is still no excuse for producing a bad term)</p>",
        "id": 393161649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695704302
    },
    {
        "content": "<p>oh, I found an unrelated bug while minimizing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Scope</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">//</span> <span class=\"n\">True</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Context.lookup</span> <span class=\"o\">{</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"n\">Scope</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">sc</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨[],</span> <span class=\"o\">⟨⟩⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"c1\">-- unsupported `True.casesOn` application during code generation</span>\n</code></pre></div>",
        "id": 393162123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695704647
    },
    {
        "content": "<p>All right, I'll open an issue once I get the kid out the door - thanks</p>",
        "id": 393163047,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1695705370
    },
    {
        "content": "<p>(and this definitely looks like unification leaving behind some evidence that wasn't expected elsewhere)</p>",
        "id": 393163106,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1695705436
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Context</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">//</span> <span class=\"n\">False</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"o\">⟨</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">sc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Context.lookup</span> <span class=\"o\">{</span><span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">//</span> <span class=\"n\">False</span> <span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">sc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">sc</span><span class=\"o\">,</span> <span class=\"bp\">Γ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">Context.extend</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"c1\">-- (kernel) function expected</span>\n<span class=\"c1\">--   _x_6 (_ : HEq Γ✝ Γ✝)</span>\n</code></pre></div>\n<p>there are a bunch of weird things that have to come together to cause the issue</p>",
        "id": 393164071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695706182
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 393167770,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1695708516
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/2588\">https://github.com/leanprover/lean4/issues/2588</a></p>",
        "id": 393186632,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1695717158
    }
]