[
    {
        "content": "<p>Does anyone know how to get <code>#check Exists.intro</code> to use the existential notation? This is for teaching pruposes.</p>",
        "id": 388140067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693409400
    },
    {
        "content": "<p>This is what it's outputting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Exists.intro.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exists</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>and this is what Patrick would want to see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Exists.intro.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 388140824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693409567
    },
    {
        "content": "<p>The issue is that the <code>app_unexpander</code> is looking for <code>Exists fun $x =&gt; $body</code>, and it doesn't know about <code>Exists $p</code>. For that, it'd need to generate a fresh name disjoint from the identifiers that appear in <code>p</code>, which seems doable from the <code>UnexpandM</code> monad. (Though there's a comment \"unexpanders should not need to introduce new names\" in the code.)</p>",
        "id": 388141386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693409712
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[app_unexpander Exists]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandExists'</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Exists.intro</span>\n</code></pre></div>",
        "id": 388142279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693409919
    },
    {
        "content": "<p>I cheated re: introducing new names, just don't use this for a predicate named <code>x</code></p>",
        "id": 388142449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693409958
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 388143353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693410193
    },
    {
        "content": "<p>You could use ᾰ</p>",
        "id": 388143803,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693410323
    }
]