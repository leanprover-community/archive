[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> / <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> A quick update: Reservoir <a href=\"https://reservoir.lean-lang.org/\">now displays</a> a dark gold checmark for packages that failed to build on the latest toolchain but successfully build on a older version (and this is noted in the checkmark's tooltip). What do you think of this as a solution to <a href=\"https://github.com/leanprover/reservoir/pull/2\">leanprover/reservoir#2</a>?</p>",
        "id": 406983417,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702164754
    },
    {
        "content": "<p>I see mathlib4 also has a green checkmark, did something change there?</p>",
        "id": 406983541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702164887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yep, it is now included in the daily testbed.</p>",
        "id": 406983567,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702164913
    },
    {
        "content": "<p>(which only took 35 minutes to build all 229 packages on their package-specified toolchain today. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> )</p>",
        "id": 406983704,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702165071
    },
    {
        "content": "<p>Is this leveraging the mathlib cache, or does that number also include building all of mathlib?</p>",
        "id": 406984264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702165668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  It's making use of cache.</p>",
        "id": 406984690,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702166105
    },
    {
        "content": "<p>Looks nice! Why it is gold instead of green is clear once hovered on the check mark.</p>\n<p>Just a nitpick, maybe a blue checkmark is more neutral than a dark gold one, but a dark gold one is certainly more neutral  than a red or yellow one.</p>",
        "id": 407009811,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702183325
    },
    {
        "content": "<p>An interesting case is <a href=\"https://reservoir.lean-lang.org/packages/lean--dojo-LeanInfer\">LeanInfer</a>, it builds on the latest Lean v4.4.0-rc1 but not the last stable v4.3.0 because the code is kept up-to-date with v4.4.0-rc1 . Should this case be shown differently? Like in gray. But red cross is also fine, I guess.</p>\n<p><a href=\"/user_uploads/3121/L-9CB9qbIEygQRMkYGlhk3-2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/L-9CB9qbIEygQRMkYGlhk3-2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/L-9CB9qbIEygQRMkYGlhk3-2/image.png\"></a></div>",
        "id": 407036023,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702202110
    },
    {
        "content": "<p>I think a cross is fine, assuming there is not a 4.3.0 branch and the existing code does not compile on 4.3.0</p>",
        "id": 407036352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702202183
    },
    {
        "content": "<p>Currently, Reservoir builds against the main branch, no assumption is made about version specific branches or tags. But this could be a convention for projects and a feature of Reservoir.</p>",
        "id": 407037141,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702202377
    },
    {
        "content": "<p>Another case is <a href=\"https://github.com/obalcells/abel_ruffini_lean\">abel_ruffini_lean</a> which has <code>leanprover/lean4:v4.3.0</code> in its toolchain file, but fails for both v4.3.0 and v4.4.0-rc1. Checking the code it actually should fail for both, but in the case of v4.3.0, it failed twice, once of missing a file (the right reason), once after <code>lake update</code> and due to <code>leanOption</code> in v4.4.0-rc1, is this expected?</p>",
        "id": 407039740,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702203092
    },
    {
        "content": "<p>even std fails on 4.3.0 because of the <code>leanOption</code> thing</p>",
        "id": 407043336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702204054
    },
    {
        "content": "<p>I still feels very unfair that many projects have only red cross while they do build on the toolchain that announce. For instance <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">https://github.com/leanprover-community/lean4-metaprogramming-book</a> builds on GitHub CI.</p>",
        "id": 407082536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702224387
    },
    {
        "content": "<p>I think this is only true for projects which are on a version of lean that predates reservoir</p>",
        "id": 407082798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702224544
    },
    {
        "content": "<p>Hence that's an issue with reservoir.</p>",
        "id": 407082964,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702224691
    },
    {
        "content": "<p>And I still don't understand why the reservoir landing page shows any red cross at all. It should simply filter them out (but still show them in search results of course).</p>",
        "id": 407083079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702224780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Reservoir.20status.20display/near/407082536\">said</a>:</p>\n<blockquote>\n<p>I still feels very unfair that many projects have only red cross while they do build on the toolchain that announce. For instance <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">https://github.com/leanprover-community/lean4-metaprogramming-book</a> builds on GitHub CI.</p>\n</blockquote>\n<p>Reservoir does regulary build packages on the the toolcahin they specify! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>  <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">leanprover-community/lean4-metaprogramming-book</a> has a red cross because <a href=\"https://github.com/leanprover/reservoir/actions/runs/7157230343/job/19487841622#step:4:1\">it does not build on its own toolchain</a> with a simple <code>lake build</code>. It is also not clear to me how it is supposed to be built (or, similarly, how the GitHub CI passes).</p>",
        "id": 407100805,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702238422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Reservoir.20status.20display/near/407100805\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Reservoir.20status.20display/near/407082536\">said</a>:</p>\n<blockquote>\n<p>I still feels very unfair that many projects have only red cross while they do build on the toolchain that announce. For instance <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">https://github.com/leanprover-community/lean4-metaprogramming-book</a> builds on GitHub CI.</p>\n</blockquote>\n<p>Reservoir does regulary build packages on the the toolcahin they specify! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>  <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">leanprover-community/lean4-metaprogramming-book</a> has a red cross because <a href=\"https://github.com/leanprover/reservoir/actions/runs/7157230343/job/19487841622#step:4:1\">it does not build on its own toolchain</a> with a simple <code>lake build</code>. It is not clear to me how it is supposed to be built (or, similarly, how the GitHub CI passes).</p>\n</blockquote>\n<p>The book doesn't have CI that runs the actual code unfortunately (I think we left an open issue as a reminder but none of us have gotten to it to my recollection) -- all the CI it has is to generate the PDF.</p>",
        "id": 407101146,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702238540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Reservoir.20status.20display/near/407083079\">said</a>:</p>\n<blockquote>\n<p>And I still don't understand why the reservoir landing page shows any red cross at all. It should simply filter them out (but still show them in search results of course).</p>\n</blockquote>\n<p>I think it is nice to know that there are new and/or popular packages that do not build on any know toolchain. It can, e.g., encourage users to submit a PR to fix them if they wish to use them. It also to make the checkmarks feel more honest by demonstrating that you will get a red cross if things Reservoir cannot build them.</p>",
        "id": 407101563,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702238692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> In that case, and if the text document is the important artifact (which I could see it being), as there been consideration of making that the thing that occurs on a default <code>lake build</code>?</p>",
        "id": 407101945,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702238879
    },
    {
        "content": "<p>It's occurred to me personally yeah but I didn't suggest it anywhere nor play with trying to make it happen -- honestly I'm a bit embarrassed to have not had as much time to help out with it (and many other things). But I think it makes sense certainly -- (I think probably the compilation from lean -&gt; md needs to fit in there too but that isn't very hard either from my recollection).</p>",
        "id": 407102727,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702239251
    },
    {
        "content": "<p>The reason it doesn't build is that the files are demonstrating error messages</p>",
        "id": 407110354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702244534
    },
    {
        "content": "<p>But adding <code>guard_msg</code>s everywhere seems like a waste of time if David is working on better tools for this kind of thing</p>",
        "id": 407110737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702244972
    },
    {
        "content": "<p>I think there's going to have to be a community effort to deal with lots of red crosses! We're definitely looking forward to a sea of green on the reservoir landing page.</p>",
        "id": 407114022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702247731
    },
    {
        "content": "<p>Importantly, I think we should try to develop \"best practices\", and possibly even a rule, about how packages can declare where you should look for versions compatible with various tool chains.</p>",
        "id": 407114091,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702247793
    },
    {
        "content": "<p>As examples, Mathlib/Std/Aesop each create a tag for the first time they update to use a particular rc or stable tool chain, simply using e.g. <code>v4.4.0-rc1</code> as the tag name.</p>",
        "id": 407114159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702247872
    },
    {
        "content": "<p><code>lean4checker</code>, for no particularly coherent reason, uses instead <code>toolchain/v4.4.0-rc1</code>.</p>",
        "id": 407114231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702247929
    },
    {
        "content": "<p>It's very important that if tags or branches exist with these intended compatibilities, then reservoir does <em>not</em> show red crosses because the development branch is no longer compatible.</p>",
        "id": 407114262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702247989
    },
    {
        "content": "<p>Whether we want ecosystem wide rules for the naming of such tags or branches, or a way to encode these intentions into a lakefile (or other configuration file), it would be nice to sort this out soon.</p>",
        "id": 407114342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702248057
    },
    {
        "content": "<p>During this week I will try to do a bit of a survey of the red crosses and understand why we have too many (i.e. more than zero :-)</p>",
        "id": 407114391,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702248115
    },
    {
        "content": "<p>As far as I'm concerned, any red cross is not just a sign that a package is out of date, but an indication that our tooling is not providing enough help to the package author!</p>",
        "id": 407114471,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702248182
    },
    {
        "content": "<p>It's reasonable that the landing page of Reservoir displays projects according to some ordering and without filtering. \"A project fails to build ⇒ disappear from the front page\" would a more disturbing experience than a gold check mark or even a red cross. Displaying the red cross at this stage is healthy, most of them seem fixable with a small PR to the project (or a little heuristics in Reservoir's CI).</p>\n<p>One exception will be establishing the convention of branch/tag for the recent Lean versions, Reservoir could give clear hint on this situation instead of just a red cross which would takes time to investigate and wonder what's the best practice.</p>",
        "id": 407120895,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702253586
    },
    {
        "content": "<p>Is there any other programming language that proudly presents a webpage full of red crosses like this? Clearly there is no such thing on <a href=\"https://crates.io/\">https://crates.io/</a> or <a href=\"https://pypi.org/\">https://pypi.org/</a></p>",
        "id": 407128172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702257970
    },
    {
        "content": "<p>(I have no direct opinion personally, but just to mention) PyPI does not run any CI for downstream projects (so it doesn't know the answer to have an opinion there), though there has been talk of doing so a scattered few times over the last 15 years to my recollection.</p>",
        "id": 407128681,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702258299
    },
    {
        "content": "<p>Just as an example: we really should not be showing a red cross for <a href=\"https://reservoir.lean-lang.org/packages/wellecks-ntptutorial\">https://reservoir.lean-lang.org/packages/wellecks-ntptutorial</a></p>\n<p>It has a <code>lakefile.lean</code>, but it is not hooked up at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Ntptutorial.lean</span>\n</code></pre></div>",
        "id": 407154926,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702268078
    },
    {
        "content": "<p>Another way of looking at it is that every such project is \"our\" fault, not the author's.</p>",
        "id": 407154999,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702268118
    },
    {
        "content": "<p>A major part of it is that reservoir didn't really \"ask for permission\" to host these projects, unlike pypi and <a href=\"http://crates.io\">crates.io</a> which grow through explicit submission. Usually the work to get a green checkmark is done during submission but by skipping that step we are looking at a lot of unfinished projects and things that were not designed for consumption in this way</p>",
        "id": 407157263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702269180
    },
    {
        "content": "<p>I can't speak for pypi, but for <a href=\"http://crates.io\">crates.io</a> the usual way to submit crates is using <code>cargo publish</code>, and this will build your project before pushing it, so you can be sure that it won't be sent unless it builds. (You can directly send things to <a href=\"http://crates.io\">crates.io</a> without the build part but this is more cumbersome so most people don't do it.)</p>",
        "id": 407157663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702269416
    },
    {
        "content": "<p>As an additional comment on <a href=\"http://crates.io\">crates.io</a>, Rust being a language that provides hard stability guarantees does in fact have a process of running the pre release compiler against the entire Eco system before releasing so they dont break those guarantees. And despite having version numbering now Lean 4 is not really a stable release in the sense that many other languages would define stable.</p>",
        "id": 407168424,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702275248
    }
]