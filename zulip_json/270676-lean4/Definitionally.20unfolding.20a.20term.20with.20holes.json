[
    {
        "content": "<p>Is there an easy way to definitionally unfold a term in lean4? I tried using <code>#eval</code>, but I can only get it to work on terms where I don't have any variables that range over a type, I tried adding a function but I don't think eval can show it in that case. Basically, I want to know what form lean will reduce a term to for the purposes of a reflexivity comparison.</p>\n<p>This is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iter</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">c0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">iter</span> <span class=\"n\">c0</span> <span class=\"n\">cs</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">iter</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_rec</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iter</span> <span class=\"n\">c0</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>And the things I'm trying to expand are <code>nat_rec c0 cs (Nat.succ (Nat.succ n))</code> and <code>cs (Nat.succ n) (nat_rec c0 cs (Nat.succ n))</code></p>",
        "id": 382199541,
        "sender_full_name": "Kevin Fisher",
        "timestamp": 1691257411
    },
    {
        "content": "<p>Nevermind, I found it, it's <code>#reduce</code></p>",
        "id": 382209113,
        "sender_full_name": "Kevin Fisher",
        "timestamp": 1691261215
    }
]