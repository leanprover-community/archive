[
    {
        "content": "<p>consider the following definition (please ignore the terrible proof):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">fact</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"k\">have</span> <span class=\"n\">sub_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat.sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span> <span class=\"n\">sub_eq</span> <span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"o\">]</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.gt_of_not_le</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I would like to hoist both the termination measure (<code>termination_by</code>) and the proof of termination for that measure (<code>decreasing_by</code>) to separate top-level definitions</p>\n<p>for the termination measure, it's easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fact_termination_measure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">fact</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fact_termination_measure</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but for the proof itself, I don't know how to \"lift\" it to its own tactic definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"fact_termination_proof\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fact_termination_proof</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span>\n  <span class=\"bp\">...</span> <span class=\"n\">same</span> <span class=\"n\">contents</span> <span class=\"n\">as</span> <span class=\"n\">before</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact</span>\n  <span class=\"bp\">...</span> <span class=\"n\">as</span> <span class=\"n\">above</span> <span class=\"bp\">...</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">fact_termination_proof</span>\n</code></pre></div>\n<p>doesn't seem to work -- is there a way to write this termination proof in its own separate definition?</p>\n<p>context: I am writing a Lean backend for my Rust verification tool, and now I'm adding support for termination proofs... the tool translates a Rust definition to a Lean definition that contains \"open variables\" for the proof of termination, found in another module, and the user is expected to fill them out... in my case, <code>fact_termination_proof</code> would be a stub in UserProvidedProofs.lean, and then the user would replace a <code>sorry</code> with an actual proof of termination</p>",
        "id": 324122476,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674843119
    },
    {
        "content": "<p>expanding on the \"doesn't seem to work\": I get a whole lot of errors along the lines of <code>unknown identifier 'x✝'</code> so I'm probably not doing my binding right</p>",
        "id": 324122841,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674843215
    },
    {
        "content": "<p>Note that it is unusual to provide a complicated proof of termination directly in <code>decreasing_by</code> unless it is a general purpose tactic, because it runs on all termination goals. If you want to provide a <em>specific</em> termination argument, you should use <code>decreasing_by assumption</code> (which is also the default, more or less) and then put <code>have : x - 1 &lt; x := by ...</code> before the call to <code>fact (x - 1)</code></p>",
        "id": 324123336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674843358
    },
    {
        "content": "<p>ok, yes, good usability question: do I want the user to solve all termination goals at once, or have them fill out separate proofs for each recursive call... worth pondering (I was basing myself on the example here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html</a> for <code>ack</code> which solves both goals at once)</p>",
        "id": 324123745,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674843472
    },
    {
        "content": "<p>I would (and lean does) use a general purpose tactic which can prove <em>most</em> termination goals, and then have a fallback of manual proof which is for <em>specific</em> termination goals. Users can't easily write termination proofs that prove multiple goals at once</p>",
        "id": 324124090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674843573
    },
    {
        "content": "<p>normally there will only be one nontrivial termination goal in a given function, though</p>",
        "id": 324124335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674843635
    },
    {
        "content": "<p>thanks, two sub-questions then:</p>\n<ul>\n<li>in this particular case, decreasing_tactic does not work -- what would be the recommended style for this specific example?</li>\n<li>back to my original use-case, the function body is auto-generated by a tool, but the termination proofs are hand-written, so I need to modularly de-couple the two -- there are no annotations on the source program, so I really want to separate the function definition (auto-generated, may be overwritten at some point in the future) and the proof of termination (maintained by the user in a separate file that does not get overwritten when the code is re-generated)</li>\n</ul>",
        "id": 324129461,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674845061
    },
    {
        "content": "<p>RE: the first point, the idea is that <code>decreasing_tactic</code> gets called on each of the termination goals. it includes (as one of the things it tries) <code>assumption</code>, which just looks for a proof of the goal in context. so if you provide a goal with <code>have : the_termination_goal := the_proof</code> right before making a recursive call, the default <code>decreasing_by</code> tactic will find and use that proof.</p>",
        "id": 324130060,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674845247
    },
    {
        "content": "<p>ah I see what you mean... bearing in mind that the definition is auto-generated, this means that I would have to generate the have : clause before the recursive call, refer to the proof that the user has written somewhere else (possibly via their own tactic), and maybe even pick a particular kind of ordering?</p>",
        "id": 324130497,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674845395
    },
    {
        "content": "<p>In this specific example I think you could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">termination_proof</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.sub_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_le.1</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">termination_proof</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 324130731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674845455
    },
    {
        "content": "<p>the proof is not as automatic as I would like (it gets better if you can use mathlib <code>linarith</code>)</p>",
        "id": 324130785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674845477
    },
    {
        "content": "<p>out of curiosity, what's the use case? this seems like an interesting project</p>",
        "id": 324130999,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674845539
    },
    {
        "content": "<p>thanks, no worries about the proof quality</p>",
        "id": 324131151,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674845604
    },
    {
        "content": "<p>this is the tool: <a href=\"https://arxiv.org/abs/2206.07185\">https://arxiv.org/abs/2206.07185</a>, presented at ICFP of last year, see also <a href=\"https://github.com/AeneasVerif/aeneas\">https://github.com/AeneasVerif/aeneas</a>: we generate a pure translation of Rust programs (currently, we have Coq + F* backends, with Isabelle/HOL and Lean4 in the works)</p>",
        "id": 324131212,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674845630
    },
    {
        "content": "<p>then the user provides the proofs on top of the generated code</p>",
        "id": 324131227,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674845637
    },
    {
        "content": "<p>here's where it gets complicated for me: because our tool auto-generates the definition <code>fact</code>, right now, I don't know that <code>h</code> is an important hypothesis that needs to be inserted in the output of the translation (the <code>fact</code>) function, so I would be at a loss as to how to \"infer\" the <code>have</code> clause to be inserted at the site of the recursive call</p>",
        "id": 324131450,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674845696
    },
    {
        "content": "<p>here's an example using the F* backend: this is what the tool generates, notice how the <code>decreases</code> clause is \"generic\" <a href=\"https://github.com/AeneasVerif/aeneas/blob/main/tests/fstar/hashmap_on_disk/HashmapMain.Funs.fst#L14-L34\">https://github.com/AeneasVerif/aeneas/blob/main/tests/fstar/hashmap_on_disk/HashmapMain.Funs.fst#L14-L34</a></p>\n<p>then, the definition for this decreases clause is written by the user here: <a href=\"https://github.com/AeneasVerif/aeneas/blob/main/tests/fstar/hashmap_on_disk/HashmapMain.Clauses.fst#L10-L12\">https://github.com/AeneasVerif/aeneas/blob/main/tests/fstar/hashmap_on_disk/HashmapMain.Clauses.fst#L10-L12</a> (possibly with something custom is the recursion is non-trivial)</p>",
        "id": 324131763,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674845789
    },
    {
        "content": "<p>by the way, Aeneas is <span class=\"user-mention\" data-user-id=\"371938\">@Son Ho</span>'s PhD project (just realized he's on this Zulip, too)</p>",
        "id": 324132062,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674845876
    },
    {
        "content": "<p>F* has much more automation in its proof checker than Lean (where the automation is done during elaboration, not during typechecking). You can probably get something very close to the F* backend if you always use the proof-term-having control flow structures (like <code>if h : whatever then .. else ..</code> and <code>match h : object with | ... =&gt; ...</code>) and allow users to add hypotheses to the termination proofs, which you can then fill in at the call site with <code>by assumption</code> or similar.</p>",
        "id": 324132537,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674845999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"342995\">Jonathan Protzenko</span> <a href=\"#narrow/stream/270676-lean4/topic/hoisting.20a.20proof.20of.20termination.20to.20a.20separate.20definition/near/324131450\">said</a>:</p>\n<blockquote>\n<p>here's where it gets complicated for me: because our tool auto-generates the definition <code>fact</code>, right now, I don't know that <code>h</code> is an important hypothesis that needs to be inserted in the output of the translation (the <code>fact</code>) function, so I would be at a loss as to how to \"infer\" the <code>have</code> clause to be inserted at the site of the recursive call</p>\n</blockquote>\n<p>You can just put everything in the context in there</p>",
        "id": 324132661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674846026
    },
    {
        "content": "<p>^only thing is re-generating the def might change the available context. not sure what the best approach would be there</p>",
        "id": 324132871,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674846081
    },
    {
        "content": "<p>yes, but that's a problem for other backends too if you e.g. add arguments to the function</p>",
        "id": 324132971,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674846109
    },
    {
        "content": "<p>so it's not perfect, but at least it's an improvement</p>",
        "id": 324132989,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674846115
    },
    {
        "content": "<p>so that could work, provided I know all of the hypotheses... for instance, what happens if the if-condition is negated? will the hypothesis still be name-able in the else branch?</p>",
        "id": 324133326,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674846210
    },
    {
        "content": "<p>yes, in fact that is the case in this example</p>",
        "id": 324133383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674846226
    },
    {
        "content": "<p>indeed!</p>",
        "id": 324133448,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674846242
    },
    {
        "content": "<p>it will be a double negative if you say <code>if h : not (x &gt; 1)</code> but I assume that isn't a major issue</p>",
        "id": 324133563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674846271
    },
    {
        "content": "<p>and do control-flow dependent hypotheses arise from anything other than if and match?</p>",
        "id": 324133641,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674846296
    },
    {
        "content": "<p>well function calls can have complicated conditions on them but maybe you are fine with having the user supply the condition</p>",
        "id": 324133814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674846350
    },
    {
        "content": "<p>the lean compiler is basically just <code>if</code>, <code>match</code> and recursive functions, control-flow-wise</p>",
        "id": 324133966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674846397
    },
    {
        "content": "<p>so I think you are covered</p>",
        "id": 324134055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674846427
    },
    {
        "content": "<p>great -- thanks to both of you for the discussion, that was very helpful</p>",
        "id": 324135430,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674846858
    },
    {
        "content": "<p>I'm still curious as to why I was getting these <code>unknown identifier 'x✝'</code> errors in the first place, but I guess that's irrelevant... maybe I was violating hygiene or something</p>",
        "id": 324135565,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674846914
    },
    {
        "content": "<p>do you have an MWE for that?</p>",
        "id": 324135942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674847055
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fact_termination_measure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"fact_termination_proof\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fact_termination_proof</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"k\">have</span> <span class=\"n\">sub_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat.sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span> <span class=\"n\">sub_eq</span> <span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"o\">]</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.gt_of_not_le</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt</span>\n  <span class=\"n\">assumption</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">fact</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fact_termination_measure</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">fact_termination_proof</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 324136060,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674847099
    },
    {
        "content": "<p>I don't have a precise mental model for how the elaborator works and how binding resolution is done, so maybe this isn't supposed to work to begin with</p>",
        "id": 324136164,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674847149
    },
    {
        "content": "<p>you are pattern matching a literal <code>x</code> in your macro definition. The macro model is somewhat similar to rust hygienic macros</p>",
        "id": 324136203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674847168
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fact_termination_proof</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"k\">have</span> <span class=\"n\">sub_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat.sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span> <span class=\"n\">sub_eq</span> <span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"o\">]</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.gt_of_not_le</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt</span>\n  <span class=\"n\">assumption</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 324136220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674847176
    },
    {
        "content": "<p>ah yes of course... thanks!</p>",
        "id": 324136351,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674847209
    }
]