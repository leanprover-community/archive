[
    {
        "content": "<p>Hi! I was wondering if Lean 4 stores anywhere the name of the theorem currently being proved? That is, say that we have a simple theorem <code>X</code> defined as <code>theorem X (a b c : Nat) : a + b + c = a + c + b := by</code>, which is then followed by a proof for it. Somewhere inside the proof, do we still have some ways to get the name of the theorem we are proving, in this case <code>X</code> from the Lean environment?</p>\n<p>To make it more clear, Is there some ways that we can build a, say, tactic named <code>extract_theorem_name</code>, so that when it is used as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ThisTheorem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n       <span class=\"n\">extract_theorem_name</span>\n       <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>We can see a message in the InfoView displaying <code>ThisTheorem</code>? <br>\nThough it does not need to be that mature -- in fact I was just wondering if this information of \"theorem name\" is actually stored anywhere as we prove the theorem :) Thanks!</p>",
        "id": 406867020,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1702084943
    },
    {
        "content": "<p>I think you’re looking for <code>decl_name%</code> (a term, not a tactic), which elaborates to the name of the currently-elaborating declaration! :) You can look at its code to get an idea of where it gets this if you want to emulate it in metaprogramming.</p>",
        "id": 406867623,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702085296
    },
    {
        "content": "<p>Is it also the <code>userName</code> of the first <code>LocalDecl</code> stored in the <code>LocalContext</code>?</p>",
        "id": 406876608,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702090871
    },
    {
        "content": "<p>I'm not sure if that's part of the API or if that implementation-detail local decl is an implementation detail.</p>",
        "id": 406876957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702091064
    },
    {
        "content": "<p>I never even thought that it could be an implementation detail!</p>\n<p>I thought that it being there had to do with <code>nonrec</code> not being present, though I'm not sure if that declaration persists in <code>nonrec theorem</code>s...</p>",
        "id": 406877901,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702091747
    },
    {
        "content": "<p>Looks like it is indeed gone when we use <code>nonrec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"print_decls\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">decls.toArray.map</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decl.userName</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Name.anonymous</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{names}\"</span>\n\n<span class=\"n\">nonrec</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">print_decls</span> <span class=\"c1\">-- []</span>\n</code></pre></div>",
        "id": 406878258,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702091997
    },
    {
        "content": "<p>Thanks for checking Thomas!  So if we can find where is the name stored for <code>nonrec theorem</code>s we should be done!</p>",
        "id": 406878562,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702092202
    },
    {
        "content": "<p><code>decl_name%</code> still works! :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nonrec</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">decl_name</span><span class=\"bp\">%</span>\n</code></pre></div>",
        "id": 406878641,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702092248
    },
    {
        "content": "<p>(Behind the scenes apparently this is essentially simply <code>Lean.Elab.Term.getDeclName? : TermElabM (Option Name)</code>.)</p>",
        "id": 406878853,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702092383
    },
    {
        "content": "<p>Maybe the tactic could simply be a macro around <code>decl_name%</code> then?  What is the <code>decl_name%</code> of an <code>example</code>? <code>.anonymous</code>?</p>\n<p>(I'm on mobile, I'd test myself otherwise!)</p>",
        "id": 406879038,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702092526
    },
    {
        "content": "<p>Turns out it's the internal name <code> `_example</code>!</p>",
        "id": 406879270,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702092684
    },
    {
        "content": "<p>Ah, same as what you would get with your <code>print_decls</code>.</p>",
        "id": 406879850,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702093110
    },
    {
        "content": "<p>The logging tactic could simply be e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"log_decl_name\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getDeclName</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>(or an error if you don't find one, but I'm not sure when you wouldn't.)</p>",
        "id": 406880221,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702093373
    },
    {
        "content": "<p>Or maybe <code>.getD . anonymous </code>, to avoid panicking?</p>",
        "id": 406880378,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702093488
    },
    {
        "content": "<p><del><code>get!</code> doesn't panic but merely uses the <code>Inhabited</code> instance of the type in question, which I think is indeed <code>.anonymous</code>! :)</del> Oops, yes it does, panics just aren't passed through on web.</p>",
        "id": 406880524,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702093582
    },
    {
        "content": "<p>I find panic very fickle.  I would like panic to work every time, not just once per session.</p>",
        "id": 406880648,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702093682
    },
    {
        "content": "<p>For me, it makes debugging something with panic very tedious, and using them unreliable.</p>",
        "id": 406880738,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702093735
    },
    {
        "content": "<p>It seems like VS code requires that I close the previous panic notification before it sends me a new one for some reason...</p>",
        "id": 406880788,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702093784
    },
    {
        "content": "<p>I'll try again, but I think that I do not just have to close the notification, but also restart the server.</p>",
        "id": 406880888,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702093835
    },
    {
        "content": "<p>But this difference may suggest that maybe it is a setting that I can change.</p>",
        "id": 406880919,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702093866
    },
    {
        "content": "<p>Interesting! I could also imagine it being platform-dependent or something.</p>",
        "id": 406880935,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702093889
    },
    {
        "content": "<p>Possibly, I'm on Linux.</p>",
        "id": 406880985,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702093914
    },
    {
        "content": "<p>Thank you so much for your help!! The \"display theorem name\" feature indeed works perfectly :)</p>",
        "id": 406882286,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1702094618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/Extract.20the.20name.20of.20the.20theorem.20currently.20being.20proved/near/406880788\">said</a>:</p>\n<blockquote>\n<p>It seems like VS code requires that I close the previous panic notification before it sends me a new one for some reason...</p>\n</blockquote>\n<p>They show up in the output area at least:</p>\n<p><a href=\"/user_uploads/3121/4rRiCc1FpQGghIYTKB_N0lrf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4rRiCc1FpQGghIYTKB_N0lrf/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4rRiCc1FpQGghIYTKB_N0lrf/image.png\"></a></div>",
        "id": 406882528,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702094717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"601076\">Peiyang Song</span> has marked this topic as resolved.</p>",
        "id": 406901688,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702105916
    }
]