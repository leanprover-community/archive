[
    {
        "content": "<p>Is there a way to pretty print <code>let (a,b) := ...</code> ? It gets de-sugared into a match statement which are a bit hard to read when the expression gets a bit more complicated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">b</span>\n</code></pre></div>\n<p>The output is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 344959679,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679948112
    },
    {
        "content": "<p>Here is my attempt, but it does not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n   <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n   <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[app_unexpander bar.match_1]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandMatch</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">motive</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"n\">xy</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">xy</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 344966495,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679950634
    },
    {
        "content": "<p>Not only does it print ugly, it proves ugly too! I don't know how let binding hypotheses work, but it would be great if single case match expressions were treated specially so that e.g. <code>let (a,b) := (0,1)</code> would introduce <code>(a,b) = (0,1)</code> to the context</p>",
        "id": 345301592,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680070267
    },
    {
        "content": "<p>that's not a thing though</p>",
        "id": 345304991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680071494
    },
    {
        "content": "<p>or rather, if you want an equality then that's not what <code>let</code> does</p>",
        "id": 345305113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680071526
    },
    {
        "content": "<p>The <code>set</code> tactic will introduce an equality hypothesis like this</p>",
        "id": 345305315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680071604
    },
    {
        "content": "<p>you can also use <code>(r)cases</code> for this</p>",
        "id": 345305371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680071630
    },
    {
        "content": "<p>I don't want to de-rail Tomas's question too much, but here is an example where I would want better pretty-printing and better proofing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">div_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hd</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">hd</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.ge_of_not_lt</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">div_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"o\">(</span><span class=\"n\">res.1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">res.2</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.div_mod_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hd</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">div_mod</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">r</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongInductionOn</span> <span class=\"n\">generalizing</span> <span class=\"n\">q</span> <span class=\"n\">r</span>\n  <span class=\"n\">case</span> <span class=\"n\">ind</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">div_mod</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">next</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">next</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hd</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">hd</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.ge_of_not_lt</span> <span class=\"n\">hn</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">hres</span> <span class=\"o\">:</span> <span class=\"n\">div_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"n\">hres</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_mul</span><span class=\"o\">,</span>\n        <span class=\"n\">Nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n        <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n        <span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span>\n        <span class=\"n\">Nat.sub_add_cancel</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.ge_of_not_lt</span> <span class=\"n\">hn</span>\n</code></pre></div>\n<p>In particular, I'd want to write <code>let (q,r) := div_mod (n-d) d hd</code> in the function instead of having to assign the product to an intermediate value.</p>",
        "id": 345305698,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680071750
    },
    {
        "content": "<p>oh wait this is a bad example because the proof still works with that <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 345305881,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680071796
    },
    {
        "content": "<p>you can still see the finagling I have to do with <code>generalize</code></p>",
        "id": 345305940,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680071814
    },
    {
        "content": "<p>an alternative to the <code>generalize</code> and the three lines after it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">revert</span> <span class=\"n\">h</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hres</span> <span class=\"o\">:</span> <span class=\"n\">div_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"n\">hres</span>\n</code></pre></div>",
        "id": 345306763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680072113
    },
    {
        "content": "<p>alternatively, you don't even need the cases in this example since</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works</p>",
        "id": 345307028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680072208
    },
    {
        "content": "<p>Yeah, I think the most readable way to do this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">match</span> <span class=\"n\">hres</span> <span class=\"o\">:</span> <span class=\"n\">div_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">q'</span><span class=\"o\">,</span><span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hres</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"n\">hres</span>\n</code></pre></div>\n<p>but that is still quite a bit of finagling for something that (IMO) should just work</p>",
        "id": 345307504,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680072391
    },
    {
        "content": "<p>You can also just use another <code>split at h</code>, it pretty much does what you asked for<br>\n<span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20printing.20.60let.20.28a.2Cb.29.20.3A.3D.20.60/near/345301592\">said</a>:</p>\n<blockquote>\n<p><code>let (a,b) := (0,1)</code> would introduce <code>(a,b) = (0,1)</code> to the context</p>\n</blockquote>",
        "id": 345326097,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680078028
    },
    {
        "content": "<p>That destructuring <code>let</code> requires <em>some</em> sort of case split in the proof unless it is computed away seems quite reasonable to me</p>",
        "id": 345326360,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680078102
    },
    {
        "content": "<p>ah, you're totally right. match in hypothesis ==&gt; split.</p>\n<p>that might be an argument against delaborating it to a destructuring let.</p>",
        "id": 345328632,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680078661
    },
    {
        "content": "<p>though... on the other hand, perhaps it <em>should</em> be specially delaborated, and there should be a new tactic to perform <code>split at &lt;hyp&gt;; case _ &lt;vars&gt; _ =&gt;</code>, since I imagine that is often what you want to do.</p>",
        "id": 345330644,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680079041
    },
    {
        "content": "<p>(where the new var names are copied from the vars bound in the destructuring let)</p>",
        "id": 345330833,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680079081
    },
    {
        "content": "<p>Well that would be unhygienic</p>",
        "id": 345331100,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680079131
    },
    {
        "content": "<p>fair enough. I guess if I had to explain it to a first-year I'd tell them that destructuring lets <em>are</em> just doing a match, and that's why <code>split</code> works on both matches and <code>let</code>s.....</p>",
        "id": 345332341,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680079389
    }
]