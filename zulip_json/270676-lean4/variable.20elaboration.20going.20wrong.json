[
    {
        "content": "<p>Is the following trap already documented?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Bar</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- Uncomment the next line to get an error on line 4</span>\n<span class=\"c1\">-- #check Bar</span>\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 348648700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681287246
    },
    {
        "content": "<p>Another manifestation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- this is redundant but fine, we defined foo = 1</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\">-- oops</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 348654508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681288839
    },
    {
        "content": "<p>Let me clarify for casual readers that Eric's example isn't a soundness issue. It's simply a confusing example where we inadvertently give Lean a contradictory set of assumptions to work with.</p>",
        "id": 348656849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681289444
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover/lean4/issues/1876\">https://github.com/leanprover/lean4/issues/1876</a></p>",
        "id": 348657963,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681289739
    },
    {
        "content": "<p>Did I complain about <code>variable</code> before?</p>",
        "id": 348658000,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681289749
    },
    {
        "content": "<p>Just to summarize what's going on with this trap, the way <code>variables</code> works is that it does a check and then saves the <em>syntax</em> of the binders. Then each command after that re-elaborates all the saved binder syntax each time.</p>",
        "id": 348696310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681298667
    },
    {
        "content": "<p>Changes to what's in scope can break it (like here) but also changes to available instances, macros, or elaborators can as well.</p>",
        "id": 348696970,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681298854
    }
]