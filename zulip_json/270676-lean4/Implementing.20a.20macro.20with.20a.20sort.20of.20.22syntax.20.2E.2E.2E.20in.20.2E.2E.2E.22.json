[
    {
        "content": "<p>Hi all, so I am trying to design macro <code>with_binop</code> that would expand something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">with_binop</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">comp</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">comp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Right now I am implementing the macro with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Parser.Command</span> <span class=\"n\">Parser.Term</span> <span class=\"k\">in</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"with_binop \"</span> <span class=\"n\">Parser.strLit</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"s2\">\" ( \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" ) \"</span> <span class=\"s2\">\" in \"</span> <span class=\"n\">command</span>\n  <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">with_binop</span> <span class=\"bp\">$</span><span class=\"n\">op</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">fname</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ftype</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">section</span><span class=\"o\">)</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">fname</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ftype</span><span class=\"o\">))</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">fname</span><span class=\"o\">)</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">cmd</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This isn't working, and I think the main issue that the <code>command</code> after <code>\"in\"</code> is parsed before the macro is expanded, so it doesn't yet recognize <code>•</code> as a token. Is there a way to defer parsing the command until the macro is expanded? Or is there a better way to achieve similar behavior?</p>",
        "id": 342653609,
        "sender_full_name": "carson storm",
        "timestamp": 1679082633
    },
    {
        "content": "<p>I'm not sure if it works, but you could try having the with_binop syntax not take the command instead having it expand to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n <span class=\"kd\">variable</span> <span class=\"bp\">...</span>\n <span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">...</span>\n <span class=\"n\">with_binop_cmd</span>\n</code></pre></div>\n<p>Where with_binop_cmd is another macro that consumes a single command and puts an <code>end</code> after it.</p>",
        "id": 342660788,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1679085405
    },
    {
        "content": "<p>So, sort of chaining the macros? Any idea how to write an elaboration rule in this case, since <code>with_binop</code> would be in a sense producing macro instead of a command.</p>",
        "id": 342663520,
        "sender_full_name": "carson storm",
        "timestamp": 1679086394
    },
    {
        "content": "<p>Hmm, I think it would have to be a macro (i.e., a rewrite rule), I don't think it would work as a command elaborator</p>",
        "id": 342668595,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1679088795
    },
    {
        "content": "<p>Ok, no, that won't work; the syntax anti-quotation doesn't accept <code>with_binop_cmd</code> as-is, you need to supply it with a command.<br>\nOne workaround could be to rely on the user to write the sections manually, rather than trying to scope the <code>with_binop</code> to a single command</p>",
        "id": 342670985,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1679090019
    }
]