[
    {
        "content": "<p>I have to <code>killall lean</code> sometimes (e.g., to make sure that a running lean doesn't break <code>lake exe cache get</code>). Recently (today or yesterday), Lean started to show this warning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">waiting</span> <span class=\"n\">for</span> <span class=\"n\">prior</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">build</span><span class=\"bp\">`</span> <span class=\"n\">invocation</span> <span class=\"n\">to</span> <span class=\"n\">finish...</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"bp\">'./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lake.lock'</span> <span class=\"k\">if</span> <span class=\"n\">stuck</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have 2 suggestion:</p>\n<ul>\n<li>add a <code>TERM</code> signal handler that deletes this lock file;</li>\n<li>if there is no process with the number recorded in this file, then delete it.</li>\n</ul>",
        "id": 385561077,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1692230521
    },
    {
        "content": "<p>The second suggestion assumes that nobody tries to run <code>lake</code> on 2 computers that mount the same directory via some network filesystem.</p>",
        "id": 385561213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1692230561
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 385579714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692239194
    },
    {
        "content": "<p>These would be both lovely, I am deleting <code>lake.lock</code> about 20 times a day, mostly after <code>ctrl-c</code> on a build.</p>",
        "id": 385580676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692239541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  Thanks for the feedback! Sadly, it is my understanding that both of these suggestions would require new platform-sensitive Lean primitives. Thus, deciding how, when, and whether to implement this will require some discussion internally.</p>",
        "id": 385580947,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692239652
    },
    {
        "content": "<p>Here's a new one <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">996</span><span class=\"bp\">/</span><span class=\"mi\">997</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.GroupTheory.Sylow</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lake.lock</span>\n</code></pre></div>\n<p>I can create an issue if you'd like!</p>",
        "id": 385655928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692272414
    },
    {
        "content": "<p>This just happened <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/5891616768/job/15979054541#step:7:3362\">in CI</a></p>",
        "id": 385697919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692285686
    },
    {
        "content": "<p>It looks like this error is caused by Lake being unable to delete the lock file, implying that something deleted it between its initial locking and the end of the build.</p>",
        "id": 385709793,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692289018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> / <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 385710174,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692289148
    },
    {
        "content": "<p>I should definitely make Lake not care if the lockfile is there to delete, but it is still weird that this would happen, so I am curious what caused the lock file to disappear.</p>",
        "id": 385710291,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692289190
    },
    {
        "content": "<p>The usual solution is to just issue an info? That won't block but it can still be tracked if necessary.</p>",
        "id": 385723171,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692294033
    },
    {
        "content": "<p>I also saw it on CI today, when a build was cancelled during <code>lake build</code> (because of a new push to that PR), and then the “upload cache” job is stuck due to the stale lock file.<br>\n(e.g. <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/5895203319/job/15990444490?pr=6643\">https://github.com/leanprover-community/mathlib4/actions/runs/5895203319/job/15990444490?pr=6643</a>)<br>\nI’m not sure if the intention was to upload such partial cancelled builds to the cache.</p>",
        "id": 385745293,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692303746
    },
    {
        "content": "<p>Yes, we definitely want to upload partial cancelled builds.</p>",
        "id": 385762126,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692311081
    },
    {
        "content": "<p>It looks like in this case the github action doesn’t  show the “waiting for lockfile” message (maybe because GHA timed out the job), but I saw it while watching that job’s output</p>",
        "id": 385881658,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692354695
    },
    {
        "content": "<p>Does this also prevent one from editing files while building or is it just me?</p>",
        "id": 385980010,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692388615
    },
    {
        "content": "<p>no I don't think it does, although you could potentially be stuck editing without lean</p>",
        "id": 385980085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692388652
    },
    {
        "content": "<p>Sorry, I should have said \"editing files with the language server\"</p>",
        "id": 385980154,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692388680
    },
    {
        "content": "<p>the language server will block waiting for a <code>lake build</code> to work, so if you open a new file during that time you won't get any infos</p>",
        "id": 385980291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692388721
    },
    {
        "content": "<p>Previously, I would see some dependencies rebuilt but would be able to edit normally once that finished while having a global <code>lake build</code> call going</p>",
        "id": 385980412,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692388774
    },
    {
        "content": "<p>I don't actually know whether lake takes the lock eagerly or only when it realizes it needs to write something</p>",
        "id": 385980602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692388838
    },
    {
        "content": "<p>Now, the infoview <del>warns</del> tells me about <code>lake.lock</code> until <code>lake build</code> finishes</p>",
        "id": 385980650,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692388866
    },
    {
        "content": "<p>certainly it would be good to allow that use case, i.e. if you start a <code>lake build</code> of mathlib, see <code>X.lean</code> finishes building, and then open <code>X.lean</code> while the overall build is still ongoing</p>",
        "id": 385980764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692388918
    },
    {
        "content": "<p>For example, if you break stuff with a new toolchain and have lots to build and fix</p>",
        "id": 385980863,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692388957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20lock.20file/near/385980602\">said</a>:</p>\n<blockquote>\n<p>I don't actually know whether lake takes the lock eagerly or only when it realizes it needs to write something</p>\n</blockquote>\n<p>It takes the lock eagerly. Doing the later would be very difficult due to how the build system works (i.e., each build would have to independently request the lock if it determines it needs building and would require an atomic cross-task lock on getting the lock, which would introduce quite some overhead).</p>",
        "id": 385993857,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692395756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20lock.20file/near/385980764\">said</a>:</p>\n<blockquote>\n<p>certainly it would be good to allow that use case, i.e. if you start a <code>lake build</code> of mathlib, see <code>X.lean</code> finishes building, and then open <code>X.lean</code> while the overall build is still ongoing</p>\n</blockquote>\n<p>I have been frequently encountering this over the last few days. To make it worse, the current solution when faced with this problem is to <code>ctrl-c</code> the global build that is happening in a terminal, but then you still need to <code>rm build/lake.lock</code> by hand before the editor window will take over the build.</p>",
        "id": 386020648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692408221
    },
    {
        "content": "<p>Yep, this is part of the trade off of having a general lock file. While it prevents Lake processes from stepping on each other toes (which was a previous source of concern), it also prevents them from stepping on each others toes when you want them to (which is the new source of concerns).</p>",
        "id": 386024485,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692409734
    },
    {
        "content": "<p>is it possible for the processes to 'release' their file locks before exiting?</p>",
        "id": 386053743,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692426695
    }
]