[
    {
        "content": "<p>How to see what exactly the tactics elaborate to? Similar to how <code>library_search</code> will print the exact proof.</p>",
        "id": 340173309,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678211336
    },
    {
        "content": "<p>You can use <code>#check</code> to see its type (\"interface\").</p>",
        "id": 340173622,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1678211418
    },
    {
        "content": "<p>You can use <code>#print</code> to see the proof term (often not human readable).</p>",
        "id": 340173711,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1678211437
    },
    {
        "content": "<p>In lean3 we have <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show_term\">tactic#show_term</a> but I don‚Äôt know if this has been ported to lean4 yet‚Ä¶</p>",
        "id": 340174730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678211730
    },
    {
        "content": "<p>It has</p>",
        "id": 340175310,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678211882
    },
    {
        "content": "<p>I think...Hmm maybe not</p>",
        "id": 340175375,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678211891
    },
    {
        "content": "<p>What is this thing <code>‚àÄ (i : Nat), i = i</code></p>",
        "id": 340175421,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678211902
    },
    {
        "content": "<p>It is of type <code>Prop</code>. What does it do?</p>",
        "id": 340175464,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678211916
    },
    {
        "content": "<p>It has been ported in <code>Std.Tactic.ShowTerm</code>.</p>",
        "id": 340176100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678212070
    },
    {
        "content": "<p>I remembered using it but then <code>show_term</code> didn't register in the docs4 search</p>",
        "id": 340176265,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678212117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> has marked this topic as resolved.</p>",
        "id": 340176505,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678212174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvo≈ô√°k</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20how.20to.20see.20elaborated.20proof/near/340173711\">said</a>:</p>\n<blockquote>\n<p>You can use <code>#print</code> to see the proof term (often not human readable).</p>\n</blockquote>\n<p>this works. Although I had to do<code>#print term.proof_1</code> to print \"sub\"-proof</p>",
        "id": 340176535,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678212184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20how.20to.20see.20elaborated.20proof/near/340175421\">said</a>:</p>\n<blockquote>\n<p>What is this thing <code>‚àÄ (i : Nat), i = i</code></p>\n</blockquote>\n<p>It is just a \"pretty printed\" version of <code>(i : Nat) -&gt; i = i</code>. If a dependent function type is a <code>Prop</code>, it gets printed in this fancy way. Semantically it is exactly the same.</p>",
        "id": 340315155,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1678270106
    }
]