[
    {
        "content": "<p>RFC Proposal for vscode extension: <br>\n<strong>Current Behaviour</strong> <br>\nCurrently the <a href=\"https://github.com/leanprover/vscode-lean4/blob/master/docs/bootstrapping.md\">bootstrapping procedure</a> kicks in when a lean file is opened, and if no toolchain is found, the installation of lean can be triggered. Thus the install process asks users to open a lean file to trigger installation by calling <code>showInstallOptions</code>. This is also what <a href=\"https://lean-lang.org/lean4/doc/quickstart.html\">lean docs suggest</a><br>\n<strong>The Problem</strong> <br>\n For at least <a href=\"#narrow/stream/113489-new-members/topic/Installation.20on.20windows.20using.20VS.20Code\">some windows users</a> the step asking them to creating a new file creates a <code>.txt</code> file <br>\n by default which is not read as a lean file. Further, and more importantly,  mathematical users and teachers would prefer that their students <a href=\"#narrow/stream/113489-new-members/topic/Installation.20on.20windows.20using.20VS.20Code/near/394867419\">don't open individual files</a> in the first place. They would prefer students and new users directly open a project. However, the standard way to start a new project is though<code>lake new</code>, which requires the toolchain to be installed i.e. a <span aria-label=\"chicken\" class=\"emoji emoji-1f414\" role=\"img\" title=\"chicken\">:chicken:</span> and <span aria-label=\"egg\" class=\"emoji emoji-1f95a\" role=\"img\" title=\"egg\">:egg:</span> problem. Other ways could be to download/clone and open an existing project i.e. more CLI use, which is again anathema for math classes. </p>\n<p><strong>Possible Solution</strong><br>\nProvide a vscode <code>command</code> called <code>Check Lean Toolchain</code> that also triggers <code>showInstallOptions</code> as required</p>",
        "id": 394890231,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696442028
    },
    {
        "content": "<p>Bonus: If this command is easily accessible, it would be nice. For an example from latex workshop, see the screenshot<br>\n<a href=\"/user_uploads/3121/2EO5dM2Mbt6IxZwPXkMbMZU9/example_lean_suggestion.png\">example_lean_suggestion.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2EO5dM2Mbt6IxZwPXkMbMZU9/example_lean_suggestion.png\" title=\"example_lean_suggestion.png\"><img src=\"/user_uploads/3121/2EO5dM2Mbt6IxZwPXkMbMZU9/example_lean_suggestion.png\"></a></div>",
        "id": 394890972,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696442365
    },
    {
        "content": "<p>If accepted, I am happy to make the github issue and implement the command at the very minimum</p>",
        "id": 394891380,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696442506
    },
    {
        "content": "<p>I will wait for comments from the extension developers</p>",
        "id": 394901788,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696446708
    },
    {
        "content": "<p>Maybe this isn't directly related, in which case feel free to ignore, but just on:</p>\n<blockquote>\n<p>mathematical users and teachers would prefer that their students don't open individual files in the first place</p>\n</blockquote>\n<p>Has someone given another recent look as to what's required to remove that limitation in VSCode? I remember I looked myself at one point and got stuck trying to figure out VSCode's APIs, but maybe it's worth another look, particularly from someone who's more familiar with them?</p>",
        "id": 394902488,
        "sender_full_name": "Julian Berman",
        "timestamp": 1696446980
    },
    {
        "content": "<p>In the next version of the extension, there will be a step-by-step walkthrough that opens as soon as you install the extension and has step with a button you can click to install Elan using a command. It also provides links to books and buttons to initialize and open projects in a way that doesn't even let you open wrong folders.<br>\nHere's a screenshot:<br>\n<a href=\"/user_uploads/3121/_XodXbVOa7e2wM0m-2AOHZJv/image.png\">image.png</a><br>\nIs that sufficient to cover this use-case?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_XodXbVOa7e2wM0m-2AOHZJv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_XodXbVOa7e2wM0m-2AOHZJv/image.png\"></a></div>",
        "id": 394902542,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696447004
    },
    {
        "content": "<p>Perhaps also worth mentioning is that the walkthrough is platform specific, so MacOS and Windows users get the right instructions.</p>",
        "id": 394902604,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696447034
    },
    {
        "content": "<p>Does \"set up lean 4 project\" give you a sub-question \"do you want to use Lean's maths library with your project? [hint: if you want to do maths then answer \"yes\"]\"?</p>",
        "id": 394903097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696447245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394902488\">said</a>:</p>\n<blockquote>\n<p>Maybe this isn't directly related, in which case feel free to ignore, but just on:</p>\n<blockquote>\n<p>mathematical users and teachers would prefer that their students don't open individual files in the first place</p>\n</blockquote>\n<p>Has someone given another recent look as to what's required to remove that limitation in VSCode? I remember I looked myself at one point and got stuck trying to figure out VSCode's APIs, but maybe it's worth another look, particularly from someone who's more familiar with them?</p>\n</blockquote>\n<p>I believe the main reason is that folks wanted to prevent the extension from activating and doing stuff when the file is not a Lean 4 file, as people do use VS Code for other things. You can do away with this though and the next version of the extension will provide a number of commands (e.g. installing elan, opening projects, etc.) even when no Lean 4 file is active. There's also a setting to disable this in case you find the Lean 4 menu always being shown in the top right annoying.</p>",
        "id": 394903627,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696447465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394903097\">said</a>:</p>\n<blockquote>\n<p>Does \"set up lean 4 project\" give you a sub-question \"do you want to use Lean's maths library with your project? [hint: if you want to do maths then answer \"yes\"]\"?</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/gHLozb_mtTO_G1EvsfOZ0SGd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gHLozb_mtTO_G1EvsfOZ0SGd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/gHLozb_mtTO_G1EvsfOZ0SGd/image.png\"></a></div>",
        "id": 394903896,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696447576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394902488\">said</a>:</p>\n<blockquote>\n<p>Maybe this isn't directly related, in which case feel free to ignore, but just on:</p>\n<blockquote>\n<p>mathematical users and teachers would prefer that their students don't open individual files in the first place</p>\n</blockquote>\n<p>Has someone given another recent look as to what's required to remove that limitation in VSCode? I remember I looked myself at one point and got stuck trying to figure out VSCode's APIs, but maybe it's worth another look, particularly from someone who's more familiar with them?</p>\n</blockquote>\n<p>I didn't know this was a vscode limitation. Vscode works reasonably well with individual files outside a lake project  until you want to add dependencies and import other files. Then it is not clear how (and in what order) one must compile lean files to make the imports work and how to automate this in a way that is not simply reinventing lake.</p>",
        "id": 394904569,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696447910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394902542\">said</a>:</p>\n<blockquote>\n<p>In the next version of the extension, there will be a step-by-step walkthrough that opens as soon as you install the extension and has step with a button you can click to install Elan using a command. It also provides links to books and buttons to initialize and open projects in a way that doesn't even let you open wrong folders.</p>\n</blockquote>\n<p>Will it rollback changes if I take a step back in the walkthrough to do something different?</p>",
        "id": 394905166,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696448190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394904569\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394903627\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394902488\">said</a>:</p>\n<blockquote>\n<p>Maybe this isn't directly related, in which case feel free to ignore, but just on:</p>\n<blockquote>\n<p>mathematical users and teachers would prefer that their students don't open individual files in the first place</p>\n</blockquote>\n<p>Has someone given another recent look as to what's required to remove that limitation in VSCode? I remember I looked myself at one point and got stuck trying to figure out VSCode's APIs, but maybe it's worth another look, particularly from someone who's more familiar with them?</p>\n</blockquote>\n<p>I believe the main reason is that folks wanted to prevent the extension from activating and doing stuff when the file is not a Lean 4 file, as people do use VS Code for other things. You can do away with this though and the next version of the extension will provide a number of commands (e.g. installing elan, opening projects, etc.) even when no Lean 4 file is active. There's also a setting to disable this in case you find the Lean 4 menu always being shown in the top right annoying.</p>\n</blockquote>\n<p>I didn't know this was a vscode limitation. Single files work reasonably well until you want to add dependencies and imports. Then it is not clear how (and in what order) one must compile lean files to make the imports work.</p>\n</blockquote>\n<p>It's not a limitation, but common practice for language specific extensions is that they only activate for the specific language ID that they are handling (so as to not be annoying when working with other languages). Hence, since the extension used to respect this, in order to start bootstrapping you had to open an empty file and tell VS Code that the open file is a Lean 4 file so that the extension then activates.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394905166\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394902542\">said</a>:</p>\n<blockquote>\n<p>In the next version of the extension, there will be a step-by-step walkthrough that opens as soon as you install the extension and has step with a button you can click to install Elan using a command. It also provides links to books and buttons to initialize and open projects in a way that doesn't even let you open wrong folders.</p>\n</blockquote>\n<p>Will it rollback changes if I take a step back in the walkthrough to do something different?</p>\n</blockquote>\n<p>You can always go back in the guide or open it again later (the checkmarks are just a visual feature at this point since VS Code disabled conditions for them a while ago). It's also not really branching. You install the dependencies, you install Elan and then you either create/open/clone a project.</p>",
        "id": 394905596,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696448380
    },
    {
        "content": "<p>BTW, the command I used most in vscode for now is “Restart the lean language server” <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 394905603,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696448384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> : Apologies, I was responding to Julian. I am aware of the way language specific extensions are activated. In fact that's what started this thread.</p>",
        "id": 394905747,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696448434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394903896\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394903097\">said</a>:</p>\n<blockquote>\n<p>Does \"set up lean 4 project\" give you a sub-question \"do you want to use Lean's maths library with your project? [hint: if you want to do maths then answer \"yes\"]\"?</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/gHLozb_mtTO_G1EvsfOZ0SGd/image.png\">image.png</a></p>\n</blockquote>\n<p>The first item is ambiguous. What if you want to build a math library?</p>",
        "id": 394905755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696448436
    },
    {
        "content": "<p>Up to now this never happened, but it could.</p>",
        "id": 394905789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696448455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394905755\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394903896\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394903097\">said</a>:</p>\n<blockquote>\n<p>Does \"set up lean 4 project\" give you a sub-question \"do you want to use Lean's maths library with your project? [hint: if you want to do maths then answer \"yes\"]\"?</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/gHLozb_mtTO_G1EvsfOZ0SGd/image.png\">image.png</a></p>\n</blockquote>\n<p>The first item is ambiguous. What if you want to build a math library?</p>\n</blockquote>\n<p>I'm aware and I still want to simplify this a bit before pushing it out.</p>",
        "id": 394905871,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696448503
    },
    {
        "content": "<p>Great. Thank you <em>very</em> much for your work on this!</p>",
        "id": 394906019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696448571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> : Are you considering a world where mathlib is not the only lean project <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <span aria-label=\"exploding head\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"exploding head\">:exploding_head:</span> Now I have seen everything.</p>\n<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> : To clarify on both my points. I am responding to the aversion to use single lean files  in practice. The paradox I described in the opening message is a result of exactly this.</p>\n<p>As for rollback, here's what I mean: Suppose I create a mathlib project, and then step back to start the project creation stage to create an executable without math, will the process remove mathlib and rewrite lakefile accordingly or will mathlib remain in lake-packages.</p>",
        "id": 394906561,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696448793
    },
    {
        "content": "<blockquote>\n<p>Suppose I create a mathlib project, and then step back to start the project creation stage to create an executable without math, will the process remove mathlib and rewrite lakefile accordingly or will mathlib remain in lake-packages.</p>\n</blockquote>\n<p>No. You can create a new project without math, though.<br>\nIn the distant future I'd also like to provide a GUI editor for simple lakefiles using VS Code's <a href=\"https://code.visualstudio.com/api/extension-guides/custom-editors\">custom editor API</a>, but that will still have to wait for a bit.</p>",
        "id": 394907232,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696449115
    },
    {
        "content": "<p>I am happy to help if you need an extra hand. I do need the update on save feature asap to save my laptop, so I started fiddling with a local copy of the extension already.</p>",
        "id": 394907439,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696449224
    },
    {
        "content": "<blockquote>\n<p>In the distant future I'd also like to provide a GUI editor for simple lakefiles using VS Code's custom editor API, but that will still have to wait for a bit.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> what would be the intended use case of such an editor?</p>",
        "id": 394930774,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696462197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394930774\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>In the distant future I'd also like to provide a GUI editor for simple lakefiles using VS Code's custom editor API, but that will still have to wait for a bit.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> what would be the intended use case of such an editor?</p>\n</blockquote>\n<p>It would retain the declarative nature of Lake configuration while making it easier for beginners to adjust the file without first having to learn how Lake files are structured. Most other IDEs provide GUI editors for common configuration formats, too, much like VS Code provides one for its <code>settings.json</code>.</p>",
        "id": 394974459,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696488098
    },
    {
        "content": "<p>I think the difficulty is that the lakefile is not a configuration format like json, its a script</p>",
        "id": 394983690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696492126
    },
    {
        "content": "<p>I <em>hope</em> the vast majority of projects will have entirely declarative lakefiles. I am still suffering from the trauma of scala build files. It's no fun trying to come to grips with a new project and you can't even read the build file because it's monadic ascii soup.</p>",
        "id": 394983970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696492257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394983690\">said</a>:</p>\n<blockquote>\n<p>I think the difficulty is that the lakefile is not a configuration format like json, its a script</p>\n</blockquote>\n<p>Right, but I expect most simple lakefiles (especially those that beginners are likely to encounter) to be structured regardless.</p>",
        "id": 394985750,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696493006
    },
    {
        "content": "<p>it is difficult to \"optimistically parse\" a format like lean hoping that it is not doing anything fancy though</p>",
        "id": 394993584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696496001
    },
    {
        "content": "<p>meaning that even if they <em>could</em> be expressed declaratively, it is nevertheless the case that they are not</p>",
        "id": 394993736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696496046
    },
    {
        "content": "<p>I think it's likely to be fairly common that beginner lakefiles copy the mathlib4 lakefile (for <code>pp.unicode.fun</code>, <code>pp.proofs.withType=false</code>, and maybe the contentious <code>autoImplicit=false</code>), and such lakefiles are not declarative in the usual sense.</p>",
        "id": 394999062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696497996
    },
    {
        "content": "<p>I'd argue that the <code>lake new math</code> or whatever command should generate a lakefile pre-populated in this way.</p>",
        "id": 394999228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696498067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> I agree that a visual editor for settings files à la VSCode's own Settings panel for <code>settings.json</code> could be helpful for beginners.</p>\n<p>I also believe that keeping lakefiles procedural and then attempting to hide that complexity using a custom UI is a <em>terrible</em>, <em>terrible</em> idea. A more viable path might be to introduce a new <code>lakefile.json</code> (or whatever, as long as it's declarative) format and slowly migrate away from <code>lakefile.lean</code> files, while continuing to support that option for projects that really do need arbitrary build scriptability.</p>",
        "id": 395083773,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696524772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.20Proposal.20for.20vscode.20extension.3A/near/394999062\">said</a>:</p>\n<blockquote>\n<p>I think it's likely to be fairly common that beginner lakefiles copy the mathlib4 lakefile (for <code>pp.unicode.fun</code>, <code>pp.proofs.withType=false</code>, and maybe the contentious <code>autoImplicit=false</code>), and such lakefiles are not declarative in the usual sense.</p>\n</blockquote>\n<p>The current mathlib4 lakefile can totally be phrased declaratively. It mostly just sets compiler/server options and declares some targets. Of course the price you pay for a restricted language is that constructs such as conditionals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">doc</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"on\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- do not download and build doc-gen4 by default</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>are necessarily somewhat more awkward to express (see <a href=\"https://doc.rust-lang.org/cargo/reference/features.html#optional-dependencies\">optional dependencies</a> in Rust's <code>Cargo.toml</code>) but the gain in not having to deal with crazy build scripts (see Scott's point) is significant.</p>",
        "id": 395084640,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696525099
    },
    {
        "content": "<p>Just to be clear, this was a random idea from my list of unrefined ideas and I do not plan on working on it any time soon. I'm not committed to any particular way of working with simple lake configurations, either.</p>",
        "id": 395090004,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696527172
    },
    {
        "content": "<p>Definitely! I wanted to voice this concern in case it does came up as a more concrete plan.</p>",
        "id": 395092830,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696528334
    }
]