[
    {
        "content": "<p>How do you match against the constructors of an <code>abbrev</code>? For example, I would have hoped the following would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"c1\">-- unexpected match type</span>\n</code></pre></div>\n<p>Is there a way to specify that an <code>abbrev</code> should unfold in a pattern match, either at the site of the <code>abbrev</code> declaration or at the site of the match? (Kind of like the inverse of <code>@[match_pattern]</code>?)</p>",
        "id": 339997632,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678150450
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 339997960,
        "sender_full_name": "David Renshaw",
        "timestamp": 1678150586
    },
    {
        "content": "<p>Oh, so it’s just that specific “inlined” syntax that doesn’t work for abbrev’s, I guess.</p>",
        "id": 339998232,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678150732
    },
    {
        "content": "<p>Wait, I think I’m mixing up how the comma syntax is used in matches. (A bit out of sorts today.)</p>",
        "id": 339998620,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678150925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> has marked this topic as resolved.</p>",
        "id": 339999144,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678151225
    },
    {
        "content": "<p>Found same problem in <a href=\"#narrow/stream/270676-lean4/topic/solitaire.20undo\">this topic</a>. <br>\nabbrev expr can't be used as type</p>",
        "id": 350617677,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1681766699
    }
]