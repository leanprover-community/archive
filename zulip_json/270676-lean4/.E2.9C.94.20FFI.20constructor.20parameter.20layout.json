[
    {
        "content": "<p>Hi! I am wondering how the compiler decides which parameters to erase from a constructor. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">is_string</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"k\">match</span> <span class=\"n\">is_string</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>I would expect <code>is_string</code> to be retained since it's not in <code>Prop</code>, but it isn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Hacky way to not have to write a C file</span>\n<span class=\"kd\">@[extern \"lean_ctor_num_objs\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">lean_ctor_num_objs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">UInt32</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">is_string</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello\"</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">lean_ctor_num_objs</span> <span class=\"n\">s</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"ctor_num_objs: {n}\"</span>\n</code></pre></div>\n<p>Outputs <code>ctor_num_objs: 1</code>, I would expect to get 2.</p>",
        "id": 392359946,
        "sender_full_name": "György Kurucz",
        "timestamp": 1695314946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651522\">@György Kurucz</span> All types are also erased.</p>",
        "id": 392370247,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695319075
    },
    {
        "content": "<p>More specifically, any <code>x</code> such that <code>x : Sort u</code> for some <code>u</code> is erased. To quote <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">the Lean Manual</a>:</p>\n<blockquote>\n<p>A universe <code>Sort u</code>, type constructor <code>... → Sort u</code>, or proposition <code>p : Prop</code> is irrelevant and is either statically erased (see above) or represented as a <code>lean_object *</code> with the runtime value <code>lean_box(0)</code>. </p>\n</blockquote>\n<p>The boxing only occurs when the value cannot be erased for some reason.</p>",
        "id": 392371210,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695319362
    },
    {
        "content": "<p>For example, <code>id Type</code> would have to be implemented via call to application of <code>id</code> to <code>lean_box(0)</code>.</p>",
        "id": 392371862,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695319622
    },
    {
        "content": "<p>Yes, that's why I want to go with the above instead of supplying the type directly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S'</span> <span class=\"n\">where</span>\n  <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>so that I can determine the type in C.</p>\n<p>But for some reason my <code>Bool</code> is erased also, which definitely shouldn't be...</p>",
        "id": 392372012,
        "sender_full_name": "György Kurucz",
        "timestamp": 1695319680
    },
    {
        "content": "<p>To demonstrate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"null\"]</span> <span class=\"n\">opaque</span> <span class=\"n\">null</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">null</span> <span class=\"kt\">Type</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[result]</span>\n<span class=\"cm\">def test._closed_1 : obj :=</span>\n<span class=\"cm\">  let x_1 : obj := null ◾;</span>\n<span class=\"cm\">  ret x_1</span>\n<span class=\"cm\">def test : obj :=</span>\n<span class=\"cm\">  let x_1 : obj := test._closed_1;</span>\n<span class=\"cm\">  ret x_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 392372154,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695319729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651522\">György Kurucz</span> <a href=\"#narrow/stream/270676-lean4/topic/FFI.20constructor.20parameter.20erasure/near/392372012\">said</a>:</p>\n<blockquote>\n<p>Yes, that's why I want to go with the above instead of supplying the type directly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S'</span> <span class=\"n\">where</span>\n  <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>so that I can determine the type in C.</p>\n</blockquote>\n<p>It is not possible to determine the type of a Lean object at runtime in C without some additional metadata like your Bool. Types have no distinct runtime representation.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"651522\">György Kurucz</span> <a href=\"#narrow/stream/270676-lean4/topic/FFI.20constructor.20parameter.20erasure/near/392372012\">said</a>:</p>\n<blockquote>\n<p>But for some reason my <code>Bool</code> is erased also, which definitely shouldn't be...</p>\n</blockquote>\n<p>No it does not appear to be? Your <code>ctor_num_objs</code> returned <code>1</code> (which is presumably the Bool). Also, since your <code>S</code> is a single constructor with a single relevant (non-erased) field <code>is_string</code>, I would expect it to be a trivial structure and its representation to just be <code>Bool</code> (i.e., a u8 where 0 = false and 1 = true). See <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">the section</a> of the manual mentioned above for details about trivial structures and the unboxed nature of enums like Bool.</p>",
        "id": 392373352,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695320291
    },
    {
        "content": "<blockquote>\n<p>which is presumably the Bool</p>\n</blockquote>\n<p>No, it's <code>v</code> I am pretty sure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">is_string</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"k\">match</span> <span class=\"n\">is_string</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- Hacky way to not have to write a C file</span>\n<span class=\"kd\">@[extern \"lean_ctor_num_objs\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">lean_ctor_num_objs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">UInt32</span>\n\n<span class=\"kd\">@[extern \"lean_ctor_get\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">lean_ctor_get</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">UInt32</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">is_string</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello\"</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">lean_ctor_num_objs</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">lean_ctor_get</span> <span class=\"n\">s</span> <span class=\"mi\">0</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"ctor_num_objs: {n}, ctor_get(0): {v}\"</span>\n</code></pre></div>\n<p>Prints <code>ctor_num_objs: 1, ctor_get(0): hello</code></p>",
        "id": 392374305,
        "sender_full_name": "György Kurucz",
        "timestamp": 1695320720
    },
    {
        "content": "<blockquote>\n<p><code>set_option trace.compiler.ir.result true</code></p>\n</blockquote>\n<p>Ahh this seems useful, didn't know about it, thanks. (I assume these aren't documented anywhere...)</p>",
        "id": 392374427,
        "sender_full_name": "György Kurucz",
        "timestamp": 1695320766
    },
    {
        "content": "<p>Ahh I think I figured it out, <a href=\"https://github.com/leanprover/lean4/blob/325fab1c1db791101a71610160d1359dced5719e/src/Lean/Compiler/IR/Basic.lean#L170-L172\">this</a> comment helped:</p>\n<blockquote>\n<p>Recall that a Constructor object contains a header, then a sequence of<br>\npointers to other Lean objects, a sequence of <code>USize</code> (i.e., <code>size_t</code>)<br>\nscalar values, and a sequence of other scalar values.</p>\n</blockquote>\n<p>So <code>lean_ctor_num_objs</code> is returning 1 because <code>S</code> has only 1 <strong>object</strong> parameter. Scalar params are packed separately at the end of the object, in this case my <code>Bool</code>. To access my bool, I have to do <code>lean_ctor_get_uint8(s, 1 * sizeof(lean_object *))</code> in C.</p>",
        "id": 392379418,
        "sender_full_name": "György Kurucz",
        "timestamp": 1695322728
    },
    {
        "content": "<p>Ah, yep, that is it. I forgot that <code>v</code> was actually an object and not just a type.</p>",
        "id": 392381132,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695323427
    },
    {
        "content": "<p>Yeah well <code>v</code>s type is a bit confusing. Anyway, thanks! Marking this as resolved.</p>",
        "id": 392381384,
        "sender_full_name": "György Kurucz",
        "timestamp": 1695323543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651522\">György Kurucz</span> has marked this topic as resolved.</p>",
        "id": 392381390,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695323546
    },
    {
        "content": "<p>According to the docs a structure with 1 field is represented at runtime the same as the field's type. But if a field (in a structure with multiple fields) has type <code>structure A where val : UInt32</code> then it will be boxed, while a field of type <code>UInt32</code> is stored unboxed. Is it intended?</p>",
        "id": 392734068,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1695498831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"587706\">@Daniil Kisel</span> That seems like it could be a bug. I suggest filing an issue for it on the lean4 repository.</p>",
        "id": 393118283,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695679162
    }
]