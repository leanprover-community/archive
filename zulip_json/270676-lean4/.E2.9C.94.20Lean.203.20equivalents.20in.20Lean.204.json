[
    {
        "content": "<p>What is the best source of information about Lean 4 for experienced Lean 3 users for a quick lookup? I know about this page:<br>\n<a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a><br>\nHowever, I am searching for something that has more information and less explanations. Ideally a table of Lean 3 keywords/tactics/types and their Lean 4 equivalents. For example, I don't know how the Lean 3 tactic <code>left</code> is called to Lean 4. Where can I look it up?</p>",
        "id": 327115606,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676052542
    },
    {
        "content": "<p>It should be left, but its in mathlib not in core</p>",
        "id": 327116470,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676052828
    },
    {
        "content": "<p>Regarding the general reference I dont think we have one besides that...but it would be cool if we could expand that one I think^^</p>",
        "id": 327116657,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676052873
    },
    {
        "content": "<p>I can start contributing to the page, but I lack both the skill and the patience to write it systematically.</p>",
        "id": 327117252,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676053060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327116470\">said</a>:</p>\n<blockquote>\n<p>It should be left, but its in mathlib not in core</p>\n</blockquote>\n<p>Thanks for the info! Where can I look up what import I need?</p>",
        "id": 327117425,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676053105
    },
    {
        "content": "<p>Yeah that's a pretty good question. Since we haven't really agreed on some format for user provided doc-gen pages yet (kinda my fault /o\\) we can't really have a page for that in doc-gen4 right now.</p>\n<p>I think there are two approaches here. One is to just grep which is a little primitive. The other would be to do an over estimation first. e.g. <code>import Mathlib</code>, then call <code>left</code> in some proof, go to its definition and import that file instead of whole Mathlib?</p>",
        "id": 327119260,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676053647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327116657\">said</a>:</p>\n<blockquote>\n<p>Regarding the general reference I dont think we have one besides that...but it woul dbe cool if we could expand that one I think^^</p>\n</blockquote>\n<p>Also, that page is called \"Significant changes from Lean 3\". It would be weird to aim for writing a comprehensive list there.</p>",
        "id": 327119543,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676053729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327116470\">said</a>:</p>\n<blockquote>\n<p>It should be left, but its in mathlib not in core</p>\n</blockquote>\n<p>It seems I will have to use <code>mathlib4</code> in almost every project. I personally find it a bit inconvenient.</p>",
        "id": 327120530,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676054025
    },
    {
        "content": "<p>Right now that is the state yes. However there is definitely a plan to phase things that are, lets all it usable for a more general audience than mathematicians, such as basic (and of course non basic) data structures and proofs about them and thus possibly also tactics out of mathlib and into std. (in fact maybe left is in std, I dont know from the top of my head) And depending on your standard library is a pretty common thing to do so I'd say that would be fine then right?</p>",
        "id": 327122371,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676054625
    },
    {
        "content": "<p>Yes, sure! I'll be happy when they are in the standard library.</p>",
        "id": 327122830,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676054765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327120530\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327116470\">said</a>:</p>\n<blockquote>\n<p>It should be left, but its in mathlib not in core</p>\n</blockquote>\n<p>It seems I will have to use <code>mathlib4</code> in almost every project. I personally find it a bit inconvenient.</p>\n</blockquote>\n<p>No, you will never <em>have</em> to use mathlib. First you don't have to use Lean at all if it makes you unhappy, and then you can redo everything that is in mathlib if you are so allergic to mathlib.</p>",
        "id": 327126935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676056096
    },
    {
        "content": "<p>In particular, you could probably reimplement <code>left</code> in about the length of an import statement</p>",
        "id": 327127308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676056225
    },
    {
        "content": "<p>I intend to modify the Lean3 docs to include links to the corresponding Lean4 declaration, once someone teaches mathport to output the <code>align</code> data to json</p>",
        "id": 327129425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676056931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327126935\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327120530\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327116470\">said</a>:</p>\n<blockquote>\n<p>It should be left, but its in mathlib not in core</p>\n</blockquote>\n<p>It seems I will have to use <code>mathlib4</code> in almost every project. I personally find it a bit inconvenient.</p>\n</blockquote>\n<p>No, you will never <em>have</em> to use mathlib. First you don't have to use Lean at all if it makes you unhappy, and then you can redo everything that is in mathlib if you are so allergic to mathlib.</p>\n</blockquote>\n<p>The concern here is a valid one from a computer science perspective and not a general disliking against mathlib. While you are right in that he wont have to use mathlib as in someone forces him, I think the concern is about \"have to use mathlib if I want to get anywhere with Lean\" and that is a very valid concern. The approach taken with mathlib is a rather unusual one if you look at open source software. Usually language eco systems (and also prover eco systems like e.g. Coq) tend to be spread out over many small repositories so you only have to pull in the stuff you need to get things done. There are many reasons a computer scientist would want to have their things this way:</p>\n<ul>\n<li>Less compile times</li>\n<li>You dont have to trust as much code</li>\n<li>If your dependencies are smaller it is unlikely you'll be affected by breaking change in some big library with lots of interacting bits and pieces</li>\n</ul>\n<p>etc. On the other hand there are also reasons to do it like mathlib does, we refer to the mathlib approach as a monorepo. The biggest reason for a monorepo is that everything is more integrated so you dont have things like:</p>\n<ul>\n<li>having to update a ton of other repos dependencies because you made some change in some lib</li>\n<li>libraries heavily diverging in approaches and behavior</li>\n</ul>\n<p>normally computer scientists just tend to deal with these things in normal computer science projects but this can be a very annoying thing to mathematics because you are in mathlib to do mathematics and not to maintain big dependency graphs of software projects. So as I understand it this is the reason mathlib is the way it is as opposed to e.g. Coq. </p>\n<p>And in general there is a large amount of people in computer science that just dont like having huge dependency blobs just to get some basic things done that are not at all related to higher mathematics. And for those people (I might add that I include myself in that set :P) we definitely do want to provide ways to write their software and non higher mathematics proofs without having to pull in all of mathlib for the above reasons.</p>",
        "id": 327131495,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676057725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327126935\">said</a>:</p>\n<blockquote>\n<p>No, you will never <em>have</em> to use mathlib. First you don't have to use Lean at all if it makes you unhappy, and then you can redo everything that is in mathlib if you are so allergic to mathlib.</p>\n</blockquote>\n<p>That wasn't meant as an attack. Sorry if it sounded like that. I love mathlib!</p>",
        "id": 327132169,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676058000
    },
    {
        "content": "<p>But isn't that why we have <code>std4</code> now?</p>",
        "id": 327132894,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676058230
    },
    {
        "content": "<p>I know there is <code>std4</code> but I don't know what it contains. I am completely new to Lean 4.</p>",
        "id": 327133069,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676058298
    },
    {
        "content": "<p>I find <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">docs4</a> to be an excellent reference for what is where.</p>",
        "id": 327133474,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676058441
    },
    {
        "content": "<p>Thanks! What I can filter if I want to see tactics but as few other declarations as possible?<br>\n<a href=\"/user_uploads/3121/S6sJyn37qlvdP7I7tGa3NKqm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/S6sJyn37qlvdP7I7tGa3NKqm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/S6sJyn37qlvdP7I7tGa3NKqm/image.png\"></a></div>",
        "id": 327133792,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676058548
    },
    {
        "content": "<p>At least in <code>Mathlib</code>, all the tactics are in the <code>Mathlib.Tactic</code> folder, but I'm not sure that we have a nicer interface for searching those yet.</p>",
        "id": 327133969,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676058604
    },
    {
        "content": "<p>We are still working on porting tactics from Lean 3 to Lean 4, so there will be some missing.</p>",
        "id": 327134089,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676058637
    },
    {
        "content": "<p><code>Std</code> also has a tactic folder though there was talk about refining things</p>",
        "id": 327134115,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676058648
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 327134585,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676058787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 327134609,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676058796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.203.20equivalents.20in.20Lean.204/near/327133792\">said</a>:</p>\n<blockquote>\n<p>Thanks! What I can filter if I want to see tactics but as few other declarations as possible?</p>\n</blockquote>\n<p>In mathlib3 you could do this by looking for things in the <code>tactic.interactive</code> namespace. Is there anything analogous in Lean 4?</p>",
        "id": 327135027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676058945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.203.20equivalents.20in.20Lean.204/near/327135027\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.203.20equivalents.20in.20Lean.204/near/327133792\">said</a>:</p>\n<blockquote>\n<p>Thanks! What I can filter if I want to see tactics but as few other declarations as possible?</p>\n</blockquote>\n<p>In mathlib3 you could do this by looking for things in the <code>tactic.interactive</code> namespace. Is there anything analogous in Lean 4?</p>\n</blockquote>\n<p>The <code>#help</code> command in mathlib4 (<code>import Mathlib.Tactic.HelpCmd</code>) is the nearest equivalent to this. You can use <code>#help tactic</code> to see a list of all the tactics, including user-defined tactics. There is also <code>#help term</code> for term syntaxes, <code>#help command</code> for commands, and <code>#help conv</code> for conv-mode tactics.</p>",
        "id": 327189880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676091935
    },
    {
        "content": "<p>also <code>#help option</code> and <code>#help attr</code></p>",
        "id": 327189987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676092028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.203.20equivalents.20in.20Lean.204/near/327133069\">said</a>:</p>\n<blockquote>\n<p>I know there is <code>std4</code> but I don't know what it contains. I am completely new to Lean 4.</p>\n</blockquote>\n<p>As stated up-thread (and speaking as maintainer of <code>std4</code>), it contains specifically things that are desirable for \"almost any lean project\" without wanting the cost of a mathlib dependency. So this discussion alone is some evidence that <code>left</code> should be in std. (Personally I don't think the name or semantics are great, it is very tailored to two-constructor inductives and it's not clear how you would e.g. select the 3rd constructor of a 7 constuctor inductive using only <code>constructor</code>, <code>left</code> and <code>right</code>.)</p>",
        "id": 327190553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676092664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.203.20equivalents.20in.20Lean.204/near/327126935\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327120530\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.203.20equivalents.20in.20Lean.204/near/327116470\">said</a>:</p>\n<blockquote>\n<p>It should be left, but its in mathlib not in core</p>\n</blockquote>\n<p>It seems I will have to use <code>mathlib4</code> in almost every project. I personally find it a bit inconvenient.</p>\n</blockquote>\n<p>No, you will never <em>have</em> to use mathlib. First you don't have to use Lean at all if it makes you unhappy, and then you can redo everything that is in mathlib if you are so allergic to mathlib.</p>\n</blockquote>\n<p>I want to second Henrik's comments. I am convinced that <code>mathlib4</code> is better managed/developed/maintained as a monolith. But I also dream of an infra that would allow Lean 4 users to use chunks <code>mathlib4</code> (or any other repo?) without downloading the entire thing. Because downloading several thousands of lines of code to use a single theorem is indeed inconvenient.</p>\n<p>I wonder what will happen in the future if we manage to find a way through <a href=\"https://github.com/leanprover/lake/issues/153\">https://github.com/leanprover/lake/issues/153</a>. Or when we have a dedicated host for Lean 4 packages to open new doors for dependency management.</p>",
        "id": 327280811,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1676134282
    },
    {
        "content": "<p>Why is it inconvenient to download lots of extra lines of code if you only want to import a bit of it? I find the converse is true. Nowadays when I install LaTeX onto a new machine I just install some generic <code>latex-everything</code> package, so then I know the LaTeX package I want in the future when I'm on a plane with no internet will be there.</p>",
        "id": 327289727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676138986
    },
    {
        "content": "<p>Let me say it more precisely: it's relatively inconvenient if compared to the possibility of having the option to download a minimal set of pre-compiled binaries enough to make your imports work</p>",
        "id": 327292822,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1676140657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.203.20equivalents.20in.20Lean.204/near/327122830\">said</a>:</p>\n<blockquote>\n<p>Yes, sure! I'll be happy when they are in the standard library.</p>\n</blockquote>\n<p>I changed my mind. Tactics <code>left</code> and <code>right</code> should be in core, not in std4.</p>\n<p>That's just my opinion. Please don't cancel me.</p>",
        "id": 328910631,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676878639
    },
    {
        "content": "<p>Why do you think they should be in core? As I understand it core has what core needs to bootstrap.</p>",
        "id": 328980826,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676899844
    },
    {
        "content": "<p>Core has many frequently useful tactics: all_goals, any_goals, apply, assumption, contradiction, exact, intro, rfl, repeat, rw, simp, specialize, try, unfold. I wish <code>left</code> and <code>right</code> lied alongside these tactics that I can use without writing any <code>import</code> line.</p>\n<p>As I'm saying, it's just my opinion. No argument.</p>",
        "id": 328982107,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676900219
    },
    {
        "content": "<p>Core has a superset of what it needs to boostrap, right?</p>",
        "id": 328982689,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676900373
    },
    {
        "content": "<p>Anything in core is something that is extra work for microsoft, rather than something the community can more easily contribute to</p>",
        "id": 328982807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676900404
    },
    {
        "content": "<p>Important info!</p>",
        "id": 328982949,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676900443
    }
]