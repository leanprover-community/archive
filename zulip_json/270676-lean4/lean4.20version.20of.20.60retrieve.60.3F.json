[
    {
        "content": "<p>Is there one of the following:</p>\n<ol>\n<li>a lean4 version of <code>retrieve</code> which lets me run tactics and change the mvar context, then reset it when I'm done</li>\n<li>a standard workaround for <code>retrieve</code></li>\n<li>a general pattern that achieves the same effect as the following: \"duplicate\" a metavariable with all of its local context, act on the duplicate in <code>TacticM</code>, then extract some info from it and throw the duplicate metavariable away.</li>\n</ol>\n<p>I can do the last one manually via <code>mkFreshExprMVarAt</code> etc., but it seems a bit hacky.</p>\n<p>Ideally I'd like no record of what I did besides the info I extract, so I'm also not sure if there are cache and other \"monad-persistent\" details to worry about. (is <code>saveState</code>/<code>restoreState</code> sufficient to take care of everything?)</p>\n<p>Thanks!</p>",
        "id": 326717856,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675907628
    },
    {
        "content": "<p><code>saveState</code> and <code>restoreState</code> are probably what you want here</p>",
        "id": 326720364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675909921
    },
    {
        "content": "<p>I think there is a function in <code>MonadBacktrack</code> that does the equivalent of <code>retrieve</code> too</p>",
        "id": 326720527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675910011
    },
    {
        "content": "<p>probably you want either <code>withoutModifyingState</code> or <code>observing?</code></p>",
        "id": 326720594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675910045
    },
    {
        "content": "<p>Thanks, <code>withoutModifyingState</code> looks like it's what I need! :)</p>",
        "id": 326747947,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675928840
    }
]