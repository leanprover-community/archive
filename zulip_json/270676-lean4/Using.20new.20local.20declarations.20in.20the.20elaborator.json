[
    {
        "content": "<p>I have the following code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"o\">[]</span>\n<span class=\"n\">withLocalDeclD</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">nat</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">nat</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"s2\">\"{← instantiateMVars e}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>and I get this print out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">HAdd.hAdd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">instHAdd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sorryAx.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Bool.true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sorryAx.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Bool.true</span><span class=\"o\">)</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">CoreM</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'x'</span>\n\n<span class=\"bp\">&lt;</span><span class=\"n\">CoreM</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'x'</span>\n</code></pre></div>\n<p>I was hoping that <code>withLocalDeclD</code> would make the new variable <code>x</code> available in the elaborator but it only elaborates it into <code>sorryAx</code> and then printing the resulting term gives two error messages (they disappear if I remove the <code>println</code>). How can I make <code>x</code> visible during elaboration?</p>",
        "id": 379250564,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1690479581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Here's one way to make it be \"visible\", though it's by making sure to insert <code>x</code> as an expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"o\">[]</span>\n  <span class=\"n\">withLocalDeclD</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">nat</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"bp\">←</span> <span class=\"n\">Term.exprToSyntax</span> <span class=\"n\">x</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x'</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">x'</span><span class=\"o\">))</span> <span class=\"n\">nat</span>\n    <span class=\"c1\">--Term.synthesizeSyntheticMVars -- &lt; optional here</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"{← instantiateMVars e}\"</span>\n</code></pre></div>",
        "id": 379254370,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690480417
    },
    {
        "content": "<p>If you're really going for name capture, then you can adjust the hygiene settings for the quasiquotation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"o\">[]</span>\n  <span class=\"n\">withLocalDeclD</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">nat</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">nat</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"{← instantiateMVars e}\"</span>\n</code></pre></div>",
        "id": 379254720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690480489
    },
    {
        "content": "<p>IMHO the preferred option is to just use the right <code>x</code> as the free variable name:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"o\">[]</span>\n  <span class=\"n\">withLocalDeclD</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">getId</span> <span class=\"n\">nat</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">nat</span>\n    <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 379255837,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690480718
    },
    {
        "content": "<blockquote>\n<p><code>    --Term.synthesizeSyntheticMVars -- &lt; optional here</code></p>\n</blockquote>\n<p>BTW, I've recently learned of <code>withSynthesize</code> which only synthesizes the mvars created in the block.  (As opposed to <code>synthesizeSyntheticMVars</code>, which also tries to synthesize all synthetic mvars from other, previous elaborators.)</p>",
        "id": 379257018,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690480959
    },
    {
        "content": "<p>Thank you both! If I understand correctly, my problem came from the fact that I used <code> `x</code> as the name of my variable but when the elaborator encounters <code>x</code> in the syntax tree, it doesn't look up <code>x</code> but <code> `x._@.Module._hyg.1</code> (for the given hygienic scope). Is this right?</p>",
        "id": 379257634,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1690481097
    },
    {
        "content": "<blockquote>\n<p>BTW, I've recently learned of withSynthesize which only synthesizes the mvars created in the block. (As opposed to synthesizeSyntheticMVars, which also tries to synthesize all synthetic mvars from other, previous elaborators.)</p>\n</blockquote>\n<p>Cool so it's like you separate two elaborators with a <code>withNewMCtxDepth</code> call, is that right?</p>",
        "id": 379258068,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1690481179
    },
    {
        "content": "<p>A bit, yeah.  The <code>withSynthesize</code> combinator resets the list of synthetic mvars at the beginning of the block and then appends them again when it's finished.</p>",
        "id": 379259018,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690481374
    },
    {
        "content": "<p>I think I still have a whole lot to learn about meta variable kinds and I wasn't aware that there was a list of synthetic variables. I assume meta variables get added to it when you call <code>mkFreshExprMVar</code> and otherwise, there's probably no reasons to add anything to it.</p>",
        "id": 379261222,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1690481779
    },
    {
        "content": "<p>Oh, then you're completely confused. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Synthetic metavariables and metavariables are completely different things.  Synthetic metavariables are 1) type class constraints + 2) tactic blocks + 3) postponed term elaborators.  Synthesizing the synthetic metavariables means running TC synthesis, running the tactic blocks, and trying the term elaborators again.</p>",
        "id": 379262980,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690482159
    },
    {
        "content": "<p>It gets added if you do <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.registerSyntheticMVar#doc\">docs#Lean.Elab.Term.registerSyntheticMVar</a></p>",
        "id": 379262994,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690482163
    },
    {
        "content": "<p>Aaah! Thanks! </p>\n<blockquote>\n<p>Synthetic metavariables and metavariables are completely different things.</p>\n</blockquote>\n<p>But they still use <code>Expr.mvar</code> nodes, I assume, don't they? How different is completely different?</p>",
        "id": 379266296,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1690482810
    },
    {
        "content": "<p>My understanding is that a synthetic metavariable is three things together: the <code>Expr.mvar</code> node (and an entry in the metavariable table), an entry in the synthetic metavariables table, and its presence in the pending metavariables list.</p>",
        "id": 379268664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690483243
    },
    {
        "content": "<p>That clears it up, thank you. I should bookmark this answer</p>",
        "id": 379269592,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1690483447
    }
]