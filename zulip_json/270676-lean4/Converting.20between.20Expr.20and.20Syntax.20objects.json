[
    {
        "content": "<p>What is the canonical way to convert from <code>String</code>s to (parsing) <code>Syntax</code> to (elaboration) <code>Expr</code>s and back? I found an old thread about <code>ToExpr</code> which can convert a few types to <code>Expr</code> objects. I think it has something to do with the elaborator.</p>",
        "id": 358871542,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684283711
    },
    {
        "content": "<p>When I looked at the code of lean-gym (from lean 3, <br>\n<a href=\"https://github.com/openai/lean-gym/blob/main/src/util/tactic.lean\">https://github.com/openai/lean-gym/blob/main/src/util/tactic.lean</a>) I see this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse_itactic_reflected</span> <span class=\"o\">(</span><span class=\"n\">tactic_string</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">itactic_string</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{ \"</span> <span class=\"bp\">++</span> <span class=\"n\">tactic_string</span> <span class=\"bp\">++</span>  <span class=\"s2\">\" }\"</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">run_on_input</span> <span class=\"n\">parser.itactic_reflected</span> <span class=\"n\">itactic_string</span><span class=\"o\">,</span>\n<span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">reflected_value.expr</span> <span class=\"n\">r</span>\n\n<span class=\"sd\">/-- Parse an interactive tactic from a string. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse_itactic</span> <span class=\"o\">(</span><span class=\"n\">tactic_string</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">rtac</span> <span class=\"bp\">←</span> <span class=\"n\">parse_itactic_reflected</span> <span class=\"n\">tactic_string</span><span class=\"o\">,</span>\n  <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">rtac</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">tactic_string</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I don't know where is the analogous structure in lean 4. Is there any documentation about the parser that i can read up?</p>",
        "id": 358876590,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684285833
    },
    {
        "content": "<p>For expr and tactic printing there's the <code>PrettyPrinter</code> but I don't know about parsing</p>",
        "id": 358876718,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684285910
    },
    {
        "content": "<ul>\n<li>Strings are parsed into <code>Syntax</code> by the <code>Parser</code> module</li>\n<li><code>Syntax</code> is parsed into <code>Expr</code> by elaboration, e.g. <code>elabTerm</code></li>\n<li><code>Expr</code> is turned back into <code>Syntax</code> by delaboration, i.e. <code>delab</code></li>\n</ul>",
        "id": 358879877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684287924
    },
    {
        "content": "<p>the lean 3 code will not be very helpful, the internals have changed quite significantly</p>",
        "id": 358879948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684287967
    },
    {
        "content": "<p>could you explain more precisely what you want to do? (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>)</p>",
        "id": 358879962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684287986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Converting.20between.20Expr.20and.20Syntax.20objects/near/358879962\">said</a>:</p>\n<blockquote>\n<p>could you explain more precisely what you want to do? (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>)</p>\n</blockquote>\n<p>I want to recreate <code>lean-gym</code> in lean4, and it boils down to 1. creating environments (I know how to do now) 2. running tactics 3. parsing tactics from inputs 4. printing current proof state</p>",
        "id": 358880146,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684288147
    },
    {
        "content": "<p>I think you might find <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a> useful, it is primarily intended as a gym-like environment</p>",
        "id": 358880256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Converting.20between.20Expr.20and.20Syntax.20objects/near/358880256\">said</a>:</p>\n<blockquote>\n<p>I think you might find <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a> useful, it is primarily intended as a gym-like environment</p>\n</blockquote>\n<p>I've read into the code of this and it seem to delegate proof state manipulation and parsing to lean's internals, so I am asking about it here.</p>",
        "id": 358880299,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684288269
    },
    {
        "content": "<p>what about those internals do you want to know?</p>",
        "id": 358880314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288292
    },
    {
        "content": "<p>parsing is done by delegating to lean to do the parsing</p>",
        "id": 358880318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288304
    },
    {
        "content": "<p>that's true in lean 3 as well</p>",
        "id": 358880375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Converting.20between.20Expr.20and.20Syntax.20objects/near/358880314\">said</a>:</p>\n<blockquote>\n<p>what about those internals do you want to know?</p>\n</blockquote>\n<p>I want to know how to parse expressions/tactics from strings into syntax trees, how to elaborate syntaxes into expressions, and how to pretty print expressions back into strings (which I think uses the <code>PrettyPrinter</code>)</p>",
        "id": 358880382,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684288337
    },
    {
        "content": "<p>Isn't that all being done in the repl code?</p>",
        "id": 358880405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288380
    },
    {
        "content": "<p>start from a string -&gt; parse it into a command -&gt; elaborate the command -&gt; print the result</p>",
        "id": 358880429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288404
    },
    {
        "content": "<p>the only difference is that you might want a different syntax category for the parser if you are parsing a tactic instead of a command</p>",
        "id": 358880457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288438
    },
    {
        "content": "<p>Yes, but the REPL doesn't allow me access to the syntax and proof state objects generated by executing the user commands. Do you think it would be a good idea to look into <code>IO.processInput</code> in order to get a whole picture of what Lean is doing under the hood?</p>",
        "id": 358880593,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684288557
    },
    {
        "content": "<p>it does</p>",
        "id": 358880647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288566
    },
    {
        "content": "<p>the syntax is literally manipulated by the program</p>",
        "id": 358880662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288582
    },
    {
        "content": "<p>Actually you might find the ast_export branch a bit more useful: <a href=\"https://github.com/leanprover-community/repl/blob/ast_export/REPL/Main.lean\">https://github.com/leanprover-community/repl/blob/ast_export/REPL/Main.lean</a></p>",
        "id": 358880710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288645
    },
    {
        "content": "<p>the <code>main</code> function here replaces the original top level command loop to collect the AST from every command and then print it out as json</p>",
        "id": 358880728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288681
    },
    {
        "content": "<p>specifically this line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">inputCtx</span> <span class=\"n\">parserState</span> <span class=\"n\">commandState</span>\n</code></pre></div>\n<p>runs the lean frontend and the resulting <code>s.commands</code> contains the AST for every command</p>",
        "id": 358880835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288794
    },
    {
        "content": "<p>This is assuming you are doing parsing \"outside lean\", i.e. you have to run the frontend command loop yourself</p>",
        "id": 358880931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288851
    },
    {
        "content": "<p>if you are \"inside lean\", i.e. writing a command or tactic which when elaborated needs to parse something, it is a bit easier</p>",
        "id": 358880982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684288886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni V. Aniva</span> <a href=\"#narrow/stream/270676-lean4/topic/Converting.20between.20Expr.20and.20Syntax.20objects/near/358880146\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Converting.20between.20Expr.20and.20Syntax.20objects/near/358879962\">said</a>:</p>\n<blockquote>\n<p>could you explain more precisely what you want to do? (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>)</p>\n</blockquote>\n<p>I want to recreate <code>lean-gym</code> in lean4, and it boils down to 1. creating environments (I know how to do now) 2. running tactics 3. parsing tactics from inputs 4. printing current proof state</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"599027\">@Leni V. Aniva</span> There are a few existing implementations of <code>lean-gym</code> in Lean4 that you might find useful: <a href=\"https://github.com/dselsam/lean-gym\">Daniel Selsam's code</a> works for an older version of Lean4, <a href=\"https://github.com/PatrickMassot/lean-gym\">Patrick Massot's code</a> is a more up-to-date version, and <a href=\"https://github.com/0art0/lean4-gym\">my code</a> contains minor modifications for more user-friendly input.</p>",
        "id": 358899755,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1684303361
    }
]