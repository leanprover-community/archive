[
    {
        "content": "<p>I would like to print an expression with its binders removed in a separate list. e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- becomes</span>\n<span class=\"o\">[(</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"n\">Nat</span><span class=\"s2\">\"), (\"</span><span class=\"n\">b</span><span class=\"s2\">\", \"</span><span class=\"n\">Nat</span><span class=\"s2\">\")], \"</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>However the expression itself cannot be printed if the binder is stripped off:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">):</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">binderName</span> <span class=\"n\">binderType</span> <span class=\"n\">body</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"n\">binderName</span>\n    <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.ppExpr</span> <span class=\"n\">binderType</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.ppExpr</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.ppExpr</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This would result in the body's variable <code>a</code> being replaced by <code>#0</code>. How can I add the vairables back into the environment for the pretty printer using some sort of <code>variable</code> keyword here?</p>",
        "id": 360701407,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684910277
    },
    {
        "content": "<p>you should use <code>forallTelescope</code> instead of just pattern matching the expression. This will return a list of fvars which you can query for their types and names, and ppExpr will work in the extended context.</p>",
        "id": 360706169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684911972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20printing.20expression.20without.20its.20binder/near/360706169\">said</a>:</p>\n<blockquote>\n<p>you should use <code>forallTelescope</code> instead of just pattern matching the expression. This will return a list of fvars which you can query for their types and names, and ppExpr will work in the extended context.</p>\n</blockquote>\n<p>How can I get the type of each <code>.fvar</code>?</p>",
        "id": 360708547,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684912761
    },
    {
        "content": "<p>I tried the telescope and it gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.le_of_succ_le</span>\n        <span class=\"o\">{</span> <span class=\"n\">binders</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"s2\">\"_uniq.3\"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"_uniq.4\"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"_uniq.5\"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)],</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"s2\">\"n ≤ m\"</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>where the first field is from the fvar's name and the second field is empty because I couldn't get the type of each fvar</p>",
        "id": 360709040,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684912902
    },
    {
        "content": "<p>what is your code?</p>",
        "id": 360709199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684912946
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">str_to_name</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">s.splitOn</span> <span class=\"s2\">\".\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">Lean.Name.str</span> <span class=\"n\">Lean.Name.anonymous</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">BoundExpression</span> <span class=\"n\">where</span>\n  <span class=\"n\">binders</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">target</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n<span class=\"kd\">def</span> <span class=\"n\">type_expr_to_binder</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">):</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">BoundExpression</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">aux</span> <span class=\"o\">[]</span> <span class=\"n\">expr</span>\n  <span class=\"n\">where</span>\n  <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">prev</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">):</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">BoundExpression</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">binderName</span> <span class=\"n\">binderType</span> <span class=\"n\">body</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">pair</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">binderName</span><span class=\"o\">,</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.ppExpr</span> <span class=\"n\">binderType</span><span class=\"o\">))</span>\n      <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">pair</span><span class=\"o\">::</span><span class=\"n\">prev</span><span class=\"o\">)</span> <span class=\"n\">body</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">binders</span> <span class=\"o\">:=</span> <span class=\"n\">prev.reverse</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.ppExpr</span> <span class=\"n\">expr</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">type_expr_to_binder_2</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">):</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">BoundExpression</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.Meta.forallTelescope</span> <span class=\"n\">expr</span> <span class=\"n\">k</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">k</span> <span class=\"n\">arr</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">binders</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">arr.map</span> <span class=\"n\">ppFVar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">body</span> <span class=\"o\">}</span>\n    <span class=\"n\">ppFVar</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">name.name.toString</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Should not happen</span>\n    <span class=\"n\">pp</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.ppExpr</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">test_case</span> <span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadEnv.getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">str_to_name</span> <span class=\"n\">symbol</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">type</span>\n  <span class=\"k\">let</span> <span class=\"n\">be</span> <span class=\"bp\">←</span> <span class=\"n\">type_expr_to_binder</span> <span class=\"n\">expr</span>\n  <span class=\"k\">let</span> <span class=\"n\">be2</span> <span class=\"bp\">←</span> <span class=\"n\">type_expr_to_binder_2</span> <span class=\"n\">expr</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{symbol}\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">{reprStr be}\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">{reprStr be2}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cases</span> <span class=\"o\">:=</span> <span class=\"o\">[</span> <span class=\"s2\">\"Nat.add_comm\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Nat.le_of_succ_le\"</span> <span class=\"o\">]</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">Lean.Environment</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"Init\"</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">str_to_name</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}))</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreM</span> <span class=\"o\">:=</span> <span class=\"n\">cases.mapM</span> <span class=\"n\">test_case</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run'</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span><span class=\"o\">:</span> <span class=\"n\">Lean.Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">str_to_name</span> <span class=\"s2\">\"Binders\"</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>     <span class=\"c1\">-- No 'open' directives needed</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">coreM.run'</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">toBaseIO</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">exception</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← exception.toMessageData.toString}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span>            <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"Finished\"</span>\n</code></pre></div>",
        "id": 360709250,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684912958
    },
    {
        "content": "<p>you want the <code>userName</code> of the fvar, not the name</p>",
        "id": 360709258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684912962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20printing.20expression.20without.20its.20binder/near/360709258\">said</a>:</p>\n<blockquote>\n<p>you want the <code>userName</code> of the fvar, not the name</p>\n</blockquote>\n<p>where can I get the <code>userName</code>?</p>",
        "id": 360709554,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684913064
    },
    {
        "content": "<p>oh its in the local context</p>",
        "id": 360709679,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684913108
    },
    {
        "content": "<p>Same as the type of an fvar, which is also in the local context.</p>",
        "id": 360709769,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1684913149
    },
    {
        "content": "<p>OT: why are you avoiding <code>open Lean</code>? It makes the code more verbose than it needs to be. I very strongly recommend it when writing lean metaprograms</p>",
        "id": 360709908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684913194
    },
    {
        "content": "<p>there is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.FVarId.getUserName#doc\">docs4#Lean.FVarId.getUserName</a></p>",
        "id": 360710233,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684913308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20printing.20expression.20without.20its.20binder/near/360709908\">said</a>:</p>\n<blockquote>\n<p>OT: why are you avoiding <code>open Lean</code>? It makes the code more verbose than it needs to be. I very strongly recommend it when writing lean metaprograms</p>\n</blockquote>\n<p>yeah I should probably do that because every time I write snippets like this I tend to think there wouldn't be many occurrences of it</p>",
        "id": 360710334,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684913344
    },
    {
        "content": "<p>nope, any lean program longer than about 3 lines is better off with <code>open Lean</code></p>",
        "id": 360710437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684913387
    },
    {
        "content": "<p>here's how I would write that function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"kd\">structure</span> <span class=\"n\">BoundExpression</span> <span class=\"n\">where</span>\n  <span class=\"n\">binders</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">target</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">type_expr_to_binder</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">BoundExpression</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Meta.forallTelescope</span> <span class=\"n\">expr</span> <span class=\"k\">fun</span> <span class=\"n\">arr</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">binders</span> <span class=\"bp\">←</span> <span class=\"n\">arr.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">fvar</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">fvar.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getUserName</span><span class=\"o\">),</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">fvar.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getType</span><span class=\"o\">)))</span>\n    <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 360710621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684913440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20printing.20expression.20without.20its.20binder/near/360710621\">said</a>:</p>\n<blockquote>\n<p>here's how I would write that function:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"kd\">structure</span> <span class=\"n\">BoundExpression</span> <span class=\"n\">where</span>\n  <span class=\"n\">binders</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">target</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">type_expr_to_binder</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">BoundExpression</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Meta.forallTelescope</span> <span class=\"n\">expr</span> <span class=\"k\">fun</span> <span class=\"n\">arr</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">binders</span> <span class=\"bp\">←</span> <span class=\"n\">arr.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">fvar</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">fvar.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getUserName</span><span class=\"o\">),</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">fvar.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getType</span><span class=\"o\">)))</span>\n    <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 360713634,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684914371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni V. Aniva</span> has marked this topic as resolved.</p>",
        "id": 360716538,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684915289
    }
]