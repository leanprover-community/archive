[
    {
        "content": "<p>Weird issue, but ran into it while looking with a friend into whether Lean could work for their use case...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Phase</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span>\n<span class=\"bp\">|</span> <span class=\"n\">three</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">InPhase</span> <span class=\"n\">where</span>\n  <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Phase</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">something</span> <span class=\"o\">[</span><span class=\"n\">InPhase</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">InPhase.p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">two</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">three</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">InPhase</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">something</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">InPhase</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">something</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n  <span class=\"o\">()</span>\n</code></pre></div>\n<p>why is <code>this</code> irreducible even though it is bound at a <code>let</code>?</p>",
        "id": 327599492,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676307851
    },
    {
        "content": "<p>(mainly wondering if that was intentional, and if so why)</p>",
        "id": 327599765,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676307927
    },
    {
        "content": "<p>This is the same issue as <a href=\"#narrow/stream/287929-mathlib4/topic/.60guard_hyp.60.3A.20can't.20guard.20this\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60guard_hyp.60.3A.20can't.20guard.20this</a></p>",
        "id": 327600922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676308244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> has marked this topic as resolved.</p>",
        "id": 327601254,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676308360
    }
]