[
    {
        "content": "<p>Hi,</p>\n<p>I am designing an embedded DSL for writing hardware accelerators in Lean4 with an approach based on <a href=\"https://plv.csail.mit.edu/kami/papers/cav13.pdf\">Fe-Si</a>.</p>\n<p>I need to have an n-ary tuple as a primitive type in my object language like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uint32</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tuple</span>   <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I'm stuck on how to proscribe denotational semantics to the tuple type.</p>\n<p>My approach was to use a heterogenous list as described in this <a href=\"https://leanprover.github.io/lean4/doc/examples/deBruijn.lean.html\">example</a> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">Ty.denote</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span>            <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>            <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uint32</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">UInt32</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tuple</span> <span class=\"n\">tys</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">HList</span> <span class=\"n\">Ty.denote</span> <span class=\"n\">tys</span>\n</code></pre></div>\n<p>However, Lean cannot prove that this function terminates even though it indeed does since <code>HList</code> will only every call <code>denote</code> on the elements of <code>tys</code>.</p>\n<p>I also tried creating a wrapper around the built-in binary product type but cannot figure out how to do so in a way that works with the <code>denote</code> function.</p>\n<p>Thanks for any help in advance!</p>",
        "id": 328902493,
        "sender_full_name": "Paul Mure",
        "timestamp": 1676875102
    },
    {
        "content": "<p>Here is one option. I'm not sure how well this works in practice. In Lean 3 the general wisdom was that it was better to implement nested inductive types yourself, to get better control/visibility of the actual definitions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">Ty.denote</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span>            <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>            <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uint32</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">UInt32</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tuple</span> <span class=\"n\">tys</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">tys</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ty</span> <span class=\"o\">::</span> <span class=\"n\">tys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ty.denote</span> <span class=\"bp\">×</span> <span class=\"n\">go</span> <span class=\"n\">tys</span>\n</code></pre></div>",
        "id": 328904679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676876232
    },
    {
        "content": "<p>\"implementing nested inductive types yourself\" here would mean defining mutual <code>Ty</code>, <code>ListTy</code> types</p>",
        "id": 328909786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676878339
    },
    {
        "content": "<p>Personally I would try to avoid <code>List</code> and instead only support binary products, or encode lists as functions</p>",
        "id": 328909929,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676878384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/N-Ary.20Tuple/near/328909929\">said</a>:</p>\n<blockquote>\n<p>Personally I would try to avoid <code>List</code> and instead only support binary products, or encode lists as functions</p>\n</blockquote>\n<p>The problem with binary products is that accessing an element from an n-ary tuple now can take log(n) steps instead of one step with a flat encoding. While it might be possible to optimize that in a later stage, a first-class support for n-ary tuple would make things easier.</p>",
        "id": 328915018,
        "sender_full_name": "Paul Mure",
        "timestamp": 1676880279
    },
    {
        "content": "<p>Oh I would have guessed that all your data is unboxed/flat, in which case everything is constant time.</p>",
        "id": 328916380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676880723
    },
    {
        "content": "<p>We still want to support nested tuples, so enforcing every tuple to be flat will be suboptimal.</p>",
        "id": 328916633,
        "sender_full_name": "Paul Mure",
        "timestamp": 1676880828
    },
    {
        "content": "<p>You can also consider having an unboxed tuple, and a \"box\".</p>",
        "id": 328916969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676880934
    },
    {
        "content": "<p>Would you mind going into a little more details?</p>",
        "id": 328917371,
        "sender_full_name": "Paul Mure",
        "timestamp": 1676881060
    },
    {
        "content": "<p>Well you already have the unary case of your <code>tuple</code>, which I infer would be implemented as a pointer.</p>",
        "id": 328917746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676881172
    },
    {
        "content": "<p>With that and an unboxed pair you can build all the other cases of your <code>tuple</code>.</p>",
        "id": 328917869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676881207
    },
    {
        "content": "<p>I personally wouldn't build anything serious on top of nested inductive types (<code>List Ty -&gt; Ty</code>) since it is the sort of thing where months later you will discover that it isn't supported very well by whatever you need and it will be too late to change everything.</p>",
        "id": 328918228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676881319
    },
    {
        "content": "<p>Our DSL is meant to be a high-level hardware description language, so there's really no concept of pointers and boxed values as in low-level software.</p>\n<p>But I agree that nested inductive types like these could create other unnecessary headaches down the line. So it seems like binary tuples are the way to go and we will worry about optimizing accesses as a later compiler pass.</p>\n<p>Thanks a lot for your input!</p>",
        "id": 328919305,
        "sender_full_name": "Paul Mure",
        "timestamp": 1676881657
    },
    {
        "content": "<p>(Just to be explicit, I'm assuming from context that you want to use these nested inductive types in a theorem proving setting, e.g., for a verified compiler. If you only need them in a programming setting, then they are totally fine because Lean itself uses them heavily.)</p>",
        "id": 328922547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676882595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/N-Ary.20Tuple/near/328922547\">said</a>:</p>\n<blockquote>\n<p>(Just to be explicit, I'm assuming from context that you want to use these nested inductive types in a theorem proving setting, e.g., for a verified compiler. If you only need them in a programming setting, then they are totally fine because Lean itself uses them heavily.)</p>\n</blockquote>\n<p>Yes, every language construct will be used heavily in a theorem proving context.</p>",
        "id": 329077149,
        "sender_full_name": "Paul Mure",
        "timestamp": 1676932961
    }
]