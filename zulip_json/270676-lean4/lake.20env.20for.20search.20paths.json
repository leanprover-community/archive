[
    {
        "content": "<p>I'm looking for help about getting the search path from the lake env. <br>\nIn a new project made using <code>lake new test</code>, I have the following <code>Main.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">Test</span><span class=\"bp\">»</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.searchPathRef.get</span>\n</code></pre></div>\n<p>Running <code>#eval main</code> in the same file prints a populated search path</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">,</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">,</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">adam</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-05-31/lib/lean, /home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-05-31/lib/lean]</span>\n</code></pre></div>\n<p>And doing <code>lake env lean --run Main.lean</code> in a terminal does the same. However, <code>lake exe test</code> just prints an empty list <code>[]</code>.<br>\nHow would I go about modifying my <code>main</code> function so that <code>lake exe test</code> will print the correct search path?</p>",
        "id": 363357308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685815103
    },
    {
        "content": "<p>there is a function like <code>initSearchPath</code> you need to call</p>",
        "id": 363358830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685815718
    },
    {
        "content": "<p>yes I know but that also takes some list to initialize, right?</p>",
        "id": 363358861,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685815734
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findSysroot</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 363359087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685815815
    },
    {
        "content": "<p>Oh that works.</p>",
        "id": 363359165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685815859
    },
    {
        "content": "<p>Thanks! Could you explain a bit more about why this works, just for my understanding? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.initSearchPath#doc\">docs4#Lean.initSearchPath</a> has two parameters with the second one having an empty search path as the default.</p>",
        "id": 363359283,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685815911
    },
    {
        "content": "<p>that's just add ons to the search path</p>",
        "id": 363359383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685815937
    },
    {
        "content": "<p>you don't have to supply anything there</p>",
        "id": 363359413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685815947
    },
    {
        "content": "<p>Aha, I see. Ok, thanks again.</p>",
        "id": 363359415,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685815949
    },
    {
        "content": "<p>I believe that function takes search data from <code>LEAN_PATH</code> environment variable and puts it in <code>Lean.searchPathRef</code></p>",
        "id": 363359501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685815988
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.addSearchPathFromEnv#doc\">docs4#Lean.addSearchPathFromEnv</a></p>",
        "id": 363359644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685816045
    },
    {
        "content": "<p>so do I understand correctly that <code>lake</code> sets that <code>LEAN_PATH</code> env variable when it's called?</p>",
        "id": 363359777,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685816116
    },
    {
        "content": "<p>There's still something I don't understand. I now have the following <code>Main.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">Test</span><span class=\"bp\">»</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">contents</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"s2\">\"Test.lean\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">contents</span> <span class=\"s2\">\"&lt;input&gt;\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">hdr</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">msgs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">inputCtx</span>\n  <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findSysroot</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.processHeader</span> <span class=\"n\">hdr</span> <span class=\"o\">{}</span> <span class=\"n\">msgs</span> <span class=\"n\">inputCtx</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Found {env.constants.toList.length} constants.\"</span>\n</code></pre></div>\n<p>and <code>Test.lean</code> just has <code>import Lean</code>.</p>\n<p>Using <code>lake exe test</code> shows 0 constants, but <code>#eval main</code> (or <code>lake env lean --run Main.lean</code>) gives <code>Found 166803 constants</code> as expected. What am I doing wrong here? Does <code>processHeader</code> need some additional options?</p>",
        "id": 363371284,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685821092
    },
    {
        "content": "<p>I haven't seen <code>processHeader</code> used for this, usually you use <code>importModules</code> to get the environment</p>",
        "id": 363375841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685823230
    },
    {
        "content": "<p>I think leanink does something like this with <code>processHeader</code></p>",
        "id": 363376312,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685823435
    },
    {
        "content": "<p>oh yes it calls <code>importModules</code></p>",
        "id": 363376433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685823483
    },
    {
        "content": "<p>you are ignoring the returned messages, and that function returns an empty env on errors. Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">msgs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.processHeader</span> <span class=\"n\">hdr</span> <span class=\"o\">{}</span> <span class=\"n\">msgs</span> <span class=\"n\">inputCtx</span>\n  <span class=\"n\">for</span> <span class=\"n\">msg</span> <span class=\"k\">in</span> <span class=\"n\">msgs.msgs</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">msg.toString</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Found {env.constants.toList.length} constants.\"</span>\n</code></pre></div>",
        "id": 363376462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685823503
    },
    {
        "content": "<p>I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">input</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">UInt64.ofNatCore'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore'</span><span class=\"o\">)</span>\n\n<span class=\"n\">Found</span> <span class=\"mi\">0</span> <span class=\"kd\">constants</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 363376528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685823547
    },
    {
        "content": "<p>Thanks. I’ll try it out when I get back to the computer</p>",
        "id": 363376798,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685823710
    },
    {
        "content": "<p>Okay, so printing out the messages does indeed give me exactly what Mario said above:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span><span class=\"nb\">test</span>\n&lt;input&gt;:1:0:<span class=\"w\"> </span>error:<span class=\"w\"> </span>could<span class=\"w\"> </span>not<span class=\"w\"> </span>find<span class=\"w\"> </span>native<span class=\"w\"> </span>implementation<span class=\"w\"> </span>of<span class=\"w\"> </span>external<span class=\"w\"> </span>declaration<span class=\"w\"> </span><span class=\"s1\">'UInt64.ofNatCore'</span><span class=\"w\"> </span><span class=\"o\">(</span>symbols<span class=\"w\"> </span><span class=\"s1\">'l_UInt64_ofNatCore___boxed'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'l_UInt64_ofNatCore'</span><span class=\"o\">)</span>\n\nFound<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>constants.\n</code></pre></div>\n<p>But I still don't understand why this fails but the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>lake<span class=\"w\"> </span>env<span class=\"w\"> </span>lean<span class=\"w\"> </span>--run<span class=\"w\"> </span>Main.lean\nFound<span class=\"w\"> </span><span class=\"m\">166803</span><span class=\"w\"> </span>constants.\n</code></pre></div>",
        "id": 363409928,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685845073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> you need to add <code>supportInterpreter := true</code> as a configuration option to your <code>lean_exe test</code>. This will make Lean symbols (e.g., <code>UInt64.ofNatCore</code>) available to your executable.</p>",
        "id": 363475363,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685877708
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> that indeed worked on my \"test\" project. <br>\nI have now tried this in an actual project, where <code>Test.lean</code> is replaced by <code>Mathlib.lean</code> from <code>mathlib4</code>, and I'm getting another error as one of the messages when trying to process the header:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&lt;input&gt;:1:0:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>package<span class=\"w\"> </span><span class=\"s1\">'Init'</span>\n</code></pre></div>\n<p>with <code>0</code> constants found again. Using <code>lake env lean --run ...</code> works though. Is there another configuration option that I'm missing?</p>\n<p>Edit: Ignore this -- I had a different bug in my code. All is well now. Thanks Mario and Mac!</p>",
        "id": 363502113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685886276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20env.20for.20search.20paths/near/363502113\">said</a>:</p>\n<blockquote>\n<p>I have now tried this in an actual project, where <code>Test.lean</code> is replaced by <code>Mathlib.lean</code> from <code>mathlib4</code></p>\n</blockquote>\n<p>What do you mean? Are importing <code>Mathlib.lean</code> in <code>Test.lean</code> or are you building a mathlib executable?</p>",
        "id": 363768875,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685980058
    }
]