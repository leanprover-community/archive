[
    {
        "content": "<p>I'm failing to work out how to <code>have</code> the correct hypothesis in the following proof so that <code>termination_by</code> works with the lexicographic order.</p>\n<p>Can anyone help me with the <strong>2nd</strong> call to <code>R r</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"k\">if</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">R</span> <span class=\"n\">r</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"n\">R</span> <span class=\"n\">r</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 394764716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696399475
    },
    {
        "content": "<p>Note that the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>incorrectly appears on the <strong>1st</strong> call to <code>R r</code>. I'll track down/create the issue for this in a moment.</p>",
        "id": 394764779,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696399517
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Prod.Lex.right''</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Prod.Lex</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">Prod.Lex.right</span> <span class=\"n\">a₁</span> <span class=\"n\">hb</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"k\">if</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">R</span> <span class=\"n\">r</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.Lex.right''</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">R</span> <span class=\"n\">r</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">assumption</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works, but makes me sad.</p>",
        "id": 394813948,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696416956
    },
    {
        "content": "<p>(both that I needed to define <code>Prod.Lex.right''</code> and that I needed to write a custom <code>decreasing_by</code>)</p>",
        "id": 394814073,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696416995
    },
    {
        "content": "<p>Never mind, I was being silly.</p>",
        "id": 394823029,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696420206
    },
    {
        "content": "<p>The following manual proof worked for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"n\">R'</span> <span class=\"n\">r</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">R'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.lt_or_ge</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h₉</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.left</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₉</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h₈</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.not_lt_of_le</span> <span class=\"n\">h₈</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.right'</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₅</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₅</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 394823984,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696420586
    },
    {
        "content": "<p>It hadn't occurred to me to put all the work in <code>decreasing_by</code>. I think that won't work in my application, but I'll have a think about it, thanks. :-)</p>",
        "id": 394827041,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696421630
    },
    {
        "content": "<p>In any case, the problem seems to be that the type of <code>Prod.Lex.right</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">constructor</span> <span class=\"n\">Prod.Lex.right.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">rb</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"bp\">→</span> <span class=\"n\">Prod.Lex</span> <span class=\"n\">ra</span> <span class=\"n\">rb</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>whereas we intuitively treat it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">constructor</span> <span class=\"n\">Prod.Lex.right1.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span>  <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">a2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">rb</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"bp\">→</span> <span class=\"n\">Prod.Lex</span> <span class=\"n\">ra</span> <span class=\"n\">rb</span> <span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or similar, and Lean cannot reconcile the two.</p>",
        "id": 394827949,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696421939
    },
    {
        "content": "<p>A positional marker in <code>R</code> to distinguish the two calls fixes the error position, but then the required goal is decidedly wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"k\">if</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">R</span> <span class=\"n\">r</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"n\">R</span> <span class=\"n\">r</span> <span class=\"n\">false</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Bool</span>\n<span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>So there can be no <code>have</code> that can close the goal in that branch, since the goal is <code>False</code>.</p>",
        "id": 394882497,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696439113
    }
]