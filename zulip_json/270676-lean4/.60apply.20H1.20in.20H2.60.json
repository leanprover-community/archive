[
    {
        "content": "<p>is there a way to apply a theorem in a hypothesis (for example, if you have <code>A -&gt; B</code> and <code>A</code> in context, and you want <code>B</code>)? The best I can find is <code>have H3 := H2 H1</code> but is there a way to do it so that <code>H1</code> just gets refactored without having to bind a new name?<br>\n[I see <code>exact fun _ =&gt; H2 H1</code> but hoping there's something nicer]</p>",
        "id": 373027795,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688680181
    },
    {
        "content": "<p>mathlib has <code>apply_fun h2 at h1</code></p>",
        "id": 373028772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688680560
    },
    {
        "content": "<p><del>Would you mind linking the docs? i can't seem to find it</del> nvm <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/ApplyFun.html#Mathlib.Tactic.applyFun\">found it</a></p>",
        "id": 373028970,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688680635
    },
    {
        "content": "<p>aah, <code>apply_fun</code> was the Lean 3 name. Sorry for the confusion.</p>",
        "id": 373029336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688680770
    },
    {
        "content": "<p>hm that's not exactly what i want i think. I was talking about <code> A </code> and <code>B</code> as propositions oops</p>",
        "id": 373029885,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688680959
    },
    {
        "content": "<p><code>apply_fun</code> works with propositions just fine (implications are functions in Lean)</p>",
        "id": 373030399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688681138
    },
    {
        "content": "<p>oh that makes sense. Thank you!</p>",
        "id": 373030658,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688681217
    },
    {
        "content": "<p>Does <code>specialize</code> do what you want?</p>",
        "id": 373034854,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688683068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> <code>specialize</code> is for when you have <code>A -&gt; B</code> in context, and given <code>A</code> want to turn it into <code>B</code>. <code>apply_fun</code> is for when you have <code>A</code> in context, and given <code>A -&gt; B</code> want to turn it into <code>B</code>.</p>",
        "id": 373035414,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688683304
    },
    {
        "content": "<p>I guess I'm not sure what 'given' means. They are not both in the context?</p>",
        "id": 373035689,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688683425
    },
    {
        "content": "<p>I suppose I read \"if you have <code>A -&gt; B</code> and <code>A</code> in context\" as saying only <code>A</code> is in context, but it could be both</p>",
        "id": 373035708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688683436
    },
    {
        "content": "<p>Would the other be the goal?</p>",
        "id": 373035788,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688683458
    },
    {
        "content": "<p>(<code>A -&gt; B</code> might be something you could have by a lemma or another construction but not have explicitly as an extra hypothesis in context)</p>",
        "id": 373035831,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688683480
    },
    {
        "content": "<p>I see.</p>",
        "id": 373035874,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688683498
    },
    {
        "content": "<p>i guess as a follow up to this, is there an analogue for rewrites and not application in hypotheses? I've been looking in <code>Mathlib.Tactic</code> but I can't seem to find one (although it's highly likely I just missed it).</p>",
        "id": 374720390,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689189713
    },
    {
        "content": "<p>Is the answer <code>rw [h1] at h2</code>? If not, can you give a formalised example of what you want to do?</p>",
        "id": 374720577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689189761
    },
    {
        "content": "<p>it is in fact rw [h1] at h2. for some reason i thought that didn't work. thanks!</p>",
        "id": 374720823,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689189831
    },
    {
        "content": "<p>as another follow up with respect to <code>applyFun</code> itself, it seems importing <code>Mathlib.Tactic.ApplyFun</code> isn't actually working, and when I try to use <code>applyFun</code> it still gives me an unknown tactic warning. Am I missing something?</p>",
        "id": 374720996,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689189875
    },
    {
        "content": "<p>It's <code>apply_fun</code></p>",
        "id": 374721128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689189912
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/1657aebc9db6d9b77e4a55afe7d5b33e56730bcb/Mathlib/Tactic/ApplyFun.lean#L170\">https://github.com/leanprover-community/mathlib4/blob/1657aebc9db6d9b77e4a55afe7d5b33e56730bcb/Mathlib/Tactic/ApplyFun.lean#L170</a></p>",
        "id": 374721241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689189956
    },
    {
        "content": "<p>hm that was confusing i assumed that was the lean3 name. thanks!</p>",
        "id": 374721506,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689190024
    },
    {
        "content": "<p>Tactic syntax uses snake case, though it's true that the name of the function that implements it is <code>Mathlib.Tactic.applyFun</code>. The documentation attached to that function uses the correct syntax.</p>",
        "id": 374723456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689190544
    },
    {
        "content": "<p>i don't know why i assumed the documentation was just carried over from lean3 and just hadn't been changed</p>",
        "id": 374741272,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689194569
    }
]