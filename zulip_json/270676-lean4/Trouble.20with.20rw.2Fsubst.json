[
    {
        "content": "<p>I have the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo₁</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo₃</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Baz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baz1</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">Foo.foo₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baz2</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">Foo.foo₂</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Bar.deterministic</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar₁</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar₂</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"bp\">=</span> <span class=\"n\">f₃</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₃</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mtr</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">mtr</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">deterministic</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz₁</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz₂</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"bp\">=</span> <span class=\"n\">f₃</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Foo.bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">,</span> <span class=\"n\">Baz</span> <span class=\"n\">f'</span> <span class=\"bp\">×</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f</span> <span class=\"n\">f'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Foo.count</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Foo.bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span>\n  <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar₁</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f₂.count</span> <span class=\"bp\">=</span> <span class=\"n\">f₁.count</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Foo.count</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">baz₁</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f₁.bar</span><span class=\"bp\">ᵣₜ</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">f₃</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">baz₂</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f₂.bar</span><span class=\"bp\">ᵣₜ</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">f₃'</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- this is not important</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar₁'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">fₘ</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">length</span>\n\n      <span class=\"c1\">-- Had the same problem below as I did here, but was able to resolve by reverting</span>\n      <span class=\"n\">revert</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bar.deterministic</span> <span class=\"n\">bar₁</span> <span class=\"n\">bar₁'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">intro</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span>\n\n      <span class=\"c1\">-- If I try the following, I get:</span>\n      <span class=\"c1\">-- ```</span>\n      <span class=\"c1\">-- application type mismatch</span>\n      <span class=\"c1\">--   Barᵣₜ.deterministic barᵣₜ₂ barᵣₜ₂' baz₁</span>\n      <span class=\"c1\">-- argument</span>\n      <span class=\"c1\">--   baz₁</span>\n      <span class=\"c1\">-- has type</span>\n      <span class=\"c1\">--   Baz f₃ : Type</span>\n      <span class=\"c1\">-- but is expected to have type</span>\n      <span class=\"c1\">--   Baz f₃' : Type</span>\n      <span class=\"c1\">-- ```</span>\n      <span class=\"c1\">-- rw [Barᵣₜ.deterministic barᵣₜ₂ barᵣₜ₂' baz₁ baz₂] at *</span>\n\n      <span class=\"c1\">-- Which I don't understand since this works by itself:</span>\n      <span class=\"c1\">-- let eq := Barᵣₜ.deterministic barᵣₜ₂ barᵣₜ₂' baz₁ baz₂</span>\n\n      <span class=\"c1\">-- But if I try to subst `eq`, I get:</span>\n      <span class=\"c1\">-- `failed to create binder due to failure when reverting variable dependencies`</span>\n      <span class=\"c1\">-- subst eq</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have an equality <code>Barᵣₜ.deterministic barᵣₜ₂ barᵣₜ₂' baz₁ baz₂</code> that I want to rewrite with, but can't seem to figure out how to do so. I have some comments above showing what I've tried and what errors I've gotten.</p>",
        "id": 352188222,
        "sender_full_name": "sgcs",
        "timestamp": 1682321830
    },
    {
        "content": "<p>If I put <code>set_option autoImplicit false</code> at the top of your file it indicates an error in the definition of <code>Baz</code>, meaning that your definition of <code>Baz</code> might not say what you think it says (<code>foo₁ ≠ Foo.foo₁</code>, in fact <code>foo₁</code> is just a variable here). Does this help?</p>",
        "id": 352191661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682322745
    },
    {
        "content": "<p>Oh, thank you, I didn't notice that. Unfortunately, that was just a mistake in making the MWE. Changing it to be <code>Foo.foo₁</code> and <code>Foo.foo₂</code> doesn't change the error I'm getting.</p>",
        "id": 352193081,
        "sender_full_name": "sgcs",
        "timestamp": 1682323103
    },
    {
        "content": "<p>Another example where I run into the same problems is (in the context of the above code) is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">Bar.irrelevant</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">bar'</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">bar'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not important</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not important</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- Want to:</span>\n      <span class=\"c1\">-- 1. rewrite using `Bar.deterministic bar bar'`</span>\n      <span class=\"c1\">-- 2. rewrite using `Bar.irrelevant bar bar'`</span>\n      <span class=\"c1\">-- 3. rewrite using `thm barᵣₜ barᵣₜ' baz`</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bar.deterministic</span> <span class=\"n\">bar</span> <span class=\"n\">bar'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bar.irrelevant</span> <span class=\"n\">bar</span> <span class=\"n\">bar'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">thm</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"n\">baz</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>When I try to <code>rw [Bar.deterministic bar bar'] at *</code>, it remove the old hypotheses which makes the following rewrites fail. I get the same <code>failed to create binder due to failure when reverting variable dependencies</code> error if I try to use <code>subst</code> instead.</p>",
        "id": 352205668,
        "sender_full_name": "sgcs",
        "timestamp": 1682326505
    },
    {
        "content": "<p>I'm a bit confused by exactly what you're asking. Can you just post one question? Give an example of a rewrite which you think should work, but which fails, for example. The error you get with <code>rw [Barᵣₜ.deterministic barᵣₜ₂ barᵣₜ₂' baz₁ baz₂] at *</code> seems to be exactly the error one would expect, for example.</p>",
        "id": 352206594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682326717
    },
    {
        "content": "<p>Using <code>cases</code> instead of <code>subst</code> works here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not important</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not important</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Bar.deterministic</span> <span class=\"n\">bar</span> <span class=\"n\">bar'</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Bar.irrelevant</span> <span class=\"n\">bar</span> <span class=\"n\">bar'</span>\n      <span class=\"n\">cases</span> <span class=\"n\">thm</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"n\">baz</span>\n\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 352206909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682326794
    },
    {
        "content": "<p><code>cases</code> is more low-level than <code>subst</code></p>",
        "id": 352206971,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682326804
    },
    {
        "content": "<p>I didn't check to what extent it carried out the full substitution however.</p>",
        "id": 352207130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682326839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20with.20rw.2Fsubst/near/352206909\">said</a>:</p>\n<blockquote>\n<p>Using <code>cases</code> instead of <code>subst</code> works here:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not important</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not important</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Bar.deterministic</span> <span class=\"n\">bar</span> <span class=\"n\">bar'</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Bar.irrelevant</span> <span class=\"n\">bar</span> <span class=\"n\">bar'</span>\n      <span class=\"n\">cases</span> <span class=\"n\">thm</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"n\">baz</span>\n\n      <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! That solves all of the rewrite problems I was having, though I don't understand why <code>rw</code> and <code>subst</code> fail while <code>cases</code> works.</p>",
        "id": 352209329,
        "sender_full_name": "sgcs",
        "timestamp": 1682327376
    },
    {
        "content": "<p>I don't know why <code>subst</code> fails, but <code>rw at *</code> is usually not good for global substitutions. It uses a different algorithm to do the rewrite.</p>",
        "id": 352209824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682327501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20with.20rw.2Fsubst/near/352206594\">said</a>:</p>\n<blockquote>\n<p>I'm a bit confused by exactly what you're asking. Can you just post one question? Give an example of a rewrite which you think should work, but which fails, for example. The error you get with <code>rw [Barᵣₜ.deterministic barᵣₜ₂ barᵣₜ₂' baz₁ baz₂] at *</code> seems to be exactly the error one would expect, for example.</p>\n</blockquote>\n<p>I'm not sure what you mean about the error being expected, at least it doesn't seem obvious to me. Changing it to use <code>cases</code> makes it work which is what I would have expected with <code>rw</code>.</p>",
        "id": 352209882,
        "sender_full_name": "sgcs",
        "timestamp": 1682327520
    },
    {
        "content": "<p>For example, the final code with finished proofs (excluding some other cases that needed additional lemmas outside of the MWE):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo₁</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo₃</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Baz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baz1</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">Foo.foo₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">baz2</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">Foo.foo₂</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Bar.deterministic</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar₁</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar₂</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"bp\">=</span> <span class=\"n\">f₃</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₃</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">mtr</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">mtr</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">deterministic</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz₁</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz₂</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"bp\">=</span> <span class=\"n\">f₃</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Foo.bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">,</span> <span class=\"n\">Baz</span> <span class=\"n\">f'</span> <span class=\"bp\">×</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f</span> <span class=\"n\">f'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Foo.count</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Foo.bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Bar.irrelevant</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">bar'</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">bar'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not important</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not important</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Bar.deterministic</span> <span class=\"n\">bar</span> <span class=\"n\">bar'</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Bar.irrelevant</span> <span class=\"n\">bar</span> <span class=\"n\">bar'</span>\n      <span class=\"n\">cases</span> <span class=\"n\">thm</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ'</span> <span class=\"n\">baz</span>\n      <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span>\n  <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar₁</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f₂.count</span> <span class=\"bp\">=</span> <span class=\"n\">f₁.count</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Foo.count</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">baz₁</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f₁.bar</span><span class=\"bp\">ᵣₜ</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">f₃</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">baz₂</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f₂.bar</span><span class=\"bp\">ᵣₜ</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">f₃'</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- this is not important</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar₁'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">fₘ</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">length</span>\n\n      <span class=\"n\">revert</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bar.deterministic</span> <span class=\"n\">bar₁</span> <span class=\"n\">bar₁'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">intro</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span>\n\n      <span class=\"n\">cases</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">deterministic</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">baz₁</span> <span class=\"n\">baz₂</span>\n      <span class=\"n\">cases</span> <span class=\"n\">thm</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">baz₁</span>\n      <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 352210039,
        "sender_full_name": "sgcs",
        "timestamp": 1682327554
    },
    {
        "content": "<p>I'm not actually able to reproduce that <code>subst</code> fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span>\n  <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar₁</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f₂.count</span> <span class=\"bp\">=</span> <span class=\"n\">f₁.count</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Foo.count</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">baz₁</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f₁.bar</span><span class=\"bp\">ᵣₜ</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">f₃</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">baz₂</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f₂.bar</span><span class=\"bp\">ᵣₜ</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">f₃'</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- this is not important</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar₁'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">fₘ</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">length</span>\n\n      <span class=\"n\">revert</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Bar.deterministic</span> <span class=\"n\">bar₁</span> <span class=\"n\">bar₁'</span>\n      <span class=\"n\">subst</span> <span class=\"n\">this</span>\n      <span class=\"n\">intro</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span>\n\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">deterministic</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">baz₁</span> <span class=\"n\">baz₂</span>\n      <span class=\"n\">subst</span> <span class=\"n\">this</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">thm</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">baz₁</span>\n      <span class=\"n\">subst</span> <span class=\"n\">this</span>\n      <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 352210983,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682327791
    },
    {
        "content": "<p>Really? When I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span>\n  <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bar₁</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f₂.count</span> <span class=\"bp\">=</span> <span class=\"n\">f₁.count</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Foo.count</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">baz₁</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f₁.bar</span><span class=\"bp\">ᵣₜ</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">f₃</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">baz₂</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f₂.bar</span><span class=\"bp\">ᵣₜ</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">f₃'</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- this is not important</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">bar₁'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">fₘ</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">length</span>\n\n      <span class=\"c1\">-- Had the same problem below as I did here, but was able to resolve by reverting</span>\n      <span class=\"n\">revert</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bar.deterministic</span> <span class=\"n\">bar₁</span> <span class=\"n\">bar₁'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">intro</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span>\n\n      <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"n\">Bar</span><span class=\"bp\">ᵣₜ.</span><span class=\"n\">deterministic</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂</span> <span class=\"n\">bar</span><span class=\"bp\">ᵣₜ₂'</span> <span class=\"n\">baz₁</span> <span class=\"n\">baz₂</span>\n      <span class=\"n\">subst</span> <span class=\"n\">eq</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get: <code>failed to create binder due to failure when reverting variable dependencies</code> Let me try yours</p>",
        "id": 352211306,
        "sender_full_name": "sgcs",
        "timestamp": 1682327869
    },
    {
        "content": "<p>But, you're right, yours works. Am I using <code>subst</code> incorrectly?</p>",
        "id": 352211538,
        "sender_full_name": "sgcs",
        "timestamp": 1682327907
    },
    {
        "content": "<p>Yeah, don't use <code>let</code> for propositions, use <code>have</code>.</p>",
        "id": 352211572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682327918
    },
    {
        "content": "<p>Oh, ok, I wasn't aware there was even a difference between using <code>let</code> and <code>have</code> in tactics, I thought they were the same</p>",
        "id": 352211860,
        "sender_full_name": "sgcs",
        "timestamp": 1682327993
    },
    {
        "content": "<p>They general difference between <code>let</code> and <code>have</code> (both inside and outside tactics) is that with <code>let</code> the defined variable is definitionally equal to its value, but with <code>have</code> the defined variable isn't, and it can't be unfolded to its value (it's been forgotten, so to speak).</p>",
        "id": 352212273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682328071
    },
    {
        "content": "<p>With propositions, you don't generally want the value, and many tactics assume any local proofs are created with <code>have</code>, like apparently <code>subst</code>.</p>",
        "id": 352212397,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682328106
    },
    {
        "content": "<p>Maybe <code>subst</code> should detect this and report an error, rather than giving a cryptic second-order error</p>",
        "id": 352212556,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682328136
    },
    {
        "content": "<p>Thanks, that clarifies a lot for me. I think part of the problem is that I've used (or recall doing so) <code>subst</code> successfully with <code>let</code> bindings previously in simpler proofs so wasn't aware that was a problem.</p>",
        "id": 352213201,
        "sender_full_name": "sgcs",
        "timestamp": 1682328257
    }
]