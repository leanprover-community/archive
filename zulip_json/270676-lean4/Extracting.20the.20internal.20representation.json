[
    {
        "content": "<p>How would I go about extracting the internal representation, as represented in the kernel? This is for the purposes of machine learning. The idea is to take a large library, munch all of its files, and obtain the internal representations in a format that can be easily parsed by other tools. Has this been done?</p>\n<p>For example, I was able to write a plugin for Agda that works a bit like its documentation plugin, but produces files with s-expressions instead of HTML. It took me about four days to figure it out. If there is a similar plugin for Lean, one that processes files and outputs them in some other format, that might be a good starting point.</p>",
        "id": 361935627,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685362717
    },
    {
        "content": "<p>I have written a translator from Lean 4 .olean to a plain-text format: <a href=\"https://github.com/Kha/lean4export\">https://github.com/Kha/lean4export</a></p>",
        "id": 361937129,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685363113
    },
    {
        "content": "<p>Also in Lean 3 it was easy to write a lean script to loop over the expressions of all the declarations in the library.  I assume it is equally easy in Lean 4, but I don’t know the magic innovation.  Also, you may be interested in the stream <a class=\"stream\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving\">#Machine Learning for Theorem Proving</a></p>",
        "id": 362045468,
        "sender_full_name": "Jason Rute",
        "timestamp": 1685401736
    },
    {
        "content": "<p>BTW, what's the licensing status of your extension? I am thinking of adapting it so that it outputs s-expressions.</p>",
        "id": 362086414,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685429025
    },
    {
        "content": "<p>One more question if I may: how do I extract the entire content without listing the constants on the command line?</p>",
        "id": 362087072,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685429232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Extracting.20the.20internal.20representation/near/362086414\">said</a>:</p>\n<blockquote>\n<p>BTW, what's the licensing status of your extension? I am thinking of adapting it so that it outputs s-expressions.</p>\n</blockquote>\n<p>It's Apache now</p>",
        "id": 362109174,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685435513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Extracting.20the.20internal.20representation/near/362087072\">said</a>:</p>\n<blockquote>\n<p>One more question if I may: how do I extract the entire content without listing the constants on the command line?</p>\n</blockquote>\n<p>That's what should happen by default if you don't use the <code>--</code></p>",
        "id": 362109263,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685435525
    },
    {
        "content": "<p><a href=\"https://github.com/Kha/lean4export/blob/f1d507ff8c8ba2df2316e78c0186a84c6791305f/Main.lean#L11\">https://github.com/Kha/lean4export/blob/f1d507ff8c8ba2df2316e78c0186a84c6791305f/Main.lean#L11</a></p>",
        "id": 362109418,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685435567
    },
    {
        "content": "<p>Thanks for everything. BTW, you should probably fill in the Copyright info at the end of <code>LICENSE</code> (year and your name).</p>",
        "id": 362195546,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685455677
    },
    {
        "content": "<p>I think that is meant as a template for source-level copyright comments. The GitHub copyright wizard fills in this information for other licenses where it's needed, but not for Apache</p>",
        "id": 362220821,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685460598
    },
    {
        "content": "<p>Sorry for going on with this, but I understand your code correctly (and based on running it), if no constants are given then it will dump all constants of all imports, recursively. What would be a good way of dumping only the constants that are defined in a given module?</p>",
        "id": 362576588,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685568558
    },
    {
        "content": "<p>you can ask what module a constant is in and skip it if it's not the one you want</p>",
        "id": 362581864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685570525
    },
    {
        "content": "<p>unfortunately there is no better way to do it since the constants are in a hashmap so they are not meaningfully indexed by anything other than their name</p>",
        "id": 362581974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685570567
    },
    {
        "content": "<p>I think it would look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">env.getModuleIdx</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"s2\">\"module not found\"</span><span class=\"o\">)</span>\n  <span class=\"n\">M.run</span> <span class=\"n\">env</span> <span class=\"k\">do</span>\n    <span class=\"n\">env.constants.forM</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">c.isInternal</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">env.getModuleIdxFor</span><span class=\"bp\">?</span> <span class=\"n\">c</span> <span class=\"bp\">==</span> <span class=\"n\">target</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">dumpConstant</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 362583083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685570931
    },
    {
        "content": "<p>Is there a way to load a file, rather than to instruct Lean to import a module by name? That would be more useful to me. (And find out which constants were defined in the file.)</p>",
        "id": 362752704,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685625757
    },
    {
        "content": "<p>Even better, can I just load <code>.olean</code> files and extract stuff from them? (Looking at <code>Environment.lean</code> now.)</p>",
        "id": 362753682,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685625920
    },
    {
        "content": "<p>So <code>Environment.ModuleData</code> seems to perfectly fit my bill. Now just need to find out how to load an <code>.olean</code> file...</p>",
        "id": 362754499,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685626056
    },
    {
        "content": "<p>Is <code>Environment.readModuleData</code> the one I want? Let me try.</p>",
        "id": 362754977,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685626139
    },
    {
        "content": "<p>The <code>.olean</code> file contains entries like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IO.println._at.main._spec_1</span>\n<span class=\"n\">IO.println._at.main._spec_1._cstage2</span>\n<span class=\"n\">Nat.foo._cstage1</span>\n<span class=\"n\">Nat.foo</span>\n<span class=\"n\">main</span>\n<span class=\"n\">main._cstage1</span>\n<span class=\"n\">Nat.foo._cstage2</span>\n<span class=\"n\">Array.forInUnsafe.loop._at.main._spec_2</span>\n<span class=\"n\">List.forIn.loop._at.main._spec_3</span>\n<span class=\"n\">main.match_1</span>\n<span class=\"n\">main._cstage2</span>\n<span class=\"n\">main.match_1._cstage1</span>\n<span class=\"n\">Array.forInUnsafe.loop._at.main._spec_2._cstage2</span>\n<span class=\"n\">List.forIn.loop._at.main._spec_3._cstage2</span>\n</code></pre></div>\n<p>Is there a reliable way to tell which ones are \"generated\"? These would be <code>_cstage</code> and <code>_spec</code> stuff. BTW, what are they?</p>",
        "id": 362765804,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685628016
    },
    {
        "content": "<p>Perhaps they have an attribute I can test.</p>",
        "id": 362765936,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685628042
    },
    {
        "content": "<p>They are both entries auto generated while doing code (old) generation iirc.</p>",
        "id": 362766330,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1685628112
    },
    {
        "content": "<p>there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Name.isInternal#doc\">docs4#Lean.Name.isInternal</a></p>",
        "id": 362769840,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685628678
    },
    {
        "content": "<p>Mathlib has a function that uses that along with a few other checks: <a href=\"https://github.com/leanprover-community/mathlib4/blob/01da6a3c22053b87a02f5a4a7d78c10d6cb25160/Mathlib/Lean/Name.lean#L19\">https://github.com/leanprover-community/mathlib4/blob/01da6a3c22053b87a02f5a4a7d78c10d6cb25160/Mathlib/Lean/Name.lean#L19</a></p>",
        "id": 362770934,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685628860
    },
    {
        "content": "<p>Is it possible that an <code>.olean</code> file would contain a cyclic datastructure, so that naive traversal will cycle forever/</p>",
        "id": 362957998,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685692317
    },
    {
        "content": "<p>no, all lean objects are cycle free (this is important for the RC collector to work)</p>",
        "id": 362963799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693771
    },
    {
        "content": "<p>although I'm not exactly sure how <code>IO.Ref</code>s are garbage collected</p>",
        "id": 362963940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693815
    },
    {
        "content": "<p>you would need an <code>unsafe inductive</code> to create a structure that can have references to itself, I think</p>",
        "id": 362964053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693848
    },
    {
        "content": "<p>I use a cyclic data structure in Aesop (involving <code>unsafe</code> and <code>IO.Ref</code>), but it never ends up in any <code>.olean</code>. I'd assume that the serialisation procedure for <code>.olean</code>s doesn't support cyclic data in the first place.</p>",
        "id": 362965697,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1685694208
    },
    {
        "content": "<p>For some reason <code>Mathlib/Order/Copy.olean</code> causes <a href=\"https://github.com/andrejbauer/lean2sexp\">https://github.com/andrejbauer/lean2sexp</a> to allocate 25GB of RAM and just sit around wasting 100% of CPU. So I thought maybe there are cycles, because <code>lean2sexp</code> simply traverses the constants and outputs <code>ConstantInfo</code> as S-expressions. I suppose I'll just have to debug a bit.</p>",
        "id": 362966115,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685694302
    },
    {
        "content": "<p>If I suspect that something is wrong with the internal encoding of <code>proof_8</code> (or something close to that name) in <code>build/lib/Mathlib/Order/Copy.olean</code>, how would I double-check?</p>",
        "id": 363040916,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685710751
    },
    {
        "content": "<p>What kind of problem? if it is something you can see with lean code you are best off using <code>loadModuleData</code> to get at the olean and start hacking around in it with an eval block</p>",
        "id": 363041832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685710913
    },
    {
        "content": "<p>if it is something below that (i.e. in the actual byte representation and encoding) you could try using <a href=\"https://github.com/gebner/oleanparser\">https://github.com/gebner/oleanparser</a>, which is written like a more traditional parser (it does not use anything from <code>Lean</code> directly and could equally well be written in python) and produces some fairly low level output which you could use to debug the binary format</p>",
        "id": 363042633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685711040
    },
    {
        "content": "<p>(BTW, <code>proof_8</code> is not enough to find the theorem in question, as a lot of things have a <code>proof_8</code>. Hopefully that is the last name component in some theorem's full name, which might help to debug this from the perspective of the source that generated it)</p>",
        "id": 363043104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685711121
    },
    {
        "content": "<p>I am getting somewhere. I am converting the content of an <code>olean</code> file to s-expressions (see <a href=\"https://github.com/andrejbauer/lean2sexp\">https://github.com/andrejbauer/lean2sexp</a>). The file <code>build/lib/Mathlib/Order/Copy.olean</code> is 2.1MB in size, but somehow in s-expression form that has everything except applications and lambdas pruned, it becomes 227MB. This seems like an amazingly efficient way of comperssing information in <code>olean</code>. Do <code>olean</code> files contain something other than abstract syntax trees? Are they optimized in some way?</p>",
        "id": 363049159,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685712229
    },
    {
        "content": "<p>And <code>build/lib/Mathlib/Topology/Sheaves/SheafCondition/OpensLeCover.olean</code> is even worse, it outputs 1.3 GB of stuff.</p>",
        "id": 363050608,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685712491
    },
    {
        "content": "<p>Are you dag-sharing?</p>",
        "id": 363050685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685712515
    },
    {
        "content": "<p>because if not this will have massive blowup</p>",
        "id": 363050745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685712527
    },
    {
        "content": "<p>lean expressions are maximally shared in olean files IIRC</p>",
        "id": 363051048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685712587
    },
    {
        "content": "<p>Aha, that would do it. It's just amazing that there would be so much sharing. Where is it coming from? Surely no human produces such dags with bare hands.</p>",
        "id": 363052250,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685712811
    },
    {
        "content": "<p>One common source of sharing is the names</p>",
        "id": 363052486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685712844
    },
    {
        "content": "<p>stuff like namespaces and particular theorem names are repeated many thousands of times in the average lean file</p>",
        "id": 363052667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685712873
    },
    {
        "content": "<p>I think actually interesting term sharing in proofs isn't that common, lean itself sometimes has trouble with it so it's not a particularly good thing to rely on</p>",
        "id": 363053113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685712960
    },
    {
        "content": "<p>I measured the size of the proof trees, counting applications and lambdas only. In <code>build/lib/Mathlib/Order/Copy.olean</code> there is a constant called <code>CompleteLattice.copy.proof_8</code> whose size is 1342037. This is not caused by name sharing, since it contains that many applications and lambdas. And looking around, it looks like the really large ones are always called <code>Foo.bar.proof_X</code>.</p>",
        "id": 363054495,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685713234
    },
    {
        "content": "<p>well the bulk of most proofs will be in definitions named something like that</p>",
        "id": 363055232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685713386
    },
    {
        "content": "<p>so that's not a huge indicator of anything</p>",
        "id": 363055307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685713402
    },
    {
        "content": "<p>But such huge proofs must have been generated by tactics, and moreover, are very likely proofs in <code>Prop</code>, no?<br>\nI mean, who would care about them?</p>",
        "id": 363055678,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685713477
    },
    {
        "content": "<p>I think I can guess why <code>CompleteLattice.copy</code> is big: it's probably instantiating a structure with a deep inheritance hierarchy in one go using a very large structure instance</p>",
        "id": 363055682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685713478
    },
    {
        "content": "<p>So the type-class mechanism might be doing it?</p>",
        "id": 363055852,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685713505
    },
    {
        "content": "<p>not quite</p>",
        "id": 363055901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685713514
    },
    {
        "content": "<p>If there is an identifiable way for me to detect that there are very large proofs that will not be very informative, I am more than happy to throw them away.</p>",
        "id": 363056054,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685713546
    },
    {
        "content": "<p>To demonstrate why this leads to exponential growth or (more accurately) highly shared subterms, let's consider a smaller example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">A.x</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero</span> <span class=\"c1\">-- for a smaller pp.all</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- set_option pp.explicit true</span>\n<span class=\"k\">#print</span> <span class=\"n\">bla</span>\n<span class=\"c1\">-- def bla : B Int :=</span>\n<span class=\"c1\">-- @B.mk Int (@A.mk Int Nat.zero (Nat.succ Nat.zero)) Nat.zero bla.proof_1</span>\n<span class=\"k\">#print</span> <span class=\"n\">bla.proof_1</span>\n<span class=\"c1\">-- def bla.proof_1 : @Eq Nat (@foo Int (@A.mk Int Nat.zero (Nat.succ Nat.zero)))</span>\n<span class=\"c1\">--   (@foo Int (@A.mk Int Nat.zero (Nat.succ Nat.zero))) :=</span>\n<span class=\"c1\">-- @rfl Nat (@foo Int (@A.mk Int Nat.zero (Nat.succ Nat.zero)))</span>\n</code></pre></div>",
        "id": 363057462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685713820
    },
    {
        "content": "<p>What is interesting here is that the type of <code>h</code>, which is filled in by <code>bla.proof_1</code>, is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">Int</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">Int</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>where <code>{ x := Nat.zero, y := Nat.succ Nat.zero }</code> is the first half of the structure just constructed</p>",
        "id": 363057789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685713897
    },
    {
        "content": "<p>in other words, each occurrence of <code>foo</code> (or more generally, any typeclass function) contains the complete record constructed by the structure instance. In practice this happens a lot, because for example groups extend monoids which extend ... which extend <code>Add</code>, which means that when you construct a group it uses the instance it derives for <code>Add</code> from the monoid, and then your instance which builds a group will have a subgoal saying something like <code>(x + y) + z = x + (y + z)</code> where every single <code>+</code> there is actually <code>HAdd.hAdd .... (addOfMonoid { add := bla, add_zero := by simp, zero_add := by horrible proof term })</code></p>",
        "id": 363058761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714112
    },
    {
        "content": "<p>so now you have 6 occurrences of the monoid structure in the group structure, and then to build the ring structure you will reference the group structure 6 times...</p>",
        "id": 363058989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714161
    },
    {
        "content": "<p>rinse and repeat and by the time you get to <code>CompleteLattice</code> which probably has something like 12 parent structures in it things are kind of ridiculous</p>",
        "id": 363059214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714204
    },
    {
        "content": "<p>Is there any way to detect the sharing present in <code>ModuleData</code>? Maybe some sort of physical equality?</p>",
        "id": 363059295,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714222
    },
    {
        "content": "<p>yes, you can use pointer equality if you need to do this from lean</p>",
        "id": 363059414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714248
    },
    {
        "content": "<p>there is an unsafe function for it</p>",
        "id": 363059451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714255
    },
    {
        "content": "<p>you can also compare hashes and make a cache, this is what most expr traversals in lean do</p>",
        "id": 363059571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714280
    },
    {
        "content": "<p>Although, it seems that a saner option would be to elide all this stuff from the output. The output is meant to represent syntax trees to be used for machine learning. I am not sure machines will learn much from implicit arguments that were not given by the user directly.</p>",
        "id": 363059807,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714326
    },
    {
        "content": "<p>yeah, you can just pretty print everything</p>",
        "id": 363059885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714342
    },
    {
        "content": "<p>or leave out implicit arguments from the sexprs which is a kind of basic version of pretty printing</p>",
        "id": 363060002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714368
    },
    {
        "content": "<p>Even if I keep the shared structures, I am just postponing the problem to the next person (who is a machine learner), because they will hit the same problem. Just traversing these structures takes forever.</p>",
        "id": 363060061,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714381
    },
    {
        "content": "<p>Can I tell from <code>olean</code> which implicit arguments were filled by the machine and which ones by the human?</p>",
        "id": 363060255,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714414
    },
    {
        "content": "<p>that information does not exist</p>",
        "id": 363060395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714441
    },
    {
        "content": "<p>you could look at the input syntax I suppose, but it's not really possible to truly know what was machine written</p>",
        "id": 363060567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714477
    },
    {
        "content": "<p>Let me try omitting just <code>instImplicit</code> first. Perhaps that'll help.</p>",
        "id": 363060608,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714487
    },
    {
        "content": "<p>\"Machine written\" is not a well-defined notion, because a user could write a tactic which computes a term <code>T</code> Did the user \"write <code>T</code>\"?</p>",
        "id": 363060851,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714528
    },
    {
        "content": "<p>or even if text is in the lean file, was it created by a code action? (or by mathport, which probably has authorship on 70+% of mathlib4 right now by a strict reading)</p>",
        "id": 363061255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714600
    },
    {
        "content": "<p>the line seems pretty impossible to draw</p>",
        "id": 363061362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714628
    },
    {
        "content": "<p>but then again, isn't that the point of ITP?</p>",
        "id": 363061397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714635
    },
    {
        "content": "<p>In all of Agda that we extracted to s-expressions, there is just one file that is unreasonably large (30MB). There are no, or close to none, type classes in Agda. I wonder what would happen with Coq.</p>",
        "id": 363061423,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714641
    },
    {
        "content": "<p>I think these issues are mostly deficiencies in lean, places where it is generating something dumb and when it shows up on a profile sometimes we try to fix it</p>",
        "id": 363061996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714741
    },
    {
        "content": "<p>But what is one to think of the fact that the \"trivial\" information reconstructed by the type class mechanism in some cases is 99% of the proof?</p>",
        "id": 363062023,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714749
    },
    {
        "content": "<p>type class inference is a hugely expensive part of lean processing (that and defeq checking are the majority of compile time)</p>",
        "id": 363062315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714802
    },
    {
        "content": "<p>Ugh. When staring at <code>Expr.app e1 e2</code> it's actually quite difficult to tell whether <code>e2</code> is an implicit argument.</p>",
        "id": 363062594,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714848
    },
    {
        "content": "<p>from a detached standpoint it all looks pretty crazy, but when you get into the weeds there aren't any obvious fixes - almost all of the typeclass system is actually being used in some way in mathlib in practice</p>",
        "id": 363062940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714907
    },
    {
        "content": "<p>the way to find implicits is to get the type of the function symbol and traverse the pis</p>",
        "id": 363063062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714931
    },
    {
        "content": "<p>are you working in a context where <code>inferType</code> does something useful?</p>",
        "id": 363063161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685714953
    },
    {
        "content": "<p>But the type of the function symbol need not be in normal form.</p>",
        "id": 363063227,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714965
    },
    {
        "content": "<p>I am just loading <code>.olean</code> files, so whatever is in them.</p>",
        "id": 363063357,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685714988
    },
    {
        "content": "<p>I mean can you load them into an environment such that the usual lean functions work</p>",
        "id": 363063558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715020
    },
    {
        "content": "<p>there is a function by the name <code>forallTelescopeReducing</code> which does the normalization</p>",
        "id": 363063814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715070
    },
    {
        "content": "<p>You tell me :-) It's Lean4 and I am loading them in with <code>Lean.readModuleData</code> (and throwing away the compacted region, cause I don't know what that's for).</p>",
        "id": 363063836,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685715075
    },
    {
        "content": "<p>that's for freeing the data, if you discard it then it will live until the end of the program, which is usually fine</p>",
        "id": 363063981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715106
    },
    {
        "content": "<p>In particular, I am not loading the dependencies, so I can't really process anything.</p>",
        "id": 363064009,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685715114
    },
    {
        "content": "<p>yeah that's what I was afraid of</p>",
        "id": 363064120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715129
    },
    {
        "content": "<p>you should probably do that, it is not that expensive</p>",
        "id": 363064195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715144
    },
    {
        "content": "<p>This is machine learning, we should look for a practical solution.</p>",
        "id": 363064203,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685715146
    },
    {
        "content": "<p>I think there is a function which automatically handles all this</p>",
        "id": 363064290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715169
    },
    {
        "content": "<p><code>withImportModules</code></p>",
        "id": 363064494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715214
    },
    {
        "content": "<p>or I guess <code>importModules</code></p>",
        "id": 363064922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715295
    },
    {
        "content": "<p>I could store dag's if I wanted to, my output format allows it.</p>",
        "id": 363065486,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1685715405
    },
    {
        "content": "<p>Is it just me, or do <code>.olean</code> files reference entities by their <em>short</em> names, i.e., one has to rely on <code>import</code> statements to figure out what a given name refers to? Is there some way to get fully qualified names?</p>",
        "id": 364341368,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1686156866
    },
    {
        "content": "<p>I would be very surprised for that to be the case</p>",
        "id": 364345968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686157906
    },
    {
        "content": "<p>(also you mean <code>namespace</code> / <code>open</code>, not <code>import</code>. <code>import</code> changes the set of names in the environment but not the names you can use to refer to them)</p>",
        "id": 364346163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686157945
    },
    {
        "content": "<p>Sorry, false alarm.</p>",
        "id": 364347678,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1686158328
    },
    {
        "content": "<p>Next weirdness: is it possible that the order of entries in <code>.olean</code> is not the same as in <code>.lean</code>, i.e., the definitions get mixed up? (Either that, or I have a bug.)</p>",
        "id": 364347835,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1686158374
    },
    {
        "content": "<p>I'm not even sure they are stored in any order</p>",
        "id": 364347920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686158401
    },
    {
        "content": "<p>isn't it a hashmap?</p>",
        "id": 364348035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686158414
    },
    {
        "content": "<p>According to <code>ModuleData.constants</code>, they are stored in an <code>Array</code>, which sounds sorted to me.</p>",
        "id": 364348082,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1686158431
    },
    {
        "content": "<p>But perhaps the complier mixes them up.</p>",
        "id": 364348178,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1686158460
    },
    {
        "content": "<p>yeah</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"kd\">constants</span>  <span class=\"o\">:=</span> <span class=\"n\">env.constants.foldStage2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">cs</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cs.push</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>\n<p>where <code>env.constants</code> is a hashmap</p>",
        "id": 364348445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686158529
    },
    {
        "content": "<p>that's how the <code>constants : Array ConstantInfo</code> is populated</p>",
        "id": 364348525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686158560
    },
    {
        "content": "<p>agreed that this is a bit odd</p>",
        "id": 364348677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686158605
    }
]