[
    {
        "content": "<p>I'd like to mention RFC <a href=\"https://github.com/leanprover/lean4/pull/2854\">lean4#2854</a> to fix the elaboration issues with <code>^</code> that we experience in mathlib. There is also a PR that implements the changes (<a href=\"https://github.com/leanprover/lean4/pull/2778\">lean4#2778</a>) and with it we can remove the <code>local macro_rules | `($x ^ $y) =&gt; `(HPow.hPow $x $y)</code> workaround that turns off <code>binop%</code> from mathlib.</p>\n<p>This is technically a breaking change, but testing suggests that <code>^</code> for <code>Nat</code> and <code>Float</code> end up elaborating the same as before. The std library does not need any modification.</p>",
        "id": 401254024,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699572979
    },
    {
        "content": "<p>If you have a project that depends on the finer details of how <code>^</code> elaborates, it would be good to hear your input!</p>\n<p>There is a pre-built Lean toolchain if you want to test it out: <code>leanprover/lean4-pr-releases:pr-release-2778</code></p>\n<p>If you are using mathlib, you can try the mathlib branch <code>lean-pr-testing-2778</code>, which also includes a large-scale test of hooking <code>SMul</code> into this elaborator. For a mathlib version bump, we might or might not include this <code>SMul</code> adjustment depending on community input.</p>",
        "id": 401255081,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699573778
    },
    {
        "content": "<p>This is fantastic news!</p>",
        "id": 401259510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699576147
    }
]