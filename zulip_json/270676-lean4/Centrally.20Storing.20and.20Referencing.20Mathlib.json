[
    {
        "content": "<p>This is a topic that came up when the port was in full swing and cache was still new. Mathlib + deps consumes 3.9 GB of space. The result is that disk space fills up very quickly when one is working with many lean projects. At least for me, working with the latest version of Mathlib either doesn't break things or breaks things in a way that are best fixed w.r.t the latest Mathlib. So, even with many projects, I am usually just storing dozens of copies of the same version of Mathlib + deps.  The question is, can we have common dependencies like Mathlib stored centrally on the disk, along with the toolchains for example, and linked to projects? </p>\n<p>The last time I raised this question, the following objections came up:</p>\n<ol>\n<li>Symlinks not working properly on windows. </li>\n<li>Mathlib was changing so fast due to the port that it made sense to download a fresh version for each project.</li>\n<li>Dev time.</li>\n</ol>\n<p>I was wondering if, now that the port is complete, this question might be worth revisiting.</p>",
        "id": 385451168,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692188928
    },
    {
        "content": "<p>2 is true despite the port being over, but at least if all the lean projects are your own it's reasonable to keep them on matching mathlib versions</p>",
        "id": 385451386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692189002
    },
    {
        "content": "<p>True, but even then, if the dependencies are stored centrally and users just have to choose the version of mathlib when they start a project (along with a list of installed versions), users might decide to go with a version they already have.</p>",
        "id": 385452099,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692189225
    },
    {
        "content": "<p>Back during the port, one might miss nice basic theorems or tactics that were ported in the latest version. I am guessing that is not the case to the same extent these days.</p>",
        "id": 385453942,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692189803
    },
    {
        "content": "<p>Whenever I want to start a new project I definitely want today's mathlib; versions of mathlib I have on other projects are irrelevant</p>",
        "id": 385456608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692190628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> :  In my case, it usually doesn't matter whether I am using today's version or last week's. So, given the option, I would opt to save space, since currently ~30 GB out of my 180 (EDIT: typo) odd GB of free space on my linux partition consists of just copies of mathlib.</p>",
        "id": 385461332,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692192158
    },
    {
        "content": "<p>Would it work if one simply created symbolic links to a common place from within <code>lake-packages</code>? I assume that <code>mathlib</code> will not be downloaded again?</p>",
        "id": 385463803,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692192893
    },
    {
        "content": "<p>Maybe some linux expert can create a script to do this, with <code>git</code> to make sure versions match.</p>",
        "id": 385464489,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692193069
    },
    {
        "content": "<p>It would certainly be a quick fix. A proper implementation in lake would be aware of the directories(global/user-level/project-level) that need to be looked into. It would use some default per OS config, or one which can be configured by a CLI like elan. It would compare versions, determine the need to download and cache when necessary, and link them.</p>",
        "id": 385465208,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692193250
    },
    {
        "content": "<p>Semi-ideally, the user-facing changes would be the following: When you enter <code>lake new &lt;project_name&gt; math</code>, you will get a question about Mathlib versions, with a series of numbered options (1. Latest, 2. Version from &lt;date&gt;  3 Version from &lt;date&gt;. .....). The user will be prompted to enter one of these numbers. Everything else will happen internally (including caching). Cabal already does this for haskell. Users get a series of questions when they call <code>cabal init</code>. </p>\n<p>More ideally, all this happens inside the vscode extension with a single lake command, but that is a discussion for another thread.</p>",
        "id": 385471497,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692194911
    },
    {
        "content": "<p>one thing you can do is having mathlib checked out and built anywhere on your system and then use a local path in your projects <code>lakefile</code>.</p>\n<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span>\n<span class=\"bp\">/</span> <span class=\"s2\">\"path\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"to\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"package\"</span>\n</code></pre></div>\n<p>If they are all your own projects that would be an option. In one of our projects we even use an env-variable to decide whether to search the lake-package locally or from git, so that if anybody else downloads it, it would by default download it from git</p>",
        "id": 385502168,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692204355
    },
    {
        "content": "<p>The hope with a good fraction of these projects is that they will eventually be shared with other people.</p>",
        "id": 385520003,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692211589
    },
    {
        "content": "<p>As someone with low disk space, I would also appreciate the ability to use a local build of mathlib (without modifying the lakefile)! Just wanted to voice support for it.</p>",
        "id": 385524629,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1692213151
    },
    {
        "content": "<p>Im just saying there is an option to implement this by saying in the projects lakefile \"if <code>$HOME/.lean/mathlib</code> exists, use it, else require from github\" but of course that imposes other problems like that you have no control about the mathlib version and in particular the <code>lean-toolchain</code> needs to stay in sync.</p>\n<p>I think the fact that we still have no control over a project's toolchain would make it particularly hard for any mechanism working with a centralised mathlib<span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 385539543,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692218903
    },
    {
        "content": "<p>This should not be an issue if we have centralised mathlib. It won't be unlike having multiple lean toolchains. You would have different versions identified by commit IDs (or/and even better, date of the lean-toolchain). The difference from status quo would be that you would have the option of reusing the same mathlib version for multiple projects</p>",
        "id": 385542869,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692220127
    },
    {
        "content": "<p>Of course centrally storing multiple copies comes with its own danger: keeping around old copies that aren't being used anymore, or providing all the necessary tooling to somehow know when old copies can be deleted. You might end up with less disk space if it's not done well!</p>",
        "id": 385553954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692226093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Centrally.20Storing.20and.20Referencing.20Mathlib/near/385553954\">said</a>:</p>\n<blockquote>\n<p>Of course centrally storing multiple copies comes with its own danger: keeping around old copies that aren't being used anymore, or providing all the necessary tooling to somehow know when old copies can be deleted. You might end up with less disk space if it's not done well!</p>\n</blockquote>\n<p>Keeping old versions can be an annoyance of course, but we already have this issue with lean toolchains, which we manage with elan. Further if a deleted toolchain is needed later, it gets installed anyway. Essentially this is a design problem with existing solutions.</p>",
        "id": 385554215,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692226273
    },
    {
        "content": "<p>I am happy to volunteer time for this. I am not certain how long it will take since I will be contributing in my spare time which varies quite a bit these days.</p>",
        "id": 385556125,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692227505
    },
    {
        "content": "<p>You'd need to ask Mario and Mac about what would be helpful.</p>",
        "id": 385556494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692227739
    },
    {
        "content": "<p>I think the first thing is to make sure that lake is okay with a setup that involves moving mathlib out of the lake-packages directory, assuming for now that the maintenance of this global directory is done manually</p>",
        "id": 385556507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692227751
    },
    {
        "content": "<p>I need to get some precious sleep now, before responding to this</p>",
        "id": 385559073,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692229318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think having a per-toolchain <code>lake-packages</code> would be a great idea! However, I personally haven't prioritize it for a few reasons:</p>\n<ul>\n<li>Toolchains versions update frequently enough that the reuse  is not as common as it  would be for a normal package manager. </li>\n<li>It my understanding that the kind of symlink this needs doesn't really exist on Windows, so it linking it into the directory is likely a no-go (but Lake could instead point Lean to the shared copy rather than the workspace's).</li>\n<li>For the reasons above, there did not appear to be much demand for this rather complex feature.</li>\n</ul>",
        "id": 385583154,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692240656
    },
    {
        "content": "<p>I don't think this needs a symlink at all?</p>",
        "id": 385583351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692240736
    },
    {
        "content": "<p>it just needs lake to (be directed to) look in the right place</p>",
        "id": 385583388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692240754
    },
    {
        "content": "<p>I already have an example of this kind of thing in mathport</p>",
        "id": 385583460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692240788
    },
    {
        "content": "<p>True, this does not need a symlink, but the alternative does have the disadvantage of not all remote packages being in <code>lake-packages</code> which may or may not be a concern (i.e., tools cannot do a directory walk to find repositories).</p>",
        "id": 385583478,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692240802
    },
    {
        "content": "<p>the oneshot directory contains a lake project which shares the <code>lake-packages</code> folder with the main project, because having two copies of mathlib in the project would be both a lot of space and also an additional piece of state that can get out of sync</p>",
        "id": 385583603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692240852
    },
    {
        "content": "<p>however it means you have to be careful with <code>lake update</code> because it will make a mess</p>",
        "id": 385583653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692240882
    },
    {
        "content": "<p>I don't think we should be assuming that all dependencies are in <code>ROOT/lake-packages</code>, that's exactly the problem we're trying to fix</p>",
        "id": 385583768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692240954
    },
    {
        "content": "<p>(and is already untrue, right? given that you can provide packages locally with lake)</p>",
        "id": 385584032,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692241059
    },
    {
        "content": "<p>if you make that assumption you are already wrong with the current lake architecture, packages and libs have individual directory paths</p>",
        "id": 385584117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692241089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Centrally.20Storing.20and.20Referencing.20Mathlib/near/385583603\">said</a>:</p>\n<blockquote>\n<p>the oneshot directory contains a lake project which shares the <code>lake-packages</code> folder with the main project, because having two copies of mathlib in the project would be both a lot of space and also an additional piece of state that can get out of sync</p>\n</blockquote>\n<p>why would lake update make a mess?</p>",
        "id": 385661472,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1692274487
    }
]