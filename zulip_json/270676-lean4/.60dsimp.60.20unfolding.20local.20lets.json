[
    {
        "content": "<p>Here's an example with mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory.Limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory.Limits.Types</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory.Limits.Types.FilteredColimit</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory.Category</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SmallCategory</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmallCategory</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">√ó</span> <span class=\"n\">K</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsFiltered</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FinCategory</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">curry.obj</span> <span class=\"n\">F</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">colim</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">colimit.Œπ</span> <span class=\"o\">((</span><span class=\"n\">curry.obj</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">limit.œÄ</span> <span class=\"o\">(</span><span class=\"n\">curry.obj</span> <span class=\"n\">F</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">colim</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k'</span><span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">k'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">j'</span><span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">j'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">j'</span><span class=\"o\">),</span>\n      <span class=\"n\">colimit.Œπ</span> <span class=\"o\">((</span><span class=\"n\">curry.obj</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"n\">k'</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">ùüô</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j'</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n        <span class=\"n\">colimit.Œπ</span> <span class=\"o\">((</span><span class=\"n\">curry.obj</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"n\">k'</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">colimit_eq_iff.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"n\">at</span> <span class=\"n\">w</span>\n  <span class=\"k\">let</span> <span class=\"n\">kf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">j'</span><span class=\"o\">),</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n  <span class=\"k\">let</span> <span class=\"n\">gf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">j'</span><span class=\"o\">),</span> <span class=\"n\">k'</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">kf</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.choose</span>\n  <span class=\"k\">let</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">j'</span><span class=\"o\">),</span> <span class=\"n\">k'</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">kf</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.choose_spec.choose</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span>\n        <span class=\"o\">((</span><span class=\"n\">curry.obj</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">gf</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">ùüô</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j'</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n          <span class=\"o\">((</span><span class=\"n\">curry.obj</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.choose_spec.choose_spec</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">curry_obj_obj_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">q</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">curry_obj_obj_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">q</span>\n  <span class=\"c1\">-- `q` is nice and compact, `gf` and `hf` are all folded up</span>\n  <span class=\"c1\">-- `q : F.map (ùüô j', gf f) (F.map (ùüô j', g j') (y j')) = F.map (ùüô j', hf f) (F.map (f, g j) (y j))`</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">q</span>\n  <span class=\"c1\">-- `gf` and `hf` have leaked out of `q`. Is this expected?</span>\n  <span class=\"c1\">-- `q : q: F.map (ùüô j', Exists.choose (_ : ‚àÉ f_1 g_1, ...`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this leakage expected from <code>dsimp</code>? I found it hard to reproduce BTW</p>",
        "id": 352671008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682474098
    },
    {
        "content": "<p>If you disable one of the letters of the greek alphabet, it looks like it prevents these <code>let</code> bindings from being substituted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dsimp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">at</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 352716266,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682495384
    },
    {
        "content": "<p>In lean 3, to unfold <code>let foo := bar</code> you had to use <code>dsimp [foo]</code>, which also let you unfold only specific <code>let</code>s</p>",
        "id": 352724309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682497339
    },
    {
        "content": "<p>What about <code>letI</code> vs <code>let</code>?</p>",
        "id": 352729696,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682498820
    }
]