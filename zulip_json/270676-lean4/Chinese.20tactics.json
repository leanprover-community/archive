[
    {
        "content": "<p>I am being visited by a Chinese number theorist today (an old friend) and they want to ask me about setting up a Lean course in the maths department at PKU. Am I right in thinking that it would basically be a triviality to translate tactics' names into Chinese by just defining a new tactic (whose name has Chinese characters) and defining it to be equal to the corresponding English-named tactic? I know Patrick did much more than this with French, I guess I'm just checking that there should be no issues with unicode characters in tactic names which could cause problems down the line. I don't know what they're going to ask me about but I imagine that this might come up.</p>",
        "id": 389149062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693907657
    },
    {
        "content": "<p>There is one complication, which is that lean's identifier class is not unicode-safe, it includes latin and greek and some kinds of mathematical text but much less than the unicode XID_Start / XID_Continue classes. For keywords (like tactics) this is fine, but it means that you won't be able to write <code>let 点 := (1, 2)</code></p>",
        "id": 389150176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693907965
    },
    {
        "content": "<p>you can still write such identifiers with <code>let «点» := (1, 2)</code> but this is pretty annoying</p>",
        "id": 389150879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693908145
    },
    {
        "content": "<p>i personally think the lean tactics no need to be translated into Chinese, as most (99.9999%) of coding in China are in English, PKU is one of the finest institution in China so i think you can assume students there are very familiar with English coding. Maybe a course in LEAN only means the teaching language can be Chinese.</p>",
        "id": 389151102,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1693908215
    },
    {
        "content": "<blockquote>\n<p>I don't know what they're going to ask me about but I imagine that this might come up.</p>\n</blockquote>\n<p>I seriously doubt that</p>\n<p>Take your natural number game for an example, perhaps translating the explanation part to Chinese is enough, no need to translate the tactics and theorems, the language itself</p>",
        "id": 389154485,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1693909028
    },
    {
        "content": "<p>Thank you for these comments Yufei! I was just conjecturing what my friend would ask me and it sounds like I was wrong here.</p>",
        "id": 389177050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693916642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Chinese.20tactics/near/389177050\">said</a>:</p>\n<blockquote>\n<p>Thank you for these comments Yufei! I was just conjecturing what my friend would ask me and it sounds like I was wrong here.</p>\n</blockquote>\n<p>Hi Kevin B have you given up on always being two steps ahead of trends in Popularizing Proof Assistants? Of anyone else you should not fall into the flawed argument above, and instead do a small investment with a huge potential social-impact and 10x return payoff. </p>\n<p><a href=\"https://1337777.github.io/\">https://1337777.github.io/</a></p>\n<p>is already a prototype Chinese Coq (鸡算计) where commands names, keywords names, tactics names, etcs.. are all translated, together with a tutorial introduction/documentation to Coq explained in Chinese too! This is the ultimate popularization of proof assistants, whose target demographic could now include (millions of) highschool students too!</p>\n<p>It would not be hard to do the same for lean4, would you be happy to invest support in such academic research? Thank you for your attention to this matter.</p>",
        "id": 389185427,
        "sender_full_name": "hahalol",
        "timestamp": 1693919208
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 389188041,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1693919942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646509\">hahalol</span> <a href=\"#narrow/stream/270676-lean4/topic/Chinese.20tactics/near/389185427\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://1337777.github.io/\">https://1337777.github.io/</a></p>\n</blockquote>\n<p>Oh, there's also <a href=\"https://1337777.github.io/%EC%88%98%ED%83%89%EC%88%98%ED%95%99/\">Korean Coq (수탉수학, \"Rooster Math\")</a> here. I want to know how to translate Lean code into Korean.</p>",
        "id": 389189810,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1693920482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"646509\">@hahalol</span> Note: contrary to popular opinion, Kevin B is not the leader of lean, and does not set the priorities for the project.</p>",
        "id": 389210406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693925826
    },
    {
        "content": "<p>The lean language is quite capable of being flexible enough to translate all the keywords, although translating the theorems in the core library and mathlib is rather more difficult, and as mentioned while you can have your own theorems named in any language, you will have to use <code>«»</code> around the identifiers if they are not in latin-ish script. I think this could be fixed (in core) with an RFC if desired though.</p>\n<p>However, we would still need a maintainer for each supported language, likely supplied by a project that defines all the tactics and syntax. Perhaps someone here would like to volunteer to maintain them?</p>",
        "id": 389211411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693926089
    },
    {
        "content": "<p>I'd love to volunteer, but I'm not sure if I'm capable of maintaining Korean translations of all the Lean keywords.</p>",
        "id": 389212962,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1693926441
    },
    {
        "content": "<p>EDIT: nvm, it's about adapting/maintaining tactics syntax</p>",
        "id": 389215395,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693926999
    },
    {
        "content": "<p>It's possible we could set up a meta-translation framework, so that we only need to have keyword translations and automatically copy the syntax declarations from lean. That would help avoid divergence since presumably the syntax of tactics will change much more frequently than the set of words that need translation</p>",
        "id": 389230433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693931180
    },
    {
        "content": "<p>I think the meta-translation path is also more reusable like for instance if someone wants to support a translation to more languages</p>",
        "id": 389232091,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693931745
    },
    {
        "content": "<p>My library <a href=\"https://github.com/tydeu/lean4-partax\">Partax</a> provides a meta-translation of syntax to parsers (Sorry for the shameless self-plug). One could probably use a similar approach (or even configure Partax) to translate between syntaxes.</p>",
        "id": 389257355,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693938930
    },
    {
        "content": "<p>I talked to Liang today and he didn't seem remotely interested in translating any lean code into Chinese :-)</p>",
        "id": 389257958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693939150
    },
    {
        "content": "<p>Kids in China are either already exposed to years of English education before learning programming (for the less young generations), or exposed to <a href=\"https://scratch.mit.edu/\">scratch</a>-style programming environments in kindergarten/primary school with Chinese characters on the building blocks (for the younger generations). There's never a need for writing Chinese during programming, according to such cognitive pathways.</p>\n<p>Although, this is a fun idea, so there are two famous attempts:</p>\n<ol>\n<li>the old (since 2003) attempt is known as <a href=\"https://www.eyuyan.com/eftx/lzryybc.htm\">Yi language</a> (Yi means both easy and changing as in the ancient <a href=\"https://en.wikipedia.org/wiki/I_Ching\">Book of Changes</a> ), which is mostly writing C-like language but keywords and core function names in Chinese.</li>\n</ol>\n<p>Most have heard of it, but it's never adopted widely. The language design and the ecosystem is completely obsolete nowadays. The English style word order and the translation tone of Chinese keywords make it very unnatural to write, and even more difficult to remember how to write correctly, compared to just few frequently used English keywords in most programming languages.</p>\n<ol start=\"2\">\n<li>the new (since 2019) attempt is <a href=\"https://github.com/wenyan-lang/wenyan\">wenyan-lang</a>, while the technical aspect of it is relatively modern (like compiling to JS/Python, having a package manager and a small but good ecosystem etc.), the language it uses is <em>ancient Chinese</em>(both ancient words and ancient grammar), which is a mandatory part in the education throughout primary school to high school, so people are familiar with it and like it.</li>\n</ol>\n<p>Also, designing such a language is strongly motivated by reproducing (the writing style of) algebraic solutions in ancient Chinese mathematical books, which are mentioned in textbooks, so people in China are proud of these books. The reproduced results are collected in its online editor <a href=\"https://ide.wy-lang.org/\">here</a>   (maybe-slogan: write ancient Chinese, do math).</p>",
        "id": 389434353,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694009741
    },
    {
        "content": "<p>An example of the program in wenyan-lang (typeset in ancient Chinese style, reads from top to bottom, then right to left) that prints a mandelbrot:<br>\n<a href=\"/user_uploads/3121/4BBL2x6FnYc1CAMFDf8xmNxN/image.png\">image.png</a><br>\nThe author creates more of these programs and gathers them into <a href=\"https://book.wy-lang.org/\">a book</a>, also available as downloadable PDFs: <a href=\"https://github.com/wenyan-lang/book/releases\">https://github.com/wenyan-lang/book/releases</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4BBL2x6FnYc1CAMFDf8xmNxN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4BBL2x6FnYc1CAMFDf8xmNxN/image.png\"></a></div>",
        "id": 389435987,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694010047
    },
    {
        "content": "<p>Well, I am personally not a fan of programming in Chinese. While some particular Chinese PLs look nice, I myself find it annoying typing Chinese when doing programming — even with intelligent IME, (in most cases) it might still acquires extra key strokes to type out a word in Chinese than a word of the same meaning in English.</p>\n<p>Tactics mode, when compared with program mode, tries hard to reduce steps so that you can write a proof as fast as possible. (Of cuz, clearance is also a consideration). Thus, I prefer keeping it in an input-friendly way.</p>\n<p>However, a friendly and well-written guide in Chinese introducing Lean will definitely be useful to make it popular.</p>",
        "id": 389468201,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694016223
    }
]