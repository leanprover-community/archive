[
    {
        "content": "<p>Hi, how do I express (and prove) that an object is <em>not</em> a particular structure via a counterexample?<br>\nFor example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Idempotent</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotIdempotent</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> If ℤ is Idempotent, then it has a .f field, contradicting NotIdempotent -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Idempotent</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396759139,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697380499
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Idempotent</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span> <span class=\"c1\">-- working around Lean 4 bug</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotIdempotent</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> If ℤ is Idempotent, then it has a .f field, contradicting NotIdempotent -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Idempotent</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">NotIdempotent</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 396760163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697381321
    },
    {
        "content": "<p>Is there an open Lean 4 issue for the \"structure will sometimes be a Type when it should be a Prop\" bug?</p>",
        "id": 396760215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697381389
    },
    {
        "content": "<p>Ah, I didn't know it's <em>supposed</em> to be a Prop, thanks.</p>",
        "id": 396760553,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697381641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Object.20not.20being.20a.20structure/near/396760215\">said</a>:</p>\n<blockquote>\n<p>Is there an open Lean 4 issue for the \"structure will sometimes be a Type when it should be a Prop\" bug?</p>\n</blockquote>\n<p>I can't find any. Also, this bug has been there since version <code>Lean (version 4.0.0, commit ec941735c80d, Release)</code></p>",
        "id": 396760608,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697381655
    },
    {
        "content": "<p>It was also there in Lean 3. It never worked, really. Maybe that's a performance concern? as in checking whether something can live in Prop could be expensive? or maybe it would unexpectedly unify universe metavariables?</p>",
        "id": 396762195,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697382785
    },
    {
        "content": "<p>no, I think it's just not a feature that has been suggested</p>",
        "id": 396762292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697382869
    },
    {
        "content": "<p>I think we got as far as writing a linter for it though</p>",
        "id": 396762303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697382887
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2690\">lean4#2690</a></p>",
        "id": 396763072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697383428
    },
    {
        "content": "<p>(let me know if you'd rather this were closed for some reason)</p>",
        "id": 396763125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697383444
    }
]