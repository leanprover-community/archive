[
    {
        "content": "<p>If a metavariable is assigned a type or value, could this assigned value ever change when more tactics are executed?</p>",
        "id": 398736306,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698341877
    },
    {
        "content": "<p>In principle, yes; the APIs let you do anything. In practice, it's an invariant of Lean that once a metavariable is created, its type and local context never change (except that expressions may be replaced with defeq expressions); and once a metavariable is assigned, this assignment never changes.</p>",
        "id": 398746840,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698345750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Can.20the.20type.20of.20metavariables.20change.3F/near/398746840\">said</a>:</p>\n<blockquote>\n<p>In principle, yes; the APIs let you do anything. In practice, it's an invariant of Lean that once a metavariable is created, its type and local context never change (except that expressions may be replaced with defeq expressions); and once a metavariable is assigned, this assignment never changes.</p>\n</blockquote>\n<p>so its possible that someone could write a contrived tactic to change the assignment of a mvar?</p>",
        "id": 398754292,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698348688
    },
    {
        "content": "<p>Yes. Any tactic can break any invariant at any time, but most likely you should ignore this and assume that tactics respect these invariants.</p>",
        "id": 398762803,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698352162
    },
    {
        "content": "<p>note: if a tactic assigns a metavariable incorrectly, or loses metavariables or anything else, the kernel still won't accept the theorem in the end.</p>",
        "id": 398766272,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698353876
    },
    {
        "content": "<p>(In particular, a tactic running in the <code>MetaM</code> monad can just replace the <code>MetavarContext</code> arbitrarily if it feels like it. This is generally considered bad form, but nevertheless so tactics do it if they have fancy backtracking requirements.)</p>",
        "id": 398782256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698362795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 398820661,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698382725
    }
]