[
    {
        "content": "<p>I just ran across another type class search issue while porting LinearAlgebra/Isomorphisms in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2364\">!4#2364</a>. Basically, when defining a linear equiv <code>f : M ≃[R] M</code>, we are actually defining a semilinear equiv which (simplified) looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SemilinearEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">RingHomInvPair</span> <span class=\"n\">σ</span> <span class=\"n\">σ'</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>Of course, in the case of a plain linear equiv, <code>σ</code> is <code>RingHom.id R</code>, and <code>σ'</code> is supposed to be inferred as an outparam. However, now we have the following problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.CompTypeclasses</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SemilinearEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">RingHomInvPair</span> <span class=\"n\">σ</span> <span class=\"n\">σ'</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- This works just fine:</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemilinearEquiv</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"c1\">-- Whereas this fails:</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemilinearEquiv</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>The error I see in the trace is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">RingHomInvPair</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.450</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">RingHomInvPair</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_tc.0</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">RingHomInvPair.ids</span> <span class=\"n\">to</span> <span class=\"n\">RingHomInvPair</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.483</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">RingHomInvPair</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.483</span> <span class=\"bp\">≟</span> <span class=\"n\">RingHomInvPair</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">?</span><span class=\"n\">m.486</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">?</span><span class=\"n\">m.486</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So basically, it refuses to try to find the semiring in the ring. Any thoughts?</p>",
        "id": 328744899,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1676768617
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> again</p>",
        "id": 328798014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676808458
    },
    {
        "content": "<p>Pretty much all of LinearAlgebra is impacted by this</p>",
        "id": 328798093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676808477
    },
    {
        "content": "<p>I thought this had been fixed...?</p>",
        "id": 328816003,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1676816750
    },
    {
        "content": "<p>A fix was attempted but it was never merged into Lean4 master</p>",
        "id": 328816440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676816952
    },
    {
        "content": "<p>Or rather I think it was merged and then reverted because it caused too many issues without <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a>, which is now merged.</p>",
        "id": 328826768,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676821207
    },
    {
        "content": "<p>Sorry, what I should have said was \"there was never a commit to mathlib master that bumped lean4 to the version that included that change\"</p>",
        "id": 328826855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676821269
    },
    {
        "content": "<p>I think there were more problems than just it not working well without <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a>, but I don't remember what they were.</p>",
        "id": 328827126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676821372
    }
]