[
    {
        "content": "<p>A little snippet from <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil4</a> shows that when declaring a <code>structure</code> one uses double colons if one wants to explicitly declare its fields as part of a single constructor like <code>mk</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Hidden</span>\n</code></pre></div>\n<p>Is there any other place where the <code>::</code> is used for type annotations?</p>",
        "id": 376019640,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1689599668
    },
    {
        "content": "<p>For what it's worth, you can put this <code>mk ::</code> in a few places that let you use the parenthesis-less notation for explicit fields.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 376020377,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689599800
    },
    {
        "content": "<p>This use of <code>::</code> is unique to structure commands</p>",
        "id": 376021052,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689599914
    },
    {
        "content": "<p>In <code>Lean.Parser.Command</code> you can find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">structure</span><span class=\"bp\">»</span>          <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n    <span class=\"o\">(</span><span class=\"n\">structureTk</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">classTk</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declId</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">ppIndent</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">Term.bracketedBinder</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"bp\">«</span><span class=\"kd\">extends</span><span class=\"bp\">»</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">Term.optType</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">optional</span> <span class=\"o\">((</span><span class=\"n\">symbol</span> <span class=\"s2\">\" := \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\" where \"</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"n\">structCtor</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">structFields</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">optDeriving</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">structCtor</span>           <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"n\">atomic</span> <span class=\"o\">(</span><span class=\"n\">ppIndent</span> <span class=\"o\">(</span><span class=\"n\">declModifiers</span> <span class=\"n\">true</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\" :: \"</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 376021354,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689599978
    },
    {
        "content": "<p>(I didn't know there was a <code>declModifiers</code> in there before the <code>ident</code>. That means that you can for example put <code>protect</code> before <code>mk</code> to protect the constructor.)</p>",
        "id": 376022599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689600219
    },
    {
        "content": "<p>okay, so this is a one-off case. Thanks :).  I have never seen <code>::</code> used in lean anywhere , except when reading <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil4</a></p>",
        "id": 376031895,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1689601822
    },
    {
        "content": "<p>The more common use is for the \"cons\" operation on lists</p>",
        "id": 376101301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689612230
    },
    {
        "content": "<p>Ah yes. I should have clarified that I was thinking about type declarations and annotations</p>",
        "id": 376113846,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1689615067
    }
]