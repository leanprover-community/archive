[
    {
        "content": "<p>Consider the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Type of tensor dimensions and indexes into tensor dimensions. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Index</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n<span class=\"sd\">/-- linarith failed to find a contradiction -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">index_check_fail</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Index</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">index_check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Index</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">Index</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>I would not call this a problem, as it is alleviated by defining a custom <code>linarith_index</code> (simo<code>Index</code> and then  apply<code>linarith</code>). Still, this took be aback when I encountered it.</p>\n<p>I wonder if <code>linarith</code> is designed to smoothly incorporate such a use-case, and has a different solution builtin?</p>",
        "id": 365631549,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1686590585
    },
    {
        "content": "<p>I don't think anything works on an alias -- that's the point of type aliases right? i.e. this is working as expected.</p>",
        "id": 365636136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686591827
    },
    {
        "content": "<p>Usually, <code>abbrev</code> is transparent to most kinds of automation.  Simp, type-class search, etc., will just see through it.  I think it would make sense for <code>linarith</code> to see through it as well.</p>",
        "id": 365636589,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686591938
    },
    {
        "content": "<p>Was it implemented with a hardcoded <code>Nat</code> for performance reasons though?</p>",
        "id": 365636752,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686591985
    },
    {
        "content": "<p>Oh I see, if this was inlined then it really would work. I spoke too soon -- sorry.</p>",
        "id": 365637175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686592104
    }
]