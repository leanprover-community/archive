[
    {
        "content": "<p>I have the following and am getting a <code>failed to synthesize instance: Inv T</code> at the <code>#check</code>. Everything above checks?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">proofs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">InverseObject</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">on</span><span class=\"o\">:</span> <span class=\"n\">InverseObject</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">on.inv</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Inv.inv</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_inv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">proofs</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">proofs.inv_inv</span>\n</code></pre></div>",
        "id": 392321812,
        "sender_full_name": "Ben",
        "timestamp": 1695302939
    },
    {
        "content": "<p>Your instance depends on the variable <code>on</code> which can't be inferred from the type <code>Inv T</code> so there is no way for lean to fill in which <code>on</code> you want</p>",
        "id": 392324451,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695303715
    },
    {
        "content": "<p>What are you trying to accomplish here?</p>",
        "id": 392324674,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695303787
    },
    {
        "content": "<p>I see. It's part of a larger problem, but I just want to use <code>⁻¹</code> syntax in place of <code>on.inv</code> in the rest of the namespace. I think I have figured it out with this though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">proofs</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">InverseObject</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">on</span><span class=\"o\">:</span> <span class=\"n\">InverseObject</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">on.inv</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_inv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">proofs</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">proofs.inv_inv</span>\n</code></pre></div>",
        "id": 392328873,
        "sender_full_name": "Ben",
        "timestamp": 1695305088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 392328885,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695305091
    }
]