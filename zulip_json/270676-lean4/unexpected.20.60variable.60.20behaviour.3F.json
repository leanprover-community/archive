[
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below surprises me: it seems that updating the binder type in <code>variable</code> makes the available typeclasses disappear.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span>  <span class=\"c1\">-- comment `variable`, and `[two A B]` says `failed to synthesize instance one A`</span>\n         <span class=\"o\">[</span><span class=\"n\">two</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The analogous Lean 3 code, with <code>variable</code> replaced by <code>variables</code> appears to work.</p>\n<p>Is this expected?  Am I missing something?</p>",
        "id": 360154080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684730266
    },
    {
        "content": "<p>I think that you now can't change binder types and add new instances in the same <code>variable</code> command, for some unknown reason (don't know if this was an oversight or intentional)</p>",
        "id": 360158480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684732951
    },
    {
        "content": "<p>Ok, the workaround is easy, I just wanted to confirm that I was not doing something silly!</p>",
        "id": 360158581,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684733026
    },
    {
        "content": "<p>Wait I'm confused: this seems to work fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 360160015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684733736
    },
    {
        "content": "<p>Yes, this seems to work.  I think that the issue is that when you change the binder type, the instances on the re-bound variable disappear, for the rest of the <code>variable</code> command.</p>",
        "id": 360160236,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684733855
    },
    {
        "content": "<p>At least, this is compatible with what I tried.</p>",
        "id": 360160264,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684733875
    },
    {
        "content": "<p>Sorry, I think that I have seen this issue before and incorrectly diagnosed it at the time. It's more subtle than what I had thought maybe, unless I'm missing something too</p>",
        "id": 360160341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684733899
    },
    {
        "content": "<p>Maybe open an issue in a few days unless there is more discussion here?</p>",
        "id": 360161054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684734233
    },
    {
        "content": "<p>Sure, I'll wait to see if there are more comments and otherwise I'll open an issue.</p>",
        "id": 360161470,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684734430
    },
    {
        "content": "<p>this is expected behavior (or a known bug, depending on your POV), you can't mix binder updates and regular variables in the same command</p>",
        "id": 360165098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684736002
    },
    {
        "content": "<p>TBH it should be a different keyword</p>",
        "id": 360165112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684736011
    },
    {
        "content": "<p>that is,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">two</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is declaring another variable named <code>A</code>, without the typeclass assumption of the other one</p>",
        "id": 360165271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684736063
    },
    {
        "content": "<p>Indeed, this also happens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">two</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>  <span class=\"c1\">-- the tactic state is</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">A: Type</span>\n<span class=\"cm\">inst✝² inst✝¹: one A</span>\n<span class=\"cm\">inst✝: two A</span>\n<span class=\"cm\">x✝: A</span>\n<span class=\"cm\">⊢ True</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>There is one type <code>A</code> and two instances <code>one A</code>.</p>",
        "id": 360167031,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684736740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/360165098\">said</a>:</p>\n<blockquote>\n<p>this is expected behavior (or a known bug, depending on your POV), you can't mix binder updates and regular variables in the same command</p>\n</blockquote>\n<p>But <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/360160015\">that seemed to work fine</a>.</p>",
        "id": 360172790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684738725
    },
    {
        "content": "<p>are you sure it isn't introducing two variables named A?</p>",
        "id": 360172942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684738773
    },
    {
        "content": "<p>I'm not sure how to check.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- A × A</span>\n</code></pre></div>",
        "id": 360173250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684738871
    },
    {
        "content": "<p>I'm not at my computer now, but I will be soon.  How can I check if there are two variables named <code>A</code>?</p>",
        "id": 360173276,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684738880
    },
    {
        "content": "<p>I think this shows it is a binder update:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : {A : Nat} → Type → Nat × Type :=</span>\n<span class=\"c1\">-- fun {A} B =&gt; (A, B)</span>\n</code></pre></div>",
        "id": 360173394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684738924
    },
    {
        "content": "<p>since I never wrote anything about an implicit variable of type Nat</p>",
        "id": 360173443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684738943
    },
    {
        "content": "<p>Actually it seems my original assertion was incorrect, <code>{A}</code> is treated as a binder update in almost all circumstances, even when there are other things going on in the variable line. However, the variable line is prechecked, and it is this that is failing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">A</span><span class=\"o\">)]</span> <span class=\"c1\">-- ignore the unreachable tactic linter warning here</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">two.t</span> <span class=\"n\">A</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- def foo : {A : Nat} → [inst : one A] → [inst : two A] → Nat :=</span>\n<span class=\"c1\">-- fun {A} [one A] [two A] =&gt; two.t A</span>\n</code></pre></div>",
        "id": 360177184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684740119
    },
    {
        "content": "<p>Using <code>by exact A</code> here circumvents the precheck, delaying elaboration of the variable body until <code>foo</code></p>",
        "id": 360177471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684740199
    },
    {
        "content": "<p>the linter is pointing out that the tactic is never run during the variable command</p>",
        "id": 360177584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684740228
    },
    {
        "content": "<p>Oh, here's an interesting behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"c1\">-- no error is reported</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- unknown constant 'foo'</span>\n</code></pre></div>",
        "id": 360179057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684740595
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover/lean4/pull/2226\">lean4#2226</a>)</p>",
        "id": 360180296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684740953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> What do you think about fixing this issue by identifying binder updates <em>before</em> the precheck, simply by checking if they are binders without type where the variable name is already in scope? And then the precheck would run on the variables with the binder updates filtered out.</p>",
        "id": 360182336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684741530
    },
    {
        "content": "<p>I think I tried that once. It looked messy, but might still be the correct solution.</p>",
        "id": 360183143,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684741793
    },
    {
        "content": "<p>There’s a lean4 issue open about this</p>",
        "id": 360289249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684765612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/360154080\">said</a>:</p>\n<blockquote>\n<p>The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below surprises me: it seems that updating the binder type in <code>variable</code> makes the available typeclasses disappear.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span>  <span class=\"c1\">-- comment `variable`, and `[two A B]` says `failed to synthesize instance one A`</span>\n         <span class=\"o\">[</span><span class=\"n\">two</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The analogous Lean 3 code, with <code>variable</code> replaced by <code>variables</code> appears to work.</p>\n<p>Is this expected?  Am I missing something?</p>\n</blockquote>\n<p>FWIW, I just ran into what I think is the same issue (I updated a variable from implicit to explicit and lost a previously declared<code>Fintype</code> instance on it). As you mentioned, the workaround is easy, I'm just glad that I had read and so was confused only for a short while.</p>",
        "id": 362263867,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685470067
    },
    {
        "content": "<p>I am happy that this was helpful!  If I understand correctly, if you update with <code>variable (A)</code>, instead of <code>variable (A : Type _)</code>, you may still get the instances on the previously defined variable <code>A</code>.</p>",
        "id": 362264264,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685470174
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"n\">A</span>  <span class=\"c1\">-- finds `a`</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"n\">A</span>  <span class=\"c1\">-- finds `a`</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"c1\">--[Add A]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"n\">A</span>  <span class=\"c1\">-- failed to synthesize `Add A`</span>\n</code></pre></div>",
        "id": 362266133,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685470651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/362264264\">said</a>:</p>\n<blockquote>\n<p>I am happy that this was helpful!  If I understand correctly, if you update with <code>variable (A)</code>, instead of <code>variable (A : Type _)</code>, you may still get the instances on the previously defined variable <code>A</code>.</p>\n</blockquote>\n<p>Yes, I tested in a MWE and in my working file, and it seems that I am keeping my <code>Fintype</code> instance through several updates. Thanks !</p>",
        "id": 362285766,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685476039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/362264264\">said</a>:</p>\n<blockquote>\n<p>If I understand correctly, if you update with [...] instead of <code>variable (A : Type _)</code></p>\n</blockquote>\n<p><code>variable (A : Type _)</code> is not an update at all, it's \"create a new <code>A</code> in addition to the old one\"</p>",
        "id": 362304578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685482715
    },
    {
        "content": "<p>Yes, I expressed it badly: <code>variable</code> can perform two separate actions.</p>\n<ul>\n<li>It can introduce previously non-existing variables (possibly making inaccessible pre-existing ones);</li>\n<li>it can modify the binder type of previously existing variables.</li>\n</ul>\n<p>Some of the examples are confusing, because they mix these two behaviours.  I think that someone, maybe Mario, even commented that it would have been clearer if these two actions had different names.</p>",
        "id": 362304941,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685482904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/362304578\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/362264264\">said</a>:</p>\n<blockquote>\n<p>If I understand correctly, if you update with [...] instead of <code>variable (A : Type _)</code></p>\n</blockquote>\n<p><code>variable (A : Type _)</code> is not an update at all, it's \"create a new <code>A</code> in addition to the old one\"</p>\n</blockquote>\n<p>Ah, that makes more sense now, thank you for the explanation!</p>",
        "id": 362307872,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685484271
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/6079\">#6079</a> which corrects hundreds of accidentally-duplicated-variables in mathlib, though I imagine it will take some work to get it through CI</p>",
        "id": 377938488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690150018
    },
    {
        "content": "<p>Build fails</p>",
        "id": 377961588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690161954
    },
    {
        "content": "<p>Is it a bug in <code>variable</code>, that we should try to fix instead of circumventing it? Or is it by design?</p>",
        "id": 377995272,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1690176905
    },
    {
        "content": "<p>I don't know whether this is a bug or by design, nor it seems does Mario:</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/360165098\">said</a>:</p>\n<blockquote>\n<p>this is expected behavior (or a known bug, depending on your POV), you can't mix binder updates and regular variables in the same command</p>\n</blockquote>",
        "id": 378031254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690186571
    },
    {
        "content": "<p>Note that what I said there was wrong, see the follow up message:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F/near/360177184\">said</a>:</p>\n<blockquote>\n<p>Actually it seems my original assertion was incorrect, <code>{A}</code> is treated as a binder update in almost all circumstances, even when there are other things going on in the variable line. However, the variable line is prechecked, and it is this that is failing:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">A</span><span class=\"o\">)]</span> <span class=\"c1\">-- ignore the unreachable tactic linter warning here</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">two.t</span> <span class=\"n\">A</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- def foo : {A : Nat} → [inst : one A] → [inst : two A] → Nat :=</span>\n<span class=\"c1\">-- fun {A} [one A] [two A] =&gt; two.t A</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 378251447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690227180
    },
    {
        "content": "<p>Would you vote against salvaging <a href=\"https://github.com/leanprover-community/mathlib4/pull/6079\">#6079</a> then?</p>",
        "id": 378262768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690230654
    },
    {
        "content": "<p>Did we ever decide whether this was a bug? I raise in <a href=\"https://github.com/leanprover/lean4/pull/2645/files#r1358511268\">https://github.com/leanprover/lean4/pull/2645/files#r1358511268</a> (cc <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>) that we should document that mixing binder updates and new variables is a bad idea, but it's hard to justify something where no one knows if its a feature.</p>",
        "id": 399386584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698705229
    },
    {
        "content": "<p>From the UX point of view it is definitely a bug. And it is confusing when porting Lean 3 code.</p>",
        "id": 399388724,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698706778
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2789\">lean4#2789</a></p>",
        "id": 399390398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698707589
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 399446366,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1698739090
    }
]