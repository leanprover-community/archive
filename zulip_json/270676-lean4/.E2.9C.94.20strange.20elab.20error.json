[
    {
        "content": "<p>uh oh <span aria-label=\"frowning\" class=\"emoji emoji-1f626\" role=\"img\" title=\"frowning\">:frowning:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">Lean.Loop.forIn.loop._at_.Eternity2.GenRandom.board.attempt._elam_5.spec_0'</span>\n</code></pre></div>\n<p>Has anyone seen an error like this before? I'll try to minimize the code, but (with a bunch of dependencies) it looks like this at the moment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `size`x`size` board with colors assigned randomly. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">board</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">RandomM</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DiamondBoard</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">Color.WithBorder</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">attempts</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">while</span> <span class=\"n\">attempts</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1000</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">attempt</span> <span class=\"o\">()</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">continue</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"ran out of attempts when generating board of size {size}\"</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">attempt</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">RandomM</span>\n                        <span class=\"o\">(</span><span class=\"n\">DiamondBoard</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">Color.WithBorder</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">blankBoard</span> <span class=\"n\">size</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">indices</span> <span class=\"o\">:=</span> <span class=\"n\">DiamondIndex.border</span> <span class=\"n\">size</span> <span class=\"bp\">++</span> <span class=\"n\">DiamondIndex.center</span> <span class=\"n\">size</span>\n\n    <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"n\">indices.isEmpty</span> <span class=\"k\">do</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> Pick random index from indices -/</span>\n      <span class=\"k\">let</span> <span class=\"n\">i'</span> <span class=\"bp\">←</span> <span class=\"n\">RandomM.randFin</span> <span class=\"n\">indices.length</span> <span class=\"gr\">sorry</span>\n      <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">indices</span><span class=\"o\">[</span><span class=\"n\">i'</span><span class=\"o\">]</span>\n      <span class=\"n\">indices</span> <span class=\"o\">:=</span> <span class=\"n\">indices.removeNth</span> <span class=\"n\">i'</span>\n\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">colors</span> <span class=\"o\">:=</span>\n        <span class=\"k\">if</span> <span class=\"n\">i.isBorder</span> <span class=\"k\">then</span> <span class=\"n\">Color.borderColors</span>\n        <span class=\"k\">else</span> <span class=\"n\">Color.centerColors</span>\n\n      <span class=\"c\">/-</span><span class=\"cm\"> Pick a color that doesn't violate uniqueness constraint -/</span>\n      <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"n\">colors.isEmpty</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">c'</span> <span class=\"bp\">←</span> <span class=\"n\">RandomM.randFin</span> <span class=\"n\">colors.length</span> <span class=\"gr\">sorry</span>\n        <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">colors</span><span class=\"o\">[</span><span class=\"n\">c'</span><span class=\"o\">]</span>\n        <span class=\"n\">colors</span> <span class=\"o\">:=</span> <span class=\"n\">colors.removeNth</span> <span class=\"n\">c'</span>\n\n        <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">a.set</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">isLegal</span> <span class=\"n\">a'</span> <span class=\"k\">then</span>\n          <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a'</span>\n          <span class=\"n\">break</span>\n\n      <span class=\"k\">if</span> <span class=\"n\">colors.isEmpty</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- failed to find a color :(</span>\n        <span class=\"n\">throw</span> <span class=\"s2\">\"failed to find color\"</span>\n      <span class=\"k\">else</span>\n        <span class=\"c1\">-- got the color :)</span>\n        <span class=\"n\">continue</span>\n\n    <span class=\"c\">/-</span><span class=\"cm\"> Now all the diamonds should be some, so we map! -/</span>\n    <span class=\"k\">let</span> <span class=\"n\">board</span> <span class=\"bp\">←</span> <span class=\"n\">a.board.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"none found in generated board?\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">board.size</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">board</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"board size wrong?\"</span>\n</code></pre></div>",
        "id": 329807389,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677182230
    },
    {
        "content": "<p>I'm on version 01-29, since that is what Std is on.</p>",
        "id": 329807609,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677182309
    },
    {
        "content": "<p>Okay, I've gotten it down to a very strange MWE <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RandomM</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"n\">RandomGen</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">StateM</span> <span class=\"n\">g</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">RandomGen</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">RandomM</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">r</span> <span class=\"n\">f</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">board</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">RandomM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">attempt</span> <span class=\"o\">()</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">attempt</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">RandomM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">while</span> <span class=\"n\">False</span> <span class=\"k\">do</span>\n      <span class=\"n\">while</span> <span class=\"n\">False</span> <span class=\"k\">do</span>\n        <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 329811810,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677183863
    },
    {
        "content": "<p>The error in the MWE is now <code>unknown constant 'Lean.Loop.forIn.loop._at_.board.attempt._elam_4.spec_0'</code></p>",
        "id": 329811947,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677183926
    },
    {
        "content": "<p>Let me try this in nightly Lean to see if it's still present</p>",
        "id": 329811976,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677183935
    },
    {
        "content": "<p>yup, still present on 02-22. hum. no clue how to work around this</p>",
        "id": 329812616,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677184173
    },
    {
        "content": "<p>You can even remove the RandomGen dependency:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RandomM</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">Id</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">RandomM</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">r</span> <span class=\"n\">f</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">board</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">RandomM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">attempt</span> <span class=\"o\">()</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">attempt</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">RandomM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">while</span> <span class=\"n\">False</span> <span class=\"k\">do</span>\n      <span class=\"n\">while</span> <span class=\"n\">False</span> <span class=\"k\">do</span>\n        <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>but it does seem essential that there is a class parameter in the type declaration</p>",
        "id": 329813157,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677184355
    },
    {
        "content": "<p>Please file this is an issue.  Compiler errors will only be fixed in the new compiler, which will still take a couple of months.</p>",
        "id": 329813557,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677184493
    },
    {
        "content": "<p>ah okay :/ I think taking the class parameter explicitly resolves the issue, so I'll just do that</p>",
        "id": 329813923,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677184622
    },
    {
        "content": "<p>HEre is a more minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MM</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">StateM</span> <span class=\"n\">g</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">MM</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">r</span> <span class=\"n\">f</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">MM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">while</span> <span class=\"n\">False</span> <span class=\"k\">do</span>\n    <span class=\"n\">while</span> <span class=\"n\">False</span> <span class=\"k\">do</span>\n      <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 329814133,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677184704
    },
    {
        "content": "<p>It seems that the typeclass parameter in the definition of <code>MM</code> is the issue. If you remove <code>[Add g]</code>, then everything works</p>",
        "id": 329814202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677184729
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/2120\">https://github.com/leanprover/lean4/issues/2120</a></p>",
        "id": 331120999,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677185535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> has marked this topic as resolved.</p>",
        "id": 331121018,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677185541
    }
]