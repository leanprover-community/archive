[
    {
        "content": "<p>I notice often that when writing a tactic proof, if I focus a goal with <code>·</code>,  I don't see the goal I've just focused. Inspecting the situation more closely, if <code>|</code> represents my text cursor, I find that <code>·|</code> <em>does</em> display the goal, but <code>· |</code> doesn't—or, worse, it displays the wrong goal (the next one).</p>\n<p>This whitespace issue generally wouldn't matter, except that typing <code>\\.&lt;space&gt;</code> is an extremely common way to enter <code>·</code>, and it leaves your cursor in the latter, un- or misinformative state (<code>· |</code>). So this \"broken\" state is one that users encounter quite frequently (well, at least, assuming I'm not alone in typing characters like this in VS code!).</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- displays next goal (`B`)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">--displays 'no goals' above a list of unsolved goals</span>\n</code></pre></div>\n<p>I'm not expecting this to even be able to be changed soon given that core isn't moving, but thought I'd bring it up here for the record and see if people think this is solvable.</p>\n<p>(Note: a similar issue (though possibly different in cause) occurs when typing <code>(by )</code> to fill in an argument in a term.)</p>",
        "id": 341922273,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678835288
    },
    {
        "content": "<p>yes this is a known issue, it is caused by the fact that a tacticSeq can't be empty</p>",
        "id": 341931862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678839433
    },
    {
        "content": "<p>Did someone file an issue? I think this is confusing for users (it was certainly confusing for me).</p>",
        "id": 341976524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678865481
    },
    {
        "content": "<p>no issue AFAIK</p>",
        "id": 341976875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678865594
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> and I have discussed this on previous zulip threads</p>",
        "id": 341976978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678865627
    },
    {
        "content": "<p>the earlier version of the issue was something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"bp\">|</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>showing <code>A</code> as the goal at the <code>|</code> rather than <code>B</code></p>",
        "id": 341977297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678865732
    },
    {
        "content": "<p>I think this was fixed, but not by making empty tactic sequences legal so minor variations on the example are still broken, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"bp\">|</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 341977925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678865961
    },
    {
        "content": "<p>Also empty <code>·</code> has some surprising parse behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- 1 = 1 goal unsolved</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Eq.refl</span> <span class=\"mi\">1</span> <span class=\"c1\">-- expected proof of 0 = 0</span>\n</code></pre></div>",
        "id": 341978491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866173
    },
    {
        "content": "<p>I wonder if we can make the UI for parse errors a bit more annoying/loud, to encourage people always writing <code>sorry</code> in places where a tactic is expected to go. I almost feel like parse error should lead to <em>no</em> goal state output, to kinda indicate to people \"you wrote a thing that is malformed, give me good syntax first\"</p>",
        "id": 341978810,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678866271
    },
    {
        "content": "<p>and that also would incentivize better autocompletion/hole management stuff in the VS Code plugin :P</p>",
        "id": 341978927,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678866313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Small.20UX.20issue.3A.20cursor.20at.20.60.C2.B7.20.7C.60.20doesn't.20display.20focused.20goal/near/341978810\">said</a>:</p>\n<blockquote>\n<p>I wonder if we can make the UI for parse errors a bit more annoying/loud, to encourage people always writing <code>sorry</code> in places where a tactic is expected to go. I almost feel like parse error should lead to <em>no</em> goal state output, to kinda indicate to people \"you wrote a thing that is malformed, give me good syntax first\"</p>\n</blockquote>\n<p>That's what lean 3 did and it was horrible</p>",
        "id": 341979284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866409
    },
    {
        "content": "<p>it didn't help that the error message was something really obscure sounding like \"sync failed\"</p>",
        "id": 341979399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866448
    },
    {
        "content": "<p>Note that my last example is not even a parse error. The reason there are those errors is because it is actually well formed and was interpreted as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- 1 = 1 goal unsolved</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Eq.refl</span> <span class=\"mi\">1</span> <span class=\"c1\">-- expected proof of 0 = 0</span>\n</code></pre></div>",
        "id": 341979650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866540
    },
    {
        "content": "<p>the lean4 messages are ..  I guess slightly more specific, but stuff like this is not very helpful:  <a href=\"/user_uploads/3121/9U-IQ4QtK0PyXrtTRQQvO_4u/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9U-IQ4QtK0PyXrtTRQQvO_4u/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9U-IQ4QtK0PyXrtTRQQvO_4u/image.png\"></a></div>",
        "id": 341979727,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678866565
    },
    {
        "content": "<p>it's hard to give better parse errors than that</p>",
        "id": 341979760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866581
    },
    {
        "content": "<p>at least generically</p>",
        "id": 341979786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Small.20UX.20issue.3A.20cursor.20at.20.60.C2.B7.20.7C.60.20doesn't.20display.20focused.20goal/near/341979650\">said</a>:</p>\n<blockquote>\n<p>Note that my last example is not even a parse error</p>\n</blockquote>\n<p>I'm guessing we'd want that to be a parse error, and there should probably be a way to make it a parse error</p>",
        "id": 341979797,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678866598
    },
    {
        "content": "<p>I would like it to be interpreted as two blocks</p>",
        "id": 341981616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678867116
    },
    {
        "content": "<p>not doing so is what causes the error that Thomas noted</p>",
        "id": 341981693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678867151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Small.20UX.20issue.3A.20cursor.20at.20.60.C2.B7.20.7C.60.20doesn't.20display.20focused.20goal/near/341979760\">said</a>:</p>\n<blockquote>\n<p>it's hard to give better parse errors than that</p>\n</blockquote>\n<p>Replacing \"strict indentation\" with \"indented tactic sequence\" or something like that at least would not be hard</p>",
        "id": 341991481,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678870160
    },
    {
        "content": "<p>It looks like <code>·</code> is missing that very indentation check -- otherwise it should not be able to coalesce two cdots like that</p>",
        "id": 341993512,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678870790
    },
    {
        "content": "<p>With both fixed, the second cdot becomes this parse error <a href=\"/user_uploads/3121/MDVWqHirAnsotCz6c4YLoLYB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MDVWqHirAnsotCz6c4YLoLYB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MDVWqHirAnsotCz6c4YLoLYB/image.png\"></a></div>",
        "id": 342006327,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678874339
    },
    {
        "content": "<p>I pushed these two small fixes, the original issue with the space after cdot turned out to be a bit more complicated</p>",
        "id": 342038502,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678882670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> As shown in the screenshot, we use a token antiquotation to show the focused state on the cdot. This works fine if the cursor is adjacent to the token. Usually the language server also shows the same goal when you are inside the whitespace trailing a tactic info. But the canonical info created by the antiquotation does not possess trailing information, only <code>original</code> does! I really don't know whether adding (leading and?) trailing whitespace (or only length) to <code>synthetic</code> is the right solution. If it is an issue quite specific to cdot, it would probably be better to convert it to an elaborator and apply the info manually.</p>",
        "id": 342040531,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678883142
    },
    {
        "content": "<p>Maybe the lookup just needs to be adjusted? If you are in a trailing whitespace, you should still be able to find the <code>original</code> token it trails in the tree, and then you can report tactic info for that position, including <code>synthetic</code> nodes</p>",
        "id": 342044268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678883935
    },
    {
        "content": "<p>That could work... but <code>InfoTree.goalsAt?</code> is alreay more complicated than I'd like</p>",
        "id": 342044644,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678884007
    }
]