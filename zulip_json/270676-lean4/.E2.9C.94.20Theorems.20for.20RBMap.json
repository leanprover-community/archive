[
    {
        "content": "<p>Are there theorems that prove the correctness of RBMap? For example stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rbmap_insert_eq</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">Std.RBMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">cmp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">map.insert</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Option.some</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which says \"After you insert a value into the map, if you try to access that key, you get the value you inserted\". I couldn't find something like that in Mathlib</p>",
        "id": 365211307,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1686441185
    },
    {
        "content": "<p>That lemma will probably be false without <code>[TransCmp cmp]</code></p>",
        "id": 365211426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686441311
    },
    {
        "content": "<p>it's not done yet, that's the last 10% to be done</p>",
        "id": 365212633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686442222
    },
    {
        "content": "<p>it's all in <code>Std.Data.RBMap.Lemmas</code></p>",
        "id": 365212657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686442249
    },
    {
        "content": "<p>Okay, looking forward to it! I'll use something simple like an associative list for now and swap it out</p>",
        "id": 365230019,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1686453726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"499256\">Stuart Geipel</span> has marked this topic as resolved.</p>",
        "id": 365287439,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686480347
    }
]