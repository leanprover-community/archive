[
    {
        "content": "<p>Is it intentional that I have to use <code>_k _n</code> in the first example but not in the second one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hm</span> <span class=\"n\">_k</span> <span class=\"n\">_n</span> <span class=\"n\">hk</span> <span class=\"n\">hn</span> <span class=\"bp\">↦</span>\n  <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">hm</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">hk</span> <span class=\"n\">hn</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hm</span> <span class=\"bp\">↦</span> <span class=\"k\">fun</span> <span class=\"n\">hk</span> <span class=\"n\">hn</span> <span class=\"bp\">↦</span>\n  <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">hm</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">hk</span> <span class=\"n\">hn</span>\n</code></pre></div>",
        "id": 378993847,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690430306
    },
    {
        "content": "<p>sorry, what's the difference there?</p>",
        "id": 378995233,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690430781
    },
    {
        "content": "<p>In the first example I use one <code>fun</code>, then Lean hides <code>m</code> from <code>fun</code> but I have to use <code>_k _n</code>. In the second example, I use two <code>fun</code>s, no <code>_k _n</code>.</p>",
        "id": 378997673,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690431711
    },
    {
        "content": "<p>oh sorry, I was looking at the statements. got it.</p>",
        "id": 379010768,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690436291
    },
    {
        "content": "<p>So, is it a bug or a feature? Is it documented somewhere?</p>",
        "id": 382732609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691434339
    },
    {
        "content": "<p>This looks like a feature to me</p>",
        "id": 382736998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691435503
    },
    {
        "content": "<p>not to me, it is inconsistent with the implicitness of the arguments passed to the function - you would have to write <code>_example hm hk hn</code> as equivalent to <code>@_example _ hm _ _ hk hn</code></p>",
        "id": 382739077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691436110
    },
    {
        "content": "<p>So, should I open a Lean 4 github issue?</p>",
        "id": 386025529,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1692410213
    },
    {
        "content": "<p>Oh, is your claim that the first line is misbehaving, Mario?</p>",
        "id": 386102430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692449944
    },
    {
        "content": "<p>I think that it should be either changed to require <code>fun hm hk hn</code> in the first line or should be clearly documented (and the inconsistency with application syntax should be explained somehow).</p>",
        "id": 386124714,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1692463376
    },
    {
        "content": "<p>Somewhat related: if you do <code>fun a =&gt; ...</code>, lean happily introduces any implicit arguments before a, but if you want to abstract over only implicit arguments, you need <code>fun {...}</code></p>",
        "id": 386126186,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692464175
    },
    {
        "content": "<p>Can't you just omit <code>fun =&gt;</code> in this case?</p>",
        "id": 386169987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1692495682
    }
]