[
    {
        "content": "<p>We were discussing Heather's book in some other stream and I wanted to see whether some things changed in recent Lean versions. But I have not been able to update the project. I tried everything I could think of, changing the lakefile, deleting the manifest, deleting <code>lake-packages</code>, but nothing worked. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> could you tell us how you would go from a fresh clone of <a href=\"https://github.com/hrmacbeth/math2001/\">https://github.com/hrmacbeth/math2001/</a> to a version that is setup to use current Mathlib master? Of course there would be build errors if things changed in Mathlib, but I'm very far away from that stage.</p>",
        "id": 393795029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695930622
    },
    {
        "content": "<p>Everybody should feel free to play this challenge. Here is one recorded attempt: <br>\n<a href=\"/user_uploads/3121/jh0AvACIf-axFWjvNNhSozTt/lake.gif\">lake.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jh0AvACIf-axFWjvNNhSozTt/lake.gif\" title=\"lake.gif\"><img src=\"/user_uploads/3121/jh0AvACIf-axFWjvNNhSozTt/lake.gif\"></a></div>",
        "id": 393795749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695930908
    },
    {
        "content": "<p>By the way, I don't understand why cloning mathlib4 is so painfully slow, but lake not displaying anything doesn't help to know whether something is happening or the whole thing stopped.</p>",
        "id": 393796213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695931102
    },
    {
        "content": "<p>Maybe update the mathlib git hash in the lakefile and then copy mathlib's lean-toolchain before the <code>lake update</code>?</p>",
        "id": 393798303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695931898
    },
    {
        "content": "<p>Just tried -- still getting \"warning: improperly formatted manifest: incompatible manifest version <code>4</code>\" and, like you, <code>error: no such file or directory ../../../Math2001.lean</code></p>",
        "id": 393798923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695932174
    },
    {
        "content": "<p>The <code>error: no such file or directory ../../../Math2001.lean</code> is not lake's fault, this project is indeed malformed from this perspective.</p>",
        "id": 393799084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695932282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> You were right on track! All that was left to do was change the versions of mathlib (and maybe <code>cs22-lean-autograder</code>) mentioned in the lakefile (as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> suggested). Because they are currently fixed to a specific commit rather than a general branch (e.g., <code>master</code> for mathlib), <code>lake update</code> does not change them (it only updates to the latest revision on the branch specified). The  most streamlined process would be:</p>\n<ol>\n<li>Change <code>mathlib4</code> and <code>cs22-lean-autograder</code> to be <code>@ \"master\"</code></li>\n<li>Run <code>lake +leanprover-community/mathlib4:lean-toolchain update</code> (it will fail because mathlib's configuration is too new, but you will get the updated toolchain)</li>\n<li>Copy mathlib's <code>lean-toolchain</code> to <code>math2001</code></li>\n</ol>\n<p>In shell (tested on my Windows machine):</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>elan<span class=\"w\"> </span>self<span class=\"w\"> </span>update\n<span class=\"gp\">$ </span>git<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/hrmacbeth/math2001\n<span class=\"gp\">$ </span><span class=\"nb\">cd</span><span class=\"w\"> </span>math2001\n<span class=\"gp\">$ </span>sed<span class=\"w\"> </span>-i<span class=\"w\"> </span><span class=\"s1\">'s/@ .*/@ \"master\"/'</span><span class=\"w\"> </span>lakefile.lean<span class=\"w\">  </span><span class=\"c1\"># or sed -i '' 's/... on macOS</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>+leanprover-community/mathlib4:lean-toolchain<span class=\"w\"> </span>update\n<span class=\"gp\">$ </span>cp<span class=\"w\"> </span>lake-packages/mathlib/lean-toolchain<span class=\"w\"> </span>.\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># will fail because of the missing file</span>\n</code></pre></div>\n<p>Note that this will still produce an \"incompatible manifest version\" warning on the <code>lake update</code> because <code>cs22-lean-autograder</code>'s latest manifest is still on that version.</p>",
        "id": 393850522,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695961877
    },
    {
        "content": "<p>What are we supposed to do about this incompatible manifest warning? I saw it when trying and failing to update another project recently.</p>",
        "id": 393863567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695968720
    },
    {
        "content": "<p>I've just tried the above approach on another project and it's worked fine <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  I had not previously understood the importance of having the lakefile version of mathlib set to <code>master</code>.  In fact this also seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n</code></pre></div>\n<p>That was the state of the lakefile in my student's project (which must be the default because none of my students ever touch <code>lakefile.lean</code>).</p>\n<p>So in more laymany terms, the process for upgrading mathlib on a repo which depends (only) on mathlib is:</p>\n<p>1) check your lakefile doesn't point to specific mathlib commits. If it does, <code>lake update</code> won't do anything (and this is correct behaviour).<br>\n2) Manually copy some stupid text file from mathlib master for some reason<br>\n3) <code>lake update</code>, <code>lake exe cache get</code>, <code>lake build</code>.</p>\n<p>We can clearly still do a little better here, but this is currently the workflow for updating a math-only project which depends on mathlib (the only use case that I or 99% of my students ever care about).</p>\n<p>Note that in Lean 3, step 2 wasn't there and step 3 didn't have as many parts.</p>",
        "id": 393874988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695972532
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113489-new-members/topic/lake.20build.20issues/near/393806475\">users failing to do (2)</a> (despite the fact that it's in the docs)</p>",
        "id": 393881318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695974885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393874988\">said</a>:</p>\n<blockquote>\n<p>In fact this also seems to work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yep! Lake defaults a dependency's revision  to <code>master</code> (the Git default) unless otherwise specified. This works great for mathlib, but not, for example, <code>std4</code>, whose default branch is <code>main</code>.</p>",
        "id": 393881597,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695975013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393863567\">said</a>:</p>\n<blockquote>\n<p>What are we supposed to do about this incompatible manifest warning? I saw it when trying and failing to update another project recently.</p>\n</blockquote>\n<p>The ideal solutions is for the maintainer of the dependency to update their package to the new version. Good news is the warning only shows up on <code>lake update</code>, not a regular <code>lake build</code>.</p>",
        "id": 393881780,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695975112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> thanks for your explanations. Of course I tried that modification of the lakefile in other attempts. The trick I was missing was the next step: <code>lake +leanprover-community/mathlib4:lean-toolchain update</code>.</p>",
        "id": 393928357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695993121
    },
    {
        "content": "<p>And that magic line isn't so magic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">math2001</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"o\">:</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">update</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">Error</span><span class=\"o\">(</span><span class=\"n\">Download</span><span class=\"o\">(</span><span class=\"n\">HttpStatus</span><span class=\"o\">(</span><span class=\"mi\">404</span><span class=\"o\">)),</span> <span class=\"n\">State</span> <span class=\"o\">{</span> <span class=\"n\">next_error</span><span class=\"o\">:</span> <span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">backtrace</span><span class=\"o\">:</span> <span class=\"n\">InternalBacktrace</span> <span class=\"o\">{</span> <span class=\"n\">backtrace</span><span class=\"o\">:</span> <span class=\"n\">None</span> <span class=\"o\">}</span> <span class=\"o\">})</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">download</span> <span class=\"n\">nonexistent</span> <span class=\"n\">lean</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">-</span><span class=\"n\">mathlib4</span><span class=\"bp\">-</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span><span class=\"bp\">`</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">caused</span> <span class=\"kd\">by</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">download</span> <span class=\"n\">file</span> <span class=\"k\">from</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">releases</span><span class=\"bp\">/</span><span class=\"n\">expanded_assets</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain'</span> <span class=\"n\">to</span> <span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">vbdgprsl_06qst0e_file'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">caused</span> <span class=\"kd\">by</span><span class=\"o\">:</span> <span class=\"n\">http</span> <span class=\"n\">request</span> <span class=\"n\">returned</span> <span class=\"n\">an</span> <span class=\"n\">unsuccessful</span> <span class=\"n\">status</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">404</span>\n</code></pre></div>",
        "id": 393928503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695993160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Ah, you may have an out-of-date elan, what does <code>elan --version</code> return?  (It should be 3.0.0). I will add <code>elan self update</code> to the cheat sheet.</p>",
        "id": 393928889,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695993312
    },
    {
        "content": "<p>Ok, <code>elan self update</code> removes that error.</p>",
        "id": 393928965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695993342
    },
    {
        "content": "<p>But that command still ends with <code>warning: improperly formatted manifest: incompatible manifest version `4</code></p>",
        "id": 393929075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695993369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Yeah. That is because <code>cs22-lean-autograder</code>'s latest manifest is still on that version. The update still properly completes, though.</p>",
        "id": 393929720,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695993616
    },
    {
        "content": "<p>It seems that warning can be ignored. So let's say we are talking about a project which already requires mathlib's master in its lakefile. The process to update to the latest Lean+Mathlib is to run from the project root:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">self</span> <span class=\"n\">update</span>\n<span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"o\">:</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">update</span>\n<span class=\"n\">cp</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">.</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n</code></pre></div>\n<p>and ignore all warnings along the way, right?</p>",
        "id": 393929855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695993682
    },
    {
        "content": "<p>Do you then understand why users are baffled when they read \"the FRO now wants to build <a href=\"http://crates.io\">crates.io</a> for Lean\" instead of reading \"the FRO now wants to make sure you can update Mathlib by running a single command <code>lake update_mathlib</code>\"?</p>",
        "id": 393929888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695993691
    },
    {
        "content": "<p>We simply don't understand the rationale of priorities here.</p>",
        "id": 393930052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695993745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> since all this is already quite a bit of work I opened a PR at <a href=\"https://github.com/hrmacbeth/math2001/pull/3\">https://github.com/hrmacbeth/math2001/pull/3</a> but I didn't fix anything else. In particular the first error is Qq related, so we may need some help.</p>",
        "id": 393931214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695994115
    },
    {
        "content": "<p>I don't think we need <code>lake update_mathlib</code>, the behavior you're asking for should just be the behavior of <code>lake update</code> if we implement the mathlib-agnostic <a href=\"https://github.com/leanprover/lake/issues/180\">https://github.com/leanprover/lake/issues/180</a></p>",
        "id": 393931972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695994366
    },
    {
        "content": "<p>The name I made up is my effort to not get in the way of people who don't care about Mathlib. But I'd be happy to have it called <code>lake update</code> of course.</p>",
        "id": 393932253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695994462
    },
    {
        "content": "<p>That would solve the middle 2 commands but still leave the first and last, no? (I +1'ed it though)</p>",
        "id": 393932268,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695994467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, I am not sure if that meets <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>'s desires (but maybe he will correct it me?). It sounds like he wants <code>lake update_mathlib</code> to do all of these steps. <a href=\"https://github.com/leanprover/lake/pull/180\">lake#180</a> would just eliminate the toolchain copying (not the other steps).</p>",
        "id": 393932378,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695994510
    },
    {
        "content": "<p>The first one also seems like a bug; but you're right about the last one; <code>update_mathlib</code> could be <code>update</code> + <code>exe cache get</code></p>",
        "id": 393932393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695994513
    },
    {
        "content": "<p>What does the <code>+leanprover-community/mathlib4:lean-toolchain</code>mean in the second line, and why is it needed?</p>",
        "id": 393932607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695994582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393932607\">said</a>:</p>\n<blockquote>\n<p>What does the <code>+leanprover-community/mathlib4:lean-toolchain</code>mean in the second line, and why is it needed?</p>\n</blockquote>\n<p>It is used to ensure the lake being used is the version from mathlib's lean-toolchain.</p>",
        "id": 393932750,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695994642
    },
    {
        "content": "<p>Mac, I don't understand why you seem unsure about my desires. What is difficult to understand in \"I want to type only one command that is short and easy to remember and then things should <em>simply work</em>\".</p>",
        "id": 393932782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695994657
    },
    {
        "content": "<p>Also I'm not talking about science fiction. <code>leanproject upgrade-mathlib</code> used to do that in Lean 3.</p>",
        "id": 393933273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695994855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> We certainly do want to simplify the process! <a href=\"https://github.com/leanprover/lake/pull/180\">lake#180</a> is high priority (eliminating the toolchain copy) and the <a href=\"http://crates.io\">crates.io</a> clone is in part designed to facilitate a general integrated Lake cache (eliminating <code>lake exe cache get</code>). Also,  I would note that even in Rust, which is a major inspiration, updating everything still takes at least three commands:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">rustup</span> <span class=\"n\">update</span>\n<span class=\"bp\">$</span> <span class=\"n\">cargo</span> <span class=\"n\">update</span>\n<span class=\"bp\">$</span> <span class=\"n\">cargo</span> <span class=\"n\">build</span>\n</code></pre></div>",
        "id": 393933292,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695994864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> this is one of the instances of the \"Lake doing specific mathlib things\" vs \"Lake is the package manager of a general purpose programming language\" conflict that I've mentioned once</p>",
        "id": 393933579,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695994989
    },
    {
        "content": "<p>My 2c: Mathlib is free to implement a <code>lake run update_mathlib</code> script (and much more)</p>",
        "id": 393933795,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695995066
    },
    {
        "content": "<p>Mac, I'm happy to learn than <code>leanproject</code> was better than the rust system, but I don't why it would mean we should regress that much compared to Lean 3.</p>",
        "id": 393933851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695995089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> And I am still boggled as to why mathlib doesn't just make its convenient <code>lake</code> one-liners via custom code in its lakefile like <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> suggested (and I gave an example of in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7282\">mathlib4#7282</a>).</p>",
        "id": 393934224,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695995206
    },
    {
        "content": "<p>Arthur I really don't see why we need a conflict here. I don't why having a general purpose programming language prevents use with mathlib to be simple.</p>",
        "id": 393934249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695995217
    },
    {
        "content": "<p>(I don't think leanprover updated itself either, did it?)</p>",
        "id": 393934304,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695995239
    },
    {
        "content": "<p>Mac, that <a href=\"https://github.com/leanprover-community/mathlib4/pull/7282\">#7282</a> is labelled awaiting-author.</p>",
        "id": 393934465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695995293
    },
    {
        "content": "<p>Ruben, it didn't but it was also backward compatible (and it was easy to update if you had a working python setup).</p>",
        "id": 393934530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695995327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393934249\">said</a>:</p>\n<blockquote>\n<p>Arthur I really don't see why we need a conflict here. I don't why having a general purpose programming language prevents use with mathlib to be simple.</p>\n</blockquote>\n<p>It's all about API design. I don't think Lake should implement specific mathlib (or any other project) things because that can backfire pretty hard.<br>\nThe role of Lake in this case is to provide everything <em>any</em> project needs to be as autonomous as possible. Lake already allows users to implement custom scripts like the one I suggested and even custom compiled binaries (like <code>Cache</code>)</p>",
        "id": 393934754,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695995405
    },
    {
        "content": "<p>My suggestions in these scenarios are always empowering. Mathlib can run free, without relying on Mac/Lake implementations</p>",
        "id": 393934976,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695995481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393934465\">said</a>:</p>\n<blockquote>\n<p>Mac, that <a href=\"https://github.com/leanprover-community/mathlib4/pull/7282\">#7282</a> is labelled awaiting-author.</p>\n</blockquote>\n<p>Yes, it was made as an example to demonstrate these kinds of features could be done on the mathlib side. I sadly have too many other things  requiring my attention to devote too much time making these tools myself (when someone else could do so). As <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> suggested, the goal of Lake is to make these things doable on the package side and only involve changes to Lake / core when such a thing is infeasible user-side.</p>",
        "id": 393935016,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695995496
    },
    {
        "content": "<p>Not sure if \"more ideas\" are what's needed but has adding a post-update hook to lake been considered (i.e. something you can define in a lakefile which it calls post update)? And then mathlib could/would presumably want to run the cache getting in it, but users would still see it as running <code>lake update</code> same as any other general project -- to me it does seem a bit uncomfortable if the \"biggest\" project in the language has a totally different UI than others (because I think mathlib would be telling anyone contributing to it to essentially never run <code>lake update</code>)</p>",
        "id": 393936116,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695995858
    },
    {
        "content": "<p>(This of course again recalls the situation in Python ~15 years ago, where it was common to override <code>distutils</code> commands to make them do more stuff...)</p>",
        "id": 393936354,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695995933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393932750\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393932607\">said</a>:</p>\n<blockquote>\n<p>What does the <code>+leanprover-community/mathlib4:lean-toolchain</code>mean in the second line, and why is it needed?</p>\n</blockquote>\n<p>It is used to ensure the lake being used is the version from mathlib's lean-toolchain.</p>\n</blockquote>\n<p>What version would be used otherwise?</p>",
        "id": 393936385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995943
    },
    {
        "content": "<p>And are you talking about the version of mathlib before the update or after the update?</p>",
        "id": 393936445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995967
    },
    {
        "content": "<p>Because I would expect the mathlib toolchain version before the update to be the same as the current project toolchain version</p>",
        "id": 393936527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995999
    },
    {
        "content": "<p>Eric I think otherwise it'd use <del>your own default toolchain locally</del> the one from the current <code>lean-toolchain</code> file (and I think it tells elan to use the remote one, it's special syntax I think Sebastian added to address precisely this kind of issue if I followed the original thread correctly)</p>",
        "id": 393936745,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695996052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393936385\">said</a>:</p>\n<blockquote>\n<p>What version would be used otherwise?</p>\n</blockquote>\n<p>Either the project's <code>lean-toolchain</code> (if it has one, as you surmised) or the elan's default toolchain (whatever version that may happen to point to). Thus, for instructions like this it is worth fixing the one we want to use.</p>\n<blockquote>\n<p>And are you talking about the version of mathlib before the update or after the update?</p>\n</blockquote>\n<p>It uses the one directly from mathlib's master branch on GitHub.</p>",
        "id": 393937010,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695996126
    },
    {
        "content": "<p>(TL;DR: exactly what Julian said <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 393937111,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695996161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393936116\">said</a>:</p>\n<blockquote>\n<p>Not sure if \"more ideas\" are what's needed but has adding a post-update hook to lake been considered</p>\n</blockquote>\n<p>This is a great idea that could potentially solve all this and is rather easy to implement! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  Would you mind making an issue for it?</p>",
        "id": 393937398,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695996254
    },
    {
        "content": "<p>Can lake bootstrap itself as follows?</p>\n<ul>\n<li>Looking at the dependencies it was asked to update</li>\n<li>Getting the newest among all the toolchains</li>\n<li>Re-running the new version of itself at that toolchain</li>\n</ul>",
        "id": 393938165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695996512
    },
    {
        "content": "<p>The fact that old lake can't update to a project that uses new lake seems pretty unfortunate</p>",
        "id": 393938238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695996542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> let me try to be explicit about why Lake being too specific about Mathlib is a bad general design decision and not just poor willingness.</p>\n<p>Mathlib is a Lean 4 project that uses Lake as the package manager and build tool. So Mathlib depends on the API that Lake provides. If Lake starts making assumptions about specific needs of Mathlib, it's easy to imagine a situation of incompatibility: Mathlib changes while maintaining the same Lake version and then the Lake API fails due to wrong assumptions.</p>\n<p>Here's an example: Lake currently assumes a hardcoded URL for the mathlib4 repo (<code>lake new foo math</code>). If that URL changes (say the community migrates away from GitHub due to some evil decision from Microsoft or something), then we have a generation of cursed Lake versions</p>",
        "id": 393938476,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695996636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393937398\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393936116\">said</a>:</p>\n<blockquote>\n<p>Not sure if \"more ideas\" are what's needed but has adding a post-update hook to lake been considered</p>\n</blockquote>\n<p>This is a great idea that could potentially solve all this and is rather easy to implement! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  Would you mind making an issue for it?</p>\n</blockquote>\n<p>Done at <a href=\"https://github.com/leanprover/lake/issues/185\">https://github.com/leanprover/lake/issues/185</a> with a tiny bit more detail</p>",
        "id": 393941471,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695997455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I think you're responding mostly to Patrick's suggestion of \"<code>lake update_mathlib</code>\" right? His primary desire isn't for Lake to be made mathlib-specific, but rather that there is some single command (ideally <code>lake update</code> even) that does what's necessary to update dependencies and the toolchain. He mentions \"<code>lake update_mathlib</code>\" as an \"I'd accept this alternative if somehow that's what it takes to get this.\"</p>\n<p>Having Lake be a package manager of a general purpose programming language doesn't mean the basic interaction for things like updating dependencies has to be inconvenient. Just like how it's not good making something general cater to a specific project, it's also not good if every project needs to add their own custom scripts to fill in common missing user-friendliness. This I think is what Patrick is getting at.</p>\n<p>There just seems to be some miscommunication here, and I hope I'm accurate in how I'm representing Patrick.</p>",
        "id": 393944050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695998296
    },
    {
        "content": "<p>I agree that <code>lake update</code> UX is strange. My impression is that it boils down to Lean 4 project versions not having explicit semantics about an order. For example, <code>cargo update</code> works nicely because packages use semantic versioning rather than a git hash (and <code>cargo</code> knows about this ordering)</p>",
        "id": 393945071,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695998656
    },
    {
        "content": "<p>For example, Suppose my project depends on packages A and B. And both of them depend on C.<br>\nC has two versions: C1 and C2.<br>\nA depends on C1 and is incompatible with C2. B would work with either.<br>\nWhat should <code>lake update</code> do? How would it know that using C2 is not allowed?</p>",
        "id": 393946272,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695999042
    },
    {
        "content": "<p>In 99.9% of cases involving mathematicians, your project <strong>does not</strong> depend on such packages</p>",
        "id": 393947659,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695999518
    },
    {
        "content": "<p>The goal is to have a foolproof interface for people who don't paint themselves in a corner like that</p>",
        "id": 393947781,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695999572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393946272\">said</a>:</p>\n<blockquote>\n<p>For example, Suppose my project depends on packages A and B. And both of them depend on C.<br>\nC has two versions: C1 and C2.<br>\nA depends on C1 and is incompatible with C2. B would work with either.<br>\nWhat should <code>lake update</code> do? How would it know that using C2 is not allowed?</p>\n</blockquote>\n<p>Note that the current issues people are facing with <code>lake update</code> are not caused by version mismatches in dependent <em>packages</em>; they're caused by version mismatches in the version of lean itself, which to make matters worse is linked to the version of the package manager metadata</p>",
        "id": 393950773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696000444
    },
    {
        "content": "<p>In my experience managing Lean 4 packages, I've always set it all up so that <code>lake update</code> is a no-op</p>",
        "id": 393952493,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1696000936
    },
    {
        "content": "<p>I don't see how that can possibly be the intended way to use <code>lake</code></p>",
        "id": 393952577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696000966
    },
    {
        "content": "<p>It's the only way I found to avoid headaches of this kind</p>",
        "id": 393952863,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1696001046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393929855\">said</a>:</p>\n<blockquote>\n<p>It seems that warning can be ignored. So let's say we are talking about a project which already requires mathlib's master in its lakefile. The process to update to the latest Lean+Mathlib is to run from the project root:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">self</span> <span class=\"n\">update</span>\n<span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"o\">:</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">update</span>\n<span class=\"n\">cp</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">.</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n</code></pre></div>\n<p>and ignore all warnings along the way, right?</p>\n</blockquote>\n<p>This <code>cp lake-packages/mathlib/lean-toolchain .</code> might fail if your local version of mathlib is not up to date with origin/master, right? When I was experimenting earlier I pulled mathlib master from origin locally. </p>\n<p>Or is this what <code>lake +leanprover-community/mathlib4:lean-toolchain update</code> does? I have no understanding of that line.</p>",
        "id": 393953240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696001171
    },
    {
        "content": "<p><code>+leanprover-community/mathlib4:lean-toolchain</code> means \"before you run lake update, let me manually tell you which version of lake you will need in order to do the update\"</p>",
        "id": 393953357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696001212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393941471\">said</a>:</p>\n<blockquote>\n<p>Done at <a href=\"https://github.com/leanprover/lake/issues/185\">https://github.com/leanprover/lake/issues/185</a> with a tiny bit more detail</p>\n</blockquote>\n<p>And a simple implementation is now at <a href=\"https://github.com/leanprover/lean4/pull/2603\">lean4#2603</a>. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 393953541,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696001281
    },
    {
        "content": "<p>I think there are three pieces and they're all currently separate:</p>\n<ol>\n<li>Update the dependent packages in a project (the stuff in <code>lake-packages</code>). I think this all just works now, but was painful before</li>\n<li>Update the lean-toolchain of the project to match the things that were updated (<a href=\"https://github.com/leanprover/lake/pull/180\">lake#180</a>)</li>\n<li>Using a suitable lean-toolchain to run lake itself such that it can actually understand how to do step 1</li>\n</ol>",
        "id": 393953819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696001340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393952493\">said</a>:</p>\n<blockquote>\n<p>In my experience managing Lean 4 packages, I've always set it all up so that <code>lake update</code> is a no-op</p>\n</blockquote>\n<p>Arthur you are a very savvy Lean user. What Patrick and I are desperate to get is something which <em>just works</em> for all of e.g. my summer project users, every single one of which (apart from one) just has a default <code>lakefile.lean</code> which they never opened and have no understanding of, and which just has one dependency which is mathlib master. What we're trying to stress is that in practice right now quite possibly the majority of Lean projects which exist currently actually do look like this, and even if Lean gets popular in other areas it will still be the case that for years and years any mathematics student doing a summer project or an MSc project or a BSc project or any other project will 99 times out of 100 be in exactly the same situation: one project, depends on mathlib, depends on nothing else. Support for updating these project which does not involve \"now copy a text file from mathlib which you don't even have installed\" or \"now run curl on the command line which curl doesn't work on and you have no idea why\" is what those of us actively teaching in the mathematics community would really like to have. Copying a text file is much harder than you think. Let me stress this. I work with people who have no idea what a directory is.</p>",
        "id": 393955637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696001846
    },
    {
        "content": "<p>I'm not claiming that you should do the same as me. I'm just expressing a pain point which made me avoid <code>lake update</code> altogether. Or at least make it harmless.<br>\nI'm not a fan of the manual <code>cp</code> workaround either</p>",
        "id": 393957360,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1696002507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393955637\">said</a>:</p>\n<blockquote>\n<p>Copying a text file is much harder than you think. Let me stress this. I work with people who have no idea what a directory is.</p>\n</blockquote>\n<p>Now this suggests to me that the Lake CLI might not be the best place to simplify the process then. For such users, I imagine handling this in the IDE (i.e., via the VSCode extension) would be the most preferable place. A topic which I believe has already broached in a different thread (and some such features Marc suggested could already be coming soon).</p>",
        "id": 393957809,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696002681
    },
    {
        "content": "<p>Yeah I would love to get mathematician users away from the command line completely! :-) But given that we're stuck with it for now I'd like them to have to type as little as possible :-)</p>",
        "id": 393958361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696002899
    },
    {
        "content": "<p>and in particular, not for certain things they type to make it much harder to undo with the right thing</p>",
        "id": 393959925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696003337
    },
    {
        "content": "<p>While I generally agree that it would be nice to make the UX as nice as possible for mathematicians who don't want to use a command line, at some point I think we need to expect people to know how to use a computer.</p>",
        "id": 393959930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696003338
    },
    {
        "content": "<p>in my experience, there is always a really short list of things you have to type to get a working setup. It's just that what precisely that is seems to change every once in a while, and you have to add more things to it depending on how much you trust your configuration (i.e. are we needing to reinstall lake here? elan? windows?)</p>",
        "id": 393960549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696003469
    },
    {
        "content": "<p>You don't need to know about concepts such as directories to use a computer any more. This is a relatively recent development.</p>",
        "id": 393960575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696003475
    },
    {
        "content": "<p>Yeah, I guess the definition of \"computer\" has changed. Personally I think we should invest more into online solutions that don't require any installation whatsoever, since people who don't know what a directory is are probably most comfortable in a browser anyway</p>",
        "id": 393961088,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696003577
    },
    {
        "content": "<p>Especially based on my LftCM experience where local installation was broken for many people due to their antivirus trying to protect them, which I don't think we can do much about</p>",
        "id": 393961993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696003811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, thanks a lot for trying to improve on this. I'm sorry I disappeared from the discussion, I'm very busy since the end of this morning.</p>",
        "id": 394033483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696039822
    },
    {
        "content": "<p>Does lake have a way to turn off the post-update hook? This is causing major problems for mathport, which now frequently runs out of space in CI: <a href=\"https://github.com/leanprover-community/mathport/actions/workflows/build.yml\">https://github.com/leanprover-community/mathport/actions/workflows/build.yml</a></p>",
        "id": 402522283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700156084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 402522484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700156162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Sadly, no. I am little confused as to what is doing wrong. It was my understanding that mathlib always needed a fetched cache? One fix would be to add an <code>fetchCacheOnUpdate</code> config flag to mathlib.</p>",
        "id": 402531373,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700159404
    },
    {
        "content": "<p>I am still investigating, but I think the mathport CI is using <code>lake update</code> to update the manifest without building (and hence it has no need for oleans)</p>",
        "id": 402531583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700159500
    },
    {
        "content": "<p>The <code>lean-toolchain</code> copy is good, but the <code>lake exe cache get</code> is unwanted at update time</p>",
        "id": 402531786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700159565
    },
    {
        "content": "<p>that should be a pre-<code>build</code> step, not a post-<code>update</code> step</p>",
        "id": 402531845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700159594
    },
    {
        "content": "<p>Yes, here's the update script: <a href=\"https://github.com/leanprover-community/lean3port/blob/master/update.sh\">https://github.com/leanprover-community/lean3port/blob/master/update.sh</a></p>\n<p>Notice that it runs <code>lake update</code> but not <code>lake build</code></p>",
        "id": 402532384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700159817
    },
    {
        "content": "<p>CI runs out of space while running it</p>",
        "id": 402532442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700159836
    },
    {
        "content": "<p>I'm wondering whether we should just have a custom version of <code>lake update</code> hacked together with <code>jq</code> instead, because it is difficult to keep these scripts working if <code>lake update</code> does arbitrary things</p>",
        "id": 402533060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700160076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Pre-install and post-install hooks are a very common property of package managers, so yes I think you should expect <code>lake update</code> to do arbitrary things.</p>",
        "id": 402547700,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700165384
    },
    {
        "content": "<p>Lake could have a configuration option to turn them off, though.</p>",
        "id": 402547823,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700165425
    },
    {
        "content": "<p>How do I just update though?</p>",
        "id": 402548092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700165524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/402531786\">said</a>:</p>\n<blockquote>\n<p>The <code>lean-toolchain</code> copy is good, but the <code>lake exe cache get</code> is unwanted at update time</p>\n</blockquote>\n<p>One of the main motivations of the post-update hook was to call <code>lake exe cache get</code> after <code>lake update</code> and such was specifically requested higher up in this same thread.</p>",
        "id": 402548124,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700165532
    },
    {
        "content": "<p>only lake knows how to do that properly</p>",
        "id": 402548130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700165538
    },
    {
        "content": "<p>I'm aware of that, but the appropriateness of this is unsurprisingly context dependent</p>",
        "id": 402548233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700165574
    },
    {
        "content": "<p>actually, could you point to where someone asked for <code>lake update</code> to run <code>lake exe cache get</code>? I don't see it from a cursory reading</p>",
        "id": 402548827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700165766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> In Julian's <a href=\"https://github.com/leanprover/lake/issues/185\">original proposal</a>, he did suggest named post-update hooks and a <code>--without-hook</code> option to solve this, which may appeal to you. I felt that starting with the simplest approach first and building up from there was best for this kind of very customizable feature.</p>",
        "id": 402548887,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700165794
    },
    {
        "content": "<p>I think an important part of having these hooks is being able to disable them</p>",
        "id": 402548981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700165837
    },
    {
        "content": "<p>There is:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393932393\">said</a>:</p>\n<blockquote>\n<p>The first one also seems like a bug; but you're right about the last one; <code>update_mathlib</code> could be <code>update</code> + <code>exe cache get</code></p>\n</blockquote>",
        "id": 402549009,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700165849
    },
    {
        "content": "<p>because otherwise you have removed the ability to do <code>lake update</code></p>",
        "id": 402549015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700165853
    },
    {
        "content": "<p>That is not asking <code>update</code> to do <code>lake exe cache get</code></p>",
        "id": 402549066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700165874
    },
    {
        "content": "<p>it's asking <code>update_mathlib</code> to do so</p>",
        "id": 402549128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700165886
    },
    {
        "content": "<p>And there is:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393929855\">said</a>:</p>\n<blockquote>\n<p>It seems that warning can be ignored. So let's say we are talking about a project which already requires mathlib's master in its lakefile. The process to update to the latest Lean+Mathlib is to run from the project root:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">self</span> <span class=\"n\">update</span>\n<span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"o\">:</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">update</span>\n<span class=\"n\">cp</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">.</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n</code></pre></div>\n<p>and ignore all warnings along the way, right?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393929888\">said</a>:</p>\n<blockquote>\n<p>Do you then understand why users are baffled when they read \"the FRO now wants to build <a href=\"http://crates.io\">crates.io</a> for Lean\" instead of reading \"the FRO now wants to make sure you can update Mathlib by running a single command <code>lake update_mathlib</code>\"?</p>\n</blockquote>\n<p>Which struck me as a desire for an all-in-one as well.</p>",
        "id": 402549172,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700165905
    },
    {
        "content": "<p>The <code>update_mathlib</code> command then became the post-update hook with this suggestion:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/393936116\">said</a>:</p>\n<blockquote>\n<p>Not sure if \"more ideas\" are what's needed but has adding a post-update hook to lake been considered (i.e. something you can define in a lakefile which it calls post update)? And then mathlib could/would presumably want to run the cache getting in it, but users would still see it as running <code>lake update</code> same as any other general project -- to me it does seem a bit uncomfortable if the \"biggest\" project in the language has a totally different UI than others (because I think mathlib would be telling anyone contributing to it to essentially never run <code>lake update</code>)</p>\n</blockquote>",
        "id": 402549296,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700165959
    },
    {
        "content": "<p>In any case, this is a critical issue which I would like to get into the next RC. Should I write up a PR for <code>--without-hooks</code> support in <code>lake update</code>?</p>",
        "id": 402550594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700166326
    },
    {
        "content": "<p>Hopefully <code>cache</code> can be better integrated into <code>build</code> such that it can be moved from post-update to pre-build, and then this won't be an issue (for mathlib, at least)</p>",
        "id": 402550839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700166404
    },
    {
        "content": "<p>but keeping them as separate steps is also not unreasonable; you still have to run <code>lake exe cache get</code> when switching branches</p>",
        "id": 402550959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700166457
    },
    {
        "content": "<p>removing the mathlib post-update hook would also solve this issue</p>",
        "id": 402551083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700166498
    },
    {
        "content": "<p>A compromise could be to have <code>lake update</code> not getting cache but <code>lake build</code> and, much more importantly, opening the project in VSCode would get the cache (with a message explaining why the user need to wait in the VSCode case).</p>",
        "id": 402551608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700166692
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8448\">#8448</a> makes <code>lake update -KnoCacheOnUpdate</code> work to avoid the <code>lake exe cache get</code> step</p>",
        "id": 402552062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700166850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm not sure I would even call that a compromise, that's the intended goal state</p>",
        "id": 402552115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700166878
    },
    {
        "content": "<p>No it isn't. After the <code>lake update</code> commands succeeds I expect my project to be usable. With that plan it is not yet usable. So I need to wait for <code>lake update</code> then open VSCode and wait again instead of waiting only once.</p>",
        "id": 402552270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700166956
    },
    {
        "content": "<p>In case you run <code>lake build</code> there is no difference. The waiting time is distributed differently but there are not more oscillation between acting and waiting.</p>",
        "id": 402552461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700167004
    },
    {
        "content": "<p>Actually <a href=\"https://github.com/leanprover-community/mathlib4/pull/8448\">#8448</a> doesn't work, apparently the <code>-K</code> flags are not honored? <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 402552833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700167132
    },
    {
        "content": "<p>Did you delete <code>lakefile.olean</code>?</p>",
        "id": 402553103,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700167244
    },
    {
        "content": "<p>FFFF</p>",
        "id": 402553123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700167251
    },
    {
        "content": "<p>..ahem</p>",
        "id": 402553154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700167265
    },
    {
        "content": "<p>but also no that doesn't help</p>",
        "id": 402553373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700167344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/402552270\">said</a>:</p>\n<blockquote>\n<p>No it isn't. After the <code>lake update</code> commands succeeds I expect my project to be usable. With that plan it is not yet usable. So I need to wait for <code>lake update</code> then open VSCode and wait again instead of waiting only once.</p>\n</blockquote>\n<p>After <code>lake update</code> your project will still not be usable, because your project hasn't been compiled yet, nor any other projects besides mathlib</p>",
        "id": 402553508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700167421
    },
    {
        "content": "<p>you actually do want to run <code>lake build</code>, we just need to make this command not unusable for mathlib-depending projects</p>",
        "id": 402553562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700167442
    },
    {
        "content": "<p>Using the <code>with</code> syntax in <code>require</code> works to set <code>-K</code> options but I guess there is no other way to pass <code>-K</code> options in the top level project to mathlib</p>",
        "id": 402554583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700167847
    },
    {
        "content": "<p>I think I will just use environment variables instead of <code>-K</code> options in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8448\">#8448</a></p>",
        "id": 402555413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700168146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/402554583\">said</a>:</p>\n<blockquote>\n<p>Using the <code>with</code> syntax in <code>require</code> works to set <code>-K</code> options but I guess there is no other way to pass <code>-K</code> options in the top level project to mathlib</p>\n</blockquote>\n<p>Yeah, configuration options are not currently inherited by upstream packages.</p>",
        "id": 402562124,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700171085
    },
    {
        "content": "<p>(I have been thinking about changing this.)</p>",
        "id": 402562180,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700171106
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯<span class=\"w\"> </span>lake<span class=\"w\"> </span>update\nupdating<span class=\"w\"> </span>lake-packages/mathlib<span class=\"w\"> </span>to<span class=\"w\"> </span>revision<span class=\"w\"> </span>81e04e3518080a288dfa9a490c048e08ab890cb0\nerror:<span class=\"w\"> </span>./lake-packages/mathlib/lakefile.lean:28:2:<span class=\"w\"> </span>error:<span class=\"w\"> </span><span class=\"s1\">'weakLeanArgs'</span><span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>a<span class=\"w\"> </span>field<span class=\"w\"> </span>of<span class=\"w\"> </span>structure<span class=\"w\"> </span><span class=\"s1\">'Lake.PackageConfig'</span>\nerror:<span class=\"w\"> </span>./lake-packages/mathlib/lakefile.lean:68:2:<span class=\"w\"> </span>error:<span class=\"w\"> </span><span class=\"s1\">'srcDir'</span><span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>a<span class=\"w\"> </span>field<span class=\"w\"> </span>of<span class=\"w\"> </span>structure<span class=\"w\"> </span><span class=\"s1\">'Lake.LeanExeConfig'</span>\nerror:<span class=\"w\"> </span>./lake-packages/mathlib/lakefile.lean:84:0:<span class=\"w\"> </span>error:<span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'add_decl_doc'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'custom_data'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_opaque_type'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_simp_like_tactic'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_syntax_cat'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,\n<span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'extern_lib'</span>,<span class=\"w\"> </span><span class=\"s1\">'family_def'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'lean_exe'</span>,<span class=\"w\"> </span><span class=\"s1\">'lean_lib'</span>,<span class=\"w\"> </span><span class=\"s1\">'library_data'</span>,<span class=\"w\"> </span><span class=\"s1\">'library_facet'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'module_data'</span>,<span class=\"w\"> </span><span class=\"s1\">'module_facet'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'package'</span>,<span class=\"w\"> </span><span class=\"s1\">'package_data'</span>,<span class=\"w\"> </span><span class=\"s1\">'package_facet'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'register_builtin_option'</span>,<span class=\"w\"> </span><span class=\"s1\">'register_option'</span>,<span class=\"w\"> </span><span class=\"s1\">'script'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span>,<span class=\"w\"> </span><span class=\"s1\">'target'</span>,<span class=\"w\"> </span><span class=\"s1\">'target_data'</span>,<span class=\"w\"> </span><span class=\"s1\">'theorem'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'unif_hint'</span>\nerror:<span class=\"w\"> </span>./lake-packages/mathlib/lakefile.lean:<span class=\"w\"> </span>package<span class=\"w\"> </span>configuration<span class=\"w\"> </span>has<span class=\"w\"> </span>errors\n</code></pre></div>\n<p>Did I do something stupid?</p>",
        "id": 403345903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700561136
    },
    {
        "content": "<p>Did you update the lean toolchain before that?</p>",
        "id": 403347007,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700561490
    },
    {
        "content": "<p>Nope</p>",
        "id": 403347253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700561564
    },
    {
        "content": "<p>I haven't updated a lean project in 6 months or so. What is the sequence of incantations that I should utter?</p>",
        "id": 403347353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700561599
    },
    {
        "content": "<p><code>lake -h update</code> didn't instruct me to do anything else beforehand</p>",
        "id": 403347399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700561614
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4</a> probably</p>",
        "id": 403348104,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700561842
    },
    {
        "content": "<p>Aha! That seems to do something different</p>",
        "id": 403348344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700561930
    },
    {
        "content": "<p>Ok, now I need to fix the build. But at least the update seems to work</p>",
        "id": 403351793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700563045
    }
]