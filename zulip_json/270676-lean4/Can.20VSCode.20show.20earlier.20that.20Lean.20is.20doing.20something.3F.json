[
    {
        "content": "<p>When opening a Lean file, it can take a while for Lean to start up and have executed the import commands so that it can start compiling the file. This is especially the case when the computer is slow and/or you import a lot of files (from Mathlib).</p>\n<p>I believe a large part of this time is spent on importing files. During this time, the user gets a signal at one moment that something is happening, which is that the yellow bars show up. Would it be possible to show a message <code>importing files...</code> or even better a semi-regularly updating message <code>imported xxx/yyyy files</code> that keeps track of the progress?</p>\n<p>This could have one added advantage. After changing the import commands or adding an import, Lean often takes multiple seconds importing files. It would be useful if during that time, the error message before that change is not shown anymore (and instead it says <code>imported xxx/yyyy files</code>). It is confusing for users to see something like <code>unknown package 'Mathli'</code> when Lean is still executing the <code>import Mathlib</code> command.</p>",
        "id": 403965936,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700831729
    },
    {
        "content": "<p>We should clearly distinguish between building dependencies and importing already-built dependencies. Currently we report progress for the latter. Could you give me a better idea of how expensive importing is on the machine in question, e.g. with <code>lake env time lean Mathlib.lean</code>?</p>",
        "id": 403967412,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700832278
    },
    {
        "content": "<p>I agree we should clearly distinguish between the two. In VSCode there is now a significant difference since the extension will prompt before rebuilding any files. But it would be bad if the new message causes confusion and makes people think \"blue squiggle under import means that something is going wrong\".</p>\n<p>This is after a freshly-downloaded <code>lake exe cache get</code>. This is on a pretty powerful laptop (Windows), some students have way older laptops. The first time is much slower for some reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Floris</span><span class=\"bp\">@</span><span class=\"n\">Dell</span><span class=\"bp\">-</span><span class=\"n\">E</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"o\">((</span><span class=\"n\">afce5534b...</span><span class=\"o\">))</span>\n<span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"n\">Mathlib.lean</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">0</span><span class=\"n\">m14.745s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">0</span><span class=\"n\">m0.000s</span>\n<span class=\"n\">sys</span>     <span class=\"mi\">0</span><span class=\"n\">m0.000s</span>\n\n<span class=\"n\">Floris</span><span class=\"bp\">@</span><span class=\"n\">Dell</span><span class=\"bp\">-</span><span class=\"n\">E</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"o\">((</span><span class=\"n\">afce5534b...</span><span class=\"o\">))</span>\n<span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"n\">Mathlib.lean</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">0</span><span class=\"n\">m3.803s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">0</span><span class=\"n\">m0.000s</span>\n<span class=\"n\">sys</span>     <span class=\"mi\">0</span><span class=\"n\">m0.000s</span>\n\n<span class=\"n\">Floris</span><span class=\"bp\">@</span><span class=\"n\">Dell</span><span class=\"bp\">-</span><span class=\"n\">E</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"o\">((</span><span class=\"n\">afce5534b...</span><span class=\"o\">))</span>\n<span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"n\">Mathlib.lean</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">0</span><span class=\"n\">m3.839s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">0</span><span class=\"n\">m0.000s</span>\n<span class=\"n\">sys</span>     <span class=\"mi\">0</span><span class=\"n\">m0.015s</span>\n</code></pre></div>",
        "id": 403970380,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700833454
    },
    {
        "content": "<p>Yes, the filesystem cache greatly helps with subsequent invocations</p>",
        "id": 403970598,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700833528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Can.20VSCode.20show.20earlier.20that.20Lean.20is.20doing.20something.3F/near/403967412\">said</a>:</p>\n<blockquote>\n<p>We should clearly distinguish between building dependencies and importing already-built dependencies</p>\n</blockquote>\n<p>Sorry for being unclear here, what I meant by that is that when reloading a file after editing a dependency as you described, it should be building and not importing that takes most of the time (at least, importing should not be any slower from the change). In which case it <em>should</em> already be the case that any previous errors are replaced with the build progress.</p>",
        "id": 403972099,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700834087
    },
    {
        "content": "<p>Executing the import statements takes multiple seconds (when importing a big chunk of mathlib), so editing them is a reliable way for the server to not update for multiple seconds. This is the case even if all imported files are already built.</p>",
        "id": 403973928,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700834729
    },
    {
        "content": "<p>Ah, understood. You're talking about changing the import statement itself, not the file behind it.</p>",
        "id": 403974614,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700834999
    },
    {
        "content": "<p>correct (edit: clarified in original message)</p>",
        "id": 403974793,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700835064
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8199\">#8199</a> would reduce this server startup time in/below mathlib by 20%</p>",
        "id": 403975482,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700835340
    }
]