[
    {
        "content": "<p>Another frequent problem of mine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idnn</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I want to get the same value <code>x</code> but of a definitionally-distinct type.<br>\nThe original type and the new type depend of values that are propositionally equal.</p>\n<p>I am aware of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">idnns</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"n\">n.succ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span>\n</code></pre></div>\n<p>but it doesn't work for most types I encounter, so no <code>↑</code> please.<br>\nI would like to know something that works in general:<br>\nI want to coerce a term to a type depending on propositionally-equal value.</p>",
        "id": 390906886,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694689995
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs#Fin.cast</a> ?</p>",
        "id": 390907105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694690085
    },
    {
        "content": "<p>And if you want the general solution, it's called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Eq.cast#doc\">docs#Eq.cast</a></p>",
        "id": 390907152,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694690105
    },
    {
        "content": "<p>I cannot find <code>Eq.cast</code> in Mathlib.</p>",
        "id": 390907306,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694690164
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.cast#doc\">docs#Equiv.cast</a> is the <code>Equiv</code> version</p>",
        "id": 390907406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694690213
    },
    {
        "content": "<p>I think its called just <code>cast</code> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#cast\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#cast</a></p>",
        "id": 390908111,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694690515
    },
    {
        "content": "<p>I am not sure I understand.<br>\nWhen I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">idnn</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">Nat.two_mul</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>it is incorrect because the middle term...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 390908636,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694690735
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">idnn</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.two_mul</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 390908794,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694690797
    },
    {
        "content": "<p>Can somebody further golf the term (the output) please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.TProd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idTP</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List.TProd</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">n.succ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.TProd</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Nat.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">List.TProd</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.range_succ_eq_map</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 390909526,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694691121
    },
    {
        "content": "<p>Untested: <code>cast (congr_arg _ (List.range_succ_eq_map n)) x</code></p>",
        "id": 390909910,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694691274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 390910412,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694691489
    }
]