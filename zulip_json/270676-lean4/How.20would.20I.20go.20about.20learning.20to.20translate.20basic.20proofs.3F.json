[
    {
        "content": "<p>My motivation for lean (for now) is to translate easy proofs that I know to lean. For example consider this, the sum of natural numbers from 0 to n is n*(n+1)/2. I am well aware of how to prove this rigorously. But how will I do it in lean? Or even more basic how would I translate this statement to lean? I looked through theorem proving in lean partially and I do get how to use tactics for simple propositional logic. But could someone guide me how to go about doing the example I gave, so that in the process I understand how to do many more proofs like it?</p>",
        "id": 345244517,
        "sender_full_name": "Sabbir Rahman",
        "timestamp": 1680038794
    },
    {
        "content": "<p>Here's the statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's n-1 not n+1 becaue <code>range n</code> is [0...(n-1)]. You'll not find much maths in Theorem Proving in Lean, you want to look at a more mathsy thing like <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a> or <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2023\">the course I'm currently teaching</a>.</p>",
        "id": 345247143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680039923
    },
    {
        "content": "<p>(note that the syntax used by Kevin is Lean 3 + mathlib, not Lean 4)</p>",
        "id": 345247324,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680039986
    },
    {
        "content": "<p>Oh apologies, I hadn't noticed the stream! All my suggestions are also Lean 3. I'm afraid there's very little publically available teaching material for mathlib + lean 4 right now. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> do you have anything public?</p>",
        "id": 345249316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680040853
    },
    {
        "content": "<p>Yup, here's that example in my lecture notes!<br>\n<a href=\"https://hrmacbeth.github.io/math2001/06_Induction.html#id11\">https://hrmacbeth.github.io/math2001/06_Induction.html#id11</a></p>",
        "id": 345249801,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680041047
    },
    {
        "content": "<p>I don't cover finsets though.</p>",
        "id": 345249843,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680041068
    },
    {
        "content": "<p>The Finset version in lean 4 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but you might be better off following a coherent course rather than just trying to solve random problems (says the person who learnt Lean by just solving random problems and then asking here when he got stuck)</p>",
        "id": 345250102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680041174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484770\">@Sabbir Rahman</span>, my lecture notes are designed for students who don't yet know how to do these \"easy proofs\" on paper, so I deliberately work in a somewhat special Lean dialect, using only a small subset of the tactics+theory available in mathlib.  There is still coverage of all the \"easy proofs\" in a standard course (or there will be when the semester finishes), but the approach is not always the conventional-in-mathlib approach.</p>",
        "id": 345254554,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680043115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20would.20I.20go.20about.20learning.20to.20translate.20basic.20proofs.3F/near/345254554\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"484770\">Sabbir Rahman</span>, my lecture notes are designed for students who don't yet know how to do these \"easy proofs\" on paper, so I deliberately work in a somewhat special Lean dialect, using only a small subset of the tactics+theory available in mathlib.  There is still coverage of all the \"easy proofs\" in a standard course (or there will be when the semester finishes), but the approach is not always the conventional-in-mathlib approach.</p>\n</blockquote>\n<p>Your notes seem very helpful, I'll try to follow them to familiarize with basic techniques. But I still have the question of how would I learn about new concepts? For example, here I needed big operators. How would I have learnt that summation translates to a big operator. Or perhaps one day I tried to prove something about probability distributions, how would I learn what the proper translation blocks are?</p>",
        "id": 345258130,
        "sender_full_name": "Sabbir Rahman",
        "timestamp": 1680044595
    },
    {
        "content": "<p>Right now you either ask in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> or you read teaching materials -- this is how you learn anything, right?</p>",
        "id": 345258992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680045004
    }
]