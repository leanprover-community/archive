[
    {
        "content": "<p>Is it true that all <code>lean_nat</code> related API does not \"consume\" the object except for those declared with <code>dec</code>?</p>",
        "id": 387485542,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693105021
    },
    {
        "content": "<p>I don't entirely understand the question, but I'll try to explain a bit -- for <code>x : Nat</code> there's two possible memory representations.</p>\n<ul>\n<li>If <code>x &lt; 2^63</code>, it is represented as the <code>uint64</code> value <code>(n &lt;&lt; 1) + 1</code></li>\n<li>If <code>x &gt;= 2^63</code> it is represented as a <code>lean_object*</code> which contains a libgmp int.</li>\n</ul>\n<p>So, since the objects might not be scalars, <code>lean_inc</code> and <code>lean_dec</code> are still called to maintain reference counts in the case where it's not scalar.</p>",
        "id": 387493189,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693110815
    },
    {
        "content": "<p>As far as I can tell, the answer is yes (I don't see any <code>lean_nat</code> functions containing <code>dec</code> except <code>lean_nat_dec_eq</code> which is an unrelated use of <code>dec</code>). I'll make a PR to update lean.h with more accurate borrowing annotations</p>",
        "id": 387493302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693110921
    },
    {
        "content": "<p>all the lean_nat functions I see take <code>b_lean_obj_arg</code>..? is there one that isn't accurate?</p>",
        "id": 387493757,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693111317
    },
    {
        "content": "<p><code>lean_nat_big_succ</code> takes <code>object*</code> for example</p>",
        "id": 387496044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693113250
    },
    {
        "content": "<p>oh, all the lean_nat_big functions, i see</p>",
        "id": 387496917,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693114183
    }
]