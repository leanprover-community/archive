[
    {
        "content": "<p>Haskell supports custom concrete syntax in quasiquotations accepting user-supplied parsers.</p>\n<p>Does anything like this exists in Lean 4?</p>\n<p>If no, which approaches I'd may try to emulate this mechanism?</p>\n<p>Any links and explanations would be greatly appreciated.</p>",
        "id": 391479368,
        "sender_full_name": "Kyra Brian",
        "timestamp": 1694945132
    },
    {
        "content": "<p>Do you want a <code>Syntax</code> quotation or an <code>Expr</code> quotation?</p>",
        "id": 391491982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694951531
    },
    {
        "content": "<p>Could you give an example of what you want to do? </p>\n<p>Lean does give you quasiquoters for user-defined parsers. It let's you use quasiquotations both for generating syntax and for matching against syntax.</p>",
        "id": 391493653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694952281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Haskell-like.20custom.20parsers.20in.20quasiquotations.3F/near/391493653\">said</a>:</p>\n<blockquote>\n<p>Could you give an example of what you want to do? </p>\n<p>Lean does give you quasiquoters for user-defined parsers. It let's you use quasiquotations both for generating syntax and for matching against syntax.</p>\n</blockquote>\n<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">getTimeDef</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">cedecl</span><span class=\"bp\">|</span>\n      <span class=\"n\">double</span> <span class=\"n\">get_time</span><span class=\"o\">()</span>\n      <span class=\"o\">{</span>\n          <span class=\"n\">struct</span> <span class=\"n\">timeval</span> <span class=\"n\">t</span><span class=\"bp\">;</span>\n          <span class=\"n\">struct</span> <span class=\"n\">timezone</span> <span class=\"n\">tzp</span><span class=\"bp\">;</span>\n          <span class=\"n\">gettimeofday</span><span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">&amp;</span><span class=\"n\">tzp</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n          <span class=\"n\">return</span> <span class=\"n\">t.tv_sec</span> <span class=\"bp\">+</span> <span class=\"n\">t.tv_usec</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">;</span>\n      <span class=\"o\">}</span>\n      <span class=\"bp\">|</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is a real-life example (from Haskell  <code>imperative-edsl</code> package, which uses <code>language-c-quote</code> package), and it may contain another nested quasiquotes and antiquotes too.</p>\n<p><code>cedecl</code> is a custom parser, which parses C code and returns a Haskell-defined C AST.</p>\n<p>And <code>language-c-quote</code> package provides several other C parsers for other C-fragments, which return the same Haskell-defined C AST data.</p>",
        "id": 391531359,
        "sender_full_name": "Kyra Brian",
        "timestamp": 1694966459
    },
    {
        "content": "<p>Does <a href=\"https://leanprover.github.io/lean4/doc/syntax_example.html\">https://leanprover.github.io/lean4/doc/syntax_example.html</a> help?</p>",
        "id": 391535930,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694968163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255221\">@Kyra Brian</span> I've used <code>cedecl</code> long ago, and yeah, that's within the purview of Lean's metaprogramming abilities. You could potentially define a <code>cedecl(...)</code> elaborator that parses the <code>...</code> using a C parser and then turns it into a Lean-defined C AST. Sebastian linked to an example using macro-defined transformation rules, and you can write more elaborate transformations as needed.</p>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> seems to have written a C grammar in Lean <a href=\"https://github.com/tydeu/lean4-alloy\">here</a></p>",
        "id": 391560067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694978409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Haskell-like.20custom.20parsers.20in.20quasiquotations.3F/near/391535930\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://leanprover.github.io/lean4/doc/syntax_example.html\">https://leanprover.github.io/lean4/doc/syntax_example.html</a> help?</p>\n</blockquote>\n<p>Yes, exactly. Thanks!</p>",
        "id": 391618178,
        "sender_full_name": "Kyra Brian",
        "timestamp": 1695012674
    },
    {
        "content": "<p>Exploring the theme further i've discovered <a href=\"https://github.com/opencompl/C-parsing-for-Lean4\">this</a> project.</p>\n<p>After several unsuccessful attempts to build it against 4.0 release and the latest 4.3 pre, I've recognized it requires <code>vcustom-tokens</code> branch by <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> .</p>\n<p>But the latter is 3 months old.</p>\n<p>Thus I wonder how it all is going to be developed further.</p>\n<p>Will the project be ported to \"vanilla\" Lean 4?</p>\n<p>Or will <code>vcustom-tokens</code> branch be eventually merged into the main Lean repo?</p>\n<p>Or something else?</p>",
        "id": 393930414,
        "sender_full_name": "Kyra Brian",
        "timestamp": 1695993875
    },
    {
        "content": "<blockquote>\n<p>Or will vcustom-tokens branch be eventually merged into the main Lean repo?</p>\n</blockquote>\n<p>Absolutely, there is an open PR for it. I'm just working on other things right now. But hearing people looking forward to it helps increase its priority a bit :)</p>",
        "id": 393935893,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695995771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Haskell-like.20custom.20parsers.20in.20quasiquotations.3F/near/393935893\">said</a>:</p>\n<blockquote>\n<p>But hearing people looking forward to it helps increase its priority a bit :)</p>\n</blockquote>\n<p>I that case, I should note that I am also looking forward to it. It would help a lot with my experimental embedded language DSLs!</p>",
        "id": 393937761,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695996372
    }
]