[
    {
        "content": "<p>Dear All,</p>\n<p>I understand very little of how <code>Syntax</code> works, so this question may be very confused -- I am trying to learn about it.</p>\n<p>If I create a <code>.lean</code> file and I want to extract from it the parsed syntax, how can I do that?  I found some functions in <code>Lean.Parser.Types</code> (e.g. <code>parseHeader</code> and <code>parseCommand</code>), but I imagine that there should be something that already takes a file path and directly returns the syntax object associated to it, right?  Can anyone point me in the right direction?</p>\n<p>Thanks!</p>",
        "id": 392336583,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695307457
    },
    {
        "content": "<p>Is it hiding in the info tree?</p>",
        "id": 392338404,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695308025
    },
    {
        "content": "<p>Matt, I know so little that I am not really sure how to use your hint...</p>",
        "id": 392338938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695308176
    },
    {
        "content": "<p>I reached the edge of my knowledge with that comment. But I know where to look next for an example: std linters (or maybe core linters...)</p>",
        "id": 392339116,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695308229
    },
    {
        "content": "<p>Ok, I am looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.InfoTree#doc\">docs#Lean.Elab.InfoTree</a> !</p>",
        "id": 392339241,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695308261
    },
    {
        "content": "<p>Ok, looking at <code>InfoTree</code>, it seems to store <code>Syntax</code> inside the <code>Info</code> nodes -- this is good progress!</p>\n<p>I'm moving on to the std linters now to get hints on how to produce <code>InfoTree</code>s!</p>",
        "id": 392340695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695308655
    },
    {
        "content": "<p>I edited the message above because it might be core linters I am thinking about</p>",
        "id": 392340792,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695308687
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.State#doc\">docs#Lean.Elab.Command.State</a> seems to store InfoTrees, so maybe in the end in the right monad it is simply <code>let infotree ← get</code>...  I find this so hard!</p>",
        "id": 392341918,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695309006
    },
    {
        "content": "<p>So, this is probably very roundabout, but does it seem ok?</p>\n<p>Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.runFrontend#doc\">docs#Lean.Elab.runFrontend</a> to get the environment, then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.mkState#doc\">docs#Lean.Elab.Command.mkState</a> to get the <code>Lean.Elab.Command.State</code> and from there tease out <code>infostate</code> and <code>trees</code> as needed.</p>",
        "id": 392342755,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695309248
    },
    {
        "content": "<p>I'm going to try and see if I get to the bottom of this before giving up for the day!</p>",
        "id": 392342962,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695309294
    },
    {
        "content": "<p>I have created a file called <code>A.lean</code> containing only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Then, in a separate file, I run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>  <span class=\"n\">Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myTrees</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Lean.Elab.Command.State</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">runFrontend</span> <span class=\"s2\">\"Mathlib/A.lean\"</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"s2\">\"Mathlib/A.lean\"</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"s2\">\"Mathlib\"</span><span class=\"o\">)</span> <span class=\"s2\">\"A\"</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">mkState</span> <span class=\"n\">env</span>\n  <span class=\"k\">let</span> <span class=\"n\">trees</span> <span class=\"o\">:=</span> <span class=\"n\">state.infoState.trees</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Number of trees: {trees.size}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">state</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">myTrees</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Mathlib/A.lean:1:0: error: unexpected identifier; expected command</span>\n\n<span class=\"cm\">Number of trees: 0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>What am I doing wrong?  Why are there 3 inputs to <code>runFrontend</code> that all feel like they should be the same file name?</p>",
        "id": 392348987,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695311066
    },
    {
        "content": "<p>What is <code>.empty</code>?</p>",
        "id": 392349140,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695311126
    },
    {
        "content": "<p><code>Option</code>s.  I did not know what to write there...</p>",
        "id": 392349185,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695311145
    },
    {
        "content": "<p>This is what <code>runFrontend</code> wants:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[export lean_run_frontend]</span>\n<span class=\"kd\">def</span> <span class=\"n\">runFrontend</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">Options</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mainModuleName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ileanFileName</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Environment</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n</code></pre></div>",
        "id": 392349292,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695311171
    },
    {
        "content": "<p>Ah, maybe input is what I read from the file!</p>",
        "id": 392349380,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695311202
    },
    {
        "content": "<p>I'll try <code>IO.FS.readFile</code> in that field!</p>",
        "id": 392349416,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695311216
    },
    {
        "content": "<p>Ok, the error is gone, but there are still no trees...</p>",
        "id": 392349522,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695311261
    },
    {
        "content": "<p>I don't understand what is going on.</p>\n<p>Lean seems to react to the content of the file and produces errors, if there are some.  However, it produces no infoTrees.</p>",
        "id": 392356599,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695313646
    },
    {
        "content": "<p>Got it!  I changed <code>runFrontend</code> to return the actual <code>State</code>, rather than the <code>Environment</code>.</p>\n<p>A posteriori, everything is obvious: the <code>Environment</code> discards the <code>Syntax</code> information, since it has completed its job.  Returning the <code>State</code> that it was in when it created the <code>Environment</code> remembers it!</p>",
        "id": 392359629,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695314821
    },
    {
        "content": "<p>For future reference, this is what I have and I can leave happy for the rest of the day!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Command</span>\n\n<span class=\"sd\">/--  Copied from `Lean.Elab.runFrontend`, the only difference is in the last line: the original has</span>\n<span class=\"sd\">`pure (s.commandState.env, !s.commandState.messages.hasErrors)`</span>\n<span class=\"sd\">instead of `pure s.commandState`. -/</span>\n<span class=\"kd\">@[export lean_run_frontend]</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_runFrontend</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">Options</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mainModuleName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ileanFileName</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Command.State</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">parserState</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">inputCtx</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">processHeader</span> <span class=\"n\">header</span> <span class=\"n\">opts</span> <span class=\"n\">messages</span> <span class=\"n\">inputCtx</span> <span class=\"n\">trustLevel</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env.setMainModule</span> <span class=\"n\">mainModuleName</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">commandState</span> <span class=\"o\">:=</span> <span class=\"n\">Command.mkState</span> <span class=\"n\">env</span> <span class=\"n\">messages</span> <span class=\"n\">opts</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">ileanFileName</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- Collect InfoTrees so we can later extract and export their info to the ilean file</span>\n    <span class=\"n\">commandState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">commandState</span> <span class=\"k\">with</span> <span class=\"n\">infoState.enabled</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">inputCtx</span> <span class=\"n\">parserState</span> <span class=\"n\">commandState</span>\n  <span class=\"n\">for</span> <span class=\"n\">msg</span> <span class=\"k\">in</span> <span class=\"n\">s.commandState.messages.toList</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.print</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">msg.toString</span> <span class=\"o\">(</span><span class=\"n\">includeEndPos</span> <span class=\"o\">:=</span> <span class=\"n\">getPrintMessageEndPos</span> <span class=\"n\">opts</span><span class=\"o\">))</span>\n\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ileanFileName</span> <span class=\"o\">:=</span> <span class=\"n\">ileanFileName</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">trees</span> <span class=\"o\">:=</span> <span class=\"n\">s.commandState.infoState.trees.toArray</span>\n    <span class=\"k\">let</span> <span class=\"n\">references</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Server.findModuleRefs</span> <span class=\"n\">inputCtx.fileMap</span> <span class=\"n\">trees</span> <span class=\"o\">(</span><span class=\"n\">localVars</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">ilean</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">mainModuleName</span><span class=\"o\">,</span> <span class=\"n\">references</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Server.Ilean</span> <span class=\"o\">}</span>\n    <span class=\"n\">IO.FS.writeFile</span> <span class=\"n\">ileanFileName</span> <span class=\"bp\">$</span> <span class=\"n\">Json.compress</span> <span class=\"bp\">$</span> <span class=\"n\">toJson</span> <span class=\"n\">ilean</span>\n\n  <span class=\"n\">pure</span> <span class=\"n\">s.commandState</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run_tac</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">my_runFrontend</span> <span class=\"o\">(</span><span class=\"s2\">\"#eval </span><span class=\"se\">\\\"</span><span class=\"s2\">hello!</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getOptions</span><span class=\"o\">)</span> <span class=\"s2\">\"whatFileIsThis?\"</span> <span class=\"bp\">`</span><span class=\"n\">whatNameIsThis</span><span class=\"bp\">?</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Number of trees: {state.infoState.trees.size}\"</span>\n  <span class=\"n\">trivial</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">\"hello!\"</span>\n\n<span class=\"cm\">Number of trees: 2</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 392363076,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695316134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, please look at <a href=\"https://github.com/semorrison/lean-training-data/blob/master/TrainingData/Frontend.lean\">https://github.com/semorrison/lean-training-data/blob/master/TrainingData/Frontend.lean</a> which gives a access to everything you might want from the frontend. :-) I would like to polish this and put it somewhere more findable, but hopefully you can extract something you like from it already.</p>",
        "id": 392423808,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695346748
    },
    {
        "content": "<p>Wow, thanks Scott!</p>\n<p>I am not going to be able to look at it before next week, but scanning the file it looks like it is extracting just the information that I wanted!</p>",
        "id": 392431456,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695351992
    },
    {
        "content": "<p>There is an off-by-one error still in the \"source for each declaration\" field, which I haven't fixed. Patches welcome!</p>",
        "id": 392432162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695352488
    },
    {
        "content": "<p>Is that related to the fact that the <code>.ilean</code>s also count from zero the number of lines?  Or are you referring to something else?  (I only looked at the code from my mobile, so my understanding is very shallow.)</p>",
        "id": 392432409,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695352660
    },
    {
        "content": "<p>Sorry, I haven't looked at it for a while. It should be easy to track down, it just an off-by-one error in the line counting, but I forgot to track it down.</p>",
        "id": 392438302,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695357095
    },
    {
        "content": "<p>(not even all the editors agree whether the first line is 0 or 1, if it's about that :) )</p>",
        "id": 392452747,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695366015
    },
    {
        "content": "<p>Ok, that's not a big deal: my internal convention is to start counting from 1, but I'm used to the unnatural convention of the natural numbers including 0.</p>",
        "id": 392457484,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695368025
    },
    {
        "content": "<p>Anyway, I'll look at it, but it may take me a while before I have some serious time to do it.</p>",
        "id": 392457606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695368062
    }
]