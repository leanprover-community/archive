[
    {
        "content": "<p><code>do</code> block is not able to coe the type when both <code>α γ</code> in <code>Except α γ</code> are different (but I feel should be able to coe) .</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ExitError</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">error1</span>\n<span class=\"bp\">|</span> <span class=\"n\">error2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ExitReason</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">ExitError</span> <span class=\"bp\">→</span> <span class=\"n\">ExitReason</span>\n<span class=\"bp\">|</span> <span class=\"n\">ok1</span> <span class=\"o\">:</span> <span class=\"n\">ExitReason</span>\n<span class=\"bp\">|</span> <span class=\"n\">ok2</span> <span class=\"o\">:</span> <span class=\"n\">ExitReason</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">ExitError</span> <span class=\"n\">ExitReason</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ExitReason.error</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">]:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">ExitError</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">ExitError</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">ExitError</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">aa</span> <span class=\"bp\">←</span> <span class=\"n\">f1</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">bb</span> <span class=\"bp\">←</span> <span class=\"n\">f2</span> <span class=\"n\">b</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"bp\">+</span> <span class=\"n\">bb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f4</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">ExitReason</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">aa</span> <span class=\"bp\">←</span> <span class=\"n\">f1</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">bb</span> <span class=\"bp\">←</span> <span class=\"n\">f2</span> <span class=\"n\">b</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"bp\">+</span> <span class=\"n\">bb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f5</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">ExitReason</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">aa</span> <span class=\"bp\">←</span> <span class=\"n\">f1</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">bb</span> <span class=\"bp\">←</span> <span class=\"n\">f2</span> <span class=\"n\">b</span> <span class=\"c1\">-- Error: type mismatch, How can I do here.</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"bp\">+</span> <span class=\"n\">bb</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406003678,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1701765605
    }
]