[
    {
        "content": "<p>Do we have a macro or elab thingy that elaborate to the Nat or whatever type of where they are in the source file?</p>",
        "id": 387351837,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693002868
    },
    {
        "content": "<p>I didn't see one in core, but here's at least something:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToExpr</span> <span class=\"n\">String.Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">toTypeExpr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">String.Pos</span> <span class=\"o\">[]</span>\n  <span class=\"n\">toExpr</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">String.Pos.mk</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">toExpr</span> <span class=\"n\">e.byteIdx</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"pos%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"n\">return</span> <span class=\"n\">toExpr</span> <span class=\"n\">r.getPos</span><span class=\"bp\">?</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">pos</span><span class=\"bp\">%</span>\n<span class=\"c1\">-- some { byteIdx := 243 } : Option String.Pos</span>\n</code></pre></div>",
        "id": 387354999,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693005415
    },
    {
        "content": "<p>Hmm, can we get a line and maybe a col number as well? Possibly even the file name? :D I want to write a thing that fails and says where it failed.</p>",
        "id": 387355065,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693005482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  Expanded example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.ElabRules</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"pos%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getPos</span><span class=\"bp\">?</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"no source info\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileMap</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPosition</span> <span class=\"n\">pos</span>\n  <span class=\"n\">return</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileName</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">pos</span><span class=\"bp\">%</span> <span class=\"c1\">-- (\"path/to/module.lean\", { line := 10, column := 6 })</span>\n</code></pre></div>",
        "id": 387382240,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693022909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Source.20Location/near/387382240\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span>  Expanded example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.ElabRules</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"pos%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getPos</span><span class=\"bp\">?</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"no source info\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileMap</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPosition</span> <span class=\"n\">pos</span>\n  <span class=\"n\">return</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileName</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">pos</span><span class=\"bp\">%</span> <span class=\"c1\">-- (\"path/to/module.lean\", { line := 10, column := 6 })</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>so that's what filemap is good for :D I've wondered this ever since I passed it through in doc-gen</p>",
        "id": 387423007,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693053620
    }
]