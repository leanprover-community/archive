[
    {
        "content": "<p>I would like to have a tactic which does not use implicit lambdas when elaborating a term, but I'm failing to get it to work. Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">test</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">implicitLambda</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"bp\">@</span><span class=\"n\">t</span> <span class=\"c1\">-- `{ι : Type} → ι → Unit`</span>\n  <span class=\"n\">test</span> <span class=\"n\">t</span>  <span class=\"c1\">-- `?m.2087 → Unit`         &lt;--- But I want `{ι : Type} → ι → Unit`</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>Any advice on what I'm missing?</p>",
        "id": 380872676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690937696
    },
    {
        "content": "<p>Even more upsetting is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"bp\">@</span><span class=\"n\">t</span> <span class=\"c1\">-- `α`</span>\n  <span class=\"n\">test</span> <span class=\"n\">t</span>  <span class=\"c1\">-- `?m.2119 → Unit`</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 380872854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690937783
    },
    {
        "content": "<p>Have you read <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabTerm#doc\">docs#Lean.Elab.Term.elabTerm</a> carefully? There is an extra negation <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> But also, I am not sure that the thing you want actually has to do with implicit lambdas. Implicit lambdas let you write <code>fun x =&gt; x : {a : Type) -&gt; a -&gt; a</code>, but here the expected type is <code>none</code>(unknown) rather than specifically a function type with implicit arguments.</p>",
        "id": 380873681,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690938210
    },
    {
        "content": "<p>If you use the global setting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">t'</span> <span class=\"bp\">←</span>\n    <span class=\"n\">withTheReader</span> <span class=\"n\">Term.Context</span> <span class=\"o\">({</span><span class=\"bp\">·</span> <span class=\"k\">with</span> <span class=\"n\">implicitLambda</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"k\">do</span>\n      <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>the output is the same.</p>",
        "id": 380873999,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690938373
    },
    {
        "content": "<p>I not only read the docs, but the source, and as far as I can see the doc is incorrect, and <code>implicitLambda := false</code> disables implicit lambdas.</p>",
        "id": 380874295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690938513
    },
    {
        "content": "<p>Perhaps I do have the naming wrong, and this is not about implicit lambdas.</p>\n<p>Nevertheless, I would like to know how to avoid having <code>inferType</code> fill in leading implicit arguments with metavariables!</p>",
        "id": 380874717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690938709
    },
    {
        "content": "<p>Ah, we should fix the doc then! As to your issue, if we follow the chain of elaborators we find that <a href=\"https://github.com/leanprover/lean4/blob/b9ec36d0897a7946e990d6fd3640cc856d701f5d/src/Lean/Elab/App.lean#L616\">processImplicitArg</a> determines whether to insert an mvar based on <code>explicit : Bool</code> in its monad context. This is originally set in <code>elabAppFn</code> <a href=\"https://github.com/leanprover/lean4/blob/b9ec36d0897a7946e990d6fd3640cc856d701f5d/src/Lean/Elab/App.lean#L1360\">here</a>, but note that this happens when the syntax is <code>@$id</code>. I am not immediately seeing a global option to turn it on when the syntax is not that.</p>",
        "id": 380877393,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690940049
    },
    {
        "content": "<p>What is the broader context? If you just have a single <code>ident</code>, you could simply wrap it in the <code>@$id</code> syntax.</p>",
        "id": 380877881,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690940279
    },
    {
        "content": "<p>Doc-string correction is at <a href=\"https://github.com/leanprover/lean4/pull/2378\">lean4#2378</a>.</p>",
        "id": 380878814,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690940664
    },
    {
        "content": "<p>Thanks for the pointers into the relevant elaborators. Indeed for my use case simply prepending an <code>@</code> before elaborating may suffice. I will try that now!</p>",
        "id": 380878951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690940722
    },
    {
        "content": "<p>Ahha: <code>elabTermForApply</code> is what I'm looking for.</p>",
        "id": 380880370,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690941294
    }
]