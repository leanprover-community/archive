[
    {
        "content": "<p>is there a way to get something like this to compile?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">[</span><span class=\"n\">mi</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ai</span><span class=\"o\">:</span> <span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">base'</span> <span class=\"bp\">←</span> <span class=\"n\">rightCont</span> <span class=\"n\">base</span><span class=\"bp\">;</span> <span class=\"n\">foldl</span> <span class=\"n\">base'</span> <span class=\"n\">rightCont</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">base</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The argument <code>base</code> justifies the type is inhabited, with <code>pure base</code> as its element.</p>",
        "id": 348553836,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681243829
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 348554981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681244297
    },
    {
        "content": "<p>sorry, forgot the recursion. I'll fix it in a few mins</p>",
        "id": 348555020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681244321
    },
    {
        "content": "<p>oh nevermind, using ascii art gives the same issues</p>",
        "id": 348555175,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681244402
    },
    {
        "content": "<p>But this works for some reason:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"n\">base</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldl</span> <span class=\"n\">b</span> <span class=\"n\">rightCont</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">base</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 348555292,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681244429
    },
    {
        "content": "<p>(it also works with <code>do</code>)</p>",
        "id": 348555504,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681244517
    },
    {
        "content": "<p>I think that's from the <code>[Inhabited γ]</code> argument</p>",
        "id": 348556774,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245011
    },
    {
        "content": "<p>which is what I'm trying to avoid</p>",
        "id": 348556791,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245020
    },
    {
        "content": "<p>Check set_option trace.Meta.synthInstance true</p>",
        "id": 348557097,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681245131
    },
    {
        "content": "<p>I believe the partial command searches for <code>Nonempty (full function type)</code> as well.</p>",
        "id": 348557182,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681245162
    },
    {
        "content": "<p>It does look for <code>Inhabited ([mi : Monad m] → [ai : Alternative m] → γ → (γ → m γ) → m γ)</code>, but tc synth can't instantiate it, it seems</p>",
        "id": 348557479,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245256
    },
    {
        "content": "<p>(I wouldn't expect it to, either)</p>",
        "id": 348557539,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245283
    },
    {
        "content": "<p>Frankly I am pretty okay if this doesn't work fully automatically -- the more annoying thing is that there's no way for me to provide the <code>Nonempty (full function type)</code> instance for it to use.</p>",
        "id": 348557624,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245318
    },
    {
        "content": "<p>(other than by making a global instance right before the def)</p>",
        "id": 348557685,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245341
    },
    {
        "content": "<p>I guess I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">([</span><span class=\"n\">mi</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">ai</span> <span class=\"o\">:</span> <span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"k\">in</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">[</span><span class=\"n\">mi</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ai</span><span class=\"o\">:</span> <span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">base'</span> <span class=\"bp\">←</span> <span class=\"n\">rightCont</span> <span class=\"n\">base</span><span class=\"bp\">;</span> <span class=\"n\">foldl</span> <span class=\"n\">base'</span> <span class=\"n\">rightCont</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">base</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 348557837,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245399
    },
    {
        "content": "<p>so that the instance doesn't escape scope... but then I'm a bit annoying that I have to copy/paste the type there.</p>",
        "id": 348557902,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245432
    },
    {
        "content": "<p>But that works for me for now. Thanks!</p>",
        "id": 348558051,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681245493
    },
    {
        "content": "<p>You can do local instance, but you still need to retype the type.</p>",
        "id": 348558057,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681245497
    },
    {
        "content": "<p>Instance .. in is a big foot gun</p>",
        "id": 348558119,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681245533
    },
    {
        "content": "<p>It means exactly the same as instance without the in.</p>",
        "id": 348558187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681245558
    },
    {
        "content": "<p>Another gotcha is private instance.</p>",
        "id": 348558371,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681245626
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl_aux</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"n\">base</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldl_aux</span> <span class=\"n\">b</span> <span class=\"n\">rightCont</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">base</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">base</span><span class=\"o\">⟩</span>\n  <span class=\"n\">foldl_aux</span> <span class=\"n\">base</span> <span class=\"n\">rightCont</span>\n</code></pre></div>",
        "id": 348559223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681245968
    },
    {
        "content": "<p>I tried to put <code>Inhabited</code> somewhere inline within <code>foldl</code>, but couldn't get it to work. Maybe Gabriel knows some other tricks?</p>",
        "id": 348559301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681246003
    },
    {
        "content": "<p>Oh this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">[</span><span class=\"n\">_h</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rc</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">rc</span> <span class=\"n\">bs</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">b</span> <span class=\"n\">rc</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">_h</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">base</span><span class=\"o\">⟩)</span> <span class=\"n\">base</span> <span class=\"n\">rightCont</span>\n</code></pre></div>",
        "id": 348559600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681246132
    },
    {
        "content": "<p>using <code>where</code> also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">_h</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">base</span><span class=\"o\">⟩)</span> <span class=\"n\">base</span> <span class=\"n\">rightCont</span>\n  <span class=\"n\">where</span> <span class=\"n\">go</span> <span class=\"o\">[</span><span class=\"n\">_h</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rc</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">rc</span> <span class=\"n\">bs</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">b</span> <span class=\"n\">rc</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 348559905,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681246264
    },
    {
        "content": "<p>I would recommend</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">failure</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">base'</span> <span class=\"bp\">←</span> <span class=\"n\">rightCont</span> <span class=\"n\">base</span><span class=\"bp\">;</span> <span class=\"n\">foldl</span> <span class=\"n\">base'</span> <span class=\"n\">rightCont</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">base</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 348562361,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681247307
    },
    {
        "content": "<p>Even if you don't have Alternative, then you can still get away without writing the precise function type twice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">·</span> <span class=\"bp\">|&gt;</span> <span class=\"bp\">·</span><span class=\"o\">)⟩</span> <span class=\"k\">in</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foldl'</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rightCont</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">foldl'</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">rightCont</span> <span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"n\">rightCont</span>\n</code></pre></div>",
        "id": 348564277,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681248192
    },
    {
        "content": "<p>hm, okay</p>",
        "id": 348568558,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681250319
    }
]