[
    {
        "content": "<p>I am a master's student working on  formalizing the intuitionistic first order logic. In a proof of monotonic, I use induction on the formula g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Formula.mono_proof</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">}(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"n\">σ</span><span class=\"o\">)(</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">M.world</span><span class=\"o\">)(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">M.R</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">σ</span><span class=\"o\">)(</span><span class=\"n\">hw</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">M.W</span><span class=\"o\">)(</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">M.A</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">g.force_form</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">hw</span> <span class=\"n\">val</span> <span class=\"o\">):</span> <span class=\"n\">g.force_form</span> <span class=\"n\">M</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"n\">val</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">depth</span><span class=\"o\">:=</span><span class=\"n\">g.size</span>\n  <span class=\"n\">induction</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atomic_formula</span> <span class=\"n\">r</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                           <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                           <span class=\"n\">apply</span> <span class=\"n\">M.mono</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">hr</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n              <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n              <span class=\"n\">assumption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjunction</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span>\n                         <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n                         <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">h3</span> <span class=\"n\">h1.left</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">h4</span> <span class=\"n\">h1.right</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disjunction</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span>\n                         <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                         <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">Or.elim</span> <span class=\"n\">h1</span>\n                         <span class=\"n\">intro</span> <span class=\"n\">h5</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">h3</span> <span class=\"n\">h5</span>\n                         <span class=\"n\">intro</span> <span class=\"n\">h6</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">h4</span> <span class=\"n\">h6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">negation</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h0</span>\n                  <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                  <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                  <span class=\"n\">intro</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span>\n                  <span class=\"n\">apply</span> <span class=\"n\">h1</span>\n                  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">w2</span> <span class=\"bp\">∈</span> <span class=\"n\">M.W</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">M.R_closed</span> <span class=\"n\">v</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span>\n                  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">M.W</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span>\n                  <span class=\"n\">apply</span> <span class=\"n\">M.trans</span> <span class=\"n\">u</span> <span class=\"n\">hw</span> <span class=\"n\">v</span> <span class=\"n\">h4</span> <span class=\"n\">w2</span> <span class=\"n\">h3</span> <span class=\"n\">hr</span> <span class=\"n\">hw2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">implication</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"n\">f3</span> <span class=\"n\">f4</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                               <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                               <span class=\"n\">intro</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span>\n                               <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">strong_connected</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w2</span> <span class=\"n\">hw</span> <span class=\"n\">hr</span> <span class=\"n\">hw2</span>\n                               <span class=\"n\">apply</span> <span class=\"n\">h1</span> <span class=\"n\">w2</span> <span class=\"n\">h6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">existential_quantification</span> <span class=\"n\">f1</span> <span class=\"n\">hv</span> <span class=\"bp\">=&gt;</span>\n                                <span class=\"k\">have</span> <span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">f1.size</span><span class=\"bp\">&lt;</span><span class=\"n\">depth</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n                                <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                                <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                                <span class=\"k\">match</span> <span class=\"n\">h1</span> <span class=\"k\">with</span>\n                                <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,(</span><span class=\"n\">Formula.mono_proof</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">f1</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">modify_value_function</span> <span class=\"n\">M</span> <span class=\"n\">val</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">ht</span><span class=\"o\">)⟩</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">universal_quantification</span> <span class=\"n\">f2</span> <span class=\"n\">hv</span> <span class=\"bp\">=&gt;</span>\n                                <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">f2.size</span><span class=\"bp\">&lt;</span><span class=\"n\">depth</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n                                <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                                <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                                <span class=\"n\">intro</span> <span class=\"n\">t</span>\n                                <span class=\"gr\">sorry</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">Formula.mono_proof</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">f</span> <span class=\"n\">hw</span> <span class=\"n\">val</span> <span class=\"n\">hz</span> <span class=\"bp\">=&gt;</span><span class=\"n\">f.size</span>\n  <span class=\"n\">decreasing_by</span>\n</code></pre></div>\n<p>And I use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">f.size</span>\n</code></pre></div>\n<p>it requires me to provide the proof of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">g.size</span> <span class=\"bp\">&gt;</span> <span class=\"n\">f1.size</span>\n</code></pre></div>\n<p>The key problem occors here. When I try to prove it in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">decreasing_by</span>\n</code></pre></div>\n<p>The infoview doesn't provide any information about the relation of g and f1. In fact, here we have g=(∃ᵢf1). <br>\nNow, I need to show g=(∃ᵢf1). But I can't do that.<br>\nMy question is, Why termination_by eats my induction relation of f1 and g? Should I change a way of induction?</p>\n<p>The whole file can be found here.<br>\n<a href=\"/user_uploads/3121/0ivirbqoTvC3Br3zntgXZc2f/IFOL.lean\">IFOL.lean</a></p>\n<p>Thanks for any suggestion!</p>",
        "id": 409084174,
        "sender_full_name": "Dongheng Chen",
        "timestamp": 1703045418
    },
    {
        "content": "<p>This works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Formula.mono_proof</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">}(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"n\">σ</span><span class=\"o\">)(</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">M.world</span><span class=\"o\">)(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">M.R</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">σ</span><span class=\"o\">)(</span><span class=\"n\">hw</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">M.W</span><span class=\"o\">)(</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">M.A</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">g.force_form</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">hw</span> <span class=\"n\">val</span> <span class=\"o\">):</span> <span class=\"n\">g.force_form</span> <span class=\"n\">M</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"n\">val</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">g</span> <span class=\"n\">generalizing</span> <span class=\"n\">val</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atomic_formula</span> <span class=\"n\">r</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                           <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                           <span class=\"n\">apply</span> <span class=\"n\">M.mono</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">hr</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n              <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n              <span class=\"n\">assumption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjunction</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"bp\">=&gt;</span>\n                         <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n                         <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">h3</span> <span class=\"n\">_</span> <span class=\"n\">h1.left</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">h4</span> <span class=\"n\">_</span> <span class=\"n\">h1.right</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disjunction</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"bp\">=&gt;</span>\n                         <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                         <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">Or.elim</span> <span class=\"n\">h1</span>\n                         <span class=\"n\">intro</span> <span class=\"n\">h5</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">h3</span> <span class=\"n\">_</span> <span class=\"n\">h5</span>\n                         <span class=\"n\">intro</span> <span class=\"n\">h6</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n                         <span class=\"n\">apply</span> <span class=\"n\">h4</span> <span class=\"n\">_</span> <span class=\"n\">h6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">negation</span> <span class=\"n\">f</span> <span class=\"n\">h0</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                  <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                  <span class=\"n\">intro</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span>\n                  <span class=\"n\">apply</span> <span class=\"n\">h1</span>\n                  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">w2</span> <span class=\"bp\">∈</span> <span class=\"n\">M.W</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">M.R_closed</span> <span class=\"n\">v</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span>\n                  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">M.W</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span>\n                  <span class=\"n\">apply</span> <span class=\"n\">M.trans</span> <span class=\"n\">u</span> <span class=\"n\">hw</span> <span class=\"n\">v</span> <span class=\"n\">h4</span> <span class=\"n\">w2</span> <span class=\"n\">h3</span> <span class=\"n\">hr</span> <span class=\"n\">hw2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">implication</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"n\">f3</span> <span class=\"n\">f4</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                               <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                               <span class=\"n\">intro</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span>\n                               <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">strong_connected</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w2</span> <span class=\"n\">hw</span> <span class=\"n\">hr</span> <span class=\"n\">hw2</span>\n                               <span class=\"n\">apply</span> <span class=\"n\">h1</span> <span class=\"n\">w2</span> <span class=\"n\">h6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">existential_quantification</span> <span class=\"n\">f</span> <span class=\"n\">hv</span> <span class=\"bp\">=&gt;</span>\n                                <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                                <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                                <span class=\"k\">match</span> <span class=\"n\">h1</span> <span class=\"k\">with</span>\n                                <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">hv</span> <span class=\"o\">(</span><span class=\"n\">modify_value_function</span> <span class=\"n\">M</span> <span class=\"n\">val</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">universal_quantification</span> <span class=\"n\">f</span> <span class=\"n\">hv</span> <span class=\"bp\">=&gt;</span>\n                                <span class=\"n\">unfold</span> <span class=\"n\">force_form</span>\n                                <span class=\"n\">unfold</span> <span class=\"n\">force_form</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n                                <span class=\"n\">intro</span> <span class=\"n\">t</span>\n                                <span class=\"n\">exact</span> <span class=\"n\">hv</span> <span class=\"o\">(</span><span class=\"n\">modify_value_function</span> <span class=\"n\">M</span> <span class=\"n\">val</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't think you should mix using <code>induction</code>and explicit recursion in your code, either do one or the other. I'm guessing that's what messed up the termination-checker here.</p>",
        "id": 409108636,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1703056474
    },
    {
        "content": "<p>Also, you may prefer using term-mode for such proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Formula.mono_proof</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Signature</span><span class=\"o\">}(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"n\">σ</span><span class=\"o\">)(</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">M.world</span><span class=\"o\">)(</span><span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">M.R</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">σ</span><span class=\"o\">)(</span><span class=\"n\">hw</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">M.W</span><span class=\"o\">)(</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">M.A</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">g.force_form</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">hw</span> <span class=\"n\">val</span> <span class=\"o\">):</span> <span class=\"n\">g.force_form</span> <span class=\"n\">M</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"n\">val</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atomic_formula</span> <span class=\"n\">r</span> <span class=\"n\">ts</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">M.mono</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">hr</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjunction</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f1.mono_proof</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h1.left</span><span class=\"o\">,</span><span class=\"n\">f2.mono_proof</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>  <span class=\"n\">h1.right</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disjunction</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h1.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h5</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f1.mono_proof</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h6</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f2.mono_proof</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h6</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">negation</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">w2</span> <span class=\"bp\">∈</span> <span class=\"n\">M.W</span> <span class=\"o\">:=</span> <span class=\"n\">M.R_closed</span> <span class=\"n\">v</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span> <span class=\"o\">(</span><span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">v</span>  <span class=\"bp\">∈</span> <span class=\"n\">M.W</span> <span class=\"o\">:=</span>  <span class=\"n\">M.R_closed</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">hw</span>\n    <span class=\"n\">h1</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">M.trans</span> <span class=\"n\">u</span> <span class=\"n\">hw</span> <span class=\"n\">v</span> <span class=\"n\">h4</span> <span class=\"n\">w2</span> <span class=\"n\">h3</span> <span class=\"n\">hr</span> <span class=\"n\">hw2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">implication</span> <span class=\"n\">_</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">w2</span> <span class=\"n\">hw2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>  <span class=\"n\">strong_connected</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w2</span> <span class=\"n\">hw</span> <span class=\"n\">hr</span> <span class=\"n\">hw2</span>\n    <span class=\"n\">h1</span> <span class=\"n\">w2</span> <span class=\"n\">h6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">existential_quantification</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span>\n    <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,(</span><span class=\"n\">Formula.mono_proof</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">f</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">modify_value_function</span> <span class=\"n\">M</span> <span class=\"n\">val</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">ht</span><span class=\"o\">)⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">universal_quantification</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Formula.mono_proof</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">hr</span> <span class=\"n\">f</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">modify_value_function</span> <span class=\"n\">M</span> <span class=\"n\">val</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409109893,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1703056859
    }
]