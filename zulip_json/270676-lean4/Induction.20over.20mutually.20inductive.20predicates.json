[
    {
        "content": "<p>A student of mine is currently struggling with induction over mutually inductive predicates (in <code>Prop</code>) because</p>\n<ul>\n<li><code>induction</code> doesn't support mutual inductive types;</li>\n<li>mutual recursion is implemented via well-founded recursion, but inductive predicates don't have (and can't have) a useful <code>SizeOf</code> instance.</li>\n</ul>\n<p>As far as I can tell, he has the following options, none of which are particularly pleasing:</p>\n<ul>\n<li>Recurse over the data rather than the predicates.</li>\n<li>Put the predicates into <code>Type</code>.</li>\n<li>Use the recursor directly.</li>\n<li>Give up on mutual types and define the union of the predicates as a single inductive predicate, essentially doing the elaborator's job by hand.</li>\n</ul>\n<p>Is there a more idiomatic way?</p>",
        "id": 402060061,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699992219
    },
    {
        "content": "<p>Nope, this is currently not really supported. The best option for now is just using the recursor directly</p>",
        "id": 402166538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700034547
    },
    {
        "content": "<p>Probably using an inductive family is the path of least resistance</p>",
        "id": 402166661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700034601
    },
    {
        "content": "<p>Okay, thanks!</p>",
        "id": 402193431,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1700042949
    }
]