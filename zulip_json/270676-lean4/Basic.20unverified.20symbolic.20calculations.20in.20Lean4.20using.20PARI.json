[
    {
        "content": "<p>I have implemented some code for performing some quick <strong>unverified</strong> arithmetic and symbolic calculations in Lean4, using PARI/GP as a backend (this was inspired by a comment of <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> after a lecture by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> today). This kind of interface is ideal for cases where one wants to do some quick calculations, say to plug in a suitable expression to close the goal, without leaving the Lean editor. The code is currently limited to only calculations involving the basic arithmetic operations, but can (in principle) be extended to do more.</p>\n<p>Running it requires having <a href=\"https://pari.math.u-bordeaux.fr/download.html\">PARI/GP</a> installed; on Arch Linux, this can be done by running <code>pacman -S pari</code>. The code is available <a href=\"https://gist.github.com/0art0/0e86ef02e4077a183c7b053359dfcd92\">here</a>, and is about 50 lines long.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">arith</span> <span class=\"s2\">\"+\"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">arith</span> <span class=\"s2\">\"-\"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">arith</span> <span class=\"s2\">\"*\"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">arith</span> <span class=\"s2\">\"/\"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">arith</span> <span class=\"s2\">\"^\"</span> <span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">arith</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">arith</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">arithToString</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">arith</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.getString</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">a.getId</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">n.getNat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{arithToString a} + {arithToString b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{arithToString a} - {arithToString b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{arithToString a} * {arithToString b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{arithToString a} / {arithToString b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{arithToString a} ^ {arithToString b}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arith</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({arithToString a})\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"Invalid `arith` syntax\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IO.Process</span> <span class=\"k\">in</span> <span class=\"c1\">-- code by Max Nowak from https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/external.20process/near/345090183</span>\n<span class=\"sd\">/-- Pipe input into stdin of the spawned process, then return output upon completion. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cmd_with_stdin</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">SpawnArgs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Output</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">child</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">spawn</span> <span class=\"o\">{</span> <span class=\"n\">args</span> <span class=\"k\">with</span> <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stdin</span><span class=\"o\">,</span> <span class=\"n\">child</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">child.takeStdin</span>\n  <span class=\"n\">stdin.putStr</span> <span class=\"n\">input</span>\n  <span class=\"n\">stdin.flush</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.asTask</span> <span class=\"n\">child.stdout.readToEnd</span> <span class=\"n\">Task.Priority.dedicated</span>\n  <span class=\"k\">let</span> <span class=\"n\">stderr</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">child.stderr.readToEnd</span>\n  <span class=\"k\">let</span> <span class=\"n\">exitCode</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">child.wait</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.ofExcept</span> <span class=\"n\">stdout.get</span>\n  <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">exitCode</span><span class=\"o\">,</span> <span class=\"n\">stdout</span><span class=\"o\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">queryPari</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">arith</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"bp\">←</span> <span class=\"n\">cmd_with_stdin</span>\n              <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"gp\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-q\"</span><span class=\"o\">]}</span>\n              <span class=\"bp\">&lt;|</span> <span class=\"n\">arithToString</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">out.stdout</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#symbolic\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- dbg_trace (arithToString e)</span>\n  <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"bp\">←</span> <span class=\"n\">queryPari</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">e</span> <span class=\"n\">out</span>\n\n<span class=\"bp\">#</span><span class=\"n\">symbolic</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>                    <span class=\"c1\">-- 4</span>\n<span class=\"bp\">#</span><span class=\"n\">symbolic</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>    <span class=\"c1\">-- x - 1</span>\n<span class=\"bp\">#</span><span class=\"n\">symbolic</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">17</span><span class=\"o\">)</span>   <span class=\"c1\">-- 8*x^2 + 33*x + 34</span>\n</code></pre></div>",
        "id": 347188287,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1680709549
    },
    {
        "content": "<p>Ha ha! I was switching windows to do polynomial calculations and then verifying the solutions in lean. Nice!</p>",
        "id": 347198242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680711745
    },
    {
        "content": "<p>Can this be integrated with mathlib? Seems useful in many places.</p>",
        "id": 347219846,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1680717227
    },
    {
        "content": "<p>By the way <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> it may be useful to have a term elaborator with this (using <code>runParserCategorty</code>).</p>",
        "id": 347293934,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1680751282
    },
    {
        "content": "<p>Can this same technique be used with other computer algebra systems, or is it pari specific?</p>\n<p>I was thinking, for example, of using it for running <code>polyrith</code> without  depending on an internet connection.</p>",
        "id": 347534473,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1680822619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Basic.20unverified.20symbolic.20calculations.20in.20Lean4.20using.20PARI/near/347219846\">said</a>:</p>\n<blockquote>\n<p>Can this be integrated with mathlib? Seems useful in many places.</p>\n</blockquote>\n<p>I'd be glad to open a PR to <code>mathlib4</code>, perhaps after adding a few minor improvements.</p>",
        "id": 347657757,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1680872033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/270676-lean4/topic/Basic.20unverified.20symbolic.20calculations.20in.20Lean4.20using.20PARI/near/347534473\">said</a>:</p>\n<blockquote>\n<p>Can this same technique be used with other computer algebra systems, or is it pari specific?</p>\n<p>I was thinking, for example, of using it for running <code>polyrith</code> without  depending on an internet connection.</p>\n</blockquote>\n<p>In principle, it can be used with any computer algebra system that supports a command-line interface. It should be possible to use such a set-up for <code>polyrith</code> - where the tactic first attempts to run the computation with a locally-installed CAS and turns to using the internet only when the user has no CAS installed locally.</p>",
        "id": 347660643,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1680872844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Basic.20unverified.20symbolic.20calculations.20in.20Lean4.20using.20PARI/near/347293934\">said</a>:</p>\n<blockquote>\n<p>By the way <span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> it may be useful to have a term elaborator with this (using <code>runParserCategorty</code>).</p>\n</blockquote>\n<p>I have now added a tactic which interprets the answer back as a Lean term and attempts to prove that it is equal to the original expression using <code>ring</code>/<code>linarith</code>/<code>norm_num</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">arithToTerm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">arith</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">a.raw.reprint</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"symb_calc\"</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"bp\">←</span> <span class=\"n\">queryPari</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">arithToString</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">ofExcept</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">arith</span> <span class=\"n\">out</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"bp\">←</span> <span class=\"n\">arithToTerm</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"bp\">←</span> <span class=\"n\">arithToTerm</span> <span class=\"o\">⟨</span><span class=\"n\">res</span><span class=\"o\">⟩</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{lhs} = {rhs}\"</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">swap</span><span class=\"bp\">;</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">ring</span> <span class=\"bp\">|</span> <span class=\"n\">linarith</span> <span class=\"bp\">|</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symb_calc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- (a + 3) * (a + 5) = a ^ 2 + 8 * a + 15</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">symb_calc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- (a + 5) * (a + 3) = a ^ 2 + 8 * a + 15</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 347676108,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1680877096
    },
    {
        "content": "<p>I have also added a utility for running arbitrary PARI calculations from Lean, treating both the input and output as strings. Here is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">queryPari</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"bp\">←</span> <span class=\"n\">cmd_with_stdin</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"gp\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-q\"</span><span class=\"o\">]}</span> <span class=\"n\">s</span>\n  <span class=\"n\">return</span> <span class=\"n\">out.stdout</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#pari\"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"bp\">←</span> <span class=\"n\">queryPari</span> <span class=\"n\">c.getString</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">out</span>\n\n<span class=\"bp\">#</span><span class=\"n\">pari</span> <span class=\"s2\">\"nextprime(35)\"</span> <span class=\"c1\">-- 37</span>\n</code></pre></div>\n<p>It will require a considerable amount of work to interpret the strings back as Lean terms for general PARI calculations.</p>",
        "id": 347677403,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1680877471
    }
]