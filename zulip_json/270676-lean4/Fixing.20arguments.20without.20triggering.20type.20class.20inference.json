[
    {
        "content": "<p>In the following example <code>doNothing</code> and <code>doNothing'</code> work perfectly fine. <code>doNothing'</code> is just <code>doNothing</code> with <code>α</code> fixed to <code>Nat</code>. But when I try to define <code>doNothing''</code> by fixing <code>α</code> to <code>Nat</code>, this triggers type class inference and Lean throws an error. Is it possible to define <code>doNothing'</code> in terms of <code>doNothing</code> without prematurely triggering type class inference?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doNothing</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Stream</span> <span class=\"n\">stream</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stream</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">doNothing</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">doNothing'</span> <span class=\"o\">{</span><span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Stream</span> <span class=\"n\">stream</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stream</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">doNothing'</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">doNothing''</span> <span class=\"o\">:=</span> <span class=\"n\">doNothing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407668480,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1702455817
    },
    {
        "content": "<p>doNothing'' would need a parameter [Stream stream Nat], I think</p>",
        "id": 407680153,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702459465
    },
    {
        "content": "<p>This wasn't what I meant. Let me try to be more precise.</p>\n<p>How can I define <code>doNothing''</code> in terms of <code>doNothing</code>, such that it has the same type signature as <code>doNothing'</code>?</p>",
        "id": 407709552,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1702468416
    },
    {
        "content": "<p><code>def doNothing'' := @doNothing (α := Nat)</code></p>",
        "id": 407710108,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702468603
    }
]