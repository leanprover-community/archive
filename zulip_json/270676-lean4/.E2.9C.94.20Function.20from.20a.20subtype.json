[
    {
        "content": "<p>I repeatedly struggle with defining a function from a subtype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">special</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.IsNumber</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Foo.number</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FooNum</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">//</span> <span class=\"n\">a.IsNumber</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">v</span> <span class=\"n\">hv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hv</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I want to return <code>m</code> as the output. Unfortunately, I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">when</span> <span class=\"n\">assigning</span> <span class=\"n\">motive</span>\n  <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hv</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Foo.number</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Foo.number</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I don't need to execute my function. I just need to be able to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">funFooNum</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.number</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>later.<br>\nOf course, I don't need my function to be defined by a tactic block.<br>\nThe tactic block above is just my unsuccessful debugging.</p>",
        "id": 401007793,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699470896
    },
    {
        "content": "<p>Maybe this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">special</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.IsNumber</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Foo.number</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FooNum</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">//</span> <span class=\"n\">a.IsNumber</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Foo.not_isNumber_special</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Foo.IsNumber</span> <span class=\"bp\">.</span><span class=\"n\">special</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Foo.not_isNumber_special</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 401008662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699471271
    },
    {
        "content": "<p>I think that <code>nomatch</code> is roughly equivalent to doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Foo.not_isNumber_special</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Foo.IsNumber</span> <span class=\"bp\">.</span><span class=\"n\">special</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 401008814,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699471324
    },
    {
        "content": "<p>Of course you could just as well return 0 in the special case.</p>",
        "id": 401008894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699471367
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.number</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.special</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Foo.IsNumber</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 401008913,
        "sender_full_name": "Joël Riou",
        "timestamp": 1699471374
    },
    {
        "content": "<p>Note that you <code>Foo.isNumber</code> definition is very unidiomatic and will have no good reduction property. You could use <code>def Foo.IsNumber (x: Foo) : Prop := x matches .number _</code></p>",
        "id": 401009155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699471463
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo.IsNumber</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 401009172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699471475
    },
    {
        "content": "<p>I must be a little confused, but how can Lean eliminate the existential to a <code>Type</code>?</p>",
        "id": 401009605,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699471647
    },
    {
        "content": "<p>Is it that <code>noncomputable</code> was neither necessary nor helpful in my code?</p>",
        "id": 401009733,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699471694
    },
    {
        "content": "<p>Riccardo, it cannot, that's why all suggestions to define the function do <em>not</em> use Martin's definition.</p>",
        "id": 401009828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699471738
    },
    {
        "content": "<p>We're pattern matching on <code>Foo</code> instead.</p>",
        "id": 401009860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699471755
    },
    {
        "content": "<p>Ah, I see, it understands that the second case never happens.</p>",
        "id": 401010032,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699471808
    },
    {
        "content": "<p>I don't see what you mean.</p>",
        "id": 401010182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699471876
    },
    {
        "content": "<p>Even better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">special</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.isNumber</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FooNum</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">//</span> <span class=\"n\">a.isNumber</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Let Lean see there is no second case!</p>",
        "id": 401010314,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699471928
    },
    {
        "content": "<p>You can simply completely ignored the property information.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">_property</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">val</span> <span class=\"k\">with</span>\n                       <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n                       <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 401010437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699471986
    },
    {
        "content": "<p>It would work with <code>def Foo.isNumber : Foo → Prop</code> as well, right?</p>",
        "id": 401010461,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699471996
    },
    {
        "content": "<p>Kyle's answer is very clear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Foo.not_isNumber_special</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Foo.IsNumber</span> <span class=\"bp\">.</span><span class=\"n\">special</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Foo.not_isNumber_special</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>\n<p>In the second case we use the eliminator of <code>False</code>.</p>",
        "id": 401010502,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699472018
    },
    {
        "content": "<p>Riccardo, that was completely unnecessary.</p>",
        "id": 401010538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699472037
    },
    {
        "content": "<p>Or send it to <code>0</code> yes.</p>",
        "id": 401010555,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699472041
    },
    {
        "content": "<p>This is simply the restriction to the subtype of a function that is perfectly well-defined everywhere on the original type.</p>",
        "id": 401010673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699472085
    },
    {
        "content": "<p>I was looking at Joel's answer, where <code>simp [Foo.IsNumber] at h</code> seems to magically produce a number.</p>",
        "id": 401010723,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699472105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FooNum</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">//</span> <span class=\"n\">a.IsNumber</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funFoo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">funFoo</span> <span class=\"n\">x.val</span>\n</code></pre></div>",
        "id": 401010889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699472175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Function.20from.20a.20subtype/near/401009155\">said</a>:</p>\n<blockquote>\n<p>Note that you <code>Foo.isNumber</code> definition is very unidiomatic and will have no good reduction property. You could use <code>def Foo.IsNumber (x: Foo) : Prop := x matches .number _</code></p>\n</blockquote>\n<p>In my (non-minimal) example, it will be pretty hard to avoid <code>∃</code> in the definition of the property that defines my subtype, but thanks for the suggestion anyways!</p>",
        "id": 401012920,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699473121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I get that you can use a junk value in the impossible case, but I think it's worth knowing how to exclude cases entirely (maybe it's a dependent function and the target is empty in the impossible case?)</p>\n<p>Plus, if you can exclude cases in the equations, then for example you get a more convenient <code>split</code>. Using my last code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">funFooNum</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">funFooNum</span>\n  <span class=\"n\">split</span>\n  <span class=\"c1\">-- one goal</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">funFooNum</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FooNum</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">funFooNum</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">funFooNum</span>\n  <span class=\"n\">split</span>\n  <span class=\"c1\">-- two goals</span>\n</code></pre></div>",
        "id": 401013033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699473165
    },
    {
        "content": "<p>Sure I understand that Martin probably messed up his minimization and his real use case isn't dumb. I was answering Riccardo's question.</p>",
        "id": 401013324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699473292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 401025296,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699478529
    }
]