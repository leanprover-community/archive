[
    {
        "content": "<p>Is there a way to assign a mvar with a definition in such a way that the assignment fails if the type is inconsistent? With <code>Lean.MVarId.assign</code> the consistency is not checked. Does <code>isDefEq</code> assign a value to a mvar when the definitional equality is ensured?</p>",
        "id": 398826565,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698386280
    },
    {
        "content": "<p>you can do <code>isDefEq</code> on the types and if it succeeds use <code>MVarId.assign</code></p>",
        "id": 398826790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698386375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Assign.20a.20mvar.20and.20fail.20if.20its.20inconsistent/near/398826790\">said</a>:</p>\n<blockquote>\n<p>you can do <code>isDefEq</code> on the types and if it succeeds use <code>MVarId.assign</code></p>\n</blockquote>\n<p>Does this still work if the assignee has a mvar? For example if I want to assign <code>?m1</code> to <code>1 + ?m2</code>. In tactics such as <code>Intro</code> there is no checking here</p>",
        "id": 398826939,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698386415
    },
    {
        "content": "<p>you unify the type of <code>?m1</code> with the type of <code>1 + ?m2</code></p>",
        "id": 398827462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698386553
    },
    {
        "content": "<p>Most of the time this checking is not necessary because you have structurally ensured this property by some other means</p>",
        "id": 398827515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698386585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Assign.20a.20mvar.20and.20fail.20if.20its.20inconsistent/near/398827462\">said</a>:</p>\n<blockquote>\n<p>you unify the type of <code>?m1</code> with the type of <code>1 + ?m2</code></p>\n</blockquote>\n<p>in this case does <code>?m2</code> have to be registered in the current mvar context?</p>",
        "id": 398827681,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698386657
    },
    {
        "content": "<p>it always is</p>",
        "id": 398827797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698386722
    },
    {
        "content": "<p>otherwise you have an ill formed term</p>",
        "id": 398827808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698386729
    },
    {
        "content": "<p>std has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.assignIfDefeq#doc\">docs#Lean.MVarId.assignIfDefeq</a> for doing the defeq check before assigning</p>",
        "id": 398829288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698387353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 398841964,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698392089
    }
]