[
    {
        "content": "<p>I want to write a tactic that rewrites all <code>Iff</code>s in a goal for <code>Eq</code>s. For that I wrote the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">iff_eq_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">propext</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Iff.rfl</span>\n</code></pre></div>\n<p>I thought I could just use <code>rewrite [iff_eq_eq]</code>, but it seems that it will only replace one occurrence, since it will use the first occurrence to determine what is the implicit argument for <code>iff_eq_eq</code>. One way to solve it is to write a tactic that recursively applies <code>rewrite [iff_eq_eq]</code> until it's not possible anymore, but this requires to mark the tactic as <code>unsafe</code>. Is there a solution that does not have this requirement?</p>",
        "id": 359096869,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1684364397
    },
    {
        "content": "<p>You can use <code>repeat { tac }</code> to apply a tactic several times. (Edit: although I cannot actually get it to work in your case)</p>",
        "id": 359098208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684365083
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iff_eq_eq</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- no change</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iff_eq_eq</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iff_eq_eq</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iff_eq_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- something happens</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>:-/</p>",
        "id": 359098557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684365279
    },
    {
        "content": "<p>The syntax for <code>repeat</code> has changed.  It's now <code>repeat tac</code>.</p>",
        "id": 359099273,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684365655
    },
    {
        "content": "<p>Also I'd use <code>simp only [iff_eq_eq]</code> instead of <code>repeat rw [iff_eq_eq]</code>.</p>",
        "id": 359099438,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684365728
    },
    {
        "content": "<p>thanks!</p>",
        "id": 359100146,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1684366118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes</span> has marked this topic as resolved.</p>",
        "id": 359100152,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684366124
    }
]