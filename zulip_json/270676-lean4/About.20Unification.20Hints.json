[
    {
        "content": "<h1>Some experiments with unification hints</h1>\n<p>I was playing with category theory in Lean. At some point, I realised I had to use unification hints to solve a problem. I have spent a lot of time figuring this out, and I guess I gathered some valuable experience with this and I'd like to share it with you.<br>\nBasically, there are two points:</p>\n<ul>\n<li><em>I found a way to trigger infinite recursion using unification hints.</em> I guess this is some valuable information for the core developers, and that's the main reason why I'm writing this post.</li>\n<li>I made some mistakes, and eventually found out why I was mistaken. I guess I'm not the only one who has made these mistakes, there have been other people doing the same things before, and most importantly <em>there will be other people doing this after me</em>. Therefore, I think my experience is valuable for the purpose of documentation, and I'm trying to make a discussion that is as clear as possible so that it could fit in Lean 4's documentation, or in some other resources, like tutorials on unification hints.</li>\n</ul>\n<p>I intended on posting the whole thing here, but unfortunately the message would be way too long for Zulip. Therefore I posted the document on <a href=\"https://gist.github.com/thejohncrafter/7425065ab9007a7eb668b946270d035e\">gist.github.com, here</a>.<br>\nThe file is runnable in Lean 4 (at the time of writing I'm using nightly:2023-04-20).</p>\n<p>Please feel free to comment, I'd appreciate any feedback!<br>\nI think comments should preferably be posted here on Zulip for everyone to read, but if it makes sense to you to comment on github then feel free to do so :)</p>",
        "id": 356501696,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683470548
    },
    {
        "content": "<p>TL;DR: Here's a way to triger an infinite recursionusing unification hints.</p>\n<p>Let's first set the stage (I'm trying to make this quick).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Hom.hom</span> <span class=\"c1\">-- \\h</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Quiver</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">Q.α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Hom.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">Q</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">Q.hom</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Prefunctor</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n  <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">obj</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\"⥤\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Prefunctor</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">product_quiver</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span> <span class=\"bp\">×</span> <span class=\"n\">R</span>\n  <span class=\"n\">hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a.1</span> <span class=\"bp\">⟶</span> <span class=\"n\">b.1</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">a.2</span> <span class=\"bp\">⟶</span> <span class=\"n\">b.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\"⊗\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">product_quiver</span>\n</code></pre></div>\n<p>Here's a troublesome expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">assoc</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">⊗</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">S</span> <span class=\"bp\">⥤</span> <span class=\"n\">Q</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⊗</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">((</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Two problematic unification hints (I discuss how to fix them in the post).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">unif_hint</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⊗</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">d</span> <span class=\"bp\">=?=</span> <span class=\"n\">x.2</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">unif_hint</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⊗</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">=?=</span> <span class=\"n\">x.1</span>\n</code></pre></div>\n<p>Here we go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"n\">recursion</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">assoc_map</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">assoc</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 356502927,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683470945
    },
    {
        "content": "<p>Rather bizarrely I had just been trying to understand these things myself. Thanks a lot for posting!</p>\n<p>PS can't help but note that fancy unicode syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unif_hint</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">S</span> <span class=\"bp\">≟</span> <span class=\"n\">Nat.Magma</span> <span class=\"bp\">⊢</span> <span class=\"n\">S.α</span> <span class=\"bp\">≟</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>also works</p>",
        "id": 356512154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683474074
    }
]