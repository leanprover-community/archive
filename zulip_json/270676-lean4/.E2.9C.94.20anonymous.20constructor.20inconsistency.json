[
    {
        "content": "<p>I noticed that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"aa\"</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>But this does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"aa\"</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span> <span class=\"o\">⟩</span> <span class=\"c1\">-- error: expected '⟩'</span>\n</code></pre></div>\n<p>A tiny inconsistency, it seems.</p>",
        "id": 286127296,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655237938
    },
    {
        "content": "<p>You can get the same effect by using a type ascription outside the magic brackets</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"aa\"</span> <span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Or, if you really want the type inside, a simple macro fixes that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"⟨\"</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\", \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\":\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((⟨</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 286127949,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655238309
    },
    {
        "content": "<p>Thank you!</p>\n<p>Where should these be reported? Reporting these in the Lean4 github is the obvious place, but it is my understand that the Lean4 devs prefer that we avoid creating issues in the lean4 github repo for now.</p>",
        "id": 286130405,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655239655
    },
    {
        "content": "<p>I don't think this warants reporting, per se? In any case, the devs actually monitor this chat quite closely. You could ping one of them directly, if you really feel that strong about it</p>",
        "id": 286137413,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655243623
    },
    {
        "content": "<p>I guess it is debatable, but to me consistency is something that one needs to strive for even if this is very low priority item.</p>\n<p>I think the main point is that we need a place where we can report these issues however important they are. It either gets queued up for later, for contributions or even closed with a simple justification so that no one else needs to wonder about it or asks the same question again.</p>",
        "id": 286142440,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655246615
    },
    {
        "content": "<p>I'm not sure I would call this a consistency thing. These two syntaxes are very different</p>",
        "id": 286154858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655257506
    },
    {
        "content": "<p>The main reason to allow the <code>: type }</code> in structure instances (which is something completely specific to structure instances) is because it makes it more reliably pick up the correct <code>field := </code> elements, referring to fields from the expected structure type. (In lean 3, it was not even a full type, it was just the structure name itself like <code>{ ... : Prod }</code>.)</p>",
        "id": 286154967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655257648
    },
    {
        "content": "<p>This is not really a concern for anonymous constructor brackets since you don't refer to fields by name and you also don't get the field-flattening effect that structure instances get</p>",
        "id": 286155024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655257701
    },
    {
        "content": "<p>If anything, I would try to make it \"more consistent\" by seeing whether it is possible to remove the <code>: type }</code> from structure instances and just use type ascription for everything. I know that this feature is used very rarely in mathlib</p>",
        "id": 286155126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655257809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/anonymous.20constructor.20inconsistency/near/286155126\">said</a>:</p>\n<blockquote>\n<p>If anything, I would try to make it \"more consistent\" by seeing whether it is possible to remove the <code>: type }</code> from structure instances and just use type ascription for everything. I know that this feature is used very rarely in mathlib</p>\n</blockquote>\n<p>Indeed, that also satisfies consistency in a diff way!</p>",
        "id": 286159707,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655262619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 286159714,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655262633
    },
    {
        "content": "<p>the <code>{ ... : Prod _ _ }</code> syntax made me think it was type ascribing the last element of the structure, not the whole structure <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 286160386,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655263490
    }
]