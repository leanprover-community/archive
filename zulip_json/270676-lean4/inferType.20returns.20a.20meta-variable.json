[
    {
        "content": "<p>I'm trying to write an equivalent of the <code>let</code>tactic as an exercise (<code>custom_let</code> in the code snippet below). However, I have the issue that the type infered for the expression is sometimes a meta-variable. For instance, if in a proof I do <code>custom_let x := 4</code>,  in my context I see <code>x : ?m.31609 := 4</code>. Would it be possible to force the inference to \"choose\" a type which works (<code>Nat</code> or <code>Int</code>)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evalCustomLet</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- I don't think we need that</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"c1\">--</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">val</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">val</span> <span class=\"c1\">-- TODO: not enough</span>\n  <span class=\"c1\">--synthesizeAppInstMVars</span>\n  <span class=\"n\">withLetDecl</span> <span class=\"n\">name</span> <span class=\"n\">type</span> <span class=\"n\">val</span> <span class=\"k\">fun</span> <span class=\"n\">nval</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\" type: {type}\"</span>\n    <span class=\"c1\">-- For debugging</span>\n    <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadLCtx.getLCtx</span>\n    <span class=\"k\">let</span> <span class=\"n\">fid</span> <span class=\"o\">:=</span> <span class=\"n\">nval.fvarId</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">lctx.get</span><span class=\"bp\">!</span> <span class=\"n\">fid</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"  nval: </span><span class=\"se\">\\\"</span><span class=\"s2\">{decl.userName}</span><span class=\"se\">\\\"</span><span class=\"s2\"> ({nval}) : {decl.type} := {decl.value}\"</span>\n    <span class=\"c1\">--</span>\n    <span class=\"c1\">-- Tranform the main goal `?m0` to `let x = nval in ?m1`</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.getMainGoal</span>\n    <span class=\"k\">let</span> <span class=\"n\">newMVar</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprSyntheticOpaqueMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">newVal</span> <span class=\"bp\">←</span> <span class=\"n\">mkLetFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">nval</span><span class=\"o\">]</span> <span class=\"n\">newMVar</span>\n    <span class=\"c1\">-- Focus on the current goal</span>\n    <span class=\"n\">Tactic.focus</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- Assign the main goal.</span>\n    <span class=\"c1\">-- We must do this *after* we focused on the current goal, because</span>\n    <span class=\"c1\">-- after we assigned the meta variable the goal is considered as solved</span>\n    <span class=\"n\">mvarId.assign</span> <span class=\"n\">newVal</span>\n    <span class=\"c1\">-- Replace the list of goals with the new goal - we can do this because</span>\n    <span class=\"c1\">-- we focused on the current goal</span>\n    <span class=\"n\">Lean.Elab.Tactic.setGoals</span> <span class=\"o\">[</span><span class=\"n\">newMVar.mvarId</span><span class=\"bp\">!</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"custom_let \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">evalCustomLet</span> <span class=\"n\">n.getId</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 368300321,
        "sender_full_name": "Son Ho",
        "timestamp": 1687365524
    },
    {
        "content": "<p><code>Lean.Elab.Tactic.elabTerm</code> should already do that. I expect that what you're missing is just <code>let type ← instantiateMVars (← inferType val)</code>.</p>",
        "id": 368307937,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687367277
    },
    {
        "content": "<p>Lots of things work with assigned metavariables inside them, but if you want the metavariables to be replaced with their values in a particular expression, that's what <code>instantiateMVars</code> is for</p>",
        "id": 368308373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687367364
    },
    {
        "content": "<p>Note that if you did <code>logInfo m!\" type: {type}\"</code> rather than use <code>dbg_trace</code>, you'd get a pretty printed expression with the metavariables all substituted away. That's both helpful (since you don't need to instantiate them in the expression), and a potential debugging danger since some calculations are sensitive to metavariables.</p>",
        "id": 368308733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687367436
    },
    {
        "content": "<p>Thanks for the information! But I actually still see the meta variables after using<code>instantiateMVars</code> (note that I also tried variations, for instance : <code>let val ← instantiateMVars (← elabTerm val .none)</code>). Is there something else that I could try?</p>",
        "id": 368369777,
        "sender_full_name": "Son Ho",
        "timestamp": 1687384513
    },
    {
        "content": "<p>You need the <code>instantiateMVars</code> on the <code>inferType</code> line. (not tested)</p>",
        "id": 368372433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687385770
    },
    {
        "content": "<p>Just instantiating the mvars in <code>val</code> doesn't guarantee you won't have uninstantiated mvars after you <code>inferType val</code>!</p>",
        "id": 368372480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687385799
    },
    {
        "content": "<p>Sorry for my confusing message : I did test <code>let type ← instantiateMVars (← inferType val)</code>, but as it didn't work I also tried by additionally inserting <code>instantiateMVars</code> in other places (and also <code>let lctx ← instantiateLCtxMVars (&lt;- Lean.MonadLCtx.getLCtx)</code>, etc.). None of those made a difference.</p>",
        "id": 368462141,
        "sender_full_name": "Son Ho",
        "timestamp": 1687421702
    },
    {
        "content": "<p>After further investigation (and exploring some of the tactics provided by Lean): adding <code>synthesizeSyntheticMVarsUsingDefault</code> after <code>inferType</code> solves the problem</p>",
        "id": 368464973,
        "sender_full_name": "Son Ho",
        "timestamp": 1687422311
    }
]