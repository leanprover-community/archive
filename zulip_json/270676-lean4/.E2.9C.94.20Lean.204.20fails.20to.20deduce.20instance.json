[
    {
        "content": "<p>Why does <code>mp1</code> fail?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">instance : BEq MVarId := Lean.instBEqMVarId</span>\n<span class=\"cm\">instance : Hashable MVarId := Lean.instHashableMVarId</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"asdf\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">xs</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">mkFreshMVarId</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mkFreshMVarId</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ys</span> <span class=\"bp\">←</span> <span class=\"n\">xs.mapM</span> <span class=\"n\">f</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  let mp1 := HashMap.ofList ys</span>\n<span class=\"cm\">  Error: don't know how to synthesize implicit argument</span>\n<span class=\"cm\">    ⊢ BEq MVarId</span>\n<span class=\"cm\">    ⊢ Hashable MVarId</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">mp2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">HashMap.ofList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Lean.instBEqMVarId</span> <span class=\"n\">Lean.instHashableMVarId</span> <span class=\"n\">ys</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{repr ys}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{repr $ mp2.find! xs[0]!}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">asdf</span>\n</code></pre></div>",
        "id": 398166448,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698101169
    },
    {
        "content": "<p>Is there a bug or an actual reason haha</p>",
        "id": 398166472,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698101185
    },
    {
        "content": "<p>This is a bug in Lean4. The <code>BEq</code> and <code>Hashable</code> arguments for <code>HashMap.ofList</code> and <code>HashMap.ofListWith</code> should be <code>[]</code> rather than <code>{}</code>.</p>",
        "id": 398171966,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698104902
    },
    {
        "content": "<p>We just need to add <code>variables  [BEq α] [Hashable α]</code> immediately before those two declarations.</p>",
        "id": 398171991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698104937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span>, if you'd like to make either an issue or a PR, I can approve it. Otherwise I will get to it ... later!</p>",
        "id": 398172019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698104973
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ALEkwu87JFDsAnGo4dttt6Th/Screenshot-2023-10-24-at-01.43.59.png\">Screenshot-2023-10-24-at-01.43.59.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ALEkwu87JFDsAnGo4dttt6Th/Screenshot-2023-10-24-at-01.43.59.png\" title=\"Screenshot-2023-10-24-at-01.43.59.png\"><img src=\"/user_uploads/3121/ALEkwu87JFDsAnGo4dttt6Th/Screenshot-2023-10-24-at-01.43.59.png\"></a></div>",
        "id": 398176667,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698108262
    },
    {
        "content": "<p>I am a bit confused now, why are there so many <code>{_ : BEq \\a}</code>?</p>",
        "id": 398176681,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698108274
    },
    {
        "content": "<p>(Sorry I just finished some other work in <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a>  :P</p>",
        "id": 398176689,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698108287
    },
    {
        "content": "<p>I <em>think</em> it’s because we want to make sure we use the one that <code>PersistentHashMap</code> is using in the types of those later arguments. Otherwise, we might synthesize a different instance by accident or not at all (if we’re supplying the instance manually to <code>PersistentHashMap</code>, which we might want to do for technical reasons).</p>\n<p>Just speculating, but it reminds me a lot of an issue with <code>Invertible</code> in mathlib which also demanded <code>{}</code> despite being a typeclass.</p>",
        "id": 398205800,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698124645
    },
    {
        "content": "<p>However, <code>ofList</code>(<code>With</code>) doesn’t have an argument that supplies the instance like the others do (we’re making the <code>HashMap</code>, not using it), and so needs <code>[]</code>.</p>",
        "id": 398206031,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698124807
    },
    {
        "content": "<p>Tangent, but I wonder if we should lint against definitions which use typeclass search “twice” (so, the opposite problem: we synthesize with <code>[]</code> when we could have used <code>{}</code>).</p>",
        "id": 398206225,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698124991
    },
    {
        "content": "<p>Forcing the {}/[] choice on the user as a performance consideration seems like a worse idea than having the elaborator work it out automatically</p>",
        "id": 398221565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698131505
    },
    {
        "content": "<p>But I think the semantics might even differ; I think <code>def foo [i : Bar] (x : @Baz i)</code> will error if called as <code>foo (y : @Baz notAnInstance)</code>...</p>",
        "id": 398221924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698131639
    },
    {
        "content": "<p>Fwiw, with <code>Invertible</code>, it was less a performance consideration and more “this lemma will not apply the way you want it to unless you use <code>{}</code> in its definition”; I’m actually not sure which is more performant (caches might be at play).</p>\n<p>But I see your point—linting felt to me like a natural middle ground (“you can make a different decision if you really want to, but here’s what you should do in almost every situation”)</p>",
        "id": 398225488,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698132961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> has marked this topic as resolved.</p>",
        "id": 398796018,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698370032
    }
]