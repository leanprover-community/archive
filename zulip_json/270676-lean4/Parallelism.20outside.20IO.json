[
    {
        "content": "<p>Task seems to be how to do parallel computation inside IO.  Is there a purely functional version?  In particular, is there <a href=\"http://Array.map\">Array.map</a> but parallel?</p>",
        "id": 392833613,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695562153
    },
    {
        "content": "<p>Sure, task is pure: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Task#doc\">docs#Task</a></p>",
        "id": 392834681,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695562866
    },
    {
        "content": "<p>Whoops, apologies for the hallucination!  I saw an example with IO and didn’t read carefully.</p>",
        "id": 392835160,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695563284
    },
    {
        "content": "<p>Are there lemmas for the semantics of Task, showing that it doesn’t change values?  In particular, I don’t see <code>Task.get_pure</code> or a <code>LawfulMonad</code> instance.</p>",
        "id": 392835806,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695563737
    },
    {
        "content": "<p>I suppose these would need to be axioms, so they’re costly?</p>",
        "id": 392835929,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695563784
    },
    {
        "content": "<p>No you could prove stuff like that given that you have a proper Lean representation in the form of a structure instead of an opaque.</p>",
        "id": 392836422,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695564058
    },
    {
        "content": "<p>Ah, I see: it has transparent reference implementations which are then swapped out.  Thanks!</p>",
        "id": 392836555,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695564145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/270676-lean4/topic/Parallelism.20outside.20IO/near/392835160\">said</a>:</p>\n<blockquote>\n<p>Whoops, apologies for the hallucination!  I saw an example with IO and didn’t read carefully.</p>\n</blockquote>\n<p>Note that you can also have IO with tasks through <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.asTask#doc\">docs#IO.asTask</a></p>",
        "id": 392836920,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695564378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Parallelism.20outside.20IO/near/392836422\">said</a>:</p>\n<blockquote>\n<p>No you could prove stuff like that given that you have a proper Lean representation in the form of a structure instead of an opaque.</p>\n</blockquote>\n<p>Can such a proper Lean representation with proven properties point to the underlying structure/method in C++/Rust etc.? I can only find guides on pointing opaque Lean types to them, which only proves inhabited. Can I expect deeper connections?</p>",
        "id": 392837552,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695564840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Parallelism.20outside.20IO/near/392837552\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Parallelism.20outside.20IO/near/392836422\">said</a>:</p>\n<blockquote>\n<p>No you could prove stuff like that given that you have a proper Lean representation in the form of a structure instead of an opaque.</p>\n</blockquote>\n<p>Can such a proper Lean representation with proven properties point to the underlying structure/method in C++/Rust etc.? I can only find guides on pointing opaque Lean types to them, which only proves inhabited. Can I expect deeper connections?</p>\n</blockquote>\n<p>These things are primitives in the run time right now but iirc there was some discussion about generalizing this approach a while back</p>",
        "id": 392837642,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695564895
    },
    {
        "content": "<p>Yes, I understand that only needing to prove inhabited is a feature to prevent foreign code to compromise the soundness in Lean. But somehow I imagine Lean can also support some parallel implementation, the one in Lean is a conceptual and reasonably efficient implementation, it's both runnable and have proven properties, the other one in C++/Rust etc. to handle real-world subtleties and is sufficiently efficient, and there's native support in Lean to make the correspondence and swap in the implementation where needed, which guarantees the soundness of the algorithmic skeleton which is the major concern of the soundness.</p>",
        "id": 392838836,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695565830
    },
    {
        "content": "<p>I fail to find the discussion about generalizing this approach, any keywords or pointers?</p>",
        "id": 392838913,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695565903
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2292\">https://github.com/leanprover/lean4/pull/2292</a></p>",
        "id": 392839179,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695566108
    },
    {
        "content": "<p>Thanks for the pointer, it's illuminating.</p>",
        "id": 392840881,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695567485
    }
]