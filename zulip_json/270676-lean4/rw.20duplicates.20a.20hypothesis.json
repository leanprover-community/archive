[
    {
        "content": "<p>It seems that <code>rw</code> sometimes duplicates a hypothesis rather than replacing it.  Is this intended, or -- if it's a bug -- has it been reported?  Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>The goal state is now</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>a b : Nat\nh✝ : a = b\nh : a = 0\n⊢ False\n</code></pre></div>\n<p>I'm on nightly-2023-02-24 (edit: also happens on nightly-2023-03-15).</p>",
        "id": 342761650,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679138833
    },
    {
        "content": "<p>IIRC, it has to do with the fact that you changed the type of <code>h</code> to something which is not defeq with the old type, so any uses of <code>h</code> in other expressions have to refer to the old <code>h</code>.</p>",
        "id": 342765050,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1679140049
    },
    {
        "content": "<p>Aha, that makes sense!</p>\n<p>It would be nice if there were some extra logic which noticed that in this goal state there are no uses of <code>h</code> in other expressions, and then went ahead and deleted <code>h✝</code>.  (This is surely the more typical situation!). Is that possible?</p>",
        "id": 342765928,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679140341
    },
    {
        "content": "<p>For what it's worth, Lean 3 (on the web editor's current version of the community fork) apparently does do this, keeping two different <code>h</code> in the goal state after <code>rw</code> only if the original <code>h</code> is referenced somewhere.  Reference code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 342767910,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679140941
    },
    {
        "content": "<p>that logic already exists. There must be something hidden in the context which is referring to the old <code>h</code></p>",
        "id": 342779528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679144994
    },
    {
        "content": "<p>Note that it works as expected if <code>foo</code> is not generic, i.e. <code>theorem foo {a b : Nat} : a = b ↔ a = 0 := sorry</code></p>",
        "id": 342780197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679145243
    },
    {
        "content": "<p>so probably the thing that is referring to the old <code>h</code> is a metavariable which is not yet solved (e.g. the variable <code>α</code> in <code>foo</code>)</p>",
        "id": 342780435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679145327
    },
    {
        "content": "<p>You can clear the variable after the fact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">h2</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 342780495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679145360
    },
    {
        "content": "<p>Now this is unexpected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h2</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- does not replace h</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h2</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- replaces h</span>\n</code></pre></div>",
        "id": 342782133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679145980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/rw.20duplicates.20a.20hypothesis/near/342780435\">said</a>:</p>\n<blockquote>\n<p>so probably the thing that is referring to the old <code>h</code> is a metavariable which is not yet solved (e.g. the variable <code>α</code> in <code>foo</code>)</p>\n</blockquote>\n<p>Interesting.  Is that a bug?  It seems like the variable <code>α</code> should be identifiable here as <code>Nat</code>?</p>",
        "id": 342807687,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679155606
    },
    {
        "content": "<p><code>rw [bar _]</code> vs <code>rw [bar]</code> shows the same behavior as above</p>",
        "id": 342812405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679157759
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/2158\">lean4#2158</a> for this.</p>",
        "id": 343179013,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679332300
    }
]