[
    {
        "content": "<p>Lean makes it wonderfully easy to define appropriate syntax.</p>\n<p>When giving an error message, it uses whatever syntax I have defined to print constructs concisely. However, if I use #eval to compute a term, then the result is not pretty-printed, and unreadably verbose. For example, if I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span> <span class=\"bp\">⇒</span> <span class=\"n\">ℕ</span> <span class=\"bp\">⇒</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">μ</span> <span class=\"bp\">ƛ</span> <span class=\"bp\">ƛ</span> <span class=\"o\">(</span><span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"n\">S</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">#</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">Z</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">Z</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">two_plus_two</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">plus</span> <span class=\"bp\">⬝</span> <span class=\"mi\">2</span> <span class=\"bp\">⬝</span> <span class=\"mi\">2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">two_plus_two</span>\n</code></pre></div>\n<p>Then the result is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Typesig.term.application</span>\n  <span class=\"o\">(</span><span class=\"n\">Typesig.term.application</span>\n    <span class=\"o\">(</span><span class=\"n\">Typesig.term.mu</span>\n      <span class=\"o\">(</span><span class=\"n\">Typesig.term.lambda</span>\n        <span class=\"o\">(</span><span class=\"n\">Typesig.term.lambda</span>\n          <span class=\"o\">(</span><span class=\"n\">Typesig.term.case</span>\n            <span class=\"o\">(</span><span class=\"n\">Typesig.term.var</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.stop</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">Typesig.term.var</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.pop</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.stop</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"n\">Typesig.term.succ</span>\n              <span class=\"o\">(</span><span class=\"n\">Typesig.term.application</span>\n                <span class=\"o\">(</span><span class=\"n\">Typesig.term.application</span>\n                  <span class=\"o\">(</span><span class=\"n\">Typesig.term.var</span>\n                    <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.pop</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.pop</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.pop</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.stop</span><span class=\"o\">)))))</span>\n                  <span class=\"o\">(</span><span class=\"n\">Typesig.term.var</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.pop</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.pop</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.stop</span><span class=\"o\">)))))</span>\n                <span class=\"o\">(</span><span class=\"n\">Typesig.term.var</span> <span class=\"o\">(</span><span class=\"n\">Typesig.lookup.stop</span><span class=\"o\">))))))))</span>\n    <span class=\"o\">(</span><span class=\"n\">Typesig.term.succ</span> <span class=\"o\">(</span><span class=\"n\">Typesig.term.succ</span> <span class=\"o\">(</span><span class=\"n\">Typesig.term.zero</span><span class=\"o\">))))</span>\n  <span class=\"o\">(</span><span class=\"n\">Typesig.term.succ</span> <span class=\"o\">(</span><span class=\"n\">Typesig.term.succ</span> <span class=\"o\">(</span><span class=\"n\">Typesig.term.zero</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>What I would like to get instead is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"bp\">ƛ</span> <span class=\"bp\">ƛ</span> <span class=\"o\">(</span><span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"n\">S</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">#</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">Z</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">Z</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span>  <span class=\"bp\">⬝</span> <span class=\"mi\">2</span> <span class=\"bp\">⬝</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Is there any way to get the latter rather than the former?</p>",
        "id": 403029296,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700411967
    },
    {
        "content": "<p>Can you make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? We can't really help without seeing the definition of your notations</p>",
        "id": 403029549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700412096
    },
    {
        "content": "<p>Does it behave as you expect with <code>#check</code>?</p>",
        "id": 403029581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700412118
    },
    {
        "content": "<p>Do you have a repository for this? My suspicion is that there are no unexpanders getting activated for your syntax</p>",
        "id": 403030410,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700412669
    },
    {
        "content": "<p>The complete code is available here: <a href=\"https://github.com/plfa/plfl/blob/main/src/Typesig.lean\">https://github.com/plfa/plfl/blob/main/src/Typesig.lean</a>. Apologies for forgetting to mention that earlier!</p>",
        "id": 403030496,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700412722
    },
    {
        "content": "<p>You are using <code>notation</code> here. Lean 4 typically requires you to write something called a delaborator in many cases. One quick work around is to try using <code>notation3</code> which is the lean3 version of this. It is somewhat more limited but the generation of delaboration code works automatically.</p>",
        "id": 403030946,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700413026
    },
    {
        "content": "<p>Thanks, Shreyas. How would I rewrite my code to use notation3? Could you point me to an example?</p>",
        "id": 403031088,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700413128
    },
    {
        "content": "<p>All the notation3 examples I know are in mathlib. You can see some examples in this github search : <a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+notation3&amp;type=code\">https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+notation3&amp;type=code</a></p>",
        "id": 403031448,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700413321
    },
    {
        "content": "<p>Fwiw, for PL purposes it might be worth mixing some notation3 stuff for expressing <span class=\"tex-error\">$$\\Gamma \\turnstile e : A$$</span> stuff while writing the language and its denotations with the <code>syntax</code> feature. I have an example from <a href=\"https://live.lean-lang.org/#code=import%20Lean%0D%0Aimport%20Mathlib.Tactic%0D%0Aopen%20Lean%20Lean.Syntax%20Lean.PrettyPrinter%0D%0A%0D%0Ainductive%20Binder%20where%0D%0A%20%20%7C%20BNamed%20(s%20%3A%20String)%0D%0A%20%20%7C%20BAnon%0D%0Aderiving%20Repr%2C%20DecidableEq%0D%0A%0D%0Ainductive%20LExpr%20where%0D%0A%20%20%7C%20Var%20(x%20%3A%20String)%0D%0A%20%20%7C%20Lam%20(x%20%3A%20Binder)%20(e%20%3A%20LExpr)%0D%0A%20%20%7C%20App%20(e%E2%82%81%20e%E2%82%82%20%3A%20LExpr)%0D%0A%20%20%7C%20LitInt%20(n%20%3A%20%E2%84%A4)%0D%0A%20%20%7C%20Plus%20(e%E2%82%81%20e%E2%82%82%20%3A%20LExpr)%0D%0Aderiving%20Repr%2C%20DecidableEq%0D%0A%0D%0Aopen%20LExpr%0D%0Adeclare_syntax_cat%20int%0D%0Asyntax%20(%22-%22)%3F%20num%20%3A%20int%0D%0Asyntax%20%22%5BZ%7C%20%22%20int%20%22%20%5D%22%20%3A%20term%0D%0A%0D%0Amacro_rules%0D%0A%7C%20%60(%5BZ%7C%24n%3Anum%5D)%20%3D%3E%20%60(%24n)%0D%0A%7C%20%60(%5BZ%7C-%24n%3Anum%5D)%20%3D%3E%20%60(-%24n)%0D%0A%0D%0A%0D%0A%0D%0Adeclare_syntax_cat%20binder%0D%0Asyntax%20ident%20%3A%20binder%0D%0Asyntax%20%22%5BB%7C%22%20binder%20%22%5D%22%20%3A%20term%0D%0A%0D%0Amacro_rules%0D%0A%7C%20%60(%5BB%7C%24x%3Aident%5D)%20%3D%3E%20%20do%0D%0A%20%20%20%20%20%20let%20xString%20%3A%3D%20Lean.quote%20(toString%20x.getId)%0D%0A%20%20%20%20%20%20%60(Binder.BNamed%20%24xString)%0D%0A%0D%0Adeclare_syntax_cat%20expr%0D%0Asyntax%20ident%20%3A%20expr%0D%0Asyntax%20int%20%3A%20expr%0D%0Asyntax%20%22%CE%BB%20%22%20binder%20%22%20%E2%86%A6%20%22%20expr%20%3A%20expr%0D%0Asyntax%20expr%20%22%20%C2%B7%20%22%20expr%20%3A%20expr%0D%0Asyntax%20expr%20%22%20%2B%20%22%20expr%20%3A%20expr%0D%0Asyntax%20%22(%20%22%20expr%20%22%20)%22%20%3A%20expr%0D%0Asyntax%20%22%5Blam%7C%20%22%20expr%20%22%20%5D%22%20%3A%20term%0D%0A%0D%0Amacro_rules%0D%0A%7C%20%60(%5Blam%7C%20%24x%3Aident%5D)%20%3D%3E%20%60(LExpr.Var%20%24(Lean.quote%20(toString%20x.getId)))%0D%0A%7C%20%60(%5Blam%7C%20%CE%BB%20%24b%3Abinder%20%E2%86%A6%20%24e%3Aexpr%5D)%20%3D%3E%20%60(LExpr.Lam%20%5BB%7C%24b%5D%20%5Blam%7C%20%24e%5D)%0D%0A%7C%20%60(%5Blam%7C%20%24e%E2%82%81%20%C2%B7%20%24e%E2%82%82%5D)%20%3D%3E%20%60(LExpr.App%20%5Blam%7C%24e%E2%82%81%5D%20%5Blam%7C%24e%E2%82%82%5D)%0D%0A%7C%20%60(%5Blam%7C%20%24n%3Aint%5D)%20%3D%3E%20%60(LExpr.LitInt%20%5BZ%7C%24n%5D)%0D%0A%7C%20%60(%5Blam%7C%20(%24e%3Aexpr)%5D)%20%3D%3E%20%60(%5Blam%7C%20%24e%5D)%0D%0A%7C%20%60(%5Blam%7C%20%24e%E2%82%81%20%2B%20%24e%E2%82%82%5D)%20%3D%3E%20%60(LExpr.Plus%20%5Blam%7C%20%24e%E2%82%81%5D%20%5Blam%7C%20%24e%E2%82%82%5D)%0D%0A%0D%0A%0D%0A--%20These%20coercions%20are%20used%20by%20the%20unexpanders%20below%0D%0Ainstance%20%3A%20Coe%20NumLit%20(TSyntax%20%60expr)%20where%0D%0A%20%20coe%20s%20%3A%3D%20%E2%9F%A8s.raw%E2%9F%A9%0D%0A%0D%0Ainstance%20%3A%20Coe%20(TSyntax%20%60int)%20(TSyntax%20%60expr)%20where%0D%0A%20%20coe%20s%20%3A%3D%20%E2%9F%A8s.raw%E2%9F%A9%0D%0A%0D%0A%0D%0Ainstance%20%3A%20Coe%20Ident%20(TSyntax%20%60expr)%20where%0D%0A%20%20coe%20s%20%3A%3D%20%E2%9F%A8s.raw%E2%9F%A9%0D%0A%0D%0Ainstance%20%3A%20Coe%20StrLit%20(TSyntax%20%60binder)%20where%0D%0A%20%20coe%20s%20%3A%3D%20%E2%9F%A8s.raw%E2%9F%A9%0D%0Ainstance%20%3A%20Coe%20StrLit%20(TSyntax%20%60expr)%20where%0D%0A%20%20coe%20s%20%3A%3D%20%E2%9F%A8s.raw%E2%9F%A9%0D%0A%0D%0A%0D%0A%0D%0A%40%5Bapp_unexpander%20Binder.BNamed%5D%0D%0Adef%20unexpandBNamed%20%3A%20Unexpander%0D%0A%20%20%7C%20%60(%24_Binder.BNamed%20%24x%3Astr)%20%3D%3E%20%60(%5BB%7C%20%24x%5D)%0D%0A%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%0D%0A%40%5Bapp_unexpander%20LExpr.LitInt%5D%0D%0Adef%20unexpandLitInt%20%3A%20Unexpander%0D%0A%20%20%7C%20%60(%24_%20%24x)%20%3D%3E%0D%0A%20%20%20%20match%20x%20with%0D%0A%20%20%20%20%7C%20%60(%24x%3Anum)%20%3D%3E%20%60(%5Blam%7C%20%24x%5D)%0D%0A%20%20%20%20%7C%20%60(-%24x%3Anum)%20%3D%3E%20%60(%5Blam%7C%20-%24x%5D)%0D%0A%20%20%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%0D%0A%40%5Bapp_unexpander%20LExpr.Plus%5D%0D%0Adef%20unexpandPlus%20%3A%20Unexpander%0D%0A%20%20%7C%20%60(%24_LExpr.Plus%20%5Blam%7C%20%24e%E2%82%81%3Aexpr%5D%20%5Blam%7C%20%24e%E2%82%82%3Aexpr%5D)%20%3D%3E%20%60(%5Blam%7C%20%24e%E2%82%81%20%2B%20%24e%E2%82%82%5D)%0D%0A%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%0D%0A%40%5Bapp_unexpander%20LExpr.Lam%5D%0D%0Adef%20unexpandLam%20%3A%20Unexpander%0D%0A%20%20%7C%20%60(%24_LExpr.Lam%20%5BB%7C%20%24b%3Abinder%5D%20%5Blam%7C%20%24e%3Aexpr%5D)%20%3D%3E%20%60(%5Blam%7C%CE%BB%20%24b%20%E2%86%A6%20%24e%5D)%0D%0A%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%0D%0A%40%5Bapp_unexpander%20LExpr.App%5D%0D%0Adef%20unexpandApp%20%3A%20Unexpander%0D%0A%20%20%7C%20%60(%24_LExpr.App%20%5Blam%7C%20%24e%E2%82%81%3Aexpr%5D%20%5Blam%7C%20%24e%E2%82%82%3Aexpr%5D)%20%3D%3E%20%60(%5Blam%7C%20%24e%E2%82%81%20%C2%B7%20%24e%E2%82%82%5D)%0D%0A%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%0D%0A%40%5Bapp_unexpander%20LExpr.Var%5D%0D%0Adef%20unexpandVar%20%3A%20Unexpander%0D%0A%20%20%7C%20%60(%24_LExpr.Var%20%24x%3Astr)%20%3D%3E%20%60(%5Blam%7C%20%24x%5D)%0D%0A%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%0D%0A%0D%0A%0D%0A%23check%20%5Blam%7C%20x%5D%20--%20%5Blam%7C%20%22x%22%20%5D%20%3A%20_root_.LExpr%0D%0A%23check%20%5Blam%7C%20%CE%BB%20y%20%E2%86%A6%20y%20%2B%20y%20%2B%20x%5D%20--%20%5Blam%7C%20%CE%BB%20%22y%22%20%E2%86%A6%20%22y%22%20%2B%20%22y%22%20%2B%20%22x%22%20%5D%20%3A%20_root_.LExpr%0D%0A%23check%20%5Blam%7C%20-1%5D%20--%20LExpr.LitInt%20(-1)%20%3A%20_root_.LExpr%0D%0A%0D%0A%0D%0Ainductive%20Val%20where%0D%0A%20%20%7C%20LitIntV%20(n%20%3A%20%E2%84%A4)%0D%0A%20%20%7C%20LamV%20(x%20%3A%20Binder)%20(e%20%3A%20LExpr)%0D%0Aderiving%20Repr%2C%20DecidableEq%0D%0Aopen%20Val%0D%0A%0D%0Adeclare_syntax_cat%20val%0D%0Asyntax%20int%20%3A%20val%0D%0Asyntax%20%22%CE%BB%20%22%20binder%20%22%20%E2%86%A6%20%22%20expr%20%3A%20val%0D%0Asyntax%20%22%5Bval%7C%20%22%20val%20%22%20%5D%22%20%3A%20term%0D%0A%0D%0Amacro_rules%0D%0A%7C%20%60(%5Bval%7C%20%24n%3Aint%5D)%20%3D%3E%20%60(Val.LitIntV%20%5BZ%7C%20%24n%5D)%0D%0A%7C%20%60(%5Bval%7C%20%CE%BB%20%24b%3Abinder%20%E2%86%A6%20%24e%3Aexpr%5D)%20%3D%3E%20%60(Val.LamV%20%5BB%7C%24b%5D%20%5Blam%7C%24e%5D)%0D%0A%0D%0Ainstance%20%3A%20Coe%20NumLit%20(TSyntax%20%60val)%20where%0D%0A%20%20coe%20s%20%3A%3D%20%E2%9F%A8s.raw%E2%9F%A9%0D%0Ainstance%20%3A%20Coe%20(TSyntax%20%60int)%20(TSyntax%20%60val)%20where%0D%0A%20%20coe%20s%20%3A%3D%20%E2%9F%A8s.raw%E2%9F%A9%0D%0A%40%5Bapp_unexpander%20Val.LitIntV%5D%0D%0Adef%20unexpandLitVInt%20%3A%20Unexpander%0D%0A%20%20%7C%20%60(%24_%20%24x)%20%3D%3E%0D%0A%20%20%20%20match%20x%20with%0D%0A%20%20%20%20%7C%20%60(%24x%3Anum)%20%3D%3E%20%60(%5Bval%7C%20%24x%5D)%0D%0A%20%20%20%20%7C%20%60(-%24x%3Anum)%20%3D%3E%20%60(%5Bval%7C%20-%24x%5D)%0D%0A%20%20%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%0D%0A%40%5Bapp_unexpander%20Val.LamV%5D%0D%0Adef%20unexpandLamV%20%3A%20Unexpander%0D%0A%20%20%7C%20%60(%24_Val.LamV%20%5BB%7C%24x%5D%20%5Blam%7C%24e%5D)%20%3D%3E%20%60(%5Bval%7C%20%CE%BB%20%24x%20%E2%86%A6%20%24e%5D)%0D%0A%20%20%7C%20_%20%3D%3E%20throw%20()%0D%0A%0D%0A%23check%20%5Bval%7C%201%5D%0D%0A%23check%20%5Bval%7C%20%CE%BB%20x%20%E2%86%A6%20x%C2%B7x%C2%B7x%5D%0D%0A%23check%20%5Bval%7C%20-1%5D%0D%0A\">something I wrote a few weeks ago</a>.</p>",
        "id": 403031747,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700413457
    },
    {
        "content": "<p>under <code>declare_syntax_cat</code>, I define the syntactic structure of the language, translate them to the values of an inductive type using <code>macro_rules</code> and then teach lean how to get back the notation from the values back into the syntactic form in the <code>unexpander</code> functions</p>",
        "id": 403032509,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700413955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Prettyprinting.20the.20result.20of.20an.20.23eval/near/403030410\">said</a>:</p>\n<blockquote>\n<p>Do you have a repository for this? My suspicion is that there are no unexpanders getting activated for your syntax</p>\n</blockquote>\n<p>FYI, unexpanders and delaborators don't apply to <code>Repr</code>, which is what <code>#eval</code> uses. Delaborators are for <code>Lean.Expr -&gt; Lean.Syntax</code>, not going from runtime terms.</p>\n<p>That said, if you have a <code>ToExpr</code> instance you could probably make use of delaboration, though the fact that <code>Repr</code> doesn't use a monad might make that impossible.</p>",
        "id": 403039775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700418481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"505123\">@Philip Wadler</span> The reason you get pretty printed error messages during typechecking is that your terms are still represented as <code>Lean.Expr</code>s. However, when you do <code>#eval</code>, it's compiling your expression into a program, evaluating that with a virtual machine, and then using the <code>Repr</code> class to reflect the run-time value back into something (hopefully) human/machine readable.</p>\n<p>If you use <code>#reduce</code>, it never leaves the world of <code>Lean.Expr</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">two_plus_two</span>\n<span class=\"c1\">-- (μƛƛswitch (#Z) (#S Z) ((#S S S Z⬝#S S Z⬝#Z)+1))⬝o+1+1⬝o+1+1</span>\n</code></pre></div>\n<p>This uses expression reduction. (For pretty printing, make sure to write <code>\" ⬝ \"</code> instead of <code>\"⬝\"</code> if you want whitespace.)</p>\n<p>If you want <code>#eval</code>ed expressions to pretty print, I believe you'll need to write custom <code>Repr</code>s rather than deriving them.</p>",
        "id": 403040607,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700418927
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> If a type has a <code>ToExpr</code> instance, is there any trick or giant hack to create a <code>Repr</code> instance by using <code>ppExpr</code>?)</p>",
        "id": 403041131,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700419226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> and <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Many thanks! Using <code>#reduce</code> instead of <code>#eval</code> gives a much more readable result.</p>",
        "id": 403043055,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700420458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Prettyprinting.20the.20result.20of.20an.20.23eval/near/403039775\">said</a>:</p>\n<blockquote>\n<p>FYI, unexpanders and delaborators don't apply to <code>Repr</code>, which is what <code>#eval</code> uses. Delaborators are for <code>Lean.Expr -&gt; Lean.Syntax</code>, not going from runtime terms.</p>\n</blockquote>\n<p>Yeah I should have considered and mentioned <code>#reduce</code>. I use it extensively in the code from which my example was extracted.</p>",
        "id": 403044315,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700421202
    },
    {
        "content": "<p>Also, it's worth knowing that <code>notation</code> does generate unexpanders in Philip's code, so there's no need for <code>notation3</code> here. The <code>notation</code> command is happy when the RHS is a constant or a simple application, with each variable used exactly once. (You mentioned <code>notation3</code> is more limited, but I believe it's a strict superset of <code>notation</code> -- do you have any examples where it's not?)</p>",
        "id": 403044708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700421448
    },
    {
        "content": "<p>Some mathlib4 discussions earlier in the year gave me that idea. Something about declaring precedence.</p>",
        "id": 403045345,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700421854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"505123\">@Philip Wadler</span> Unrelated aside, but you can make use of the notation inside the definition of the inductive if you declare it beforehand with <code>set_option hygiene false</code> in a section:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span>  <span class=\"s2\">\" ∋ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lookup</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span>  <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">TpEnv</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">stop</span> <span class=\"o\">:</span>\n       <span class=\"c1\">---------</span>\n       <span class=\"bp\">Γ</span> <span class=\"bp\">▷</span> <span class=\"n\">A</span> <span class=\"bp\">∋</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pop</span> <span class=\"o\">:</span>\n       <span class=\"bp\">Γ</span> <span class=\"bp\">∋</span> <span class=\"n\">B</span>\n       <span class=\"c1\">---------</span>\n     <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">▷</span> <span class=\"n\">A</span> <span class=\"bp\">∋</span> <span class=\"n\">B</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">TpEnv</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span>\n        <span class=\"bp\">Γ</span> <span class=\"bp\">∋</span> <span class=\"n\">A</span>\n        <span class=\"c1\">-----</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lambda</span> <span class=\"o\">:</span>\n        <span class=\"bp\">Γ</span> <span class=\"bp\">▷</span> <span class=\"n\">A</span> <span class=\"bp\">⊢</span> <span class=\"n\">B</span>\n        <span class=\"c1\">---------</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">⇒</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">application</span> <span class=\"o\">:</span>\n        <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">⇒</span> <span class=\"n\">B</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n        <span class=\"c1\">-----</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span>\n        <span class=\"c1\">-----</span>\n        <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span>\n        <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n        <span class=\"c1\">-----</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"o\">:</span>\n        <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n      <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">▷</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n        <span class=\"c1\">-----------</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mu</span> <span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">▷</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n        <span class=\"c1\">-----------</span>\n      <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span>  <span class=\"s2\">\" ∋ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lookup</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span>  <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 403046669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700422696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Regarding <code>ToExpr</code>, there isn't a derive handler for it so it's not really simpler than writing a <code>Repr</code> instance by hand, but here's a basic example of using <code>toExpr</code> in <code>#eval</code> using a <code>MetaEval</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Tp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">natural</span> <span class=\"o\">:</span> <span class=\"n\">Tp</span>\n<span class=\"bp\">|</span> <span class=\"n\">function</span> <span class=\"o\">:</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tp.natural</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ⇒ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tp.function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToExpr</span> <span class=\"n\">Tp</span> <span class=\"n\">where</span>\n  <span class=\"n\">toTypeExpr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Tp</span> <span class=\"o\">[]</span>\n  <span class=\"n\">toExpr</span> <span class=\"o\">:=</span> <span class=\"n\">go</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Tp.natural</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">⇒</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Tp.function</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">go</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">go</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MetaEval</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">opts</span> <span class=\"n\">a</span> <span class=\"n\">hideUnit</span> <span class=\"o\">:=</span>\n    <span class=\"n\">MetaEval.eval</span> <span class=\"n\">env</span> <span class=\"n\">opts</span> <span class=\"o\">(</span><span class=\"n\">Meta.ppExpr</span> <span class=\"o\">(</span><span class=\"n\">toExpr</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">hideUnit</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">ℕ</span> <span class=\"bp\">⇒</span> <span class=\"n\">ℕ</span>\n<span class=\"c1\">-- ℕ ⇒ ℕ</span>\n</code></pre></div>",
        "id": 403048023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700424046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> : Took me a while to find, but there was also this: <a href=\"#narrow/stream/287929-mathlib4/topic/Pretty-printing.20of.20sums/near/355293664\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Pretty-printing.20of.20sums/near/355293664</a></p>",
        "id": 403048240,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700424164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm sure there's a derive handler since I wrote it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/DeriveToExpr.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/DeriveToExpr.html</a></p>",
        "id": 403048282,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700424192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> That's very old now. <code>notation3</code> in the meantime got the ability to delaborate its notations.</p>",
        "id": 403048445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700424342
    },
    {
        "content": "<p>Oh nice, and I can confirm it works in the full example</p>",
        "id": 403048540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700424416
    },
    {
        "content": "<p>I wonder if we should either have that instance as a low-priority instance in mathlib, or at least put it in the documentation somewhere. (Maybe a non-instance <code>def</code>, so you can quickly make a <code>MetaEval</code> instance for your type?)</p>",
        "id": 403048749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700424600
    },
    {
        "content": "<p>it should be in core</p>",
        "id": 403048803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700424615
    },
    {
        "content": "<p>If there is no other MetaEval instance I don't see any reason not to use this one, and it's a design decision whether to prefer this over Repr</p>",
        "id": 403048857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700424690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thank you for that hint. I was wondering if there was a way to do that.</p>",
        "id": 403049236,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700425021
    }
]