[
    {
        "content": "<p>What is the lean equivalent of Coq's inversion tactic?</p>",
        "id": 399987511,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698944907
    },
    {
        "content": "<p>Maybe <code>injection</code> or <code>cases</code>?</p>",
        "id": 399988872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698945394
    },
    {
        "content": "<p>It doesn't quite work equivalently. inversion generates a bunch of equalities. I'll try to construct an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to explain</p>",
        "id": 399989020,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698945457
    },
    {
        "content": "<p>Here's a lean example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expression</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Lit</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Expression</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">LitV</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Value</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LitV</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lit</span> <span class=\"n\">z</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BigStep</span> <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">LitRule</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Lit</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LitV</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simpleExample</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Value</span><span class=\"o\">,</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">toExpr</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">H</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"c1\">-- some error about dependent elimination failure</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399991624,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698946433
    },
    {
        "content": "<p>Here's the corresponding Coq example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">From</span> <span class=\"n\">Coq</span> <span class=\"n\">Require</span> <span class=\"n\">Import</span> <span class=\"n\">ZArith.</span>\n\n<span class=\"n\">Inductive</span> <span class=\"n\">Expression</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">Lit</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n\n<span class=\"n\">Inductive</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">LitV</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n\n<span class=\"n\">Definition</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LitV</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lit</span> <span class=\"n\">z</span>\n  <span class=\"kd\">end</span><span class=\"bp\">.</span>\n\n\n<span class=\"n\">Inductive</span> <span class=\"n\">BigStep</span> <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">LitRule</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Lit</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LitV</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Lemma</span> <span class=\"n\">simpleExample</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Value</span><span class=\"o\">,</span> <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">toExpr</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">w.</span>\n<span class=\"n\">Proof.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">H.</span>\n  <span class=\"n\">destruct</span> <span class=\"n\">v.</span>\n  <span class=\"n\">inversion</span> <span class=\"n\">H.</span>\n  <span class=\"n\">reflexivity.</span>\n<span class=\"n\">Qed.</span>\n</code></pre></div>",
        "id": 399991726,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698946455
    },
    {
        "content": "<p>As you can see Coq does some backward reasoning at H, and produces a bunch of equalities</p>",
        "id": 399991808,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698946491
    },
    {
        "content": "<p><code>cases v; cases H</code> works there</p>",
        "id": 399992629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698946814
    },
    {
        "content": "<p>Which I think is a reasonable translation of <code>destruct v</code> <code>inversion H</code></p>",
        "id": 399992700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698946839
    },
    {
        "content": "<p>Okay, I think my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> example is not quite getting it right</p>",
        "id": 399993475,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698947139
    },
    {
        "content": "<p>Some previous discussion <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.60inversion.60.20tactic.3F/near/257502550\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20.60inversion.60.20tactic.3F/near/257502550</a></p>",
        "id": 399993500,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698947148
    },
    {
        "content": "<p>The error was due to an altogether different reason. In one of my alternatives for <code>BigStep</code> (which has other constructors ofc), one of the options was incorrectly using a substitution function.</p>",
        "id": 399996089,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698948158
    },
    {
        "content": "<p>Essentially the last line below was missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BigStep</span> <span class=\"o\">:</span> <span class=\"n\">LExpr</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bsLit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">LitInt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LitIntV</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bsLam</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Binder</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">LExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LamV</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bsPlus</span> <span class=\"o\">{</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">LExpr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">BigStep</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">LitIntV</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">BigStep</span> <span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"n\">LitIntV</span> <span class=\"n\">z₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">Plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LitIntV</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"bp\">+</span> <span class=\"n\">z2</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bsApp</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Binder</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">:</span> <span class=\"n\">LExpr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v₂</span> <span class=\"n\">v'</span><span class=\"o\">:</span> <span class=\"n\">Val</span><span class=\"o\">}:</span>\n      <span class=\"n\">BigStep</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">LamV</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">BigStep</span> <span class=\"n\">e₂</span> <span class=\"n\">v₂</span> <span class=\"bp\">→</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">subst'</span> <span class=\"n\">x</span> <span class=\"n\">v₂</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">→</span>\n      <span class=\"n\">BigStep</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 399996171,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698948186
    },
    {
        "content": "<p>Starting with the arrow in the previous line.</p>",
        "id": 399996222,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698948204
    }
]