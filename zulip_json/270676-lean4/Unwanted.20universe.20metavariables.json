[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/function.2Ecombine/near/361991737\">said</a>:</p>\n<blockquote>\n<p>At least in Lean3 you could write <code>variables {A B C D E : Type*}</code> and have it do the right thing; in lean 4 you have to deal with the fact that two types may accidentally be assigned the same universe</p>\n</blockquote>\n<p>What is \"the right thing\" for you? Lean 4 <code>variable {α β γ δ ε : Type _}</code> assigns different universes to each type. You have to write <code>variable {α β γ δ ε : Type u}</code> to force them to have the same type.</p>",
        "id": 362303839,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1685482396
    },
    {
        "content": "<p>You have to be careful with <code>variable {α β γ δ ε : Type _}</code>, since it assign different universe <em>meta</em>variables. Depending on how the types are used, they could be all different, all the same, or even specialized to particular universe levels (like <code>0</code>). If you want to be sure that they are actually all different (and universe polymorphic), you have to do <code>variable {α : Type s} {β : Type t} {γ : Type u} {δ : Type v} {ε : Type w}</code>.</p>",
        "id": 362304728,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685482800
    },
    {
        "content": "<p>No, that's not what the Lean 4 version does. It assigns different universe <em>meta</em>variables, which Lean can then unify at will. This is what Eric is referring to by \"accidentally assigned to the same universe\".</p>",
        "id": 362304789,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685482812
    },
    {
        "content": "<p>To be clear, Yael is saying that your claim is wrong <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>, not Kyle's</p>",
        "id": 362307856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685484262
    },
    {
        "content": "<blockquote>\n<p>What is \"the right thing\" for you?</p>\n</blockquote>\n<p>It's to have <code>{A B C D E : Type*}</code> syntax which means <code>universes uA uB uC uD uE</code> and <code>{A : Type uA} {B : Type uB} {C : Type uC} {D : Type uD} {E : Type uE}</code></p>",
        "id": 362308125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685484379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What do you know, it turns out it's really easy to implement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Sort*\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.mkFreshLevelMVar</span>\n  <span class=\"n\">Elab.Term.levelMVarToParam</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Type*\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.mkFreshLevelMVar</span>\n  <span class=\"n\">Elab.Term.levelMVarToParam</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Allowed, metavariables</span>\n<span class=\"k\">#check</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Not allowed, distinct level variables</span>\n<span class=\"k\">#check</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  β</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type u_2 : Type (u_2 + 1)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type u_1 : Type (u_1 + 1)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 362309752,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685485095
    },
    {
        "content": "<p>Huh, I was expecting the binder syntax not to re-elaborate each time</p>",
        "id": 362309846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685485148
    },
    {
        "content": "<p>I guess naming the universes to match the type names is a lot more work</p>",
        "id": 362309893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685485171
    },
    {
        "content": "<p>If it didn't, then <code>Type _</code> wouldn't work the way it does, they'd all get the same metavariable</p>",
        "id": 362309896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685485172
    },
    {
        "content": "<p>I know what Lean 4 does. (I also know I should have said metavariables, my bad.) I still don't know why it's \"the wrong thing\".</p>\n<p>It's been a long while since I've used Lean 3, probably too long to miss its features, but I do remember that Lean 3's universe clashes were much more annoying than in Lean 4. In my mind, it's clear that assigning each variable its own universe metavariable is the right thing to do.</p>\n<p>Is there an example where a universe error would be more desirable than unification?</p>",
        "id": 362313947,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1685487128
    },
    {
        "content": "<p>I think the issue was more that lean 3 would sometimes incorrectly over-unify without telling you! In those cases you would rather see the error which you can then try and fix, rather than being oblivious to the problem in your code.</p>",
        "id": 362314600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685487491
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Subsingleton.2Eelim.20in.20a.20def/near/339122362\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Subsingleton.2Eelim.20in.20a.20def/near/339122362</a> has a couple examples where since they're metavariables you can get surprises like <code>Sort _</code> unifying with <code>Prop</code>.</p>",
        "id": 362314609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685487500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The situation in Lean 3 is more subtle than you might remember.</p>\n<p>It <em>looks</em> like <code>Type*</code> works by giving fresh universe levels:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  α = β</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  β</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type u_2 : Type (u_2+1)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type u_1 : Type (u_1+1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>But then this is ok:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 362315495,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685487983
    },
    {
        "content": "<p>Kyle, that's exactly the behavior I remember; <code>variables</code> was the workaround for <code>Type*</code> being annoying in declarations</p>",
        "id": 362315542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685488017
    },
    {
        "content": "<p>We had a bunch of problems that were fixed by hoisting the <code>{Type*}</code> to the top of the file</p>",
        "id": 362315585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685488045
    },
    {
        "content": "<p>Ok, it was unclear whether you were talking about <code>Type*</code> or the <code>variable</code> command, and it didn't occur to me you were talking about the <code>variable</code> command.</p>",
        "id": 362315621,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685488076
    },
    {
        "content": "<p>In Lean 3, the <code>variable</code> command itself is responsible for elaborating all the binders and generalizing universe level metavariables to level variables, but in Lean 4 binders are re-elaborated for every declaration.</p>",
        "id": 362315726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685488123
    },
    {
        "content": "<blockquote>\n<p>I still don't know why it's \"the wrong thing\".</p>\n</blockquote>\n<p>I guess my claim is the very slightly weaker \"it's a footgun that we don't seem to use to shoot anything but our feet with\"</p>",
        "id": 362315771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685488152
    },
    {
        "content": "<p>An example of the footgun:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">useless</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">rfl</span>  <span class=\"c1\">-- succeeds!?</span>\n</code></pre></div>",
        "id": 362316286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685488450
    },
    {
        "content": "<p>I see. I guess I've been lucky to avoid that gotcha. I see how it could be a real pain to debug that kind of issue.</p>",
        "id": 362318598,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1685490112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/function.2Ecombine/near/362316286\">said</a>:</p>\n<blockquote>\n<p>An example of the footgun:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">useless</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">rfl</span>  <span class=\"c1\">-- succeeds!?</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Another way to fix this issue would be to convert universe mvars to level params once you get to the type, and then either do it again when you get to the value or give an error if there are any level mvars in the value. (The latter behavior would cause an error if there is a universe in the body that you didn't mention in the type.)</p>",
        "id": 362320434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685491369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/function.2Ecombine/near/362309893\">said</a>:</p>\n<blockquote>\n<p>I guess naming the universes to match the type names is a lot more work</p>\n</blockquote>\n<p>Do you have any ideas for this?</p>",
        "id": 381240418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690996882
    },
    {
        "content": "<p>22 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/function.2Ecombine\">#lean4 &gt; function.combine</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 381240532,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690996913
    }
]