[
    {
        "content": "<p>There's this function in <code>Lean/Data/Options.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">setOptionFromString</span> <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">Options</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Options</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ps</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">entry.splitOn</span> <span class=\"s2\">\"=\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">String.trim</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">ps</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"invalid configuration option entry, it must be of the form '&lt;key&gt; = &lt;value&gt;'\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">Name.mkSimple</span> <span class=\"n\">key</span>\n  <span class=\"k\">let</span> <span class=\"n\">defValue</span> <span class=\"bp\">←</span> <span class=\"n\">getOptionDefaultValue</span> <span class=\"n\">key</span>\n  <span class=\"k\">match</span> <span class=\"n\">defValue</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofString</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setString</span> <span class=\"n\">key</span> <span class=\"n\">val</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofBool</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"bp\">`</span><span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setBool</span> <span class=\"n\">key</span> <span class=\"n\">true</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"bp\">`</span><span class=\"n\">false</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setBool</span> <span class=\"n\">key</span> <span class=\"n\">false</span>\n    <span class=\"k\">else</span> <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid Bool option value '{val}'\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofName</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setName</span> <span class=\"n\">key</span> <span class=\"n\">val.toName</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofNat</span> <span class=\"n\">_</span>    <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">val.toNat</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid Nat option value '{val}'\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setNat</span> <span class=\"n\">key</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofInt</span> <span class=\"n\">_</span>    <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">val.toInt</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid Int option value '{val}'\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setInt</span> <span class=\"n\">key</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofSyntax</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid Syntax option value\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I found this function to be a bit counterintuitive since</p>\n<ol>\n<li>The name should be something like <code>Name.str (Name.str ... name1) name2\" instead of </code>Name.mkSimple`</li>\n<li>The boolean parsing is completely wrong since <code>key</code> is the name of the key and should never be <code>true</code> or <code>false</code><br>\nI can make a PR for this if this semantics makes more sense</li>\n</ol>",
        "id": 360613975,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684867383
    },
    {
        "content": "<p>You are right, those both look like bugs. Is this function used at all? Removing it might be the more appropriate response.</p>",
        "id": 360648504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684880397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/setOptionFromString.20semantics/near/360648504\">said</a>:</p>\n<blockquote>\n<p>You are right, those both look like bugs. Is this function used at all? Removing it might be the more appropriate response.</p>\n</blockquote>\n<p>Its not used anywhere in lean, but would be pretty handy had it been written correctly</p>",
        "id": 360651605,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684881894
    },
    {
        "content": "<p>that sounds like a better fit for std</p>",
        "id": 360652158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684882154
    }
]