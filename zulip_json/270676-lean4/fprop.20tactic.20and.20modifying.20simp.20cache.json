[
    {
        "content": "<p>I want to do some symbolic algebra and program transformation. I was running into issues that using typeclasses and/or aesop for proving linearity, continuity, differentiability is too slow. So I wrote my own tactic <code>fprop</code>(function property/proposition). For example proving:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x1</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">x2</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span>\n  <span class=\"k\">let</span> <span class=\"n\">x3</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span>\n  <span class=\"k\">let</span> <span class=\"n\">x4</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span>\n  <span class=\"k\">let</span> <span class=\"n\">x5</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span>\n  <span class=\"k\">let</span> <span class=\"n\">x6</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span>\n  <span class=\"k\">let</span> <span class=\"n\">x7</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span>\n  <span class=\"n\">x7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>by <code>aesop</code> it takes around one second and by <code>fprop</code> around 25ms. Would there be interest adding this to mathlib?  Here is <a href=\"https://github.com/lecopivo/SciLean/blob/master/SciLean/FunctionSpaces/Continuous/Basic.lean\">the file</a> setting up <code>Continuous</code> for <code>fprop</code>.</p>\n<hr>\n<p>Now the question about the cache. I want to use this tactic as a discharger in <code>simp</code> and I want to cache its results. Can I reuse <code>simp</code>'s cache? I'm unable to understand how exactly simp handles propositions.  It seems to me that simp somehow rewrites propositions to <code>True</code>. </p>\n<p>Should I modify simp's cache like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Meta.Simp.Cache</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c.insert</span> <span class=\"n\">P</span> <span class=\"o\">{</span>\n    <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">True</span><span class=\"o\">)</span>\n    <span class=\"n\">proof</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">eq_true</span> <span class=\"o\">(</span><span class=\"n\">continuous_id'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:=</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm not sure if the proof should be the proof of <code>Continuous fun x : ℝ =&gt; x</code> or of <code>(Continuous fun x : ℝ =&gt; x) = True</code>.</p>\n<p>Also should I worry about free variables in <code>P</code> and in <code>proof?</code>? If simp goes inside of lambda or let, it introduces free variables and those would end up in the cache. Simp has to deal with this problem somehow but it is not clear to me how.</p>",
        "id": 378289835,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1690238361
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 379854409,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1690650956
    }
]