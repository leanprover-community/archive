[
    {
        "content": "<p>Could someone explain a little bit how <code>lake exe cache get</code> works?  Is it possible to add one's own projects to the things whose builds are cached?</p>\n<p>As of a couple of weeks ago, <a href=\"https://hrmacbeth.github.io/math2001/\">Mechanics of Proof</a> depends on a <a href=\"https://github.com/hrmacbeth/duper\">fork of duper</a> with a few hacks to downgrade (!) its capabilities for teaching purposes.  This has substantially slowed down the setup process because it now needs to include the time to build the duper fork, so I'd love to see the fork cached if that is allowed.</p>\n<p>I'm also curious whether there's a way to disable the \"warning: package Duper has local changes\" message which currently flashes in the infoview because I am on this fork.</p>",
        "id": 403404786,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700580362
    },
    {
        "content": "<p>Currently, the <code>cache</code> infrastructure is a mathlib-specific feature and thus only available there. The FRO has plans to offers something comparable as part of the Reservoir package repository, but don’t hold your breath unless you can go without oxygen for at least a few months.</p>\n<p>If you are motivated you can probably fork `cache from mathlib, change a few paths etc, but I don’t expect it to be trivial.</p>",
        "id": 403416854,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700583149
    },
    {
        "content": "<p>OK, thanks for the explanation!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20projects.20are.20eligible.20for.20cache.3F/near/403404786\">said</a>:</p>\n<blockquote>\n<p>I'm also curious whether there's a way to disable the \"warning: package Duper has local changes\" message which currently flashes in the infoview because I am on this fork.</p>\n</blockquote>\n<p>Do you know the answer to this one?</p>",
        "id": 403417669,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700583390
    },
    {
        "content": "<p>One additional question about cache that I couldn't ask because I had to leave: Is there a story for caching packages that interact with C via FFI? That seems like a pretty hard problem given that you usually need per OS and perhaps even shared library version specific code etc.</p>",
        "id": 403417726,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700583409
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/66aa2c46a84f6755b63c996f79150121704cac3e/src/lake/Lake/Load/Materialize.lean#L162\">https://github.com/leanprover/lean4/blob/66aa2c46a84f6755b63c996f79150121704cac3e/src/lake/Lake/Load/Materialize.lean#L162</a>, and elsewhere in this file, seems to be where this error comes from - it seems that if the git repository has no changes with upstream it shouldn't show it?</p>",
        "id": 403420363,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700584225
    },
    {
        "content": "<p>Does that mean that the \"upstream\" of my duper fork is set to be <a href=\"https://github.com/leanprover-community/duper\">leanprover-community duper</a>?  Is there a way to say within the context of the math2001 repo that <code>hrmacbeth/duper</code> is the canonical version of duper?</p>",
        "id": 403420762,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700584345
    },
    {
        "content": "<p><a href=\"https://github.com/hrmacbeth/math2001/blob/main/lakefile.lean\">https://github.com/hrmacbeth/math2001/blob/main/lakefile.lean</a> Heather's lakefile, for reference</p>",
        "id": 403428179,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700586908
    },
    {
        "content": "<p>It seems to me that it shouldn't be in some way pointing to the community duper, so I'm surprised it does</p>",
        "id": 403428218,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700586926
    },
    {
        "content": "<p>The \"local changes\" in this case appear to be <code>lakefile.olean</code> which makes me think that all that needs to happen is that that is added to <code>.gitignore</code> or Duper, or the fork</p>",
        "id": 403431356,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700587981
    },
    {
        "content": "<p>And it seems core duper has this change already, so that just needs to be copied accross to heathers fork</p>",
        "id": 403431739,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700588137
    },
    {
        "content": "<p>you shouldn't need <code>lakefile.olean</code> in your gitignore anymore, it has been moved to <code>.lake</code> and that folder should be .gitignored instead</p>",
        "id": 403435837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700589688
    },
    {
        "content": "<p>Yes, but duper is still on 4.3rc1 for now at least</p>",
        "id": 403439529,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700591105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20projects.20are.20eligible.20for.20cache.3F/near/403417726\">said</a>:</p>\n<blockquote>\n<p>One additional question about cache that I couldn't ask because I had to leave: Is there a story for caching packages that interact with C via FFI? That seems like a pretty hard problem given that you usually need per OS and perhaps even shared library version specific code etc.</p>\n</blockquote>\n<p>A similar questions actually did end up being asked during the meeting. The goal is for Reservoir cloud builds to store per-platform copies of packages. In essence, it is meant to be a more principled and generally applicable version of the <code>lake exe cache</code> and Lake GitHub cloud releases (i.e., <code>lake upload</code>/ <code>lake build :release</code>).</p>",
        "id": 403513092,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700625348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, individual oleans, not just whole packages, right?</p>",
        "id": 403521136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700630340
    },
    {
        "content": "<p>This thread is about <a href=\"https://github.com/leanprover/lake/issues/153\">https://github.com/leanprover/lake/issues/153</a><br>\nI'm not following the trend of how things are being developed. But the issue I opened was about users having access to a native <code>lake cache</code> that would do caching with the same content-addressing tricks as the one implemented for Mathlib, which saves cloud space, local space and data transfers between those two</p>",
        "id": 403557007,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1700646751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20projects.20are.20eligible.20for.20cache.3F/near/403521136\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span>, individual oleans, not just whole packages, right?</p>\n</blockquote>\n<p>Probably both.</p>",
        "id": 405010712,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701316092
    },
    {
        "content": "<p>(The design here is still not clear.)</p>",
        "id": 405010909,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701316147
    },
    {
        "content": "<p>I am not sure that I understand fully, but does this mean that there is no way to download the <code>Std</code> cache, for a project that depends only on <code>Std</code>, but not on all of <code>Mathlib</code>?</p>",
        "id": 405324362,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701424110
    },
    {
        "content": "<p>that is correct, the cache program itself is distributed by mathlib so you can't use mathlib's cache of Std if you have a Std-only project</p>",
        "id": 405325926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701424625
    },
    {
        "content": "<p>Thanks, Mario!  I still find the <code>cache</code> business mysterious, so I am grateful for the clear explanation!</p>",
        "id": 405326233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701424726
    },
    {
        "content": "<p>Is this an argument for upstreaming cache to std?</p>",
        "id": 405355489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701434819
    },
    {
        "content": "<p>I'd rather upstream cache to lake</p>",
        "id": 405357033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701435333
    },
    {
        "content": "<p>How would you handle toolchain conflicts?</p>",
        "id": 405357631,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701435500
    }
]