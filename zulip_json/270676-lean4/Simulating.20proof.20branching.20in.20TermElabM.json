[
    {
        "content": "<p>There are two ways to write this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>and I want to simulate this using <code>TermElabM</code> so the proof can be fed into the machine procedurally. My tactic execution function is this one (I have a MWE)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">set</span> <span class=\"n\">state.tactic</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"n\">stx</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">state.tactic.goals.get</span><span class=\"bp\">!</span> <span class=\"n\">goalId</span>\n  <span class=\"n\">Lean.Elab.Term.synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsolvedGoals</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.run</span> <span class=\"n\">mvarId</span> <span class=\"n\">tac</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages.hasErrors</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList.toArray</span>\n    <span class=\"k\">let</span> <span class=\"n\">errors</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">messages.map</span> <span class=\"n\">Lean.Message.data</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">md</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">md.toString</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{errors}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">state</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">unsolvedGoals.forM</span> <span class=\"n\">Lean.instantiateMVarDeclMVars</span>\n    <span class=\"k\">let</span> <span class=\"n\">nextState</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.saveState</span><span class=\"o\">),</span>\n      <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"n\">unsolvedGoals</span> <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">unsolvedGoals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Tactic '{tactic}' succeeded.\"</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{goals}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">nextState</span>\n</code></pre></div>\n<p>Here <code>goalId</code> specifies which goal should the tactic be run on. However when I ran <code>apply Or.inr</code> on <code>cases h</code>'s first goal, the other goal also shows up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proof</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">context</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">context.env</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">execute_term_elab</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">parse_expr</span> <span class=\"n\">env</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">start_tactic_state</span> <span class=\"n\">expr</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"intro p q h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">branch</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"cases h\"</span>\n    <span class=\"c1\">-- First branch</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">branch</span> <span class=\"mi\">0</span> <span class=\"s2\">\"apply Or.inr\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"assumption\"</span>\n    <span class=\"c1\">-- Second branch</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">branch</span> <span class=\"mi\">1</span> <span class=\"s2\">\"apply Or.inl\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"assumption\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Completed\"</span>\n</code></pre></div>\n<p>the line of <code>Or.inr</code> prints</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply</span> <span class=\"n\">Or.inr'</span> <span class=\"n\">succeeded.</span>\n<span class=\"o\">[</span><span class=\"n\">case</span> <span class=\"n\">inl.h</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">case</span> <span class=\"n\">inr</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there a way to apply the tactic to only the first goal? Ideally after the <code>assumption</code> tactic the proof branch should be concluded with no more goals.</p>",
        "id": 360430062,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684820001
    },
    {
        "content": "<p>MWE: <a href=\"https://pastebin.com/wVGxLvsz\">https://pastebin.com/wVGxLvsz</a></p>",
        "id": 360430965,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684820453
    },
    {
        "content": "<p>Here's how I would set up the equivalent of your other MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">start_tactic_state</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.SavedState</span> <span class=\"bp\">→</span> <span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">syn</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">syn</span>\n  <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">expr</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.run</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mvarId</span><span class=\"bp\">!</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Tactic state started\"</span>\n      <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">goals.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"goals accomplished\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">goals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"goals not solved: {goals}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">execute_tactic</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">state.restore</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">Tactic.evalTactic</span> <span class=\"n\">stx</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← e.toMessageData.toString}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">state</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages.hasErrors</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList.toArray</span>\n    <span class=\"k\">let</span> <span class=\"n\">errors</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">messages.map</span> <span class=\"n\">Message.data</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">md</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">md.toString</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{errors}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">state</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsolvedGoals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.getUnsolvedGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">unsolvedGoals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Tactic succeeded with goals {goals}\"</span>\n  <span class=\"n\">saveState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proof_term_elab</span><span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">start_tactic_state</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"intro p q h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"cases h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"apply Or.inr\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">Name.str</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"s2\">\"Init\"</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span> <span class=\"o\">:</span> <span class=\"n\">Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>     <span class=\"c1\">-- No 'open' directives needed</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;onion&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">proof_term_elab.toIO</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 360432623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"599027\">@Leni V. Aniva</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360430062\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proof</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">context</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">context.env</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">execute_term_elab</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">parse_expr</span> <span class=\"n\">env</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">start_tactic_state</span> <span class=\"n\">expr</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"intro p q h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">branch</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"cases h\"</span>\n    <span class=\"c1\">-- First branch</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">branch</span> <span class=\"mi\">0</span> <span class=\"s2\">\"apply Or.inr\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"assumption\"</span>\n    <span class=\"c1\">-- Second branch</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">branch</span> <span class=\"mi\">1</span> <span class=\"s2\">\"apply Or.inl\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"assumption\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Completed\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This code seems to indicate a misunderstanding regarding what <code>state</code> is. What you are doing here is attempting to apply <code>Or.inr</code> and <code>assumption</code>, then undoing and trying <code>Or.inl</code> and <code>assumption</code> instead. Both versions apply to the first goal</p>",
        "id": 360433106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821497
    },
    {
        "content": "<p>If you want to work on multiple subgoals (without undoing tactics after e.g. a failure or incorrect choice), you need to manipulate the <code>goals</code> array. You may or may not want to expose it as an argument to <code>execute_tactic</code></p>",
        "id": 360433292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360433292\">said</a>:</p>\n<blockquote>\n<p>If you want to work on multiple subgoals (without undoing tactics after e.g. a failure or incorrect choice), you need to manipulate the <code>goals</code> array. You may or may not want to expose it as an argument to <code>execute_tactic</code></p>\n</blockquote>\n<p>That would be even more convenient. Thanks! I can look into this</p>",
        "id": 360433459,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684821637
    },
    {
        "content": "<p>Tactics in <code>MetaM</code> generally explicitly pass subgoals around (they accept a <code>MVarId</code> as input and return a <code>List MVarId</code>), while tactics in <code>TacticM</code> generally don't (they get and set the <code>goals</code> stored in the monad state)</p>",
        "id": 360433471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360433471\">said</a>:</p>\n<blockquote>\n<p>Tactics in <code>MetaM</code> generally explicitly pass subgoals around (they accept a <code>MVarId</code> as input and return a <code>List MVarId</code>), while tactics in <code>TacticM</code> generally don't (they get and set the <code>goals</code> stored in the monad state)</p>\n</blockquote>\n<p>Can <code>TacticM</code> be directly lifted to <code>CoreM</code>?</p>",
        "id": 360433771,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684821728
    },
    {
        "content": "<p>you really should not do that, see the code I posted</p>",
        "id": 360433813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821744
    },
    {
        "content": "<p>the <code>start_tactic_state</code> code lifts a <code>TacticM</code> to <code>CoreM</code>, but importantly it scopes over the entire proof</p>",
        "id": 360433970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821794
    },
    {
        "content": "<p>if you do fine grained lifting of each tactic separately you will lose track of important state</p>",
        "id": 360434038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360434038\">said</a>:</p>\n<blockquote>\n<p>if you do fine grained lifting of each tactic separately you will lose track of important state</p>\n</blockquote>\n<p>is that state stored in <code>CoreM</code> or <code>TacticM</code> only?</p>",
        "id": 360434169,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684821858
    },
    {
        "content": "<p>TacticM is a monad stack on top of TermElabM on MetaM on CoreM and all of them add more state</p>",
        "id": 360434236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821887
    },
    {
        "content": "<p>you can probably get by with <code>MetaM</code> for the overall proof state, although some minor things won't persist across commands, but anything below that will cause metavariables to be forgotten and other bad things</p>",
        "id": 360434501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684821968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360434501\">said</a>:</p>\n<blockquote>\n<p>you can probably get by with <code>MetaM</code> for the overall proof state, although some minor things won't persist across commands, but anything below that will cause metavariables to be forgotten and other bad things</p>\n</blockquote>\n<p>It seems like I just need the <code>Lean.Core.State</code> in <code>CoreM</code> for metavariables in the simpler example to not be forgotten. Is there anything else to watch out for in the states of <code>TermElabM</code> and <code>MetaM</code>?</p>",
        "id": 360435298,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684822274
    },
    {
        "content": "<p>Is there a reason you need to do this? These are implementation details of lean and if you depend on them your code will break frequently</p>",
        "id": 360435478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684822341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360435478\">said</a>:</p>\n<blockquote>\n<p>Is there a reason you need to do this? These are implementation details of lean and if you depend on them your code will break frequently</p>\n</blockquote>\n<p>I want to be able to backtrack to an earlier state in the proof and if the overall program state carries the same monad as it backtracks it may produce different behaviour</p>",
        "id": 360435713,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684822420
    },
    {
        "content": "<p>The usual mechanisms for backtracking have the desired behavior already. You will not get an airtight guarantee regardless because tactics can use IO refs or other shenanigans, but tactics should basically be reproducible if you use <code>saveState</code> and <code>restore</code> to roll back the state</p>",
        "id": 360436063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684822526
    },
    {
        "content": "<p>There are some things like the name generator that are never reset</p>",
        "id": 360436095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684822544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360436063\">said</a>:</p>\n<blockquote>\n<p>The usual mechanisms for backtracking have the desired behavior already. You will not get an airtight guarantee regardless because tactics can use IO refs or other shenanigans, but tactics should basically be reproducible if you use <code>saveState</code> and <code>restore</code> to roll back the state</p>\n</blockquote>\n<p>Thanks! I'll try this</p>",
        "id": 360436656,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684822733
    },
    {
        "content": "<p>If I use the same <code>TacticM</code> monad everywhere would it still be possible to add more definitions into the environment on the fly?</p>",
        "id": 360437361,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684822953
    },
    {
        "content": "<p>you can get and set the environment explicitly</p>",
        "id": 360437436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684822991
    },
    {
        "content": "<p>if you want to add a definition, just call <code>addDecl</code>, if you want to undo the addition use <code>getEnv</code> beforehand and <code>setEnv</code> afterward</p>",
        "id": 360437593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684823061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360432623\">said</a>:</p>\n<blockquote>\n<p>Here's how I would set up the equivalent of your other MWE:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">start_tactic_state</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.SavedState</span> <span class=\"bp\">→</span> <span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">syn</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">syn</span>\n  <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">expr</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.run</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mvarId</span><span class=\"bp\">!</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Tactic state started\"</span>\n      <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">goals.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"goals accomplished\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">goals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"goals not solved: {goals}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">execute_tactic</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">state.restore</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">Tactic.evalTactic</span> <span class=\"n\">stx</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← e.toMessageData.toString}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">state</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages.hasErrors</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList.toArray</span>\n    <span class=\"k\">let</span> <span class=\"n\">errors</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">messages.map</span> <span class=\"n\">Message.data</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">md</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">md.toString</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{errors}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">state</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsolvedGoals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.getUnsolvedGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">unsolvedGoals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Tactic succeeded with goals {goals}\"</span>\n  <span class=\"n\">saveState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proof_term_elab</span><span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">start_tactic_state</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"intro p q h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"cases h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"apply Or.inr\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">Name.str</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"s2\">\"Init\"</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span> <span class=\"o\">:</span> <span class=\"n\">Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>     <span class=\"c1\">-- No 'open' directives needed</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;onion&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">proof_term_elab.toIO</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>When I ran this script for some reason it still shows 2 goals in the <code>apply Or.inr</code> branch? I added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proof_term_elab</span><span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">start_tactic_state</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"intro p q h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"cases h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"apply Or.inr\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"s2\">\"assumption\"</span>\n</code></pre></div>\n<p>and the <code>assumption</code> should finish the <code>Or.inr</code> branch but it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span> <span class=\"n\">started</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">succeeded</span> <span class=\"k\">with</span> <span class=\"n\">goals</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">succeeded</span> <span class=\"k\">with</span> <span class=\"n\">goals</span> <span class=\"o\">[</span><span class=\"n\">case</span> <span class=\"n\">inl</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">case</span> <span class=\"n\">inr</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">succeeded</span> <span class=\"k\">with</span> <span class=\"n\">goals</span> <span class=\"o\">[</span><span class=\"n\">case</span> <span class=\"n\">inl.h</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">case</span> <span class=\"n\">inr</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">succeeded</span> <span class=\"k\">with</span> <span class=\"n\">goals</span> <span class=\"o\">[</span><span class=\"n\">case</span> <span class=\"n\">inr</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"n\">goals</span> <span class=\"n\">not</span> <span class=\"n\">solved</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">case</span> <span class=\"n\">inr</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>am I missing something here?</p>",
        "id": 360439971,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684823950
    },
    {
        "content": "<p>I don't see an issue here. You just wrote the equivalent of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>and there is one goal remaining at the end</p>",
        "id": 360440604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360440604\">said</a>:</p>\n<blockquote>\n<p>I don't see an issue here. You just wrote the equivalent of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>and there is one goal remaining at the end</p>\n</blockquote>\n<p>I want the second version since it has proof branching</p>\n<div class=\"codehilite\" data-code-language=\"leanexample\"><pre><span></span><code>  intro p q h\n  cases h\n  . apply Or.inr\n    assumption\n  . apply Or.inl\n    assumption\n</code></pre></div>",
        "id": 360440675,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684824224
    },
    {
        "content": "<p>That code <em>has</em> proof branching</p>",
        "id": 360440772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824251
    },
    {
        "content": "<p>it just isn't using <code>.</code> for focusing on subgoals (i.e. \"structured proofs\")</p>",
        "id": 360440803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824271
    },
    {
        "content": "<p>you can finish the proof if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 360440834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824293
    },
    {
        "content": "<p>How can I simulate <code>.</code> then?</p>",
        "id": 360440888,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684824307
    },
    {
        "content": "<p>what interface do you want for that? <code>.</code> isn't a tactic, it is a tactic combinator and you have to put something after it</p>",
        "id": 360441087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360441087\">said</a>:</p>\n<blockquote>\n<p>what interface do you want for that? <code>.</code> isn't a tactic, it is a tactic combinator and you have to put something after it</p>\n</blockquote>\n<p>I just want to be able to do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">parse_expr</span> <span class=\"n\">env</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">start_tactic_state</span> <span class=\"n\">expr</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"intro p q h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">branch</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"cases h\"</span>\n    <span class=\"c1\">-- First branch</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">branch</span> <span class=\"mi\">0</span> <span class=\"s2\">\"apply Or.inr\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"assumption\"</span> <span class=\"c1\">-- state has no goals</span>\n    <span class=\"c1\">-- Second branch</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">branch</span> <span class=\"mi\">1</span> <span class=\"s2\">\"apply Or.inl\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">env</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"assumption\"</span> <span class=\"c1\">-- state has no goals</span>\n</code></pre></div>",
        "id": 360441339,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684824439
    },
    {
        "content": "<p>How about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">start_tactic_state</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.SavedState</span> <span class=\"bp\">→</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">syn</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">syn</span>\n  <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">expr</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mvarId</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.run</span> <span class=\"n\">g</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Tactic state started\"</span>\n      <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">)</span> <span class=\"n\">g</span>\n  <span class=\"k\">if</span> <span class=\"n\">goals.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"goals accomplished\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">goals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"goals not solved: {goals}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">execute_tactic</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tactic.TacticM</span> <span class=\"o\">(</span><span class=\"n\">Tactic.SavedState</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">state.restore</span>\n  <span class=\"n\">Tactic.setGoals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">Tactic.evalTactic</span> <span class=\"n\">stx</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← e.toMessageData.toString}\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages.hasErrors</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList.toArray</span>\n    <span class=\"k\">let</span> <span class=\"n\">errors</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">messages.map</span> <span class=\"n\">Message.data</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">md</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">md.toString</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{errors}\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsolvedGoals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.getUnsolvedGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">unsolvedGoals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Tactic succeeded with goals {goals}\"</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">,</span> <span class=\"n\">unsolvedGoals</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proof_term_elab</span><span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">start_tactic_state</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"intro p q h\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">,</span> <span class=\"n\">g2</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"cases h\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g1</span> <span class=\"s2\">\"apply Or.inr\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g1</span> <span class=\"s2\">\"assumption\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g2</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g2</span> <span class=\"s2\">\"apply Or.inl\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g2</span> <span class=\"s2\">\"assumption\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n</code></pre></div>",
        "id": 360441935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824637
    },
    {
        "content": "<p>oh you could also do indexes</p>",
        "id": 360442007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824664
    },
    {
        "content": "<p>set goals would be cool</p>",
        "id": 360442029,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684824674
    },
    {
        "content": "<p>what is the purpose of passing down the <code>state</code> here if the goals already represent the proof state?</p>",
        "id": 360442287,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684824744
    },
    {
        "content": "<p>you aren't doing any backtracking in this proof but you could use it to do so</p>",
        "id": 360442368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824770
    },
    {
        "content": "<p>backtracking meaning applying things that are wrong and then going back to an earlier point in the proof, which is distinct from working on separate subgoals</p>",
        "id": 360442454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360442454\">said</a>:</p>\n<blockquote>\n<p>backtracking meaning applying things that are wrong and then going back to an earlier point in the proof, which is distinct from working on separate subgoals</p>\n</blockquote>\n<p>do you have an example of backtracking (just in normal lean not TacticM)</p>",
        "id": 360442537,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684824831
    },
    {
        "content": "<p>that would not normally end up in a completed user proof unless they are using <code>try</code> or <code>repeat</code>, but it could certainly appear in a proof search</p>",
        "id": 360442615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824851
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n      <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 360442953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684824966
    },
    {
        "content": "<p>there is backtracking in this proof, because for the first subgoal we will first try <code>apply Or.inl</code> which succeeds but results in an unprovable goal, then <code>assumption</code> which fails, and then <code>first</code> will try the other branch from the original state, doing <code>apply Or.inr</code> and <code>assumption</code></p>",
        "id": 360443133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684825039
    },
    {
        "content": "<p>Thanks! That was very helpful</p>",
        "id": 360443494,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684825157
    },
    {
        "content": "<p>Also is there anything that I should watch out for if I abandon a proof while inside a <code>TacticM</code> construct to start on another proof?</p>",
        "id": 360443603,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1684825199
    },
    {
        "content": "<p>Here's the equivalent of that proof using the strings version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proof_term_elab</span><span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">start_tactic_state</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"intro p q h\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">,</span> <span class=\"n\">g2</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"cases h\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">tryIt</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"n\">try</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"apply Or.inl\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"assumption\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n        <span class=\"n\">pure</span> <span class=\"n\">state</span>\n      <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"apply Or.inr\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"assumption\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n        <span class=\"n\">pure</span> <span class=\"n\">state</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">tryIt</span> <span class=\"n\">state</span> <span class=\"n\">g1</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">tryIt</span> <span class=\"n\">state</span> <span class=\"n\">g2</span>\n</code></pre></div>",
        "id": 360443916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684825286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni V. Aniva</span> <a href=\"#narrow/stream/270676-lean4/topic/Simulating.20proof.20branching.20in.20TermElabM/near/360443603\">said</a>:</p>\n<blockquote>\n<p>Also is there anything that I should watch out for if I abandon a proof while inside a <code>TacticM</code> construct to start on another proof?</p>\n</blockquote>\n<p>I don't think so</p>",
        "id": 360444233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684825389
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 398550020,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698262763
    }
]