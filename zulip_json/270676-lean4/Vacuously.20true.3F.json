[
    {
        "content": "<p>I just started with Lean yesterday. I want to prove <code>sum(1..n) = n(n+1)/2</code>, by e.g. <code>sum [1,2,3,4] + sum [4,3,2,1] = sum [1+4, 2+3, 3+2, 4+1] = sum [5,5,5,5] = 4*5</code>.</p>\n<p>So I've got a <code>first_n_nat</code> that returns vector e.g. <code>[4, 3, 2, 1]</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">first_n_nat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vector.cons</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">first_n_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have a proof that the sum of the reverse is equal to the sum of the original. Now I just want to prove that each <code>kth</code> element of that vector has value <code>n - k</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">first_n_nat_k_eq_n_sub_k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">first_n_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">nn</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But the base case is vacuously true? There's no <code>k</code> for <code>Fin zero</code>. But I don't see a way to do that. Or maybe I shouldn't be using induction here? Seems silly I can't figure out how to prove this step, since it's almost by definition.</p>",
        "id": 377496376,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690006667
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.elim0#doc\">docs#Fin.elim0</a> might help you</p>",
        "id": 377496834,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690006896
    },
    {
        "content": "<p>Yeah I saw that function and thought it looked relevant, but can't figure out how it's supposed to be used. I've tried lots of variants around <code>zero =&gt; rw [Fin.elim0]</code> but nothing has worked.</p>",
        "id": 377498025,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690007453
    },
    {
        "content": "<p>Maybe <code>apply Fin.elim0 x</code></p>",
        "id": 377498640,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690007738
    },
    {
        "content": "<p>Specifically, the exact term you need is <code>Fin.elim0 k</code></p>",
        "id": 377498953,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1690007861
    },
    {
        "content": "<p>(so <code>exact k.elim0</code> would work as well)</p>",
        "id": 377499102,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1690007920
    },
    {
        "content": "<p>I think the more idiomatic way to prove your result  while preserving your proof technique is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_range_reflect#doc\">docs#Finset.sum_range_reflect</a> with <code>f := (fun n ↦ (n + 1 : ℤ))</code>.</p>",
        "id": 377646572,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690044811
    }
]