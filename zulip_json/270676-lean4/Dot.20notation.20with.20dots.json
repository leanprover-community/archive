[
    {
        "content": "<p>In Lean 3, we used to be able to do <code>A^.B.C</code> (e.g. if <code>B.C</code> is a field of a structure where <code>A</code> is a term of). Is it possible make it work now too?</p>",
        "id": 380756026,
        "sender_full_name": "David Ang",
        "timestamp": 1690905416
    },
    {
        "content": "<p>just do <code>A.C</code></p>",
        "id": 380782799,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690910104
    },
    {
        "content": "<p>Does that work with extended field notation in general? Sometimes you have a structure <code>A</code> and you have <code>def A.B.C := ...</code>, and for <code>a : A</code> you could write <code>a^.B.C</code></p>",
        "id": 380787556,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690911087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span> Could you give a MWE of what you want to do to ground this discussion?</p>",
        "id": 380787708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690911121
    },
    {
        "content": "<p>I’m on my phone right now but something like this is possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">unfoo</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.bar.unbar</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">n.unfoo</span>\n</code></pre></div>\n<p>I want to write <code>n.bar.unbar</code>, which I can’t, but in Lean 3 I can do <code>n^.bar.unbar</code>.</p>",
        "id": 380815847,
        "sender_full_name": "David Ang",
        "timestamp": 1690917764
    },
    {
        "content": "<p>Wait -- so the (deprecated AFAIK) <code>^</code> notation in Lean 3 had a use?</p>",
        "id": 380818895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690918591
    },
    {
        "content": "<p>It was common with <code>ideal.quotient</code> iirc</p>",
        "id": 380819311,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690918736
    },
    {
        "content": "<p>It’s going to be very useful for me e.g. <code>Weierstrass.Affine/Projective/Jacobian.(a lot of things)</code> and <code>Weierstrass.CoordinateRing.(a lot of things)</code></p>",
        "id": 380820321,
        "sender_full_name": "David Ang",
        "timestamp": 1690919054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span> <a href=\"#narrow/stream/270676-lean4/topic/Dot.20notation.20with.20dots/near/380815847\">said</a>:</p>\n<blockquote>\n<p>I’m on my phone right now but something like this is possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">unfoo</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.bar.unbar</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">n.unfoo</span>\n</code></pre></div>\n<p>I want to write <code>n.bar.unbar</code>, which I can’t, but in Lean 3 I can do <code>n^.bar.unbar</code>.</p>\n</blockquote>\n<p>oh wow that is indeed the case.</p>",
        "id": 380825654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690920509
    },
    {
        "content": "<p>not really a solution, but you can replicate the behavior via something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">foo.Bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo.Bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.Bar.unbar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">foo.Bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.unfoo</span>\n</code></pre></div>\n<p>if the only goal is to organize theorems on <code>foo</code>s into a hierarchy.</p>\n<p>We could make a macro like <code>namespace_def</code> to automate this somewhat. but it would be cool to have something like this built into Lean4, where you could declare \"sub-namespaces\" that become disallowed as an identifier in that namespace but the namespace algorithm allows it as an intermediary in dot notation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">namespace_def</span> <span class=\"n\">foo.bar</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo.bar.unbar</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 380827894,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1690921164
    },
    {
        "content": "<p>but i'm wondering if you can't accomplish the same end result just prefixing names with <code>bar_</code> or whatever. the namespace search should prioritize those that start with <code>bar_</code> when you type it out.</p>",
        "id": 380828105,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1690921230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Dot.20notation.20with.20dots/near/380827894\">said</a>:</p>\n<blockquote>\n<p>not really a solution, but you can replicate the behavior via something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">foo.Bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo.Bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.Bar.unbar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">foo.Bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.unfoo</span>\n</code></pre></div>\n<p>if the only goal is to organize theorems on <code>foo</code>s into a hierarchy.</p>\n</blockquote>\n<p>Sorry I just saw this, but your code doesn’t seem to compile for me. Yes I really just want to organise the different defs and lemmas into separate namespaces. They happen to have rather long names so I prefer not to use underscores.</p>",
        "id": 382189426,
        "sender_full_name": "David Ang",
        "timestamp": 1691254027
    },
    {
        "content": "<p>In fact, it would be great if I could do something like <code>n.unbar</code> (or <code>n^.unbar</code>?) for <code>n : foo</code> provided I'm in the <code>foo.bar</code> namespace. Are there any tricks around this? Essentially I have tens of defs and lemmas with the same name but under different namespaces.</p>",
        "id": 382293370,
        "sender_full_name": "David Ang",
        "timestamp": 1691308862
    },
    {
        "content": "<p>Ah... I think I get you now, and it's pretty much what I'm looking for - thanks!</p>",
        "id": 382297583,
        "sender_full_name": "David Ang",
        "timestamp": 1691310295
    }
]