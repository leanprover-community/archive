[
    {
        "content": "<p>Dear All,</p>\n<p>I came across a behaviour that I find strange.  In the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"stub\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">stub</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">focus</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fn.getD</span> <span class=\"n\">default</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>   <span class=\"c1\">-- if you comment the `guard`, then Lean seems to hang</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"You should not be here!\"</span>\n</code></pre></div>\n<p>commenting the line with <code>guard</code> makes Lean process the <code>elab_rules</code> block forever.  With the <code>guard</code>, it is essentially instantaneous.</p>\n<p>Is this expected?  Am I doing something wrong?</p>\n<p>Thanks!</p>",
        "id": 378649454,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690339158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> This is definitely a bug. Some further minimization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hang</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fn.getD</span> <span class=\"n\">default</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>   <span class=\"c1\">-- if you comment the `guard`, then Lean seems to hang</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"You should not be here!\"</span>\n</code></pre></div>\n<p>This seems to be caused by some interaction between the <code>let</code> pattern match, the second pattern match, the <code>TacticM</code> monad, and the elaborator/compiler.</p>",
        "id": 378965746,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690413889
    },
    {
        "content": "<p>Mac, thanks!  I think that this is the first time that I think that I found a bug and it actually is not a feature!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 379026536,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690440819
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/2359\">lean4#2359</a></p>",
        "id": 379032369,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690442128
    }
]