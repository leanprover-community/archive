[
    {
        "content": "<p>I ran into a problem where <code>isDefEq</code> does a deterministic time-out, when it should fail. Here is a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Expr</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ringNat</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">StrictOrderedRing</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">app</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Filter.atTop</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n      <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n      <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n        <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n          <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">StrictOrderedSemiring.toPartialOrder</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span>\n          <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n        <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span>\n          <span class=\"bp\">`</span><span class=\"n\">Nat.strictOrderedSemiring</span>\n          <span class=\"o\">[])))</span>\n  <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">app</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Filter.atTop</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n      <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n      <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n        <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">StrictOrderedRing.toPartialOrder</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n              <span class=\"n\">ringNat</span><span class=\"o\">))</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span> <span class=\"s2\">\"{← isDefEq lhs rhs}\"</span>\n</code></pre></div>\n<p>which gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Clearly, <code>Nat</code> is not a ring, so it should fail the unification.</p>",
        "id": 399135520,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1698571819
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 399139279,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698574846
    },
    {
        "content": "<p>Ah, sorry. Here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Expr</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ringNat</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">StrictOrderedRing</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">app</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Filter.atTop</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n      <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n      <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n        <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n          <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">StrictOrderedSemiring.toPartialOrder</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span>\n          <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n        <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span>\n          <span class=\"bp\">`</span><span class=\"n\">Nat.strictOrderedSemiring</span>\n          <span class=\"o\">[])))</span>\n  <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">app</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Filter.atTop</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n      <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n      <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n        <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">StrictOrderedRing.toPartialOrder</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n              <span class=\"n\">ringNat</span><span class=\"o\">))</span>\n  <span class=\"n\">isDefEq</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span>\n</code></pre></div>",
        "id": 399149428,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1698582912
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 399158968,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698589988
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 399159287,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698590234
    },
    {
        "content": "<p>You can type <code>set_option trace.Meta.synthInstance true</code> and <code>set_option trace.profiler true</code> to see what Lean is trying.</p>",
        "id": 399159453,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698590365
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 399160180,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698590896
    },
    {
        "content": "<p>I tried using <code>set_option maxHeartbeats 1000000</code>, and now after almost a minute, it successfully returns <code>false</code>. <code>set_option trace.profiler true</code> indeed shows what Lean is trying, but it doesn't help me much. I suppose I shouldn't trust that all definitions in Mathlib are handled well by <code>isDefEq</code>. Instead, is there a good way to limit the run time taken by <code>isDefEq</code>? I'm working on an interactive program, so I need it to run near instantaneously.</p>",
        "id": 399179838,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1698607898
    },
    {
        "content": "<blockquote>\n<p>Instead, is there a good way to limit the run time taken by <code>isDefEq</code>?</p>\n</blockquote>\n<p>Isn't that what <code>maxHeartbeats</code> does?</p>",
        "id": 399189559,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698618173
    },
    {
        "content": "<p>It looks like Aesop wanted a similar thing, so there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Aesop.withMaxHeartbeats#doc\">docs#Aesop.withMaxHeartbeats</a> to limit a sub-computation. It doesn't let you know if the result failed specifically due to the heartbeat limit however.</p>",
        "id": 399190019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698618695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/isDefEq.20deterministic.20timeout/near/399190019\">said</a>:</p>\n<blockquote>\n<p>It looks like Aesop wanted a similar thing, so there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Aesop.withMaxHeartbeats#doc\">docs#Aesop.withMaxHeartbeats</a> to limit a sub-computation. It doesn't let you know if the result failed specifically due to the heartbeat limit however.</p>\n</blockquote>\n<p>Thanks, that should do the job.</p>",
        "id": 399203413,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1698628526
    },
    {
        "content": "<p>There is also the extremely hacky <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Exception.isMaxHeartbeat#doc\">docs#Lean.Exception.isMaxHeartbeat</a> for figuring out whether an exception is due to a deterministic timeout.</p>",
        "id": 399297524,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698671206
    }
]