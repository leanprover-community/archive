[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <a href=\"#narrow/stream/113486-announce/topic/First.20official.20release/near/393228687\">said</a>:</p>\n<blockquote>\n<p>Just noting: <a href=\"https://github.com/leanprover/lean4/releases/tag/v4.1.0\"><code>v4.1.0</code></a> of Lean is out.</p>\n<p>In fact, so is <a href=\"https://github.com/leanprover/lean4/releases/tag/v4.2.0-rc1\"><code>v4.2.0-rc1</code></a>, and Mathlib is already using it. In particular you will find many improvements in Lake, including substantially faster performance!</p>\n</blockquote>\n<p>Quick question, I noticed in one of the v4.1.0-rc's <code>lake clean</code> would not clear the lakefile.olean's in source and lake-package directories.. is this still the case in v4.1.0?</p>",
        "id": 393229818,
        "sender_full_name": "Somo S.",
        "timestamp": 1695733730
    },
    {
        "content": "<p>Yes, that's still the case for <code>v4.1.0</code> and <code>v4.2.0-rc1</code>. I agree that seems strange behaviour for a <code>clean</code> command. I hadn't noticed this previously. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>?</p>",
        "id": 393230365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695733906
    },
    {
        "content": "<p>I would guess this is related to the fact that it's the only build output not in <code>build/</code></p>",
        "id": 393230527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733956
    },
    {
        "content": "<p>(which I argued against at the time)</p>",
        "id": 393230562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733969
    },
    {
        "content": "<p>yeah seems like a strange design choice ¯\\_(ツ)_/¯</p>",
        "id": 393230865,
        "sender_full_name": "Somo S.",
        "timestamp": 1695734077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Yeah, I noticed this and put it on my todo list, but honestly forgot about it in the flurry of performance improvements.</p>",
        "id": 393284242,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695747597
    },
    {
        "content": "<p>No problem. Made <a href=\"https://github.com/leanprover/lean4/pull/2592\">lean4#2592</a> to track. Thanks, <span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span>, for the reminder!</p>",
        "id": 393342492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695768312
    },
    {
        "content": "<p>Separately, I noticed that people are creating issues for lake both at the old lake repository and the lean4 repository. Could we fix this? Is there some way to transfer the remaining relevant ones, and then prevent opening new ones at <code>lake</code>?</p>",
        "id": 393342546,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695768358
    },
    {
        "content": "<p>my impression was that the lake repo was for issues</p>",
        "id": 393342802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695768499
    },
    {
        "content": "<p>I recon archiving the old repo could help</p>",
        "id": 393343220,
        "sender_full_name": "Somo S.",
        "timestamp": 1695768748
    },
    {
        "content": "<p>Ah, I had missed that this was happening intentionally. I think it would be good to make sure Lake issues are all in one place. I don't mind which place, particularly!</p>",
        "id": 393343264,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695768776
    },
    {
        "content": "<p>if the intension is for lake source to permanently be in the lean repo. then i would think all issues should be there also</p>",
        "id": 393343499,
        "sender_full_name": "Somo S.",
        "timestamp": 1695768899
    },
    {
        "content": "<p>Another thing I want to mention here is that newly added <code>-Kvar=value</code> (as used in <code>meta if</code>) does not seem to be effective once the old <code>lakefile.olean</code> is built.</p>",
        "id": 393539131,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695835666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span> Yep! To quote from the [release notes[(<a href=\"https://github.com/leanprover/lean4/blob/master/RELEASES.md#v410\">https://github.com/leanprover/lean4/blob/master/RELEASES.md#v410</a>):</p>\n<blockquote>\n<p>Lake configuration options (i.e., <code>-K</code>) will be fixed at the moment of elaboration. Setting these options when lake is using the cached configuration will have no effect. To change options, run lake with <code>-R</code> / <code>--reconfigure</code>.</p>\n</blockquote>",
        "id": 393540722,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695836323
    },
    {
        "content": "<p>This has some benefits of its own, you can set <code>-K</code> options on the command line via <code>-R</code> and then they will persist into the Lake commands runs interactively (e.g., via VSCode) without having to change settings.</p>",
        "id": 393540824,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695836369
    },
    {
        "content": "<p>Does lake somehow warn if the given configuration flags don't match those remembered in the .olean? Else I see a scenario where someone might have a very frustrating debugging experience, trying to find out why something isn't working as it should.</p>",
        "id": 393541923,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695836867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> No, but that is certainly a good idea.</p>",
        "id": 393543966,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695837603
    }
]