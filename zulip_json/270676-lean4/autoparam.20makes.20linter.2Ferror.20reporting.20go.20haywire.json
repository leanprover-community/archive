[
    {
        "content": "<p>This has happened to me a couple of times, and also to several others in Banff, but I've always put off minimising until now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the example, <code>fac</code> is being proved by <code>aesop</code> automatically. But working with the proof of <code>uniq</code> is hard. Try adding <code>skip</code> between <code>simp</code> and <code>sorry</code>, and <code>linter.unreachableTactic</code> will suddenly get really excited. As you add more code, more random things can occur. You can \"reset\" the system and (temporarily) make the warnings go away in two ways: either insert <code>fac := sorry</code> (so don't let <code>aesop</code> solve it) or go back to exactly the proof you had before you started editing (and it's temporarily fine, but then breaks again the moment you start editing).</p>\n<p>In a large file the breakage can be far more serious: red error warnings start appearing in the wrong place with incorrect errors, and Lean becomes unusable, but I don't know if this is a different problem.</p>",
        "id": 361172394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685051375
    },
    {
        "content": "<p>You don't even need the autoparam. If you want to understand the problem, try filling in the proof of <code>uniq</code> below. Lean is completely unusable (at least for me -- goal state doesn't update etc etc)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 361179383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685054718
    },
    {
        "content": "<p>Thank you very much for identifying and minimising this. I was driven mad by this yesterday and today.</p>",
        "id": 361182154,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1685056430
    },
    {
        "content": "<p>Here's something that at least partially explains what's going on: Put this in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.info</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and then try putting a space in the blank line before <code>sorry</code>. Before adding the space, you should be able to see several lines in the info tree referring to the span <code>⟨12, 4⟩-⟨12, 9⟩</code>, which is the location of the word <code>sorry</code> (note that it starts on line 12, has 4 spaces before it, and is 5 characters long). However, after adding the space on line 11, this span will shift to <code>⟨12, 3⟩-⟨12, 8⟩</code>, which should not happen because it is still 4 characters indented. If you keep adding spaces this count will keep going down until it gets to <code>⟨11, 5⟩-⟨11, 10⟩</code>, i.e. it thinks it is entirely on the previous line which is nonsense.</p>",
        "id": 361182170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685056441
    },
    {
        "content": "<p>My guess is that something deleted some leading or trailing whitespace in the original tokens, leading to a mismatch between the indexes in the original source and the indexes in the syntax</p>",
        "id": 361182288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685056506
    },
    {
        "content": "<p>Thanks, I can reproduce what you describe.</p>",
        "id": 361182586,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1685056728
    },
    {
        "content": "<p>I think some kind of snapshotting is also involved, because if you make an edit to the word <code>aesop</code> it will \"reset\" and work even with spaces on the line before <code>sorry</code>, but if you change those spaces then again the problem comes back</p>",
        "id": 361182824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685056884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Does <code>aesop</code> make use of the <code>checkpoint</code> / <code>save</code> stuff internally?</p>",
        "id": 361182913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685056925
    },
    {
        "content": "<p>this behavior is also consistent with using a syntax from an old version of the document (which internally uses byte positions into the input) while the input changes</p>",
        "id": 361183214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685057152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/270676-lean4/topic/autoparam.20makes.20linter.2Ferror.20reporting.20go.20haywire/near/361182154\">said</a>:</p>\n<blockquote>\n<p>Thank you very much for identifying and minimising this. I was driven mad by this yesterday and today.</p>\n</blockquote>\n<p>It's not the first time I've seen this, but thanks to you and Scott for encouraging me to minimise!</p>",
        "id": 361183377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685057272
    },
    {
        "content": "<p>I am strongly suspecting <code>checkpoint</code> as the source of the issue</p>",
        "id": 361183656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685057410
    },
    {
        "content": "<p>turns out it's pretty challenging to use elaborated info from a previous version of the document once the text moves around</p>",
        "id": 361183696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685057454
    },
    {
        "content": "<p><code>aesop_no_checkpoint</code> does not exhibit the bug</p>",
        "id": 361183757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685057509
    },
    {
        "content": "<p>Hm, this is an almost aesop-free version of the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.info</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">checkpoint</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But it turns out the <code>import Aesop</code> at the top is load-bearing! If you remove it or replace it with <code>import Lean</code> the behavior goes away</p>",
        "id": 361183971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685057644
    },
    {
        "content": "<p>Oh <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> the error is still there without <code>import Aesop</code>, it just isn't running the unreachableTactic linter unless you import Std</p>",
        "id": 361184693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685058180
    },
    {
        "content": "<p>My recommendation is just to avoid <code>checkpoint</code>. I think a correct implementation is quite challenging, and what we have currently isn't very reliable</p>",
        "id": 361185027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685058402
    },
    {
        "content": "<p>Here's a hack to make <code>aesop</code> not use <code>checkpoint</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">aesop</span> <span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">aesop_no_checkpoint</span> <span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">aesop</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">aesop_no_checkpoint</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.info</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fac</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 361185177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685058499
    },
    {
        "content": "<p>Thanks so much for all this.</p>",
        "id": 361185408,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1685058641
    },
    {
        "content": "<p>Where do we go from here? Open an issue / PR / pester Aesop authors here on Zulip?</p>",
        "id": 361185583,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1685058751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/autoparam.20makes.20linter.2Ferror.20reporting.20go.20haywire/near/361185027\">said</a>:</p>\n<blockquote>\n<p>My recommendation is just to avoid <code>checkpoint</code>. I think a correct implementation is quite challenging, and what we have currently isn't very reliable</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I make somewhat heavy use of <code>save</code> to make proofs with large terms somewhat tolerable.</p>\n<p>Would you say that relying on <code>save</code> is a bad idea in general?</p>",
        "id": 361186729,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1685059610
    },
    {
        "content": "<p>If it works for you, great. I've just had a lot of bad or confusing experiences with it</p>",
        "id": 361186807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685059671
    },
    {
        "content": "<p>I don't think it is reliable enough to use by default in tactics like <code>aesop</code></p>",
        "id": 361186922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685059737
    },
    {
        "content": "<p>I need to read up on the implementation though, maybe the present issue is fixable</p>",
        "id": 361186971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685059776
    },
    {
        "content": "<p>I just opened two issues about this:</p>\n<ul>\n<li>One for Lean4: <a href=\"https://github.com/leanprover/lean4/issues/2250\">https://github.com/leanprover/lean4/issues/2250</a></li>\n<li>One for Aesop: <a href=\"https://github.com/JLimperg/aesop/issues/57\">https://github.com/JLimperg/aesop/issues/57</a></li>\n</ul>",
        "id": 362736670,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1685622532
    },
    {
        "content": "<p>Many thanks to <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> for such a quick resolution of <a href=\"https://github.com/JLimperg/aesop/issues/57\">https://github.com/JLimperg/aesop/issues/57</a> </p>\n<p>Do I understand correctly that Mathlib will automatically pick up this new logic thanks to <a href=\"https://github.com/leanprover-community/mathlib4/blob/d4a3d0440c6e2966175eeb3ff62bd11def2eabd8/lakefile.lean#L31\">https://github.com/leanprover-community/mathlib4/blob/d4a3d0440c6e2966175eeb3ff62bd11def2eabd8/lakefile.lean#L31</a> ?</p>",
        "id": 362874762,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1685651703
    },
    {
        "content": "<p>No, this still needs a bump PR. Lake freezes dependency versions in <code>lake-manifest.json</code>.</p>",
        "id": 362883479,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1685654335
    },
    {
        "content": "<p>I see thanks (I am relieved these are not open dependencies). I've made an attempt to update it with <a href=\"https://github.com/leanprover-community/mathlib4/pull/4570\">!4#4570</a> I'll have to wait till morning to see if CI is happy.</p>",
        "id": 362899421,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1685660885
    }
]