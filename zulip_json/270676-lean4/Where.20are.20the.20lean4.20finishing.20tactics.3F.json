[
    {
        "content": "<p>Where are the \"auto\" tactics in lean4? Things like finish, tidy, etc that solve tedious but obvious goals by search, case splitting, simplifying, constructor trying, etc.</p>\n<p>Are there things like Coq's auto, eauto, or crush in Lean4? I found this but I think it's for Lean3: <a href=\"https://brandonrozek.com/blog/leantactics/\">https://brandonrozek.com/blog/leantactics/</a></p>",
        "id": 392717465,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1695486289
    },
    {
        "content": "<p><a href=\"https://github.com/JLimperg/aesop\"><code>aesop</code></a> is capable of all those things. <a href=\"https://github.com/leanprover-community/duper\"><code>duper</code></a> also is based on <a href=\"https://matryoshka-project.github.io/pubs/hosup_paper.pdf\">a promising design</a> but looks undocumented/wip</p>",
        "id": 392720210,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1695487448
    },
    {
        "content": "<p>Ohhhh very cool! How much does it rely on marking things with the Aesop attribute? Are things marked simp automatically aesop?</p>",
        "id": 392723993,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1695489821
    },
    {
        "content": "<p>Yep, Aesop automatically uses simp to normalize all terms at every step of its proof search</p>",
        "id": 392724102,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1695489919
    },
    {
        "content": "<p>Looks like the rules that are included without explicit <code>@[aesop]</code> are in <a href=\"https://github.com/JLimperg/aesop/blob/master/Aesop/BuiltinRules.lean\">this file</a>. If you're using mathlib though, hopefully eventually many things will already be marked <code>@[aesop]</code> for you. Right now that's only true in certain parts of the library, like category theory.</p>",
        "id": 392724293,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1695490133
    },
    {
        "content": "<p>(In particular, mathlib3's <code>tidy</code> has been completely replaced by <code>aesop</code>: it is both faster and more capable.)</p>",
        "id": 392761694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695519243
    },
    {
        "content": "<p>I would love to see someone \"power up\" <code>aesop</code> with <code>induction</code> and <code>cases</code>. I think a great rule would be \"you are allowed to try <code>induction</code>, as long as in at least one branch <code>simp</code> makes progress\".</p>",
        "id": 392762167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695519567
    },
    {
        "content": "<p>There are many many lemmas where we use a few rounds of <code>induction ... generalizing ...</code>, with all branches solvable by <code>simp_all</code>. The requirement that <code>simp_all</code> makes progress ensures that we don't just induct inductively.</p>",
        "id": 392762273,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695519630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Where.20are.20the.20lean4.20finishing.20tactics.3F/near/392762167\">said</a>:</p>\n<blockquote>\n<p>a great rule would be \"you are allowed to try <code>induction</code>, as long as in at least one branch <code>simp</code> makes progress\".</p>\n</blockquote>\n<p>I wonder how this rule could be refined to make sure it doesn't go down the path of trying to prove a theorem by infinite ascent...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">f_zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">f_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span>\n        <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 392787729,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695537034
    },
    {
        "content": "<p>Hmmm... good example. :-) I wonder if you required it to make use of new simp lemmas at each stage?</p>",
        "id": 392787783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695537114
    },
    {
        "content": "<p>(I just came upon <a href=\"https://github.com/avigad/lean-auto/\">https://github.com/avigad/lean-auto/</a> which looks like a better documented frontend for <code>duper</code>)</p>",
        "id": 392861953,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1695584271
    },
    {
        "content": "<p>It's not. <code>duper</code> is a superposition prover implemented in native Lean. <code>lean-auto</code> seems to be a tactic that sends translated Lean terms to external automated theorem provers (based on superposition or SMT, I guess) and reconstructs the proofs returned by these, in a manner reminiscent of Isabelle's Sledgehammer. Also, neither of these projects have yet been announced as ready for serious use.</p>",
        "id": 392863433,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695585544
    },
    {
        "content": "<p>Jannis, <code>auto</code> doesn't have to call an external prover, it can use duper both for proof search and proof reconstruction. However you are right that it is a work in progress that is not at all ready for use.</p>",
        "id": 392864046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695586004
    },
    {
        "content": "<p>Wait but then <code>auto</code> wouldn't need to do the whole translation dance described in the README, no?</p>",
        "id": 392864474,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695586311
    },
    {
        "content": "<p>If I understand correctly, the translation dance is useful even for duper.</p>",
        "id": 392866367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695588164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Where.20are.20the.20lean4.20finishing.20tactics.3F/near/392762167\">said</a>:</p>\n<blockquote>\n<p>I would love to see someone \"power up\" <code>aesop</code> with <code>induction</code> and <code>cases</code>. I think a great rule would be \"you are allowed to try <code>induction</code>, as long as in at least one branch <code>simp</code> makes progress\".</p>\n</blockquote>\n<p>Is there a way currently to get aesop to apply induction at all? I know there are ways to get it to apply <code>cases</code> for types that you specify.</p>",
        "id": 393012638,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695648232
    },
    {
        "content": "<p>You can give arbitrary tactics to <code>aesop</code>, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory</span><span class=\"o\">])]</span> <span class=\"n\">Std.Tactic.Ext.extCore'</span>\n</code></pre></div>",
        "id": 393014250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695648590
    },
    {
        "content": "<p>Ok, but does that let me tell aesop \"you are allowed to apply induction to lists\"</p>",
        "id": 393014639,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695648655
    },
    {
        "content": "<p>(lists specifically, rather than just feeding  \"<code>induction'</code>\" to the tactic)</p>",
        "id": 393014988,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695648759
    },
    {
        "content": "<p>So write a list-specific induction tactic. It should only be a few lines.</p>",
        "id": 393015490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695648873
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">Mathlib.Tactic.induction'</span> <span class=\"n\">was</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">i.e.</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">one</span> <span class=\"n\">of</span> <span class=\"n\">these</span> <span class=\"n\">types</span><span class=\"o\">:</span>\n  <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span>\n  <span class=\"n\">SimpleRuleTac</span>\n  <span class=\"n\">RuleTac</span>\n<span class=\"n\">However</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Lean.ParserDescr</span>\n</code></pre></div>",
        "id": 393015494,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695648874
    },
    {
        "content": "<p>grep for the line of code I posted above in Mathlib, and see how it is done there.</p>",
        "id": 393015571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695648895
    },
    {
        "content": "<p>You can't use the \"user facing\" syntactical tactics, you need to go one level deeper and provide a <code>TacticM Unit</code>.</p>",
        "id": 393015707,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695648924
    },
    {
        "content": "<p>The problem with writing a list-specific induction tactic is that at that point, I expect I will have written more lines of code than it would take to just prove the lemma normally.</p>",
        "id": 393016253,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695649045
    },
    {
        "content": "<p>Right but then it will be there for the next time you need it</p>",
        "id": 393056035,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1695658417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Where.20are.20the.20lean4.20finishing.20tactics.3F/near/392866367\">said</a>:</p>\n<blockquote>\n<p>If I understand correctly, the translation dance is useful even for duper.</p>\n</blockquote>\n<p>Ah, interesting. I vaguely remember similar results where Slegdehammer's HOL-to-FOL translation turned out to be better than running HOL-based ATPs directly. So a similar thing happening with <code>duper</code> wouldn't be crazy.</p>",
        "id": 393058736,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695659002
    }
]