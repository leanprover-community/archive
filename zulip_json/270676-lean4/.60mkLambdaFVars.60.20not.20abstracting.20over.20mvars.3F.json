[
    {
        "content": "<p>No <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> yet, but maybe someone can help me out already. I have a term<code>e' : Expr</code> with some metavariables that I want to turn into parameters:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">mvars</span> <span class=\"bp\">←</span> <span class=\"n\">getMVarsNoDelayed</span> <span class=\"n\">e'</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"MVars {mvars}\"</span>\n</code></pre></div>\n<p>will print the three metavariables that I expect. So I use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"o\">(</span><span class=\"n\">binderInfoForMVars</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mvars.map</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span><span class=\"o\">)</span> <span class=\"n\">e'</span>\n</code></pre></div>\n<p>but if I now </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">mvars'</span> <span class=\"bp\">←</span> <span class=\"n\">getMVarsNoDelayed</span> <span class=\"n\">e'</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"mvars' {mvars'}\"</span>\n</code></pre></div>\n<p>I still get two of the three metavariables. What am I doing wrong?</p>\n<p>According to <code>check e'</code> the resulting expression is well-typed, and <code>← inferType e'</code> shows that three parameters were added to the expression. <code>let e' ← instantiateMVars e'</code> does not help either.</p>\n<p>The code worked a bit earlier, before I made the types of these<code>MVars</code> a bit more complicated, but I don’t see anything odd (unresolved free variables or so).</p>",
        "id": 404374931,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701079282
    },
    {
        "content": "<p>Ok, made some progress, there is an an unresolved free variable after all (but in a proof, so I didn’t see it).</p>",
        "id": 404386514,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701082644
    },
    {
        "content": "<p>Maybe not relevant, but a metavariable can be 'delayed-assigned', in which case it's assigned but can't be substituted by <code>instantiateMVars</code> yet. See the god comment in <code>MetavarContext.lean</code>.</p>",
        "id": 404389036,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1701083491
    },
    {
        "content": "<p>But those won’t show up in <code>getMVarsNoDelayed</code>, will they?</p>\n<p>I fixed my problem, there was a mention of a <code>FVar</code> that my transformation should have removed. Thanks nevertheless!</p>",
        "id": 404389187,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701083550
    }
]