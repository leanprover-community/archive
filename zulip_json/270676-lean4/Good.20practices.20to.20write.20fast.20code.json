[
    {
        "content": "<p>As an example, let's say in C++, people prefer to write iterations over recursions because they grant better speed. Similarly, do we know guidelines on how to write Lean4 code that runs fast (as in, they're algorithmically the same thing, but the internal workings speed one up more than the other)?</p>\n<p>I am interested in Lean4 as a programming language, and am interested in wanting to write highly optimiseed code as well.</p>",
        "id": 401426536,
        "sender_full_name": "Aatman Supkar",
        "timestamp": 1699643493
    },
    {
        "content": "<p>you generally want to write tail recursive functions if you are concerned about performance. The monad sugar like <code>for</code> desugars to function calls to tail recursive functions that get inlined into your function, but the <code>let mut</code> handling causes unnecessary allocations on each iteration of the loop which you can avoid by writing the tail recursive function yourself</p>",
        "id": 401427376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699644035
    },
    {
        "content": "<p>This is a bit of a micro optimization though, it's probably not worth doing unless it shows up in profiles</p>",
        "id": 401427416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699644069
    },
    {
        "content": "<p>Another thing to watch out for in performance sensitive code is that you design your mutable data structures to be used linearly (i.e. values to mutate have one active reference when performing the mutation, so that an expensive copy is avoided), and you make sure that they are in fact used linearly where you expect. This is very difficult to predict in advance because the current compiler has a tendency to break linearity though optimizations, you just have to either look at the IR, test with <code>dbgTraceIfShared</code>, or profile and notice a lot of time is being spent in the \"garbage collector\" <code>lean_dec_ref_cold</code>.</p>",
        "id": 401427771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699644315
    },
    {
        "content": "<p>Not quite sure what you mean by the thing about mutable structures being used linearly because optimisation might break it. I understand I don't want to make unnecessary copies, yes.</p>",
        "id": 401444781,
        "sender_full_name": "Aatman Supkar",
        "timestamp": 1699655873
    }
]