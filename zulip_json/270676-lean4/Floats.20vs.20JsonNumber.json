[
    {
        "content": "<p>I'm planning on doing some (very mild) computations with some floats that will be fetched from some external API. <br>\nThese numbers are parsed as <code>JsonNumber</code>s but it seems that this type doesn't support any arithmetic operations.<br>\nIf I convert this <code>JsonNumber</code> to a float and back, it seems to lose some information. E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">JsonNumber</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">12398711</span>\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span>\n<span class=\"c1\">-- ⟨12398711,8⟩</span>\n<span class=\"k\">#eval</span> <span class=\"n\">JsonNumber.fromFloat</span><span class=\"bp\">?</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">((</span><span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Except.ok (Sum.inr ⟨123987,6⟩)</span>\n</code></pre></div>\n<p>Is there some way to make this operation lossless?</p>",
        "id": 362881683,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685653751
    },
    {
        "content": "<p>Or a more general question: What's the preferred way to calculate with numbers from a <code>Json</code> object?</p>",
        "id": 362881930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685653823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Floats.20vs.20JsonNumber/near/362881683\">said</a>:</p>\n<blockquote>\n<p>Is there some way to make this operation lossless?</p>\n</blockquote>\n<p>Of course the answer is no, based on how <code>JsonNumber</code> is defined.</p>",
        "id": 362883702,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685654405
    },
    {
        "content": "<p>Perhaps more to the point: has someone implemented double precision floats somewhere?</p>",
        "id": 362884314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685654620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Floats.20vs.20JsonNumber/near/362884314\">said</a>:</p>\n<blockquote>\n<p>Perhaps more to the point: has someone implemented double precision floats somewhere?</p>\n</blockquote>\n<p><code>Float</code> <em>is</em>  <code>double</code></p>",
        "id": 362884497,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685654681
    },
    {
        "content": "<p>Ok now I'm confused.</p>",
        "id": 362884579,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685654714
    },
    {
        "content": "<p>Why then is my number in the above example truncated to 6 decimal places?</p>",
        "id": 362884632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685654741
    },
    {
        "content": "<p>Obviously because <code>toString</code> truncates to 6 decimal places:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Creates a json number from a positive float, panicking if it isn't.</span>\n<span class=\"sd\">[todo]EdAyers: Currently goes via a string representation, when more float primitives are available</span>\n<span class=\"sd\">should switch to using those. -/</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">fromPositiveFloat</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">JsonNumber</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Lean.Syntax.decodeScientificLitVal</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Failed to parse {toString x}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">sign</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">sign</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 362907668,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685665794
    },
    {
        "content": "<p>Also note that this can be observed from just the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">bar.toFloat</span>\n<span class=\"c1\">-- 0.123987</span>\n</code></pre></div>",
        "id": 362907866,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685665865
    },
    {
        "content": "<p>To see that <code>toString</code> rounds to 6 decimal places, observe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">bar.toFloat</span> <span class=\"bp\">*</span> <span class=\"mi\">100</span>\n<span class=\"c1\">-- 12.398711</span>\n</code></pre></div>",
        "id": 362908016,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685665947
    },
    {
        "content": "<p>Ah ok I see</p>",
        "id": 362909792,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685667082
    },
    {
        "content": "<p>I missed that comment :)</p>",
        "id": 362909807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685667093
    },
    {
        "content": "<p>But this is a problem isn’t it? Any time we make a <code>JSON</code> from something with floats the numbers will get truncated.</p>",
        "id": 362910165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685667297
    },
    {
        "content": "<p>Or is there some separate <code>ToJson</code> instance for floats?</p>",
        "id": 362910314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685667379
    },
    {
        "content": "<p>I guess the question is if “when more float primatives are available”, is now or the future?</p>",
        "id": 362910520,
        "sender_full_name": "Jason Rute",
        "timestamp": 1685667537
    },
    {
        "content": "<p>No the <code>ToJson Float</code> instance unfortunately uses <code>fromFloat?</code>.</p>",
        "id": 362921795,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685675874
    },
    {
        "content": "<p>I think this counts as a bug.  It's not just number of digits either.  Numbers like <code>1e-15</code> are truncated as well.</p>",
        "id": 362922126,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685676123
    },
    {
        "content": "<p>If I wanted to add a proper ToJson instance for float using the current API, I'd extract the exponent using <code>(f.abs.log2 + 2048).toUInt32 - 2048</code>, then get the mantissa using <code>f.scaleB (60 - e) |&gt;.toUInt64</code> and then piece that together as a JsonNumber.</p>",
        "id": 362922433,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685676367
    },
    {
        "content": "<p>I could have sworn I added a primitive for extracting parts of a float</p>",
        "id": 362926824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685679722
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Float.frExp#doc\">docs4#Float.frExp</a></p>",
        "id": 362926953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685679796
    },
    {
        "content": "<p>I briefly looked at <code>frExp</code>, but you still need to extract the mantissa manually (and fiddle with the signs because we don't have <code>Float.toInt64</code>) so it doesn't help much.</p>",
        "id": 363121387,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685727175
    }
]