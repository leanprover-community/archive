[
    {
        "content": "<p>Hi people, I'm trying to create separated environments in Lean with <code>Lean.importModules</code> (from <code>Lean/Environment.lean</code>. However when I tried to import the name <code>Lean.Elab</code>, it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Lean'</span>\n</code></pre></div>\n<p>Same thing happens if say I want to import <code>Mathlib.Analysis.Seminorm</code>. I tried to add the environment variable <code>LEAN_PATH=~/.elan/toolchains/leanprover--lean4---nightly-2023-05-06/src/lean/Lean</code> but this still happens. Does anyone know what can I do?</p>\n<p>I searched for this error and it seems to come from <code>Lean/Util/Path.lean:findOLean</code>. I compiled <code>Mathlib</code> and I've also tried putting <code>lake-packages/mathlib/build/lib/</code> into <code>LEAN_PATH</code>. I've confirmed <code>Mathlib.olean</code> exists here.</p>",
        "id": 357161393,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683696133
    },
    {
        "content": "<p>You may need to post a (not) working example for us to look at. It seems a lot of things could go wrong!</p>",
        "id": 357168110,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683698259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357168110\">said</a>:</p>\n<blockquote>\n<p>You may need to post a (not) working example for us to look at. It seems a lot of things could go wrong!</p>\n</blockquote>\n<p>Here's the example:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>import Lean.Environment\n\ndef strTransform (s: String): Lean.Import :=\n    let li := s.split (λ c =&gt; c == '.')\n    let name := li.foldl (λ pre segment =&gt; Lean.Name.str pre segment) Lean.Name.anonymous\n    { module := name, runtimeOnly := false }\nunsafe def main (args: List String): IO Unit := do\n  let env ← Lean.importModules\n    (imports := args.map strTransform)\n    (opts := {})\n    (trustLevel := 1)\n  let n := env.constants.size\n  IO.println s!\"Size: {n}\"\n</code></pre></div>\n<p>run it with</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>build\nbuild/bin/lean-examples<span class=\"w\"> </span><span class=\"s2\">\"Lean.Elab\"</span>\n</code></pre></div>\n<p>The version is <code>Lean (version 4.0.0, commit 7dbfaf9b7519, Release)</code></p>",
        "id": 357169444,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683698653
    },
    {
        "content": "<p>Also is there a way to see from which locations is Lean searching for modules during <code>Lean.importModules</code>?</p>",
        "id": 357174029,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683699960
    },
    {
        "content": "<p>The <code>REPL</code> example here <a href=\"https://github.com/leanprover-community/repl/blob/master/REPL/Main.lean\">https://github.com/leanprover-community/repl/blob/master/REPL/Main.lean</a> uses <code>IO.processInput</code> which also uses the <code>Lean.importModules</code> function behind the scenes. When I run it, it also shows this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"s2\">\"cmd\"</span> <span class=\"o\">:</span> <span class=\"s2\">\"import Mathlib.Data.List.Basic</span><span class=\"se\">\\n</span><span class=\"s2\">def f := 2\"</span> <span class=\"o\">}</span>\n\n<span class=\"o\">{</span><span class=\"s2\">\"sorries\"</span><span class=\"o\">:</span> <span class=\"o\">[],</span>\n <span class=\"s2\">\"messages\"</span><span class=\"o\">:</span>\n <span class=\"o\">[{</span><span class=\"s2\">\"severity\"</span><span class=\"o\">:</span> <span class=\"s2\">\"error\"</span><span class=\"o\">,</span>\n   <span class=\"s2\">\"pos\"</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"s2\">\"line\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"column\"</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n   <span class=\"s2\">\"endPos\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n   <span class=\"s2\">\"data\"</span><span class=\"o\">:</span> <span class=\"s2\">\"unknown package 'Mathlib'\"</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"s2\">\"severity\"</span><span class=\"o\">:</span> <span class=\"s2\">\"error\"</span><span class=\"o\">,</span>\n   <span class=\"s2\">\"pos\"</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"s2\">\"line\"</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"column\"</span><span class=\"o\">:</span> <span class=\"mi\">9</span><span class=\"o\">},</span>\n   <span class=\"s2\">\"endPos\"</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"s2\">\"line\"</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"column\"</span><span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"o\">},</span>\n   <span class=\"s2\">\"data\"</span><span class=\"o\">:</span> <span class=\"s2\">\"unknown constant 'OfNat'\"</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"s2\">\"severity\"</span><span class=\"o\">:</span> <span class=\"s2\">\"error\"</span><span class=\"o\">,</span>\n   <span class=\"s2\">\"pos\"</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"s2\">\"line\"</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"column\"</span><span class=\"o\">:</span> <span class=\"mi\">9</span><span class=\"o\">},</span>\n   <span class=\"s2\">\"endPos\"</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"s2\">\"line\"</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"column\"</span><span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"o\">},</span>\n   <span class=\"s2\">\"data\"</span><span class=\"o\">:</span> <span class=\"s2\">\"unknown constant 'sorryAx'\"</span><span class=\"o\">}],</span>\n <span class=\"s2\">\"env\"</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 357191514,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683704877
    },
    {
        "content": "<p>You are looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.initSearchPath#doc\">docs4#Lean.initSearchPath</a>, see e.g. how doc-gen4 uses it</p>",
        "id": 357199360,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683706532
    },
    {
        "content": "<p>The repl does work, however! Although it doesn't work if you compile it, maybe that is what is going on.</p>",
        "id": 357221731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683710994
    },
    {
        "content": "<p>If you work out how to make the repl work when compiled please do let me know!</p>",
        "id": 357221864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683711013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357199360\">said</a>:</p>\n<blockquote>\n<p>You are looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.initSearchPath#doc\">docs4#Lean.initSearchPath</a>, see e.g. how doc-gen4 uses it</p>\n</blockquote>\n<p>I read the code and it seems like this reads from the envvar <code>$LEAN_PATH</code>. I tried setting <code>$LEAN_PATH</code> but there doesn't seem to be any effect on loading.</p>\n<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">LEAN_PATH</span><span class=\"o\">=</span>./lib<span class=\"w\"> </span>build/bin/lean-examples\n</code></pre></div>",
        "id": 357221898,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357221731\">said</a>:</p>\n<blockquote>\n<p>The repl does work, however! Although it doesn't work if you compile it, maybe that is what is going on.</p>\n</blockquote>\n<p>I just ran it with the <code>./run</code> script and it gave the above output</p>",
        "id": 357221983,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711041
    },
    {
        "content": "<p>Does it work if you do <code>lake env ./run</code>?</p>",
        "id": 357222316,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683711116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357222316\">said</a>:</p>\n<blockquote>\n<p>Does it work if you do <code>lake env ./run</code>?</p>\n</blockquote>\n<p>where should I provide the mathlib path in this case? Nevertheless it does work if I'm importing <code>Lean.Elab</code> instead of <code>Mathlib</code> stuff</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"s2\">\"cmd\"</span> <span class=\"o\">:</span> <span class=\"s2\">\"import Lean.Elab\"</span> <span class=\"o\">}</span>\n\n<span class=\"o\">{</span><span class=\"s2\">\"sorries\"</span><span class=\"o\">:</span> <span class=\"o\">[],</span> <span class=\"s2\">\"messages\"</span><span class=\"o\">:</span> <span class=\"o\">[],</span> <span class=\"s2\">\"env\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 357222874,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711231
    },
    {
        "content": "<p>I think it find Mathlib automatically if it's in your lakefile (i.e., if <code>lakefile.lean</code> contains something like <code>require mathlib from git \"https://github.com/leanprover-community/mathlib4.git\"</code>)</p>",
        "id": 357223673,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683711373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357222316\">said</a>:</p>\n<blockquote>\n<p>Does it work if you do <code>lake env ./run</code>?</p>\n</blockquote>\n<p>ok I just tried a couple more things. Using <code>lake env lean --run Main.lean</code>, my use case could successfully import <code>Lean.Elab</code>, but when I tried to import <code>Mathlib.Analysis.Seminorm</code> it shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Std'</span>\n</code></pre></div>\n<p>Curiously if I do <code>lake env build/bin/lean-examples</code> it doesn't work anymore and shows the same missing package problem</p>",
        "id": 357223957,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357223673\">said</a>:</p>\n<blockquote>\n<p>I think it find Mathlib automatically if it's in your lakefile (i.e., if <code>lakefile.lean</code> contains something like <code>require mathlib from git \"https://github.com/leanprover-community/mathlib4.git\"</code>)</p>\n</blockquote>\n<p>Is there a way to make it automatically find <code>Std</code> as well? <code>Std</code> is a dependency of mathlib but it seems like <code>lake env</code> can find mathlib stuff but not <code>Std</code>.</p>",
        "id": 357224227,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711500
    },
    {
        "content": "<p>It should have found it automatically (it does here). Is <code>Std</code> in your lake-manifest.json? If not, try running <code>lake update</code></p>",
        "id": 357224575,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683711566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357221864\">said</a>:</p>\n<blockquote>\n<p>If you work out how to make the repl work when compiled please do let me know!</p>\n</blockquote>\n<p>why does it not work when its compiled?</p>",
        "id": 357224628,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711574
    },
    {
        "content": "<p>Precisely because it's missing <code>initSearchPath</code>, which is called by the surrounding interpreter when not compiled</p>",
        "id": 357225012,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683711656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357224575\">said</a>:</p>\n<blockquote>\n<p>It should have found it automatically (it does here). Is <code>Std</code> in your lake-manifest.json? If not, try running <code>lake update</code></p>\n</blockquote>\n<p>It is there, but it seems like I have to run <code>lake build</code> in its directory to generate all the <code>.olean</code> files:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">find</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span> <span class=\"bp\">-</span><span class=\"n\">name</span> <span class=\"s2\">\"*.olean\"</span>\n</code></pre></div>\n<p>I have already ran <code>lake build</code> on my project directory and it did not compile the dependencies. From <code>lake</code> documentation we have</p>\n<blockquote>\n<p>The next run of lake build (or refreshing dependencies in an editor like VSCode) will clone the mathlib repository and build it.</p>\n</blockquote>\n<p>It did clone the repo but did not build mathlib or any of its dependencies.</p>",
        "id": 357225092,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357225012\">said</a>:</p>\n<blockquote>\n<p>Precisely because it's missing <code>initSearchPath</code>, which is called by the surrounding interpreter when not compiled</p>\n</blockquote>\n<p>so if I feed it the path it would work?</p>",
        "id": 357225199,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711702
    },
    {
        "content": "<p>Even after correctly setting up <code>LEAN_PATH</code> (which <code>lake env</code> does for your dependencies), <em>something</em> must still call this function</p>",
        "id": 357225215,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683711704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357225215\">said</a>:</p>\n<blockquote>\n<p>Even after correctly setting up <code>LEAN_PATH</code> (which <code>lake env</code> does for your dependencies), <em>something</em> must still call this function</p>\n</blockquote>\n<p>Thanks! I'll try this tomorrow</p>",
        "id": 357225665,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683711781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni V. Aniva</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357225092\">said</a>:</p>\n<blockquote>\n<p>I have already ran <code>lake build</code> on my project directory and it did not compile the dependencies. </p>\n</blockquote>\n<p>You need to import a Lean module from std4 for Lake to build anything in std4 (e.g. <code>import Std</code>). Lake will only build necessary components. If nothing uses (imports) a module, it will not be built. However, you can force Lake to build a library like <code>Std</code> via <code>lake build Std</code>.</p>",
        "id": 357444910,
        "sender_full_name": "Mac Malone",
        "timestamp": 1683773790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Environment.20import.20path/near/357221864\">said</a>:</p>\n<blockquote>\n<p>If you work out how to make the repl work when compiled please do let me know!</p>\n</blockquote>\n<p>I figured out how to make it work. Following Sebastian's advice, just put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.findSysroot</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>before any invocation to environment stuff, and then execute with <code>lake env build/bin/lean-examples</code></p>",
        "id": 357786046,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683878539
    }
]