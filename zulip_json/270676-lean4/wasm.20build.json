[
    {
        "content": "<p>I am working on compiling lean to wasm. I am getting these warnings about signature mismatches, which seem to cause runtime errors later.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">signature</span> <span class=\"n\">mismatch</span><span class=\"o\">:</span> <span class=\"n\">lean_llvm_initialize_target_info</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libLean.a</span><span class=\"o\">(</span><span class=\"n\">EmitLLVM.o</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">()</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">)</span>\n\n<span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">signature</span> <span class=\"n\">mismatch</span><span class=\"o\">:</span> <span class=\"n\">lean_io_rename</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libInit.a</span><span class=\"o\">(</span><span class=\"n\">IO.o</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">libleanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.a</span><span class=\"o\">(</span><span class=\"n\">io.cpp.o</span><span class=\"o\">)</span>\n\n<span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">signature</span> <span class=\"n\">mismatch</span><span class=\"o\">:</span> <span class=\"n\">lean_local_ctx_mk_local_decl</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">local_ctx.cpp.o</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libLean.a</span><span class=\"o\">(</span><span class=\"n\">LocalContext.o</span><span class=\"o\">)</span>\n\n<span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">signature</span> <span class=\"n\">mismatch</span><span class=\"o\">:</span> <span class=\"n\">llvm_count_params</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i64</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libLean.a</span><span class=\"o\">(</span><span class=\"n\">EmitLLVM.o</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i64</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">)</span>\n\n<span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">signature</span> <span class=\"n\">mismatch</span><span class=\"o\">:</span> <span class=\"n\">lean_llvm_get_default_target_triple</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libLean.a</span><span class=\"o\">(</span><span class=\"n\">EmitLLVM.o</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>All of these are opaque Lean definitions that are connected to C code via <code>@[extern]</code>, but the C code always has one more argument than the Lean function. Any ideas what's going on here?</p>",
        "id": 385854811,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1692346674
    },
    {
        "content": "<blockquote>\n<p>I am working on compiling lean to wasm</p>\n</blockquote>\n<p>That's great to hear!</p>\n<blockquote>\n<p>All of these are opaque Lean definitions that are connected to C code via <code>@[extern]</code>, but the C code always has one more argument than the Lean function</p>\n</blockquote>\n<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/2433\">lean4#2433</a> to address these</p>",
        "id": 385861881,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692348390
    },
    {
        "content": "<blockquote>\n<p>That's great to hear!</p>\n</blockquote>\n<p>No promises. I have no idea what I am doing :-)</p>",
        "id": 385870112,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1692351122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I hope I can some advice from you again. I have compiled Lean to wasm, but when executed, I get this error. I assume that I should replace a 64bit function by 32bit for the wasm build? But how? (BTW, I think the warning <code>warning: unsupported syscall: __syscall_prlimit64</code> is unrelated)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">node</span> <span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean.js</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">unsupported</span> <span class=\"n\">syscall</span><span class=\"o\">:</span> <span class=\"n\">__syscall_prlimit64</span>\n\n<span class=\"n\">Aborted</span><span class=\"o\">(</span><span class=\"n\">alignment</span> <span class=\"n\">fault</span><span class=\"o\">)</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean.js</span><span class=\"o\">:</span><span class=\"mi\">79</span>\n   <span class=\"n\">throw</span> <span class=\"n\">ex</span><span class=\"bp\">;</span>\n   <span class=\"bp\">^</span>\n\n<span class=\"n\">RuntimeError</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span>\n    <span class=\"n\">at</span> <span class=\"n\">__trap</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">wasm</span><span class=\"bp\">/</span><span class=\"mi\">25671866</span><span class=\"o\">:</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">158293</span><span class=\"o\">]:</span><span class=\"mi\">0x6ee7463</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">___trap</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean.js</span><span class=\"o\">:</span><span class=\"mi\">141294</span><span class=\"o\">:</span><span class=\"mi\">54</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">abort</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean.js</span><span class=\"o\">:</span><span class=\"mi\">585</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">alignfault</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean.js</span><span class=\"o\">:</span><span class=\"mi\">324</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">_alignfault</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean.js</span><span class=\"o\">:</span><span class=\"mi\">16944</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">SAFE_HEAP_STORE_i64_8_8</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">wasm</span><span class=\"bp\">/</span><span class=\"mi\">25671866</span><span class=\"o\">:</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">164989</span><span class=\"o\">]:</span><span class=\"mi\">0x6f8f0c8</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">lean_ctor_set_uint64.5</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">wasm</span><span class=\"bp\">/</span><span class=\"mi\">25671866</span><span class=\"o\">:</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">12482</span><span class=\"o\">]:</span><span class=\"mi\">0x9a7bc9</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">l_Lean_Name_str___override</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">wasm</span><span class=\"bp\">/</span><span class=\"mi\">25671866</span><span class=\"o\">:</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">12835</span><span class=\"o\">]:</span><span class=\"mi\">0x9c07df</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">lean_name_mk_string</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">wasm</span><span class=\"bp\">/</span><span class=\"mi\">25671866</span><span class=\"o\">:</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">12839</span><span class=\"o\">]:</span><span class=\"mi\">0x9c0d9b</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name_mk_string_of_cstr</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">wasm</span><span class=\"bp\">/</span><span class=\"mi\">25671866</span><span class=\"o\">:</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">139067</span><span class=\"o\">]:</span><span class=\"mi\">0x697dc06</span><span class=\"o\">)</span>\n\n<span class=\"n\">Node.js</span> <span class=\"n\">v19.4.0</span>\n</code></pre></div>",
        "id": 386403223,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1692627583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> Not sure I'm afraid. It should be two pointers followed by a uint64, so one would think it would be aligned naturally <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ...</p>",
        "id": 386429306,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692634030
    },
    {
        "content": "<p>Thanks, in the meantime I have become more confident again that I can figure this out.</p>",
        "id": 386429585,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1692634119
    },
    {
        "content": "<p>In general it could definitely be the case that we missed alignment issues from size_t &lt; uint64_t</p>",
        "id": 386429767,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692634197
    },
    {
        "content": "<p>Any update? I'm also interested in wasm build. If this is still not finished, maybe I can try. Thanks! <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span></p>",
        "id": 390046122,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694275289
    },
    {
        "content": "<p>Please do try. You'll probably be faster than me.</p>\n<p>But I can share some infos. I just discussed this with <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> in person. The build command we came up with is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span> <span class=\"c1\">--recurse-submodules</span>\n<span class=\"n\">cd</span> <span class=\"n\">lean4</span>\n<span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">cmake</span> <span class=\"bp\">../..</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"n\">CMAKE_C_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">emcc</span> <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"n\">CMAKE_CXX_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">emcc</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_FLAGS</span><span class=\"bp\">=-</span><span class=\"n\">fPIC</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_CXX_FLAGS</span><span class=\"bp\">=-</span><span class=\"n\">fPIC</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_COMPILER_WORKS</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_USE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEAN_EXTRA_CXX_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32'</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEANC_OPTS</span><span class=\"bp\">='-</span><span class=\"n\">m32'</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_CXX_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_C_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span>\n<span class=\"n\">make</span>\n</code></pre></div>\n<p>The idea is to build a native 32 bit binary in stage0. For stage1, we then use the native 32bit binary to build 32bit oleans and a wasm binary. That way, we can avoid building the oleans using the wasm binary, which would be much slower.</p>\n<p>I ran into a couple of issues:</p>\n<ul>\n<li>First, I got the error <code>fatal error: 'cstdlib' file not found 32bit</code>. I could resove this by <code>sudo apt-get install gcc-multilib g++-multilib</code>.</li>\n<li>Then, the build stops multiple times with segmentation faults. When you run <code>make</code> again, however, it seems that it manages to build the files on the second attempt.</li>\n<li>Finally there seems to be an issue with <code>--gc-sections</code>, so I removed the line 343 <code>string(APPEND LEANSHARED_LINKER_FLAGS \" -Wl,--gc-sections\")</code> from <code>src/CMakeLists.txt</code>.</li>\n</ul>\n<p>With these fixes, the build suceeds eventually, but I haven't tested whether the binaries are usable.</p>",
        "id": 390051632,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694280149
    },
    {
        "content": "<p>Thanks for your info! I'll try :)</p>",
        "id": 390110844,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694329477
    },
    {
        "content": "<p>Could you tell me your platform info? <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>  I assume you're using a recent linux and recent gcc? I'm on windows 10 and planning to try out other compilers and building scripts as well (not just for wasm build. For native x64 build I still wish I could debug in Visual Studio :D)</p>\n<p>But of course I'll try the popular emscripten docker (which uses gcc) first.</p>",
        "id": 390114430,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694332001
    },
    {
        "content": "<p>Yes, I use a recent Ubuntu. But for compilation of the 32bit binary, I use clang instead of gcc.</p>",
        "id": 390115505,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694332806
    },
    {
        "content": "<p>For the wasm build I installed emsdk and use the contained emcc.</p>",
        "id": 390115588,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694332859
    },
    {
        "content": "<p>Ok, I've started. Since I'm very new to lean, I started by building a \"regular lean\" and tried to understand what's going on before diving directly to wasm. Now I have a question: what should we expect from a wasm build? Probably most people are mainly expecting a proof assistant on the web, but I'm a programmer, my main purpose is to explore ways of using lean to develop realiable (and reasonably fast) softwares, so maybe we're expecting different feature sets?</p>\n<p>From my (very limited) understanding, stage1 involves calling stage0 binary to copile .lean to .olean, then .c, and use a C compiler to compile it to binary, but for wasm, we need to have a compiler in wasm? Or maybe <code>lean.exe --run</code> actually runs the program directly instead of doing AOT with a C compiler or LLVM? For me, the ideal solution is to allow executing lean codes in the browser with some interpreter mode without depending on a C compiler (or even LLVM) on the web, and at the same time allows the user to AOT the codes directly to wasm without depending on lean compiler (but can depend on a small runtime library of course)</p>\n<p>Anyway, it is reasonable to setup my first goal  to: make something like <code>node stage1/bin/lean.js hello.lean --run</code> print a <code>Hello World</code>? (the command line is hypothetical) <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 390240077,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694411095
    },
    {
        "content": "<p>Right, I would be more interested in getting <code>lean.js --server</code> to work, but there is probably some overlap in our goals.</p>",
        "id": 390249916,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694416596
    },
    {
        "content": "<p>I see. What's the purpose of <code>--server</code>? Start a language server that for example can talk to vscode? Or something that needs another dedicated client?</p>",
        "id": 390251693,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694417481
    },
    {
        "content": "<p>I've begun investigating a build of lean where the ABI is 32 bit without even involving wasm into the mix. This is necessary as wasm also uses a 32 bit ABI. Such a build already fails (the <code>stage0</code> compiler mysteriously segfaults on compiling <code>stage1</code>). I have a collection of \"litmus tests\" I developed for the Lean compiler when working on it (<a href=\"https://github.com/bollu/lean4/tree/1-aug-2022-llvm-backend/tests/backendramp\">https://github.com/bollu/lean4/tree/1-aug-2022-llvm-backend/tests/backendramp</a>). I'm going to try the <code>stage0</code> compiler on these tests to see if they isolate the problem. Help is very much appreciated :) </p>\n<p>the steps necessary for this setup (I specialize for <code>ubuntu</code>, similar instructions apply for other linuxes):</p>\n<ol>\n<li>Install a toolchain for cross compiling to <code>i386/i686</code>:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">sudo</span> <span class=\"n\">apt</span> <span class=\"n\">install</span> <span class=\"n\">g</span><span class=\"bp\">++-</span><span class=\"n\">i686</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Run a build of Lean with <code>i686</code>, without <code>GMP</code> (the cross compile toolchain doesn't have the GMP version for the target architecture, so disable it):</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">cd</span> <span class=\"bp\">/</span><span class=\"n\">path</span><span class=\"bp\">/</span><span class=\"n\">to</span><span class=\"bp\">/</span><span class=\"n\">lean4</span>\n<span class=\"bp\">$</span> <span class=\"kn\">export</span> <span class=\"n\">CXX</span><span class=\"bp\">=</span><span class=\"n\">i686</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">-</span><span class=\"n\">g</span><span class=\"bp\">++</span>\n<span class=\"bp\">$</span> <span class=\"kn\">export</span> <span class=\"n\">CC</span><span class=\"bp\">=</span><span class=\"n\">i686</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">-</span><span class=\"n\">gcc</span>\n<span class=\"bp\">$</span> <span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"bp\">$</span> <span class=\"n\">cmake</span> <span class=\"bp\">../../</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span>\n<span class=\"bp\">$</span> <span class=\"n\">VERBOSE</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"n\">stage1</span>\n</code></pre></div>\n<p>Now watch the <code>stage0</code> compiler crash when building <code>Structural/FindRecArg.olean</code> for <code>stage1</code>. Happy debugging <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>More seriously, I'm yet to debug what's going on here, and help would be super useful. Throwing the  stage0 command into GDB and seeing where it crashes would be progress!</p>",
        "id": 390252389,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1694417795
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> That's super helpful. I'll look into this. Interestingly I've just finished porting to wasm of another programming language implementation which also involved porting to 32-bit as a first step. I had to look very carefuly into the codebase and figure out which <code>usize</code> should be <code>u64</code> and vice-versa (the codebase is in rust). I even had to modify some memory layout to make some low-level tricks to work. The key to my success with that programming language is a set of very low-level tests, and your \"litmus tests\" would be extremely helpful when tackling the same problem in lean! Thank you again!</p>",
        "id": 390253956,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694418512
    },
    {
        "content": "<p>Glad to hear it, feel invited to ping me if you get stuck  / want help <span class=\"user-mention\" data-user-id=\"648305\">@Rujia Liu</span> !</p>",
        "id": 390256050,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1694419445
    },
    {
        "content": "<p>After reading some codes, I think I can answer some of my own questions: <code>lean --run</code> runs a simple interpreter defined in <code>ir_interpreter.cpp</code> which is exactly designed for use cases like wasm; <code>lean --server</code> is indeed LSP watchdog, and related info is described in <code>src/lean/Server/README.md</code>. But since I haven't read very carefully, correct me if I'm wrong :)</p>",
        "id": 390275033,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694426327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>  I tried to build 32-bit with <code>msys32</code> (I only have windows 10 now) and it succeeded! At least the generated <code>FindRecArg.olean</code> \"looks like\" 32-bit because it's only 923KB while in the default 64-bit build it's 1.3MB. The generated .ilean and .c are identical, but I think it's normal? I've played around the final <code>stage1/bin/lean.exe</code> and cannot make it crash by compiling some code. </p>\n<p>The only difference I can see, is I'm using <code>-fPIC</code> as suggested by <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> , But it could also be the difference between <code>msys32</code> and <code>unbuntu</code>. Anyway, I have experience that some programs that \"should\" crash, don't crash on windows :) So could you first try to build it with <code>-fPIC</code>? If it still crashes, I'll try docker instead (It'll be great if you have a <code>Dockerfile</code> that can reproduce the crash)</p>",
        "id": 390285692,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694430218
    },
    {
        "content": "<p>Oh! I forgot to run <code>make test</code>! It reported 93/1721 tests failed, so that means windows is good at \"crash prevention\" and the binary is still buggy (though not easily crashing). I think I'll try to find out why these tests are failing tomorrow, but I'm very new to lean so I definitely need help :)</p>",
        "id": 390290069,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694431899
    },
    {
        "content": "<p>I looked into the failed tests. Most of them are <code>failed to create thread</code>(maybe my <code>mingw32</code> environment is incomplete), only 4 of them are actually mismatches, and one of them (<code>updateExprIssue</code>) only had an  misplaced empty line. Another one of them (307) should be integer overflow problem, other two tests (<code>csimpAttr</code> and <code>unhygienicCode</code>) are quite confusing.</p>",
        "id": 390316221,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694440672
    },
    {
        "content": "<p>Thanks a lot for looking into it. Let me try compiling with PIC and see if the result changes on ubuntu.</p>",
        "id": 390337981,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1694446325
    },
    {
        "content": "<p>Maybe you don't need to compile with <code>-fPIC</code> anymore because just now I tried a fresh build without <code>-fPIC</code>, still in <code>msys2</code>, and got the same set of failed tests.</p>",
        "id": 390447802,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694496555
    },
    {
        "content": "<p>I'm trying to understand more about the compiler. Could you tell me what's <code>olean</code> used for? I thought <code>.olean</code> is used to produced <code>.c</code> but after reading console output when building stage1, I can see that stage0's <code>lean.exe</code> is used to produce <code>.olean</code> file and a <code>.c</code> file in the same command, so it looks like the <code>.c</code> is not produced from a <code>.olean</code>? I'm saying this because it looks like the <code>.c</code> files produced from 32-bit and 64-bit systems are the same, but the <code>.olean</code> files are different. If we don't need these <code>.olean</code> files in the build process (though probably needed by some other places), I can concentrate on the runtime codes and not codes reading/writing olean files, which should be much easier to follow, and we can use a 64-bit stage0 lean.exe to compile a 32-bit stage 1 lean.exe? <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span></p>",
        "id": 390455034,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694501064
    },
    {
        "content": "<p><code>.olean</code> files are what lean itself needs to process later lean files</p>",
        "id": 390455579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694501377
    },
    {
        "content": "<p>it has e.g. the elaborated lean declarations in the module, any initializer declarations that need to be run and data for the environment extensions</p>",
        "id": 390455708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694501440
    },
    {
        "content": "<p>lean will produce both <code>.c</code> and <code>.olean</code> files from a given lean file</p>",
        "id": 390455754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694501477
    },
    {
        "content": "<p>so it looks something like <code>foo.lean</code> + <code>import1.olean</code> + <code>import2.olean</code> -&gt; lean -&gt; <code>foo.olean</code> + <code>foo.c</code></p>",
        "id": 390455840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694501523
    },
    {
        "content": "<p>and then <code>foo.c</code> -&gt; leanc -&gt; <code>foo.o</code> and <code>foo.o</code>, <code>bar.o</code>, <code>main.o</code> -&gt; ld -&gt; <code>main.exe</code> like a regular C project (if you are actually generating an executable, libraries like mathlib skip this stage)</p>",
        "id": 390456010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694501608
    },
    {
        "content": "<p>Thank you! That's very clear! I think building stage1 involves calling both stage0 and stage1's <code>lean.exe</code> so I should make both 32-bit (or both 64-bit).<br>\nAnother question: I'm a long time <code>Visual Studio</code> user but unfortunately the current cmake said only <code>Unix Makefile</code> is supported, but reading <code>CMakelist.txt</code> I have an impression that it used to support native <code>Visual Studio</code> generator? Anyway, will it be difficult to modify the script (or probably write my own) to generate a <code>Visual Studio</code> solution (I feel more confident to debug within <code>Visual Studio</code> than with <code>gdb</code> or <code>lldb</code>)? It looks like the building process is not very complicated, but I don't know whether there are lots of subtle issues or even traps.</p>",
        "id": 390457902,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694502594
    },
    {
        "content": "<p>Our build process is very much Unix focused in various aspects, there is no intention to change that</p>",
        "id": 390461526,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694504208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"648305\">@Rujia Liu</span> The build process is subtle, and in my experience has been complex to modify.</p>",
        "id": 390467588,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1694506538
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Then I would rather not mess with it for now. I'm reasonably comfortable with this current build process. </p>\n<p>Now I'm trying to bulid wasm with the official emscripten docker, but hoping to build a <code>stage0</code> wasm32 binary as a first step. However, I got the same problem as the very first message in this topic (signature mismatch). I then realized that although the codes were fixed, stage0 was not updated. Maybe that's the reason why you built a native 32-bit stage0, then a wasm32 stage1. However, the docker doesn't have 32-bit clang and my development machine don't have Internet access to do <code>apt-get</code>. My plan is to copy my <code>msys32</code> generated <code>.c</code> files back to my docker container's <code>stdlib</code> directory and copy c++ codes inside <code>src</code> to <code>stage0</code> (i.e. do a manual update of <code>stage0</code>), hope it will work...</p>",
        "id": 390479529,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694510724
    },
    {
        "content": "<p>My manual update to <code>stage0</code> looks good. At least it successfully built. <code>wasm-ld</code> reported that <code>sigaltstack</code> is undefined, which I think is not supported by <code>emscripten</code> so I disabled it. </p>\n<p>However, I was unable to execute it (got some <code>bad memory</code> error). I thought it may be related to multi-threading, so I tried to disable multi-threading, but <code>mutex.cpp</code> doesn't compile. It'll be help if <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> can remember some details:</p>\n<ul>\n<li>Did you disable multi-threading? (maybe not, because you successfully built it)</li>\n<li>Did you disable BSYMBOLIC? I had to do this otherwise <code>wasm-ld</code> will complain</li>\n<li>Did you change CMAKE_AR to emar? I did anyway, but don't know whether it's doing anything helpful or bad</li>\n<li>Did you disable undefined symbol error? (I had to do this to workaround the sigaltstack problem)</li>\n<li>Did you add any extra flags to emcc? I had to add <code>-s USE_PTHREADS=1</code> to lean's own cxx flags otherwise <code>wasm-ld</code> will complain. But I don't have time to add those memory flags today.</li>\n</ul>\n<p>If can't make multi-threaded version work, can I first try to make single-threaded lean work? I have an impression that emscripten's pthread support isn't great and in my several other projects disabled them (but some are using it successfully) <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 390519157,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694524928
    },
    {
        "content": "<p>As I wrote, I hadn't tested whether the binaries I managed to compile are usable. They are not. I ran into similar issues that you are reporting.</p>",
        "id": 390522036,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694525816
    },
    {
        "content": "<p>My new approach is to start with a very old version of Lean, in which wasm was working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span> <span class=\"c1\">--recurse-submodules</span>\n<span class=\"n\">cd</span> <span class=\"n\">lean4</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">d92e4a7</span>\n<span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">emcmake</span> <span class=\"n\">cmake</span> <span class=\"bp\">../..</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span>\n<span class=\"n\">emmake</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j8</span> <span class=\"n\">stage0</span>\n</code></pre></div>\n<p>This produces a usable wasm binary on stage0. Now I am trying to gradually work forward to the present version of Lean while making sure that the binary still works.</p>",
        "id": 390522469,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694525979
    },
    {
        "content": "<p>Thanks! That's good news! what's the date of that commit? My network is too bad for a complete clone so mine is a very shallow clone. Anyway, I'd like to stick with current version, so let's take different routes :)</p>",
        "id": 390523368,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694526253
    },
    {
        "content": "<p>It's from Jun 6, 2021</p>",
        "id": 390527122,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694527394
    },
    {
        "content": "<p>That's long time ago. Thanks for your info.</p>",
        "id": 390627352,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694569514
    },
    {
        "content": "<p>I've manually fix the compilation problem in single-threaded lean, but I cannot prevent calling <code> initialize_stack_overflow()</code> from crashing so I disabled it. I hope it will not cause problems later on. After that, when running when <code>node</code>, it got the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Calling</span> <span class=\"n\">stub</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">signal</span><span class=\"o\">()</span>\n<span class=\"n\">exception</span> <span class=\"n\">thrown</span><span class=\"o\">:</span> <span class=\"n\">RangeError</span><span class=\"o\">:</span> <span class=\"n\">Maximum</span> <span class=\"n\">call</span> <span class=\"n\">stack</span> <span class=\"n\">size</span> <span class=\"n\">exceeded</span><span class=\"o\">,</span><span class=\"n\">RangeError</span><span class=\"o\">:</span> <span class=\"n\">Maximum</span> <span class=\"n\">call</span> <span class=\"n\">stack</span> <span class=\"n\">size</span> <span class=\"n\">exceeded</span>\n    <span class=\"n\">at</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">127664</span><span class=\"o\">]:</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">l_Lean_Parser_andthenInfo___elambda__1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">69888</span><span class=\"o\">]:</span><span class=\"mi\">77</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">127664</span><span class=\"o\">]:</span><span class=\"mi\">5749</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">l_Lean_Parser_andthenInfo___elambda__1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">69888</span><span class=\"o\">]:</span><span class=\"mi\">77</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">127664</span><span class=\"o\">]:</span><span class=\"mi\">5749</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">l_Lean_Parser_andthenInfo___elambda__1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">69888</span><span class=\"o\">]:</span><span class=\"mi\">77</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">127664</span><span class=\"o\">]:</span><span class=\"mi\">5749</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">l_Lean_Parser_andthenInfo___elambda__1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">69888</span><span class=\"o\">]:</span><span class=\"mi\">77</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">127664</span><span class=\"o\">]:</span><span class=\"mi\">5749</span><span class=\"o\">)</span>\n    <span class=\"n\">at</span> <span class=\"n\">l_Lean_Parser_nodeInfo___elambda__1</span> <span class=\"o\">(</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">function</span><span class=\"o\">[</span><span class=\"mi\">69895</span><span class=\"o\">]:</span><span class=\"mi\">135</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I've already increased node's stack but larger stack results in less information (just \"Exception thrown\"), so maybe it's indeed infinite recursion? Any idea/hunches?</p>",
        "id": 390631304,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694571675
    },
    {
        "content": "<p>Some progress: now the wasm build can print the usage, the feature set (<code>--features</code>) and the libdir (<code>--print-libdir</code>). It reports <code>Unknown package 'Init'</code> when trying to run a hello world program, because there is no <code>.olean</code> in the libdir. But since I'm only trying single-threaded version, there is no <code>--server</code> so I can't test it. <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span></p>",
        "id": 390716422,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694609482
    },
    {
        "content": "<p>How about <code>echo \"prelude\\n#check Prop\" | node lean --stdin</code>?</p>",
        "id": 390716623,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694609539
    },
    {
        "content": "<p>Ok let me try (it's in another computer, I need to move myself)</p>",
        "id": 390716732,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694609572
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">program</span> <span class=\"n\">exited</span> <span class=\"o\">(</span><span class=\"k\">with</span> <span class=\"n\">status</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">but</span> <span class=\"n\">EXIT_RUNTIME</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">set</span><span class=\"o\">,</span> <span class=\"n\">so</span> <span class=\"n\">halting</span> <span class=\"n\">execution</span> <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">exiting</span> <span class=\"n\">the</span> <span class=\"n\">runtime</span> <span class=\"n\">or</span> <span class=\"n\">preventing</span> <span class=\"n\">further</span> <span class=\"n\">async</span> <span class=\"n\">execution</span> <span class=\"o\">(</span><span class=\"n\">build</span> <span class=\"k\">with</span> <span class=\"n\">EXIT_RUNTIME</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">you</span> <span class=\"n\">want</span> <span class=\"n\">a</span> <span class=\"n\">true</span> <span class=\"n\">shutdown</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390717082,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694609693
    },
    {
        "content": "<p>Looks good</p>",
        "id": 390717200,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694609720
    },
    {
        "content": "<p>You could try Init.Prelude next</p>",
        "id": 390717236,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694609733
    },
    {
        "content": "<p>Do you mean replace \"prelude\" with \"Init.Prelude\"? It report <code>Unkown Package 'init'</code> again.</p>",
        "id": 390717566,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694609840
    },
    {
        "content": "<p>I think he means</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>node lean --stdin &lt; ~/Projects/lean4/src/Init/Prelude.lean\n</code></pre></div>\n<p>where <code>~/Projects/lean4</code> is the place where I have cloned the lean4 repo.</p>",
        "id": 390719625,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694610454
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">node</span> <span class=\"n\">lean</span> <span class=\"bp\">~/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude.lean</span>\n</code></pre></div>\n<p>achieves the same I guess...</p>",
        "id": 390719908,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694610533
    },
    {
        "content": "<p>Oh! I'm too new to lean to understand this... Anyway, here is the result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1151</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1370</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Sub</span> <span class=\"bp\">?</span><span class=\"n\">m.7261</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1373</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1432</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">2354</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"o\">{</span><span class=\"bp\">...</span><span class=\"o\">}</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">known</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3086</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3246</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3249</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">abbrev'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">add_decl_doc'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">axiom</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">builtin_initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">declare_syntax_cat'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">def</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">example</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">inductive</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixl</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixr</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">notation</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">opaque'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">postfix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">prefix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">syntax'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"kd\">theorem</span><span class=\"bp\">'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3254</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">CoeFun'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3256</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">EStateM.Backtrackable.restore'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3262</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">CoeFun'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3264</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">EStateM.Backtrackable.restore'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3302</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"bp\">'</span><span class=\"n\">u_1'</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">EStateM.instOrElseEStateM'</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">occur</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">nor</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">explicit</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">provided</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">user</span><span class=\"o\">,</span> <span class=\"n\">occurring</span> <span class=\"n\">at</span> <span class=\"n\">expression</span>\n  <span class=\"n\">EStateM.orElse.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n<span class=\"n\">at</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Backtrackable</span> <span class=\"n\">δ</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">orElse</span> <span class=\"o\">:=</span> <span class=\"n\">EStateM.orElse</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3310</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"bp\">'</span><span class=\"n\">u_1'</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">EStateM.instMonadExceptOfEStateM'</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">occur</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">nor</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">explicit</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">provided</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">user</span><span class=\"o\">,</span> <span class=\"n\">occurring</span> <span class=\"n\">at</span> <span class=\"n\">expression</span>\n  <span class=\"n\">EStateM.tryCatch.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n<span class=\"n\">at</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">σ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Backtrackable</span> <span class=\"n\">δ</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">{</span> <span class=\"n\">throw</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EStateM.throw</span><span class=\"o\">,</span> <span class=\"n\">tryCatch</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EStateM.tryCatch</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3342</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">restore'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">field</span> <span class=\"n\">of</span> <span class=\"kd\">structure</span> <span class=\"bp\">'</span><span class=\"n\">EStateM.Backtrackable'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3474</span><span class=\"o\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'s'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">3474</span><span class=\"o\">:</span><span class=\"mi\">49</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4389</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MonadWithReader</span> <span class=\"bp\">?</span><span class=\"n\">m.73191</span> <span class=\"n\">MacroM</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4389</span><span class=\"o\">:</span><span class=\"mi\">52</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"kd\">structure</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4398</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MonadExcept</span> <span class=\"n\">Exception</span> <span class=\"n\">MacroM</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4406</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MonadExcept</span> <span class=\"n\">Exception</span> <span class=\"n\">MacroM</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4418</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MonadWithReader</span> <span class=\"bp\">?</span><span class=\"n\">m.75079</span> <span class=\"n\">MacroM</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4418</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"kd\">structure</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4424</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MonadExcept</span> <span class=\"n\">Exception</span> <span class=\"n\">MacroM</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4425</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MonadWithReader</span> <span class=\"bp\">?</span><span class=\"n\">m.75752</span> <span class=\"n\">MacroM</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4425</span><span class=\"o\">:</span><span class=\"mi\">36</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"kd\">structure</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">stdin</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">4520</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MonadWithReader</span> <span class=\"n\">Syntax</span> <span class=\"n\">UnexpandM</span>\n<span class=\"n\">program</span> <span class=\"n\">exited</span> <span class=\"o\">(</span><span class=\"k\">with</span> <span class=\"n\">status</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">but</span> <span class=\"n\">EXIT_RUNTIME</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">set</span><span class=\"o\">,</span> <span class=\"n\">so</span> <span class=\"n\">halting</span> <span class=\"n\">execution</span> <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">exiting</span> <span class=\"n\">the</span> <span class=\"n\">runtime</span> <span class=\"n\">or</span> <span class=\"n\">preventing</span> <span class=\"n\">further</span> <span class=\"n\">async</span> <span class=\"n\">execution</span> <span class=\"o\">(</span><span class=\"n\">build</span> <span class=\"k\">with</span> <span class=\"n\">EXIT_RUNTIME</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">you</span> <span class=\"n\">want</span> <span class=\"n\">a</span> <span class=\"n\">true</span> <span class=\"n\">shutdown</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390720614,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694610743
    },
    {
        "content": "<p>Hm, looks like a Lean version mismatch?  At least, it didn't crash entirely :-)</p>",
        "id": 390722176,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694611245
    },
    {
        "content": "<p>I copied the <code>.olean</code> files produced by my ealier 32-bit lean (built with <code>msys2</code> on Windows 10) into the docker and run the hello world program, it threw some exceptions with a very long stacktrace involving <code>__mmap</code> and at the very bottom there is <code>lean_read_module_data</code> which looks reasonable. Maybe I shouldn't mix olean files like this?</p>",
        "id": 390722203,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694611252
    },
    {
        "content": "<p>Oh, maybe... I'm in a rush so I can get something wrong.</p>",
        "id": 390722321,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694611294
    },
    {
        "content": "<p>As far as I know, olean files should work as long the number of bits is the same (32/64).</p>",
        "id": 390722459,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694611330
    },
    {
        "content": "<p>I hope I can have some time to figure about the mismatch thing and the <code>__map</code> thing tomorrow, but I'm getting really busy</p>",
        "id": 390722489,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694611339
    },
    {
        "content": "<p>Oh, that's good news! Then maybe we just shouldn't use <code>__mmap</code>. <br>\nBTW: I've managed to build and debug <code>lean</code> with in <code>Visual Studio</code> so maybe I can handle this <code>lean_read_module_data</code> issue :)</p>",
        "id": 390722746,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694611437
    },
    {
        "content": "<p>I am a bit stuck at commit 2418acd (August 20th, 2021)</p>\n<p>Before that commit, when replacing the line <code>size_t read_sz = std::min(remain, 65536);</code> in <code>stage0/src/runtime/io.cpp</code> by <code>size_t read_sz = std::min(remain, static_cast&lt;size_t&gt;(65536));</code>, the following works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">emcmake</span> <span class=\"n\">cmake</span> <span class=\"bp\">../..</span>\n<span class=\"n\">emmake</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j8</span> <span class=\"n\">stage0</span>\n</code></pre></div>",
        "id": 390727198,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694612748
    },
    {
        "content": "<p>After disabling, the hello world program now gets: <code>To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking</code></p>",
        "id": 390727225,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694612758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/390727198\">said</a>:</p>\n<blockquote>\n<p>I am a bit stuck at commit 2418acd (August 20th, 2021)</p>\n<p>Before that commit, when replacing the line <code>size_t read_sz = std::min(remain, 65536);</code> in <code>stage0/src/runtime/io.cpp</code> by <code>size_t read_sz = std::min(remain, static_cast&lt;size_t&gt;(65536));</code>, the following works fine:<br>\n emcmake cmake ../..</p>\n</blockquote>\n<p>I also modified that <code>65536</code> cast :) Did that commit modify <code>CMakeList.txt</code>? So far the biggest trap is to pass correct information to stage0... In the latest code, even with <code>emcmake</code>, stage0 didn't know it's emscripten :-S</p>",
        "id": 390727566,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694612866
    },
    {
        "content": "<p>And after commit <code>2418acd</code>, it all breaks down. The first issue can be solved by replacing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"s2\">\"$LEAN_CXX\"</span> <span class=\"o\">]</span> <span class=\"bp\">||</span> <span class=\"n\">LEAN_CXX</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">++</span>\n</code></pre></div>\n<p>by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"s2\">\"$LEAN_CXX\"</span> <span class=\"o\">]</span> <span class=\"bp\">||</span> <span class=\"n\">LEAN_CXX</span><span class=\"bp\">=</span><span class=\"n\">emcc</span>\n</code></pre></div>\n<p>in <code>stace0/src/bin/leanc.in</code>.<br>\nBut then I get <code>error: unable to find library -lgmp</code> while building <code>libleanshared.so</code> and I am not sure how to fix this.</p>",
        "id": 390727909,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694612993
    },
    {
        "content": "<p>In the current code, the top-level <code>CMakeList.txt</code> seems to assume emscripten -&gt; use_gmp. I just commented it. Maybe <code>2418acd</code> has the same problem?</p>",
        "id": 390728434,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694613150
    },
    {
        "content": "<p>(It explictly added a dependency of gmp when detected Emscripten)</p>",
        "id": 390728501,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694613174
    },
    {
        "content": "<p>Hm, yeah, I am not sure if I should use GMP or not. I think in 2021, there was no option to disable GMP at all.</p>",
        "id": 390728885,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694613280
    },
    {
        "content": "<p>Sorry, got the commit number wrong. The problematic commit is <code> 6521143</code>.</p>",
        "id": 390729052,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694613324
    },
    {
        "content": "<p>I've leaving the office now. The 2nd biggest trap is to we must tell node to use a larger stack. All my current commands start with <code>LEAN_PATH=/home/stage0/bin node --stack-size=8192 lean</code>. The directory is <code>/home</code> is because in <code>shell.cpp</code> it only mounted <code>/home</code> and <code>/tmp</code> (but you can modify that after the build because that's in <code>lean.js</code>). Hope it helps...</p>",
        "id": 390729070,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694613330
    },
    {
        "content": "<p>Oh, GMP was mandatory at that time... I see. That's unfortunate (I hate using gmp with emscripten...)</p>",
        "id": 390729256,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694613378
    },
    {
        "content": "<p>And I can remember that I must make sure the definition <code>LEAN_EMSCRIPTEN</code> is available to all codes. Using <code>emcc</code> is not enough. Without it, all my attempts resulted in crahes.</p>",
        "id": 390729919,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694613550
    },
    {
        "content": "<p>Last try: change emcc parameter to <code>-sMAIN_MODULE=2</code> according to <a href=\"https://emscripten.org/docs/compiling/Dynamic-Linking.html\">https://emscripten.org/docs/compiling/Dynamic-Linking.html</a>.<br>\nNow running hello world got <code>Main.lean:1:0: error: could not find native implementation of external declaration 'IO.getRandomBytes' (symbols 'l_IO_getRandomBytes___boxed' or 'l_IO_getRandomBytes')</code> so it didn't find that function even with <code>dlopen</code> enabled. Maybe I should also add <code>EMSCRIPTEN_KEEPALIVE </code> but I'm running out of time now.</p>",
        "id": 390731784,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694614058
    },
    {
        "content": "<p>How do I make sure that <code>LEAN_EMSCRIPTEN</code> is always defined?</p>",
        "id": 390742640,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694617095
    },
    {
        "content": "<p>Have you encountered <code>_malloc is not a function</code>?</p>",
        "id": 390745674,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694617933
    },
    {
        "content": "<p>That isn't possible: everything is a function in Lean.</p>",
        "id": 390745962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694618030
    },
    {
        "content": "<p>Must be an issue in the JS code then <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 390746301,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694618128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/390742640\">said</a>:</p>\n<blockquote>\n<p>How do I make sure that <code>LEAN_EMSCRIPTEN</code> is always defined?</p>\n</blockquote>\n<p>I just passed it via <code>-DSTAGE0_LEAN_EXTRA_CXX_FLAGS</code> though I think a better way would be <code>-DSTAGE0_CMAKE_TOOLCHAIN_FILE</code> (haven't validated yet)</p>",
        "id": 390835885,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694657778
    },
    {
        "content": "<p>And no, I haven't encountered <code>_malloc is not a function</code>.</p>",
        "id": 390835922,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694657801
    },
    {
        "content": "<p>I added <code>EMSCRIPTEN_KEEPALIVE</code> and still no luck. However, after inspecting the generated wasm, I can see a lot of <code>lean</code> functions inside:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Exports</span><span class=\"o\">:</span>\n  <span class=\"n\">Functions</span><span class=\"o\">:</span>\n    <span class=\"s2\">\"__wasm_call_ctors\"</span><span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"s2\">\"main\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_default_sizeOf___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"lean_apply_1\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_System_Uri_pathToUri___lambda__1___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_System_Uri_fileUriToPath_x3f___lambda__1___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_System_Uri_fileUriToPath_x3f___lambda__2___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_Char_toUpper___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l___private_Init_System_FilePath_0__System_hashFilePath____x40_Init_System_FilePath___hyg_113____boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_System_FilePath_normalize___lambda__1___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_System_FilePath_normalize___lambda__2___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_System_FilePath_join\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_List_contains___at___private_Init_System_FilePath_0__System_FilePath_posOfLastSep___spec__1___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"lean_mk_io_user_error\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"lean_mk_io_error_other_error\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"lean_io_error_to_string\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_Char_toLower___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_Mutex_atomically___rarg___lambda__3___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"lean_task_get\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_EStateM_instInhabitedEStateM___rarg\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_EIO_toBaseIO___rarg\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_monoNanosNow___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_sleep___lambda__1___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_FS_Mode_noConfusion___rarg___lambda__1___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_FS_instInhabitedStream___lambda__1\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_FS_instInhabitedStream___lambda__2___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_FS_instInhabitedStream___lambda__3___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l___private_Init_System_IO_0__IO_FS_reprDirEntry____x40_Init_System_IO___hyg_2730____boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l___private_Init_System_IO_0__IO_FS_reprFileType____x40_Init_System_IO___hyg_2828____boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l___private_Init_System_IO_0__IO_FS_beqFileType____x40_Init_System_IO___hyg_2993____boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l___private_Init_System_IO_0__IO_FS_reprSystemTime____x40_Init_System_IO___hyg_3036____boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l___private_Init_System_IO_0__IO_FS_beqSystemTime____x40_Init_System_IO___hyg_3102____boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l___private_Init_System_IO_0__IO_FS_ordSystemTime____x40_Init_System_IO___hyg_3197____boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l___private_Init_System_IO_0__IO_FS_reprMetadata____x40_Init_System_IO___hyg_3371____boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_withStdin___rarg___lambda__2___boxed\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n    <span class=\"s2\">\"l_IO_mkRef___rarg\"</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">,</span> <span class=\"n\">I32</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">I32</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There are slightly above 10000 functions, but no <code>l_IO_getRandomBytes___boxed</code>. I wonder whether this looks like we hit some limitation of number of exported functions, or <code>l_IO_getRandomBytes___boxed</code> is really special.</p>",
        "id": 390836113,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694657933
    },
    {
        "content": "<p>I somehow forced to export that <code>l_IO_getRandomBytes___boxed</code> function but still got the same error. When running <code>wasmer inspect</code>, I got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">inspect</span> <span class=\"bp\">`</span><span class=\"n\">lean2.wasm</span><span class=\"bp\">`</span>\n<span class=\"bp\">╰─▶</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">Validation</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">effective</span> <span class=\"n\">type</span> <span class=\"n\">size</span> <span class=\"n\">exceeds</span> <span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">of</span> <span class=\"mi\">100000</span> <span class=\"o\">(</span><span class=\"n\">at</span> <span class=\"n\">offset</span> <span class=\"mi\">0x16f1e4</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So it looks like there is indeed some limitation?</p>",
        "id": 390856020,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694669605
    },
    {
        "content": "<p>Looks like a limitation of wasmer inspect, not of wasm.</p>",
        "id": 390862156,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694673292
    },
    {
        "content": "<p>Ok, so the exported function table could be incomplete, too (I mean, the function is actually exported, but dsym() couldn't find it)? What do you suggest me to do next? I'm stuck</p>",
        "id": 390862835,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694673629
    },
    {
        "content": "<p>where does this function actually get called? And where is it defined?</p>",
        "id": 390871752,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694677363
    },
    {
        "content": "<p>dlsym is from the interpreter, trying to execute an <code>initialize</code> block in this case</p>",
        "id": 390874122,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694678231
    },
    {
        "content": "<p>So if the exported symbol table is incomplete, that's a problem, yes</p>",
        "id": 390874211,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694678267
    },
    {
        "content": "<p>Maybe <code>-s LINKABLE=1 -s EXPORT_ALL=1</code> would help (<a href=\"https://stackoverflow.com/questions/33190760/export-all-functions-with-emscripten\">https://stackoverflow.com/questions/33190760/export-all-functions-with-emscripten</a>)</p>",
        "id": 390875197,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694678608
    },
    {
        "content": "<p>Hello world works now!!! <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  It turns out that with emscripten, <code>dlsym</code> should be called in a specific way. Here is what I changed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">void</span> <span class=\"bp\">*</span> <span class=\"n\">lookup_symbol_in_cur_exe</span><span class=\"o\">(</span><span class=\"n\">char</span> <span class=\"n\">const</span> <span class=\"bp\">*</span> <span class=\"n\">sym</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"bp\">#</span><span class=\"k\">if</span> <span class=\"n\">defined</span><span class=\"o\">(</span><span class=\"n\">LEAN_EMSCRIPTEN</span><span class=\"o\">)</span>\n    <span class=\"n\">void</span><span class=\"bp\">*</span> <span class=\"n\">self</span> <span class=\"bp\">=</span> <span class=\"n\">dlopen</span><span class=\"o\">(</span><span class=\"n\">NULL</span><span class=\"o\">,</span> <span class=\"n\">RTLD_LAZY</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">return</span> <span class=\"n\">dlsym</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">,</span> <span class=\"n\">sym</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"bp\">#</span><span class=\"n\">endif</span>\n</code></pre></div>",
        "id": 390882139,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694680998
    },
    {
        "content": "<p>BTW: I've also added <code>-s LINKABLE=1 -s EXPORT_ALL=1</code>, thanks!</p>",
        "id": 390882320,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694681052
    },
    {
        "content": "<p>But there is still a weird thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">node</span> <span class=\"n\">lean</span> <span class=\"c1\">--stdin &lt; /home/lean4/src/Init/Prelude.lean</span>\n</code></pre></div>\n<p>Got the errors I posted, but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">node</span> <span class=\"n\">lean</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude.lean</span>\n</code></pre></div>\n<p>Got no output at all (I guess this is the correct behavior?).</p>",
        "id": 390882730,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694681198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"648305\">@Rujia Liu</span> that’s very cool! Do you have your changes on a branch somewhere I can go see? :)</p>",
        "id": 390882773,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1694681215
    },
    {
        "content": "<p>I don't know why there would be a difference, but no output is the correct behavior.</p>",
        "id": 390882914,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694681278
    },
    {
        "content": "<p>And yes, please share your setup :-)</p>",
        "id": 390883022,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694681305
    },
    {
        "content": "<p>Not at this moment... I made quite a few experiments that I've no idea which ones are working... After some cleaning up I'll push the changes into my fork (which doesn't exist yet :P) Could you wait some time because I'm busy currently</p>",
        "id": 390883093,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694681329
    },
    {
        "content": "<p>Make sure to save the current state somewhere so that you don't lose it :D</p>",
        "id": 390883205,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694681372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/390883205\">said</a>:</p>\n<blockquote>\n<p>Make sure to save the current state somewhere so that you don't lose it :D</p>\n</blockquote>\n<p>Yes! Great advice! That's what I often did :)</p>",
        "id": 390883347,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694681412
    },
    {
        "content": "<p>And we'd be happy to see a version without cleanup as well <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 390883573,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694681498
    },
    {
        "content": "<p>Oh, nice to hear that <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 390888583,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694683200
    },
    {
        "content": "<p>Ok, created an PR for easier discussion (is there a better way?) <a href=\"https://github.com/leanprover/lean4/pull/2543\">https://github.com/leanprover/lean4/pull/2543</a> I hope that didn't violate any guidelines <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>  <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span></p>",
        "id": 390901074,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694687648
    },
    {
        "content": "<p>Awesome, thanks a lot!</p>",
        "id": 390901380,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694687787
    },
    {
        "content": "<p>Could you share the build commands you are using?</p>",
        "id": 390901428,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694687809
    },
    {
        "content": "<p>And if you could (eventually) put them in a new CI job, that would be even better!</p>",
        "id": 390901931,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694688020
    },
    {
        "content": "<p>Oh! I thought I post the commands in the PR but apparently the post failed... Here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"bp\">*</span>\n<span class=\"n\">emcmake</span> <span class=\"n\">cmake</span> <span class=\"bp\">../..</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_AR</span><span class=\"bp\">=/</span><span class=\"n\">emsdk_portable</span><span class=\"bp\">/</span><span class=\"n\">upstream</span><span class=\"bp\">/</span><span class=\"n\">emscripten</span><span class=\"bp\">/</span><span class=\"n\">emar</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_TOOLCHAIN_FILE</span><span class=\"bp\">=/</span><span class=\"n\">emsdk_portable</span><span class=\"bp\">/</span><span class=\"n\">upstream</span><span class=\"bp\">/</span><span class=\"n\">emscripten</span><span class=\"bp\">/</span><span class=\"n\">cmake</span><span class=\"bp\">/</span><span class=\"n\">Modules</span><span class=\"bp\">/</span><span class=\"n\">Platform</span><span class=\"bp\">/</span><span class=\"n\">Emscripten.cmake</span> <span class=\"bp\">-</span><span class=\"n\">DDSTAGE0_CMAKE_CROSSCOMPILING_EMULATOR</span><span class=\"bp\">=</span><span class=\"s2\">\"/emsdk_portable/node/12.9.1_64bit/bin/node\"</span>\n<span class=\"n\">VERBOSE</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"n\">emmake</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"n\">stage0</span>\n<span class=\"s2\">\"/src/lean4/build/release/stage0/leanc.sh\"</span> <span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">shell</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">shell.dir</span><span class=\"bp\">/</span><span class=\"n\">lean.cpp.o</span> <span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--whole-archive -lInit -lLean -lleancpp -lleanrt -rdynamic -o /src/lean4/build/release/stage0/bin/lean -s ERROR_ON_UNDEFINED_SYMBOLS=0 -s ASSERTIONS=1 -s WASM=1 -fexceptions -lnodefs.js -s MAIN_MODULE=1 -s LINKABLE=1 -s EXPORT_ALL=1 -s LLD_REPORT_UNDEFINED=1</span>\n<span class=\"n\">cp</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span> <span class=\"bp\">/</span><span class=\"n\">home</span>\n<span class=\"n\">cd</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">bin</span>\n<span class=\"n\">LEAN_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">bin</span> <span class=\"n\">node</span> <span class=\"c1\">--stack-size=8192 lean --run Main.lean</span>\n</code></pre></div>\n<p>Note that I didn't bother changing the final command to build the wasm, so I added a followup command after <code>make</code>. The next command is to copy everything into a directory insode <code>/home</code> because the current code only mounted <code>/home</code> and <code>/tmp</code>. The last command is try to run a Hello World program (or whatever else).</p>",
        "id": 390903021,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694688421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/390901931\">said</a>:</p>\n<blockquote>\n<p>And if you could (eventually) put them in a new CI job, that would be even better!</p>\n</blockquote>\n<p>I hope so! But I need to get rid of the follow up command first <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 390903200,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694688486
    },
    {
        "content": "<p>The local paths used in the command was reported by executing <code>emcmake</code> alone first. Ideally we need to pass those things to stage0 automatically?</p>",
        "id": 390903419,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694688573
    },
    {
        "content": "<p>Forgot to say: you need to update <code>stage0</code> before building with emscripten because there are still extern function signature mismatches (the source codes were fixed long ago but <code>stage0</code> was not updated after that) <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span></p>",
        "id": 390907826,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694690398
    },
    {
        "content": "<p>How do I do that?</p>",
        "id": 390908202,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694690543
    },
    {
        "content": "<p>Oops, I missed the update. It looks like stage0 was updated after releasing official 4.0</p>",
        "id": 390908348,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694690614
    },
    {
        "content": "<p>Updated in <code>c2a5730bc97ba89cf6bc586ec45ef6ae2a2c0271</code></p>",
        "id": 390908529,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694690683
    },
    {
        "content": "<p>Ok, I updated stage0 like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"bp\">*</span>\n<span class=\"n\">cmake</span> <span class=\"bp\">../..</span>\n<span class=\"n\">make</span> <span class=\"n\">update</span><span class=\"bp\">-</span><span class=\"n\">stage0</span>\n</code></pre></div>",
        "id": 390922371,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694695580
    },
    {
        "content": "<p>Oh, that's the official way. I discovered that after my manual update <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 390925288,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694696456
    },
    {
        "content": "<p>With that, the build works for me, too. I don't have the oleans ready to test though.</p>",
        "id": 390925519,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694696531
    },
    {
        "content": "<p>hmmm... maybe add a 32-bit build to CI and then you can download the oleans</p>",
        "id": 390928179,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694697374
    },
    {
        "content": "<p>I tried to compile the multithreaded version. In <code>stage0/src/CMakeLists.txt</code>, I edited:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">#</span> <span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">MULTI_THREAD</span> <span class=\"n\">OFF</span><span class=\"o\">)</span>\n    <span class=\"bp\">#</span> <span class=\"n\">TODO</span><span class=\"o\">(</span><span class=\"n\">WN</span><span class=\"o\">):</span> <span class=\"n\">code</span> <span class=\"n\">size</span><span class=\"bp\">/</span><span class=\"n\">performance</span> <span class=\"n\">tradeoffs</span>\n    <span class=\"bp\">#</span> <span class=\"bp\">-</span> <span class=\"n\">we're</span> <span class=\"n\">using</span> <span class=\"bp\">-</span><span class=\"n\">O3</span><span class=\"bp\">;</span> <span class=\"n\">it's</span> <span class=\"bp\">/</span><span class=\"n\">okay</span><span class=\"bp\">/</span>\n    <span class=\"bp\">#</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">flto</span> <span class=\"n\">crashes</span> <span class=\"n\">at</span> <span class=\"n\">runtime</span>\n    <span class=\"bp\">#</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">Oz</span> <span class=\"n\">produces</span> <span class=\"n\">quite</span> <span class=\"n\">slow</span> <span class=\"n\">code</span>\n    <span class=\"bp\">#</span> <span class=\"bp\">-</span> <span class=\"n\">system</span> <span class=\"n\">libraries</span> <span class=\"n\">such</span> <span class=\"n\">as</span> <span class=\"n\">OpenGL</span> <span class=\"n\">are</span> <span class=\"n\">included</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">JS</span> <span class=\"n\">but</span> <span class=\"n\">shouldn't</span> <span class=\"n\">be</span>\n    <span class=\"bp\">#</span> <span class=\"bp\">-</span> <span class=\"n\">we</span> <span class=\"n\">need</span> <span class=\"n\">EMSCRIPTEN_KEEPALIVE</span> <span class=\"n\">annotations</span> <span class=\"n\">on</span> <span class=\"n\">exports</span> <span class=\"n\">to</span> <span class=\"n\">run</span> <span class=\"kd\">meta</span><span class=\"bp\">-</span><span class=\"n\">dce</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"n\">MAIN_MODULE</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">#</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">fexceptions</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">slow</span> <span class=\"n\">JS</span> <span class=\"n\">blob</span><span class=\"o\">,</span> <span class=\"n\">remove</span> <span class=\"n\">when</span> <span class=\"n\">more</span> <span class=\"n\">runtimes</span> <span class=\"n\">support</span> <span class=\"n\">the</span> <span class=\"n\">WASM</span> <span class=\"n\">exceptions</span> <span class=\"n\">spec</span>\n\n    <span class=\"bp\">#</span> <span class=\"n\">From</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">emscripten.org</span><span class=\"bp\">/</span><span class=\"n\">docs</span><span class=\"bp\">/</span><span class=\"n\">compiling</span><span class=\"bp\">/</span><span class=\"n\">WebAssembly.html</span><span class=\"bp\">#</span><span class=\"n\">backends</span><span class=\"o\">:</span>\n    <span class=\"bp\">#</span> <span class=\"bp\">&gt;</span> <span class=\"n\">The</span> <span class=\"n\">simple</span> <span class=\"n\">and</span> <span class=\"n\">safe</span> <span class=\"n\">thing</span> <span class=\"n\">is</span> <span class=\"n\">to</span> <span class=\"n\">pass</span> <span class=\"n\">all</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"n\">flags</span> <span class=\"n\">at</span> <span class=\"n\">both</span> <span class=\"n\">compile</span> <span class=\"n\">and</span> <span class=\"n\">link</span> <span class=\"n\">time.</span>\n    <span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">EMSCRIPTEN_SETTINGS</span> <span class=\"s2\">\"-s ALLOW_MEMORY_GROWTH=1 -s MAIN_MODULE=1 -fwasm-exceptions -pthread\"</span><span class=\"o\">)</span>\n    <span class=\"n\">string</span><span class=\"o\">(</span><span class=\"n\">APPEND</span> <span class=\"n\">LEANC_EXTRA_FLAGS</span> <span class=\"s2\">\" -pthread\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390932778,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694698733
    },
    {
        "content": "<p>This compiles, but <code>lean --server</code> yields:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Watchdog</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Cannot</span> <span class=\"n\">read</span> <span class=\"n\">LSP</span> <span class=\"n\">request</span><span class=\"o\">:</span> <span class=\"n\">hardware</span> <span class=\"n\">fault</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">29</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390932925,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694698783
    },
    {
        "content": "<p>Oh, I never tried that. Did multithreaded version work in that old version (2021 June) or just before the problematic commit <code>6521143</code>?</p>",
        "id": 390933798,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694699047
    },
    {
        "content": "<p>Acoording to <code>IOError.lean</code>, that's just <code>EIO</code> (input/output error). Hardware fault looks scary <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 390934688,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694699324
    },
    {
        "content": "<p>I don't think <code>--server</code> ever worked...</p>",
        "id": 390937026,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694700070
    },
    {
        "content": "<p>See also <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> 's post on this: <a href=\"#narrow/stream/270676-lean4/topic/web.20editor/near/281494817\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/web.20editor/near/281494817</a></p>",
        "id": 390937398,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694700185
    },
    {
        "content": "<p>I'm not sure what he means when writing that wasm thread \"execution semantics are specific to the web and would also need special support in the Lean runtime.\"</p>",
        "id": 390937750,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694700272
    },
    {
        "content": "<p>Thanks for the pointer. I'm leaving the office now and will try to read it home</p>",
        "id": 390938000,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694700336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/390937750\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what he means when writing that wasm thread \"execution semantics are specific to the web and would also need special support in the Lean runtime.\"</p>\n</blockquote>\n<p>The point I was attempting to make is that the when you are a WASM blob running in a browser, the environment you observe and interact with just isn't the usual Unix-based OS environment. There are no processes and threads, instead there are Web Workers. There are no files, instead there are various objects that are similar to files in some respect, e.g. Web Storage or the File System API (this does access actual files on disk). Emscripten allows us to pretend to some extent that we are still programming against Unix, e.g. by implementing <code>pthreads</code> as a pool of web workers. Nevertheless the illusion is not perfect, and for first-class WASM support I believe there needs to be some dedicated support in the Lean runtime for these Web Things.</p>\n<p>Note also that the in-progress LLVM backend may be capable of compiling Lean to WASM (because LLVM is) without any need for Emscripten. What you lose then is all these translation layers that the Emscripten runtime provides (e.g. for <code>pthreads</code>).</p>",
        "id": 391017804,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694725365
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> !  I can think of two other options:</p>\n<ul>\n<li>Use WASIX. However, it's wasmer-only (not a standard), but it seems to have everthing we need, including multiprocessing and sockets. Currently it doesn't support C++ but recently it filed an issue in <code>zig</code> to offer some money for WASIX support. When it's finished, maybe we can use <code>zig cc</code> to build lean4 and use WASIX? It seems to require least changes to <code>lean4</code> codebase, but I've no idea whether it'll work at all.</li>\n<li>Use wasi-preview2 (after it's finalized). It requires us to at least write some wit definitions, and maybe other changes in <code>lean4</code> codebase, but it should work. And since we go rid of emscripten, it will be much more lightweight.</li>\n</ul>\n<p>I'm not an export in this area. Just writing down what I have in mind.</p>",
        "id": 391054598,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694743509
    },
    {
        "content": "<p>Another concern is that while the wasm + glue js is 100MB (11MB zipped), which is not too bad (a native <code>libleanshared</code> is already ~70MB), even  32-bit <code>.olean</code>s are as big as 500MB (190MB zipped), which is far beyond my expectation. It's not cool to having to dowload 200MB to use a fully browser based lean ide or similar service. Is there anyway (or ongoing effort) to solve/workaround this?</p>",
        "id": 391058256,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694744844
    },
    {
        "content": "<p>I cannot comment on WASI/WASIX. My impression was that these projects were aimed more at running WASM code in native applications (i.e., not inside a browser), but this impression may be incorrect. As for <code>.olean</code> size, at least part of the reason why Lean 4 <code>.olean</code>s are large is that it is possible to load them directly into memory by mmaping them. This is super-fast but comes at the cost of some disk space, since the objects we load up should be 'ready to go' rather than compressed somehow. The efforts of <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> on <code>ltar</code> (a tool that can compress <code>.olean</code>s well) might be relevant here.</p>",
        "id": 391062218,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694746564
    },
    {
        "content": "<p>I think in order to be able to get smaller oleans on disk you need support in lean core for not doing the mmap thing (e.g. a compiler flag). Once this is done it is possible to deserialize and you can get an approximately 6x reduction in olean size before compression</p>",
        "id": 391063308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694747013
    },
    {
        "content": "<p>Thank you both! WASI is designed for native applications, yes, but it has browser shims. WASIX also has browser support but after I read the discussions in that <code>zig</code> issue, now I don't think we can rely on WASIX in near future. As for <code>.olean</code> files: I already disabled <code>mmap</code> in my wasm build because I can't make it work with emscripten anyway. And it's great to know it'll be approximately 6x reduction by serializing, before compression.</p>",
        "id": 391072974,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694751272
    },
    {
        "content": "<p>I've written a GitHub action that can reproduce <span class=\"user-mention\" data-user-id=\"648305\">@Rujia Liu</span> 's achievement: <a href=\"https://github.com/abentkamp/lean4/blob/wasm-experiments/.github/workflows/wasm.yml\">https://github.com/abentkamp/lean4/blob/wasm-experiments/.github/workflows/wasm.yml</a><br>\nThe output is here: <a href=\"https://github.com/abentkamp/lean4/actions/runs/6196384753/job/16822920883\">https://github.com/abentkamp/lean4/actions/runs/6196384753/job/16822920883</a></p>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>: What would it take to merge this into master? I am aware that the setup is not very clean yet, but we also shouldn't lose the progress we made. The big problems are:</p>\n<ul>\n<li>The native 32bit throws random segfaults, which is why I have to run <code>make || true</code> several times.</li>\n<li>The Github Action is not integrated into <code>matrix</code> setup of the Lean CI because it does not proceed in the way it's supposed to. I first run native 32bit to get the oleans, then a wasm build for stage0 only.</li>\n</ul>\n<p>Are 50min CI time (on GitHub Servers) acceptable?</p>",
        "id": 391134303,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694773997
    },
    {
        "content": "<p>Awesome! We should definitely fix the segfaults first though :) . And instead of recompiling stage 0 to emcc, I really hope we can move that to stage 1 in order to get close to the standard pipeline</p>",
        "id": 391141910,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694776683
    },
    {
        "content": "<p>I think the 32bit build is faulty, as some tests failed already. The most obvious one is an arithmetic overflow that I should be able to fix (but don't have time now). Some other failing tests might need help, but could also be a good exercise for myself :)</p>",
        "id": 391142090,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694776725
    },
    {
        "content": "<p>There is no inherent reason this setup should be slower to compile than other platforms, is there? It should speed up when the ccache is warm</p>",
        "id": 391142407,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694776815
    },
    {
        "content": "<p>I don't understand why is it so slow. In my machine a fresh wasm32 build is about 2~3 min (after 32-bit olean is built). Is github's CI job forced to be single-threaded? I'm not familiar with github CI at all. But anyway it should take similar time as native 64-bit build.</p>",
        "id": 391144774,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694777513
    },
    {
        "content": "<p>There is this message in the beginning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">ccache</span><span class=\"o\">,</span> <span class=\"n\">prepare</span> <span class=\"n\">for</span> <span class=\"n\">longer</span> <span class=\"n\">and</span> <span class=\"n\">redundant</span> <span class=\"n\">builds...</span>\n</code></pre></div>",
        "id": 391145557,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694777745
    },
    {
        "content": "<p>Ouch, I never noticed that <code>ccache</code> is so effective... I built too many times and forgot how long the first one took... Only remembered that later ones are quick :)</p>",
        "id": 391151516,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694779489
    },
    {
        "content": "<p>Ok, looking at the tests sounds like a good approach.<br>\nTest 307 fails because <code>#eval INT32_MIN / -2</code> yields <code>-1073741824</code> instead of  <code>1073741824</code>. Why would that happen?</p>",
        "id": 391154887,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694780365
    },
    {
        "content": "<p>Yeah, I'm planning to look at this tomorrow :)</p>",
        "id": 391163164,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694782343
    },
    {
        "content": "<p>Maybe <code>leanruntest_listtostring.lean</code> is actually more interesting because it is actually causing a segfault.</p>",
        "id": 391170629,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694784477
    },
    {
        "content": "<p>This is the gdb stack trace, but it does not help me much :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">run</span> <span class=\"bp\">../../</span><span class=\"n\">tests</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">run</span><span class=\"bp\">/</span><span class=\"n\">listtostring.lean</span>\n<span class=\"n\">Starting</span> <span class=\"n\">program</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">../../</span><span class=\"n\">tests</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">run</span><span class=\"bp\">/</span><span class=\"n\">listtostring.lean</span>\n<span class=\"o\">[</span><span class=\"n\">Thread</span> <span class=\"n\">debugging</span> <span class=\"n\">using</span> <span class=\"n\">libthread_db</span> <span class=\"n\">enabled</span><span class=\"o\">]</span>\n<span class=\"n\">Using</span> <span class=\"n\">host</span> <span class=\"n\">libthread_db</span> <span class=\"n\">library</span> <span class=\"s2\">\"/lib/x86_64-linux-gnu/libthread_db.so.1\"</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Program</span> <span class=\"n\">received</span> <span class=\"n\">signal</span> <span class=\"n\">SIGSEGV</span><span class=\"o\">,</span> <span class=\"n\">Segmentation</span> <span class=\"n\">fault.</span>\n<span class=\"mi\">0xf7613d07</span> <span class=\"k\">in</span> <span class=\"n\">lean_inc</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"bp\">=</span><span class=\"mi\">0x9d517858</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean.h</span><span class=\"o\">:</span><span class=\"mi\">449</span>\n<span class=\"mi\">449</span>     <span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"n\">void</span> <span class=\"n\">lean_inc</span><span class=\"o\">(</span><span class=\"n\">lean_object</span> <span class=\"bp\">*</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">lean_is_scalar</span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">))</span> <span class=\"n\">lean_inc_ref</span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">bt</span>\n<span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0xf7613d07</span> <span class=\"k\">in</span> <span class=\"n\">lean_inc</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"bp\">=</span><span class=\"mi\">0x9d517858</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean.h</span><span class=\"o\">:</span><span class=\"mi\">449</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0xf7614d5f</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">inc</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"bp\">=</span><span class=\"mi\">0x9d517858</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">object.h</span><span class=\"o\">:</span><span class=\"mi\">54</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0xf7616dfb</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">object_ref</span><span class=\"o\">::</span><span class=\"n\">object_ref</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">=</span><span class=\"mi\">0x56649a9c</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">=...</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">object_ref.h</span><span class=\"o\">:</span><span class=\"mi\">22</span>\n<span class=\"bp\">#</span><span class=\"mi\">3</span>  <span class=\"mi\">0xf761562b</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">=</span><span class=\"mi\">0x56649a9c</span><span class=\"o\">,</span> <span class=\"n\">other</span><span class=\"bp\">=...</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">util</span><span class=\"bp\">/</span><span class=\"n\">name.h</span><span class=\"o\">:</span><span class=\"mi\">76</span>\n<span class=\"bp\">#</span><span class=\"mi\">4</span>  <span class=\"mi\">0xf77dd2a4</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">frame</span><span class=\"o\">::</span><span class=\"n\">frame</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">=</span><span class=\"mi\">0x56649a9c</span><span class=\"o\">,</span> <span class=\"n\">mFn</span><span class=\"bp\">=...</span><span class=\"o\">,</span> <span class=\"n\">mArgBp</span><span class=\"bp\">=</span><span class=\"mi\">6173</span><span class=\"o\">,</span> <span class=\"n\">mJpBp</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">compiler</span><span class=\"bp\">/</span><span class=\"n\">ir_interpreter.cpp</span><span class=\"o\">:</span><span class=\"mi\">339</span>\n<span class=\"bp\">#</span><span class=\"mi\">5</span>  <span class=\"mi\">0xf77dd267</span> <span class=\"k\">in</span> <span class=\"n\">__gnu_cxx</span><span class=\"o\">::</span><span class=\"n\">new_allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">frame</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">construct</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">frame</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">=</span><span class=\"mi\">0xffff5c78</span><span class=\"o\">,</span>\n    <span class=\"n\">__p</span><span class=\"bp\">=</span><span class=\"mi\">0x56649a9c</span><span class=\"o\">,</span> <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">gcc</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"mi\">11</span><span class=\"bp\">/../../../../</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"mi\">11</span><span class=\"bp\">/</span><span class=\"n\">ext</span><span class=\"bp\">/</span><span class=\"n\">new_allocator.h</span><span class=\"o\">:</span><span class=\"mi\">162</span>\n<span class=\"bp\">#</span><span class=\"mi\">6</span>  <span class=\"mi\">0xf77dce5b</span> <span class=\"k\">in</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">frame</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">construct</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">frame</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">__a</span><span class=\"bp\">=...</span><span class=\"o\">,</span>\n    <span class=\"n\">__p</span><span class=\"bp\">=</span><span class=\"mi\">0x56649a9c</span><span class=\"o\">,</span> <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">gcc</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"mi\">11</span><span class=\"bp\">/../../../../</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"mi\">11</span><span class=\"bp\">/</span><span class=\"n\">bits</span><span class=\"bp\">/</span><span class=\"n\">alloc_traits.h</span><span class=\"o\">:</span><span class=\"mi\">516</span>\n<span class=\"bp\">#</span><span class=\"mi\">7</span>  <span class=\"mi\">0xf77dcd2f</span> <span class=\"k\">in</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">frame</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">frame</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">emplace_back</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">=</span><span class=\"mi\">0xffff5c78</span><span class=\"o\">,</span>\n    <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">__args</span><span class=\"bp\">=@</span><span class=\"mi\">0xff90b1a4</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">gcc</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"mi\">11</span><span class=\"bp\">/../../../../</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"mi\">11</span><span class=\"bp\">/</span><span class=\"n\">bits</span><span class=\"bp\">/</span><span class=\"n\">vector.tcc</span><span class=\"o\">:</span><span class=\"mi\">115</span>\n<span class=\"bp\">#</span><span class=\"mi\">8</span>  <span class=\"mi\">0xf77d99dd</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">push_frame</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">=</span><span class=\"mi\">0xffff5c60</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">=...</span><span class=\"o\">,</span> <span class=\"n\">arg_bp</span><span class=\"bp\">=</span><span class=\"mi\">6173</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">compiler</span><span class=\"bp\">/</span><span class=\"n\">ir_interpreter.cpp</span><span class=\"o\">:</span><span class=\"mi\">744</span>\n<span class=\"bp\">#</span><span class=\"mi\">9</span>  <span class=\"mi\">0xf77e19d2</span> <span class=\"k\">in</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">call</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">=</span><span class=\"mi\">0xffff5c60</span><span class=\"o\">,</span> <span class=\"n\">fn</span><span class=\"bp\">=...</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"bp\">=...</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">compiler</span><span class=\"bp\">/</span><span class=\"n\">ir_interpreter.cpp</span><span class=\"o\">:</span><span class=\"mi\">878</span>\n</code></pre></div>",
        "id": 391170928,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694784556
    },
    {
        "content": "<p>I'm not sure if it's essentially the same thing, but when debugging <code>307.lean</code> with Visual Studio, it got an assertion failed:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_int_to_nat</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lean_int_lt</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)));</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_is_scalar</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_big_int_to_nat</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I don't understand the code, but is it possible that some of the<code>size_t</code>s inside the <code>lean_box</code> function should actually be <code>uint64</code> instead? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 391177061,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694786243
    },
    {
        "content": "<p>Leaving the office now... will continue tomorrow :)</p>",
        "id": 391177188,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694786274
    },
    {
        "content": "<p>I just tried <code>listtostring.lean</code> in debug mode, it doesn't seem to terminate (but didn't crash). I waited 2 minutes I think</p>",
        "id": 391178854,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694786679
    },
    {
        "content": "<p>Oops, as soon as I come back to my PC, I got<code>Stackoverflow detected. Aborting.</code></p>",
        "id": 391179024,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694786718
    },
    {
        "content": "<p>Really leaving now :)</p>",
        "id": 391179109,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694786747
    },
    {
        "content": "<p>Ok, I think the box/unboxing mechanism can explain why <code>#eval INT32_MIN / -2</code> yields the wrong result. As I understand it, <code>box</code> will shift all bits to the left and add a one at the end to mark the resulting lean object as a scalar. <code>unbox</code> will take such a scalar lean object and shift all bits back to the right to yield the original value. With 64 bit, boxing and unboxing an integer (32bit) is no big deal. There is lots of space to shift into. On 32bit however, boxing and unboxing will erase the first bit of the integer.</p>",
        "id": 391191922,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694789640
    },
    {
        "content": "<p>Well, it's defintely more complicated than what I wrote above, but might be related to this.</p>",
        "id": 391202979,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694792232
    },
    {
        "content": "<p>Okay, I found the issue that causes <code>#eval INT32_MIN / -2</code> to fail. The constant <code>LEAN_MAX_SMALL_INT</code> was too large by one. The integer <code>1 &lt;&lt; 30</code> uses all 32 bits. If you shift it left and then right (during boxing/unboxing), the left-most bit will become a <code>1</code>. Here is a fix:<br>\n<a href=\"https://github.com/abentkamp/lean4/commit/24634b130ce153796764937d6cf106919d8481e1\">https://github.com/abentkamp/lean4/commit/24634b130ce153796764937d6cf106919d8481e1</a></p>",
        "id": 391245869,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694805284
    },
    {
        "content": "<p>Unfortunately, the segfaults are still there.</p>",
        "id": 391245917,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694805299
    },
    {
        "content": "<p>Do we have a -m32 pipeline to run these tests？</p>",
        "id": 391297916,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694826371
    },
    {
        "content": "<p>Ok, great. I hope I'll find sometime to tackle this segfault. Do you have any pointers to some docs about how IR interpreter works? My current knowledge about <code>lean4</code> is too poor... <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span></p>",
        "id": 391304200,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694828691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/391297916\">said</a>:</p>\n<blockquote>\n<p>Do we have a -m32 pipeline to run these tests？</p>\n</blockquote>\n<p>You mean github CI job? Current it doesn't build 32-bit binary (and that's what we're currently working on)</p>",
        "id": 391304403,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694828760
    },
    {
        "content": "<p>You can try this if you want to run 32-bit tests. <span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span> </p>\n<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/391134303\">said</a>:</p>\n<blockquote>\n<p>I've written a GitHub action that can reproduce <span class=\"user-mention silent\" data-user-id=\"648305\">Rujia Liu</span> 's achievement: <a href=\"https://github.com/abentkamp/lean4/blob/wasm-experiments/.github/workflows/wasm.yml\">https://github.com/abentkamp/lean4/blob/wasm-experiments/.github/workflows/wasm.yml</a><br>\nThe output is here: <a href=\"https://github.com/abentkamp/lean4/actions/runs/6196384753/job/16822920883\">https://github.com/abentkamp/lean4/actions/runs/6196384753/job/16822920883</a></p>\n</blockquote>",
        "id": 391304836,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694828926
    },
    {
        "content": "<p>Some progress: the problematic line is <code>#eval toString (List.range 100000).toArray</code> which got stack overflow. First I realized that I forgot the manually increase the stack size, which is required on Windows. I set it to 512MB and 32-bit binary passed the test. However, 64-bit binary failed. I increased the stack size to 1GB and it passed the test too. It's a bit surprising that this program requires such a big stack... Anyway, it looks like the program itself is ok, maybe on linux the stack size is set differently in 32/64 bit system?</p>",
        "id": 391314071,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694833033
    },
    {
        "content": "<p>I've skimmed over my remaining 32-bit failing tests: <code>updateExprIssue</code>, <code>csimpAttr</code>, <code>unhygienicCode</code>. It looks like all are caused by <code>stdout</code> and <code>stderr</code> \"unsynchornized\". If we only compare data sent to <code>stdout</code> or <code>stderr</code>, Expected and produced are identical. However, the combined <code>.expected.out</code> and <code>.produced.out</code> are mixing stdout/stderr output in two different ways. But maybe it only occurs in <code>msys2</code> because even my vs2022 build cannot reproduce this. So I don't have many things I can easily do now.</p>\n<p>Which other tests are failing in your local machine? <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span></p>",
        "id": 391319809,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694835867
    },
    {
        "content": "<p>I added a test run to CI: <a href=\"https://github.com/abentkamp/lean4/actions/runs/6206411798/job/16850644397\">https://github.com/abentkamp/lean4/actions/runs/6206411798/job/16850644397</a></p>",
        "id": 391351190,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694854530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"648305\">@Rujia Liu</span>  How exactly do you increase the stack size?</p>",
        "id": 391351242,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694854562
    },
    {
        "content": "<p>I'm using MSVC, so I opened project property dialog, in <code>Linker/System</code>, changed both <code>Stack Reserve Size</code> and <code>Stack Commit Size</code>. But since you're using linux, this won't work for you. You need to use <code>ulimit</code>? In the current test code, it uses <code>ulimit -s 2048</code> I think. And later I found it seems to use considerably less stack in <code>release</code>, but didn't measure.</p>",
        "id": 391352649,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694855394
    },
    {
        "content": "<p>I also changed the constant used in<code>get_stack_size</code> in <code>stackinfo.cpp</code> to make sure it returns the same size as I set in the dialog, but in linux it uses <code>getrlimit</code> so it should work automatically.</p>",
        "id": 391353056,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694855639
    },
    {
        "content": "<p>Hm, increasing ulimit does not seem to help</p>",
        "id": 391354342,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694856448
    },
    {
        "content": "<p>Does <code>#eval toString (List.range 10).toArray</code> crash?</p>",
        "id": 391354505,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694856535
    },
    {
        "content": "<p>No, for small numbers, it works</p>",
        "id": 391354651,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694856619
    },
    {
        "content": "<p>I guess <code>tests/compiler/StackOverflow.lean</code> is also relevant here. It also leads to a segfault, when it should actually report stack overflow.</p>",
        "id": 391354902,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694856792
    },
    {
        "content": "<p>stack overflow detection seems not to work</p>",
        "id": 391354910,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694856802
    },
    {
        "content": "<p>I disabled the detection with emscripten but in native 32-bit it is not. Or I made a mistake and always disabled it? And if you can kindly provide a <code>Dockerfile</code> that bulid/test everything, I can play with it more easily. I forgot how to write <code>Dockerfile</code> for a long time (but remembers how to use it)</p>",
        "id": 391355250,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694856981
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">FROM</span> <span class=\"n\">ubuntu</span><span class=\"o\">:</span><span class=\"n\">latest</span>\n<span class=\"n\">WORKDIR</span> <span class=\"bp\">/</span><span class=\"n\">lean4</span>\n<span class=\"n\">COPY</span> <span class=\"bp\">.</span> <span class=\"bp\">.</span>\n\n<span class=\"n\">RUN</span> <span class=\"n\">apt</span><span class=\"bp\">-</span><span class=\"n\">get</span> <span class=\"n\">update</span>\n<span class=\"n\">RUN</span> <span class=\"n\">apt</span><span class=\"bp\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"n\">clang</span> <span class=\"n\">ccache</span> <span class=\"n\">cmake</span> <span class=\"n\">gcc</span><span class=\"bp\">-</span><span class=\"n\">multilib</span> <span class=\"n\">g</span><span class=\"bp\">++-</span><span class=\"n\">multilib</span>\n\n\n<span class=\"n\">RUN</span> <span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">WORKDIR</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n\n<span class=\"n\">RUN</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"bp\">*</span>\n<span class=\"n\">RUN</span> <span class=\"n\">cmake</span> <span class=\"bp\">../..</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_C_COMPILER_WORKS</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_USE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEAN_EXTRA_CXX_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32'</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEANC_OPTS</span><span class=\"bp\">='-</span><span class=\"n\">m32'</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_CXX_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_C_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_COMPILER_WORKS</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DLEAN_EXTRA_CXX_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32'</span> <span class=\"bp\">-</span><span class=\"n\">DLEANC_OPTS</span><span class=\"bp\">='-</span><span class=\"n\">m32'</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_CXX_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"bp\">||</span> <span class=\"n\">true</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"bp\">||</span> <span class=\"n\">true</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"bp\">||</span> <span class=\"n\">true</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"bp\">||</span> <span class=\"n\">true</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"bp\">||</span> <span class=\"n\">true</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"bp\">||</span> <span class=\"n\">true</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"bp\">||</span> <span class=\"n\">true</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span>\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"bp\">-</span><span class=\"n\">j4</span> <span class=\"n\">test</span> <span class=\"bp\">||</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>It assumes to be put into the <code>lean4</code> root directory</p>",
        "id": 391359229,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1694858802
    },
    {
        "content": "<p>Thanks! Let me try</p>",
        "id": 391362125,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694860596
    },
    {
        "content": "<p>Since this is related to portability, I think lean is somehow doing the same “bad” thing as rust by assuming size_t should be able to hold pointers. This is not the case on some emerging architectures (<a href=\"https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-947.pdf\">https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-947.pdf</a>). I am not sure how rust deals it actually, their provenance API doc is actually aware of such architectures.</p>",
        "id": 391383947,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694874581
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span> , I'm not aware of such architectures. In fact I've just helped porting another programming language implementation in rust, to 32-bit, by changing some memory layout and a few <code>usize</code> to <code>u64</code>, which is just as \"bad\"... Any link to the provenance API are you talking about? I've missed that.</p>",
        "id": 391390397,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694877865
    },
    {
        "content": "<p>FYI, <a href=\"https://github.com/rust-lang/rust/issues/95228\">https://github.com/rust-lang/rust/issues/95228</a>, rust is introducing the concept of provenance to restrict the legal operations on pointer arithmetics and casting.</p>",
        "id": 391390739,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694878015
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 391391154,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1694878205
    },
    {
        "content": "<p>Quite a few of the tests seem to fail because of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">skipping</span> <span class=\"n\">incompatible</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span> <span class=\"n\">when</span> <span class=\"n\">searching</span> <span class=\"n\">for</span> <span class=\"bp\">-</span><span class=\"n\">lleancpp</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"bp\">-</span><span class=\"n\">lleancpp</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">skipping</span> <span class=\"n\">incompatible</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libLean.a</span> <span class=\"n\">when</span> <span class=\"n\">searching</span> <span class=\"n\">for</span> <span class=\"bp\">-</span><span class=\"n\">lLean</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"bp\">-</span><span class=\"n\">lLean</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n<span class=\"n\">clang</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"o\">)</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"n\">C</span> <span class=\"n\">file</span> <span class=\"n\">bigctor.lean.c</span>\n</code></pre></div>\n<p>I am guessing clang is accidentally called for 64bit somewhere...</p>",
        "id": 392263761,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695281467
    },
    {
        "content": "<p>Ok, I fixed this issue: <a href=\"https://github.com/abentkamp/lean4/commit/48b6aa673673861f5fc0c2bf675b28d0fa769b4b\">https://github.com/abentkamp/lean4/commit/48b6aa673673861f5fc0c2bf675b28d0fa769b4b</a></p>",
        "id": 393016527,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695649095
    },
    {
        "content": "<p>The segfault seems to occur on any lean program that runs long enough (maybe ~2000 instructions), called via <code>lean --run</code>. And it occurs completely nondeterministically, sometimes earlier, sometimes later. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Which parts of Lean would show this nondeterministic behavior? I have already tried disabling the small object allocator, but that did not help.</p>",
        "id": 393172800,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695711131
    },
    {
        "content": "<p>I have no idea I'm afraid. There shouldn't be any nondeterminism by default I would have thought.</p>",
        "id": 393173520,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695711495
    },
    {
        "content": "<p>I think I have made some progress. <code>valgrind</code> gives me reliably the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span> <span class=\"mi\">2</span> <span class=\"n\">errors</span> <span class=\"k\">in</span> <span class=\"n\">context</span> <span class=\"mi\">1</span> <span class=\"n\">of</span> <span class=\"mi\">1</span><span class=\"o\">:</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span> <span class=\"n\">Invalid</span> <span class=\"n\">read</span> <span class=\"n\">of</span> <span class=\"n\">size</span> <span class=\"mi\">4</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"n\">at</span> <span class=\"mi\">0x5BA30CA</span><span class=\"o\">:</span> <span class=\"n\">l_Array_forInUnsafe_loop___at_Lean_importModulesCore___spec__1___lambda__1</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x5BA40C2</span><span class=\"o\">:</span> <span class=\"n\">l_Array_forInUnsafe_loop___at_Lean_importModulesCore___spec__1___lambda__2</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x5BA4484</span><span class=\"o\">:</span> <span class=\"n\">l_Array_forInUnsafe_loop___at_Lean_importModulesCore___spec__1</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x5BA2E19</span><span class=\"o\">:</span> <span class=\"n\">l_Lean_importModulesCore</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x5BA4B10</span><span class=\"o\">:</span> <span class=\"n\">l_Lean_importModulesCore___boxed</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x8485689</span><span class=\"o\">:</span> <span class=\"n\">lean_apply_2</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x5B8A6C5</span><span class=\"o\">:</span> <span class=\"n\">l_Lean_ImportStateM_run___rarg</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x84837DA</span><span class=\"o\">:</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x577CAB4</span><span class=\"o\">:</span> <span class=\"n\">l_EStateM_bind___rarg</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x84837DA</span><span class=\"o\">:</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x6E37C1C</span><span class=\"o\">:</span> <span class=\"n\">l_Lean_withImporting___rarg</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x5BAB0C3</span><span class=\"o\">:</span> <span class=\"n\">l_Lean_importModules___lambda__2___boxed</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x8485647</span><span class=\"o\">:</span> <span class=\"n\">lean_apply_2</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x84837DA</span><span class=\"o\">:</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x6DBA913</span><span class=\"o\">:</span> <span class=\"n\">l_Lean_profileitIOUnsafe___rarg___lambda__1</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x6DBAA60</span><span class=\"o\">:</span> <span class=\"n\">l_Lean_profileitIOUnsafe___rarg___lambda__1___boxed</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x84837F7</span><span class=\"o\">:</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x8393B4A</span><span class=\"o\">:</span> <span class=\"n\">lean_profileit</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x6DBAB00</span><span class=\"o\">:</span> <span class=\"n\">l_Lean_profileitIOUnsafe___rarg</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>    <span class=\"kd\">by</span> <span class=\"mi\">0x5BAB2B5</span><span class=\"o\">:</span> <span class=\"n\">lean_import_modules</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>  <span class=\"n\">Address</span> <span class=\"mi\">0x45f3dd5056e0f198</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">stack'd</span><span class=\"o\">,</span> <span class=\"n\">malloc'd</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">recently</span><span class=\"o\">)</span> <span class=\"n\">free'd</span>\n<span class=\"bp\">==</span><span class=\"mi\">327284</span><span class=\"bp\">==</span>\n</code></pre></div>",
        "id": 393187095,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695717328
    },
    {
        "content": "<p>And you're running it on compatible .oleans? I've lost track of what the current setup is</p>",
        "id": 393192257,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695719084
    },
    {
        "content": "<p>The setup is simply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cmake</span> <span class=\"bp\">../..</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_COMPILER_WORKS</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_USE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEAN_EXTRA_CXX_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g'</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEANC_OPTS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g'</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_CXX_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_C_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DLEAN_EXTRA_CXX_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g'</span> <span class=\"bp\">-</span><span class=\"n\">DLEANC_OPTS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g'</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_CXX_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span>\n</code></pre></div>\n<p>But I need to run <code>make</code> a couple of times because the segfaults occur randomly while building oleans.</p>",
        "id": 393193586,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695719614
    },
    {
        "content": "<p>So yes, the oleans should be compatible.</p>",
        "id": 393193695,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695719651
    },
    {
        "content": "<p>Yes, that looks good so far. One thing worth trying is to use the address sanitizer like we do in CI <a href=\"https://github.com/leanprover/lean4/blob/e6fe3bee71f359c866a29766f774864577099778/.github/workflows/ci.yml#L132\">https://github.com/leanprover/lean4/blob/e6fe3bee71f359c866a29766f774864577099778/.github/workflows/ci.yml#L132</a></p>",
        "id": 393195286,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695720279
    },
    {
        "content": "<p>And just to be sure, it might be good to replace the <code>mmap()</code> call with <code>NULL</code> for now</p>",
        "id": 393196087,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695720602
    },
    {
        "content": "<p>where is the mmap call?</p>",
        "id": 393196479,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695720755
    },
    {
        "content": "<p>I added the santize options:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cmake</span> <span class=\"bp\">../..</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_COMPILER_WORKS</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_USE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEANC_OPTS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g'</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_CXX_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE0_CMAKE_C_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span> <span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span>  <span class=\"bp\">-</span><span class=\"n\">DCMAKE_CXX_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_COMPILER</span><span class=\"bp\">=</span><span class=\"n\">clang</span> <span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DLEAN_EXTRA_CXX_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"bp\">-</span><span class=\"n\">fsanitize</span><span class=\"bp\">=</span><span class=\"n\">address</span><span class=\"o\">,</span><span class=\"n\">undefined'</span><span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DLEANC_EXTRA_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"bp\">-</span><span class=\"n\">fsanitize</span><span class=\"bp\">=</span><span class=\"n\">address</span><span class=\"o\">,</span><span class=\"n\">undefined</span> <span class=\"bp\">-</span><span class=\"n\">fsanitize</span><span class=\"bp\">-</span><span class=\"n\">link</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">++-</span><span class=\"n\">runtime'</span><span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DSMALL_ALLOCATOR</span><span class=\"bp\">=</span><span class=\"n\">OFF</span><span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DBSYMBOLIC</span><span class=\"bp\">=</span><span class=\"n\">OFF</span><span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEAN_EXTRA_CXX_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"bp\">-</span><span class=\"n\">fsanitize</span><span class=\"bp\">=</span><span class=\"n\">address</span><span class=\"o\">,</span><span class=\"n\">undefined'</span><span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DSTAGE0_LEANC_EXTRA_FLAGS</span><span class=\"bp\">='-</span><span class=\"n\">m32</span> <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"bp\">-</span><span class=\"n\">fsanitize</span><span class=\"bp\">=</span><span class=\"n\">address</span><span class=\"o\">,</span><span class=\"n\">undefined</span> <span class=\"bp\">-</span><span class=\"n\">fsanitize</span><span class=\"bp\">-</span><span class=\"n\">link</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">++-</span><span class=\"n\">runtime'</span><span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DSTAGE0_SMALL_ALLOCATOR</span><span class=\"bp\">=</span><span class=\"n\">OFF</span><span class=\"bp\">\\</span>\n<span class=\"bp\">-</span><span class=\"n\">DSTAGE0_BSYMBOLIC</span><span class=\"bp\">=</span><span class=\"n\">OFF</span>\n</code></pre></div>\n<p>Now I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">skipping</span> <span class=\"n\">incompatible</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span> <span class=\"n\">when</span> <span class=\"n\">searching</span> <span class=\"n\">for</span> <span class=\"bp\">-</span><span class=\"n\">lleancpp</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"bp\">-</span><span class=\"n\">lleancpp</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div>",
        "id": 393196620,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695720815
    },
    {
        "content": "<p>Oh, I see, you mean this mmap call:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">ifndef</span> <span class=\"n\">LEAN_EMSCRIPTEN</span>\n         <span class=\"n\">buffer</span> <span class=\"bp\">=</span> <span class=\"n\">static_cast</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span> <span class=\"bp\">*&gt;</span><span class=\"o\">(</span><span class=\"n\">mmap</span><span class=\"o\">(</span><span class=\"n\">base_addr</span><span class=\"o\">,</span> <span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">PROT_READ</span><span class=\"o\">,</span> <span class=\"n\">MAP_PRIVATE</span><span class=\"o\">,</span> <span class=\"n\">fd</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"bp\">#</span><span class=\"n\">endif</span>\n</code></pre></div>",
        "id": 393197186,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695721045
    },
    {
        "content": "<p>Ok, removing <code>mmap</code> fixed something, but not everything.</p>",
        "id": 393198456,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695721546
    },
    {
        "content": "<p>The test <code>tests/compiler/StackOverflow.lean</code> that I have been using to reproduce the segfault now passes reliably.</p>",
        "id": 393198647,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695721604
    },
    {
        "content": "<p>During the build, there are still segfaults though.</p>",
        "id": 393198694,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695721620
    },
    {
        "content": "<p>Mmh, I guess that's progress? Looks like there's cross-compilation troubles with the sanitizers, too bad</p>",
        "id": 393199327,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695721828
    },
    {
        "content": "<p>There are still some failing tests, but none due to Segfault. That will make it harder to debug :-)</p>",
        "id": 393201907,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695722737
    },
    {
        "content": "<p>I can reproduce the segfault that occurs during build, but it is very rare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"bp\">..</span><span class=\"mi\">1000</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"k\">do</span>  <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">DwarningAsError</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"s2\">\"../build/release/stage1/lib/lean/Lean/Elab/Structure.olean\"</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"s2\">\"../build/release/stage1/lib/lean/Lean/Elab/Structure.ilean\"</span> <span class=\"c1\">--c=\"../build/release/stage1/lib/temp/Lean/Elab/Structure.c.tmp\" Lean/Elab/Structure.lean ; done</span>\n</code></pre></div>",
        "id": 393224621,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695731990
    },
    {
        "content": "<p>although I run it 1000 times, I get only a few segfaults.</p>",
        "id": 393224726,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695732013
    },
    {
        "content": "<p><code>Lean/Elab/Structure</code> is not the only file that works, but not all files show this behavior.</p>",
        "id": 393224803,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695732048
    },
    {
        "content": "<p>Does <code>rr</code> support recording in this context?</p>",
        "id": 393227671,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695733054
    },
    {
        "content": "<p>Sounds good, I should try that</p>",
        "id": 393232064,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695734469
    },
    {
        "content": "<p>By running valgrind again and again, I finally got a segfault:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Memcheck</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">memory</span> <span class=\"n\">error</span> <span class=\"n\">detector</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Copyright</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"mi\">2002</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">GNU</span> <span class=\"n\">GPL'd</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">Julian</span> <span class=\"n\">Seward</span> <span class=\"n\">et</span> <span class=\"n\">al.</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Using</span> <span class=\"n\">Valgrind</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">and</span> <span class=\"n\">LibVEX</span><span class=\"bp\">;</span> <span class=\"n\">rerun</span> <span class=\"k\">with</span> <span class=\"bp\">-</span><span class=\"n\">h</span> <span class=\"n\">for</span> <span class=\"n\">copyright</span> <span class=\"n\">info</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Command</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alex</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">Structure.lean</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Stack</span> <span class=\"n\">overflow</span> <span class=\"k\">in</span> <span class=\"n\">thread</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">can't</span> <span class=\"n\">grow</span> <span class=\"n\">stack</span> <span class=\"n\">to</span> <span class=\"mi\">0xfed07000</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Stack</span> <span class=\"n\">overflow</span> <span class=\"k\">in</span> <span class=\"n\">thread</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">can't</span> <span class=\"n\">grow</span> <span class=\"n\">stack</span> <span class=\"n\">to</span> <span class=\"mi\">0xfed07000</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Process</span> <span class=\"n\">terminating</span> <span class=\"k\">with</span> <span class=\"n\">default</span> <span class=\"n\">action</span> <span class=\"n\">of</span> <span class=\"n\">signal</span> <span class=\"mi\">11</span> <span class=\"o\">(</span><span class=\"n\">SIGSEGV</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>  <span class=\"n\">Access</span> <span class=\"n\">not</span> <span class=\"n\">within</span> <span class=\"n\">mapped</span> <span class=\"n\">region</span> <span class=\"n\">at</span> <span class=\"n\">address</span> <span class=\"mi\">0xFED07FF8</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Stack</span> <span class=\"n\">overflow</span> <span class=\"k\">in</span> <span class=\"n\">thread</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">can't</span> <span class=\"n\">grow</span> <span class=\"n\">stack</span> <span class=\"n\">to</span> <span class=\"mi\">0xfed07000</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>    <span class=\"n\">at</span> <span class=\"mi\">0x73D0C52</span><span class=\"o\">:</span> <span class=\"n\">l___private_Lean_Meta_InferType_0__Lean_Meta_inferMVarType</span> <span class=\"o\">(</span><span class=\"bp\">../</span><span class=\"n\">stdlib</span><span class=\"bp\">//</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">InferType.c</span><span class=\"o\">:</span><span class=\"mi\">5127</span><span class=\"o\">)</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>  <span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">believe</span> <span class=\"n\">this</span> <span class=\"n\">happened</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">result</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">stack</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>  <span class=\"n\">overflow</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">program's</span> <span class=\"n\">main</span> <span class=\"n\">thread</span> <span class=\"o\">(</span><span class=\"n\">unlikely</span> <span class=\"n\">but</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>  <span class=\"n\">possible</span><span class=\"o\">),</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">try</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">the</span> <span class=\"n\">size</span> <span class=\"n\">of</span> <span class=\"n\">the</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>  <span class=\"n\">main</span> <span class=\"n\">thread</span> <span class=\"n\">stack</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"c1\">--main-stacksize= flag.</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>  <span class=\"n\">The</span> <span class=\"n\">main</span> <span class=\"n\">thread</span> <span class=\"n\">stack</span> <span class=\"n\">size</span> <span class=\"n\">used</span> <span class=\"k\">in</span> <span class=\"n\">this</span> <span class=\"n\">run</span> <span class=\"n\">was</span> <span class=\"mi\">8388608</span><span class=\"bp\">.</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">HEAP</span> <span class=\"n\">SUMMARY</span><span class=\"o\">:</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>     <span class=\"k\">in</span> <span class=\"n\">use</span> <span class=\"n\">at</span> <span class=\"n\">exit</span><span class=\"o\">:</span> <span class=\"mi\">39</span><span class=\"o\">,</span><span class=\"mi\">344</span><span class=\"o\">,</span><span class=\"mi\">475</span> <span class=\"n\">bytes</span> <span class=\"k\">in</span> <span class=\"mi\">517</span><span class=\"o\">,</span><span class=\"mi\">937</span> <span class=\"n\">blocks</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>   <span class=\"n\">total</span> <span class=\"n\">heap</span> <span class=\"n\">usage</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">899</span><span class=\"o\">,</span><span class=\"mi\">263</span> <span class=\"n\">allocs</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">381</span><span class=\"o\">,</span><span class=\"mi\">326</span> <span class=\"n\">frees</span><span class=\"o\">,</span> <span class=\"mi\">80</span><span class=\"o\">,</span><span class=\"mi\">871</span><span class=\"o\">,</span><span class=\"mi\">924</span> <span class=\"n\">bytes</span> <span class=\"n\">allocated</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">LEAK</span> <span class=\"n\">SUMMARY</span><span class=\"o\">:</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>    <span class=\"n\">definitely</span> <span class=\"n\">lost</span><span class=\"o\">:</span> <span class=\"mi\">229</span> <span class=\"n\">bytes</span> <span class=\"k\">in</span> <span class=\"mi\">11</span> <span class=\"n\">blocks</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>    <span class=\"n\">indirectly</span> <span class=\"n\">lost</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">060</span> <span class=\"n\">bytes</span> <span class=\"k\">in</span> <span class=\"mi\">20</span> <span class=\"n\">blocks</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>      <span class=\"n\">possibly</span> <span class=\"n\">lost</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"n\">blocks</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>    <span class=\"n\">still</span> <span class=\"n\">reachable</span><span class=\"o\">:</span> <span class=\"mi\">39</span><span class=\"o\">,</span><span class=\"mi\">343</span><span class=\"o\">,</span><span class=\"mi\">186</span> <span class=\"n\">bytes</span> <span class=\"k\">in</span> <span class=\"mi\">517</span><span class=\"o\">,</span><span class=\"mi\">906</span> <span class=\"n\">blocks</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>                       <span class=\"n\">of</span> <span class=\"n\">which</span> <span class=\"n\">reachable</span> <span class=\"n\">via</span> <span class=\"n\">heuristic</span><span class=\"o\">:</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>                         <span class=\"n\">newarray</span>           <span class=\"o\">:</span> <span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">406</span><span class=\"o\">,</span><span class=\"mi\">059</span> <span class=\"n\">bytes</span> <span class=\"k\">in</span> <span class=\"mi\">473</span><span class=\"o\">,</span><span class=\"mi\">016</span> <span class=\"n\">blocks</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>         <span class=\"n\">suppressed</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">bytes</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"n\">blocks</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">Rerun</span> <span class=\"k\">with</span> <span class=\"c1\">--leak-check=full to see details of leaked memory</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">For</span> <span class=\"n\">lists</span> <span class=\"n\">of</span> <span class=\"n\">detected</span> <span class=\"n\">and</span> <span class=\"n\">suppressed</span> <span class=\"n\">errors</span><span class=\"o\">,</span> <span class=\"n\">rerun</span> <span class=\"k\">with</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">s</span>\n<span class=\"bp\">==</span><span class=\"mi\">650680</span><span class=\"bp\">==</span> <span class=\"n\">ERROR</span> <span class=\"n\">SUMMARY</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">errors</span> <span class=\"k\">from</span> <span class=\"mi\">0</span> <span class=\"n\">contexts</span> <span class=\"o\">(</span><span class=\"n\">suppressed</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"k\">from</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">Segmentation</span> <span class=\"n\">fault</span>\n</code></pre></div>",
        "id": 393317597,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695758581
    },
    {
        "content": "<p>It doesn't tell me much, though</p>",
        "id": 393317650,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695758599
    },
    {
        "content": "<p>Could this have something to do with the stack colliding into a loaded olean file?</p>",
        "id": 393317908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695758677
    },
    {
        "content": "<p>Ah, I assume you disabled mmap in stage 1 (i.e. <code>src/</code>) only?</p>",
        "id": 393319568,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695759070
    },
    {
        "content": "<p>Yes, thanks :-)</p>",
        "id": 393321346,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695759497
    },
    {
        "content": "<p>So 32bit build is working now?</p>",
        "id": 393326168,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695761208
    },
    {
        "content": "<p>We'll see tomorrow. Going to sleep now.</p>",
        "id": 393331579,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695763116
    },
    {
        "content": "<p>Yes, no more segfaults while building <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 393402734,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695796114
    },
    {
        "content": "<p>Okay, I've also managed to build the native 32bit binary in stage0 and then wasm in stage1: <a href=\"https://github.com/abentkamp/lean4/actions/runs/6324555224/job/17174289560\">https://github.com/abentkamp/lean4/actions/runs/6324555224/job/17174289560</a></p>",
        "id": 393469783,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695814874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  I assume you would like me to intergate the ci into the \"matrix\" of <code>ci.yml</code>? Is there a smart way to test it on my fork?</p>",
        "id": 393470075,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695814981
    },
    {
        "content": "<p>Yes please! I think you can push it to your own master as well, but feel free to use the PR for it</p>",
        "id": 393470336,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695815098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I get this error, which I believe is due to the usage of Nix in the CI:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">bin_app.cpp</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span>\n<span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">bin_app.h</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span>\n<span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">kernel</span><span class=\"bp\">/</span><span class=\"n\">expr.h</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span>\n<span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"n\">vwipws2crqcjxfzjyq9rjpk61iqf7pf</span><span class=\"bp\">-</span><span class=\"n\">gcc</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"n\">algorithm</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:</span>\n<span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"n\">vwipws2crqcjxfzjyq9rjpk61iqf7pf</span><span class=\"bp\">-</span><span class=\"n\">gcc</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"n\">bits</span><span class=\"bp\">/</span><span class=\"n\">stl_algobase.h</span><span class=\"o\">:</span><span class=\"mi\">59</span><span class=\"o\">:</span>\n<span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"n\">vwipws2crqcjxfzjyq9rjpk61iqf7pf</span><span class=\"bp\">-</span><span class=\"n\">gcc</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">unknown</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">bits</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++</span><span class=\"n\">config.h</span><span class=\"o\">:</span><span class=\"mi\">655</span><span class=\"o\">:</span>\n<span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"n\">vwipws2crqcjxfzjyq9rjpk61iqf7pf</span><span class=\"bp\">-</span><span class=\"n\">gcc</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">unknown</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">bits</span><span class=\"bp\">/</span><span class=\"n\">os_defines.h</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span>\n<span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">i29k9pvl90385mpsavifqvm4rag684dn</span><span class=\"bp\">-</span><span class=\"n\">glibc</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">37</span><span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">features.h</span><span class=\"o\">:</span><span class=\"mi\">515</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">i29k9pvl90385mpsavifqvm4rag684dn</span><span class=\"bp\">-</span><span class=\"n\">glibc</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">37</span><span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">stubs.h</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">fatal</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">stubs</span><span class=\"bp\">-</span><span class=\"mi\">32</span><span class=\"bp\">.</span><span class=\"n\">h'</span> <span class=\"n\">file</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"bp\">#</span> <span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">stubs</span><span class=\"bp\">-</span><span class=\"mi\">32</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>Without Nix, I could add the missing 32bit libraries using <code>sudo apt-get install gcc-multilib g++-multilib</code>. I tried <code>nix-env -i glibc_multi</code>, which I believe is the missing package, but it gives me <code>error: selector 'glibc_multi' matches no derivations</code>.</p>",
        "id": 393500924,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695824110
    },
    {
        "content": "<p>You probably want to search some <code>stdEnv</code> variants that support 32bit building.</p>",
        "id": 393502070,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695824302
    },
    {
        "content": "<p><a href=\"https://nixos.wiki/wiki/Packaging/32bit_Applications\">https://nixos.wiki/wiki/Packaging/32bit_Applications</a></p>",
        "id": 393502662,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695824404
    },
    {
        "content": "<p>yes it is called multiStdenv</p>",
        "id": 393502750,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695824414
    },
    {
        "content": "<p>Could you give me a command that I can add to get this stdEnv variant? I don't know anything about nix.</p>",
        "id": 393503921,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695824610
    },
    {
        "content": "<p>Sorry, in that case, I am not sure about <code>lean</code>'s infrastructure with <code>nix</code>. My guess is that you need to find something like <code>stdEnv.mkDerivation</code> in current CI configurations and change it accordingly.</p>",
        "id": 393506094,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695825061
    },
    {
        "content": "<p>ah, I see. Nix is installed via this Github action: <a href=\"https://github.com/cachix/install-nix-action\">https://github.com/cachix/install-nix-action</a></p>",
        "id": 393506681,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695825221
    },
    {
        "content": "<p>Maybe there is an option for this.</p>",
        "id": 393506712,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695825229
    },
    {
        "content": "<p>Feel free to try with <code>apt</code> for now. <code>shell: bash -euxo pipefail {0}</code> should effectively disable Nix for the job</p>",
        "id": 393510715,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695826270
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> Thanks, that is what I was going to do now :)</p>",
        "id": 393512177,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695826686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Would you like a 32bit native build in CI as well?</p>",
        "id": 393513658,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695827065
    },
    {
        "content": "<p>You mean as stage 1? I think we only care about 32 bit because of wasm to be honest :)</p>",
        "id": 393513881,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695827141
    },
    {
        "content": "<p>ok :-)</p>",
        "id": 393513946,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695827162
    },
    {
        "content": "<p>Getting <code>lean --server</code> to run might be trickier than I anticipated. There does not seem to be a straight-forward way to pass messages back and forth between WASM and JS as it is done in the json rpc protocol.</p>",
        "id": 393563262,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695845256
    },
    {
        "content": "<p>Wasn't that problem solved in the Lean 3 web editor?</p>",
        "id": 393564138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695845654
    },
    {
        "content": "<p>I think one can just pass <code>callback</code> for communication? <code>wasm</code> is capable of handling <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></p>",
        "id": 393565488,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695846301
    },
    {
        "content": "<p>Here is the relevant package <a href=\"https://github.com/leanprover/lean-client-js/tree/367b1de7e7c0da7730320b8a1d3057b0427ad42a/lean-client-js-browser\">in lean-client-js</a>.</p>",
        "id": 393567391,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695847199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Is there a mechanism that will convert my avalanche of commits into a single one or should I do that manually?</p>",
        "id": 393883050,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695975650
    },
    {
        "content": "<p><code>git reset</code>? :)</p>",
        "id": 393883616,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695975870
    },
    {
        "content": "<p>Ok :-) On mathlib, the bot takes care of that. (At least it did on mathlib 3).</p>",
        "id": 393884324,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695976155
    },
    {
        "content": "<p>Oh, if you mean whether we can squash the commits on merge, the answer is yes</p>",
        "id": 393885195,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695976451
    },
    {
        "content": "<p>Ok, I squashed them manually now :-)</p>",
        "id": 393901707,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695982240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <a href=\"https://github.com/leanprover/lean4/pull/2599\">https://github.com/leanprover/lean4/pull/2599</a> is ready for review.</p>",
        "id": 393901809,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695982296
    },
    {
        "content": "<p>Sorry for being quiet for so long. I was deeply buried in my company work, and congratulations to the PR!</p>",
        "id": 393918354,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1695989257
    },
    {
        "content": "<p>No problem, thanks for getting the basic build to work in the beginning!</p>",
        "id": 393923548,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695991313
    },
    {
        "content": "<p>I'm glad to hear that :)</p>",
        "id": 393924891,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1695991849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"648305\">@Rujia Liu</span> Could you comment on why leanshared is not working and we need to link Init, Lean and leancpp directly?</p>",
        "id": 393925824,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695992211
    },
    {
        "content": "<p>My network doesn't have github access now... I even don't remember I made a such change.</p>",
        "id": 393927653,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1695992868
    },
    {
        "content": "<p>Could you paste the change here?</p>",
        "id": 393927757,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1695992893
    },
    {
        "content": "<p>You didn't change anything in the code, but you gave us this follow up command:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"/src/lean4/build/release/stage0/leanc.sh\"</span> <span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">shell</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">shell.dir</span><span class=\"bp\">/</span><span class=\"n\">lean.cpp.o</span> <span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--whole-archive -lInit -lLean -lleancpp -lleanrt -rdynamic -o /src/lean4/build/release/stage0/bin/lean -s ERROR_ON_UNDEFINED_SYMBOLS=0 -s ASSERTIONS=1 -s WASM=1 -fexceptions -lnodefs.js -s MAIN_MODULE=1 -s LINKABLE=1 -s EXPORT_ALL=1 -s LLD_REPORT_UNDEFINED=1</span>\n</code></pre></div>",
        "id": 393928132,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695993033
    },
    {
        "content": "<p>note that it says <code>-lInit -lLean -lleancpp -lleanrt</code> instead of <code>-lleanshared</code>, which is done for other lean builds.</p>",
        "id": 393928279,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695993092
    },
    {
        "content": "<p>Ok, I remembered. I copied that command from the console, and changed some parameters. I didn't created that command from scratch. So probably both will work.</p>",
        "id": 393928428,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1695993134
    },
    {
        "content": "<p>But since that command is different, it should be affected from some emscripten-specific cmake options?</p>",
        "id": 393928795,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1695993275
    },
    {
        "content": "<p>Anyway, I think the best thing to do is just try the \"popular\" one, if it works, use it instead :)</p>",
        "id": 393929123,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1695993388
    },
    {
        "content": "<p>ok :-)</p>",
        "id": 393929150,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695993399
    },
    {
        "content": "<p>you might have copied these options from the build command of <code>leanshared</code> itself. For building <code>lean</code> the options you used were not used before.</p>",
        "id": 393929268,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695993441
    },
    {
        "content": "<p>Yes, of course. I didn't look very carefully when copying :)</p>",
        "id": 393930260,
        "sender_full_name": "Rujia Liu",
        "timestamp": 1695993833
    },
    {
        "content": "<p>I just assumed it was crucial because I had some issues with <code>leanshared</code> in my early experiments.</p>",
        "id": 393931739,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695994292
    },
    {
        "content": "<p>Okay, I think this is just not possible because leanshared links the C++ std library, but emscripten does not support side modules that link system libraries: <a href=\"https://emscripten.org/docs/compiling/Dynamic-Linking.html#overview-of-dynamic-linking\">https://emscripten.org/docs/compiling/Dynamic-Linking.html#overview-of-dynamic-linking</a></p>",
        "id": 393933568,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695994984
    },
    {
        "content": "<p>It seems that with Emscripten, there are two options for communication between client and server. We can choose either independently for server to client and for client to server messages. One option is stdin/stdout and the other option is direct function calls. The advantage of stdin/stdout is that we should be able to reuse more existing server code. The advantage of direct function calls might be that it's slightly faster if we can avoid encoding each message into a json string. </p>\n<p>The Lean3 version seems to use direct calls from client to server and stdout from server to client. </p>\n<p>Any opinions?</p>",
        "id": 394109155,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696103244
    },
    {
        "content": "<blockquote>\n<p>The advantage of direct function calls might be that it's slightly faster if we can avoid encoding each message into a json string. </p>\n</blockquote>\n<p>I would be surprised if this overhead was of any relevance in practice. It is orders of magnitude less work to do this than to elaborate a definition, for example, which the server does every few edits.</p>",
        "id": 394109229,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696103329
    },
    {
        "content": "<p>Yeah, I agree. I am wondering why the Lean3 version does not use stdin then. It seems like the way to go. </p>\n<p>However, I currently get a \"hardware fault\" error if I try to wait for input via stdin in Lean code compiled to wasm. But I am fairly confident that this can be fixed.</p>",
        "id": 394114721,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696109572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/393933568\">said</a>:</p>\n<blockquote>\n<p>Okay, I think this is just not possible because leanshared links the C++ std library, but emscripten does not support side modules that link system libraries: <a href=\"https://emscripten.org/docs/compiling/Dynamic-Linking.html#overview-of-dynamic-linking\">https://emscripten.org/docs/compiling/Dynamic-Linking.html#overview-of-dynamic-linking</a></p>\n</blockquote>\n<p>Doesn't that imply that leanshared should be the main module?</p>",
        "id": 394176220,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696150897
    },
    {
        "content": "<p>I just assumed that <code>lean</code> would be the main module, but you are right, leanshared should be the main module. Let's see if we can make that work.</p>",
        "id": 394242636,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696182673
    },
    {
        "content": "<p>Okay, it seems to be possible, but not easy. Do we really need to link dynamically? What is the benefit?</p>",
        "id": 394252635,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696188629
    },
    {
        "content": "<p>It's just a size optimization. If we're not planning to use Lake anyway, it doesn't matter</p>",
        "id": 394263576,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696194551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Any idea why this breaks the windows build?<br>\n<a href=\"https://github.com/leanprover/lean4/pull/2599/commits/ff0b8e13f09493923bc38a4e44a6c6dde95fe51d\">https://github.com/leanprover/lean4/pull/2599/commits/ff0b8e13f09493923bc38a4e44a6c6dde95fe51d</a></p>",
        "id": 394443563,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696255846
    },
    {
        "content": "<p>Okay, found the issue.</p>",
        "id": 394608500,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696330187
    },
    {
        "content": "<p>Yay! Merged into master!</p>",
        "id": 394784537,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696407521
    },
    {
        "content": "<p>Now <code>--server</code>... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 394784581,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696407543
    },
    {
        "content": "<p>Any ideas how to solve issue of the Watchdog/FileWorker separation? Probably, I should start with a version of the server that supports only a single file. That should be enough for most if not all use cases.</p>",
        "id": 394784832,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696407629
    },
    {
        "content": "<p>How far away are we from NNG being usable by 300 people at once? What other big tasks need to be done?</p>",
        "id": 394821999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696419865
    },
    {
        "content": "<p>We can now compile entire files in the browser, but we cannot run the interactive mode of Lean yet. Our current setup of the NNG is that it runs via the interactive editor, so we need the interactive mode to make the game work.</p>",
        "id": 394822463,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696420017
    },
    {
        "content": "<p>What is the current size of the wasm build?</p>",
        "id": 394827181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696421674
    },
    {
        "content": "<p>70 MB for the wasm-binary and the emscripten runtime<br>\n400 MB ilean+olean of Init+Lean+Lake<br>\nall uncompressed</p>",
        "id": 394831879,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696423297
    },
    {
        "content": "<p>That's actually a lot for a web app. Did you try <code>-Os</code> or <code>-DCMAKE_BUILD_TYPE=MinSizeRel</code>?</p>",
        "id": 394835140,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696424349
    },
    {
        "content": "<p>This is what I feared. It's great that you're doing all this, but it will probably remain unused until we can get that down to a reasonable size.</p>",
        "id": 394837140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696424902
    },
    {
        "content": "<p><code>-Os</code> and <code>-DCMAKE_BUILD_TYPE=MinSizeRel</code> does not make a big difference</p>",
        "id": 394848805,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696428360
    },
    {
        "content": "<p>To shave some size of, if we dont do multi file there is no reason to ship lake olean and binaries right?</p>",
        "id": 394849008,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696428415
    },
    {
        "content": "<p>Init we definitely need to keep...Lean is a bit harder. If you pinky promise to not do meta programming it should just work without Lean oleans though right?</p>",
        "id": 394849215,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696428483
    },
    {
        "content": "<p>I didn't count the binary, but yes, then we are at 380MB olean+ilean</p>",
        "id": 394849406,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696428534
    },
    {
        "content": "<p>Only taking Lake away or Lake + Lean?</p>",
        "id": 394849585,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696428586
    },
    {
        "content": "<p>Only Lake. I hadn't read the message about Lean yet.</p>",
        "id": 394849764,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696428625
    },
    {
        "content": "<p>Don't you need Lean to use Tactics? Otherwise, for NNG, we don't need metaprogramming.</p>",
        "id": 394849950,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696428677
    },
    {
        "content": "<p>But tar compressed the 380MB become 150MB. And with Mario's compression even less, right?</p>",
        "id": 394850033,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696428703
    },
    {
        "content": "<p>Init alone is just 32MB uncompressed.</p>",
        "id": 394850208,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696428744
    },
    {
        "content": "<p>Built in tactics are pre compiled into the compiler and I thiiink (this is getting handwavy) it could work out to just run them without Lean oleans.</p>\n<p>Mario's stuff is even better but you'd need an additional rust wasm binary to unpack so one would have yo check if the sizd cost pays off here.</p>\n<p>Let's try Init only then huh?^^</p>",
        "id": 394850505,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696428832
    },
    {
        "content": "<p>I'm curious what is taking up so much room within the <code>.olean</code>.  For example, could one strip out proofs (maybe by introducing axioms instead) and get significantly smaller files?</p>",
        "id": 394870570,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1696434767
    },
    {
        "content": "<p>About 30% smaller for mathlib: <a href=\"#narrow/stream/270676-lean4/topic/olean.20dump.20tool/near/368371297\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/olean.20dump.20tool/near/368371297</a>. So it would help, but does not immediately make loading mathlib in wasm feasible.</p>",
        "id": 394872519,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696435399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> We really should avoid <code>Lean</code> in NNG and similar games. Which means that these tactics would need to become <code>[builtinTactic]</code> and be compiled into the wasm binary</p>",
        "id": 394873945,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696435821
    },
    {
        "content": "<p>Note that PRs like <a href=\"https://github.com/leanprover-community/mathlib4/pull/7504\">#7504</a> substantially decrease olean file sizes (total mathlib olean file size went down by nearly 5% on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7281\">#7281</a> and presumably the same thing is happening with <a href=\"https://github.com/leanprover-community/mathlib4/pull/7504\">#7504</a>)</p>",
        "id": 394875069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696436248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <a href=\"#narrow/stream/113486-announce/topic/Lean.20FRO/near/395827367\">said</a>:</p>\n<blockquote>\n<p>I'm happy to announce <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a>, the official online playground for Lean 4 + std/mathlib hosted by the Lean FRO and based on <a href=\"https://github.com/leanprover-community/lean4web\">lean4web</a> by <span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> and <span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span>. Many thanks to Alex for helping with the setup!</p>\n</blockquote>\n<p>Is this using the wasm build work discussed on this thread? if so, dies this announcement also mean we can now also build our own exe projects to wasm?</p>",
        "id": 395828383,
        "sender_full_name": "Somo S.",
        "timestamp": 1696925139
    },
    {
        "content": "<p>It doesn't, this hasn't changed:</p>\n<blockquote>\n<p>does not immediately make loading mathlib in wasm feasible</p>\n</blockquote>",
        "id": 395829673,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696925592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span> Actually, building your own exe projects to wasm should be possible, even though there is no good setup for this yet. What would you like to build?</p>",
        "id": 395854407,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696934512
    },
    {
        "content": "<p>oh nothing in particular at the moment ... i am just, in general, excited at the prospects of seeing lean4 among the growing list of languages that support wasm/wasi as we approach wasi-preview2</p>",
        "id": 395855346,
        "sender_full_name": "Somo S.",
        "timestamp": 1696934863
    },
    {
        "content": "<p>Okay, I am starting to understand why lean3 wasm did not use stdin. Apparently, Emscripten does not support waiting for stdin: <a href=\"https://github.com/emscripten-core/emscripten/issues/17800\">https://github.com/emscripten-core/emscripten/issues/17800</a>. There is a workaround using Asyncify. I am not sure how much overhead that adds.</p>",
        "id": 395864024,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696938122
    },
    {
        "content": "<p>A basic version of a web assembly web editor is working:<br>\n<a href=\"https://abentkamp.github.io/lean-wasm/index.html#code=universe%20u%0A%0A%40%5Binline%5D%20def%20id%20%7B%CE%B1%20%3A%20Sort%20u%7D%20(a%20%3A%20%CE%B1)%20%3A%20%CE%B1%20%3A%3D%20a%0A%0A%23check%20id\">https://abentkamp.github.io/lean-wasm/index.html#code=universe%20u%0A%0A%40%5Binline%5D%20def%20id%20%7B%CE%B1%20%3A%20Sort%20u%7D%20(a%20%3A%20%CE%B1)%20%3A%20%CE%B1%20%3A%3D%20a%0A%0A%23check%20id</a><br>\nI haven't taken care of the oleans yet. So it only works with Lean in \"prelude mode\", i.e. Lean doesn't even know about <code>Nat</code> etc.</p>",
        "id": 400194868,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699040132
    },
    {
        "content": "<p>frankly it's cool enough to hit restart server and watch my computer's CPU usage go up :-)</p>",
        "id": 400195395,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1699040436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> That's awesome! What did you use for inter\"process\" communication in the end? Did you encounter further stumbling blocks on the way?</p>",
        "id": 400195608,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699040552
    },
    {
        "content": "<p>I don't use the Watchdog at all and modified the FileWorker a bit:<br>\n<a href=\"https://github.com/abentkamp/lean4/blob/wasm-server/src/Lean/Server/FileWorker.lean#L473\">https://github.com/abentkamp/lean4/blob/wasm-server/src/Lean/Server/FileWorker.lean#L473</a><br>\nIt additionally sends out server capabilities the initialized notification. So this will only work to handle a single file.</p>",
        "id": 400196579,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699041011
    },
    {
        "content": "<p>We'll have to see how to integrate this into the codebase later.</p>",
        "id": 400196717,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699041090
    },
    {
        "content": "<p>And as I mentioned above, Emscripten does not seem capable of wainting for <code>stdin</code>. So I replaced the c++ implementation of <code>Handle.read</code> with a call to a JavaScript function that waits for input:<br>\n<a href=\"https://github.com/abentkamp/lean4/blob/wasm-server/src/runtime/io.cpp#L313-L332\">https://github.com/abentkamp/lean4/blob/wasm-server/src/runtime/io.cpp#L313-L332</a></p>",
        "id": 400198397,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699041804
    },
    {
        "content": "<p>When adding the oleans and import <code>Init</code>, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">UInt64.ofNatCore'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Caused by the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">coeNotation</span><span class=\"o\">)</span> <span class=\"s2\">\"↑\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>in <code>Init/Coe.lean</code>.<br>\nAny ideas?</p>",
        "id": 400304511,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699109172
    },
    {
        "content": "<p>Either the symbol is not in the binary or wasm <code>dlsym</code> somehow misbehaves</p>",
        "id": 400304644,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699109314
    },
    {
        "content": "<p>Thanks, problem solved. It stupidly removed <code>-s MAIN_MODULE=1</code> thinking that it was no longer needed. Apparently it's crucial for dlsym :-).</p>",
        "id": 400323447,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699127813
    },
    {
        "content": "<p>It works:<br>\n<a href=\"https://abentkamp.github.io/lean-wasm/index.html#code=%23check%20Nat\">https://abentkamp.github.io/lean-wasm/index.html#code=%23check%20Nat</a><br>\n(make sure to clear your cache to get the new version...)</p>",
        "id": 400324813,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699129214
    },
    {
        "content": "<p>To be able to wait for stdin, I use Asyncify, which apparently is not compatible with fwasm-exceptions. So every exception call will have some overhead. I think <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> mentioned that exceptions are used extensively in the server implementation? Would it be worth to explore ways to avoid Asyncify?</p>",
        "id": 400562100,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699286298
    },
    {
        "content": "<p>C++ exceptions should be rare, it's okay if they are slower</p>",
        "id": 400562640,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699286420
    },
    {
        "content": "<p>They are used extensively in the kernel; the server is all Lean, so no exceptions there (only Lean's own <code>Except</code>, but that doesn't need stack unwinding).</p>",
        "id": 400605951,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1699302675
    },
    {
        "content": "<p>Okay, but doesn't the server use the kernel as well?</p>",
        "id": 400606874,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699303140
    },
    {
        "content": "<p>On another note: I've noticed that my current setup does not allow for changes of the imports because that will cause the FileWorker to terminate the process.</p>",
        "id": 400607411,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699303410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400606874\">said</a>:</p>\n<blockquote>\n<p>Okay, but doesn't the server use the kernel as well?</p>\n</blockquote>\n<p>Ah yeah, I guess what Sebastian is saying is that this is fine since there aren't that many exceptions flying around relative to all the other work the server is doing.</p>",
        "id": 400610742,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1699304892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400607411\">said</a>:</p>\n<blockquote>\n<p>On another note: I've noticed that my current setup does not allow for changes of the imports because that will cause the FileWorker to terminate the process.</p>\n</blockquote>\n<p>The file worker code assumes that its entire process will be shutdown and restarted whenever the imports change. If they change without restarting, afaicr the worker will exit with an error code.</p>",
        "id": 400610880,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1699304948
    },
    {
        "content": "<p>Hm, ok. I guess it won't be easy to get something working for wasm without having too much code duplication.</p>",
        "id": 400611608,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699305258
    },
    {
        "content": "<p>I think it's time to rethink why we would like to have a wasm version of Lean. I just discussed with <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> and we finally came to the conclusion that it's actually not that useful. Both for the web editor and the games, the current server solution seems to work fine.</p>",
        "id": 400705653,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699351307
    },
    {
        "content": "<p>I think for the games, being able to easily rehost and remix them is a plus, though not a terribly important one. For the editor I agree.</p>",
        "id": 400707264,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699351800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400705653\">said</a>:</p>\n<blockquote>\n<p>.. we finally came to the conclusion that it's actually not that useful. </p>\n</blockquote>\n<p>is a corollary to this that it's also  not useful for users to (eventually) be able to  target  wasm for any executable they are building (thinking post wasi-previews) or is that a separate matter altogether which could still be considered in future?</p>",
        "id": 400707883,
        "sender_full_name": "Somo S.",
        "timestamp": 1699352024
    },
    {
        "content": "<p>Oh, I'm surprised! I was thinking in terms of \"live\" documentation and online blueprints, where you can have side by side natural language proofs and the ability to jump into proof states, or get tooltips showing types, etc, in an HTML document.</p>",
        "id": 400709968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699352787
    },
    {
        "content": "<p>I was thinking about that as well but I guess the question is, do you need it to be interactive/editable? What you have listed is more or less covered by LeanInk</p>",
        "id": 400710207,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699352884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span> That seems like a separate matter altogether</p>",
        "id": 400710373,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699352953
    },
    {
        "content": "<p>I worry that although the server solution is good enough for a demo web editor and an \"officially supported\" game or two, without a pure JS solution we cut off most external innovation in these directions. Hosting a server is a big barrier to entry.</p>",
        "id": 400710754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699353082
    },
    {
        "content": "<p>Of course, officially supporting WASM is a big commitment!</p>",
        "id": 400710810,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699353101
    },
    {
        "content": "<p>I won't deny that it would be very cool to be able to jump into any Lean GitHub project and start editing: <a href=\"https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi\">https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi</a>. Whether that can ever be scaled up to Mathlib sizes, I don't know.</p>",
        "id": 400711297,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699353259
    },
    {
        "content": "<p>Well, as one data point, we were able to do it in lean 3 :/ I think lean 4 is being way less resource-conscious than lean 3 (for a variety of reasons) and this is coming back to bite us</p>",
        "id": 400712228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699353565
    },
    {
        "content": "<p>(That's not entirely true, lean 3 also had issues shipping mathlib toward the end.)</p>",
        "id": 400712480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699353644
    },
    {
        "content": "<p>but my impression is that the resource issues have meant that instead of being able to ship 80% of mathlib we can now barely ship 10% and full mathlib looks hopelessly out of reach</p>",
        "id": 400712743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699353732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400712480\">said</a>:</p>\n<blockquote>\n<p>(That's not entirely true, lean 3 also had issues shipping mathlib toward the end.)</p>\n</blockquote>\n<p>For more context; these issues were due to a 100Mb limit on the deployment mechanism we were using, which we resolved by switching to a different mechanism. I think the offending bundle is now 118 Mb</p>",
        "id": 400714206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699354250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span> The lean4game server is currently an executable that is separate from the official lean server. So if we want to get wasm games, we'd have to find a way to compile a Lean project (that is not Lean itself) to wasm.</p>",
        "id": 400714632,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699354408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400710754\">said</a>:</p>\n<blockquote>\n<p>I worry that although the server solution is good enough for a demo web editor and an \"officially supported\" game or two, without a pure JS solution we cut off most external innovation in these directions. Hosting a server is a big barrier to entry.</p>\n</blockquote>\n<p>We would like to lower the barrier to entry by offering to import games from Github to our server without our explicit approval. So anybody would be easily be able to publish a game.</p>",
        "id": 400715285,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699354659
    },
    {
        "content": "<p>Still, I agree that having an option to set up a wasm game would give users much more control. Also, considering that we will not be able to maintain the game server as actively as now forever, wasm might be a good idea.</p>",
        "id": 400715305,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699354664
    },
    {
        "content": "<blockquote>\n<p>For more context; these issues were due to a 100Mb limit on the deployment mechanism we were using, which we resolved by switching to a different mechanism. I think the offending bundle is now 118 Mb</p>\n</blockquote>\n<p>So we are really just limited by the patience of the user to download huge files, right?</p>",
        "id": 400716530,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699355040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400709968\">said</a>:</p>\n<blockquote>\n<p>Oh, I'm surprised! I was thinking in terms of \"live\" documentation and online blueprints, where you can have side by side natural language proofs and the ability to jump into proof states, or get tooltips showing types, etc, in an HTML document.</p>\n</blockquote>\n<p>This is quite far down the road, but support for WASM would be great for writing widgets natively in Lean!</p>",
        "id": 400795019,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1699381715
    },
    {
        "content": "<p>No wasm means we can't have a million people playing NNG at the same time when I drop the new OG season, right?</p>",
        "id": 400795841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699382037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Would it be possible to publish the wasm build in Lean releases (I mean here: <a href=\"https://github.com/leanprover/lean4/releases\">https://github.com/leanprover/lean4/releases</a>)? Then I could more easily link against the libraries when building <code>lean4game</code>(or other projects) for wasm.</p>",
        "id": 400973561,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1699459050
    },
    {
        "content": "<p>Absolutely, we basically just have to set <code>release: true</code>in the config (and check that all relevant files are included). We should also add it as, presumably, a Tier 2 platform in <code>doc/setup.md</code></p>",
        "id": 400974630,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699459338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400795841\">said</a>:</p>\n<blockquote>\n<p>No wasm means we can't have a million people playing NNG at the same time when I drop the new OG season, right?</p>\n</blockquote>\n<p>Maybe you can upload it to Steam. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 401748811,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1699876961
    },
    {
        "content": "<p>Can I make it an executable?</p>",
        "id": 401765788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699883093
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 402422045,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1700126538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/401765788\">said</a>:</p>\n<blockquote>\n<p>Can I make it an executable?</p>\n</blockquote>\n<p>I guess, you can. Though it might be a large package that wrap everything in it. But since a typical game often requires several gigabytes of storage space. I don't think it matters.</p>",
        "id": 402422108,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1700126552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400705653\">said</a>:</p>\n<blockquote>\n<p>I think it's time to rethink why we would like to have a wasm version of Lean [...] we finally came to the conclusion that it's actually not that useful</p>\n</blockquote>\n<p>Does this mean Lean itself compiled to wasm? If Lean itself isn't compiled to wasm, would it still possible to compile Lean code to wasm? Something I've been looking forward to is rewriting a bunch of pure javascript knot theory computations in Lean, proving they're correct, and then targeting wasm.</p>",
        "id": 402539812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700162548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400707883\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/400705653\">said</a>:</p>\n<blockquote>\n<p>.. we finally came to the conclusion that it's actually not that useful. </p>\n</blockquote>\n<p>is a corollary to this that it's also  not useful for users to (eventually) be able to  target  wasm for any executable they are building (thinking post wasi-previews) or is that a separate matter altogether which could still be considered in future?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> i had asked a similar question above.. looks like the talk here is just about the lean executable.</p>",
        "id": 402540185,
        "sender_full_name": "Somo S.",
        "timestamp": 1700162660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span> I am already compiling Lean code to wasm that is not Lean itself. Starting with the next release of Lean, the Lean wasm build will be part of the release. At that point, I'll be able to share my current setup more easily.</p>",
        "id": 402561748,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700170929
    },
    {
        "content": "<p>Oh, I see the first wasm release is out :-)</p>",
        "id": 402671504,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700218679
    },
    {
        "content": "<p>So here is how you can compile Lean to WASM. Any tips on how to integrate this better with lake/elan are very welcome.</p>\n<p>Create a new Lean project:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>mkdir wasmtest\ncd wasmtest\nlake init wasmtest\n</code></pre></div>\n<p>Download the WASM release:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>mkdir -p toolchains\nwget -P toolchains https://github.com/leanprover/lean4/releases/download/v4.3.0-rc2/lean-4.3.0-rc2-linux_wasm32.tar.zst\ntar --use-compress-program=unzstd -xvf toolchains/lean-4.3.0-rc2-linux_wasm32.tar.zst -C toolchains\n</code></pre></div>\n<p>Compile the project using the same toolchain as the wasm build:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>echo \"leanprover/lean4:v4.3.0-rc2\" &gt; ./lean-toolchain\nlake build\n</code></pre></div>\n<p>We are only interested in the c files produced by lake.</p>\n<p>Add a output directory for wasm</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>mkdir -p .lake/build/wasm\n</code></pre></div>\n<p>Compile to wasm. (Make sure <code>emcc</code> is installed: <a href=\"https://emscripten.org/docs/getting_started/downloads.html\">https://emscripten.org/docs/getting_started/downloads.html</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>emcc -o .lake/build/wasm/main.js -I toolchains/lean-4.3.0-rc2-linux_wasm32/include -L toolchains/lean-4.3.0-rc2-linux_wasm32/lib/lean \\\n  $(find .lake/build/ir -name *.c) -lInit -lLean -lleancpp -lleanrt \\\n  -sFORCE_FILESYSTEM -lnodefs.js -s EXIT_RUNTIME=0 -s MAIN_MODULE=1 -s LINKABLE=1 -s EXPORT_ALL=1 -s ALLOW_MEMORY_GROWTH=1 -fwasm-exceptions -pthread -flto\n</code></pre></div>\n<p>You can play around with the options here. This is what I use for <code>lean4game</code>.</p>\n<p>Test it using <code>node</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>node .lake/build/wasm/main.js\n</code></pre></div>",
        "id": 402692669,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700225777
    },
    {
        "content": "<p>Putting all of these steps in a lakefile in order to automate them would sound like a great first step to me <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 402695400,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700226584
    },
    {
        "content": "<p>Here is what I am wondering specifically:</p>\n<ul>\n<li>Can I install the wasm build via <code>elan</code> instead of downloading it via <code>wget</code>?</li>\n<li>Can I instruct <code>lake</code> to build only the c files?</li>\n</ul>",
        "id": 402702051,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700228723
    },
    {
        "content": "<p>Unfortunately elan is not set up for handling multiple architectures, it's probably better to handle this in Lake(files) than extending elan. There should be a facet for the .c files.</p>",
        "id": 402703718,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700229304
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">wasm</span><span class=\"bp\">/</span><span class=\"n\">main.js</span>\n\n<span class=\"n\">Hello</span><span class=\"o\">,</span> <span class=\"n\">world</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>Awesome.</p>",
        "id": 402820575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700275425
    },
    {
        "content": "<p>(I needed to change <code>$(find .lake/build/ir -name *.c)</code> to <code>$(find .lake/build/ir -name \"*.c\")</code>.)</p>",
        "id": 402820652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700275458
    },
    {
        "content": "<p>We're going to get <code>lake js</code>, right?</p>",
        "id": 402820751,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700275538
    },
    {
        "content": "<p>I threw together an experimental flake based on the above. Seems to work! In case anyone would like to try it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mkdir</span> <span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">lean</span>\n<span class=\"n\">cd</span> <span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">lean</span>\n<span class=\"n\">nix</span> <span class=\"n\">flake</span> <span class=\"n\">init</span> <span class=\"bp\">-</span><span class=\"n\">t</span> <span class=\"n\">github</span><span class=\"o\">:</span><span class=\"n\">gleachkr</span><span class=\"bp\">/</span><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">lean</span>\n<span class=\"n\">nix</span> <span class=\"n\">build</span> <span class=\"bp\">.#</span><span class=\"n\">js</span>\n</code></pre></div>",
        "id": 403229595,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1700507327
    },
    {
        "content": "<p>I love to see a Lake target for the WASM build! <span aria-label=\"smiling face with hearts\" class=\"emoji emoji-1f970\" role=\"img\" title=\"smiling face with hearts\">:smiling_face_with_hearts:</span>  <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> Is this meant to be alternative for a binary executable or for a static or shared library? If just an executable would it be desirable to have a separate configuration (i.e., a <code>lean_js</code> ala<code>lean_exe</code>) or do we want to be able to build a JS version of any Lean library, module, and/or executable?</p>",
        "id": 405516257,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701508886
    },
    {
        "content": "<p>I suspect that an executable would be enough for most people.</p>\n<p>For my ongoing work on <code>lean4game</code> I have some other requirements (not crucial that lake supports these, though...):</p>\n<ul>\n<li>I want to load oleans from wasm, so I need to compile them for 32bit. I use the native 32bit build because wasm is a bit slow.</li>\n<li>My main file is written in C and only then it calls exported Lean functions.</li>\n</ul>",
        "id": 405516885,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1701509480
    },
    {
        "content": "<p>I wrote a quick utility to download the necessary toolchain and run all of the steps above <a href=\"https://github.com/T-Brick/lean2wasm\">https://github.com/T-Brick/lean2wasm</a></p>",
        "id": 407817554,
        "sender_full_name": "Thea Brick",
        "timestamp": 1702504782
    }
]