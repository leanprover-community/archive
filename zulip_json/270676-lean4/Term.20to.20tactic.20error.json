[
    {
        "content": "<p>The following snippet works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ne_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"n\">bn</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">an</span> <span class=\"bp\">▸</span> <span class=\"n\">bn</span> <span class=\"bp\">▸</span> <span class=\"n\">ineq</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>But, rewriting directly as a term,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ne_self2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"n\">bn</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"n\">an</span> <span class=\"bp\">▸</span> <span class=\"n\">bn</span> <span class=\"bp\">▸</span> <span class=\"n\">ineq</span>\n</code></pre></div>\n<p>produces the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">`▸`</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">cast</span> <span class=\"n\">is</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">however</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">equality</span>\n  <span class=\"n\">bn</span>\n<span class=\"n\">of</span> <span class=\"n\">type</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">on</span> <span class=\"n\">either</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">or</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">hand</span> <span class=\"n\">side</span>\n</code></pre></div>\n<p>I thought the two snippets were equivalent as Lean code, and I would think the second snippet is correct code; am I making a mistake, do I need to write an explicit cast somewhere, or is this a bug?  I am using </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">254582</span><span class=\"n\">c00040</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 382917473,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691493393
    },
    {
        "content": "<p>Hmm, even just adding an explicit type for <code>this</code> causes the error, too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"n\">bn</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">an</span> <span class=\"bp\">▸</span> <span class=\"n\">bn</span> <span class=\"bp\">▸</span> <span class=\"n\">ineq</span> <span class=\"c1\">-- error</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 383043490,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1691518952
    },
    {
        "content": "<p>Should I open an issue for this?  Is it a bug?</p>",
        "id": 383544482,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691657952
    },
    {
        "content": "<p>No, it's not a bug. The elaboration procedure is different when there is an expected type.</p>",
        "id": 383561265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661318
    },
    {
        "content": "<p>In this situation you can usually write <code>by exact an ▸ bn ▸ ineq</code>, leaving out the <code>have</code> step.</p>",
        "id": 383562979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661672
    },
    {
        "content": "<p>You'll find plenty of <code>by exact X</code> in the library, where just plain <code>X</code> doesn't typecheck.</p>",
        "id": 383563121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661703
    },
    {
        "content": "<p>If one wanted to avoid tactics, how would one proceed?</p>",
        "id": 383563180,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691661721
    },
    {
        "content": "<p>(Although I'm now noticing that many of these do actually typecheck with just plain <code>X</code>. If someone wants to do a clean-up pass on the library for this I would happily merge. :-)</p>",
        "id": 383563315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661739
    },
    {
        "content": "<p>I would proceed by deciding not to avoid tactics. :-)</p>",
        "id": 383563387,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661763
    },
    {
        "content": "<p>But the following also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ne_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"n\">bn</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">an</span> <span class=\"bp\">▸</span> <span class=\"n\">bn</span> <span class=\"bp\">▸</span> <span class=\"n\">ineq</span>\n</code></pre></div>",
        "id": 383563456,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691661781
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ne_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"n\">bn</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">an</span> <span class=\"bp\">▸</span> <span class=\"n\">bn</span> <span class=\"bp\">▸</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works</p>",
        "id": 383564134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661930
    },
    {
        "content": "<p>(This removes the expected type.)</p>",
        "id": 383564165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661936
    },
    {
        "content": "<p>Ah:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ne_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"n\">bn</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">an</span> <span class=\"bp\">▸</span> <span class=\"n\">bn</span> <span class=\"bp\">▸</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>is what you want.</p>",
        "id": 383564248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661956
    },
    {
        "content": "<p>But I think this is just syntactical sugar, nothing profound. I forget where <code>(x : )</code> is defined.</p>",
        "id": 383564389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661986
    },
    {
        "content": "<p>OK; although I am losing heart a bit.</p>",
        "id": 383564437,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691661998
    },
    {
        "content": "<p>Sorry. :-) Could you say why? If it is that you are sad that whether or not there is an expected type affects elaboration, then I think you should be happy instead that you can control elaboration in this way. :-)</p>",
        "id": 383564683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691662057
    },
    {
        "content": "<p>Note that my last suggestion \"avoids tactics\".</p>",
        "id": 383564815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691662085
    },
    {
        "content": "<p>I am sad because the original code is very simple, something I wrote as a beginner following instructions from the books, and fails due to an issue I cannot be expected to understand at this point.  I.e. there is a gap between the level of the code, and the nature of the failure.  I have gotten stuck like this several times.</p>\n<p>Furthermore, the error message Lean gives is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">`▸`</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">cast</span> <span class=\"n\">is</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">however</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">equality</span>\n  <span class=\"n\">bn</span>\n<span class=\"n\">of</span> <span class=\"n\">type</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">on</span> <span class=\"n\">either</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">or</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">hand</span> <span class=\"n\">side</span>\n</code></pre></div>\n<p>which is baffling to me, because the substitution is supposed to target the inequality, so why is Lean complaining about one of the two equations?</p>",
        "id": 383569355,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691662970
    },
    {
        "content": "<p>I'm curious actually, which book is teaching <code>▸</code>? I would say that <code>▸</code> is an advanced topic for obsessive code golfers, and everyone else should be using <code>rw</code>!</p>",
        "id": 383569666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691663042
    },
    {
        "content": "<p>(Less strongly, the same sentiment for term mode vs tactic mode.)</p>",
        "id": 383570044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691663075
    },
    {
        "content": "<p>TPIL teaches term mode first. Tactics are chapter 5. See the examples above the exercise at the end of &lt;<a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html\">https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html</a>&gt;.</p>",
        "id": 383570920,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691663216
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Term.20to.20tactic.20error/near/383570920\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/mmap\">#lean4 &gt; mmap</a> by <span class=\"user-mention silent\" data-user-id=\"400544\">Buster</span>.</p>",
        "id": 383571516,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691663338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Term.20to.20tactic.20error/near/383563315\">said</a>:</p>\n<blockquote>\n<p>(Although I'm now noticing that many of these do actually typecheck with just plain <code>X</code>. If someone wants to do a clean-up pass on the library for this I would happily merge. :-)</p>\n</blockquote>\n<p>These wouldn't be for performance reasons, would they? But that's maybe worth re-checking anyway now that we're in lean 4</p>",
        "id": 383582046,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691665658
    },
    {
        "content": "<p>Oof, some may be for performance reasons, I guess. The ones I noticed still seemed instant after I removed them.</p>\n<p>If any are for performance reasons, ideally they would have a comment saying so ... but I know Mathlib isn't (yet) like that. :-)</p>",
        "id": 383591827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691667866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"577163\">@Ioannis Konstantoulas</span> the triangle symbol attempts to perform higher order unification, which is known to be an undecidable problem. I think that an algorithm which provably cannot always work, failing to work in your use case without some hints, is not a reason to lose heart.</p>",
        "id": 383602367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691670044
    },
    {
        "content": "<p>The <code>rw</code> tactic is a far more robust version of the triangle, using a more sophisticated algorithm. If you want to avoid tactics then you can simply tell lean the explicit motive (this is the part for which there is no algorithm) and you will have much more luck with the triangle. But the whole point of tactics is to make your life easier in these situations.</p>",
        "id": 383603296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691670256
    },
    {
        "content": "<p>My experience is that the lean 4 <code>▸</code> is much more robust than the lean 3 <code>▸</code>, and no longer avoid it in new code. It is basically equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n  <span class=\"n\">first</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span>\n  <span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>In other words, it's like <code>rw</code>, but in a more \"do what I mean\" sense, it tries a few things that could be intended and takes the one that would make progress.</p>",
        "id": 383636183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691676223
    },
    {
        "content": "<p>The lean 2 <code>▸</code> was much more powerful than either lean 3 or lean 4 and would do full HO unification with backtracking. You could do some magic with it (like rewriting an unspecified subset of the occurrences of the LHS in the goal) but it was liable to cause performance issues which is why it was scrapped in lean 3 in favor of a deterministic algorithm (just replace everything) which users can better reason about. Lean 4 <code>▸</code> does not try to do this either, it's just rewriting backwards and forwards with <code>rw</code>, so mostly you can just think of it as the term-mode syntax for <code>rw</code>.</p>",
        "id": 383640733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691676775
    }
]