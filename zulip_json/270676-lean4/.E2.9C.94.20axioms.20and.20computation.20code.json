[
    {
        "content": "<p>Hello,  I am new to lean4 and theorem proving. Nowadays I am reading lean4 12 Axioms and Computation, and I am testing this code (the last code of this chapter)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">linv</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">choose</span> <span class=\"n\">ex</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">linv_comp_self</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n                        <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n                        <span class=\"o\">:</span> <span class=\"n\">linv</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">ex</span>  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">feq</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span> <span class=\"n\">choose_spec</span> <span class=\"n\">ex</span>\n    <span class=\"k\">calc</span> <span class=\"n\">linv</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"n\">ex</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">ex</span>\n                <span class=\"n\">_</span>     <span class=\"bp\">=</span> <span class=\"n\">a</span>         <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"n\">feq</span>\n</code></pre></div>\n<p>but the compiler tells me that in  the code <code>dif_pos ex</code>, there are problems called :<br>\n\"function expected at<br>\n  dif_pos ex<br>\nterm has type<br>\n  dite (∃ a₁, f a₁ = f a) ?m.395 ?m.396 = ?m.395 ex\"<br>\nI wonder what happened here and are there any clues to debug?</p>",
        "id": 354254307,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1682757091
    },
    {
        "content": "<p>Getting the <code>_</code> placement right in calc expressions turns out to be important, and if you're not careful it can be interpreted as being an argument to the previous term (your error is from it seeing <code>dif_pos ex _</code>, but <code>dif_pos ex</code> is not a function).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">linv</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">choose</span> <span class=\"n\">ex</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">linv_comp_self</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n                        <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n                        <span class=\"o\">:</span> <span class=\"n\">linv</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">ex</span>  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">feq</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span> <span class=\"n\">choose_spec</span> <span class=\"n\">ex</span>\n    <span class=\"k\">calc</span> <span class=\"n\">linv</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"n\">ex</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">ex</span>\n         <span class=\"n\">_</span>            <span class=\"bp\">=</span> <span class=\"n\">a</span>         <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"n\">feq</span>\n</code></pre></div>",
        "id": 354255667,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682757306
    },
    {
        "content": "<p>an alternative formatting that might be more intuitive is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span>  <span class=\"n\">linv</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"n\">ex</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">ex</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>         <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"n\">feq</span>\n</code></pre></div>",
        "id": 354258838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682757793
    },
    {
        "content": "<p>thank you very much, I understand</p>",
        "id": 354259832,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1682757941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609478\">Meizu Fan</span> has marked this topic as resolved.</p>",
        "id": 354259863,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682757947
    }
]