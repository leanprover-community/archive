[
    {
        "content": "<p>Lean 4 accepts this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"bp\">↑</span><span class=\"n\">y</span>\n</code></pre></div>\n<p>Lean 4 rejects this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>It was the other way around in Lean 3.</p>\n<p>Two questions:<br>\n(1) Why?! In my uneducated opinion, Lean 3 coercion makes more sense.<br>\n(2) Can I desugar the <code>↑</code> in Lean 4 so that I can see what actually happens there?</p>",
        "id": 372853715,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688641424
    },
    {
        "content": "<p>You can use <code>show_term</code> from std4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">show_term</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"bp\">↑</span><span class=\"n\">y</span>\n</code></pre></div>\n<p>It reveals that it's just <code>x ++ y</code>. It looks like there's a no-op instance defined right after <code>CoeT</code> in core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeT</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">α</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>In Lean 3 I don't remember that being allowed -- a coercion meant there had to be a non-trivial coercion.</p>",
        "id": 372858736,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688642389
    },
    {
        "content": "<p>I think what's happening here is that the coercion arrow is causing the typeclass inference for <code>HAppend</code> occur without taking into account the type for <code>y</code>, which lets <code>HAppend</code> assume it can use the default homogeneous instance, and then <code>id Nat</code> is defeq to <code>Nat</code> so it's ok.</p>",
        "id": 372859287,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688642482
    },
    {
        "content": "<p>This also works, since it also defers taking into account the type of <code>y</code> when resolving <code>HAppend</code>: <code>x ++ by exact y</code></p>",
        "id": 372859564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688642544
    },
    {
        "content": "<p>Interesting! This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x.append</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 372863026,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688643256
    },
    {
        "content": "<p>Right, <code>id</code> is semireducible so the types will pass the defeq check</p>",
        "id": 372864576,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688643596
    },
    {
        "content": "<p>Where can I read about the semireducible stuff?</p>",
        "id": 372865255,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688643724
    },
    {
        "content": "<p>In my situation, the behavior with <code>++</code> is a major inconvenience.<br>\nIt isn't about <code>id</code> specifically; I used <code>id</code> only for the sake of MWE.<br>\nThe project I am porting contains lots of <code>++</code> applied to lists of defeq types.<br>\nI'm wondering if I could change the behavior of <code>++</code> for my whole project, so that I could consistently use the most readable notation.</p>",
        "id": 372868041,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688644245
    },
    {
        "content": "<p>Could you say why you have these defeq wrappers, but still want to <code>++</code> them? It sounds at least slightly unusual. (It might be time to come clean?)</p>",
        "id": 372873374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688645327
    },
    {
        "content": "<p>I think that both wrappers and <code>++</code> make the code more readable.</p>",
        "id": 372874004,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688645457
    },
    {
        "content": "<p>defeq \"abuse\" is called that in part because it can make code less readable (because you have to guess, like in this situation, when Lean will or will not see through the wrappers).</p>",
        "id": 372874575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688645586
    },
    {
        "content": "<p>For example here:<br>\n<a href=\"https://github.com/madvorak/grammars/blob/4a158538f7df9ed50144d996b950821b5451165b/src/classes/unrestricted/closure_properties/concatenation.lean#L105\">https://github.com/madvorak/grammars/blob/4a158538f7df9ed50144d996b950821b5451165b/src/classes/unrestricted/closure_properties/concatenation.lean#L105</a></p>\n<p>I believe it is better to write <code>nst T N₁ N₂</code> (where <code>nst</code> stands for \"new symbol type\") than <code>symbol T (option (N₁ ⊕ N₂) ⊕ (T ⊕ T))</code> when not using defeq.</p>",
        "id": 372875157,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688645714
    },
    {
        "content": "<p>It's fine having <code>nst T N₁ N₂</code>, but is there a reason why you can't be consistent with it?</p>",
        "id": 372875322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688645752
    },
    {
        "content": "<p>You can also make identity functions that explicitly change the type from one thing to another defeq thing. That turns defeq abuse into a more reliable design.</p>",
        "id": 372875737,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688645833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Coercion.20is.20different.20from.20Lean.203/near/372875322\">said</a>:</p>\n<blockquote>\n<p>It's fine having <code>nst T N₁ N₂</code>, but is there a reason why you can't be consistent with it?</p>\n</blockquote>\n<p>There are functions that don't have <code>nst T N₁ N₂</code> as their output type. They might return an element of <code>T</code> or something in the middle and then I wrap the value before appending it to a list of the former type.</p>",
        "id": 372878321,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688646399
    },
    {
        "content": "<p>In a slightly similar vein, custom inductives are usually worth the extra boilerplate they cost, to avoid complicated <code>option</code> / <code>⊕</code> monsters.</p>",
        "id": 372878396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688646419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Coercion.20is.20different.20from.20Lean.203/near/372875737\">said</a>:</p>\n<blockquote>\n<p>You can also make identity functions that explicitly change the type from one thing to another defeq thing. That turns defeq abuse into a more reliable design.</p>\n</blockquote>\n<p>Good point but I think that defeq abuse makes the code more readable. I got used to taking advantage of defeq to the point Lean 3 allowed it.</p>",
        "id": 372879483,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688646649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Coercion.20is.20different.20from.20Lean.203/near/372878321\">said</a>:</p>\n<blockquote>\n<p>There are functions that don't have <code>nst T N₁ N₂</code> as their output type.</p>\n</blockquote>\n<p>Usually you then write your own wrapper around that function that has the right output type</p>",
        "id": 372879653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688646685
    },
    {
        "content": "<p>(It's called defeq <em>abuse</em> for a reason)</p>",
        "id": 372879707,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688646697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Coercion.20is.20different.20from.20Lean.203/near/372878396\">said</a>:</p>\n<blockquote>\n<p>In a slightly similar vein, custom inductives are usually worth the extra boilerplate they cost, to avoid complicated <code>option</code> / <code>⊕</code> monsters.</p>\n</blockquote>\n<p>In retrospect, I should have designed more custom types.</p>",
        "id": 372879813,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688646719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Coercion.20is.20different.20from.20Lean.203/near/372879707\">said</a>:</p>\n<blockquote>\n<p>(It's called defeq <em>abuse</em> for a reason)</p>\n</blockquote>\n<p>I guess I have been spoiled by Lean 3.<br>\nWhenever I wanted defeq types to be treated as the same, Lean 3 treated them as the same types.<br>\nIn some situations, certain tactics lost their power, but in the statements, defeq was always OK.<br>\nLean 4 is not so tolerant; therefore, I am struggling.</p>\n<p>At this point, I should probably stop talking and start working to write better code.<br>\nYet, I am still wondering:<br>\nI think (but haven't checked) that defeq can always be mechanically checked.<br>\nWhy is it the case that Lean can fail at recognizing when you have defeq types?<br>\nIsn't there a canonical representation for every type?</p>",
        "id": 372900471,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688650568
    },
    {
        "content": "<p>The difference here is due to <code>HAppend</code> being heterogeneous, and typeclass inference is up to instance defeq (<code>reducible</code> and instances), just like Lean 3</p>",
        "id": 372900987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688650663
    }
]