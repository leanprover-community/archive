[
    {
        "content": "<p>Would it make sense to create an RFC to allow lists to have a trailing comma? For example, this is not legal Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">li</span> <span class=\"bp\">=</span> <span class=\"o\">[</span>\n  <span class=\"n\">item1</span><span class=\"o\">,</span>\n  <span class=\"n\">item2</span><span class=\"o\">,</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>but if it were legal, adding new elements would not require modifications to existing lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">li</span> <span class=\"bp\">=</span> <span class=\"o\">[</span>\n  <span class=\"n\">item1</span><span class=\"o\">,</span>\n  <span class=\"n\">item2</span><span class=\"o\">,</span>\n  <span class=\"n\">item3</span><span class=\"o\">,</span>\n  <span class=\"n\">item4</span><span class=\"o\">,</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>Using a trailing comma is supported in many languages and simplifies diff generation and automatic code generation.</p>\n<p>I encountered an use case for it while writing unit tests.</p>",
        "id": 395344890,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1696637808
    },
    {
        "content": "<p>FWIW, I actually feel less need for trailing commas in lean than other langs. If you're doing auto code generation, and you're using Lean's metaprogramming stuff, the <code>$[ whatever ],*</code> combinator just <em>does the right thing</em>, which is really helpful.</p>\n<p>That said, I'm very much not opposed to this :) if core devs felt particularly wild, I'd even ask for leading commas, so I can write my preferred list syntax of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">list</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n  <span class=\"o\">,</span> <span class=\"n\">item1</span>\n  <span class=\"o\">,</span> <span class=\"n\">item2</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>which is, of course, controversial, but every functional programmer has their quirks...</p>",
        "id": 395372360,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696654928
    },
    {
        "content": "<p>or, even more out there, maybe we re-visit <a href=\"#narrow/stream/270676-lean4/topic/Fun.20macro.20-.20bulleted.20argument.20lists\">bulleted lists</a> and provide bulleted list syntax for list literals, which I would very much like.</p>",
        "id": 395372621,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696655145
    },
    {
        "content": "<p>lean has built-in support for optional trailing commas with the <code>(p),*,?</code> syntax, we just need to use it more in the grammar</p>",
        "id": 395375782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696657651
    },
    {
        "content": "<p>I think the pattern match should still Just Work in that case</p>",
        "id": 395375796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696657673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Trailing.20comma.20for.20lists/near/395375782\">said</a>:</p>\n<blockquote>\n<p>lean has built-in support for optional trailing commas with the <code>(p),*,?</code> syntax, we just need to use it more in the grammar</p>\n</blockquote>\n<p>can you give an example of this? edit: nvm found it</p>",
        "id": 395456536,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1696714747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Trailing.20comma.20for.20lists/near/395372360\">said</a>:</p>\n<blockquote>\n<p>FWIW, I actually feel less need for trailing commas in lean than other langs. If you're doing auto code generation, and you're using Lean's metaprogramming stuff, the <code>$[ whatever ],*</code> combinator just <em>does the right thing</em>, which is really helpful.</p>\n<p>That said, I'm very much not opposed to this :) if core devs felt particularly wild, I'd even ask for leading commas, so I can write my preferred list syntax of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">list</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n  <span class=\"o\">,</span> <span class=\"n\">item1</span>\n  <span class=\"o\">,</span> <span class=\"n\">item2</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>which is, of course, controversial, but every functional programmer has their quirks...</p>\n</blockquote>\n<p>I've only seen this style in C++ initializer lists where the first separator is decreed to be <code>:</code></p>",
        "id": 395456551,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1696714782
    },
    {
        "content": "<p>RFC: <a href=\"https://github.com/leanprover/lean4/issues/2635\">https://github.com/leanprover/lean4/issues/2635</a></p>",
        "id": 395458593,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1696717027
    },
    {
        "content": "<p>I have read the leading comma referred to as \"Haskell-style\", and so assumed it is used in Haskell code bases, but I have no clue.</p>",
        "id": 395740233,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696872232
    },
    {
        "content": "<p>Haskell allows neither leading nor trailing comma, so a common style there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">list</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span> <span class=\"n\">item1</span>\n  <span class=\"o\">,</span> <span class=\"n\">item2</span>\n  <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 395752799,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696879361
    },
    {
        "content": "<p>the leading comma thing looks like a trick people invented to make the no trailing comma issue more palatable</p>",
        "id": 395752910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696879428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Trailing.20comma.20for.20lists/near/395752799\">said</a>:</p>\n<blockquote>\n<p>Haskell allows neither leading nor trailing comma, so a common style there is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">list</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span> <span class=\"n\">item1</span>\n  <span class=\"o\">,</span> <span class=\"n\">item2</span>\n  <span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is the style some people use to write C++ initializer lists so new fields don't mess up the diff</p>",
        "id": 395808573,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1696914273
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2643\">https://github.com/leanprover/lean4/pull/2643</a><br>\nI got it working for everything except for arrays. The analogous change to arrays breaks <code>deriving ToJson</code> for some reason</p>",
        "id": 397391738,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1697668397
    }
]