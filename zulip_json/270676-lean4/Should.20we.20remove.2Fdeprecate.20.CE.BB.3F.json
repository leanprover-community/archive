[
    {
        "content": "<p>Does it make sense to keep <code>Œª</code> as a hard-coded alternative to <code>fun</code>? I'm not sure about the answer to this question. There's good reasons for both sides. The main ones seem to be this:</p>\n<ul>\n<li>\n<p>On the keep side, I mostly think of historical reasons. Primarily Alonzo Church, who originated the Œª-calculus. Also, Lean historically supported <code>Œª</code> since Lean 2 (possibly even Lean 1?).</p>\n</li>\n<li>\n<p>On the ditch side, <code>Œª</code> is used for a lot of other things outside the Œª-calculus. Also, <code>fun</code> is just fun to write and not worse than typing <code>Œª</code>. Additionally, <code>Œª</code> is a perfectly normal Greek letter so why shouldn't it be allowable as an identifier?</p>\n</li>\n</ul>\n<p>Aside: Why aren't Cyrillic letters allowed in identifiers?</p>",
        "id": 363384578,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1685827976
    },
    {
        "content": "<blockquote>\n<p>Also, fun is just <code>fun</code> to write and not worse than typing <code>Œª</code></p>\n</blockquote>\n<p>For whatever reason we didn't believe this in Lean 3, where <code>fun x, x</code> was also valid syntax</p>",
        "id": 363384953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685828193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I love the misquotation!</p>",
        "id": 363386267,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1685829110
    },
    {
        "content": "<p>I would love to reclaim lambda as the canonical element of the field k like in the maths texts for vector spaces</p>",
        "id": 363386269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685829114
    },
    {
        "content": "<p>But we'd never use it because in mathlib almost all such elements actually belong to a ring <code>R</code>!</p>",
        "id": 363386437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685829229
    },
    {
        "content": "<p>This is really distant memory but I think  maybe <code>fun</code> was an addition to Lean 3 and Lean 2 only accepted  <code>Œª</code>? I'm probably making that up since Lean 2 is so far away...</p>\n<p>PS: I do still have unported Lean 2 code on my hard drive... lol! It's beyond fixing now...</p>",
        "id": 363386728,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1685829417
    },
    {
        "content": "<p>I think that <code>Œª</code> is not so friendly to mathematical uses. It's type theory jargon. Also <code>Œª x =&gt; e</code> looks worse to me than <code> Œª x, e</code> as a logician, while <code>fun x =&gt; e</code> looks more stylistically consistent. (The same thing applies with <code>\\mapsto</code> in place of <code>=&gt;</code>, IMO)</p>",
        "id": 363388970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685830675
    },
    {
        "content": "<p>I think it's also used for arbitrary limit ordinals.</p>",
        "id": 363421399,
        "sender_full_name": "Evante Garza",
        "timestamp": 1685854756
    },
    {
        "content": "<p>I do like the idea of getting rid off duplicate syntax in general, for example with inductive we have to my knowledge 3 variants: <code>inductive Foo :=</code> <code>inductive Foo where</code> and <code>inductive Foo</code></p>",
        "id": 363480200,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1685879278
    },
    {
        "content": "<p>I‚Äôm guessing there is a reason why we can‚Äôt just have <code>x =&gt; 1+x</code>, so no lambda or fun at all?</p>",
        "id": 363522651,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685893196
    },
    {
        "content": "<p>In maths this is the notation we use (with mapsto)</p>",
        "id": 363523482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685893478
    },
    {
        "content": "<p>we have discussed it before, maybe someone can find the thread</p>",
        "id": 363523770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685893565
    },
    {
        "content": "<p>it seems likely that such a notation wouldn't be able to take multiple binders</p>",
        "id": 363523833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685893593
    },
    {
        "content": "<p>If we can write multiple Pi binders as <code>(a b : Nat) -&gt; ‚Ä¶</code>, it would be consistent if you could write multiple lambda binders as <code>(a b) =&gt; ‚Ä¶</code>.</p>",
        "id": 363542243,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685900006
    },
    {
        "content": "<p>I mean multiple actual binders</p>",
        "id": 363552141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685903995
    },
    {
        "content": "<p>like <code>(a : Nat) (b : Int) |-&gt; ...</code></p>",
        "id": 363552209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685904006
    },
    {
        "content": "<p>But we could allow <code>(a : Nat) =&gt; (b : Int) =&gt; ...</code></p>",
        "id": 363565448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685909882
    },
    {
        "content": "<p>Sure, mathematicians probably wouldn't write that on paper, bur nor would they write <code>(a : Nat) -&gt; (b : Int) -&gt; ...</code></p>",
        "id": 363565530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685909936
    },
    {
        "content": "<p>Most of the time you skip the types on lambda binders anyway.</p>",
        "id": 363572446,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685914217
    },
    {
        "content": "<p>I actually prefer <code>fun</code> for (human) clarity of parsing anyway.</p>",
        "id": 363583793,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685923047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363523833\">said</a>:</p>\n<blockquote>\n<p>it seems likely that such a notation wouldn't be able to take multiple binders</p>\n</blockquote>\n<p>However, we could still have the shorthand <code>x =&gt; y</code> for single explicit binder lambdas (like JS has), which would be nice for a lot of common use cases.</p>",
        "id": 363788937,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685984603
    },
    {
        "content": "<p>After all, the syntax is just <code>term \" =&gt; \" term</code> (since patterns in Lean 4 generalize to <code>term</code>)  <br>\nEDIT: Using <code>funBinder</code> also doesn't break things (however, it does change what an <code>{x}</code> binder means)</p>",
        "id": 363789243,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685984680
    },
    {
        "content": "<p>Here is a quick example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [1, 3, 5]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [1, 3, 5]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"c1\">-- [1, 5]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Box</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">Box.mk</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [1, 3]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">Box.mk</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [1, 3]</span>\n</code></pre></div>",
        "id": 363789773,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685984803
    },
    {
        "content": "<p>I'm wary of having <code>... =&gt; ...</code> as a shortcut for <code>fun ... =&gt; ...</code>, with or without limitations. This is for similar reasons I tend to prefer <code>fun</code> over <code>Œª</code>: somebody somewhere probably has another legitimate use for <code>=&gt;</code> and using it as part of the core language may make that use impossible even as local or scoped notation. Then again, the same can be said about <code>√ó</code>, <code>‚¨ù</code>, <code>‚äï</code>, so it's not exactly clear where to draw a line.</p>",
        "id": 363794775,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1685986107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">Fran√ßois G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363794775\">said</a>:</p>\n<blockquote>\n<p>somebody somewhere probably has another legitimate use for <code>=&gt;</code> and using it as part of the core language may make that use impossible even as local or scoped notation. Then again, the same can be said about <code>√ó</code>, <code>‚¨ù</code>, <code>‚äï</code>, so it's not exactly clear where to draw a line.</p>\n</blockquote>\n<p>Yeah, I think Lean 4 already consumes enough notation that I think alternative schemes are not worth considering. Furthermore, if an end-user really wants it, they can also override Lean 4 builtin notation with higher priority syntax.</p>",
        "id": 363795679,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685986323
    },
    {
        "content": "<p>Also, in mathlib, which uses <code>‚Ü¶</code> for <code>=&gt;</code> instead, such a shorthand can be freely added without conflicting with other possible uses of <code>=&gt;</code>.</p>",
        "id": 363799497,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685987190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">Fran√ßois G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363794775\">said</a>:</p>\n<blockquote>\n<p>I'm wary of having <code>... =&gt; ...</code> as a shortcut for <code>fun ... =&gt; ...</code>, with or without limitations. This is for similar reasons I tend to prefer <code>fun</code> over <code>Œª</code>: somebody somewhere probably has another legitimate use for <code>=&gt;</code> and using it as part of the core language may make that use impossible even as local or scoped notation. Then again, the same can be said about <code>√ó</code>, <code>‚¨ù</code>, <code>‚äï</code>, so it's not exactly clear where to draw a line.</p>\n</blockquote>\n<p>It is used as notation for key-value pairs in hashmaps in some programming languages.</p>",
        "id": 363799547,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685987201
    },
    {
        "content": "<p>Inside lean, it is used in match arms</p>",
        "id": 363799743,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685987256
    },
    {
        "content": "<p>What would the right priority be for this notation?</p>",
        "id": 363800045,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685987335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363800045\">said</a>:</p>\n<blockquote>\n<p>What would the right priority for this notation?</p>\n</blockquote>\n<p>Which notation? If you mean the shorthand, <code>arg</code> (just like <code>fun</code>).</p>",
        "id": 363800503,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685987435
    },
    {
        "content": "<p>Oh, wait, <code>arg</code> is precedence, not priority. I would just give it the default priority, it does not actually conflict with any other builtin Lean 4 notation.</p>",
        "id": 363801103,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685987607
    },
    {
        "content": "<p>(Match arms are not in <code>term</code>.)</p>",
        "id": 363801195,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685987629
    },
    {
        "content": "<p>This one : <code>... =&gt; ...</code></p>",
        "id": 363801428,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685987690
    },
    {
        "content": "<p>Oh, upon further testing, I guess it does conflict with match arms because the LHS of an arm can be a term which can, with this shorthand, include <code>=&gt;</code>.</p>",
        "id": 363801772,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685987790
    },
    {
        "content": "<p>In that case, the notation needs to be something other than <code>=&gt;</code> (e.g. <code>‚Ü¶</code>  or some ascii art like <code>|-&gt;</code> which Mario was using).</p>",
        "id": 363802237,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685987910
    },
    {
        "content": "<p>So, better example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\" ‚Ü¶ \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [1, 3, 5]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [1, 3, 5]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"c1\">-- [1, 5]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Box</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">Box.mk</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [1, 3]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">Box.mk</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- [1, 3]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"c1\">-- still works</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 363802601,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685988031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363802237\">said</a>:</p>\n<blockquote>\n<p>In that case, the notation needs to be something other than <code>=&gt;</code> (e.g. <code>‚Ü¶</code>  or some ascii art like <code>|-&gt;</code> which Mario was using).</p>\n</blockquote>\n<p>In the examples, my mind keeps seeing  <code>map x</code> together followed by the arrow and then the expression. it feels very unintuitive.</p>",
        "id": 363803184,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685988208
    },
    {
        "content": "<p>Fair, I see that  for the basic <code>map x</code> sometimes too. One could put the expression in parentheses to disambiguate if they so desire:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- [1, 3, 5]</span>\n</code></pre></div>",
        "id": 363803785,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685988352
    },
    {
        "content": "<p>I definitely do not see that for the more complex matches, though. For example, <code>(a, b) ‚Ü¶ a + b</code> is very naturally a function for me (as it parallels JS function syntax).</p>",
        "id": 363804042,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685988426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363804042\">said</a>:</p>\n<blockquote>\n<p>I definitely do not see that for the more complex matches, though. For example, <code>(a, b) ‚Ü¶ a + b</code> is very naturally a function for me (as it parallels JS function syntax).</p>\n</blockquote>\n<p>is <code>(a, b)</code> a tuple or two args?</p>",
        "id": 363804189,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685988470
    },
    {
        "content": "<p>Due to <a href=\"https://en.wikipedia.org/wiki/Currying\">currying</a> both are essentially equivalent! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 363804428,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685988526
    },
    {
        "content": "<p>(The answer to your question is a tuple for the Lean example  and two arguments in JS.)</p>",
        "id": 363804704,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685988596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363804428\">said</a>:</p>\n<blockquote>\n<p>Due to <a href=\"https://en.wikipedia.org/wiki/Currying\">currying</a> both are essentially equivalent! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>in the underlying LC yes. but we do have distinct  tuple types with fst and snd operations.</p>",
        "id": 363805087,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685988688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> True, hence the \"essentially\" and the laughter. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 363805732,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685988847
    },
    {
        "content": "<p>Hence why I was suggesting simply using spaces to separate multiple args.</p>",
        "id": 363814833,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685991377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> I'm not sure what you mean by that?</p>",
        "id": 363816886,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685991899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363816886\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> I'm not sure what you mean by that?</p>\n</blockquote>\n<p>I was too tired to get your joke (end of day). After you clarified, I got it and laughed( bonus: I was also eating curry at that time)</p>",
        "id": 363818426,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685992288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363814833\">said</a>:</p>\n<blockquote>\n<p>Hence why I was suggesting simply using spaces to separate multiple args.</p>\n</blockquote>\n<p>I don't understand</p>",
        "id": 363818998,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685992453
    },
    {
        "content": "<p>Specifically, I don't see how space between args changes readability, when the issue is that intuitively <code>map</code> seems to be getting applied to <code>x</code> in the first example.</p>",
        "id": 363819485,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685992606
    },
    {
        "content": "<p>I just meant that <code>(a, b) =&gt; ‚Ä¶</code> would take a tuple, while <code>(a b) =&gt; ‚Ä¶</code> would take two parameters.</p>",
        "id": 363822041,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685993364
    },
    {
        "content": "<p>But I‚Äôm honestly not sure if that‚Äôs a good idea.</p>",
        "id": 363822287,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685993441
    },
    {
        "content": "<p>the <code>(\\. + 1)</code> syntax works well for me for short/quick lambdas, don't really feel the need for e.g. <code>(x =&gt; x+1)</code></p>",
        "id": 363826936,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685994828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363822041\">said</a>:</p>\n<blockquote>\n<p>I just meant that <code>(a, b) =&gt; ‚Ä¶</code> would take a tuple, while <code>(a b) =&gt; ‚Ä¶</code> would take two parameters.</p>\n</blockquote>\n<p>It would be very confusing as far as lean syntax goes since we usually don't have brackets for function parameters unless we are indicating two parameters of the same type. So this would be a third type of syntax people need to watch out for, for something as simple as defining a lambda, because in other places, this kind of bracket notation, especially without a type annotation, could be a function application. I don't know if having multiple gotchas for basic syntax is such a good idea. </p>\n<p>I honestly don't understand the point of any of this. What problem does this shorthand solve? Writing <code>fun</code> just requires typing 3 characters, enormously simplifies reading (and vacuously, implementation effort, since it is already implemented), and doesn't use up notation that might come in handy elsewhere as Fran√ßois points out. If at all necessary a shorthand  could be introduced locally, couldn't it?</p>",
        "id": 363831527,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685996134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> Maybe there shoudn't be such a shortcut? (See my earlier post.) Then again, it's a nice problem to work out: extending <code>=&gt;</code> this way without breaking stuff. But maybe that's a bit off topic? I think so... but I would still enjoy seeing the outcome... elsewhere?</p>",
        "id": 363835567,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1685997585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">Fran√ßois G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363835567\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> Maybe there shoudn't be such a shortcut? (See my earlier post.) </p>\n</blockquote>\n<p>I agree with this. As always, I am just worried about making syntax changes at such a basic level with so many ambiguities, and not being able to anticipate all the chaos this could cause downstream. </p>\n<blockquote>\n<p>Then again, it's a nice problem to work out: extending <code>=&gt;</code> this way without breaking stuff. But maybe that's a bit off topic? I think so... but I would still enjoy seeing the outcome.</p>\n</blockquote>\n<p>This will be interesting as a conversation on experimenting with new syntax. In that spirit it would be nice to see where it goes. But I can also imagine that any solution to this will be very brittle.</p>",
        "id": 363837751,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685998279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363831527\">said</a>:</p>\n<blockquote>\n<p>It would be very confusing as far as lean syntax goes since we usually don't have brackets for function parameters unless we are indicating two parameters of the same type. So this would be a third type of syntax people need to watch out for, for something as simple as defining a lambda, because in other places, this kind of bracket notation, especially without a type annotation, could be a function application. I don't know if having multiple gotchas for basic syntax is such a good idea. </p>\n</blockquote>\n<p>This is not really true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>all of which are demonstrating two variables of different types declared in the same binder</p>",
        "id": 363845174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686001285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363845174\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363831527\">said</a>:</p>\n<blockquote>\n<p>It would be very confusing as far as lean syntax goes since we usually don't have brackets for function parameters unless we are indicating two parameters of the same type. So this would be a third type of syntax people need to watch out for, for something as simple as defining a lambda, because in other places, this kind of bracket notation, especially without a type annotation, could be a function application. I don't know if having multiple gotchas for basic syntax is such a good idea. </p>\n</blockquote>\n<p>This is not really true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>all of which are demonstrating two variables of different types declared in the same binder</p>\n</blockquote>\n<p>In each of these cases in <code>#check</code>, it is clear that you are declaring a function or a universally quantified prop. Because of <code>fun</code> and <code>forall</code>.</p>",
        "id": 363845646,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686001508
    },
    {
        "content": "<p>Oh, I see, you mean the first sentence of my message.</p>",
        "id": 363845967,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686001664
    },
    {
        "content": "<p>What I mean is, that from an end user's perspective, I have not seen these forms very frequently (hence \"usually\")</p>",
        "id": 363847875,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686002556
    },
    {
        "content": "<p>It wouldn't be inconsistent with the rest of the grammar though. The type of each binder is elaborated separately. Here's another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">[()]</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 363848114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686002645
    },
    {
        "content": "<p>FWIW, metamath uses something close to the unadorned syntax: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>‚àà</mo><mi>A</mi><mo>‚Ü¶</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x \\in A\\mapsto e)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚àà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Ü¶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span></span></span></span> is what we would write as <code>fun x : A ‚Ü¶ e</code></p>",
        "id": 363848481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686002783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363848114\">said</a>:</p>\n<blockquote>\n<p>It wouldn't be inconsistent with the rest of the grammar though. The type of each binder is elaborated separately. Here's another example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">[()]</span> <span class=\"bp\">‚àß</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>With explicit brackets required?</p>",
        "id": 363852535,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686004664
    },
    {
        "content": "<p><code>#check ‚àÄ x y : List _, x = [()] ‚àß y = [1]</code> works too</p>",
        "id": 363852606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686004684
    },
    {
        "content": "<p>To avoid issues like this : <span aria-label=\"point down\" class=\"emoji emoji-1f447\" role=\"img\" title=\"point down\">:point_down:</span><br>\n<span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363803184\">said</a>:</p>\n<blockquote>\n<p>In the examples, my mind keeps seeing  <code>map x</code> together followed by the arrow and then the expression. it feels very unintuitive.</p>\n</blockquote>",
        "id": 363852773,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686004772
    },
    {
        "content": "<p>I'm not defending the unadorned syntax here, I think it would be somewhat ambiguous for reasons already mentioned</p>",
        "id": 363853234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686004992
    },
    {
        "content": "<p>unless you have something like metamath's required parentheses around the mapsto</p>",
        "id": 363853264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005010
    },
    {
        "content": "<p>which IMO wouldn't fit very well with lean's general design aesthetic</p>",
        "id": 363853371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005045
    },
    {
        "content": "<p>(though the simple lambda syntax does require parentheses around it heh)</p>",
        "id": 363856934,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686006828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363818426\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363816886\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> I'm not sure what you mean by that?</p>\n</blockquote>\n<p>I was too tired to get your joke (end of day). After you clarified, I got it and laughed( bonus: I was also eating curry at that time)</p>\n</blockquote>\n<p>Ha. I was apparently also distracted as meant to ask that question about Max's response, not yours (I mistakenly thought his was yours). However, you ended up asking the same question anyway. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 363928682,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686041083
    },
    {
        "content": "<p>Are we making a strategic decision about what syntax will be in the official release of Lean 4?</p>",
        "id": 363934879,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1686042648
    },
    {
        "content": "<p>I should think that Leo has no interest in changing anything, so probably not.</p>",
        "id": 363935030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686042688
    },
    {
        "content": "<p>This topic seems to have diverged to alternative syntaxes, from the original topic of removing/deprecating <code>Œª</code></p>",
        "id": 389520610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694036723
    },
    {
        "content": "<p>Should we deprecate it / lint against it in Mathlib? Or at least recommend one spelling over the other in the style guide?</p>",
        "id": 389520825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694036760
    },
    {
        "content": "<p>I did recommend one over the other in the style guide <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> but I would be happy if we deprecate or lint against it.</p>",
        "id": 389526918,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694039981
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span>, who asked whether we had actually recorded the decision anyway; it sounds like the answer is now \"yes, <a href=\"https://leanprover-community.github.io/contribute/style.html#the-anonymous-function-arrow\">https://leanprover-community.github.io/contribute/style.html#the-anonymous-function-arrow</a>\")</p>",
        "id": 389587398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694070891
    },
    {
        "content": "<p>I still don't really get why there's any preference at all. <code>Œª</code> is nice and concise. <code>fun</code> looks like a declaration name.</p>",
        "id": 389622979,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1694082570
    },
    {
        "content": "<p>Can we use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œª</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">Œª</span></span></span></span> to mean a scalar in a field? (E.g., an eigenvalue, etc...)</p>",
        "id": 389623199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694082633
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Œª</span> <span class=\"bp\">=</span> <span class=\"bp\">Œª</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- expected '_' or identifier</span>\n</code></pre></div>",
        "id": 389623411,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1694082709
    },
    {
        "content": "<p>In the same vein, did we take a clear decision about <code>&lt;|</code> vs <code>$</code>?</p>",
        "id": 389631400,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694085026
    },
    {
        "content": "<p>I thought we moved away from lambda to free it up for identifiers, but perhaps that'd need some core changes</p>",
        "id": 389633015,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694085587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20we.20remove.2Fdeprecate.20.CE.BB.3F/near/363388970\">said</a>:</p>\n<blockquote>\n<p>I think that <code>Œª</code> is not so friendly to mathematical uses. It's type theory jargon. Also <code>Œª x =&gt; e</code> looks worse to me than <code> Œª x, e</code> as a logician, while <code>fun x =&gt; e</code> looks more stylistically consistent. (The same thing applies with <code>\\mapsto</code> in place of <code>=&gt;</code>, IMO)</p>\n</blockquote>\n<p>I think this is on spot; I think many people would rather have <code>Œª</code> available as an identifier.<br>\nBy the way, I like <code>‚Ü¶</code>over <code>=&gt;</code> for this particular use.</p>",
        "id": 389637048,
        "sender_full_name": "Pedro S√°nchez Terraf",
        "timestamp": 1694086811
    },
    {
        "content": "<p>The switch from <code>Œª x, e</code> to <code>fun x =&gt; e</code> is my least favorite syntactic change from Lean 3 to Lean 4.<br>\nAnd, to add another unpopular opinion, I prefer <code>=&gt;</code> over <code>‚Ü¶</code> because the latter looks almost like <code>‚Üí</code> visually.</p>",
        "id": 389638342,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1694087218
    },
    {
        "content": "<p>I should note that, before I found Lean, I used to write <code>Œª x. e</code> as a notation for functions on paper, hence the Lean 3 version was much closer to what I was used to (than the the Lean 4 version is).</p>",
        "id": 389638991,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1694087394
    },
    {
        "content": "<p><span aria-label=\"bicycle\" class=\"emoji emoji-1f6b2\" role=\"img\" title=\"bicycle\">:bicycle:</span> <span aria-label=\"painting\" class=\"emoji emoji-1f3a8\" role=\"img\" title=\"painting\">:painting:</span></p>",
        "id": 389641850,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694088293
    },
    {
        "content": "<p>Did you mean <span aria-label=\"bike\" class=\"emoji emoji-1f6b2\" role=\"img\" title=\"bike\">:bike:</span> <span aria-label=\"house\" class=\"emoji emoji-1f3e0\" role=\"img\" title=\"house\">:house:</span> ?</p>",
        "id": 389642078,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1694088366
    },
    {
        "content": "<p>Sure. I couldn't find a shed emoji, but remembered the original story was about choosing what colour to paint the said shed ...</p>",
        "id": 389643472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694088858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> yes, but the stance is only unofficial in the style guide: we make mention of <code>&lt;|</code> but do not mention <code>$</code>. You should prefer the former over the latter for parallelism with <code>|&gt;</code>.</p>",
        "id": 389663335,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694094268
    },
    {
        "content": "<p>I think it would be fine to just declare <code>$</code> as against mathlib style (possibly even via a linter); having two spellings for exactly the same thing just means more things to teach beginners, and that it's harder to read lean code when switching from one file to another</p>",
        "id": 389664155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694094459
    },
    {
        "content": "<p>and of course the symmetry with |&gt; and &lt;| makes it immediately better in my eyes :)</p>",
        "id": 389685190,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694099136
    },
    {
        "content": "<p>It's really too bad <code>&lt;|</code> is so long.</p>",
        "id": 389685523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694099220
    },
    {
        "content": "<p><code>\\&lt;|</code> is one character wide if you prefer :p</p>",
        "id": 389685796,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694099284
    },
    {
        "content": "<p>oh, that doesn't work. what's the shortcut for the unicode version??</p>",
        "id": 389686026,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694099344
    },
    {
        "content": "<p>I don't think there is a unicode version. However many fonts will make a ligature there.</p>",
        "id": 389686454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694099449
    },
    {
        "content": "<p>got it :)</p>",
        "id": 389686560,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694099481
    },
    {
        "content": "<p><code>|&gt;</code> is really unnatural imo and I never use <code>&lt;|</code> so the symmetry argument doesn't hold.</p>",
        "id": 389703184,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1694103891
    },
    {
        "content": "<p>I also do not get which way around you're supposed to read the symbols so I'd end up mixing them up.</p>",
        "id": 389703409,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1694103960
    },
    {
        "content": "<p>And it's more ASCII art, of course.</p>",
        "id": 389703654,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1694104003
    },
    {
        "content": "<p>It's in reverse: <code>&lt;|</code> is the equivalent of <code>$</code>. <code>|&gt;</code> is great because it works fine with dot notation: you can do <code>foo x |&gt;.bar y |&gt;.baz</code> instead of <code>((foo x).bar y).baz</code>, with potential line breaks just before <code>|&gt;.</code></p>",
        "id": 389704270,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694104144
    },
    {
        "content": "<p>Ahah, point made <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 389704379,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1694104177
    },
    {
        "content": "<p>I agree that none of this is \"intuitive\", but it's at least not worse than <code>$</code></p>",
        "id": 389704608,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694104229
    },
    {
        "content": "<p>I'm not sure if this is the intended meaning, but I view it like a shell pipe <code>|</code> with an arrow saying which side is being piped into which other side, but that's just my own personal mnemonic that I didn't realize I had until just now.</p>",
        "id": 389708420,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694105206
    },
    {
        "content": "<p>Wait is that <em>not</em> the intended meaning?</p>",
        "id": 389708947,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694105339
    },
    {
        "content": "<p>I don't know, i just realized that's how I thought of it and I wasn't sure if that was the common or intended meaning.</p>",
        "id": 389709138,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694105392
    },
    {
        "content": "<p>I'm like Yael, I never know which way to point, I often just guess :-)</p>",
        "id": 389714432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694106844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I think that's the intended mnemonic. In F# I've seen sequences of the <code>|&gt;</code> operator be called pipelines. (I guess F# also has fun things like <code>f &lt;|| p</code> for <code>f p.1 p.2</code>.)</p>\n<p>(My own personal mnemonic I didn't realize I had is that <code>&lt;|</code> is sort of like a little cliff face, so in <code>f &lt;| x</code> you have <code>x</code> at a higher elevation, and everything to the right of <code>&lt;|</code> is grouped together into the same plateau.)</p>",
        "id": 389738956,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694114129
    },
    {
        "content": "<p>for me I quite like the idea of it acting like a funnel and \"funneling\" everything together</p>",
        "id": 389765661,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694124266
    },
    {
        "content": "<p>For me <code>f &lt;| g x</code> looks like it feeds the argument <code>g x</code> into <code>f</code>. Or that we‚Äôre zooming into <code>f</code>‚Äôs argument spot, kind of like a magnification callout bubble.</p>\n<p>As someone who never had to get used to <code>$</code>, it looks somewhat busy and letterlike to me‚ÄîI can tell at a glance how symbols are grouped in <code>f &lt;| g x</code> (the spacing helps too: <code>g x</code> becomes a visual unit apart from <code>f</code>) but not <code>f $ g x</code> (‚Äúwait, is one of those not a letter?‚Äù). Then again, I am using a font which makes <code>&lt;|</code> a clean triangle. I think I‚Äôd still prefer <code>&lt;|</code> for looking clearer to me than <code>$</code> if I weren‚Äôt, but maybe not as much.</p>",
        "id": 389803641,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694145188
    },
    {
        "content": "<p>To remember which is which, I use that (the first symbol of) <code>&lt;|</code>and <code>(</code> are curved in the same direction so they correspond to each other, while <code>|&gt;</code> and <code>)</code> are curved in the same direction so they correspond to each other.</p>",
        "id": 389812553,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694151021
    },
    {
        "content": "<p>it's definitely encouraging that there are so many reasonable ways to remember them. maybe we PR these to the docstrings!</p>",
        "id": 389814178,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694151995
    }
]