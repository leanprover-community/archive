[
    {
        "content": "<p>Do we have a tactic which contracts equalities under various binders when possible? For example given <code>h : ∃ a b c, a = b ∧ b  = c ∧ foo c</code> I want to simplify to <code>h : ∃ a, foo a</code> without performing any other simplifications.</p>",
        "id": 355826705,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1683217313
    },
    {
        "content": "<p>Does simp make progress? You could do something with simp only if it does</p>",
        "id": 355828031,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683217635
    },
    {
        "content": "<p>Unfortunately this kind of goals isn't very simp-friendly. Try <code>simp {contextual := true}</code>, though.</p>",
        "id": 355828733,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683217784
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span>  <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>  <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>works!</p>",
        "id": 355830708,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683218261
    },
    {
        "content": "<p>Shouldn't the goal be <code>f a</code> rather than <code>a</code>?</p>",
        "id": 355831098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683218352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571451\">@Jeremy Salwen</span> Fails to simplify for <code>(h : ∃ a b c, a = b ∧ b  = c ∧ f c ∨ f a)</code> though</p>",
        "id": 355831251,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1683218396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I'm getting an error on this, is this a fairly new addition to simp?</p>",
        "id": 355831351,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1683218412
    },
    {
        "content": "<p>No, it's an old one. I suspect the syntax has changed in Lean 4.</p>",
        "id": 355831463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683218441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571451\">@Jeremy Salwen</span> The issue is also that a pure <code>simp</code> does <em>too much</em> in other situations</p>",
        "id": 355831597,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1683218476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Ah, it's <code>simp (config := { contextual := true})</code> now</p>",
        "id": 355831887,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1683218551
    },
    {
        "content": "<p>Ugh, that's a mouthful</p>",
        "id": 355832027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683218581
    },
    {
        "content": "<p>Hm, so the result of that is not too bad, probably I can make it work if I find a good simp set. Some of the simp lemmas prevent equalities in nested existential quantifiers to be contracted further.</p>",
        "id": 355833487,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1683218950
    },
    {
        "content": "<p>Adding the following lemma lets simp solve it: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span>  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>  <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is similar to the <code>exists_and_left</code> lemma which simp uses to simplify the first expression, but pushing the extential quantifier in through an <code>or</code> expression instead of an <code>and</code> expression.</p>",
        "id": 355835752,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683219528
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 374092493,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1689026410
    },
    {
        "content": "<p>You might be interested in this talk: <a href=\"https://matryoshka-project.github.io/matryoshka2018/slides/Matryoskha-2018-Hoelzl-Generalising-the-One-Point-Rule.pdf\">https://matryoshka-project.github.io/matryoshka2018/slides/Matryoskha-2018-Hoelzl-Generalising-the-One-Point-Rule.pdf</a></p>",
        "id": 374093520,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689026799
    },
    {
        "content": "<p>Thanks <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 374094164,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1689027070
    },
    {
        "content": "<p>Though this issue is simply about <code>simp</code>s unification behaviour under <code>∃ </code>  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 374094241,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1689027102
    },
    {
        "content": "<p>Maybe I'm just too tired, but now it simplifies</p>",
        "id": 374094529,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1689027233
    },
    {
        "content": "<p>Ignore my last message <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 374094556,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1689027242
    },
    {
        "content": "<p>I should also warn you that <code>foo</code> is false.</p>",
        "id": 374094587,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689027244
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 374095168,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1689027541
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 374095462,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1689027650
    },
    {
        "content": "<p>Fixed the example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)]</span>  <span class=\"c1\">-- fails to simplify without giving `Q`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 374108031,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1689034895
    }
]