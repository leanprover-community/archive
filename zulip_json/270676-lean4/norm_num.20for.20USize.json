[
    {
        "content": "<p>How do I make <code>norm_num</code> work for <code>USize</code>? I'm working with fixed size arrays where the size is <code>USize</code> and I want to simplify the array size in the type with <code>norm_num</code>.</p>",
        "id": 405871360,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701709153
    },
    {
        "content": "<p>Lots of USize functions are implemented natively  and implementation + system dependent. So even if you prove something about the function, it may not apply to the implementation.  See <a href=\"https://github.com/leanprover/lean4/blob/b0fe9d6cdca82723134d61f8fe23a8c674f308b7/src/Init/Prelude.lean#L2030-L2030\">USize.usize</a> which depends on architecture and <a href=\"https://github.com/leanprover/lean4/blob/b0fe9d6cdca82723134d61f8fe23a8c674f308b7/src/Init/Prelude.lean#L2001-L2004\">decEq</a> which defers to implementation</p>\n<p>See this example below. The two values are definitionally unequal but in the implementation they are equal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">18446744073709552000</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">384</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- error as expected</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">18446744073709552000</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">384</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span> <span class=\"c1\">-- no error</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">18446744073709552000</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"c1\">-- most likely why there is no error</span>\n</code></pre></div>\n<p>So would it make sense to prove anything about them?</p>",
        "id": 405877748,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701710754
    },
    {
        "content": "<p>I do not see the problem <code>USize</code> wraps around on overflow similar to <code>Fin</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">15</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">15</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">18446744073709552000</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">384</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- failed to reduce to 'true'</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">18446744073709552000</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">384</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n</code></pre></div>\n<p>The <code>by decide</code> fails probably just because the numbers are so large.</p>",
        "id": 405879045,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701711095
    },
    {
        "content": "<p>In fact the spec of <code>USize</code> is just <code>Fin USize.size</code></p>",
        "id": 405879185,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701711125
    },
    {
        "content": "<p>Do we have an axiom or w/e that claims we always have a 32 or 64 bit USize.size?</p>",
        "id": 405879400,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1701711187
    },
    {
        "content": "<p>That way you could case split and norm_num individually right?</p>",
        "id": 405879437,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1701711198
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">18446744073709552000</span> <span class=\"bp\">=</span> <span class=\"mi\">384</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- goal state False because it upcasts to Nat</span>\n</code></pre></div>",
        "id": 405879824,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701711331
    },
    {
        "content": "<p>Wouldn't a  time out would cause a <code>maxHeartbeats error</code>?</p>",
        "id": 405880018,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701711387
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405880428,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701711516
    },
    {
        "content": "<p>Sorry : typo. I meant to type 6 instead of 3. Inequalities do seem to work for Fin. Still, its correspondence to execution may be poor for USize.</p>",
        "id": 405880534,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701711550
    },
    {
        "content": "<p>Ok this might be a XY problem</p>\n<p>I have <code>Expr</code> e.g. <code>(10*2 / 4 : USize)</code> and I want to turn it into <code>5 : USize</code> and proof that they are equal. </p>\n<p>I though I would call conv <code>norm_num</code> on <code>10*2 / 4</code>and get <code>5</code>. Then I can call either <code>norm_num</code> or <code>native_decide</code> on <code>10*2/4 = 5</code>.</p>",
        "id": 405880858,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701711669
    },
    {
        "content": "<p>I'm dealing with concrete and small enough numbers such that all the overflow nonsens is completely irrelevant</p>",
        "id": 405881037,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701711726
    },
    {
        "content": "<p>I did a show term on two examples</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">norm_num</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">refine</span>\n<span class=\"cm\">    Eq.mpr</span>\n<span class=\"cm\">      (id</span>\n<span class=\"cm\">        (congrFun</span>\n<span class=\"cm\">          (congrArg Eq</span>\n<span class=\"cm\">            (congrFun</span>\n<span class=\"cm\">              (congrArg HDiv.hDiv</span>\n<span class=\"cm\">                (Mathlib.Meta.NormNum.IsNat.to_eq</span>\n<span class=\"cm\">                  (Mathlib.Meta.NormNum.isNat_mul (Eq.refl HMul.hMul)</span>\n<span class=\"cm\">                    (Mathlib.Meta.NormNum.isNat_ofNat USize (Eq.refl 10))</span>\n<span class=\"cm\">                    (Mathlib.Meta.NormNum.isNat_ofNat USize (Eq.refl 2)) (Eq.refl 20))</span>\n<span class=\"cm\">                  (Eq.refl 20)))</span>\n<span class=\"cm\">              4))</span>\n<span class=\"cm\">          5))</span>\n<span class=\"cm\">      ?_</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">norm_num</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">   exact</span>\n<span class=\"cm\">    of_eq_true</span>\n<span class=\"cm\">      (eq_true</span>\n<span class=\"cm\">        (Mathlib.Meta.NormNum.isNat_eq_true</span>\n<span class=\"cm\">          (Mathlib.Meta.NormNum.isNat_natDiv</span>\n<span class=\"cm\">            (Mathlib.Meta.NormNum.isNat_mul (Eq.refl HMul.hMul)</span>\n<span class=\"cm\">              (Mathlib.Meta.NormNum.isNat_ofNat ℕ (Eq.refl 10))</span>\n<span class=\"cm\">              (Mathlib.Meta.NormNum.isNat_ofNat ℕ (Eq.refl 2)) (Eq.refl 20))</span>\n<span class=\"cm\">            (Mathlib.Meta.NormNum.isNat_ofNat ℕ (Eq.refl 4)) (Eq.refl 5))</span>\n<span class=\"cm\">          (Mathlib.Meta.NormNum.isNat_ofNat ℕ (Eq.refl 5))))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 405881853,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701712033
    },
    {
        "content": "<p>But I need <code>norm_num</code> as a conv tactic not as proving tactic</p>",
        "id": 405882171,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701712158
    },
    {
        "content": "<p>It doesn't work even outside conv. Because it can't figure out nat division in the Usize example even though it has converted the Usizes to Nats. EDIT: Inside conv it does the same thing for the USize example</p>",
        "id": 405882262,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701712199
    },
    {
        "content": "<p>I think the answer to your original question is \"find or define the <code>Ring</code> instance\"</p>",
        "id": 405882656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701712331
    },
    {
        "content": "<p>Why? Nat is not a ring and norm_num works for Nat.</p>",
        "id": 405882844,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701712418
    },
    {
        "content": "<p>I think based on examining the terms that <code>norm_num</code> is recasting the multiplication of <code>10*2</code> back to <code>USize</code>. So it rules out <code>natDiv</code> for the next step.</p>",
        "id": 405885837,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701713534
    },
    {
        "content": "<p>a solution might be to provide a <code>Div</code> instance or a <code>div</code> function for <code>USize</code> and tag it with <code>norm_num</code>'s attribute somehow (not entirely sure how instances can be tagged).</p>",
        "id": 405886091,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701713626
    },
    {
        "content": "<p><code>norm_num</code> only knows about Nat and Int division</p>",
        "id": 405887733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701714249
    },
    {
        "content": "<p>If you want to get <code>norm_num</code> to work with <code>USize</code> division, either you have to write a <code>@[norm_num]</code> plugin for this operation, or you have to transform your expression into Nat arithmetic and run <code>norm_num</code>, if that's possible.</p>",
        "id": 405887887,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701714311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/norm_num.20for.20USize/near/405887733\">said</a>:</p>\n<blockquote>\n<p><code>norm_num</code> only knows about Nat and Int division</p>\n</blockquote>\n<p>Oops, that's incorrect. It also knows about <code>DivisionRing</code></p>",
        "id": 405888067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701714381
    },
    {
        "content": "<p>I'm not sure this is documented anywhere, so I'll mention what else I found here. It appears to get <code>norm_num</code> to handle addition you just need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidWithOne#doc\">docs#AddMonoidWithOne</a>, and for multiplication you just need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Semiring#doc\">docs#Semiring</a></p>\n<p>That's for natural number literals. To handle integer literals too, you need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ring#doc\">docs#Ring</a> for both.</p>",
        "id": 405890930,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701715468
    },
    {
        "content": "<p>Can confirm the issue with USize division: </p>\n<p>UPDATE: The issue is with Fin division. See last example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">100</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">25</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">15</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- doesn't work</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">--  works for Nat division</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">usizeDiv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">x.toNat</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">y.toNat</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toUSize</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">usizeDiv</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">usizeDiv</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">usizeDiv</span><span class=\"o\">]</span> <span class=\"c1\">-- also doesn't work</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span> <span class=\"c1\">-- doesn't work</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">89</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">89</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">89</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span> <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>",
        "id": 405891575,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701715720
    },
    {
        "content": "<p>The issue is with Fin division.</p>",
        "id": 405892184,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701715951
    },
    {
        "content": "<p>Probably because of the division being ill-defined in general modulo composites (though it also doesn't work for <code>Fin 87</code> for example).</p>",
        "id": 405892660,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701716144
    },
    {
        "content": "<p><code>87 = 3 * 29</code></p>",
        "id": 405892958,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701716251
    },
    {
        "content": "<p>Sorry 89</p>",
        "id": 405892974,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701716258
    },
    {
        "content": "<p>Copy pasted the 89 version in the code sample above.</p>",
        "id": 405893190,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701716323
    },
    {
        "content": "<p>Here's a way to write your demonstrations to protect against it accidentally using <code>rfl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> 100 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> 25 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> 15 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> 20 / 5 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 405894041,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701716576
    },
    {
        "content": "<p>That looks neater too. But yeah the reason <code>norm_num</code> doesn't work inside or outside <code>conv</code> on <code>USize</code> with Tomas's example is clearly because of division on <code>Fin</code>s not being meaningfully defined</p>",
        "id": 405894525,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701716749
    },
    {
        "content": "<p>In particular, it's neither <code>Nat</code>, <code>Int</code>, nor a type with a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivisionRing#doc\">docs#DivisionRing</a> instance.</p>",
        "id": 405895395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701717144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I didn't finish it (there's a missing proof), but here's a <code>norm_num</code> extension for <code>USize</code> division:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 20 / 5 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isNat_USizeDiv</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"n\">IsNat</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalUSizeDiv</span> <span class=\"o\">:</span> <span class=\"n\">NormNumExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|←</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">HDiv.hDiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">USize</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">sUSize</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">na</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">deriveNat</span> <span class=\"n\">a</span> <span class=\"n\">sUSize</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">nb</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">deriveNat</span> <span class=\"n\">b</span> <span class=\"n\">sUSize</span>\n  <span class=\"k\">have</span> <span class=\"n\">nc</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkRawNatLit</span> <span class=\"o\">((</span><span class=\"n\">na.natLit</span><span class=\"bp\">!</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nb.natLit</span><span class=\"bp\">!</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">nb</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">nc</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"bp\">$</span><span class=\"n\">nc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">isNat</span> <span class=\"n\">sUSize</span> <span class=\"n\">nc</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">isNat_USizeDiv</span> <span class=\"bp\">$</span><span class=\"n\">pa</span> <span class=\"bp\">$</span><span class=\"n\">pb</span> <span class=\"bp\">$</span><span class=\"n\">pf</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 4 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> 5 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You could extend it to be for <code>Fin</code> division in general.</p>",
        "id": 405897783,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701718114
    },
    {
        "content": "<p>Thanks, will look into it!</p>",
        "id": 405897865,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701718150
    },
    {
        "content": "<p>The <code>sorry</code> isn't so bad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a'</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"bp\">%</span> <span class=\"n\">USize.size</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 405897916,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701718173
    },
    {
        "content": "<p>I might be still in XY problem, what I'm trying to do is to fill the hole in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>and give a proof of it.</p>\n<p>My idea is to run <code>norm_num</code> on <code>(3* n + n + 1 - 1) / 2</code>. Get <code>2*n</code> and then prove <code>2 * (2*n) = 3 * n + n + 1</code> with <code>norm_num</code> again.</p>",
        "id": 405898246,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701718296
    },
    {
        "content": "<p>Hmm, a warning, my code is apparently buggy.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  Mathlib.Meta.NormNum.isNat_USizeDiv (Mathlib.Meta.NormNum.isNat_ofNat USize (Eq.refl 20))</span>\n<span class=\"cm\">    (Mathlib.Meta.NormNum.isNat_ofNat USize (Eq.refl 5)) (Eq.refl 4)</span>\n<span class=\"cm\">argument has type</span>\n<span class=\"cm\">  4 = 4</span>\n<span class=\"cm\">but function has type</span>\n<span class=\"cm\">  Nat.div (20 % USize.size) (5 % USize.size) = 4 → Mathlib.Meta.NormNum.IsNat (20 / 5) 4</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>I'm not sure why the <code>Nat.div</code> isn't reducing here.</p>",
        "id": 405898427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701718370
    },
    {
        "content": "<p>I'm not sure <code>norm_num</code> is the right tactic for that, since it's not designed for normalize expressions with free variables. Maybe you want to apply <code>ring_nf</code> to <code>LHS - RHS = 0</code> and then try to solve for <code>?k</code>?</p>",
        "id": 405898716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701718494
    },
    {
        "content": "<p>Ahh using <code>ring_nf</code> on <code>LHS - RHS</code> is great idea!</p>",
        "id": 405898950,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701718598
    },
    {
        "content": "<p>I think I have an idea what the issue with the code might be.  See below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">USize.size</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">USize.size</span> <span class=\"bp\">=</span> <span class=\"mi\">18446744073709551616</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 405900708,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701719331
    },
    {
        "content": "<p>Ah, <code>System.Platform.numBits</code> is opaque</p>",
        "id": 405900951,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701719438
    },
    {
        "content": "<p>I guess the <code>norm_num</code> extension could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.Platform.numBits_eq#doc\">docs#System.Platform.numBits_eq</a> and create proofs in the special case that division gives the same result both in 32-bit and 64-bit systems.</p>",
        "id": 405901068,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701719500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/norm_num.20for.20USize/near/405900951\">said</a>:</p>\n<blockquote>\n<p>Ah, <code>System.Platform.numBits</code> is opaque</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/c91ece4f58fffeb4ed987a9bb879e697ee132d28/src/Init/Prelude.lean#L1773\">Yep</a></p>",
        "id": 405901317,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701719600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/norm_num.20for.20USize/near/405901068\">said</a>:</p>\n<blockquote>\n<p>I guess the <code>norm_num</code> extension could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.Platform.numBits_eq#doc\">docs#System.Platform.numBits_eq</a> and create proofs in the special case that division gives the same result both in 32-bit and 64-bit systems.</p>\n</blockquote>\n<p>A slightly weird and tedious to provide solution would be to hardcode the constant into platform specific releases of lean rather than get it from CPP code. Then it wouldn't have to be opaque.</p>",
        "id": 405932236,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701732671
    },
    {
        "content": "<p>Maybe still have the native implementation but use it to tag the hardcoded version with an <code>implemented_by</code> attribute as with much of the <code>Usize</code> API for execution purposes.</p>",
        "id": 405932475,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701732843
    },
    {
        "content": "<p>I hesitated to suggest this because any library dependent on this constant will be potentially bugged if run on a system with a different value, unless we provide some weird cmake style syntactic wizardry to modify lean files by lake when it builds or fetches caches. It is just a totally hideous solution.</p>",
        "id": 405932594,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701732938
    },
    {
        "content": "<p>How would proofs about USize carry over from one system to another? I think the purpose of it being opaque is to make it so the proof environment is oblivious to the word size.</p>",
        "id": 405938786,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701735873
    },
    {
        "content": "<p>I got the <code>USize</code> division to work for constants that fit inside <code>Fin (2^32)</code>. Pasting it here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 20 / 5 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_pow_numBits</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">System.Platform.numBits</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">System.Platform.numBits</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">hbits</span> <span class=\"bp\">|</span> <span class=\"n\">hbits</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">System.Platform.numBits_eq</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">hbits</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isNat_USizeDiv</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"n\">IsNat</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span>\n    <span class=\"n\">IsNat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h32</span><span class=\"o\">,</span> <span class=\"n\">h64</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">unfold_projs</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">USize.div</span>\n    <span class=\"n\">unfold_projs</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Fin.div</span>\n    <span class=\"n\">unfold_projs</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">USize.size</span><span class=\"o\">]</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">hbits</span> <span class=\"bp\">|</span> <span class=\"n\">hbits</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">System.Platform.numBits_eq</span>\n     <span class=\"bp\">&lt;;&gt;</span> <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hbits</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n           <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span>\n           <span class=\"n\">apply</span> <span class=\"n\">USize.eq_of_val_eq</span>\n           <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">USize.size</span><span class=\"o\">)</span>\n           <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.val_cast_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalUSizeDiv</span> <span class=\"o\">:</span> <span class=\"n\">NormNumExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|←</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">HDiv.hDiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">USize</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">sUSize</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">na</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">deriveNat</span> <span class=\"n\">a</span> <span class=\"n\">sUSize</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">nb</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">deriveNat</span> <span class=\"n\">b</span> <span class=\"n\">sUSize</span>\n  <span class=\"k\">have</span> <span class=\"n\">nc32</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkRawNatLit</span> <span class=\"o\">((</span><span class=\"n\">na.natLit</span><span class=\"bp\">!</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nb.natLit</span><span class=\"bp\">!</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">nc64</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkRawNatLit</span> <span class=\"o\">((</span><span class=\"n\">na.natLit</span><span class=\"bp\">!</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nb.natLit</span><span class=\"bp\">!</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span><span class=\"o\">))</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">nc32</span> <span class=\"bp\">==</span> <span class=\"n\">nc64</span>\n  <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">nc32</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">nc64</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">pf32</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">nb</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">nc32</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"bp\">$</span><span class=\"n\">nc32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">pf64</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">nb</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">nc64</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"bp\">$</span><span class=\"n\">nc64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"n\">Nat.div</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">nb</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">nc64</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">isNat</span> <span class=\"n\">sUSize</span> <span class=\"n\">nc64</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">isNat_USizeDiv</span> <span class=\"bp\">$</span><span class=\"n\">pa</span> <span class=\"bp\">$</span><span class=\"n\">pb</span> <span class=\"bp\">$</span><span class=\"n\">pf32</span> <span class=\"bp\">$</span><span class=\"n\">pf64</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 4 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> 5 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span>\n</code></pre></div>",
        "id": 405939157,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701736037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/norm_num.20for.20USize/near/405938786\">said</a>:</p>\n<blockquote>\n<p>How would proofs about USize carry over from one system to another? .</p>\n</blockquote>\n<p>It wouldn't. That is what I mean by \"any library dependent on this constant will be potentially bugged if run on a system with a different value\"</p>",
        "id": 405993556,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701761552
    },
    {
        "content": "<p>it's worse than that, if you use oleans to ship compiled libraries (as mathlib does) then the downstream code running on another target architecture can prove <code>False</code> by combining what it knows about the constant with what mathlib proved about it on another target</p>",
        "id": 405994449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701761946
    },
    {
        "content": "<p>Then again, oleans are definitely not portable between 64 bit and 32 bit systems, and mathlib cache does not support 32 bit arches</p>",
        "id": 405994519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701761993
    },
    {
        "content": "<p>mixing 32 bit and 64 bit oleans should lead to ABI incompatibilities, ruling out the compilation of such programs.</p>",
        "id": 406014045,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701769164
    },
    {
        "content": "<p>There is a more basic question I don't know the answer to: Do we even support any 32 bit systems?</p>",
        "id": 406014417,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701769284
    },
    {
        "content": "<p>Besides compression, another advantage of .ltar files is their cross-platform compatibility. The packing / unpacking process can produce compatible oleans across systems</p>",
        "id": 406015129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701769516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/norm_num.20for.20USize/near/406014417\">said</a>:</p>\n<blockquote>\n<p>There is a more basic question I don't know the answer to: Do we even support any 32 bit systems?</p>\n</blockquote>\n<p>Lean is technically compilable on 32 bit but I don't think there is much support</p>",
        "id": 406015231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701769552
    },
    {
        "content": "<p><a href=\"https://lean-lang.org/lean4/doc/setup.html#supported-platforms\">https://lean-lang.org/lean4/doc/setup.html#supported-platforms</a></p>",
        "id": 406015389,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701769602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/norm_num.20for.20USize/near/406015389\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://lean-lang.org/lean4/doc/setup.html#supported-platforms\">https://lean-lang.org/lean4/doc/setup.html#supported-platforms</a></p>\n</blockquote>\n<p>This I know. I recently read FPIL. I am thinking about lean as whole (i.e. vscode + lean + lake + elan...) . For example here's this announcement on the vscode page that they are not supporting 32 bit linux since 2019: <a href=\"https://code.visualstudio.com/updates/v1_32\">https://code.visualstudio.com/updates/v1_32</a> (scroll down to the Engineering section)</p>",
        "id": 406015694,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701769707
    },
    {
        "content": "<p>like it says, tier 2 support means that it's not tested</p>",
        "id": 406015892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701769767
    },
    {
        "content": "<p>so the stuff is there in principle but it might not all work together</p>",
        "id": 406015947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701769787
    },
    {
        "content": "<p>In practice the only 32-bit platform we're interested in is wasm. Whether a standard setup for it, which does not exist yet, will consist of cross-compiling from x86-64 or x86 is an open question.</p>",
        "id": 406018576,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701770465
    }
]