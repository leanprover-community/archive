[
    {
        "content": "<p>I am creating a syntax for a simple DSL and I would like to reuse the <code>ident</code> parser.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">HTerm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">HTerm</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">rw_term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">rw_term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"n\">rw_term</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">rw_term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HTerm.ctr</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n</code></pre></div>\n<p>However, this is what I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"c1\">-- HTerm.num 4</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- error: unknown identifier 'n'</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Double</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"c1\">-- error: unknown identifier 'Double'</span>\n</code></pre></div>\n<p>What am I missing here? Is there a different <code>ident</code>-like parser I can use to reuse the lexical rules? (Note that <code>str</code> is too open ended and requires quotes around it.</p>",
        "id": 296991901,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662211219
    },
    {
        "content": "<p>You are constructing the term <code>toString Double</code>, which is not what you want I assume</p>",
        "id": 296993562,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662212144
    },
    {
        "content": "<p>to expand upon that, where you call <code>(toString $name)</code> in your macro rules, you are just interpreting the identifier as a variable name and letting Lean expand that. For what you want, you probably want to construct a string literal out of your identifier, which you could do with something like <code>$(Lean.quote name.getId.toString)</code> instead</p>",
        "id": 296995593,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1662213274
    },
    {
        "content": "<p>the <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">metaprogramming book</a> might also be quite helpful to read up on this stuff</p>",
        "id": 296995677,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1662213317
    },
    {
        "content": "<p>This works now, thanks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|$</span><span class=\"n\">numb</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HTerm.num</span> <span class=\"bp\">$</span><span class=\"n\">numb</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HTerm.var</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">name.getId.toString</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">arg</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HTerm.ctr</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">name.getId.toString</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- HTerm.var \"n\"</span>\n</code></pre></div>",
        "id": 296996889,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662213983
    },
    {
        "content": "<p>This was a stupid error: not being careful with what you end up putting inside `() without anti-quoting it. I will sure do this a few more times ... :-)</p>\n<p>The second thing is that it is not obvious how to \"quote the string representation of ident\". For possibly my future self, I found references to <code>Lean.quote</code> in <a href=\"https://github.com/leanprover/lean4/blob/e8335240d8b0a587e41a61a9f000e2998ae1260e/doc/metaprogramming-arith.md?plain=1#L90\">here</a>, <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/d83aa274ff2e780ba8fd872302ab99bda6cfb65b/lean/extra/pretty-printing.lean#L162\">here</a>, and <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/d83aa274ff2e780ba8fd872302ab99bda6cfb65b/md/extra/pretty-printing.md?plain=1#L162-L163\">here</a>.</p>\n<p>One thing that makes this harder to troubleshoot is the disconnect between the surface syntax \"`[rw| n]\" and the final syntax that causes the compilation error. Is there a way to dump this final syntax that Lean is using to elaborate? Maybe that should be part of the error message.</p>",
        "id": 296997112,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662214090
    },
    {
        "content": "<p>btw, the syntax in the Metaprogramming book's chapter on <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/extra/pretty-printing.md\">Pretty Printing</a> seems to be exactly what I was looking for.</p>",
        "id": 296998888,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662215055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 296998905,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662215063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> See <a href=\"https://leanprover.github.io/lean4/doc/dev/debugging.html#tracing\">https://leanprover.github.io/lean4/doc/dev/debugging.html#tracing</a>. It would probably be good to incorporate this information into the metaprogramming book as well</p>",
        "id": 296999050,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662215144
    },
    {
        "content": "<p>FWIW, there is already a general issue created for this <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/issues/67\">here</a> and a page on the <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/extra/options.md\">options</a> mechanism in general.</p>",
        "id": 297013173,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662222642
    },
    {
        "content": "<p>It turns out the following would have enabled me to see the macro expansion and possibly a specific addition to the docs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.raw</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.step</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- error: unknown identifier 'n'</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'n'</span>\n<span class=\"n\">cannot</span> <span class=\"n\">evaluate</span> <span class=\"n\">code</span> <span class=\"n\">because</span> <span class=\"bp\">'</span><span class=\"n\">sorryAx'</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"n\">contains</span> <span class=\"n\">errors</span>\n\n<span class=\"o\">[</span><span class=\"n\">Elab.step</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"o\">(</span><span class=\"n\">rw_term</span> <span class=\"s2\">\"`[rw|\"</span> <span class=\"o\">(</span><span class=\"n\">rw_term__1</span> <span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">HTerm.var._</span><span class=\"bp\">@.</span><span class=\"n\">INet._hyg.2877</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n        <span class=\"bp\">`</span><span class=\"n\">n</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">result</span><span class=\"o\">]</span> <span class=\"n\">sorryAx</span> <span class=\"n\">String</span> <span class=\"n\">true</span>\n    <span class=\"o\">[</span><span class=\"n\">result</span><span class=\"o\">]</span> <span class=\"n\">HTerm.var</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"n\">String</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">result</span><span class=\"o\">]</span> <span class=\"n\">HTerm.var</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"n\">String</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 297025409,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662231067
    }
]