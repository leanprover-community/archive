[
    {
        "content": "<p>There appears to be exactly one declaration in Mathlib on which <code>aesop</code> runs forever (apparently without triggering a deterministic timeout).</p>\n<p>In <code>Mathlib.GroupTheory.Nilpotent</code>, replacing the proof of <code>nilpotent_center_quotient_ind</code> with <code>:= by aesop</code> seem to run forever.</p>",
        "id": 385658548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692273422
    },
    {
        "content": "<p>I can investigate, but I also see <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> online and am hoping I can tempt them. :-)</p>",
        "id": 385658606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692273449
    },
    {
        "content": "<p>Am tempted, will investigate. ;)</p>",
        "id": 385658773,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692273500
    },
    {
        "content": "<p>This is tricky to debug: various <code>trace</code> options never print anything; <code>set_option maxHeartbeats 1</code> doesn't do anything (so I guess the infinite loop doesn't allocate). Would <code>gdb</code> be useful, given that Aesop is not compiled? Any other ideas, other than peppering the code with <code>dbg_trace</code>?</p>",
        "id": 385680014,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692280905
    },
    {
        "content": "<p>May be easiest to temporarily enable precompilation for gdb? I hope nothing broke there...</p>",
        "id": 385694125,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692284630
    },
    {
        "content": "<p>I've enabled precompilation and I'm running</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>lake env gdb --args $(elan which lean) &lt;testfile&gt;.lean\n</code></pre></div>\n<p>but no Aesop functions show up in the backtrace (it's all from <code>libleanshared.so</code>). What's the invocation that makes them show up?</p>",
        "id": 385705273,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692287688
    },
    {
        "content": "<p>Mathlib-free test file btw:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HasQuotient.Quotient</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">HasQuotient</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"n\">G</span> <span class=\"s2\">\" ⧸ \"</span> <span class=\"n\">H</span><span class=\"o\">:</span><span class=\"mi\">34</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasQuotient.Quotient</span> <span class=\"n\">G</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instHasQuotientSubgroup</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasQuotient</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Subgroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">isNilpotent_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nilpotent_quotient_of_nilpotent</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_h</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">center</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nilpotent_center_quotient_ind</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsNilpotent</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsNilpotent</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hbase</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hstep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsNilpotent</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"bp\">∀</span> <span class=\"n\">_ih</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">default</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 385705542,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692287768
    },
    {
        "content": "<p>You need to copy the arguments enabling precompilation from <code>lake build -v</code></p>",
        "id": 385710477,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692289238
    },
    {
        "content": "<p>Ah okay, thanks!</p>",
        "id": 385726680,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692295523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/aesop.20gets.20stuck/near/385710477\">said</a>:</p>\n<blockquote>\n<p>You need to copy the arguments enabling precompilation from <code>lake build -v</code></p>\n</blockquote>\n<p>This worked like a charm. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p>The underlying issue, it turns out, was not an infinite loop. Rather, the hypothesis <code>P (G / center G) -&gt; P G</code> can always be applied and doubles the size of the goal, so we get extremely large goals before Aesop runs into any of its limits. I could implement additional safeguards against stuff like this, but I don't think that's super necessary.</p>",
        "id": 385733565,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692298489
    },
    {
        "content": "<p>Is there a cheap way to detect the goal size?</p>",
        "id": 385761783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692310825
    },
    {
        "content": "<p>I would like to get a handle on this. I would really like to be able to reliably run aesop even against \"bad goals\".</p>",
        "id": 385761970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692310967
    },
    {
        "content": "<p>The fact that <code>aesop</code> \"succeeds\" against every other declaration in the library was very encouraging, and makes me enthusiastic to get over the line.</p>",
        "id": 385762008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692311010
    },
    {
        "content": "<p>I guess the alternative is that we implement <code>try_for</code> in core, which others have wanted to a while as well.</p>",
        "id": 385762035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692311033
    },
    {
        "content": "<p>In any case I'd be curious if you had specific additional safeguards in mind.</p>",
        "id": 385768902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692315307
    },
    {
        "content": "<p>Goal size is linear in the size of the goal (hehe), but caching should help a lot because goals are usually similar. However, there may be other failure modes which goal size doesn't address.</p>\n<p>A timeout would be the most complete solution, but it introduces machine dependence. Nevertheless, I think for your mass-testing use case you'll want a timeout sooner or later anyway. E.g. when you test decision procedures or heavier tactics, they might run into pathological goals as well.</p>",
        "id": 385867568,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1692350130
    }
]