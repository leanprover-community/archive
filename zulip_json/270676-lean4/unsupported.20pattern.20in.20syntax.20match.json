[
    {
        "content": "<p>I haven’t played much with <code>Qq</code> yet, so maybe this should be obvious, but why does the following not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">of_eq_true</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>It says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsupported</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">syntax</span> <span class=\"k\">match</span>\n  <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">of_eq_true</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 392567483,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695402476
    },
    {
        "content": "<p>Ah, maybe the <code>Q(Prop)</code> is simply a lie</p>",
        "id": 392568420,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695402835
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.inferType</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">of_eq_true</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 392570143,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695403542
    },
    {
        "content": "<p><code>of_eq_true _</code> is not of type <code>Prop</code> so indeed your first match is nonsense</p>",
        "id": 392570328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695403596
    },
    {
        "content": "<p>Yes, got the levels confused :-)</p>\n<p>I am now at the point where I can match some expression, but the value that I am getting out of the match is a metavariable for some reason:<br>\nMy code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Tactic.Simp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.ShowTerm</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Says</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Qq</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std.Tactic.TryThis</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">apply_un_of_eq_true</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.inferType</span> <span class=\"n\">e</span>\n  <span class=\"k\">match</span> <span class=\"n\">prop</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">of_eq_true</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_self</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"a : {a}</span><span class=\"se\">\\n</span><span class=\"s2\">b : {b}</span><span class=\"se\">\\n</span><span class=\"s2\">e: {e}</span><span class=\"se\">\\n</span><span class=\"s2\">h: {p}\"</span>\n        <span class=\"n\">pure</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Unrecognized term:</span><span class=\"se\">\\n</span><span class=\"s2\">{e}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n        <span class=\"n\">pure</span> <span class=\"n\">e</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">calcifyTac</span><span class=\"o\">)</span> <span class=\"s2\">\"calcify \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"n\">mkMVar</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr2</span> <span class=\"bp\">←</span> <span class=\"n\">apply_un_of_eq_true</span> <span class=\"n\">expr</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">$</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Before simplifying:</span><span class=\"se\">\\n</span><span class=\"s2\">{expr}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"After simplifying:</span><span class=\"se\">\\n</span><span class=\"s2\">{expr2}\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">calcify</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>prints</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">x</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">of_eq_true</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"n\">HAdd.hAdd</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_add</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_add</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">eq_self</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"n\">pretty</span> <span class=\"n\">printing</span> <span class=\"n\">expression</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">metavariable</span> <span class=\"bp\">'?</span><span class=\"n\">_uniq.16571'.</span> <span class=\"n\">Falling</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">raw</span> <span class=\"n\">printer.</span><span class=\"o\">]</span>\n<span class=\"bp\">?</span><span class=\"n\">_uniq.16571</span>\n</code></pre></div>\n<p>and I wonder why <code>h</code> is a metavariable, and not imply the expected subexpression?</p>",
        "id": 392571826,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695404216
    }
]