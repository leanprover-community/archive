[
    {
        "content": "<p>I want to ask if there is any useful tactic about integer division in lean4</p>",
        "id": 379122319,
        "sender_full_name": "Billlie Franch",
        "timestamp": 1690458295
    },
    {
        "content": "<p>Can you show an example of a goal you're trying to prove?</p>",
        "id": 379122645,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690458339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/devision/near/379122645\">said</a>:</p>\n<blockquote>\n<p>Can you show an example of a goal you're trying to prove?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">coprime_mn</span> <span class=\"o\">:</span> <span class=\"n\">m.coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prime_p</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 379125796,
        "sender_full_name": "Billlie Franch",
        "timestamp": 1690458841
    },
    {
        "content": "<p>That's a hard one</p>",
        "id": 379125875,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690458850
    },
    {
        "content": "<p>It looks like that's natural division not integer division</p>",
        "id": 379126455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690458955
    },
    {
        "content": "<p><code>coprime_mn</code> is not needed, is it? I'd just count the multiplicity of <code>p</code> on both sides</p>",
        "id": 379127832,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690459186
    },
    {
        "content": "<p>You need to rule out m=n=0 somehow</p>",
        "id": 379140419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690461314
    },
    {
        "content": "<p>The cool way to do it would be to define <code>core n</code> to be the squarefree part of n (for n&gt;0 this is the unique squarefree t such that n=tm^2) and make enough API for it, including core(ab^2)=core(a), core(p)=p etc</p>",
        "id": 379141274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690461464
    },
    {
        "content": "<p>A slightly weird way of doing it with the coprimality assumption would be by proving that m divides pn^2 and hence it divides p and then getting a contradiction in both cases</p>",
        "id": 379142213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690461632
    },
    {
        "content": "<p>By the way <span class=\"user-mention\" data-user-id=\"634308\">@Billlie Franch</span> if you think lean tactics are up to solving this kind of questions in one line then I'm afraid you've got a lot to lean about the state of the art with lean tactics...</p>",
        "id": 379142504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690461685
    },
    {
        "content": "<p>Would sledgehammer do this in Isabelle?</p>",
        "id": 379142643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690461708
    },
    {
        "content": "<p>I'm surprised</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Padics.PadicVal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">padicValNat_ofSquare</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prime_p</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fact_iff.mpr</span> <span class=\"n\">prime_p</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">padicValNat.pow</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">this</span> <span class=\"mi\">2</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>isn't in mathlib. (Should it be?)</p>\n<p>Then apply <code>padicValNat</code> to both sides; one is even, the other odd...</p>",
        "id": 379149055,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690462773
    },
    {
        "content": "<p>We don't seem to have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">padicValNat_mul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prime_p</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>either? (A bit more annoying to prove, by the looks of it; trying to untangle <code>Part.get (multiplicity p n) (_ : multiplicity.Finite p n)</code>... We do have <code>multiplicity.mul</code> / <code>multiplicity.mul'</code>...)</p>\n<p>Should I try to add these?</p>",
        "id": 379151641,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690463196
    },
    {
        "content": "<p>We have those, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=padicValNat.mul#doc\">docs#padicValNat.mul</a>, it would be really shocking if we didnt!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prime_p</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">prime_p.pos.ne'</span><span class=\"o\">,</span> <span class=\"n\">padicValNat.mul</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">prime_p</span><span class=\"o\">⟩),</span> <span class=\"n\">padicValNat.pow</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">prime_p</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">parity_simps</span><span class=\"o\">,</span> <span class=\"n\">padicValNat.self</span> <span class=\"n\">prime_p.one_lt</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 379154590,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690463693
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Prime.multiplicity_mul#doc\">docs#Nat.Prime.multiplicity_mul</a></p>",
        "id": 379154645,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690463708
    },
    {
        "content": "<p>Not sure how I missed that. I guess it's farther down in the file, after <code>padicValRat</code> is introduced, so I assumed there wasn't more useful <code>padicValNat</code> stuff down below. (Somehow <code>exact?</code> didn't find it either?...) Anyway, thanks!</p>",
        "id": 379159683,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690464584
    },
    {
        "content": "<p><code>padicValNat.mul</code> looks misnamed to be, it should be <code>padicValNat_mul</code></p>",
        "id": 379160280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690464676
    },
    {
        "content": "<p>I thought it was namespaced?</p>",
        "id": 379162548,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690465022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/270676-lean4/topic/integer.20division.20tactic.3F/near/379159683\">said</a>:</p>\n<blockquote>\n<p>Not sure how I missed that. I guess it's farther down in the file, after <code>padicValRat</code> is introduced, so I assumed there wasn't more useful <code>padicValNat</code> stuff down below. (Somehow <code>exact?</code> didn't find it either?...) Anyway, thanks!</p>\n</blockquote>\n<p>Do you remember what the precise state you called exact on was? It would be good to either debug or understand that failure (there was one in another thread today already that was a timeout, so could be the same thing)</p>",
        "id": 379162800,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690465060
    },
    {
        "content": "<p>If its the snippet you posted earlier I guess its just a mismatch between <code>Fact</code> and having the argument explicitly. Maybe we could teach <code>solve_by_elim</code> to try <code>Fact.mk</code> always or something like that?</p>",
        "id": 379164163,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690465270
    },
    {
        "content": "<p>Yes, that was probably it; it knew <code>p.Prime</code> but not <code>Fact p.Prime</code>! Argh...</p>",
        "id": 379171470,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690466464
    },
    {
        "content": "<p>I'd argue that's also a bug: I thought <code>Fact p.Prime</code> was only for <code>instance</code>s such as <code>Field (ZMod p)</code></p>",
        "id": 379172548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690466643
    },
    {
        "content": "<p>wait, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Prime.multiplicity_mul#doc\">docs#Nat.Prime.multiplicity_mul</a> has no <code>Fact</code> and neither does the question.</p>",
        "id": 379177559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690467349
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=padicValNat.mul#doc\">docs#padicValNat.mul</a> does</p>",
        "id": 379178185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690467467
    }
]