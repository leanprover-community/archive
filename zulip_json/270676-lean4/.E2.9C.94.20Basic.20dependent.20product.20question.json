[
    {
        "content": "<p>Why do  the last three lines below generate errors?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NOpt</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">NOpt</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">NOpt</span> <span class=\"mi\">0</span> <span class=\"c1\">-- No error but remains as NOpt 0</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">NOpt</span> <span class=\"mi\">3</span> <span class=\"c1\">-- Option (Option (Option Nat))</span>\n\n<span class=\"c1\">-- Next three lines each report: failed to synthesize instance of OfNat (NOpt 0) 3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">NOpt</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">NOpt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">NOpt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"mi\">3</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(By the way, given how basic this question is, am I posting it in the correct forum?)</p>",
        "id": 391422201,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1694901185
    },
    {
        "content": "<p>I think you just need to write a type ascription to help the natural number literals elaborate. I didn't test it myself, but something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NOpt</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">NOpt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">NOpt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>You probably can drop the <code>some</code> in the last example too since there's a coercion to <code>Option</code>.</p>\n<p>Natural number literals use the expected type when elaborating, via the <code>OfNat</code> typeclass, and typeclasses won't always unfold definitions, so it doesn't see that <code>NOpt 0</code> is suposed to be <code>Nat</code>. One way around this is the explicit type ascriptions as I suggested. Another is to give <code>NOpt</code> the <code>@[reducible]</code> attribute, which makes the definition fairly invisible to many things in Lean.</p>",
        "id": 391422617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694901694
    },
    {
        "content": "<p>Duh! I thought I had tried that, but I guess not! Thank you.</p>",
        "id": 391422818,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1694901954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242206\">Luis O'Shea</span> has marked this topic as resolved.</p>",
        "id": 391422820,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694901956
    }
]