[
    {
        "content": "<p>I want to be able to write <code>lake build</code> and have my entire project checked.<br>\nIn the past, was using the following configuration:<br>\n<a href=\"https://github.com/madvorak/lean-mam/blob/main/lakefile.lean\">https://github.com/madvorak/lean-mam/blob/main/lakefile.lean</a></p>\n<p>The new version of Lake gives me impression that <code>globs := #[.submodules `myroot]</code> doesn't work anymore (I may be wrong).<br>\nWhat can I use instead?<br>\nBasically I want the <code>@[default_target]</code> to be all Lean files.</p>",
        "id": 370788618,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688046229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> On <a href=\"#narrow/stream/270676-lean4/topic/Lake.20script.20for.20automatically.20generating.20files.20with.20imports\">another thread</a>, I have written a short Lake script called <code>mkImports</code> to automatically generate a top-level file that imports all the files in your Lean library. One possible solution is to add the script to your <code>lakefile</code> and run <code>lake run mkImports &amp;&amp; lake build</code> next time. If your library is set as a default target, this will have the effect of checking all the files in your repository.</p>",
        "id": 370813434,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1688050200
    },
    {
        "content": "<p>Thanks a lot for your effort! However, I find it hard to believe that we would have to do something so complicated in order to do what <code>leanproject build</code> would do in Lean 3.</p>",
        "id": 370814582,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688050389
    },
    {
        "content": "<p>lake and leanproject have <em>very</em> different goals.</p>",
        "id": 370815479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688050543
    },
    {
        "content": "<p>I don't think any breakage in <code>globs</code> was intended if something changed there</p>",
        "id": 370816571,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688050721
    },
    {
        "content": "<p>Maybe I'm doing it wrong.<br>\nIs there any documentation for the <code>.submodules</code> thing?</p>",
        "id": 370817408,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688050870
    },
    {
        "content": "<p>If it's any help, <a href=\"https://github.com/adamtopaz/CopenhagenMasterclass2023/blob/master/lakefile.lean\">this lakefile</a> seems to be working for that project (it uses <code>.andSubmodules</code>)</p>",
        "id": 370818007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688050979
    },
    {
        "content": "<p>Can <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> comment on this commit please?<br>\n<a href=\"https://github.com/adamtopaz/CopenhagenMasterclass2023/commit/42af8aab39152b97b746623701ce9166bb060fef\">https://github.com/adamtopaz/CopenhagenMasterclass2023/commit/42af8aab39152b97b746623701ce9166bb060fef</a></p>\n<p>Does the existence of the <code>Basic.lean</code> file (albeit empty) influence whether <code>.addSubmodules</code> work?</p>",
        "id": 370824351,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688052077
    },
    {
        "content": "<p>I learned this trick from <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span></p>",
        "id": 370824644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688052125
    },
    {
        "content": "<p>Can you teach me the trick, senpai?</p>",
        "id": 370824901,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688052172
    },
    {
        "content": "<p>I think the answer is essentially yes. The gist seems to have some file <code>Foo.lean</code> and some folder <code>Foo</code> in the top-level directory of the lake project. The lean file seems to be needed for lake to compile the stuff in the <code>Foo</code> folder.</p>",
        "id": 370825589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688052287
    },
    {
        "content": "<p>Oh actualy, <code>Foo/Basic.lean</code> is not needed (I think)</p>",
        "id": 370825789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688052319
    },
    {
        "content": "<p>I think I only added <code>Basic.lean</code> so that the folder <code>CompHaus</code> was properly handled by git.</p>",
        "id": 370826011,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688052360
    },
    {
        "content": "<p>Back then (<code>leanprover/lean4:nightly-2023-03-07</code>) I didn't have to perform such a hack, but I will try it now.</p>",
        "id": 370826536,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688052433
    },
    {
        "content": "<p>of course you can just alternatively add <code>lean_lib</code>s to your lakefile.</p>",
        "id": 370826925,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688052490
    },
    {
        "content": "<p>I want one <code>lean_lib</code> that will force <code>lake</code> to compile everything.</p>",
        "id": 370827276,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688052543
    },
    {
        "content": "<p>and you don't want to put everything in a single folder?</p>",
        "id": 370827774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688052614
    },
    {
        "content": "<p>I am not sure about it, but I have everything in a single folder now.</p>",
        "id": 370828055,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688052657
    },
    {
        "content": "<p>Do both <code>.submodules</code> and <code>.andSubmodules</code> take the entire directory recursively (i.e., files on all levels will be compiled)?</p>",
        "id": 370831001,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688053197
    },
    {
        "content": "<p>I really don’t know.</p>",
        "id": 370831433,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688053275
    },
    {
        "content": "<p>If I have everything in the same directory (but on multiple levels), which of <code>.submodules</code> or <code>.andSubmodules</code> should I use?</p>",
        "id": 370831891,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688053355
    },
    {
        "content": "<p>Whatever I try, I obtain weird errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">.\\.\\.\\</span><span class=\"n\">Grammars</span><span class=\"bp\">\\</span><span class=\"n\">Classes.lean</span>\n</code></pre></div>\n<p>Note that I have a directory <code>Grammars</code> inside which I have a directory <code>Classes</code> but no file named <code>Classes.lean</code> in either of them.<br>\nIs Lake suggesting that I should create an empty Lean file alongside with every directory?!</p>",
        "id": 370836812,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688054272
    },
    {
        "content": "<p>If I create the \"missing\" file <code>Grammars\\Classes.lean</code> it just moves one level deeper and complains again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">.\\.\\.\\</span><span class=\"n\">Grammars</span><span class=\"bp\">\\</span><span class=\"n\">Classes</span><span class=\"bp\">\\</span><span class=\"n\">ContextFree.lean</span>\n</code></pre></div>\n<p>As with the previous error, I have a directory <code>ContextFree</code> inside the directory <code>Classes</code> but no file <code>ContextFree.lean</code> and I don't know why such a file should exist.</p>",
        "id": 370838829,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688054596
    },
    {
        "content": "<p>that sounds like a bug, could you minimize?</p>",
        "id": 370905465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688067630
    },
    {
        "content": "<p>I was also wondering \"bug or feature?\", but I concluded I would need to see a specification of what <code>submodules</code> and <code>andSubmodules</code> are supposed to do. I will try to minimize it tomorrow. In the meanwhile, if you know the intended behavior, let me know please.</p>",
        "id": 370909697,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688068645
    },
    {
        "content": "<p><code>andSubmodules</code> builds the specified module and all submodules, <code>submodules</code> only builds the submodules</p>",
        "id": 370911644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688069084
    },
    {
        "content": "<p>obviously it shouldn't attempt to build things that don't exist, except possibly in the <code>andSubmodules</code> case</p>",
        "id": 370911847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688069136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20all/near/370836812\">said</a>:</p>\n<blockquote>\n<p>Is Lake suggesting that I should create an empty Lean file alongside with every directory?!</p>\n</blockquote>\n<p>Actually, yes. It is assuming a directory has a corresponding Lean file (as this is the official Lean 4 style). However, I also consider this a bug as it should verify that rather than assuming so. Will push a fix soon.</p>",
        "id": 370919127,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688071060
    },
    {
        "content": "<p>Upon further reflection, one caveat is that, even with this check, if you do not have a <code>Foo/Bar.lean</code> file for every directory <code>Foo/Bar</code>, the behavior of <code>import Foo.Bar</code> is not well defined.</p>",
        "id": 370919953,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688071296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> since you helped designed this feature, what behavior do think should be expected on <code>import Foo.Bar</code> if <code>Foo/Bar.lean</code> does not exist. The way globs are designed it still has to be part of the library (since that check does not have FS data available), but with the fix I am working on, :Lake can at least not attempt to compile the file on the library build.</p>",
        "id": 370920500,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688071468
    },
    {
        "content": "<p><code>import Foo.Bar</code> should error if <code>Foo/Bar.lean</code> does not exist, but <code>submodules</code> should not attempt to compile files that do not exist (unless they are dependencies of files that do exist)</p>",
        "id": 370920706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688071533
    },
    {
        "content": "<p><code>andSubmodules</code> should only error if the module directly referenced does not exist</p>",
        "id": 370920782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688071557
    },
    {
        "content": "<p>in other words, <code>submodules</code> adds as \"roots\" all lean files which are in subdirectories of the specified module, if they exist, and <code>andSubmodules</code> does that as well as adding the module itself (whether it exists or not).</p>",
        "id": 370921181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688071667
    },
    {
        "content": "<p>That sounds good to me. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 370921716,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688071808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20all/near/370919127\">said</a>:</p>\n<blockquote>\n<p>It is assuming a directory has a corresponding Lean file (as this is the official Lean 4 style). </p>\n</blockquote>\n<p>Mathlib significantly deviates from this, and generally avoids \"default\" files (now \"files-named-the-same-as-a-directory\") except in certain deliberately curated cases, and <code>Mathlib.lean</code></p>",
        "id": 370921815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688071836
    },
    {
        "content": "<p>Std too for that matter</p>",
        "id": 370921878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688071852
    },
    {
        "content": "<p>Anyway, I think we have moved onto a different tangent. Have we sorted out the original point of disagreement?</p>",
        "id": 370952055,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688083629
    },
    {
        "content": "<p>don't assume default.lean files exist</p>",
        "id": 370952094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688083649
    },
    {
        "content": "<p>Already fixed that: <a href=\"https://github.com/leanprover/lake/commit/f6f9503e29b15f92e0ac360164e740374674a3cb\">f6f9503</a>.</p>",
        "id": 370952335,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688083743
    },
    {
        "content": "<p>211 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/lake.20build.20all\">#lean4 &gt; lake build all</a> by <span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span>.</p>",
        "id": 371035744,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688111346
    },
    {
        "content": "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/official.20style.3F\">#lean4 &gt; official style?</a> by <span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span>.</p>",
        "id": 371035962,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688111399
    },
    {
        "content": "<p>I noticed a comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">also</span> <span class=\"n\">tests</span> <span class=\"n\">the</span> <span class=\"n\">issue</span> <span class=\"n\">reported</span> <span class=\"n\">on</span> <span class=\"n\">this</span> <span class=\"n\">Zulip</span> <span class=\"n\">thread</span><span class=\"o\">:</span>\n<span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">leanprover.zulipchat.com</span><span class=\"bp\">/#</span><span class=\"n\">narrow</span><span class=\"bp\">/</span><span class=\"n\">stream</span><span class=\"bp\">/</span><span class=\"mi\">270676</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">topic</span><span class=\"bp\">/</span><span class=\"n\">lake.20build.20all</span><span class=\"bp\">/</span><span class=\"n\">near</span><span class=\"bp\">/</span><span class=\"mi\">370788618</span>\n</code></pre></div>\n<p>Does it mean I should create a MWE that fails with the old Lake version and then test it succeeds with the new Lake version?</p>",
        "id": 371037222,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688111670
    },
    {
        "content": "<p>Sure, if you want to. The issue is hopefully fixed.</p>",
        "id": 371037960,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111833
    },
    {
        "content": "<p>Easier for me: I just test my (not minimal) code with the new Lake version.</p>\n<p>How do I get the newest version? Has it become a part of the last nightly?</p>",
        "id": 371038355,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688111919
    },
    {
        "content": "<p>Sadly, I think the lean4 Lake update was too late for that. However, it should be in the next nightly (i.e., the one for 06-31 I believe).</p>",
        "id": 371038967,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688112048
    },
    {
        "content": "<p>Nevermind. I will try tomorrow!</p>",
        "id": 371039267,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688112106
    },
    {
        "content": "<p>If you want to make sure that fix did fix it before then, you could also just clone Lake, build it (via <code>lake build</code>) and run the resulting executable (<code>lake/build/bin/lake</code>) on your project. However, I am not sure that is worth the effort.</p>",
        "id": 371039504,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688112141
    },
    {
        "content": "<p>I am lazy. I'll rather wait for the next nightly.</p>",
        "id": 371039605,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688112164
    },
    {
        "content": "<p>In this case, I think waiting is just a prudent use of time. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 371040700,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688112366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20all/near/371038967\">said</a>:</p>\n<blockquote>\n<p>Sadly, I think the lean4 Lake update was too late for that. However, it should be in the next nightly (i.e., the one for 06-31 I believe).</p>\n</blockquote>\n<p>The 31st of June? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 371051591,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688114406
    },
    {
        "content": "<p>Oops! <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <code>07-01</code>.</p>",
        "id": 371052883,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688114648
    },
    {
        "content": "<p>I wanted to try whether it works now but I didn't succeed.</p>\n<p>I changed <code>lean-toolchain</code> to <code>leanprover/lean4:nightly-2023-07-01</code>.<br>\nI ran <code>lake update</code>, <code>lake clean</code>, <code>lake exe cache get</code>, and <code>lake build</code>.<br>\nThe last one gave me some weird errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">236</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.Congr</span>\n<span class=\"o\">[</span><span class=\"mi\">237</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Classes.LawfulMonad</span>\n<span class=\"o\">[</span><span class=\"mi\">237</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.PairingHeap</span>\n<span class=\"o\">[</span><span class=\"mi\">237</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">237</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.RBMap.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">239</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Option.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">239</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">241</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Init.Data.Option.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">241</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Option.Lemmas</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">proofwidgets</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">Qq</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">aesop</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span> <span class=\"n\">PATH</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">mdvorak</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-01\\bin\\lean.exe -Dlinter.missingDocs=true -DwarningAsError=true .\\lake-packages\\std\\.\\.\\Std\\Data\\Array\\Init\\Lemmas.lean -R .\\lake-packages\\std\\.\\. -o .\\lake-packages\\std\\build\\lib\\Std\\Data\\Array\\Init\\Lemmas.olean -i .\\lake-packages\\std\\build\\lib\\Std\\Data\\Array\\Init\\Lemmas.ilean -c .\\lake-packages\\std\\build\\ir\\Std\\Data\\Array\\Init\\Lemmas.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Data</span><span class=\"bp\">\\</span><span class=\"n\">Array</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">153</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">constructor</span> <span class=\"o\">⟨</span><span class=\"bp\">...</span><span class=\"o\">⟩,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">an</span> <span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.51990</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Data</span><span class=\"bp\">\\</span><span class=\"n\">Array</span><span class=\"bp\">\\</span><span class=\"n\">Init</span><span class=\"bp\">\\</span><span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">174</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">bs</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">push</span> <span class=\"n\">bs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"n\">arr</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.54080</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">arr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"n\">arr.data</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">arr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"n\">arr.data</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">mdvorak</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-01\\bin\\lean.exe` exited with code 1</span>\n<span class=\"o\">[</span><span class=\"mi\">242</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.String.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">242</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Array.Merge</span>\n<span class=\"o\">[</span><span class=\"mi\">242</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Nat.Gcd</span>\n<span class=\"o\">[</span><span class=\"mi\">242</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.BinomialHeap</span>\n<span class=\"o\">[</span><span class=\"mi\">244</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.RBMap.WF</span>\n<span class=\"o\">[</span><span class=\"mi\">244</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Int.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">246</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Init.Data.Option.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">247</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Qq</span>\n<span class=\"o\">[</span><span class=\"mi\">249</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Util.Qq</span>\n<span class=\"o\">[</span><span class=\"mi\">251</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Meta.DiscrTree</span>\n<span class=\"o\">[</span><span class=\"mi\">256</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Init.Data.Int.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">256</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Int.DivMod</span>\n<span class=\"o\">[</span><span class=\"mi\">258</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.RBMap</span>\n<span class=\"o\">[</span><span class=\"mi\">258</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.RBMap.Alter</span>\n<span class=\"o\">[</span><span class=\"mi\">260</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Init.Data.Int.DivMod</span>\n<span class=\"o\">[</span><span class=\"mi\">260</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Rat.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">262</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Init.Data.Rat.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">262</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Classes.RatCast</span>\n<span class=\"o\">[</span><span class=\"mi\">262</span><span class=\"bp\">/</span><span class=\"mi\">3523</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Rat.Lemmas</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">proofwidgets</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">Qq</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">aesop</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span> <span class=\"n\">PATH</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">mdvorak</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-01\\bin\\lean.exe -Dlinter.missingDocs=true -DwarningAsError=true .\\lake-packages\\std\\.\\.\\Std\\Data\\Rat\\Lemmas.lean -R .\\lake-packages\\std\\.\\. -o .\\lake-packages\\std\\build\\lib\\Std\\Data\\Rat\\Lemmas.olean -i .\\lake-packages\\std\\build\\lib\\Std\\Data\\Rat\\Lemmas.ilean -c .\\lake-packages\\std\\build\\ir\\Std\\Data\\Rat\\Lemmas.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Data</span><span class=\"bp\">\\</span><span class=\"n\">Rat</span><span class=\"bp\">\\</span><span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">260</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">*</span> <span class=\"n\">a.num</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Data</span><span class=\"bp\">\\</span><span class=\"n\">Rat</span><span class=\"bp\">\\</span><span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">261</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a.num</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Data</span><span class=\"bp\">\\</span><span class=\"n\">Rat</span><span class=\"bp\">\\</span><span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">262</span><span class=\"o\">:</span><span class=\"mi\">59</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">normalize</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">*</span> <span class=\"n\">a.num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">den</span> <span class=\"bp\">*</span> <span class=\"n\">a.den</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Data</span><span class=\"bp\">\\</span><span class=\"n\">Rat</span><span class=\"bp\">\\</span><span class=\"n\">Lemmas.lean</span><span class=\"o\">:</span><span class=\"mi\">263</span><span class=\"o\">:</span><span class=\"mi\">59</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">normalize</span> <span class=\"o\">(</span><span class=\"n\">a.num</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.den</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">den</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">mdvorak</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-01\\bin\\lean.exe` exited with code 1</span>\n</code></pre></div>\n<p>Can these errors be caused by a mistake in my code?<br>\nI don't know where to search for problems.</p>",
        "id": 371420351,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688204956
    },
    {
        "content": "<p>std4 doesn't seem to be compatible with that version of Lean yet</p>",
        "id": 371425539,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688206083
    },
    {
        "content": "<p>In general, you should always use exactly the same Lean version as mathlib4, as documented at <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4</a></p>",
        "id": 371425653,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688206113
    },
    {
        "content": "<p>PS: I get the same error when I run <code>lake new asdf math</code>, update <code>lean-toolchain</code> to <code>leanprover/lean4:nightly-2023-07-01</code>, put <code>import Mathlib</code> on the first line of <code>Asdf.lean</code>, and proceed the usual way.</p>\n<p>I see now that the error was not caused by a mistake in my code.</p>",
        "id": 371425732,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688206133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20all/near/371425653\">said</a>:</p>\n<blockquote>\n<p>In general, you should always use exactly the same Lean version as mathlib4,</p>\n</blockquote>\n<p>Thanks for your answer!!</p>\n<p>Is there anything I can do in order to test the new version of Lake and have Std4 (not necessarily the newest version) available in the project at the same time?</p>",
        "id": 371426672,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688206347
    },
    {
        "content": "<p>You can build Lake separately as Mac suggested above. It only takes a few minutes to set up.</p>",
        "id": 371428531,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688206758
    },
    {
        "content": "<p>There should be a way to use Lake from one toolchain with Lean from another toolchain, but I would have to try that myself first</p>",
        "id": 371428837,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688206816
    },
    {
        "content": "<p>I am scared of doing these things.</p>",
        "id": 371430305,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688207140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20all/near/370952335\">said</a>:</p>\n<blockquote>\n<p>Already fixed that: <a href=\"https://github.com/leanprover/lake/commit/f6f9503e29b15f92e0ac360164e740374674a3cb\">f6f9503</a>.</p>\n</blockquote>\n<p>How long do you think we will have to wait for [Mathlib4 uses Lake that has your bugfix] ?</p>",
        "id": 371431098,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688207309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> If you want to test a newer Lake with a different lean (i.e., mathlib's) you can do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>+leanprover/lean4:nightly-2023-07-01<span class=\"w\"> </span>--lean<span class=\"o\">=</span><span class=\"s2\">\"~/.elan/toolchains/leanprover--lean4---nightly-2023-06-20/bin/lean\"</span><span class=\"w\"> </span>build\n</code></pre></div>",
        "id": 371493609,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688220537
    },
    {
        "content": "<p>Is it safe? Will my Lean installation stay unchanged for other projects?</p>",
        "id": 371494266,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688220704
    },
    {
        "content": "<p>What should I have in <code>lean-toolchain</code> when running your command?<br>\nCan I do <code>lake update</code>, <code>lake clean</code>, and <code>lake exe cache get</code> before running the command?</p>",
        "id": 371494672,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688220800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span>  Yes, it has no side-effects (except potentially downloaded the toolchain of the new Lake if you do not already have it).</p>",
        "id": 371495358,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688220986
    },
    {
        "content": "<p>I think I already have it.</p>",
        "id": 371495425,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688221009
    },
    {
        "content": "<p>If your command succeeds (i.e., my project builds in Git Bash), will it fail in VS Code afterwards?</p>",
        "id": 371495574,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688221048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20all/near/371494672\">said</a>:</p>\n<blockquote>\n<p>What should I have in <code>lean-toolchain</code> when running your command?</p>\n</blockquote>\n<p>Does not matter for the command. However, you should always keep the <code>lean-toolchain</code> of a mathlib dependent project set to mathlib's toolchain version (i.e., right now <code>06-20</code>).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20all/near/371494672\">said</a>:</p>\n<blockquote>\n<p>Can I do <code>lake update</code>, <code>lake clean</code>, and <code>lake exe cache</code> get before running the command?</p>\n</blockquote>\n<p>Yep and just like that (using the toolchain version lake + lean).</p>",
        "id": 371495922,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688221116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20all/near/371495574\">said</a>:</p>\n<blockquote>\n<p>If your command succeeds (i.e., my project builds in Git Bash), will it fail in VS Code afterwards?</p>\n</blockquote>\n<p>Yes, it will fail. This just tests whether this single command works. To fix it in VSCode, you would have to change your project preferences. That is, manually set your VSCode toolchainpath to that of the <code>07-01</code> nightly and add <code>--lean=\"~/.elan/toolchains/leanprover--lean4---nightly-2023-06-20/bin/lean\"</code> to your server args.</p>",
        "id": 371496658,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688221284
    },
    {
        "content": "<p>To recapitulate, I will change <code>lean-toolchain</code> to <code>leanprover/lean4:nightly-2023-06-20</code> and then run the following commands (while in the directory of the project, i.e., where <code>lean-toolchain</code> is located) in the following order:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">lake</span> <span class=\"n\">clean</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">07</span><span class=\"bp\">-</span><span class=\"mi\">01</span> <span class=\"c1\">--lean=\"~/.elan/toolchains/leanprover--lean4---nightly-2023-06-20/bin/lean\" build</span>\n</code></pre></div>\n<p>Is it safe to do it this way?<br>\nEdit: <code>lake exe cache get</code></p>",
        "id": 371497809,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688221556
    },
    {
        "content": "<p>Yes. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 371497948,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688221582
    },
    {
        "content": "<p>Also, it should be <code>lake exe cache get</code>. Right?</p>",
        "id": 371498099,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688221622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> Also, you are on a Linux machine, correct?</p>",
        "id": 371498274,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688221670
    },
    {
        "content": "<p>Windows 10 machine with Git GUI.</p>",
        "id": 371498413,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688221692
    },
    {
        "content": "<p>*Git Bash</p>",
        "id": 371498535,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688221730
    },
    {
        "content": "<p>Okay, since you are using Git Bash, <code>~/.elan</code> should still be the correct path to the elan installation.</p>",
        "id": 371498726,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688221778
    },
    {
        "content": "<p>You could verify by checking if <code>~/.elan</code> exists (e.g., via <code>ls ~/.elan</code> -- if it does not error, you are good).</p>",
        "id": 371499227,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688221902
    },
    {
        "content": "<p>Thank you very much! I will return to my office in the evening and try it out.</p>",
        "id": 371499958,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688222058
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mdvorak</span><span class=\"bp\">@</span><span class=\"n\">wngrad258</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">chomsky</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span>\n<span class=\"n\">bin</span><span class=\"bp\">/</span>  <span class=\"n\">settings.toml</span>  <span class=\"n\">tmp</span><span class=\"bp\">/</span>  <span class=\"n\">toolchains</span><span class=\"bp\">/</span>  <span class=\"n\">update</span><span class=\"bp\">-</span><span class=\"n\">hashes</span><span class=\"bp\">/</span>\n\n<span class=\"n\">mdvorak</span><span class=\"bp\">@</span><span class=\"n\">wngrad258</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">chomsky</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">06</span><span class=\"bp\">-</span><span class=\"mi\">20</span>\n\n<span class=\"n\">mdvorak</span><span class=\"bp\">@</span><span class=\"n\">wngrad258</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">chomsky</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">update</span>\n\n<span class=\"n\">mdvorak</span><span class=\"bp\">@</span><span class=\"n\">wngrad258</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">chomsky</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">clean</span>\n\n<span class=\"n\">mdvorak</span><span class=\"bp\">@</span><span class=\"n\">wngrad258</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">chomsky</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Downloading</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.11</span><span class=\"bp\">/</span><span class=\"n\">windows</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Unpacking</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.11</span><span class=\"bp\">/</span><span class=\"n\">windows</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache.exe</span>\n<span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3500</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">mdvorak</span><span class=\"bp\">@</span><span class=\"n\">wngrad258</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">chomsky</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">07</span><span class=\"bp\">-</span><span class=\"mi\">01</span> <span class=\"c1\">--lean=\"~/.elan/toolchains/leanprover--lean4---nightly-2023-06-20/bin/lean\" build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">detect</span> <span class=\"n\">a</span> <span class=\"n\">Lean</span> <span class=\"n\">installation</span>\n</code></pre></div>\n<p>What did I do wrong?</p>",
        "id": 371552992,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688236810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> Interesting, that makes it appear as though the toolchain does not exist. Can you <code>ls ~/.elan/toolchains/leanprover--lean4---nightly-2023-06-20</code>?</p>",
        "id": 371582924,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688249975
    },
    {
        "content": "<p>And if not, what does <code>lean --print-prefix</code> return?</p>",
        "id": 371583047,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688250035
    },
    {
        "content": "<p>Oh, it also occurred to me that I am wrong, VSCode should not fail, because glob-based building only occurs during <code>lake build</code>.</p>",
        "id": 371594709,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688256989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> My only other thought of what could have gone wrong here is that maybe it is the <code>07-01</code> nightly that is broken. If you want to check, what does <code>ls ~/.elan/toolchains/leanprover--lean4---nightly-2023-07-01</code> produce?</p>",
        "id": 372171079,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688441115
    },
    {
        "content": "<p>My previous post disappeared, so I will put both outputs here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mdvorak</span><span class=\"bp\">@</span><span class=\"n\">wngrad258</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">chomsky</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-06-20</span>\n<span class=\"n\">LICENSE</span>  <span class=\"n\">LICENSES</span>  <span class=\"n\">bin</span><span class=\"bp\">/</span>  <span class=\"kn\">include</span><span class=\"bp\">/</span>  <span class=\"n\">lib</span><span class=\"bp\">/</span>  <span class=\"n\">share</span><span class=\"bp\">/</span>  <span class=\"n\">src</span><span class=\"bp\">/</span>\n\n<span class=\"n\">mdvorak</span><span class=\"bp\">@</span><span class=\"n\">wngrad258</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">chomsky</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-01</span>\n<span class=\"n\">LICENSE</span>  <span class=\"n\">LICENSES</span>  <span class=\"n\">bin</span><span class=\"bp\">/</span>  <span class=\"kn\">include</span><span class=\"bp\">/</span>  <span class=\"n\">lib</span><span class=\"bp\">/</span>  <span class=\"n\">share</span><span class=\"bp\">/</span>  <span class=\"n\">src</span><span class=\"bp\">/</span>\n</code></pre></div>\n<p>There doesn't seem to be a difference at this level tho.</p>\n<p>Anyways, unless there is an easy solution to my problem, ignore it and I will just wait for mathlib4 to get a newer toolchain.</p>",
        "id": 372214127,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688457605
    },
    {
        "content": "<p>Yeah, I think waiting is for the best. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 372226864,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688460590
    },
    {
        "content": "<p>Having updated <code>lean-toolchain</code> to <code>leanprover/lean4:nightly-2023-07-12</code> it works as it should. Thanks a lot for fixing Lake!</p>",
        "id": 375287891,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689345159
    }
]