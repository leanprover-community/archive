[
    {
        "content": "<p>How can I write something like this in lean4? </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">class</span><span class=\"w\"> </span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"kr\">class</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"kr\">class</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"kr\">instance</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span>\n</code></pre></div>",
        "id": 387277162,
        "sender_full_name": "MangoIV",
        "timestamp": 1692970465
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>",
        "id": 387277338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970542
    },
    {
        "content": "<p>what's the difference between that and extends?</p>",
        "id": 387277897,
        "sender_full_name": "MangoIV",
        "timestamp": 1692970716
    },
    {
        "content": "<p>thank you!</p>",
        "id": 387277955,
        "sender_full_name": "MangoIV",
        "timestamp": 1692970736
    },
    {
        "content": "<p>With extends, they aren't actually arguments to <code>C</code>: if you look at the type of <code>C</code> it will be <code> C (a b c : Type) : Type</code> instead of <code>C (a b c : Type) [A a b] [B b c] : Type</code></p>",
        "id": 387278171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970815
    },
    {
        "content": "<p>and instead there are instances like <code>instance (a b c : Type) [C a b c] : A a b</code></p>",
        "id": 387278230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970840
    },
    {
        "content": "<p>But an instance like that is problematic, because when searching for <code>A a b</code> it will start looking for <code>C a b ?c</code> with unbound <code>?c</code></p>",
        "id": 387278306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970874
    },
    {
        "content": "<p>ah makes sense, is that the reason why it needs to pass the variables to the supreclass in that step already? I.e. causing the weird error where it says that it cannot decide the synthetization order?</p>",
        "id": 387278314,
        "sender_full_name": "MangoIV",
        "timestamp": 1692970879
    },
    {
        "content": "<p>and so you get a weird error about synthesization order :P</p>",
        "id": 387278349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970899
    },
    {
        "content": "<p>I see, perfect, that's the reason I was asking in the first place (tried with extends but it didn't work)</p>",
        "id": 387278496,
        "sender_full_name": "MangoIV",
        "timestamp": 1692970959
    },
    {
        "content": "<p>I'm not actually sure what the <code>class (A a b, B b c) =&gt; C a b c</code> haskell syntax is equivalent to, but I think it is the one with arguments rather than extends</p>",
        "id": 387278581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971000
    },
    {
        "content": "<p>I think in core it's the one with arguments, I'm not sure whether this distinction can be made in Haskell in a good way anyways/ the one with extends even exists.</p>",
        "id": 387278920,
        "sender_full_name": "MangoIV",
        "timestamp": 1692971122
    },
    {
        "content": "<p>Can you say <code>instance (C a b c) =&gt; ...</code> and have <code>A a b</code> available in the context?</p>",
        "id": 387279298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971271
    },
    {
        "content": "<p>or do you have to write <code>instance (A a b, B b c, C a b c) =&gt; ...</code></p>",
        "id": 387279392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971292
    },
    {
        "content": "<p>yes, the former. This is the goal of the exercise, actually. :D</p>",
        "id": 387280515,
        "sender_full_name": "MangoIV",
        "timestamp": 1692971632
    },
    {
        "content": "<p>And I just saw that it's not like that in lean4.</p>",
        "id": 387280658,
        "sender_full_name": "MangoIV",
        "timestamp": 1692971660
    },
    {
        "content": "<p>another thing you can do in Haskell is actually</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 387280803,
        "sender_full_name": "MangoIV",
        "timestamp": 1692971710
    },
    {
        "content": "<p>that's <code>class abbrev</code></p>",
        "id": 387280860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971724
    },
    {
        "content": "<p>although it's probably subject to the same issues regarding synth order</p>",
        "id": 387280965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971756
    },
    {
        "content": "<p>oh nice, then I'll just use that one. I hope it doesn't have the same limitation like that haskell type synonyms</p>",
        "id": 387280975,
        "sender_full_name": "MangoIV",
        "timestamp": 1692971759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/type.20class.20.20synonym/near/387280965\">said</a>:</p>\n<blockquote>\n<p>although it's probably subject to the same issues regarding synth order</p>\n</blockquote>\n<p>yes, same issue :/ So does that mean that this is not possible in Lean? that would be very unfortunate.</p>",
        "id": 387281324,
        "sender_full_name": "MangoIV",
        "timestamp": 1692971853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"586938\">@MangoIV</span> The synth order check is not mandatory. You can turn it off and things will work as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.checkSynthOrder</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 387393224,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693032575
    },
    {
        "content": "<p>The error is just a warning that this class and instance has bad properties for certain type class inference situations. If your use case does not fall prey to those circumstances, then everything can still work out fine.</p>",
        "id": 387393593,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693032905
    },
    {
        "content": "<p>In your case, you may, in fact, want to use <code>class abbrev</code> to get the <code>A + B -&gt; C</code> instance for free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.checkSynthOrder</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>The last instance would need manual definition with just <code>extends</code>.</p>",
        "id": 387393841,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693033158
    },
    {
        "content": "<p>In this case, afaik, the warning is simply saying that the <code>[C a b c] : A a b</code> and <code>[C a b c] : B b c</code> instances will never be conventionally synthesizable. They can only be synthesized if an <code>C a b c</code> is already available in the context or <code>c</code> or <code>a</code> are manually set (because of the unbound <code>?c</code> or <code>?a</code>).</p>",
        "id": 387394133,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693033420
    },
    {
        "content": "<p>Usually this is not a desirable property of instances (hence the error), but in your case it may be perfectly fine.</p>",
        "id": 387394360,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693033601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/type.20class.20.20synonym/near/387394360\">said</a>:</p>\n<blockquote>\n<p>Usually this is not a desirable property of instances (hence the error), but in your case it may be perfectly fine.</p>\n</blockquote>\n<p>In fact, I claim it is perfectly fine exactly when <code>a</code> and <code>c</code> are functional dependencies on <code>b</code>, so you should make them <code>outParam</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 387403115,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1693038614
    },
    {
        "content": "<p>However, practically I would suggest going with Mario's <code>class C (a b c : Type) [A a b] [B b c]</code> (my technical term is \"unbundled inheritance\"). You are much less likely to encounter errors this way.</p>",
        "id": 387403438,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1693038896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/type.20class.20.20synonym/near/387393841\">said</a>:</p>\n<blockquote>\n<p>In your case, you may, in fact, want to use <code>class abbrev</code> to get the <code>A + B -&gt; C</code> instance for free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.checkSynthOrder</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>The last instance would need manual definition with just <code>extends</code>.</p>\n</blockquote>\n<p>Perfect, thank you so much, this makes a lot of sense!</p>",
        "id": 387406800,
        "sender_full_name": "MangoIV",
        "timestamp": 1693041440
    },
    {
        "content": "<p>On another note, is there a way to get actual functional dependencies? I e say I have an Add typeclass with three parameters and I want to hint lean that it can synthesise the third parameter every time that two others are given?</p>",
        "id": 387406913,
        "sender_full_name": "MangoIV",
        "timestamp": 1693041519
    },
    {
        "content": "<p>that's the version Anne suggested</p>",
        "id": 387406960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693041574
    },
    {
        "content": "<p><code>outParam</code> are outputs, everything else is an input</p>",
        "id": 387406976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693041592
    },
    {
        "content": "<p>(incidentally, the actual <code>HAdd</code> class does exactly this)</p>",
        "id": 387407100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693041696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">The notation typeclass for heterogeneous addition.</span>\n<span class=\"sd\">This enables the notation `a + b : γ` where `a : α`, `b : β`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">HAdd</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `a + b` computes the sum of `a` and `b`.</span>\n<span class=\"sd\">  The meaning of this notation is type-dependent. -/</span>\n  <span class=\"n\">hAdd</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n</code></pre></div>",
        "id": 387407122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693041719
    },
    {
        "content": "<p>That’s not the same. With outParam I can only ever specify one fundep. But Add can theoretically compute all three parameters given two others.</p>",
        "id": 387407212,
        "sender_full_name": "MangoIV",
        "timestamp": 1693041765
    },
    {
        "content": "<p>I'm not sure what you mean</p>",
        "id": 387407241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693041798
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">Add</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Constraint</span>\n<span class=\"kr\">class</span><span class=\"w\"> </span><span class=\"kt\">Add</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span>\n</code></pre></div>\n<p>This doesn't work in Haskell because of how instance resolution cannot backtrack and because of coherence but it should work in lean</p>\n<p>In Haskell you can specify two of the dependencies because they don't need to backtrack</p>",
        "id": 387407525,
        "sender_full_name": "MangoIV",
        "timestamp": 1693042020
    },
    {
        "content": "<p>no you can't have multiple functional dependency structures for the same class, they have to be different classes in that case</p>",
        "id": 387407647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042098
    },
    {
        "content": "<p>it's not really clear how you would validate instances in that case</p>",
        "id": 387407665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042114
    },
    {
        "content": "<p>can you please elaborate on the second message or link to some resource about the constraints of the algorithm?</p>",
        "id": 387407706,
        "sender_full_name": "MangoIV",
        "timestamp": 1693042163
    },
    {
        "content": "<p>the synth order check needs to know what the functional dependencies are</p>",
        "id": 387407723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042187
    },
    {
        "content": "<p>it also comes up when initially setting up the typeclass search, the output variables are replaced by metavariables and unified after</p>",
        "id": 387407790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042217
    },
    {
        "content": "<p>it's not really clear how you would do this if the class has multiple dependency structures</p>",
        "id": 387407823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042255
    },
    {
        "content": "<p>What does haskell do with functional dependency information?</p>",
        "id": 387407862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042307
    },
    {
        "content": "<p>it's basically an injectivity annotation, it allows at call site to compute parameters from the others because all instances check some conditions for the instances to hold such that all of them are indeed injective (I'm not a maths person, I'm not talking about the injectivity that functions can have but the injectivity that functions must have (the other direction)). In the case that there are no fundeps, you can write more instances but you get an \"ambiguous type\" so something like leans metavariables? at the calll site.</p>",
        "id": 387408314,
        "sender_full_name": "MangoIV",
        "timestamp": 1693042649
    },
    {
        "content": "<p><a href=\"https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/functional_dependencies.html?highlight=functionaldependencies#extension-FunctionalDependencies\">https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/functional_dependencies.html?highlight=functionaldependencies#extension-FunctionalDependencies</a></p>",
        "id": 387408464,
        "sender_full_name": "MangoIV",
        "timestamp": 1693042772
    },
    {
        "content": "<p>You can just turn off the synth order check and use it bidirectionally, if it works then great</p>",
        "id": 387408477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042784
    },
    {
        "content": "<p>but lean typeclasses aren't really designed to be used this way</p>",
        "id": 387408540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042811
    },
    {
        "content": "<p>here goes the dream of prolog-like instance search</p>",
        "id": 387408578,
        "sender_full_name": "MangoIV",
        "timestamp": 1693042852
    },
    {
        "content": "<p>oh you certainly can do that with lean typeclasses, it's not really advisable though</p>",
        "id": 387408596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042877
    },
    {
        "content": "<p>there are a lot of limits that subtly imply that you're doing it wrong if you try</p>",
        "id": 387408626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042907
    },
    {
        "content": "<p>not to mention the terms you get out are horrendous</p>",
        "id": 387408681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693042929
    },
    {
        "content": "<p>Yeah the backtracking case runs out of fuel really quickly <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 387408863,
        "sender_full_name": "MangoIV",
        "timestamp": 1693043086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586938\">MangoIV</span> has marked this topic as resolved.</p>",
        "id": 387425584,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693055630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586938\">MangoIV</span> has marked this topic as unresolved.</p>",
        "id": 387426911,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693056726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> actually the typeclass instance problem ist now stuck with turned off synth order and class abbrev when trying to use the function that requires that instance.</p>",
        "id": 387426948,
        "sender_full_name": "MangoIV",
        "timestamp": 1693056762
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/TL5rewPJ3eeN0dwQA-ehbEXG/image.png\">image.png</a><br>\nI now have to specify <code>sig</code></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TL5rewPJ3eeN0dwQA-ehbEXG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TL5rewPJ3eeN0dwQA-ehbEXG/image.png\"></a></div>",
        "id": 387427069,
        "sender_full_name": "MangoIV",
        "timestamp": 1693056851
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 387427117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056911
    },
    {
        "content": "<p>nwm, it works with the correct fundeps. :)</p>",
        "id": 387427560,
        "sender_full_name": "MangoIV",
        "timestamp": 1693057319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> I think your example is exactly the wrong way around, you want to compute the middle parameter from the outer ones.</p>",
        "id": 387428000,
        "sender_full_name": "MangoIV",
        "timestamp": 1693057610
    },
    {
        "content": "<p><a href=\"https://git.sr.ht/~mangoiv/leff/commit/e3901ed788d2993338f5a85405e3b7f7f5844f5f\">https://git.sr.ht/~mangoiv/leff/commit/e3901ed788d2993338f5a85405e3b7f7f5844f5f</a></p>",
        "id": 387428628,
        "sender_full_name": "MangoIV",
        "timestamp": 1693058162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586938\">MangoIV</span> <a href=\"#narrow/stream/270676-lean4/topic/type.20class.20.20synonym/near/387428000\">said</a>:</p>\n<blockquote>\n<p>I think your example is exactly the wrong way around, you want to compute the middle parameter from the outer ones.</p>\n</blockquote>\n<p>This entirely depends on how your initial <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> example works in practice. That is, what semantically <code>A</code>, <code>B</code>, and <code>C</code>. All three of  the no synth check, outer out params, and middle out param work for different use cases (and do not work for others).</p>",
        "id": 387692221,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693236349
    }
]