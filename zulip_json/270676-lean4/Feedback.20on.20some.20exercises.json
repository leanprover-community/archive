[
    {
        "content": "<p>Hi! I'm working through the <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#exercises\">exercises from chapter 3</a> of Theorem Proving in Lean 4.</p>\n<p>I've done about a third of them, and I'm looking for some general feedback on style that I might be able to incorporate into later solutions. Would anyone be willing to give me a quick code review? I'd greatly appreciate it. Here are my <a href=\"https://gist.github.com/sullyj3/627e10be94d6868de1d206ab7c57fc4c\">solutions so far</a>.</p>\n<p>In particular I'm looking for feedback on</p>\n<ul>\n<li>code neatness</li>\n<li>making things more idiomatic</li>\n<li>variable naming</li>\n<li>succinctness</li>\n<li>places I can use <code>show</code>, <code>have</code>, <code>suffices</code> to make things more readable - I don't feel like I have a good intuition for how/where to use them, or when to use <code>have</code> vs <code>let</code></li>\n</ul>",
        "id": 363012894,
        "sender_full_name": "James Sully",
        "timestamp": 1685704885
    },
    {
        "content": "<p>nitpicks especially welcome</p>",
        "id": 363015085,
        "sender_full_name": "James Sully",
        "timestamp": 1685705384
    },
    {
        "content": "<blockquote>\n<p>or when to use <code>have</code> vs <code>let</code></p>\n</blockquote>\n<p>The general rule is \"use <code>have</code> for proofs, use <code>let</code> for data\"</p>",
        "id": 363015115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685705393
    },
    {
        "content": "<p>In your code you don't have any data, so you don't need <code>let</code> at all</p>",
        "id": 363015206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685705407
    },
    {
        "content": "<p>Thank you, noted</p>",
        "id": 363015539,
        "sender_full_name": "James Sully",
        "timestamp": 1685705490
    },
    {
        "content": "<p><a href=\"https://gist.github.com/sullyj3/627e10be94d6868de1d206ab7c57fc4c#file-ch3-lean-L81-L82\">De Morgan's law 1</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_n_pOrq</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_n_pOrq</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"k\">from</span> <span class=\"n\">h_n_pOrq</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"k\">from</span> <span class=\"n\">h_n_pOrq</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inr</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 363309793,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1685799673
    },
    {
        "content": "<p><a href=\"https://gist.github.com/sullyj3/627e10be94d6868de1d206ab7c57fc4c#file-ch3-lean-L129-L130\"><code>¬(p ∧ q) → ¬p ∨ ¬q</code> (classical)</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">ifNotP</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"k\">from</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">hnp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hnp</span>\n</code></pre></div>\n<p>Suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">ifNotP</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"k\">from</span> <span class=\"n\">Or.inl</span>\n</code></pre></div>",
        "id": 363312386,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1685800435
    },
    {
        "content": "<p><a href=\"https://gist.github.com/sullyj3/627e10be94d6868de1d206ab7c57fc4c#file-ch3-lean-L147-L148\"><code>(p → q) → (¬p ∨ q)</code> (classical)</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">p</span>  <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">hnp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hnp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">show</span>  <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"k\">from</span> <span class=\"n\">Or.inl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 363314119,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1685800945
    }
]