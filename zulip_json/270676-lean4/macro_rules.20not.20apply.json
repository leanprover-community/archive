[
    {
        "content": "<p>Hello, I tried to use macro_rules to make DSL's but I have the impression that in some cases the macros are not applied, I don't understand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[bar|\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\" ( \"</span> <span class=\"n\">foo</span> <span class=\"s2\">\" ) \"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span>  <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p><code>#eval [bar|(0)]</code> return an error, the elaboration function is not implemented according to Lean</p>",
        "id": 382357750,
        "sender_full_name": "Remy Citerin",
        "timestamp": 1691327061
    },
    {
        "content": "<p>You're not handling the case for <code>[bar|f]</code>where <code>f</code> is a <code>foo</code> but not a <code>num</code>. This fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[bar|\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\" ( \"</span> <span class=\"n\">foo</span> <span class=\"s2\">\" ) \"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"o\">))</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">])</span>       <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"o\">)</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|$</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"c1\">-- add this</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 382367876,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1691329922
    },
    {
        "content": "<p>yes but normally it should just reduce <code>(0)</code> to <code>0</code> in <code>[bar|(0)]</code>? And that doesn't solve the problem I want to solve (here is just a minimal example), because in fact I'm not really using $[bar|$f]$ but a custom elaborator that I want to keep simple: for example having a general notation for binary operators like <code>[BINOP| +, $e1, $e2]</code> then have a set of macros to have <code>+</code>, <code>*</code>... with the right associativity...</p>",
        "id": 382375257,
        "sender_full_name": "Remy Citerin",
        "timestamp": 1691332105
    },
    {
        "content": "<p>Does this serve your use case better?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span>      <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">foo</span><span class=\"o\">])</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 382379181,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1691333121
    },
    {
        "content": "<p>no it doesn't work, like I said, I actually want to be able to use custom elaborators:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[bar|\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\" ( \"</span> <span class=\"n\">foo</span> <span class=\"s2\">\" ) \"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span>      <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">foo</span><span class=\"o\">])</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"c1\">-- my goal: elabFoo does not contain the rule `($f:foo)` because this case is handled by macros</span>\n<span class=\"c1\">-- so the user of my library can add macros in my DSL</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabFoo</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n.getNat</span>\n    <span class=\"n\">return</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">s</span> <span class=\"s2\">\"unsupported syntax\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"elab_foo \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabFoo</span> <span class=\"n\">e</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">elab_foo</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- error: unsupported syntax</span>\n</code></pre></div>",
        "id": 382605967,
        "sender_full_name": "Remy Citerin",
        "timestamp": 1691410582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578475\">@Remy Citerin</span> You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.expandMacros#doc\">docs#Lean.expandMacros</a> to apply any macros to a syntax before match on it. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">elabFoo</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">expandMacros</span> <span class=\"n\">foo</span>\n  <span class=\"k\">match</span> <span class=\"n\">foo</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n.getNat</span>\n    <span class=\"n\">return</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">s</span> <span class=\"s2\">\"unsupported syntax\"</span>\n</code></pre></div>",
        "id": 382773932,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691448876
    },
    {
        "content": "<p>The first choice in an elaborator should be to recursively <em>elaborate</em> nested syntax and then match on the Expr because that will deal with both macros and elaborators. It depends on the specific use case of course.</p>",
        "id": 382848169,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691479378
    },
    {
        "content": "<p>To answer the underlying question:<br>\n<span class=\"user-mention silent\" data-user-id=\"578475\">Remy Citerin</span> <a href=\"#narrow/stream/270676-lean4/topic/macro_rules.20not.20apply/near/382375257\">said</a>:</p>\n<blockquote>\n<p>yes but normally it should just reduce <code>(0)</code> to <code>0</code> in <code>[bar|(0)]</code>?</p>\n</blockquote>\n<p>No, macro expansion works outside-in. This is important for providing the outer macro with as much structure as possible as well as to unify expansion and elaboration.</p>",
        "id": 382848602,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691479480
    },
    {
        "content": "<p>using <code>Lean.expandMacros</code> works very well, thanks for the explanation</p>",
        "id": 382962693,
        "sender_full_name": "Remy Citerin",
        "timestamp": 1691502287
    }
]