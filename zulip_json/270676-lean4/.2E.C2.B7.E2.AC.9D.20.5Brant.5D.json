[
    {
        "content": "<p>Is it really necessary that we have three different incompatible dots  ?</p>",
        "id": 383301372,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691590595
    },
    {
        "content": "<p>I am glad they are different.</p>",
        "id": 383302647,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1691590791
    },
    {
        "content": "<p>You mean, they could look exactly the same on screen? Yes, that would be even funnier.</p>",
        "id": 383304195,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691591024
    },
    {
        "content": "<p>Don't forget <code>∙</code></p>",
        "id": 383304673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691591105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dots</span> <span class=\"o\">=</span>  <span class=\"s1\">'.·⬝∙•'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'U+</span><span class=\"si\">{:X}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"n\">unicodedata</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">dots</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'U+2E FULL STOP'</span><span class=\"p\">,</span> <span class=\"s1\">'U+B7 MIDDLE DOT'</span><span class=\"p\">,</span> <span class=\"s1\">'U+2B1D BLACK VERY SMALL SQUARE'</span><span class=\"p\">,</span>\n <span class=\"s1\">'U+2219 BULLET OPERATOR'</span><span class=\"p\">,</span> <span class=\"s1\">'U+2022 BULLET'</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>used respectively as</p>\n<ul>\n<li>Namespace resolution</li>\n<li>Goal focusing?</li>\n<li>Matrix multiplication?</li>\n<li><code>span R {x}</code></li>\n<li><code>smul</code></li>\n</ul>",
        "id": 383305806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691591293
    },
    {
        "content": "<p>Are you leaving out •?</p>",
        "id": 383306336,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691591385
    },
    {
        "content": "<p>But hey, at least we don't use <code>⸳</code> (U+2E33 raised dot)</p>",
        "id": 383307195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691591532
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>arguably some things are a bit hard to parse <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 383307241,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691591542
    },
    {
        "content": "<p>I'm sure you can work a <code>.</code> into there too</p>",
        "id": 383307355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691591569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.2E.C2.B7.E2.AC.9D.20.5Brant.5D/near/383305806\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Goal focusing?</li>\n</ul>\n</blockquote>\n<p>and simple functions</p>",
        "id": 383307591,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691591609
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">BType</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">BType</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·•</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B.C</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 383307998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691591674
    },
    {
        "content": "<p>Can't we just use <code>*</code> for matrix multiplication now? Have we tried it yet, or are we worried it's just going to cause elaboration hell?</p>",
        "id": 383320363,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691593584
    },
    {
        "content": "<p>I think we haven't tried it yet <em>and</em> we're worried</p>",
        "id": 383320534,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691593615
    },
    {
        "content": "<p>I think that's one of the few cases where <code>*</code> actually is safe</p>",
        "id": 383321587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691593780
    },
    {
        "content": "<p>It's a bad idea to try and replace <code>\\smul</code> with <code>*</code></p>",
        "id": 383321741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691593804
    },
    {
        "content": "<p>If we avoid having any coercions to or from matrices, it seems like it should work fine with a caveat. The <code>binop%</code> elaborator sort of turns itself off in this case, but if there are metavariables in indices it might see <code>A * B</code> with <code>A : Matrix ?a ?b R</code> and <code>B : Matrix ?c ?d R</code> and set <code>?a = ?c</code> and <code>?b = ?d</code> (I don't expect this to happen, but it's a possibility).</p>",
        "id": 383322009,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1691593843
    },
    {
        "content": "<p>Though I hope that a feature of the elaborator will prevent this from happening. If there's a heterogeneous instance it <em>shouldn't</em> do this, but it's worth trying out using <code>HMul</code>.</p>",
        "id": 383322226,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1691593883
    },
    {
        "content": "<p>for the other two dots, <code>smul</code> and <code>span</code>, where would one run into problems if they used the same character? At least defining works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- infixr:73 \" • \" =&gt; HSMul.hSMul      -- from Algebra.Groups.Def</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"n\">R</span> <span class=\"s2\">\" • \"</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"c1\">-- SMul</span>\n<span class=\"k\">#check</span> <span class=\"n\">α</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"c1\">-- Span</span>\n</code></pre></div>",
        "id": 383325368,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691594379
    },
    {
        "content": "<p>It gets confusing for <code>S • T</code> where <code>S T : Submodule R A</code>; is the LHS a type or a term?</p>",
        "id": 383325840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691594458
    },
    {
        "content": "<p>Oh, I guess that's still unambiguous in that only one will type-check</p>",
        "id": 383326155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691594512
    },
    {
        "content": "<p>how do you even still type the new span dot?</p>",
        "id": 383326552,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691594574
    },
    {
        "content": "<p>the docs claim it's <code>\\.</code>, but that's the goal focus dot and so got changed, likely forced by Lean4</p>",
        "id": 383326662,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691594592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.2E.C2.B7.E2.AC.9D.20.5Brant.5D/near/383326155\">said</a>:</p>\n<blockquote>\n<p>Oh, I guess that's still unambiguous in that only one will type-check</p>\n</blockquote>\n<p>Not if a <code>CoeSort</code> exists, though, right (then a term can become a type)? But I imagine that may never occur in math.</p>",
        "id": 383438126,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691626437
    },
    {
        "content": "<p>Terms becoming types? That happens all the time (in math).</p>",
        "id": 383476593,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691634975
    },
    {
        "content": "<p>Subgroups are groups</p>",
        "id": 383515130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691651107
    },
    {
        "content": "<p>The challenge is coming up with a term that can become a type that acts on some other term both as a term and as a type</p>",
        "id": 383554215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691659949
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6475\">#6475</a> looks at replacing <code>∙</code> with <code>•</code> and thus merging two of them that look almost identical in vscode. (<code>span R {x}</code> and <code>smul</code>)</p>\n<p>It seems to go reasonably fine, and overall I think it's not too bad of an idea. There are a few minor issues though, like <code>(·•·)</code> becoming ambiguous.</p>",
        "id": 383777331,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691708920
    },
    {
        "content": "<p>Does setting the <del>notation</del> <em>priority</em> of the new notation to be lower than the default resolve that ambiguity warning?</p>",
        "id": 383777654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691709111
    },
    {
        "content": "<p>setting it lower than <code>65</code> then raises issues with <code>smul</code> instead, something like <code>a • x + y</code> suddenly didn't compile anymore as it wanted <code>a</code> to be a type.</p>\n<p>Currently I have <code>scoped[Span] notation:69 R:70 \" • \" x:70 =&gt; Submodule.span R (singleton x)</code> although the prec on <code>R</code> seems to be irrelevant</p>",
        "id": 383777954,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691709278
    },
    {
        "content": "<p>Maybe there is something one could do with managing these precs. carefully...</p>",
        "id": 383778034,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691709326
    },
    {
        "content": "<p>I don't mean precedence but <code>priority</code></p>",
        "id": 383778038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691709328
    },
    {
        "content": "<p>ah <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span></p>",
        "id": 383778065,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691709349
    },
    {
        "content": "<p><code>notation (priority := 900)</code></p>",
        "id": 383778073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691709353
    },
    {
        "content": "<p>I see I wrote <code>notation</code> above instead of either word, now corrected...</p>",
        "id": 383778201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691709396
    },
    {
        "content": "<p>Hmm then it immediately reports <code>failed to synthesize instance HSMul</code> on any term <code>R • x</code>, so that doesn't work. But it would have helped on the <code>(·•·)</code> itself...</p>",
        "id": 383778842,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691709792
    },
    {
        "content": "<p>it seems that lean only tries both if they have the same priority: if I set it to <code>999</code> or <code>1001</code> then either half of the file fails to compile.</p>",
        "id": 383779027,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691709878
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Changing.20the.20notation.20for.20Matrix.2Emul\">#general &gt; Changing the notation for Matrix.mul</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 384090821,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691787197
    }
]