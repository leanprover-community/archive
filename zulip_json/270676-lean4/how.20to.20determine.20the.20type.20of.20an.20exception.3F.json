[
    {
        "content": "<p>Say I want to catch typeclass synthesis exceptions, but not others. What is the preferred way to do this? I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">e.toMessageData.toString</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span> <span class=\"s2\">\"failed to synthesize\"</span>\n</code></pre></div>",
        "id": 343238467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679351519
    },
    {
        "content": "<p>I found myself wanting to do this too</p>",
        "id": 343239089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679351762
    },
    {
        "content": "<p>In lean3 we're pretty bad at just blindly catching everything, which makes it hard to debug tactics by throwing errors when things go wrong</p>",
        "id": 343239230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679351807
    },
    {
        "content": "<p>Okay, perhaps for now I will add an <code>Exception.isFailedToSynthesize</code> with this implementation so it can be used elsewhere, and we can come up with a better implementation later?</p>",
        "id": 343241318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679352660
    },
    {
        "content": "<p>Okay, I've pushed this to <a href=\"https://github.com/leanprover-community/mathlib4/pull/2611\">!4#2611</a>.</p>",
        "id": 343242109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679353045
    }
]