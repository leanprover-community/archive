[
    {
        "content": "<p>I'd like to make a macro that constructs an inductive type with <code>n</code> elements, but I can't seem to figure out how to write the syntax for the constructor. The underscore in the following is what I'd like to fill in... what am I missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkIdents</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.range</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{i}{n}\"</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">idents</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdents</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">idents.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402320398,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700079489
    },
    {
        "content": "<p>does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">idents</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdents</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">idents</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>count?</p>",
        "id": 402320602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700079597
    },
    {
        "content": "<p>Ah great. I did try this out before but without the <code>:ident</code>, and it did not work. But that's good enough for me. Thanks Mario!</p>",
        "id": 402320794,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700079674
    },
    {
        "content": "<p>I would still be interested in seeing how to make the original code work (the one with <code>mapM</code>), if it's possible. Just for my own understanding.</p>",
        "id": 402321079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700079784
    },
    {
        "content": "<p><code> `(Lean.Parser.Command.ctor| | $i:ident)</code> works in that position</p>",
        "id": 402321342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700079878
    },
    {
        "content": "<p>I see. Thanks again! I didn't know that I can just put the parser name in the quotation like that.</p>",
        "id": 402321421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700079907
    },
    {
        "content": "<p>if you don't specify the name it defaults to <code>term</code> (also overloaded with one for <code>command</code>), which is often not what you want</p>",
        "id": 402321513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700079952
    },
    {
        "content": "<p>it doesn't use type information because the choice of parser affects the parsing of the rest of the quotation</p>",
        "id": 402321618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700079988
    },
    {
        "content": "<p>yes I am aware of that. But I was under the impression that to be able to write <code>(term| ...)</code> or <code>(command| ...) </code> or <code>(tactic| ...)</code> there was some other step under the hood. I naively tried <code>(ctor| ...)</code> which didn't work, so that's why I came to zulip :)</p>",
        "id": 402321748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700080037
    },
    {
        "content": "<p>parser categories don't need to be namespaced, but other parsers do</p>",
        "id": 402322125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700080187
    },
    {
        "content": "<p>I understand now. Thanks again Mario. that was very helpful.</p>",
        "id": 402322208,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700080207
    }
]