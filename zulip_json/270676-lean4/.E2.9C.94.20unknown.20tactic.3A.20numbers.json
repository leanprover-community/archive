[
    {
        "content": "<p>I'm working through Mechanics of Proof. <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#proving-inequalities\">https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#proving-inequalities</a></p>\n<p>The proof for example 1.4.1 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≥</span> <span class=\"mi\">9</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">numbers</span>\n</code></pre></div>\n<p>but Lean can't find the <code>numbers</code> tactic. I'm on Lean 4.3.0 + Mathlib. How can I fix this?</p>",
        "id": 408080873,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1702604356
    },
    {
        "content": "<p>This book uses some custom tactics written by <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , you should be able to use them in the repository used by the book</p>",
        "id": 408081101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604497
    },
    {
        "content": "<p><a href=\"https://github.com/hrmacbeth/math2001\">https://github.com/hrmacbeth/math2001</a></p>",
        "id": 408081192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604544
    },
    {
        "content": "<p>I could be wrong (I haven't used these tactics), but normally in mathlib you would use <code>norm_num</code> where the <code>numbers</code> tactic is being applied</p>",
        "id": 408081273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702604608
    },
    {
        "content": "<p>Thanks, I just found the explanation in the Introduction.</p>\n<blockquote>\n<p>The algebraic-reasoning tactic vocabulary of ring, rw, <strong>numbers (AKA norm_num)</strong>, rel (custom-written for this book but now in mathlib proper), extra (custom-written) and cancel (custom-written) suffices for pretty much all algebraic reasoning over the integers, including nonlinear inequalities.</p>\n</blockquote>",
        "id": 408081301,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1702604631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"544521\">@Alex Sweeney</span> You can also refer to the appendix<br>\n<a href=\"https://hrmacbeth.github.io/math2001/Mainstream_Lean.html\">https://hrmacbeth.github.io/math2001/Mainstream_Lean.html</a><br>\nfor more information about the custom tactics and their standard-Lean equivalents.  In the case of <code>numbers</code>, the reason for writing a custom variant of <code>norm_num</code> is that <code>norm_num</code> is too powerful!  It solves some problems that my students are supposed to learn to do by hand.</p>",
        "id": 408082447,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1702605295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544521\">Alex Sweeney</span> has marked this topic as resolved.</p>",
        "id": 408237667,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702665501
    }
]