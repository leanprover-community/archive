[
    {
        "content": "<p>I spent a few hours writing a verified fast modular exponentiation algorithm. I'm sure someone else has done this before, but I just thought I would share.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fast_modexp_aux</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"n\">running</span> <span class=\"n\">modulus</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">running</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exponent</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">exponent</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">exponent</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_of_lt_mul</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">exponent</span> <span class=\"k\">then</span>\n    <span class=\"n\">fast_modexp_aux</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"bp\">*</span> <span class=\"n\">base</span> <span class=\"bp\">%</span> <span class=\"n\">modulus</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">running</span> <span class=\"bp\">*</span> <span class=\"n\">base</span> <span class=\"bp\">%</span> <span class=\"n\">modulus</span><span class=\"o\">)</span> <span class=\"n\">modulus</span> <span class=\"o\">((</span><span class=\"n\">exponent</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">fast_modexp_aux</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"bp\">*</span> <span class=\"n\">base</span> <span class=\"bp\">%</span> <span class=\"n\">modulus</span><span class=\"o\">)</span> <span class=\"n\">running</span> <span class=\"n\">modulus</span> <span class=\"o\">((</span><span class=\"n\">exponent</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fast_modexp</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"n\">exponent</span> <span class=\"n\">modulus</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">modulus</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span> <span class=\"bp\">^</span> <span class=\"n\">exponent</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fast_modexp_aux</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"n\">m</span> <span class=\"n\">exponent</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fast_modexp_aux_spec</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">fast_modexp_aux</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">m</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">e</span> <span class=\"n\">using</span> <span class=\"n\">Nat.case_strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">h</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">fast_modexp_aux</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span>\n    <span class=\"k\">have</span> <span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt_succ</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_of_lt_mul</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">fast_modexp_aux</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">e</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">he</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">he'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">Nat.div_two_mul_two_add_one_of_odd</span> <span class=\"o\">(</span><span class=\"n\">Even.add_odd</span> <span class=\"n\">he</span> <span class=\"n\">odd_one</span><span class=\"o\">)</span>\n      <span class=\"n\">change</span> <span class=\"n\">fast_modexp_aux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hlt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_of_lt</span> <span class=\"n\">h₁</span><span class=\"o\">))]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_mod</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">Nat.mod_mod</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.pow_mod</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">he'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.mul_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">ring_nf</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">he</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">he'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">he</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.div_two_mul_two_of_even</span> <span class=\"o\">(</span><span class=\"n\">Odd.add_odd</span> <span class=\"n\">he</span> <span class=\"n\">odd_one</span><span class=\"o\">)</span>\n      <span class=\"n\">change</span> <span class=\"n\">fast_modexp_aux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hlt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_mod</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.pow_mod</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">he'</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_mod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fast_modexp_spec</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fast_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">m</span>\n  <span class=\"bp\">·</span> <span class=\"n\">change</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_one</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">change</span> <span class=\"n\">fast_modexp_aux</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fast_modexp_aux_spec</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.pow_mod</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fast_modexp</span> <span class=\"mi\">3081683040978812497613678567591472736846636481039624945710</span>\n  <span class=\"mi\">9688672230569954477594568460243311380476614093418427219148</span>\n  <span class=\"mi\">3862468819539322552199292737141641904852335676904946310429</span>\n  <span class=\"c1\">-- 1604949739222115423721086562038072677142980288837751825385</span>\n</code></pre></div>\n<p>It should be able to handle fairly large numbers. I haven't profiled it because I'm not really sure how to. Is there a version of fast modexp already in Mathlib?</p>",
        "id": 366315829,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686781426
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/System/IO.html#timeit\"><code>timeit</code></a> for doing pretty easy timing</p>",
        "id": 366321374,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686783826
    },
    {
        "content": "<p>Is there an example of how to use <code>timeit</code>? I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"fast modexp\"</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fast_modexp</span> <span class=\"mi\">3123</span> <span class=\"mi\">384016810</span> <span class=\"mi\">131231</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But this is not timing the computation because it always reports <code>0.0002ms</code></p>",
        "id": 366322173,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686784197
    },
    {
        "content": "<p>I think you need to prevent it from doing constant lifting. There's an option <code>set_option compiler.extract_closed false</code> that you can try?</p>",
        "id": 366322369,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686784299
    },
    {
        "content": "<p>alternatively, you can wrap it in a little function that takes the arguments so that the call is no longer a closed expression</p>",
        "id": 366322489,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686784353
    },
    {
        "content": "<p>Both #evals still print 0.0002 ms</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"fast modexp\"</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fast_modexp</span> <span class=\"mi\">3123</span> <span class=\"mi\">1243345244</span> <span class=\"mi\">131231</span><span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"normal\"</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">100000</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 366322543,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686784382
    },
    {
        "content": "<p>I finally got it to work. Of these three commands, the third is the only one which returns a realistic time.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">run_modexp</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fast_modexp</span> <span class=\"n\">m</span> <span class=\"n\">b</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"Fast modexp\"</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fast_modexp</span> <span class=\"mi\">213</span> <span class=\"mi\">1223423422342525235235</span> <span class=\"mi\">123</span><span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"Fast modexp\"</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">run_modexp</span> <span class=\"mi\">213</span> <span class=\"mi\">1231251251252142123523523643623442342345</span> <span class=\"mi\">123</span><span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"Fast modexp\"</span> <span class=\"o\">(</span><span class=\"n\">run_modexp</span> <span class=\"mi\">213</span> <span class=\"mi\">1231251251252142123523523643623442342345</span> <span class=\"mi\">123</span>\n</code></pre></div>",
        "id": 366322975,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686784603
    },
    {
        "content": "<p>I assume it's much faster than the standard Nat functions? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 366323876,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686785010
    },
    {
        "content": "<p>Well actually only for very large exponents. I might be timing this wrong but I think <code>fast_modexp</code> seems to take around 0.2 ms no matter how large the exponent is, whereas doing it normally is faster for small values (I think below 10000?). I have no experience benchmarking things so I could very well be wrong</p>",
        "id": 366324097,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686785120
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ocGLOoopSN8D6gP5OT2ljmL8/image.png\">image.png</a><br>\nHere's the output of a quick benchmark</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ocGLOoopSN8D6gP5OT2ljmL8/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ocGLOoopSN8D6gP5OT2ljmL8/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test_cases</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">10000</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">100000</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">1000000</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">)</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">run_fast_modexp</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fast_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">run_normal_modexp</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">case</span> <span class=\"k\">in</span> <span class=\"n\">test_cases</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">case</span>\n    <span class=\"k\">let</span> <span class=\"n\">fast_result</span> <span class=\"bp\">←</span> <span class=\"n\">timeit</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"fast_modexp {b} {e} {m}\"</span> <span class=\"o\">(</span><span class=\"n\">run_fast_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"n\">case</span> <span class=\"k\">in</span> <span class=\"n\">test_cases</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">case</span>\n    <span class=\"k\">let</span> <span class=\"n\">normal_result</span> <span class=\"bp\">←</span> <span class=\"n\">timeit</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"normal_modexp {b} {e} {m}\"</span> <span class=\"o\">(</span><span class=\"n\">run_normal_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 366325324,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686785716
    },
    {
        "content": "<p>I guess there are also some optimizations I can make. Is dividing by 2 the same speed as bit shifting one time? And is checking whether something is <code>Even</code> the same speed as checking whether it is divisible by 2?</p>",
        "id": 366327080,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686786697
    },
    {
        "content": "<p>Why is the first testcase significantly slower? Is some startup cost included there?</p>",
        "id": 366691912,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1686892911
    },
    {
        "content": "<p>I have no idea. I reran the test (also printing out what each function returned) and I got very different results.<br>\n<a href=\"/user_uploads/3121/aFuwFZggCpmzGgoD-DlQS3Yd/image.png\">image.png</a><br>\nDo you know a more reliable way to benchmark? I haven't ever done this before so I'm probably doing something wrong.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aFuwFZggCpmzGgoD-DlQS3Yd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/aFuwFZggCpmzGgoD-DlQS3Yd/image.png\"></a></div>",
        "id": 366701457,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686896361
    },
    {
        "content": "<p>In case images don't render</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">169</span><span class=\"n\">ms</span>\n<span class=\"mi\">661</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0063</span><span class=\"n\">ms</span>\n<span class=\"mi\">165</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0073</span><span class=\"n\">ms</span>\n<span class=\"mi\">289</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0083</span><span class=\"n\">ms</span>\n<span class=\"mi\">17</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0097</span><span class=\"n\">ms</span>\n<span class=\"mi\">501</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0365</span><span class=\"n\">ms</span>\n<span class=\"mi\">661</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0256</span><span class=\"n\">ms</span>\n<span class=\"mi\">165</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10000</span> <span class=\"mi\">916</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"n\">ms</span>\n<span class=\"mi\">289</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100000</span> <span class=\"mi\">916</span> <span class=\"mi\">294</span><span class=\"n\">ms</span>\n<span class=\"mi\">17</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000000</span> <span class=\"mi\">916</span> <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n<span class=\"mi\">501</span>\n</code></pre></div>",
        "id": 366701549,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686896390
    },
    {
        "content": "<p>I think it is most likely some sort of startup cost because if I shuffle the test cases around whichever one I put first seems to take significantly longer for the <code>fast_modexp</code>. Although it doesn't matter whether I test <code>fast_modexp</code> or <code>normal_modexp</code> first, the first test for <code>fast_modexp</code> is always the one that takes longer.</p>",
        "id": 366702612,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686896676
    },
    {
        "content": "<p>you could put an extra sacrifical test case at the start</p>",
        "id": 366704446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686897106
    },
    {
        "content": "<p>BTW I would be very concerned about the compiler seeing through the test cases here</p>",
        "id": 366704900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686897174
    },
    {
        "content": "<p>one thing you could do is put the test_cases in an IO.Ref and then read from that ref</p>",
        "id": 366705176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686897214
    },
    {
        "content": "<p>I'm not sure how to use <code>IO.Ref</code>, as I haven't really done monadic programming in before. Here's my current attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the_test_cases</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">10000</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">100000</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">1000000</span><span class=\"o\">,</span> <span class=\"mi\">916</span><span class=\"o\">)</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_cases_ref</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">IO.Ref</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">IO.mkRef</span> <span class=\"n\">the_test_cases</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">run_fast_modexp</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fast_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">run_normal_modexp</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">test_cases</span> <span class=\"bp\">←</span> <span class=\"n\">ST.Ref.get</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">test_cases_ref</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"n\">case</span> <span class=\"k\">in</span> <span class=\"n\">test_cases</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">case</span>\n    <span class=\"k\">let</span> <span class=\"n\">fast_result</span> <span class=\"bp\">←</span> <span class=\"n\">timeit</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"fast_modexp {b} {e} {m}\"</span> <span class=\"o\">(</span><span class=\"n\">run_fast_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">fast_result</span>\n  <span class=\"n\">for</span> <span class=\"n\">case</span> <span class=\"k\">in</span> <span class=\"n\">test_cases</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">case</span>\n    <span class=\"k\">let</span> <span class=\"n\">normal_result</span> <span class=\"bp\">←</span> <span class=\"n\">timeit</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"normal_modexp {b} {e} {m}\"</span> <span class=\"o\">(</span><span class=\"n\">run_normal_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">normal_result</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>This runs but has the same startup penalty. Should I be reading from the reference every loop? If so, would <code>test_cases_ref</code> need to be a <code>List</code> of references rather than a reference to a <code>List</code>?</p>",
        "id": 366709624,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686898276
    },
    {
        "content": "<p>no I think this will work, this is what I meant</p>",
        "id": 366709863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686898327
    },
    {
        "content": "<p>what are the performance numbers for this?</p>",
        "id": 366709942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686898347
    },
    {
        "content": "<p>this was not meant to fix the startup cost, but rather to avoid the compiler getting smart and optimizing the calculation to a constant</p>",
        "id": 366710094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686898388
    },
    {
        "content": "<p>To fix the startup cost, you should try evaluating <code>run_fast_modexp</code> once before the main loop and not timing it</p>",
        "id": 366710716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686898549
    },
    {
        "content": "<p>that's what I meant by a \"sacrificial test case\"</p>",
        "id": 366710765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686898560
    },
    {
        "content": "<p>There are probably some values used in the calculation which are being initialized on first use</p>",
        "id": 366710966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686898610
    },
    {
        "content": "<p>Here are the results, I added a test case with an exponent of 10 at the start.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">189</span><span class=\"n\">ms</span>\n<span class=\"mi\">469</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0062</span><span class=\"n\">ms</span>\n<span class=\"mi\">661</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">007</span><span class=\"n\">ms</span>\n<span class=\"mi\">165</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0086</span><span class=\"n\">ms</span>\n<span class=\"mi\">289</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0102</span><span class=\"n\">ms</span>\n<span class=\"mi\">17</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012</span><span class=\"n\">ms</span>\n<span class=\"mi\">501</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0418</span><span class=\"n\">ms</span>\n<span class=\"mi\">469</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0032</span><span class=\"n\">ms</span>\n<span class=\"mi\">661</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0288</span><span class=\"n\">ms</span>\n<span class=\"mi\">165</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10000</span> <span class=\"mi\">916</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">09</span><span class=\"n\">ms</span>\n<span class=\"mi\">289</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100000</span> <span class=\"mi\">916</span> <span class=\"mi\">300</span><span class=\"n\">ms</span>\n<span class=\"mi\">17</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000000</span> <span class=\"mi\">916</span> <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n<span class=\"mi\">501</span>\n</code></pre></div>",
        "id": 366711289,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686898690
    },
    {
        "content": "<p>Here are the results in a slightly more readable format</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">Exponent</span> <span class=\"bp\">|</span> <span class=\"n\">fast_modexp</span> <span class=\"bp\">|</span> <span class=\"n\">normal_modexp</span> <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>       <span class=\"mi\">10</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">189</span> <span class=\"n\">ms</span>    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0418</span> <span class=\"n\">ms</span>     <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>      <span class=\"mi\">100</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0062</span> <span class=\"n\">ms</span>   <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0032</span> <span class=\"n\">ms</span>     <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>     <span class=\"mi\">1000</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">007</span> <span class=\"n\">ms</span>    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0288</span> <span class=\"n\">ms</span>     <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>    <span class=\"mi\">10000</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0086</span> <span class=\"n\">ms</span>   <span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">09</span> <span class=\"n\">ms</span>       <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>   <span class=\"mi\">100000</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0102</span> <span class=\"n\">ms</span>   <span class=\"bp\">|</span> <span class=\"mi\">300</span> <span class=\"n\">ms</span>        <span class=\"bp\">|</span>\n<span class=\"bp\">|</span>  <span class=\"mi\">1000000</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012</span> <span class=\"n\">ms</span>    <span class=\"bp\">|</span> <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"n\">s</span>        <span class=\"bp\">|</span>\n</code></pre></div>",
        "id": 366712229,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686898913
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>Exponent</th>\n<th>fast_modexp</th>\n<th>normal_modexp</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td>0.189 ms</td>\n<td>0.0418 ms</td>\n</tr>\n<tr>\n<td>100</td>\n<td>0.0062 ms</td>\n<td>0.0032 ms</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>0.007 ms</td>\n<td>0.0288 ms</td>\n</tr>\n<tr>\n<td>10000</td>\n<td>0.0086 ms</td>\n<td>4.09 ms</td>\n</tr>\n<tr>\n<td>100000</td>\n<td>0.0102 ms</td>\n<td>300 ms</td>\n</tr>\n<tr>\n<td>1000000</td>\n<td>0.012 ms</td>\n<td>24.3 s</td>\n</tr>\n</tbody>\n</table>",
        "id": 366712896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899058
    },
    {
        "content": "<p>does it not work to run it beforehand?</p>",
        "id": 366713259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899154
    },
    {
        "content": "<p>Actually it does. I inserted <code>println! s!\"early run fast_modexp {fast_modexp 4 13 449}\"</code> as the first line in <code>test</code> and it seemed to mostly avoid the startup penalty, but not completely.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">early</span> <span class=\"n\">run</span> <span class=\"n\">fast_modexp</span> <span class=\"mi\">426</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0335</span><span class=\"n\">ms</span>\n<span class=\"mi\">469</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0043</span><span class=\"n\">ms</span>\n<span class=\"mi\">661</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">005</span><span class=\"n\">ms</span>\n<span class=\"mi\">165</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0067</span><span class=\"n\">ms</span>\n<span class=\"mi\">289</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0079</span><span class=\"n\">ms</span>\n<span class=\"mi\">17</span>\n<span class=\"n\">fast_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0091</span><span class=\"n\">ms</span>\n<span class=\"mi\">501</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0396</span><span class=\"n\">ms</span>\n<span class=\"mi\">469</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0017</span><span class=\"n\">ms</span>\n<span class=\"mi\">661</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000</span> <span class=\"mi\">916</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0254</span><span class=\"n\">ms</span>\n<span class=\"mi\">165</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">10000</span> <span class=\"mi\">916</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">91</span><span class=\"n\">ms</span>\n<span class=\"mi\">289</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">100000</span> <span class=\"mi\">916</span> <span class=\"mi\">304</span><span class=\"n\">ms</span>\n<span class=\"mi\">17</span>\n<span class=\"n\">normal_modexp</span> <span class=\"mi\">123</span> <span class=\"mi\">1000000</span> <span class=\"mi\">916</span> <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">s</span>\n<span class=\"mi\">501</span>\n</code></pre></div>",
        "id": 366715206,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686899562
    },
    {
        "content": "<p>At this point the measurements for <code>fast_modexp</code> are on the order of 4 to 30 microseconds so I don't know how accurate my computer actually is with timing.</p>",
        "id": 366715703,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686899675
    },
    {
        "content": "<p>how many times are you running it?</p>",
        "id": 366715758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899691
    },
    {
        "content": "<p>Just once. Is there a way to have <code>timeit</code> run multiple times?</p>",
        "id": 366715833,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686899709
    },
    {
        "content": "<p>it takes an IO action, you can just stick a loop inside</p>",
        "id": 366715984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899749
    },
    {
        "content": "<p>Would something like this work? At first I just tried discarding the value but it seemed to optimize the whole calculation away. I also got rid of the last test case because it took 20 seconds to run with normal modexp.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dump</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">IO.Ref</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">IO.mkRef</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">run_fast_modexp</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">ST.Ref.set</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">dump</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fast_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">run_normal_modexp</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">ST.Ref.set</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">dump</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 366718217,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686900291
    },
    {
        "content": "<p>Dividing each value by 100 should result in the mean time per run</p>\n<table>\n<thead>\n<tr>\n<th>Exponent</th>\n<th>fast_modexp (100 runs)</th>\n<th>normal_modexp (100 runs)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td>0.397 ms</td>\n<td>0.154 ms</td>\n</tr>\n<tr>\n<td>100</td>\n<td>0.429 ms</td>\n<td>0.125 ms</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>0.574 ms</td>\n<td>2.53 ms</td>\n</tr>\n<tr>\n<td>10000</td>\n<td>0.774 ms</td>\n<td>423 ms</td>\n</tr>\n<tr>\n<td>100000</td>\n<td>0.91 ms</td>\n<td>29.7 s</td>\n</tr>\n</tbody>\n</table>",
        "id": 366719652,
        "sender_full_name": "Niels Voss",
        "timestamp": 1686900642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"521331\">@Niels Voss</span> I would advise putting some additional test cases between 100 and 1000 (e.g., 250, 500, 750, etc.) to see if you cannot more precisely determine the cutoff point. Then, I would suggest making an e.g. <code>smart_modexp</code> that uses <code>normal_modexp</code> for the values below and <code>fast_modexp</code> for values above to get the best result.</p>",
        "id": 367272898,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687049625
    },
    {
        "content": "<p>It seems to be overtaking <code>normal_modexp</code> for exponents somewhere between 350 and 400. All test were done with the same base and modulus, so I might consider varying those to see how it impacts the results.</p>",
        "id": 367277160,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687051694
    },
    {
        "content": "<p>Would something like this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">smart_modexp</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">300</span> <span class=\"bp\">∧</span> <span class=\"n\">e</span> <span class=\"bp\">≤</span> <span class=\"mi\">300</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"k\">else</span> <span class=\"n\">fast_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smart_modexp_spec</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smart_modexp</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">smart_modexp</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fast_modexp_spec</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I think 300 is a bit lower than the point at which <code>fast_modexp</code> becomes faster than <code>b ^ e % m</code>, but I think the performance cost of running <code>fast_modexp b e m</code> when <code>b ^ e % m</code> was a better choice is less significant than the performance cost of running <code>b ^ e % m</code> when <code>fast_modexp b e m</code> should have been run.<br>\nAlso all the performance tests up to this point have been based on the <code>#eval</code> command in VSCode, but not kernel computation, which I don't know how to benchmark.</p>",
        "id": 367283842,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687055855
    },
    {
        "content": "<p>For benchmarking, see <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/speed.20tests\">#lean4 &gt; speed tests</a></p>",
        "id": 367338200,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687081836
    },
    {
        "content": "<p>Isn't this only about Münchausen numbers? I'm not quite sure how to use this to test my code.<br>\nMy goal was primarily to show that it was possible to write a formally verified modexp algorithm based on the Exponentiation by Squaring method, and I'm mainly benchmarking to make sure it performs faster than the Lean builtin. However I could definitely test this against a C implementation, though I'd imagine it won't perform that well because I was focusing more on verification than optimization.</p>",
        "id": 367456533,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687120409
    },
    {
        "content": "<p>I generalized the <code>fast_modexp</code> algorithm to work with any monoid, so it could theoretically be used to do things like matrix or polynomial exponentiation. I then used <code>ZMod m</code> to actually do the modular exponentiation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_by_squaring_even</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Nat.div_two_mul_two_of_even</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pow_by_squaring_aux</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">running</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">running</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">running</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_of_lt_mul</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_of_lt_mul</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">e</span> <span class=\"k\">then</span>\n    <span class=\"n\">pow_by_squaring_aux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">running</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pow_by_squaring_aux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">running</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pow_by_squaring</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pow_by_squaring_aux</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_by_squaring_aux_spec</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">running</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">pow_by_squaring_aux</span> <span class=\"n\">b</span> <span class=\"n\">running</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">running</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">b</span> <span class=\"n\">running</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">e</span> <span class=\"n\">using</span> <span class=\"n\">Nat.case_strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">running</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">running</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">pow_by_squaring_aux</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">e</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt_succ</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_of_lt_mul</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">change</span> <span class=\"n\">pow_by_squaring_aux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">running</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hle</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">running</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_by_squaring_even</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt_succ</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_of_lt_mul</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">change</span> <span class=\"n\">pow_by_squaring_aux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">running</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hle</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">running</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Odd.add_odd</span> <span class=\"n\">h</span> <span class=\"n\">odd_one</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_by_squaring_even</span> <span class=\"n\">b</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_by_squaring_spec</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">pow_by_squaring</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">pow_by_squaring</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_by_squaring_aux_spec</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">modexp_by_squaring</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ZMod.val</span> <span class=\"o\">(</span><span class=\"n\">pow_by_squaring</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod_pow_val_nat</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">ZMod.val</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ZMod.val</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_one</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ZMod.val_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ZMod.val_nat_cast</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ZMod.val_nat_cast</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ZMod.val_nat_cast</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.mul_mod</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod_val_pow_nat'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">ZMod.val</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod_pow_val_nat</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ZMod.val_nat_cast</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">modexp_by_squaring_spec</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">modexp_by_squaring</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">modexp_by_squaring</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_by_squaring_spec</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zmod_val_pow_nat'</span> <span class=\"n\">b</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 367474470,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687133173
    },
    {
        "content": "<p>One caveat is that this algorithm is much slower than the <code>fast_modexp</code> described above. It seems to run about 5 times slower. This isn't awful since it is still able to handle really large numbers and the time complexity (if I implemented it properly) should still be <code>O(log n)</code>, but it doesn't start performing faster than the normal modexp until an exponent of a little over 1000.</p>",
        "id": 367474747,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687133401
    }
]