[
    {
        "content": "<p>I have the following syntax category:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span>             <span class=\"n\">atom_</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"u64\"</span> <span class=\"o\">:</span> <span class=\"n\">atom_</span>\n</code></pre></div>\n<p>Now I'm trying to implement a <code>def elabAtom : TSyntax `atom_ → TermElabM Lean.Expr</code>, but how can I specify the match case for that <code>u64</code>?</p>\n<p>I'm trying to parse things like <code>2u64</code></p>",
        "id": 342604627,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679069010
    },
    {
        "content": "<p>I've tried some nonsense stuff like <code>| `(atom_| $[$n:num]u64) =&gt; ...</code> but I don't know what I'm doing at this point</p>",
        "id": 342605397,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679069160
    },
    {
        "content": "<p>Yikes, that may not be possible currently using quotations</p>",
        "id": 342606340,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679069328
    },
    {
        "content": "<p>Aw. Okay then. I'll stick with <code>scoped syntax num noWs \"|u64\" : atom_</code> then. <code>| `(atom_| $n:num|u64)</code> works</p>",
        "id": 342606995,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679069487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20to.20match.20on.20this.20syntax.3F/near/342606340\">said</a>:</p>\n<blockquote>\n<p>Yikes, that may not be possible currently using quotations</p>\n</blockquote>\n<p>Oh wait, how can I do it without quotations?</p>",
        "id": 342607176,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679069529
    },
    {
        "content": "<p>In the end it's just an inductive data type. See <code>Syntax.getArg</code>. <code>set_option pp.raw</code> might be helpful for visualizing the internal structure.</p>",
        "id": 342607594,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679069633
    },
    {
        "content": "<p>Sorry, I'm a bit lost here. How can I use <code>pp.raw</code> to help me?</p>",
        "id": 342610008,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679070224
    },
    {
        "content": "<p>If you have an example command that uses the notation, you can for example combine the option with <code>trace.Elab.input</code> to see the structure. But really there is not much guesswork needed in this case, <code>stx.raw[0].toNat</code> should give you the <code>num</code>'s value.</p>",
        "id": 342611052,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679070482
    },
    {
        "content": "<p>Ah sorry, you still have to check the syntax kind (<code>stx.getKind</code>) to decide which atom kind you are looking at of course. You might want to use <code>syntax (name := ...)</code> so you don't have to rely on the generated name.</p>",
        "id": 342611655,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679070618
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">atom_u64</span><span class=\"o\">)</span> <span class=\"n\">num</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"u64\"</span> <span class=\"o\">:</span> <span class=\"n\">atom_</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">stx.raw.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">`</span><span class=\"n\">atom_u64</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Atom.u64</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">UInt64.ofNat</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkNatLit</span> <span class=\"n\">stx.raw</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"o\">]]</span>\n    <span class=\"k\">else</span> <span class=\"n\">throwUnsupportedSyntax</span>\n</code></pre></div>",
        "id": 342612400,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679070778
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 342612894,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679070891
    }
]