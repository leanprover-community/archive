[
    {
        "content": "<p>I'm working on section 4.4 (Arrays and Indexing) of the Functional Programming in Lean book. The book says that Lean should throw a compile error, but something is clearly extra broken. Is this issue my fault or Lean's?</p>\n<p>Here's the code in text</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 4.4 Arrays and Indexing</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idahoSpiders</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Banded Garden Spider\"</span><span class=\"o\">,</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n    <span class=\"s2\">\"Long-legged Sac Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Wolf Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Hobo Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Cat-faced Spider\"</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">NonEmptyList.inBounds</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">xs.tail.length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.get</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">xs.inBounds</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.head</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.tail</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span> <span class=\"n\">NonEmptyList.inBounds</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"o\">:=</span> <span class=\"n\">NonEmptyList.get</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">idahoSpiders</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"c1\">-- \"Banded Garden Spider\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">idahoSpiders</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"c1\">-- Server crashes</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/AaUt_IC4-XxWKLkV2ZxZj-7y/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AaUt_IC4-XxWKLkV2ZxZj-7y/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AaUt_IC4-XxWKLkV2ZxZj-7y/image.png\"></a></div>",
        "id": 392912056,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1695619513
    },
    {
        "content": "<p>This seems similar to <a href=\"#narrow/stream/270676-lean4/topic/LSP.20crash\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/LSP.20crash</a>.</p>",
        "id": 392924069,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695623750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"544521\">@Alex Sweeney</span> This should be a workaround so that you can see an error without crashing Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">idahoSpiders</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 392939806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695629373
    }
]