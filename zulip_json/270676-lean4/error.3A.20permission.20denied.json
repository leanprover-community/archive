[
    {
        "content": "<p>I have just created a few new project:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">usporadani</span> <span class=\"n\">math</span>\n</code></pre></div>\n<p>Unfortunately <code>lake build</code> gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">manifest</span> <span class=\"n\">entry</span><span class=\"bp\">;</span> <span class=\"n\">deleting</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span> <span class=\"n\">and</span> <span class=\"n\">cloning</span> <span class=\"n\">again</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">13</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.</span><span class=\"n\">git</span><span class=\"bp\">\\</span><span class=\"n\">objects</span><span class=\"bp\">\\</span><span class=\"n\">pack</span><span class=\"bp\">\\</span><span class=\"n\">pack</span><span class=\"bp\">-</span><span class=\"mi\">27</span><span class=\"n\">b45fcfa7b0644c1a2182536e1df0193c2b3f86.idx</span>\n</code></pre></div>\n<p>Lean 4 used to work on my computer before I did <code>elan update</code> right before creating the new project.</p>",
        "id": 364350312,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686159009
    },
    {
        "content": "<p>you have an old <code>lake</code>, as indicated by the use of <code>lean_packages</code> dir</p>",
        "id": 364350910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686159172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364350312\">said</a>:</p>\n<blockquote>\n<p>I have just created a few new project:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">usporadani</span> <span class=\"n\">math</span>\n</code></pre></div>\n<p>Unfortunately <code>lake build</code> gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">manifest</span> <span class=\"n\">entry</span><span class=\"bp\">;</span> <span class=\"n\">deleting</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span> <span class=\"n\">and</span> <span class=\"n\">cloning</span> <span class=\"n\">again</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">13</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.</span><span class=\"n\">git</span><span class=\"bp\">\\</span><span class=\"n\">objects</span><span class=\"bp\">\\</span><span class=\"n\">pack</span><span class=\"bp\">\\</span><span class=\"n\">pack</span><span class=\"bp\">-</span><span class=\"mi\">27</span><span class=\"n\">b45fcfa7b0644c1a2182536e1df0193c2b3f86.idx</span>\n</code></pre></div>\n<p>Lean 4 used to work on my computer before I did <code>elan update</code> right before creating the new project.</p>\n</blockquote>\n<p>Did you change your default toolchain after running elan update?</p>",
        "id": 364351024,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159200
    },
    {
        "content": "<p>Sometimes if you have chosen a specific toolchain as your default, elan doesn't change the setting after downloading the latest nightly</p>",
        "id": 364351149,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364351024\">said</a>:</p>\n<blockquote>\n<p>Did you change your default toolchain after running elan update?</p>\n</blockquote>\n<p>No.</p>\n<p>Is there a command I should run after every <code>elan update</code>?</p>",
        "id": 364351197,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686159242
    },
    {
        "content": "<p>what's the output of <code>elan toolchain list</code>?</p>",
        "id": 364351303,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364351303\">said</a>:</p>\n<blockquote>\n<p>what's the output of <code>elan toolchain list</code>?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stable</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">50</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">01</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">24</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">07</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">09</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span>\n</code></pre></div>",
        "id": 364351454,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686159299
    },
    {
        "content": "<p>Yes so your default toolchain is pinned to the nightly from 24th Feb.</p>",
        "id": 364351661,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159357
    },
    {
        "content": "<p>Try <code> elan default leanprover/lean4:nightly</code>. Then every time you run <code>elan update</code> you will be using the latest nightly.</p>",
        "id": 364351831,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159389
    },
    {
        "content": "<p>If instead you choose a specific nightly ( for a given date <code>leanprover/lean4:nightly-yyyy-mm-dd</code>) then elan will merely download the latest nightly and let you continue using that specific nightly.</p>",
        "id": 364352214,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159480
    },
    {
        "content": "<p>The latter case is similar to <code>opam pin</code> for coq and ocaml</p>",
        "id": 364352510,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159541
    },
    {
        "content": "<p>I did:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">default</span> <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n</code></pre></div>\n<p>As a result <code>elan toolchain list</code> now gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stable</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">50</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">01</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">24</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">07</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">09</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span>\n</code></pre></div>\n<p>Nevertheless, when I create another new project, it does not build.</p>",
        "id": 364352898,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686159621
    },
    {
        "content": "<p>The next step is to run <code>chmod -R 755 &lt;your project dir&gt;</code></p>",
        "id": 364353288,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159704
    },
    {
        "content": "<p>It could very well be some weird directory permissions issue</p>",
        "id": 364353585,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159778
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">order</span><span class=\"bp\">-</span><span class=\"n\">theory</span> <span class=\"n\">math</span>\n<span class=\"bp\">$</span> <span class=\"n\">cd</span> <span class=\"n\">order</span><span class=\"bp\">-</span><span class=\"n\">theory</span><span class=\"bp\">/</span>\n<span class=\"bp\">$</span> <span class=\"n\">ls</span>\n<span class=\"n\">OrderTheory.lean</span>  <span class=\"n\">lakefile.lean</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_target</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_target</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n<span class=\"bp\">$</span> <span class=\"n\">chmod</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"mi\">755</span> <span class=\"bp\">.</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">manifest</span> <span class=\"n\">entry</span><span class=\"bp\">;</span> <span class=\"n\">deleting</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span> <span class=\"n\">and</span> <span class=\"n\">cloning</span> <span class=\"n\">again</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_target</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_target</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>",
        "id": 364353745,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686159829
    },
    {
        "content": "<p>Did you run <code>lake update</code> after entering your project dir?</p>",
        "id": 364353773,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159839
    },
    {
        "content": "<p>No.</p>",
        "id": 364353862,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686159855
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">13</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.</span><span class=\"n\">git</span><span class=\"bp\">\\</span><span class=\"n\">objects</span><span class=\"bp\">\\</span><span class=\"n\">pack</span><span class=\"bp\">\\</span><span class=\"n\">pack</span><span class=\"bp\">-</span><span class=\"mi\">33</span><span class=\"n\">d2cc8135268a1430f2d9e86fcdefdcf196481c.idx</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">manifest</span> <span class=\"n\">entry</span><span class=\"bp\">;</span> <span class=\"n\">deleting</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span> <span class=\"n\">and</span> <span class=\"n\">cloning</span> <span class=\"n\">again</span>\n</code></pre></div>",
        "id": 364353957,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686159884
    },
    {
        "content": "<p>are you inside a folder which contains a <del>lakefile.lean</del> (EDIT: lean-toolchain) when you create your project?</p>",
        "id": 364354200,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686159957
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">ls</span>\n<span class=\"n\">OrderTheory.lean</span>  <span class=\"n\">lakefile.lean</span>  <span class=\"n\">lean_packages</span><span class=\"bp\">/</span>\n</code></pre></div>",
        "id": 364354320,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686159984
    },
    {
        "content": "<p>Try <code>ls ..</code></p>",
        "id": 364354379,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686160000
    },
    {
        "content": "<p>one reason you might be accidentally using an old toolchain is that there is an old  <code>lean-toolchain</code> file in the directory from which you are calling <code>lake new...</code></p>",
        "id": 364354696,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686160092
    },
    {
        "content": "<p>I have a guess you are using an even older toolchain than the feb 24th nightly because of this.</p>",
        "id": 364355033,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686160197
    },
    {
        "content": "<p>you can use <code>lake +leanprover/lean4:nightly new ...</code> to run a particular version of lake</p>",
        "id": 364355651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686160350
    },
    {
        "content": "<p>What Mario said, please follow the official instructions: <a href=\"https://github.com/leanprover-community/mathlib4#in-a-new-project\">https://github.com/leanprover-community/mathlib4#in-a-new-project</a></p>",
        "id": 364355696,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686160366
    },
    {
        "content": "<p>Should I use <code>nightly-2023-02-04</code> specifically?</p>",
        "id": 364355972,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686160429
    },
    {
        "content": "<p>Yes</p>",
        "id": 364355986,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686160435
    },
    {
        "content": "<p>Wait why?</p>",
        "id": 364356040,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686160442
    },
    {
        "content": "<p>I have been gladly using later versions as well and they have worked perfectly fine</p>",
        "id": 364356141,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686160463
    },
    {
        "content": "<p>I suppose it's fine as long as we update that line of the readme whenever lake changes the lakefile format</p>",
        "id": 364356236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686160485
    },
    {
        "content": "<p>this happens rarely, anything since feb should be fine</p>",
        "id": 364356343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686160507
    },
    {
        "content": "<p>If it works fine that's good, it's only when things break and you want help here that you should follow the instructions as written :)</p>",
        "id": 364356371,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686160513
    },
    {
        "content": "<p>I see that the instructions have changed. I wrote a big chunk of the previous version of the instructions. There the only requirement was a version later than Feb 04 nightly</p>",
        "id": 364356561,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686160555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do we need to update the expected <code>cache get</code> output in the instructions? I haven't followed the recent <code>cache</code> changes closely</p>",
        "id": 364356682,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686160572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364355972\">said</a>:</p>\n<blockquote>\n<p>Should I use <code>nightly-2023-02-04</code> specifically?</p>\n</blockquote>\n<p>Will I have a four-month-old version of mathlib4 as a result?</p>",
        "id": 364357076,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686160665
    },
    {
        "content": "<p>no</p>",
        "id": 364357112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686160672
    },
    {
        "content": "<p>this is just the version of lake used to set up the project, once you enter the directory you will be using the version of lean/lake used by mathlib master</p>",
        "id": 364357271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686160701
    },
    {
        "content": "<p>It is a bit of a shame that this process always involves getting two copies of Lean 4, knowing how huge is Lean 4.</p>",
        "id": 364357623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686160778
    },
    {
        "content": "<p>About the cache, since it came up. Recently I have been getting a weird warning that I have ignored so far (only on mac, not linux). I have safely ignored them since they don't cause trouble anywhere else:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">directory</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"n\">option</span> <span class=\"bp\">-</span><span class=\"n\">L</span><span class=\"bp\">/</span><span class=\"n\">Applications</span><span class=\"bp\">/</span><span class=\"n\">Xcode_14.2.app</span><span class=\"bp\">/</span><span class=\"n\">Contents</span><span class=\"bp\">/</span><span class=\"n\">Developer</span><span class=\"bp\">/</span><span class=\"n\">Platforms</span><span class=\"bp\">/</span><span class=\"n\">MacOSX.platform</span><span class=\"bp\">/</span><span class=\"n\">Developer</span><span class=\"bp\">/</span><span class=\"n\">SDKs</span><span class=\"bp\">/</span><span class=\"n\">MacOSX13.1.sdk</span><span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span>\n<span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">system</span><span class=\"bp\">/</span><span class=\"n\">libsystem_kernel.dylib</span> <span class=\"n\">has</span> <span class=\"n\">version</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">newer</span> <span class=\"n\">than</span> <span class=\"n\">target</span> <span class=\"n\">minimum</span> <span class=\"n\">of</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">system</span><span class=\"bp\">/</span><span class=\"n\">libsystem_platform.dylib</span> <span class=\"n\">has</span> <span class=\"n\">version</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">newer</span> <span class=\"n\">than</span> <span class=\"n\">target</span> <span class=\"n\">minimum</span> <span class=\"n\">of</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">system</span><span class=\"bp\">/</span><span class=\"n\">libsystem_pthread.dylib</span> <span class=\"n\">has</span> <span class=\"n\">version</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">newer</span> <span class=\"n\">than</span> <span class=\"n\">target</span> <span class=\"n\">minimum</span> <span class=\"n\">of</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>why is <code>cache</code> complaining about newer versions of libraries than a target \"minimum\"?</p>",
        "id": 364357674,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686160788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364357271\">said</a>:</p>\n<blockquote>\n<p>this is just the version of lake used to set up the project, once you enter the directory you will be using the version of lean/lake used by mathlib master</p>\n</blockquote>\n<p>I guess we should clarify that in the text</p>",
        "id": 364357813,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686160809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364356371\">said</a>:</p>\n<blockquote>\n<p>If it works fine that's good, it's only when things break and you want help here that you should follow the instructions as written :)</p>\n</blockquote>\n<p>I followed the instructions. Now both <code>lake build</code> and <code>lake update</code> give me the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_target</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>",
        "id": 364358084,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686160861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> agreed, this <code>lake new foo math</code> could very well be done by <code>elan</code> itself</p>",
        "id": 364358217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686160888
    },
    {
        "content": "<p>Yes, this is what I meant.</p>",
        "id": 364358299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686160902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> a recent run of <code>cache</code> looks something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">3053</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">3053</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">3053</span><span class=\"bp\">/</span><span class=\"mi\">3053</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3053</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364358346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686160919
    },
    {
        "content": "<p>@Martin : This is almost certainly a case of a <code>lean-toolchain</code> file inside the directory from which you are calling <code>lake new</code></p>",
        "id": 364358350,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686160920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> What is the output of <code>elan show</code> in that directory?</p>",
        "id": 364358512,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686160949
    },
    {
        "content": "<p>In the directory of the new project:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"k\">show</span>\n<span class=\"n\">installed</span> <span class=\"n\">toolchains</span>\n<span class=\"c1\">--------------------</span>\n\n<span class=\"n\">stable</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">50</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">01</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">04</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">24</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">07</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">09</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span>\n\n<span class=\"n\">active</span> <span class=\"n\">toolchain</span>\n<span class=\"c1\">----------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">directory</span> <span class=\"n\">override</span> <span class=\"n\">for</span> <span class=\"bp\">'\\\\?\\</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Martin</span><span class=\"bp\">\\</span><span class=\"n\">IST</span><span class=\"bp\">\\</span><span class=\"n\">_Lean</span><span class=\"bp\">\\</span><span class=\"n\">lean4try'</span><span class=\"o\">)</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">7</span><span class=\"n\">dbfaf9b7519</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364358703,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686160995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364358350\">said</a>:</p>\n<blockquote>\n<p>@Martin : This is almost certainly a case of a <code>lean-toolchain</code> file inside the directory from which you are calling <code>lake new</code></p>\n</blockquote>\n<p>This time I checked and so such file is in the directory where I was when <code>lake new</code> was called.</p>",
        "id": 364358977,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686161061
    },
    {
        "content": "<p>You used <code>elan override</code>. Don't do that. Remove it with <code>elan override unset &lt;path to lean4try&gt;</code>.</p>",
        "id": 364359148,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686161098
    },
    {
        "content": "<p>Which command did <code>elan override</code>? I didn't write that concrete thing.</p>",
        "id": 364359323,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686161141
    },
    {
        "content": "<p>No command I know of uses it</p>",
        "id": 364359570,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686161187
    },
    {
        "content": "<p>It is found here: <a href=\"https://leanprover.github.io/lean4/doc/setup.html\">https://leanprover.github.io/lean4/doc/setup.html</a></p>",
        "id": 364359695,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686161212
    },
    {
        "content": "<p>under basic setup</p>",
        "id": 364359774,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686161229
    },
    {
        "content": "<p>Let's remove that real quick</p>",
        "id": 364359972,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686161278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364359148\">said</a>:</p>\n<blockquote>\n<p>You used <code>elan override</code>. Don't do that. Remove it with <code>elan override unset &lt;path to lean4try&gt;</code>.</p>\n</blockquote>\n<p>I am on Windows 10 in Git Bash.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dvora</span><span class=\"bp\">@</span><span class=\"n\">DESKTOP</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"n\">V7A9NM</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Martin</span><span class=\"bp\">/</span><span class=\"n\">IST</span><span class=\"bp\">/</span><span class=\"n\">_Lean</span><span class=\"bp\">/</span><span class=\"n\">lean4try</span>\n<span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"n\">override</span> <span class=\"n\">unset</span> <span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Martin</span><span class=\"bp\">/</span><span class=\"n\">IST</span><span class=\"bp\">/</span><span class=\"n\">_Lean</span><span class=\"bp\">/</span><span class=\"n\">lean4try</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Found</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">Martin</span><span class=\"bp\">/</span><span class=\"n\">IST</span><span class=\"bp\">/</span><span class=\"n\">_Lean</span><span class=\"bp\">/</span><span class=\"n\">lean4try'</span> <span class=\"n\">which</span> <span class=\"n\">wasn't</span> <span class=\"n\">expected</span><span class=\"o\">,</span> <span class=\"n\">or</span> <span class=\"n\">isn't</span> <span class=\"n\">valid</span> <span class=\"k\">in</span> <span class=\"n\">this</span> <span class=\"n\">context</span>\n</code></pre></div>",
        "id": 364360254,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686161346
    },
    {
        "content": "<p>Relative path attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dvora</span><span class=\"bp\">@</span><span class=\"n\">DESKTOP</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"n\">V7A9NM</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Martin</span><span class=\"bp\">/</span><span class=\"n\">IST</span><span class=\"bp\">/</span><span class=\"n\">_Lean</span><span class=\"bp\">/</span><span class=\"n\">lean4try</span>\n<span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"n\">override</span> <span class=\"n\">unset</span> <span class=\"bp\">.</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Found</span> <span class=\"n\">argument</span> <span class=\"sc\">'.'</span> <span class=\"n\">which</span> <span class=\"n\">wasn't</span> <span class=\"n\">expected</span><span class=\"o\">,</span> <span class=\"n\">or</span> <span class=\"n\">isn't</span> <span class=\"n\">valid</span> <span class=\"k\">in</span> <span class=\"n\">this</span> <span class=\"n\">context</span>\n</code></pre></div>",
        "id": 364360476,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686161400
    },
    {
        "content": "<p>My bad, go in that directory if you're not there already and use <code>elan override unset</code> without parameter</p>",
        "id": 364360561,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686161414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364359570\">said</a>:</p>\n<blockquote>\n<p>No command I know of uses it</p>\n</blockquote>\n<p>Maybe I did that command in the past in order to have Lean 4 in this directory and Lean 3 elsewhere.</p>",
        "id": 364360684,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686161446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364360561\">said</a>:</p>\n<blockquote>\n<p>My bad, go in that directory if you're not there already and use <code>elan override unset</code> without parameter</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"n\">override</span> <span class=\"n\">unset</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">override</span> <span class=\"n\">toolchain</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Martin</span><span class=\"bp\">\\</span><span class=\"n\">IST</span><span class=\"bp\">\\</span><span class=\"n\">_Lean</span><span class=\"bp\">\\</span><span class=\"n\">lean4try'</span> <span class=\"n\">removed</span>\n</code></pre></div>",
        "id": 364360775,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686161475
    },
    {
        "content": "<p>Which if the previous instruction now apply?</p>",
        "id": 364360855,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686161498
    },
    {
        "content": "<p>Possibly <code>lake build</code> just works now. Though you really want to run <code>lake exe cache get</code> first.</p>",
        "id": 364361170,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686161576
    },
    {
        "content": "<p><del>It is possible that people end up following the setup instructions and get stuck. That should probably change.</del></p>",
        "id": 364363097,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686162103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364358217\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> agreed, this <code>lake new foo math</code> could very well be done by <code>elan</code> itself</p>\n</blockquote>\n<p>We could potentially add a <code>leanprover/lean4:mathlib</code> toolchain ala <code>nightly</code> that corresponds to whatever the current <code>lean-toolchain</code> in mathlib master is.</p>",
        "id": 364396098,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686172309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364396991\">said</a>:</p>\n<blockquote>\n<p>no, just using <code>elan</code> for <code>lake new</code></p>\n</blockquote>\n<p>Isn't it a bit confusing for users. Currently, elan manages installations and lake manages aspects of an individual project. Are you suggesting merging elan and lake?</p>",
        "id": 364396926,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686172623
    },
    {
        "content": "<p>no, just using <code>elan</code> for <code>lake new</code></p>",
        "id": 364396991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686172653
    },
    {
        "content": "<p>I'm not sure I ever use <code>elan</code> (working either with Lean 3 or Lean 4) and it seems to be a constant source of gotchas.</p>",
        "id": 364397139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686172713
    },
    {
        "content": "<p>you actually use <code>elan</code> all the time, you just don't realize it</p>",
        "id": 364397183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686172735
    },
    {
        "content": "<p><code>elan</code> is way better and more stable than every other lean project we have</p>",
        "id": 364397218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686172753
    },
    {
        "content": "<p>when you call <code>lean</code>, that's actually <code>elan</code>. <code>lake</code>? <code>elan</code> again</p>",
        "id": 364397258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686172776
    },
    {
        "content": "<p>To avoid porting features, the elan <code>init ...</code> could just add a toolchain file and then run <code>lake init ...</code> (and the elan <code>new</code> would create the directory and then do the same).</p>",
        "id": 364397263,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686172777
    },
    {
        "content": "<p>Then it is definitely confusing. Why is the toolchain manager managing one aspect of individual projects (namely creating them)</p>",
        "id": 364397406,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686172834
    },
    {
        "content": "<p>Because the first thing you need to do in a project is select a toolchain before using any of the tools?</p>",
        "id": 364397484,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686172872
    },
    {
        "content": "<p><code>lake new</code> could just be dispatched to <code>elan</code> to handle, users don't really have to care where the functionality is implemented</p>",
        "id": 364397498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686172877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> That creates the same problem though as it is not backwards compatible (i.e., if something in the process changes old lakes will break the call).</p>",
        "id": 364397645,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686172947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364397484\">said</a>:</p>\n<blockquote>\n<p>Because the first thing you need to do in a project is select a toolchain before using any of the tools?</p>\n</blockquote>\n<p>This was in response to Mario's suggestion. package managers and toolchain managers are doing two different things. To me it looks like a simpler solution exists: adding an interactive option in <code>lake new</code> and <code>lake init</code> to confirm the toolchain to use before creating a project. Cabal does this for haskell versions (98 or 2010)</p>",
        "id": 364397697,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686172973
    },
    {
        "content": "<p>But lake itself is on the toolchain so if the problem is a change in lake, then the old lake cannot fix it.</p>",
        "id": 364397807,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686173021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364397645\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> That creates the same problem though as it is not backwards compatible (i.e., if something in the process changes old lakes will break the call).</p>\n</blockquote>\n<p>not if <code>lake new</code> just calls <code>elan new</code> and hands off all the arguments - this is not likely to change any time soon</p>",
        "id": 364397813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173026
    },
    {
        "content": "<p>of course we will still have to deal with lakes from before we started doing this but once we get past that point it should be stable</p>",
        "id": 364397920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If we add new templates in the future, it may.</p>",
        "id": 364397932,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686173067
    },
    {
        "content": "<p>why?</p>",
        "id": 364397959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173077
    },
    {
        "content": "<p>This is fixed if elan manages <code>lake</code> installs separately.</p>",
        "id": 364397974,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686173085
    },
    {
        "content": "<p><code>lake new $args</code> -&gt; <code>elan new $args</code></p>",
        "id": 364397976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173088
    },
    {
        "content": "<p>new templates, if any, will be dispatched through elan</p>",
        "id": 364398024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I guess the question is do we want to manage project templates and other project setup options in the Lake project (e.g. in Lean) or in the elan project (e.g., in Rust).</p>",
        "id": 364398069,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686173132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364398069\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> I guess the question is do we want to manage project templates in the Lake project (e.g. in Lean) or in the elan project (e.g., in Rust).</p>\n</blockquote>\n<p>wait, doesn't cargo manage them (and not rustup) in rust.</p>",
        "id": 364398125,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686173160
    },
    {
        "content": "<p>elan is written in rust</p>",
        "id": 364398209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173175
    },
    {
        "content": "<p>In my mind : elan = rustup, lake = cargo.</p>",
        "id": 364398226,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686173182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364398209\">said</a>:</p>\n<blockquote>\n<p>elan is written in rust</p>\n</blockquote>\n<p>Ah okay, I see what you mean.</p>",
        "id": 364398250,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686173193
    },
    {
        "content": "<p>I don't really like the project template system, but such as it is it should be handled in elan</p>",
        "id": 364398415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173264
    },
    {
        "content": "<p>Still, this seems like a feature in the wrong place. One solution is to combine elan and lake into one project like stack for haskell.</p>",
        "id": 364398430,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686173272
    },
    {
        "content": "<p>because it includes logic like deciding which toolchain to use</p>",
        "id": 364398452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173280
    },
    {
        "content": "<p>which is part of why we are talking about this in the first place</p>",
        "id": 364398544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173303
    },
    {
        "content": "<p>Again <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> , users can still write <code>lake new</code></p>",
        "id": 364398567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173316
    },
    {
        "content": "<p>this is an implementation detail</p>",
        "id": 364398577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173323
    },
    {
        "content": "<p><code>elan new</code> doesn't even have to work literally as written</p>",
        "id": 364398632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173344
    },
    {
        "content": "<p>it would be more like <code>elan (masquerading as lake) new</code></p>",
        "id": 364398674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173358
    },
    {
        "content": "<p>because <code>elan</code> is a \"multi-personality binary\", it uses argv[0] to decide what to do</p>",
        "id": 364398721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173380
    },
    {
        "content": "<p>that's what I meant earlier when I said that <code>lake</code> is <code>elan</code> and <code>lean</code> is <code>elan</code>, they are all symlinks to the elan binary</p>",
        "id": 364398854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173419
    },
    {
        "content": "<p>the <code>lake +toolchain</code> syntax is parsed by <code>elan</code> before it hands the rest of the args off to the appropriate <code>lake</code> binary</p>",
        "id": 364398926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686173444
    },
    {
        "content": "<p>Hmm.. okay, as long as the interface is the same, I guess the idea is good.</p>\n<p>Bonus :  I wonder if elan can also manage mathlib in a central place and just simlink to the right version from a project.</p>",
        "id": 364399250,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686173566
    },
    {
        "content": "<p>Currently a fresh <code>lake-packages</code> directory consumes 3 GB.</p>",
        "id": 364399480,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686173670
    },
    {
        "content": "<p>That's a task for <code>cache get</code>, not elan. You can find previous discussions about symlinking somewhere around here.</p>",
        "id": 364399855,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686173849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364358217\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> agreed, this <code>lake new foo math</code> could very well be done by <code>elan</code> itself</p>\n</blockquote>\n<p>I like the current separation of concerns, but one simple fix would be for elan to automatically download mathlib4's lean-toolchain and use it when called as <code>lake new foo math</code>.</p>",
        "id": 364400284,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686174014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/error.3A.20permission.20denied/near/364399855\">said</a>:</p>\n<blockquote>\n<p>That's a task for <code>cache get</code>, not elan. You can find previous discussions about symlinking somewhere around here.</p>\n</blockquote>\n<p>Okay. The build files are indeed the bigger space hog, not the source files. The last discussion where I asked this question was one or two months ago, and there were other more pressing issues with cache to deal with. The primary obstacle with  simlinking itself had something to do with windows not doing well with symlinks. I don't know if OS specific solutions are a good workaround, at least in the short run. I also don't know how the situation has changed on the developers side, but in the meantime mathlib4 is 1GB bigger, and there are more installs.</p>",
        "id": 364401126,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1686174399
    },
    {
        "content": "<p>Another option would be to have Lake cache certain packages in the toolchain and symlink them into the <code>lake-packages</code> directory if possible.</p>",
        "id": 364403894,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686175639
    }
]