[
    {
        "content": "<p>I'm puzzled by the following example, which came up while I was trying to minimize another question.  I made a function <code>List.bar</code> which as far as I can tell has the same signature as <code>List.get</code>.  But an error I get when using <code>List.get</code> is not there for <code>List.bar</code>.</p>\n<p>I don't know if the presence of the <code>calc</code> is fundamental here, but when I try to change it to e.g. <code>show</code>, the error goes away. So ping <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> who's been working on <code>calc</code> lately.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.bar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">List.bar</span> <span class=\"c1\">-- {α : Type u_1} → (l : List α) → Fin (List.length l) → α</span>\n<span class=\"k\">#check</span> <span class=\"n\">List.get</span> <span class=\"c1\">-- {α : Type u} → (as : List α) → Fin (List.length as) → α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i2</span> <span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i1</span> <span class=\"bp\">=</span> <span class=\"n\">i2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">i2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">w.bar</span> <span class=\"o\">⟨</span><span class=\"n\">i2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"bp\">≤</span> <span class=\"n\">w.bar</span> <span class=\"o\">⟨</span><span class=\"n\">i1</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_eq</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">w.bar</span> <span class=\"o\">⟨</span><span class=\"n\">i2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"bp\">≤</span> <span class=\"n\">w.bar</span> <span class=\"o\">⟨</span><span class=\"n\">i1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">subst</span> <span class=\"n\">hi</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_refl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i2</span> <span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i1</span> <span class=\"bp\">=</span> <span class=\"n\">i2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">i2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">w.get</span> <span class=\"o\">⟨</span><span class=\"n\">i2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"bp\">≤</span> <span class=\"n\">w.get</span> <span class=\"o\">⟨</span><span class=\"n\">i1</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_eq</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">w.get</span> <span class=\"o\">⟨</span><span class=\"n\">i2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span> <span class=\"bp\">≤</span> <span class=\"n\">w.get</span> <span class=\"o\">⟨</span><span class=\"n\">i1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">subst</span> <span class=\"n\">hi</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_refl</span> <span class=\"c1\">-- \"tactic 'apply' failed\"</span>\n</code></pre></div>",
        "id": 326003185,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675624799
    },
    {
        "content": "<p>Works for me on...erm...branch <code>port/RingTheory.Subring.Basic</code></p>",
        "id": 326008487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675628610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> thanks -- you mean you can reproduce it or you can't reproduce it?</p>",
        "id": 326008510,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675628635
    },
    {
        "content": "<p>Sorry! with <code>version 4.0.0-nightly-2023-01-29, commit 38a0d1e3733e, Release</code> the <code>apply</code> works fine, no error.</p>",
        "id": 326008581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675628667
    },
    {
        "content": "<p>I see.  I'm on <code>nightly-2023-02-03</code>, and there have been recent changes to <code>calc</code> which this nightly brings in.</p>",
        "id": 326008631,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675628707
    },
    {
        "content": "<p>(This was encountered while I was doing the bump PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/1999\">!4#1999</a>)</p>",
        "id": 326008643,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675628727
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2095\">lean4#2095</a></p>",
        "id": 326250503,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675722583
    }
]