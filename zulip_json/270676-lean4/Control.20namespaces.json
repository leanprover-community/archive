[
    {
        "content": "<p>Is there an option (such as <code>autoImplicit</code>) that means \"arbitrary namespaces which are likely typos should not be silently accepted\"? I get bitten by stuff like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">STree</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Stree.map</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>  <span class=\"c1\">-- this should be an error, I mispelled Stree</span>\n</code></pre></div>\n<p>Even this works -- and it's not a good idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">once.upon.a.time.there.was.a.kingdom</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n</code></pre></div>",
        "id": 357095303,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683664931
    },
    {
        "content": "<p>unfortunately not, because namespaces are never really \"declared\" in lean, their existence is inferred from first use, kind of like using <code>mkdir -p</code> when writing a declaration</p>",
        "id": 357095478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683665034
    },
    {
        "content": "<p>Oh my.</p>",
        "id": 357095610,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683665080
    },
    {
        "content": "<p>they are actually a thing that can be declared in the sense that <code>open STree</code> works and <code>open Stree</code> doesn't (until after your typo'd declaration), but there is no <code>def namespace</code> command</p>",
        "id": 357095753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683665155
    },
    {
        "content": "<p>A linter might be able to catch your example, but this simple syntactic fact about implicit namespace creation in idiomatic code prevents catching all cases without a biggish refactoring of lean and the ecosystem</p>",
        "id": 357096082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683665299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Control.20namespaces/near/357095303\">said</a>:</p>\n<blockquote>\n<p>I get bitten by stuff like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">STree</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Stree.map</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>  <span class=\"c1\">-- this should be an error, I mispelled Stree</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Fwiw the way people usually seem to do this (which also gets rid of the class of errors you're running into) is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">STree</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">STree</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n<span class=\"kd\">def</span> <span class=\"n\">fold</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">STree</span>\n</code></pre></div>",
        "id": 357098107,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1683666199
    },
    {
        "content": "<p>That's a good idea, thanks. BTW, I have learned through pain that <code>open</code> is evil.</p>",
        "id": 357099105,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683666644
    },
    {
        "content": "<p>Would you consider <code>open Foo in ...</code> less evil?</p>",
        "id": 357099374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683666780
    },
    {
        "content": "<p>(I once cut my hand with a knife while carving and learned that knives are evil too <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 357100873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683667382
    },
    {
        "content": "<p>Though <code>open</code> is definitely similar to Python's <code>from Foo import *</code>, which I pretty much never use. It's able to do some type-based disambiguation at least, which Python doesn't give you, and Lean gives you static checking. Usually in Lean I open namespaces (within a section/namespace) if I'm working with something that could have been in another namespace, but for whatever reason it's better to be in a new namespace.</p>",
        "id": 357101689,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683667719
    },
    {
        "content": "<p>One painful thing is that there are a couple of key namespaces with the same function name, like there's both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabTerm#doc\">docs4#Lean.Elab.Term.elabTerm</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.elabTerm#doc\">docs4#Lean.Elab.Tactic.elabTerm</a> with essentially the same type signature if you're in the TacticM monad due to lifting.</p>",
        "id": 357102110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683667900
    },
    {
        "content": "<p>If <code>...</code> is less than a screenful of code, yes.</p>",
        "id": 357102578,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683668099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Control.20namespaces/near/357099105\">said</a>:</p>\n<blockquote>\n<p>That's a good idea, thanks. BTW, I have learned through pain that <code>open</code> is evil.</p>\n</blockquote>\n<p>What's the beef with <code>open</code>? I feel like most languages have a similar mechanism. </p>\n<p>If you're using VScode, the current namespce and section information for your cursor will show up in the breadcrumbs line, which is at the top/under any tabs. You can get nice results with <code>open</code> commands by using them within sections (thanks Mario) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">STree</span>\n<span class=\"c\">/-</span><span class=\"cm\"> closes STree -/</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Named</span>\n<span class=\"kn\">open</span> <span class=\"n\">STree</span>\n<span class=\"c\">/-</span><span class=\"cm\"> closes STree -/</span>\n<span class=\"kd\">end</span> <span class=\"n\">Named</span>\n</code></pre></div>",
        "id": 357109333,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1683670499
    }
]