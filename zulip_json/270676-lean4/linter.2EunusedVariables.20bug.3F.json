[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237506.20inferInstance.20issues/near/394874100\">said</a>:</p>\n<blockquote>\n<p>This looks like a linter bug, right?</p>\n</blockquote>\n<p>Is the behavior below a bug in the <code>unusedVariables</code> linter? (There are lots of mathematical situations in which you would want the <code>hx</code> below not to flag linter)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Baz</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bop</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">Bop</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bop</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>  <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"c1\">-- unused variable `hx` [linter.unusedVariables]</span>\n</code></pre></div>\n<p>I can open an issue if indeed this is a bug. (It can be overcome by replacing <code>(hx :</code> with <code>(_ :</code>.) Thanks!</p>",
        "id": 396560898,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1697225230
    },
    {
        "content": "<p>You can write this as Baz x implies Bop x, or use <code>_hx</code>, I think reasonable people disagree on whether this is a reasonable thing for the linter to ask of you</p>",
        "id": 396566183,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697228306
    },
    {
        "content": "<p>Why don't you write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">Baz</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Bop</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bop</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>  <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 396573242,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697232477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/linter.2EunusedVariables.20bug.3F/near/396573242\">said</a>:</p>\n<blockquote>\n<p>Why don't you write </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">Baz</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Bop</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bop</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>  <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This issue arose in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7506\">#7506</a>, please look at Mathlib/MeasureTheory/Group/FundamentalDomain line 875. We want something to be true for all measurable sets <code>U</code>. If we replace <code>(_ : MeasurableSet U)</code> with <code>(meas_U : MeasurableSet U)</code>, then linter complains.</p>",
        "id": 396756307,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1697378101
    },
    {
        "content": "<p>I think I see; so even in this setting, you would propose that we replace lines 875-876:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Quotient</span> <span class=\"n\">α_mod_G</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"n\">μ</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Quotient</span> <span class=\"n\">α_mod_G</span><span class=\"o\">)),</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I suppose that's fine?...</p>",
        "id": 396756832,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1697378425
    },
    {
        "content": "<p>I still agree with you that the linter is weird. But you wouldn't write this \"for all U, for all U is measurable, ...\" on paper. The way we usually solve this in Lean is by using Set. Then you can use bounded quantifiers.</p>",
        "id": 396758020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697379535
    },
    {
        "content": "<p>Thanks. But sorry I don't follow the suggestion to use Set? Can you elaborate please?</p>",
        "id": 396788721,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1697410689
    },
    {
        "content": "<p>There is no new suggestion here. I'm only saying that the reason you don't encounter this situation more often is that it is usually set up with <code>Set X</code> instead of a predicate on <code>X</code>. Of course <code>Set X</code> is defined to be predicates on <code>X</code> but with different instances and psychological impact.</p>",
        "id": 396789488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697411461
    }
]