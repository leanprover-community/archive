[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Func</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Func.Additive</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Func</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Func.bar</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Func</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Func</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- error!</span>\n</code></pre></div>\n<p>Is this expected? In mathlib there is <code>CategoryTheory.Functor.Additive</code> and <code>Additive</code>, and this just bit me. The <code>Additive</code> which is picked up by <code>Additive F</code> depends on the name of the theorem being defined!</p>",
        "id": 370140995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687885370
    },
    {
        "content": "<p>Yes, this is intentional (iirc Reid campaigned for it).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Func.bar</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n<span class=\"c1\">-- is the same as:</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Func</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n<span class=\"kd\">end</span> <span class=\"n\">Func</span>\n</code></pre></div>\n<p>and in particular all names from <code>Func</code> are in scope.</p>",
        "id": 370141547,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687885479
    },
    {
        "content": "<p>maybe the non-toplevel additive should be protected?</p>",
        "id": 370142923,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687885748
    },
    {
        "content": "<p>In my use case, <code>F.Additive</code> works fine BTW</p>",
        "id": 370143883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687885923
    }
]