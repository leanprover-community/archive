[
    {
        "content": "<p>I know that this is not a MWE, but I just want to understand if this behavior of commitIfNoEx.  This is the structure of my command:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#markSimpLemmas\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">allSimpDecls</span> <span class=\"bp\">←</span> <span class=\"n\">getAllSimpDecls</span> <span class=\"bp\">`</span><span class=\"n\">simp</span>\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"n\">allSimpDecls</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">if</span> <span class=\"bp\">...</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- Do something</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">commitIfNoEx</span> <span class=\"k\">do</span>\n          <span class=\"c1\">-- Do something else</span>\n          <span class=\"n\">logInfo</span> <span class=\"s2\">\"WTF\"</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"s2\">\"Crashed\"</span>\n      <span class=\"n\">continue</span>\n</code></pre></div>\n<p>When I run it, it logs \"Crashed\", but never logs \"WTF\", because the <code>commitIfNoEx</code> gets rolled back every time it is executed.  This is normal.</p>\n<p>HOWEVER, if I <em>remove</em> the <code>commitIfNoEx</code> block, then it no longer prints out \"Crashed\".  To me this seems like the <code>commitIfNoEx</code> block is having side effects, despite always being rolled back.  Is this a bug, or is <code>commitIfNoEx</code> not as powerful as I expected?</p>",
        "id": 358141528,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683997179
    },
    {
        "content": "<p>When you say \"remove the <code>commitIfNoEx</code> block, you mean just that you remove <code>commitIfNoEx</code>, right?</p>\n<p>The definition is pretty simple:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">commitIfNoEx</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadBacktrack</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadExcept</span> <span class=\"n\">ε</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">x</span>\n  <span class=\"n\">catch</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">restoreState</span> <span class=\"n\">s</span>\n    <span class=\"n\">throw</span> <span class=\"n\">ex</span>\n</code></pre></div>\n<p>The only way you could see <code>crashed</code> is if <code>x</code> throws an exception, so I want to be sure you're still throwing the exception in your test!</p>",
        "id": 358142359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683997604
    },
    {
        "content": "<p>Something you could also do is try using <code>dbg_trace</code> instead of <code>logInfo</code> to see messages immediately without worrying about what state is being restored or not</p>",
        "id": 358142462,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683997655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/CommitIfNoEx.20not.20reversing.20all.20side.20effects.3F/near/358142359\">said</a>:</p>\n<blockquote>\n<p>When you say \"remove the <code>commitIfNoEx</code> block, you mean just that you remove <code>commitIfNoEx</code>, right?</p>\n<p>The definition is pretty simple:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">commitIfNoEx</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadBacktrack</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadExcept</span> <span class=\"n\">ε</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">x</span>\n  <span class=\"n\">catch</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">restoreState</span> <span class=\"n\">s</span>\n    <span class=\"n\">throw</span> <span class=\"n\">ex</span>\n</code></pre></div>\n<p>The only way you could see <code>crashed</code> is if <code>x</code> throws an exception, so I want to be sure you're still throwing the exception in your test!</p>\n</blockquote>\n<p>No, see that's what's weird, when I remove the whole block, it doesn't log \"Crashed\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#markSimpLemmas\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">allSimpDecls</span> <span class=\"bp\">←</span> <span class=\"n\">getAllSimpDecls</span> <span class=\"bp\">`</span><span class=\"n\">simp</span>\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"n\">allSimpDecls</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">if</span> <span class=\"bp\">...</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- Do something</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"s2\">\"Crashed\"</span>\n      <span class=\"n\">continue</span>\n</code></pre></div>",
        "id": 358144001,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683998399
    },
    {
        "content": "<p>What's <code>-- Do something else</code> then? It must be throwing an exception</p>",
        "id": 358144232,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683998490
    },
    {
        "content": "<p>Yes, I think it is throwing an exception, but the exception should have no side effect, right?</p>",
        "id": 358144348,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683998539
    },
    {
        "content": "<p>You can see from the code that if the block in <code>commitIfNoEx</code> throws an exception then that exception will be re-thrown</p>",
        "id": 358144389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683998565
    },
    {
        "content": "<p>Ohh, I see, it is rethrowing</p>",
        "id": 358144413,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683998576
    },
    {
        "content": "<p>ahh, so I need to wrap it in try catch to really make it have zero side effects.</p>",
        "id": 358144435,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683998589
    },
    {
        "content": "<p>It's worth skimming through the file that defines <code>commitIfNoEx</code> to see if there's anything in there that gives you what you want</p>",
        "id": 358144465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683998612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> has marked this topic as resolved.</p>",
        "id": 358144475,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683998620
    },
    {
        "content": "<p><code>withoutModifyingState</code> Seems to be what I was looking for.</p>",
        "id": 358144560,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683998660
    },
    {
        "content": "<p>(I always have tor re-read the source for these functions to remember what they do exactly!)</p>",
        "id": 358144569,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683998668
    },
    {
        "content": "<p>Wait, not quite, as it won't ever commit.</p>",
        "id": 358144580,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683998683
    },
    {
        "content": "<p>I frequently use <code>observing?</code> for committing and also not throwing an exception on failure.</p>",
        "id": 358144656,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683998723
    },
    {
        "content": "<p>Yeah, that seems to be equivalent to <code>commitIfNoEx</code> that doesn't throw.</p>",
        "id": 358144757,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683998764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> has marked this topic as unresolved.</p>",
        "id": 358145218,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683999034
    },
    {
        "content": "<p>Sometimes it also turns out to be easier to manage the state yourself, so don't be afraid to use <code>saveState</code>/<code>restoreState</code> and  <code>try</code>/<code>catch</code>(/<code>finally</code>)</p>",
        "id": 358145241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683999044
    },
    {
        "content": "<p>Hmm, realizing that I didn't actually include all of the relevant details.  The<code>if</code> condition should rule out the <code>if</code> condition in the catch from triggering:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#markSimpLemmas\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">allSimpDecls</span> <span class=\"bp\">←</span> <span class=\"n\">getAllSimpDecls</span> <span class=\"bp\">`</span><span class=\"n\">simp</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"n\">allSimpDecls</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.append_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.data_pop</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.pop_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.data_set</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.toListAppend_eq</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.appendList_data</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- Do something</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">commitIfNoEx</span> <span class=\"k\">do</span>\n          <span class=\"c1\">-- Do something else</span>\n          <span class=\"n\">logInfo</span> <span class=\"s2\">\"WTF\"</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"s2\">\"Crashed\"</span>\n      <span class=\"n\">continue</span>\n</code></pre></div>\n<p>Again, If I remove the else branch, <code>Crashed</code> no longer prints.</p>",
        "id": 358145480,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683999152
    },
    {
        "content": "<p>I'm going to try rewriting it without the commitIfNoEx to see if I can get a better understanding.</p>",
        "id": 358145831,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683999338
    },
    {
        "content": "<p>If you just delete <code>commitIfNoEx</code> but leave the <code>do</code> block, does it still do the same thing?</p>",
        "id": 358145897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683999368
    },
    {
        "content": "<p>yes, in fact WTF is not printed out?</p>",
        "id": 358146195,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683999526
    },
    {
        "content": "<p>(The reason I came up with this code was to try to isolate the effects of the <code>commitIfNoEx</code>'s that were succeeding from the ones that were failing, so I expect the else block to always throw an exception.)</p>",
        "id": 358146376,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683999618
    },
    {
        "content": "<p>Ok, an even more clear example using <code>observing?</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#markSimpLemmas\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">allSimpDecls</span> <span class=\"bp\">←</span> <span class=\"n\">getAllSimpDecls</span> <span class=\"bp\">`</span><span class=\"n\">simp</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"n\">allSimpDecls</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">if</span> <span class=\"bp\">...</span> <span class=\"n\">now</span> <span class=\"n\">irrelevant</span> <span class=\"n\">again...</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- Do something</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">observing</span><span class=\"bp\">?</span> <span class=\"k\">do</span>\n          <span class=\"c1\">-- Do something else</span>\n        <span class=\"k\">if</span> <span class=\"n\">b.isSome</span> <span class=\"k\">then</span>\n          <span class=\"n\">logInfo</span> <span class=\"s2\">\"Committed\"</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"s2\">\"Crashed\"</span>\n      <span class=\"n\">continue</span>\n</code></pre></div>\n<p>It will never log \"Committed\", but removing the else block changes whether \"Crashed\" is logged.</p>",
        "id": 358147172,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684000084
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? It doesn't have to be minimal -- it's just hard to say anything without seeing (and maybe testing out) some working code.</p>",
        "id": 358147701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684000368
    },
    {
        "content": "<p>Ok, apologies for the code dump:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Find</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Simps.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transformEtaReduce</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TransformStep.continue</span> <span class=\"n\">node.etaExpanded</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">betaReduceHead</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.isHeadBetaTarget</span> <span class=\"k\">then</span> <span class=\"n\">e.headBeta</span> <span class=\"k\">else</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.toArray_data</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"n\">a.data</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Array.ext_iff'</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">):</span>  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a.data</span> <span class=\"bp\">=</span> <span class=\"n\">b.data</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">lhsSimp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span>\n  <span class=\"n\">simpOnlyNames</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">Array.data_toArray</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray_data</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">funext₂</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">funext₃</span><span class=\"o\">]</span> <span class=\"n\">e</span>\n    <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">onlySimp</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span>\n    <span class=\"n\">simpOnlyNames</span> <span class=\"o\">[]</span> <span class=\"n\">e</span>\n    <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n\n<span class=\"c1\">-- The same as in mathlib addRelatedDef, except we don't look up the defintion,</span>\n<span class=\"c1\">-- but pass a const to the construct function.  Also we don't apply attrs to source definition :D</span>\n<span class=\"kd\">def</span> <span class=\"n\">addRelatedThm</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">suffix</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.attrInstance</span> <span class=\"s2\">\",\"</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">construct</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">src</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Name.str</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Name.mkStr</span> <span class=\"n\">n</span> <span class=\"bp\">$</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">suffix</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">addDeclarationRanges</span> <span class=\"n\">tgt</span> <span class=\"o\">{</span>\n    <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclarationRange</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n    <span class=\"n\">selectionRange</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclarationRange</span> <span class=\"n\">ref</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">src</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">newValue</span><span class=\"o\">,</span> <span class=\"n\">newLevels</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">construct</span> <span class=\"n\">info.type</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithLevelParams</span> <span class=\"bp\">@</span><span class=\"n\">src</span><span class=\"o\">)</span> <span class=\"n\">info.levelParams</span>\n  <span class=\"k\">let</span> <span class=\"n\">newValue</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">newValue</span>\n  <span class=\"k\">let</span> <span class=\"n\">newType</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">newValue</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">info</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.thmInfo</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">thmDecl</span>\n      <span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"k\">with</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">newLevels</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">newType</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">newValue</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- Structure fields are created using `def`, even when they are propositional,</span>\n    <span class=\"c1\">-- so we don't rely on this to decided whether we should be constructing a `theorem` or a `def`.</span>\n    <span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">newType</span> <span class=\"k\">then</span> <span class=\"bp\">.</span><span class=\"n\">thmDecl</span>\n      <span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"k\">with</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">newLevels</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">newType</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">newValue</span> <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span>\n      <span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"k\">with</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">newLevels</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">newType</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">newValue</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Constant {src} is not a theorem or definition.\"</span>\n  <span class=\"k\">if</span> <span class=\"n\">isProtected</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">src</span> <span class=\"k\">then</span>\n    <span class=\"n\">setEnv</span> <span class=\"bp\">$</span> <span class=\"n\">addProtected</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">tgt</span>\n  <span class=\"k\">let</span> <span class=\"n\">attrs</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">attrs</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">attrs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">attrs</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">Term.TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">attrs</span> <span class=\"bp\">←</span> <span class=\"n\">elabAttrs</span> <span class=\"n\">attrs</span>\n    <span class=\"n\">Term.applyAttributes</span> <span class=\"n\">tgt</span> <span class=\"n\">attrs</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemmaAttrs</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.attrInstance</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.attrInstance</span> <span class=\"s2\">\",\"</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n  <span class=\"n\">return</span> <span class=\"n\">arr</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnsFromTypeAux</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exclude</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">ℕ</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e.forEach</span> <span class=\"k\">fun</span> <span class=\"n\">subExpr</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">subExpr.getAppFnArgs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"bp\">∉</span> <span class=\"n\">exclude</span> <span class=\"k\">then</span>\n        <span class=\"n\">args.forM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvars</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n          <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">ty</span> <span class=\"n\">mvars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">arg</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n            <span class=\"n\">modify</span> <span class=\"n\">Nat.succ</span>\n        <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnCallsAux</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fns</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">ℕ</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e.forEach</span> <span class=\"k\">fun</span> <span class=\"n\">subExpr</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">subExpr.getAppFnArgs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span>  <span class=\"n\">fns</span> <span class=\"k\">then</span>\n        <span class=\"n\">modify</span> <span class=\"n\">Nat.succ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnsFromType</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exclude</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initialState</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finalState</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">countFnsFromTypeAux</span> <span class=\"n\">e</span> <span class=\"n\">ty</span> <span class=\"n\">exclude</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">initialState</span>\n  <span class=\"n\">return</span> <span class=\"n\">finalState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnCalls</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fns</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initialState</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finalState</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">countFnCallsAux</span> <span class=\"n\">e</span> <span class=\"n\">fns</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">initialState</span>\n  <span class=\"n\">return</span> <span class=\"n\">finalState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fillImplicitArgsWithMVars</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">forallTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n    <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getBinderInfo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isExplicit</span> <span class=\"k\">then</span>\n        <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span> <span class=\"n\">result</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getType</span><span class=\"o\">))</span>\n    <span class=\"n\">pure</span> <span class=\"n\">result</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">srcType</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lem</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">addRelatedThm</span> <span class=\"n\">lem</span> <span class=\"s2\">\"_up\"</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">upLemmaAttrs</span><span class=\"o\">)</span>\n    <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">value</span> <span class=\"n\">levels</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">transformed</span> <span class=\"bp\">←</span>  <span class=\"n\">forallTelescope</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">match</span> <span class=\"n\">ty.getAppFnArgs</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Eq</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnsFromType</span> <span class=\"n\">lhs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">srcType</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnsFromType</span> <span class=\"n\">rhs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">srcType</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnCalls</span> <span class=\"n\">ty</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n              <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">value</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n              <span class=\"k\">if</span> <span class=\"n\">lhs.isAppOf</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n                <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">fillImplicitArgsWithMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)))</span> <span class=\"k\">then</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkCongrArg</span> <span class=\"n\">r</span> <span class=\"n\">e</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">simpType</span> <span class=\"n\">lhsSimp</span> <span class=\"n\">e</span>\n\n              <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs.reverse</span> <span class=\"k\">do</span>\n                <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">e</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getBinderInfo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isExplicit</span> <span class=\"k\">then</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkFunExt</span> <span class=\"n\">e</span>\n\n              <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">e</span>\n              <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">simpType</span> <span class=\"n\">onlySimp</span> <span class=\"n\">e</span>\n              <span class=\"n\">pure</span> <span class=\"n\">e</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">throwError</span> <span class=\"s2\">\"Does not reduce operations on the source type: {(← countFnsFromType lhs (← mkConst' ``Array) [f])} {← countFnsFromType rhs (← mkConst' ``Array) [f]}\"</span>\n          <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Can only handle hypotheses of the form `a = b`\"</span>\n      <span class=\"o\">)</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">transformed</span><span class=\"o\">,</span> <span class=\"n\">levels</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#upLemma\"</span> <span class=\"n\">srcType</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" x \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" x \"</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" x \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"n\">upLemma</span> <span class=\"n\">srcType.getId</span> <span class=\"n\">f.getId</span> <span class=\"n\">r.getId</span> <span class=\"n\">e.getId</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#markSimpLemmas\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"n\">Term.applyAttributes</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray_data</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabAttrs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">upLemmaAttrs</span><span class=\"o\">))</span>\n  <span class=\"n\">Term.applyAttributes</span> <span class=\"bp\">``</span><span class=\"n\">Array.data_toArray</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabAttrs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">upLemmaAttrs</span><span class=\"o\">))</span>\n  <span class=\"n\">Term.applyAttributes</span> <span class=\"bp\">``</span><span class=\"n\">Array.ext_iff'</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabAttrs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">upLemmaAttrs</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">allSimpDecls</span> <span class=\"bp\">←</span> <span class=\"n\">getAllSimpDecls</span> <span class=\"bp\">`</span><span class=\"n\">simp</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"n\">allSimpDecls</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.append_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.data_pop</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.pop_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.data_set</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.toListAppend_eq</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.appendList_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"s2\">\"FOUNDIT\"</span>\n        <span class=\"n\">commitIfNoEx</span> <span class=\"k\">do</span>\n          <span class=\"n\">upLemma</span> <span class=\"bp\">``</span><span class=\"n\">Array</span> <span class=\"bp\">``</span><span class=\"n\">Array.data</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray</span> <span class=\"n\">lem</span>\n          <span class=\"n\">logInfo</span> <span class=\"n\">lem</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">observing</span><span class=\"bp\">?</span> <span class=\"k\">do</span>\n          <span class=\"n\">upLemma</span> <span class=\"bp\">``</span><span class=\"n\">Array</span> <span class=\"bp\">``</span><span class=\"n\">Array.data</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray</span> <span class=\"n\">lem</span>\n          <span class=\"n\">logInfo</span> <span class=\"s2\">\"WTF\"</span>\n          <span class=\"n\">logInfo</span> <span class=\"n\">lem</span>\n        <span class=\"k\">if</span> <span class=\"n\">b.isSome</span> <span class=\"k\">then</span>\n          <span class=\"n\">logInfo</span> <span class=\"s2\">\"Committed\"</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"s2\">\"Ded\"</span>\n      <span class=\"n\">continue</span>\n\n<span class=\"bp\">#</span><span class=\"n\">markSimpLemmas</span>\n</code></pre></div>",
        "id": 358148457,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684000751
    },
    {
        "content": "<p>Trying to implement it with nested try/catch for an even clearer example, but the syntax doesn't seem to allow nesting try/catch.</p>",
        "id": 358149660,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684001349
    },
    {
        "content": "<p>I'm seeing a panic at <code>#markSimpLemmas</code>. If there's a panic, then I'm not sure we can really reason about the code.</p>",
        "id": 358149667,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684001355
    },
    {
        "content": "<p>PANIC at Lean.MapDeclarationExtension.insert Lean.Environment:594:2: assertion violation: env.getModuleIdxFor? declName |&gt;.isNone -- See comment at <code>MapDeclarationExtension</code></p>",
        "id": 358149813,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684001407
    },
    {
        "content": "<p>How are you seeing a panic?  Like in the info bar?</p>",
        "id": 358149819,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684001410
    },
    {
        "content": "<p>OOOH there is a message in the output window.</p>",
        "id": 358149867,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684001436
    },
    {
        "content": "<p>I get a popup in the lower right corner of VS Code, and it also shows up in stderr</p>",
        "id": 358149897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684001447
    },
    {
        "content": "<p>Ok, so what is happening is I am panicking inside the <code>CommitIfNoEx</code>, but it is \"recovering\" from the panic and continuing to execute, despite it not actually undoing the side-effects of the panic?</p>",
        "id": 358150306,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684001675
    },
    {
        "content": "<p>Panics are not recoverable</p>",
        "id": 358150384,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684001715
    },
    {
        "content": "<p>They're not exceptions -- they're sort of a special <code>Inhabited.default</code> that prints out an error message</p>",
        "id": 358150497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684001765
    },
    {
        "content": "<p>But  my code continues to execute, and more messages appear on the info bar, after the panic?</p>",
        "id": 358150551,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684001804
    },
    {
        "content": "<p>Yes, they don't halt execution, just like <code>Inhabited.default</code> doesn't</p>",
        "id": 358150590,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684001833
    },
    {
        "content": "<p>It might not be the cause of your errors, but it's definitely worth looking into. Here's where the panic is coming from: <a href=\"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Lean/Environment.lean#L592\">https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Lean/Environment.lean#L592</a></p>",
        "id": 358150750,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684001936
    },
    {
        "content": "<p>You can make them halt execution by setting LEAN_PANIC=abort in your environment variables</p>",
        "id": 358150769,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684001946
    },
    {
        "content": "<p>Ok, thanks. Maybe I think this because I was just bitten, but this does seem like an area where the UI could be improved.  It's really not clear based on the log message in the \"Output\" tab (which is usually hidden since it contains no information) that all other information displayed to the user (in the Lean InfoView, the Problems window, and the editor itself) is invalid. It is also not clear if a panic is <em>currently</em> affecting what is displayed, vs just something which happened in the past, and is no longer affecting the validity of the information displayed.</p>",
        "id": 358151954,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684002631
    },
    {
        "content": "<p>Hmm <code>LEAN_ABORT_ON_PANIC=1</code> seems to just kill the server entirely, rather than just stopping the execution of the current code.</p>",
        "id": 358152460,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684002909
    },
    {
        "content": "<p>That is expected behaviour yes</p>",
        "id": 358152789,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684003082
    },
    {
        "content": "<p>The Server is a Lean process, it will simply jump to the bytecode interpreter upon meeting a <code>#eval</code>, if you now panic within that section of code the process gets killed so you of course never end up returning to the server code.</p>",
        "id": 358152921,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684003136
    },
    {
        "content": "<p>There does of course exist a solution here which would be forking and having some IPC between the server and the execution unit, I do not know why it is not done like this though.</p>",
        "id": 358153147,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684003252
    },
    {
        "content": "<p>So if the server panics, and then I delete all my code, is the server still potentially in an invalid state due to the panic?</p>",
        "id": 358153455,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684003449
    },
    {
        "content": "<p>The server process for your file is dead, it does not exist anymore. What you can do is comment out the eval statement that murdered it and tell it to reload the file, in emacs that would be via C-c C-d</p>",
        "id": 358153522,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684003507
    },
    {
        "content": "<p>Sorry, I mean if I don't have LEAN_ABORT_ON_PANIC=1.</p>",
        "id": 358153744,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684003657
    },
    {
        "content": "<p>Well then the same thing applies really^^</p>",
        "id": 358154205,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684003920
    },
    {
        "content": "<p>Hmm, I'm not sure I understand.  When I don't have <code>LEAN_ABORT_ON_PANIC=1</code>, the server process for the file does <em>not</em> die when it encounters the panic, instead it continues to process my lean code, and continues to generate messages for the lean infoview, which it then sends to VS Code.  </p>\n<p>If I delete the code which caused the panic, and write fresh code in the same file, does that same server still remain in an invalid state, where it will process my new code, and update the lean infoview, but its internal state is corrupted, such that I cannot trust the output any more?</p>",
        "id": 358158952,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684006895
    },
    {
        "content": "<p>Right, sorry that was expressed wrongly by me: Yes the server should not die, generally speaking the procedure above helps for \"my server is in a weird state what can I do\" </p>\n<p>if you do nnot have abort on panic on the server state should remain perfectly fine at all times.</p>",
        "id": 358159121,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684007011
    },
    {
        "content": "<p>unless your panicked code pollutes lean's state, of course</p>",
        "id": 358159253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684007089
    },
    {
        "content": "<p>Semantically a panic just returns the default value and logs an error message. Then execution continues using that default value, which may or may not be catastrophic. But this way, panics are \"sound\", in a way... at least as far as I understand it.</p>",
        "id": 358413998,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1684145659
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"\"</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 358414319,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1684145744
    },
    {
        "content": "<p>Would it be technically simple to either</p>\n<ol>\n<li>Stop execution of user code on a panic</li>\n<li>Stop sending new messages and errors to the lean infoview on a panic</li>\n<li>Send a special message to the lean infoview on a panic</li>\n</ol>\n<p>and would you accept a PR that does one of the above?</p>",
        "id": 358896918,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684301550
    },
    {
        "content": "<p>no, all three of those are not technically simple</p>",
        "id": 358896999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684301633
    },
    {
        "content": "<p>I see, is there a clear connection between the panic and a particular piece of code, or is it more like you have to look at stderr, and try to match it up based on the timing?</p>",
        "id": 358897593,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684302024
    },
    {
        "content": "<p>the panic is not an effect as far as lean is concerned, which makes it difficult for the server to know that it has happened</p>",
        "id": 358897667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684302085
    },
    {
        "content": "<p>You might be able to look at stderr (if you captured it), but you wouldn't be able to distinguish it from other stderr printouts that are not about panicking</p>",
        "id": 358897807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684302177
    },
    {
        "content": "<p>Here's a demonstration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">bOut</span> <span class=\"bp\">←</span> <span class=\"n\">IO.mkRef</span> <span class=\"o\">{}</span>\n  <span class=\"n\">IO.withStderr</span> <span class=\"o\">(</span><span class=\"n\">IO.FS.Stream.ofBuffer</span> <span class=\"n\">bOut</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← (← IO.mkRef 1).get}\"</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"isEmpty: {(← bOut.get).data.isEmpty}\"</span>\n</code></pre></div>\n<p>It appears that even if you capture <code>stderr</code>, there is still nothing the surrounding lean code can do to observe that a panic has happened</p>",
        "id": 358898936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684302929
    },
    {
        "content": "<p>yeah I am just thinking about how to make it clear the distinction between a valid state and an invalid state.</p>",
        "id": 358899448,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684303218
    },
    {
        "content": "<p>I'm not saying that it wouldn't be nice to be able to do better, I'm saying it is not technically simple</p>",
        "id": 358899525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684303250
    },
    {
        "content": "<p>Yeah I get it <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> . I was hoping you might have a creative idea of how to get that information.</p>",
        "id": 358899666,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684303319
    },
    {
        "content": "<p>you would need to modify the C++ code (probably the interpreter or the runtime) to log panics somewhere</p>",
        "id": 358899748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684303356
    },
    {
        "content": "<p>So, I've got some bad news.  I have fixed the panic, but it seems like the same issue is present.  withoutModifyingState seems to definitely be modifying the state.  Again, removing the else changes whether \"Crashed\" is print, despite it entirely being inside \"withoutModifyingState\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Find</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Simps.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transformEtaReduce</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TransformStep.continue</span> <span class=\"n\">node.etaExpanded</span><span class=\"bp\">?</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"eta_reduce\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">Parser.Tactic.location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">eta_reduce</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.change</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"eta_reduce failed\"</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.toArray_data</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"n\">a.data</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Array.ext_iff'</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">):</span>  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a.data</span> <span class=\"bp\">=</span> <span class=\"n\">b.data</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">lhsSimp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span>\n  <span class=\"n\">simpOnlyNames</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">Array.data_toArray</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray_data</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">funext₂</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">funext₃</span><span class=\"o\">]</span> <span class=\"n\">e</span>\n    <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">onlySimp</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span>\n    <span class=\"n\">simpOnlyNames</span> <span class=\"o\">[]</span> <span class=\"n\">e</span>\n    <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n\n<span class=\"c1\">-- The same as in mathlib addRelatedDef, except we don't look up the defintion,</span>\n<span class=\"c1\">-- but pass a const to the construct function.  Also we don't apply attrs to source definition :D</span>\n<span class=\"kd\">def</span> <span class=\"n\">addRelatedThm</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">suffix</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.attrInstance</span> <span class=\"s2\">\",\"</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">construct</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">src</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Name.str</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Name.mkStr</span> <span class=\"n\">n</span> <span class=\"bp\">$</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">suffix</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">x</span> <span class=\"n\">suffix</span>\n\n  <span class=\"n\">addDeclarationRanges</span> <span class=\"n\">tgt</span> <span class=\"o\">{</span>\n    <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclarationRange</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n    <span class=\"n\">selectionRange</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclarationRange</span> <span class=\"n\">ref</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">src</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">newValue</span><span class=\"o\">,</span> <span class=\"n\">newLevels</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">construct</span> <span class=\"n\">info.type</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithLevelParams</span> <span class=\"bp\">@</span><span class=\"n\">src</span><span class=\"o\">)</span> <span class=\"n\">info.levelParams</span>\n  <span class=\"k\">let</span> <span class=\"n\">newValue</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">newValue</span>\n  <span class=\"k\">let</span> <span class=\"n\">newType</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">newValue</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">info</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.thmInfo</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">thmDecl</span>\n      <span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"k\">with</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">newLevels</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">newType</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">newValue</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- Structure fields are created using `def`, even when they are propositional,</span>\n    <span class=\"c1\">-- so we don't rely on this to decided whether we should be constructing a `theorem` or a `def`.</span>\n    <span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">newType</span> <span class=\"k\">then</span> <span class=\"bp\">.</span><span class=\"n\">thmDecl</span>\n      <span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"k\">with</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">newLevels</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">newType</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">newValue</span> <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span>\n      <span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"k\">with</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">newLevels</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">newType</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">newValue</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Constant {src} is not a theorem or definition.\"</span>\n  <span class=\"k\">if</span> <span class=\"n\">isProtected</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">src</span> <span class=\"k\">then</span>\n    <span class=\"n\">setEnv</span> <span class=\"bp\">$</span> <span class=\"n\">addProtected</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">tgt</span>\n  <span class=\"k\">let</span> <span class=\"n\">attrs</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">attrs</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">attrs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">attrs</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">Term.TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">attrs</span> <span class=\"bp\">←</span> <span class=\"n\">elabAttrs</span> <span class=\"n\">attrs</span>\n    <span class=\"n\">Term.applyAttributes</span> <span class=\"n\">tgt</span> <span class=\"n\">attrs</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemmaAttrs</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.attrInstance</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.attrInstance</span> <span class=\"s2\">\",\"</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n  <span class=\"n\">return</span> <span class=\"n\">arr</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnsFromTypeAux</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exclude</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">ℕ</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e.forEach</span> <span class=\"k\">fun</span> <span class=\"n\">subExpr</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">subExpr.getAppFnArgs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"bp\">∉</span> <span class=\"n\">exclude</span> <span class=\"k\">then</span>\n        <span class=\"n\">args.forM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvars</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n          <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">ty</span> <span class=\"n\">mvars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">arg</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n            <span class=\"n\">modify</span> <span class=\"n\">Nat.succ</span>\n        <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnCallsAux</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fns</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">ℕ</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e.forEach</span> <span class=\"k\">fun</span> <span class=\"n\">subExpr</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">subExpr.getAppFnArgs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span>  <span class=\"n\">fns</span> <span class=\"k\">then</span>\n        <span class=\"n\">modify</span> <span class=\"n\">Nat.succ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnsFromType</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exclude</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initialState</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finalState</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">countFnsFromTypeAux</span> <span class=\"n\">e</span> <span class=\"n\">ty</span> <span class=\"n\">exclude</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">initialState</span>\n  <span class=\"n\">return</span> <span class=\"n\">finalState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnCalls</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fns</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initialState</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finalState</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">countFnCallsAux</span> <span class=\"n\">e</span> <span class=\"n\">fns</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">initialState</span>\n  <span class=\"n\">return</span> <span class=\"n\">finalState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fillImplicitArgsWithMVars</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">forallTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n    <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getBinderInfo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isExplicit</span> <span class=\"k\">then</span>\n        <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span> <span class=\"n\">result</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getType</span><span class=\"o\">))</span>\n    <span class=\"n\">pure</span> <span class=\"n\">result</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">srcType</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lem</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">addRelatedThm</span> <span class=\"n\">lem</span> <span class=\"s2\">\"_up\"</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">upLemmaAttrs</span><span class=\"o\">)</span>\n    <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">value</span> <span class=\"n\">levels</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">transformed</span> <span class=\"bp\">←</span>  <span class=\"n\">forallTelescope</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">match</span> <span class=\"n\">ty.getAppFnArgs</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Eq</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnsFromType</span> <span class=\"n\">lhs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">srcType</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnsFromType</span> <span class=\"n\">rhs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">srcType</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnCalls</span> <span class=\"n\">ty</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n              <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">value</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n              <span class=\"k\">if</span> <span class=\"n\">lhs.isAppOf</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n                <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">fillImplicitArgsWithMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)))</span> <span class=\"k\">then</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkCongrArg</span> <span class=\"n\">r</span> <span class=\"n\">e</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">simpType</span> <span class=\"n\">lhsSimp</span> <span class=\"n\">e</span>\n\n              <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs.reverse</span> <span class=\"k\">do</span>\n                <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">e</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getBinderInfo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isExplicit</span> <span class=\"k\">then</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkFunExt</span> <span class=\"n\">e</span>\n\n              <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">e</span>\n              <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">simpType</span> <span class=\"n\">onlySimp</span> <span class=\"n\">e</span>\n              <span class=\"n\">pure</span> <span class=\"n\">e</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">throwError</span> <span class=\"s2\">\"Does not reduce operations on the source type: {(← countFnsFromType lhs (← mkConst' ``Array) [f])} {← countFnsFromType rhs (← mkConst' ``Array) [f]}\"</span>\n          <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Can only handle hypotheses of the form `a = b`\"</span>\n      <span class=\"o\">)</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">transformed</span><span class=\"o\">,</span> <span class=\"n\">levels</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#upLemma\"</span> <span class=\"n\">srcType</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" x \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" x \"</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" x \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"n\">upLemma</span> <span class=\"n\">srcType.getId</span> <span class=\"n\">f.getId</span> <span class=\"n\">r.getId</span> <span class=\"n\">e.getId</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#markSimpLemmas\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"n\">Term.applyAttributes</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray_data</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabAttrs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">upLemmaAttrs</span><span class=\"o\">))</span>\n  <span class=\"n\">Term.applyAttributes</span> <span class=\"bp\">``</span><span class=\"n\">Array.data_toArray</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabAttrs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">upLemmaAttrs</span><span class=\"o\">))</span>\n  <span class=\"n\">Term.applyAttributes</span> <span class=\"bp\">``</span><span class=\"n\">Array.ext_iff'</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabAttrs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">upLemmaAttrs</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">allSimpDecls</span> <span class=\"bp\">←</span> <span class=\"n\">getAllSimpDecls</span> <span class=\"bp\">`</span><span class=\"n\">simp</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"n\">allSimpDecls</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.append_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.data_pop</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.pop_data</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.data_set</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.toListAppend_eq</span> <span class=\"bp\">||</span>  <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.appendList_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">commitIfNoEx</span> <span class=\"k\">do</span>\n          <span class=\"n\">upLemma</span> <span class=\"bp\">``</span><span class=\"n\">Array</span> <span class=\"bp\">``</span><span class=\"n\">Array.data</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray</span> <span class=\"n\">lem</span>\n          <span class=\"n\">logInfo</span> <span class=\"n\">lem</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">withoutModifyingState</span> <span class=\"k\">do</span>\n          <span class=\"n\">upLemma</span> <span class=\"bp\">``</span><span class=\"n\">Array</span> <span class=\"bp\">``</span><span class=\"n\">Array.data</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray</span> <span class=\"n\">lem</span>\n          <span class=\"n\">logInfo</span> <span class=\"s2\">\"WTF\"</span>\n          <span class=\"n\">logInfo</span> <span class=\"n\">lem</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"s2\">\"Crashed\"</span>\n      <span class=\"n\">continue</span>\n  <span class=\"n\">logInfo</span> <span class=\"s2\">\"DONE\"</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">markSimpLemmas</span>\n</code></pre></div>",
        "id": 359434921,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684425458
    },
    {
        "content": "<p>Ok, after further debugging, I found another strange behavior (or maybe the root cause?).  In this case, if I remove an interpolated value from the <code>throwError</code> string argument (see the \"DELETE AFTER THE COLON\" string), then the \"Crashed\" is no longer printed, i.e. it seems like withoutModifyingState is actually able to do its job of preventing modification of the state.</p>\n<p>This at least seems plausible as an area for a bug/ambiguity, since maybe the interpolation is lazily evaluated or something?</p>\n<p>Here is the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Find</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Simps.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lhsSimp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span>\n  <span class=\"n\">simpOnlyNames</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">funext₂</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">funext₃</span><span class=\"o\">]</span> <span class=\"n\">e</span>\n    <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addRelatedThm</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">suffix</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">construct</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">src</span> <span class=\"n\">suffix</span>\n  <span class=\"n\">addDeclarationRanges</span> <span class=\"n\">tgt</span> <span class=\"o\">{</span>\n    <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclarationRange</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n    <span class=\"n\">selectionRange</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclarationRange</span> <span class=\"n\">ref</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">src</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">newValue</span><span class=\"o\">,</span> <span class=\"n\">newLevels</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">construct</span> <span class=\"n\">info.type</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithLevelParams</span> <span class=\"bp\">@</span><span class=\"n\">src</span><span class=\"o\">)</span> <span class=\"n\">info.levelParams</span>\n  <span class=\"k\">let</span> <span class=\"n\">newValue</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">newValue</span>\n  <span class=\"k\">let</span> <span class=\"n\">newType</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">newValue</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">info</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.thmInfo</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">thmDecl</span>\n      <span class=\"o\">{</span> <span class=\"n\">info</span> <span class=\"k\">with</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">newLevels</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">newType</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">newValue</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Constant {src} is not a theorem or definition.\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnsFromTypeAux</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exclude</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">ℕ</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e.forEach</span> <span class=\"k\">fun</span> <span class=\"n\">subExpr</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">subExpr.getAppFnArgs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"bp\">∉</span> <span class=\"n\">exclude</span> <span class=\"k\">then</span>\n        <span class=\"n\">args.forM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvars</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n          <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">ty</span> <span class=\"n\">mvars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">arg</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n            <span class=\"n\">modify</span> <span class=\"n\">Nat.succ</span>\n        <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnCallsAux</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fns</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">ℕ</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e.forEach</span> <span class=\"k\">fun</span> <span class=\"n\">subExpr</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">subExpr.getAppFnArgs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span>  <span class=\"n\">fns</span> <span class=\"k\">then</span>\n        <span class=\"n\">modify</span> <span class=\"n\">Nat.succ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnsFromType</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exclude</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initialState</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finalState</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">countFnsFromTypeAux</span> <span class=\"n\">e</span> <span class=\"n\">ty</span> <span class=\"n\">exclude</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">initialState</span>\n  <span class=\"n\">return</span> <span class=\"n\">finalState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countFnCalls</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fns</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initialState</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">finalState</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">countFnCallsAux</span> <span class=\"n\">e</span> <span class=\"n\">fns</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">initialState</span>\n  <span class=\"n\">return</span> <span class=\"n\">finalState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fillImplicitArgsWithMVars</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">forallTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n    <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getBinderInfo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isExplicit</span> <span class=\"k\">then</span>\n        <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span> <span class=\"n\">result</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getType</span><span class=\"o\">))</span>\n    <span class=\"n\">pure</span> <span class=\"n\">result</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">srcType</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lem</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">addRelatedThm</span> <span class=\"n\">lem</span> <span class=\"s2\">\"_up\"</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n    <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">value</span> <span class=\"n\">levels</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">transformed</span> <span class=\"bp\">←</span>  <span class=\"n\">forallTelescope</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">match</span> <span class=\"n\">ty.getAppFnArgs</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Eq</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnsFromType</span> <span class=\"n\">lhs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">srcType</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnsFromType</span> <span class=\"n\">rhs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">srcType</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">countFnCalls</span> <span class=\"n\">ty</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">])</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n              <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">value</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n              <span class=\"k\">if</span> <span class=\"n\">lhs.isAppOf</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n                <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">fillImplicitArgsWithMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)))</span> <span class=\"k\">then</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkCongrArg</span> <span class=\"n\">r</span> <span class=\"n\">e</span>\n                  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">simpType</span> <span class=\"n\">lhsSimp</span> <span class=\"n\">e</span>\n\n              <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">xs</span> <span class=\"n\">e</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">throwError</span> <span class=\"s2\">\"DELETE AFTER THE COLON: {(← countFnsFromType lhs (← mkConst' ``Array) [f])} {← countFnsFromType rhs (← mkConst' ``Array) [f]}\"</span>\n          <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"\"</span>\n      <span class=\"o\">)</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">transformed</span><span class=\"o\">,</span> <span class=\"n\">levels</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#markSimpLemmas\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">allSimpDecls</span> <span class=\"bp\">←</span> <span class=\"n\">getAllSimpDecls</span> <span class=\"bp\">`</span><span class=\"n\">simp</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"n\">allSimpDecls</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">commitIfNoEx</span> <span class=\"k\">do</span>\n          <span class=\"n\">upLemma</span> <span class=\"bp\">``</span><span class=\"n\">Array</span> <span class=\"bp\">``</span><span class=\"n\">Array.data</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray</span> <span class=\"n\">lem</span>\n          <span class=\"n\">logInfo</span> <span class=\"n\">lem</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">withoutModifyingState</span> <span class=\"k\">do</span>\n          <span class=\"n\">upLemma</span> <span class=\"bp\">``</span><span class=\"n\">Array</span> <span class=\"bp\">``</span><span class=\"n\">Array.data</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray</span> <span class=\"n\">lem</span>\n          <span class=\"n\">logInfo</span> <span class=\"s2\">\"WTF\"</span>\n          <span class=\"n\">logInfo</span> <span class=\"n\">lem</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">lem</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Array.map_data</span> <span class=\"k\">then</span>\n        <span class=\"n\">logError</span> <span class=\"s2\">\"Crashed\"</span>\n      <span class=\"n\">continue</span>\n  <span class=\"n\">logInfo</span> <span class=\"s2\">\"DONE\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">markSimpLemmas</span>\n</code></pre></div>",
        "id": 359509732,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1684449147
    }
]