[
    {
        "content": "<p>How would I go about extending <code>bracketedBinder</code> and <code>funBinder</code> parser? </p>\n<p>I want to introduce notation <code>(f : α ⇒ β)</code> that would desugar into <code>{αβ : Type} [PowType αβ α β] (f : αβ)</code> where <code>PowType</code> is an typeclass saying that <code>αβ</code> is something like <code>α → β</code>.</p>\n<p>Similarly, I would like to be able to write <code>(X Y Z : Vec)</code> that would desugar into <code>(X Y Z : Type) [Vec X] [Vec Y] [Vec Z]</code>.</p>\n<p>How would I go about this such that I can then use it in definitions and lambda functions?</p>",
        "id": 338632382,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1677601742
    },
    {
        "content": "<p>mwe I would like to get working</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">PowType</span> <span class=\"o\">(</span><span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⇒</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">XY</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XY</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⇒</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">XY</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XY</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 338633617,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1677602045
    },
    {
        "content": "<p>You would probably have to make a new version of <code>def</code> and <code>λ</code>/<code>fun</code> that accepts your version off bracketedBinder. I don't think it's possible to extend the existing bracketedBinder</p>",
        "id": 338650952,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677606324
    },
    {
        "content": "<p>That is the only approach I could think of. Is this how mathlib allows you to write binders like <code>(x ∈ S)</code>?</p>",
        "id": 338671095,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1677611703
    },
    {
        "content": "<p>Yeah, iirc those are implemented as a new syntax for \\forall. <code>\\forall (x \\mem S), e</code> is notation for <code>\\forall x, x \\mem S -&gt; e</code>. Which is why you can't write <code>def foo (x \\mem S)</code> in mathlib as far as I am aware, but you can write <code>def foo : \\forall (x \\mem S)</code>.</p>",
        "id": 338698582,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677620969
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">PowType</span> <span class=\"o\">(</span><span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"λ \"</span> <span class=\"s2\">\" ( \"</span> <span class=\"n\">f</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">X</span> <span class=\"s2\">\" ⇒ \"</span> <span class=\"n\">Y</span> <span class=\"s2\">\" ) \"</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">XY</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XY</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⇒</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">XY</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XY</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⇒</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">XY</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">XY</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"λ \"</span> <span class=\"s2\">\" ( \"</span> <span class=\"n\">X</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">Vec</span> <span class=\"s2\">\" ) \"</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">e</span>   <span class=\"bp\">=&gt;</span>   <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It's actually so cool that this Just Works<span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 338699935,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677621456
    },
    {
        "content": "<p>I'm not sure how to extend this to multiple binders at once, but it seems pretty doable. In contrast, I think the def parser is pretty complicated (might have the wrong impression there though)</p>",
        "id": 338700190,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677621543
    },
    {
        "content": "<p>Here is a version that allows you to have multiple binders</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">PowType</span> <span class=\"o\">(</span><span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">XY</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">myFunBinder</span> <span class=\"o\">:=</span> <span class=\"s2\">\" ( \"</span> <span class=\"n\">ident</span>  <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\"⇒\"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\" )\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span><span class=\"n\">hoho</span><span class=\"o\">)</span> <span class=\"s2\">\" λ \"</span> <span class=\"n\">myFunBinder</span><span class=\"bp\">*</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">hoho</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">XY</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">X.raw.isIdent</span> <span class=\"bp\">∧</span> <span class=\"n\">Y.raw.isIdent</span> <span class=\"k\">then</span>\n      <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">X.raw.getId.appendAfter</span> <span class=\"n\">Y.raw.getId.toString</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">mkIdent</span> <span class=\"n\">Name.anonymous</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">XY</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"bp\">$</span><span class=\"n\">XY</span> <span class=\"bp\">$</span><span class=\"n\">X</span> <span class=\"bp\">$</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">XY</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">myFunBinder</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">myFunBinder</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">myFunBinder</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">myFunBinder</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⇒</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⇒</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">fun {YZ} [PowType YZ Y Z] f {XY} [PowType XY X Y] g x =&gt;</span>\n<span class=\"cm\">  CoeFun.coe f (CoeFun.coe g x) : {YZ : Type} → [PowType YZ Y Z] → YZ → {XY : Type} → [PowType XY X Y] → XY → X → Z</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 338714771,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1677627699
    },
    {
        "content": "<p>Unfortunately I was unable to reuse <code>funBinder</code>. </p>\n<p>Defining <code>myFunBinder</code>  as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">myFunBinder</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.Term.funBinder</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\" ( \"</span> <span class=\"n\">ident</span>  <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"⇒\"</span> <span class=\"n\">term</span> <span class=\"s2\">\" )\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does not work</p>",
        "id": 338715079,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1677627874
    },
    {
        "content": "<p>It would be nice to reshuffle the arguments a bit. Ideally the type of <code>λ (f : Y ⇒ Z) (g : X ⇒ Y) (x : X) =&gt; f (g x)</code> would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">YZ</span> <span class=\"n\">XY</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">YZ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">YZ</span> <span class=\"bp\">→</span><span class=\"n\">XY</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span>\n</code></pre></div>\n<p>instead of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">{</span><span class=\"n\">YZ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">YZ</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">YZ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">XY</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">PowType</span> <span class=\"n\">XY</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">XY</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span>\n</code></pre></div>",
        "id": 338715852,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1677628305
    }
]