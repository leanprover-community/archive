[
    {
        "content": "<p>I'm trying to learn how to use unexpanders for pretty printing custom syntax.  </p>\n<p>When I try to introduce a simple unexpander, I find it doesn't carry over across namespaces, as per the following MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"bp\">|</span> <span class=\"n\">bar</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myFun</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"∣\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"∣\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∣$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">∣</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.myFun</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>  <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[app_unexpander Foo.myFun]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpand_myFun</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myFun</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∣</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">∣</span><span class=\"o\">)</span> <span class=\"c1\">-- needed for example 1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.myFun</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∣</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">∣</span><span class=\"o\">)</span> <span class=\"c1\">-- needed for example 2</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"c1\">-- example 1, inside namesapce Foo</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∣</span><span class=\"n\">f</span><span class=\"bp\">∣</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n\n<span class=\"c1\">-- example 2, outside namespace Foo</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∣</span><span class=\"n\">f</span><span class=\"bp\">∣</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>As far as I can tell, if I want the pretty-printing to work both inside and out of namespace <code>Foo</code>, I need both alternatives in the implementation of <code>unexpand_myfun</code> , and I get the same effect if I declare the unexpander within <code>Foo</code>.  Is there a simpler way to get it to work in both spaces? Or am I doing something wrong?</p>",
        "id": 325437238,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1675354268
    },
    {
        "content": "<p>I guess that's the reason why many built-in unexpanders match on underscores, i.e., <code> `($_ $f:ident)</code></p>",
        "id": 325455901,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675359225
    },
    {
        "content": "<p>Oooh, I see. I was getting a warning from the linter about this, but I thought it was referring to the <code>ident</code> rather than the function name. Works great now. Thanks Gabriel!</p>",
        "id": 325458769,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1675359944
    }
]