[
    {
        "content": "<p>Hi all,<br>\nI'm very new to Lean and was struggling a bit to see how to complete my proof (that the length of lst.takeWhile f is less than or equal to lst.length for any f : a -&gt; Bool, lst : List a).<br>\nI couldn't find many good examples of list induction for this kind of thing either, so could someone please give me some hints how to proceed from what I have so far/let me know if I'm approaching it wrong completely?</p>\n<p>Thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">takeWhile_decreases_length</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">lst.takeWhile</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">List.length</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">takeWhile_on_the_empty_list_remains_empty</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n        <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">where</span> <span class=\"n\">takeWhile_on_the_empty_list_remains_empty</span> <span class=\"o\">:</span> <span class=\"o\">[]</span><span class=\"bp\">.</span><span class=\"n\">takeWhile</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 393378660,
        "sender_full_name": "Matt",
        "timestamp": 1695784878
    },
    {
        "content": "<p>First things first: please read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 393381272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695785890
    },
    {
        "content": "<p>Second: as soon as you where tempted to write the <code>where</code> clause, you should instead think \"Oh, there is a simp lemma missing here, I should add it.\"</p>",
        "id": 393381394,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695785947
    },
    {
        "content": "<p>We could quickly check for the existence of this missing lemma somewhere, with:</p>",
        "id": 393381516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695785998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> List.takeWhile, List.nil</p>",
        "id": 393381597,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786013
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Basic.html#List.takeWhile_eq_nil_iff\">List.takeWhile_eq_nil_iff</a></p>",
        "id": 393381599,
        "sender_full_name": "loogle",
        "timestamp": 1695786013
    },
    {
        "content": "<p>But that's not actually helpful.</p>",
        "id": 393381663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786048
    },
    {
        "content": "<p>So before your theorem you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">takeWhile_nil</span> <span class=\"o\">:</span> <span class=\"n\">List.takeWhile</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(and make a mental note that this should be in Std, oops!).</p>",
        "id": 393381911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786140
    },
    {
        "content": "<p>Then before your <code>cases</code> I would want to simplify the <code>takeWhile f (x :: xs)</code> into its definition.</p>",
        "id": 393382104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786217
    },
    {
        "content": "<p>So again:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> List.takeWhile, List.cons</p>",
        "id": 393382133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786227
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:8: expected end of input</p>",
        "id": 393382136,
        "sender_full_name": "loogle",
        "timestamp": 1695786228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> List.takeWhile, List.cons</p>",
        "id": 393382230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786257
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Perm.html#List.count_permutations%27Aux_self\">List.count_permutations'Aux_self</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Sort.html#List.insertionSort_cons_eq_take_drop\">List.insertionSort_cons_eq_take_drop</a>, and <a href=\"https://loogle.lean-fro.org/?q=List.takeWhile%2C%20List.cons\">1 more</a></p>",
        "id": 393382232,
        "sender_full_name": "loogle",
        "timestamp": 1695786258
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, it seems you can't say anything to loogle before the mention? Could that be fixed?)</p>",
        "id": 393382266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786279
    },
    {
        "content": "<p>But again the obvious lemma is missing! So sad. You've picked a corner of the library with some holes. :-)</p>",
        "id": 393382303,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786305
    },
    {
        "content": "<p>So I'd add that lemma. Probably not marking it as <code>@[simp]</code> since the RHS is a bit gross.</p>\n<p>That brings us to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">takeWhile_nil</span> <span class=\"o\">:</span> <span class=\"n\">List.takeWhile</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">takeWhile_cons</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List.takeWhile</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">takeWhile</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n   <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">takeWhile_length_le</span> <span class=\"o\">{</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">lst.takeWhile</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">takeWhile_cons</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 393382642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786447
    },
    {
        "content": "<p>I won't walk you through the rest but the short-cut from there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">takeWhile_length_le</span> <span class=\"o\">{</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">lst.takeWhile</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">takeWhile_cons</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span><span class=\"bp\">?</span>\n      <span class=\"n\">exact</span><span class=\"bp\">?</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n</code></pre></div>",
        "id": 393382851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786546
    },
    {
        "content": "<p>After which you need to follow the suggestions.</p>",
        "id": 393382945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695786585
    },
    {
        "content": "<p>thanks for taking the time to reply Scott! this helps a lot</p>",
        "id": 393382974,
        "sender_full_name": "Matt",
        "timestamp": 1695786602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"653560\">Matt</span> has marked this topic as resolved.</p>",
        "id": 393383307,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695786740
    },
    {
        "content": "<p>For the <code>nil</code> case, I wonder if <code>unfold takeWhile; refl</code> works as well?</p>",
        "id": 393383954,
        "sender_full_name": "Chris Wong",
        "timestamp": 1695786978
    },
    {
        "content": "<p>It would, but that is abhorrent, when you could just write the <code>simp</code> lemma and thereby make it work for everyone forever afterwards! :-)</p>",
        "id": 393384026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695787004
    },
    {
        "content": "<p><code>unfold</code> is a code smell all by itself.</p>",
        "id": 393384073,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695787021
    },
    {
        "content": "<p>That's interesting, thanks! I'm guessing the reason unfold is discouraged is because it couples your proof to implementation details?</p>",
        "id": 393384933,
        "sender_full_name": "Chris Wong",
        "timestamp": 1695787355
    },
    {
        "content": "<p>That, and because it is usually a sign that you haven't bothered to set up <code>simp</code> properly, and should do that.</p>",
        "id": 393386053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695787843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> did we miss a spot with the last PR?</p>",
        "id": 393387327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695788418
    },
    {
        "content": "<p>Sadly it seems so.</p>",
        "id": 393387351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695788433
    },
    {
        "content": "<p>I think there were just never either simp attributes or simp lemmas for takeWhile</p>",
        "id": 393387432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695788463
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7397\">https://github.com/leanprover-community/mathlib4/pull/7397</a></p>",
        "id": 393429471,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695805210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20proving.20the.20length.20of.20takeWhile.20is.20non-increasing/near/393382303\">said</a>:</p>\n<blockquote>\n<p>But again the obvious lemma is missing! So sad. You've picked a corner of the library with some holes. :-)</p>\n</blockquote>\n<p>Isn't this supposed to be generated automatically as an equation lemma?</p>",
        "id": 393460642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695812602
    },
    {
        "content": "<p>As for the original question, this should be a trivial consequence of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.isPrefix#doc\">docs#List.isPrefix</a> (which is misnamed...)</p>",
        "id": 393461233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695812739
    }
]