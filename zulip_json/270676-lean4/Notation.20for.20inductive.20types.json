[
    {
        "content": "<p>Hi I'm fairly new to Lean 4 and I'm trying to figure out if there is a way to define a notation for an inductive type and then use that notation within the definition of that type. For example, if I want to define an inductive type to represent typing judgements in some language,  I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"bp\">Γ</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"n\">e</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">typing</span> <span class=\"bp\">Γ</span> <span class=\"n\">e</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">typing</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"n\">_t</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ttrue</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span><span class=\"n\">_t</span><span class=\"o\">,</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">true_expr</span> <span class=\"o\">:</span> <span class=\"n\">my_bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">etc...</span>\n</code></pre></div>\n<p>But Lean gives me the error <code>unknown identifier 'typing✝'</code> in the ttrue line. Does anyone know any workarounds / solutions for this?</p>",
        "id": 277789523,
        "sender_full_name": "Tyler Hanks",
        "timestamp": 1649104402
    },
    {
        "content": "<p>See e.g. <a href=\"https://github.com/IPDSnelting/tba-2021/blob/b6390e55b768423d3266969e81d19290129c5914/TBA/While/Semantics.lean#L42-L64\">https://github.com/IPDSnelting/tba-2021/blob/b6390e55b768423d3266969e81d19290129c5914/TBA/While/Semantics.lean#L42-L64</a></p>",
        "id": 277789761,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649104513
    },
    {
        "content": "<p>you can disable <del>quotPrecheck</del> hygiene to forward declare the notation</p>",
        "id": 277789773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649104522
    },
    {
        "content": "<p>that worked thanks!</p>",
        "id": 277789990,
        "sender_full_name": "Tyler Hanks",
        "timestamp": 1649104631
    },
    {
        "content": "<p>Did this \"feature\" get disabled at some point? The following errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>  <span class=\"c1\">-- hacky: allow forward reference in notation</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Γ</span> <span class=\"s2\">\" ⇐ \"</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Provable</span> <span class=\"bp\">Γ</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Provable</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">⇐</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"c1\">-- error: expected token</span>\n</code></pre></div>",
        "id": 363965027,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686050134
    },
    {
        "content": "<p>The <code>in</code> creates a new section, so the local notation is short-lived</p>",
        "id": 363980933,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686053425
    },
    {
        "content": "<p>Yeah I ran into this with <code>local attribute</code> as well and was going to report an issue for it. It should use <code>with_weak_namespace</code> or similar</p>",
        "id": 363985526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686054431
    },
    {
        "content": "<p>Thanks! Removing the <code>in</code> indeed works</p>",
        "id": 363991766,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686055681
    }
]