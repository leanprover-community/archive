[
    {
        "content": "<p>there has to be a simple way to do this but i havent found it yet -- how do i go from <code>a != b = true</code> as a goal to <code>a = b -&gt; False</code>? most boolean -&gt; prop coercions ive dealt with have happened automatically so far</p>",
        "id": 372611390,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688567068
    },
    {
        "content": "<p>Please post <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. It seems to me there should be parentheses like <code>(a != b) = true</code> probably. Also maybe <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>.</p>",
        "id": 372623501,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688569355
    },
    {
        "content": "<p>@Bhakti Shah I think in general <code>(a != b) = true</code> doesn't imply <code>a = b -&gt; False</code>. You can only go from <code>Prop</code> to <code>Bool</code> but not necessarily the other way around (unless you have <code>LawfulBEq</code>).</p>",
        "id": 372626220,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1688569869
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulBEq.eq_of_beq#doc\">docs#LawfulBEq.eq_of_beq</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ne_of_beq_false#doc\">docs#ne_of_beq_false</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=beq_false_of_ne#doc\">docs#beq_false_of_ne</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=beq_eq_false_iff_ne#doc\">docs#beq_eq_false_iff_ne</a>. But seems there are almost no lemmas about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bne#doc\">docs#bne</a>.</p>",
        "id": 372633157,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1688571062
    },
    {
        "content": "<p>You may apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bool.not_eq_true%27#doc\">docs#Bool.not_eq_true'</a> on <code>a != b = true</code> first.</p>",
        "id": 372634319,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1688571261
    },
    {
        "content": "<p>Yes, we are currently missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">bne_iff_ne</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bne</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">beq_iff_eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">beq_iff_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span> The <code>[simp]</code> rule above (or similar) should be added to the library. In the meantime, you can add it to your project.</p>",
        "id": 372635926,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1688571559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/boolean.20inequality.20to.20prop.20inequality/near/372623501\">said</a>:</p>\n<blockquote>\n<p>Please post <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. It seems to me there should be parentheses like <code>(a != b) = true</code> probably. Also maybe <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>.</p>\n</blockquote>\n<p>sorry about that i didn't actually expect someone to try to prove it since i thought it would be in a library somewhere :)</p>",
        "id": 372637017,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688571743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/boolean.20inequality.20to.20prop.20inequality/near/372635926\">said</a>:</p>\n<blockquote>\n<p>Yes, we are currently missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">bne_iff_ne</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bne</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">beq_iff_eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">beq_iff_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"578936\">Bhakti Shah</span> The <code>[simp]</code> rule above (or similar) should be added to the library. In the meantime, you can add it to your project.</p>\n</blockquote>\n<p>thanks! I looked on that page and couldn't find it, so i wasn't sure if i was missing something. i did manage to prove it with some similar chaining of lemmas</p>",
        "id": 372637316,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688571806
    },
    {
        "content": "<p><code>@[simp] theorem bne_iff_ne [BEq α] [LawfulBEq α] (a b : α) : a != b ↔ a ≠ b := by</code> this seems to resolve for me by just <code>simp [bne]</code>.</p>",
        "id": 372653380,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1688574992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span> Nice. You should have other <code>[simp]</code> theorems already installed in your environment. The definition above only depends on the core library.</p>",
        "id": 372654393,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1688575246
    }
]