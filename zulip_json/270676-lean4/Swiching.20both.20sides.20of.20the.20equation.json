[
    {
        "content": "<p>I am currently working through \"Mathematics in Lean\" and reached chapter 2, section 2. There, I already proved <code>eq_neg_of_add_eq_zero</code> the following way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_neg_of_add_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Now I want to prove <code>neg_eq_of_add_eq_zero</code> similiarly, but this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">neg_eq_of_add_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_right_neg</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">h</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">add_left_cancel</span> <span class=\"n\">h</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I guess Lean needs me to switch both sides of the equation in <code>h</code> before finishing with <code>exact add_left_cancel h</code>and I was wondering how to that. Also, feel free to suggest improvements of my code.</p>",
        "id": 408651331,
        "sender_full_name": "Denson Cash",
        "timestamp": 1702918775
    },
    {
        "content": "<p><code>h.symm</code> is <code>h</code>with sides switched.</p>",
        "id": 408652786,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1702919178
    },
    {
        "content": "<p>The intended solution uses <code>neg_add_cancel_left</code>.</p>",
        "id": 408653216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702919326
    },
    {
        "content": "<p>But of course there are many ways to prove this.</p>",
        "id": 408653239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702919337
    },
    {
        "content": "<p>My current working solution looks like this (thanks to Pedro Sánchez Terraf):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">neg_eq_of_add_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_right_neg</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">h.symm</span>\n</code></pre></div>",
        "id": 408655843,
        "sender_full_name": "Denson Cash",
        "timestamp": 1702920243
    }
]