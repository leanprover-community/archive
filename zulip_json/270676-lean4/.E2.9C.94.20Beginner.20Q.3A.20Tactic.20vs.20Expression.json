[
    {
        "content": "<p>I've been playing the Natural Numbers Game (NNG4) and it's been a lot of fun! </p>\n<p>Given that tactics are building a proof term, my understanding is that you can express any proof term that you can build using tactics using just Lean expressions directly (though it may quickly become cumbersome). I can see how <code>intro</code> is like defining a function with the given parameter and <code>apply</code> is function application. </p>\n<p>I'm not sure what <code>rfl</code> or <code>rw</code> would look like as term-level expressions. My question is how would I do this for the following two examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 400156082,
        "sender_full_name": "Treq",
        "timestamp": 1699025356
    },
    {
        "content": "<p>If you use at least the std library you can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.ShowTerm</span>\n\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>to see what is the generated proof term.</p>",
        "id": 400156872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699025594
    },
    {
        "content": "<p>But <code>rw</code> tends to produce complicated terms.</p>",
        "id": 400156957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699025618
    },
    {
        "content": "<p>And of course <code>rfl</code> is also a term, so your first example can be <code>example (x q : Nat) : 37 * x + q = 37 * x + q := rfl</code>  (without <code>by</code>).</p>",
        "id": 400157175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699025679
    },
    {
        "content": "<p>rfl is a term!? Hmmm. It's polymorphic then I suppose?</p>",
        "id": 400157894,
        "sender_full_name": "Treq",
        "timestamp": 1699025864
    },
    {
        "content": "<p>Another way to understand rewriting from a proof term perspective is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congrArg#doc\">docs#congrArg</a>. See</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">â†¦</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Believe it or not, there are proof assistants where invoking this lemma is the normal way of doing rewriting. Needless to say, those proof assistants don't have substantial mathematical libraries, but they can be very useful as a theory playground.</p>",
        "id": 400157911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699025868
    },
    {
        "content": "<p>Treq, you can answer this question with <code>#check rfl</code>.</p>",
        "id": 400158027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699025896
    },
    {
        "content": "<p>Oh yeah, I see. Interesting.</p>",
        "id": 400158459,
        "sender_full_name": "Treq",
        "timestamp": 1699026025
    },
    {
        "content": "<p>I think congrArg was what I was looking for. Or I least the direction I was looking for? Thanks!</p>",
        "id": 400159002,
        "sender_full_name": "Treq",
        "timestamp": 1699026200
    },
    {
        "content": "<p>Next up, figure out how to import <code>Std</code> :)</p>",
        "id": 400159298,
        "sender_full_name": "Treq",
        "timestamp": 1699026280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span> has marked this topic as resolved.</p>",
        "id": 400159363,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699026297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Beginner.20Q.3A.20Tactic.20vs.20Expression/near/400157894\">said</a>:</p>\n<blockquote>\n<p>rfl is a term!? Hmmm. It's polymorphic then I suppose?</p>\n</blockquote>\n<p>\"polymorphic\" is giving it too much credit; these are entirely different syntactic contexts, it just so happens that <code>rfl</code> is valid notation in both of them (for different operations with similar semantics)</p>",
        "id": 400161854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699027091
    },
    {
        "content": "<p>Is \"ad hoc polymorphic\" the right term?</p>",
        "id": 400391017,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1699187181
    }
]