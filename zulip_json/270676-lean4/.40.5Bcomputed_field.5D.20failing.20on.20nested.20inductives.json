[
    {
        "content": "<p>Computed fields don't seem to be working on nested inductive types. The following code generates an error : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span>  <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"k\">with</span>\n<span class=\"kd\">@[computed_field]</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">t₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- computed field Foo.f does not reduce for constructor Foo.bar</span>\n</code></pre></div>\n<p>I've tried to work around this issue, but my other attempts, such as the following one, fails with another sort of error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span>  <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"k\">with</span>\n<span class=\"kd\">@[computed_field]</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">t₁</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">t₁</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">t₁</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--IR check failed at 'Foo.bar._override', error: unknown declaration 'Foo.f.match_1'</span>\n</code></pre></div>\n<p>Should I report this on the Lean 4 repo ?</p>",
        "id": 344365303,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1679690965
    },
    {
        "content": "<p>Yes, this is known.  Anything beyond the most basic version is not really supported.</p>",
        "id": 344372393,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679694026
    },
    {
        "content": "<p>The current implementation was only intended as a stopgap measure until the new compiler lands.</p>",
        "id": 344372444,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679694053
    },
    {
        "content": "<p>But that got delayed a bit.</p>",
        "id": 344372500,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679694082
    }
]