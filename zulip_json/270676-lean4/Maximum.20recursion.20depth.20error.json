[
    {
        "content": "<p>In the following example, the last line gives a maximum recursion depth error. Increasing the depth just causes a crash. Any pointers on what I'm doing wrong/how to debug this? (Context: I'm trying to hack a UInt24ish format)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">le_sub_one_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_arith</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp_arith</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">le_sub_one_of_lt</span> <span class=\"n\">b.isLt</span><span class=\"o\">)</span>\n\n\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">le_sub_one_of_lt</span> <span class=\"n\">a.isLt</span><span class=\"o\">)</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">24</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_arith</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span> <span class=\"n\">UInt8.toNat</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">4096</span> <span class=\"k\">in</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.add_le_add</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_le_add</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.isLt</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 377428092,
        "sender_full_name": "Pim Otte",
        "timestamp": 1689973609
    },
    {
        "content": "<p>It looks like this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">le_sub_one_of_lt</span> <span class=\"n\">b.isLt</span><span class=\"o\">)</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">le_sub_one_of_lt</span> <span class=\"n\">a.isLt</span><span class=\"o\">)</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_le_add</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_le_add</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"n\">c.isLt.le</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 377436174,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689976590
    },
    {
        "content": "<p>Changing <code>have h3 :=</code> to <code>exact</code> causes it to do a maximum recursion depth error.</p>",
        "id": 377436234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689976614
    },
    {
        "content": "<p>Thanks!  A little experimentation lead me to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ineq_uint24</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">c.val</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">a.isLt</span><span class=\"o\">,</span> <span class=\"n\">b.isLt</span><span class=\"o\">,</span> <span class=\"n\">c.isLt</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which just works. </p>\n<p>Do you have any idea why this causes recursion in the first place? Is it trying to unpack the inequality all the way or something?</p>",
        "id": 377520904,
        "sender_full_name": "Pim Otte",
        "timestamp": 1690014176
    }
]