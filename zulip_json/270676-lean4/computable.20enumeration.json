[
    {
        "content": "<p>Is there a typeclass for types that have a computable enumeration? <code>Fintype</code> is backed by a multiset, and I can't extract a list from that (at least, not safely).</p>\n<p>use case: I have a simple inductive like <code>inductive Foo | baz | bar</code> and want to represent <code>Foo -&gt; Nat</code> in a more performant way than a closure. it would be nice to have a generic way to encode enum-indexed vectors as e.g. arrays.</p>",
        "id": 362345849,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685510058
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinEnum#doc\">docs4#FinEnum</a> is a mathlib type for that</p>",
        "id": 362353488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685513410
    },
    {
        "content": "<p>It looks like that <code>FinEnum</code> is not intended to be run as a program. Do I understand it correctly that the enumeration for e.g. product type goes via List of all the elements? This has to be horribly slow.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FinEnum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FinEnum</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FinEnum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ofList</span> <span class=\"o\">(</span><span class=\"n\">toList</span> <span class=\"n\">α</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">toList</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 362358380,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685515190
    },
    {
        "content": "<p>That must have just been for ease of proving... maybe we reimplement it with division.</p>",
        "id": 362363157,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685516752
    },
    {
        "content": "<p>Also somewhat annoying that it's in mathlib. would you be open to PRs to move it and its dependencies? (they seem not too bad)</p>",
        "id": 362363783,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685516946
    },
    {
        "content": "<p>Reimplementing it and moving to std would be really nice!</p>",
        "id": 362364355,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685517134
    },
    {
        "content": "<p>are you using something like this in scilean already? / would you use it if it were in Std? :)</p>",
        "id": 362364958,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685517306
    },
    {
        "content": "<p>If you have a simple inductive type that's an enumeration like the one you show, then Lean will automatically generate a function called <code>Foo.toCtorIdx : Foo -&gt; Nat</code>.</p>\n<p>If you want the left inverse to it, then <code>deriving DecidableEq</code> (given by core Lean) generates two undocumented declarations: <code>Foo.ofNat</code> and <code>Foo.ofNat_toCtorIdx</code></p>",
        "id": 362365424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685517447
    },
    {
        "content": "<p>It'd be awfully nice to also have a deriving handler for arbitrary inductives. Hm.</p>",
        "id": 362365911,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685517581
    },
    {
        "content": "<p>If you're going to reimplement <code>FinEnum</code>, I have a wishlist. Don't have time to look for it now, but search for <code>Enum</code> in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a>.</p>",
        "id": 362366238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685517671
    },
    {
        "content": "<p>For enum inductive types again, the Mathlib <code>deriving Fintype</code> handler will use these functions and define a couple more undocumented declarations in <a href=\"https://github.com/leanprover-community/mathlib4/blob/5f0e28cc840079d5c8edf2d9784813357e6babd3/Mathlib/Tactic/DeriveFintype.lean#L113\">this function</a>, for example it gives you a <code>Foo.enumList : List Foo</code> list that enumerates the elements.</p>",
        "id": 362366344,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685517702
    },
    {
        "content": "<p>I've thought a little bit about writing a derive handler to generate an injection to <code>Nat</code> in general (it'd be useful for Encodable/Countable).</p>\n<p>For inductive types that aren't recursive, it shouldn't be too hard to make <code>FinEnum</code> instances using the <code>proxy_type%</code> elaborator that's in mathlib. You just need enough <code>FinEnum</code> instances for basic types (I think it's <code>Unit</code>, <code>PLift</code>, <code>Sigma</code>, <code>Empty</code>, and <code>Sum</code>), which should all be there, though they can be inefficient as written as Tomas pointed out...</p>",
        "id": 362367424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685517969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/computable.20enumeration/near/362363157\">said</a>:</p>\n<blockquote>\n<p>That must have just been for ease of proving...</p>\n</blockquote>\n<p>If I were to guess, it's partly for ease of definition (the existence of the instance proves that the type is a <code>FinEnum</code>) and partly because it probably grew out of  <code>Fintype</code>, which also uses <code>List</code> deep down to enumerate the elements.</p>",
        "id": 362368534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685518232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/computable.20enumeration/near/362363157\">said</a>:</p>\n<blockquote>\n<p>That must have just been for ease of proving... maybe we reimplement it with division.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finProdFinEquiv#doc\">docs4#finProdFinEquiv</a> is that division</p>",
        "id": 362392068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685524117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/computable.20enumeration/near/362364958\">said</a>:</p>\n<blockquote>\n<p>are you using something like this in scilean already? / would you use it if it were in Std? :)</p>\n</blockquote>\n<p>I have my own <a href=\"https://github.com/lecopivo/SciLean/blob/fea6cf7d7270be9f5407a6a1f181063bebe60c63/SciLean/Data/Index.lean#L5\">type</a> that has exactly that but bijection with a <code>{i : USize // i &lt; card}</code> i.e. <code>Fin n</code> living on <code>USize</code> rather then on <code>Nat</code>. If cardinality of the type is bigger then <code>USize.size</code> then the map does not give any formal guarantees. I use it for accessing array elements, so having index types bigger then <code>USize.size</code> is a bad idea anyway.</p>\n<p>Actually, I do not care too much if it lives in Std or Mathlib as I depend on both.</p>\n<p>I would definitely like to have the version with <code>Fin n</code>. My usage of <code>USize</code> might be an unnecessary optimization.</p>",
        "id": 362405343,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685527403
    }
]