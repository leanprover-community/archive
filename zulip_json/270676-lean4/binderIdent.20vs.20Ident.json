[
    {
        "content": "<p>How to turn an <code>ident</code> into a <code>binderIdent</code>?</p>",
        "id": 402507194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700151568
    },
    {
        "content": "<p>Knowing the definition is <code>syntax binderIdent := ident &lt;|&gt; hole</code>.</p>",
        "id": 402507384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700151605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toBinderIdent</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">binderIdent</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binderIdent</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That is to say, you probably just need to annotate your use site with <code>:ident</code>.</p>",
        "id": 402512625,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1700153137
    },
    {
        "content": "<p>Thanks! I wasn't able to use the annotation suggestion but the function works fine.</p>",
        "id": 402514501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700153729
    },
    {
        "content": "<p>I don't think there's any reason to run this in a monad, so here's an alternative:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toBinderIdent</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">binderIdent</span> <span class=\"o\">:=</span> <span class=\"n\">Unhygienic.run</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">withRef</span> <span class=\"n\">i</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binderIdent</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(The <code>withRef</code> is to tag the resulting <code>binderIdent</code> with the source position of <code>i</code>. Jannis's could have that too.)</p>",
        "id": 402517388,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700154596
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 402517668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700154660
    }
]