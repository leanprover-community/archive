[
    {
        "content": "<p>I am not sure how to complete this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.UInt</span>\n\n<span class=\"sd\">/-- 64-bit two's complement integers -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"sd\">/-- `Int64` has nice equality -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">y</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">BEq.beq</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>After the <code>simp</code>, the environment looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"n\">y</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Int64</span>\n<span class=\"n\">e</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n<span class=\"n\">e</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"o\">({</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n<span class=\"n\">e</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">==</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">beqInt64</span><span class=\"bp\">✝</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If I could expand that <code>beqInt64✝</code> function, I think I would get <code>x = y</code>.  But I don't know how to name that instance, and thus I don't know how to expand it.</p>",
        "id": 396675319,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697314669
    },
    {
        "content": "<p><code>rw [eq_of_beq e]</code> closes the goal; I guess that function is the <code>beq</code> on <code>UInt64</code>, but not sure why it pops up in such a way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.UInt</span>\n\n<span class=\"sd\">/-- 64-bit two's complement integers -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"sd\">/-- `Int64` has nice equality -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulBEq</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_of_beq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">y</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">BEq.beq</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_of_beq</span> <span class=\"n\">e</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">beq_self_eq_true'</span> <span class=\"n\">x.n</span>\n</code></pre></div>\n<p>(the <code>rfl</code> proof was found by <code>exact?</code>)</p>",
        "id": 396676008,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697315529
    },
    {
        "content": "<p>Thank you!  (I already had the <code>rfl</code> proof; I just left it out for minimality purposes.)</p>\n<p>Would it be reasonable for <code>deriving BEq</code> to always make a <code>LawfulBEq</code> instance, or to have <code>deriving LawfulBEq</code> work?</p>",
        "id": 396676099,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697315672
    }
]