[
    {
        "content": "<p>I have very little understanding how priorities work, what would be a good way to set up priority for 'inner product like' notation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"mi\">61</span> <span class=\"s2\">\"⟫\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inner</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>but this does not work properly as function application does not work properly. Writing <code>f  ⟪x,x⟫</code> gives an error but <code>f (⟪x,x⟫)</code> works.</p>",
        "id": 263912238,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638820675
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"mi\">61</span> <span class=\"s2\">\"⟫\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inner</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">⟫</span><span class=\"o\">))</span>   <span class=\"c1\">--- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">⟫</span><span class=\"o\">)</span>    <span class=\"c1\">--- error</span>\n</code></pre></div>",
        "id": 263912730,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638820781
    },
    {
        "content": "<p>You need precedence at least <code>arg</code> for it to be used as an argument. If a syntax starts and ends with a token, the default precedence is <code>max</code>, otherwise <code>lead</code>. See <a href=\"https://github.com/leanprover/lean4/blob/45917f2f900f177259eebc7a6740193f86292927/src/Init/Notation.lean#L23-L28\">https://github.com/leanprover/lean4/blob/45917f2f900f177259eebc7a6740193f86292927/src/Init/Notation.lean#L23-L28</a> for their descriptions and order.</p>",
        "id": 263918716,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638822003
    },
    {
        "content": "<p>In other words: just remove all precedences, should be fine</p>",
        "id": 263918826,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638822022
    },
    {
        "content": "<p>Thanks, it is starting to make sense a bit more and mainly it works now :)</p>",
        "id": 263924855,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638824895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> has marked this topic as resolved.</p>",
        "id": 263924860,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638824898
    }
]