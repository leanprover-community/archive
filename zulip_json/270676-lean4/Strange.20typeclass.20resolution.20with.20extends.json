[
    {
        "content": "<p>I defined a <code>Traversable</code> typeclass that extends <code>Functor</code>, but Lean doesn't like it. Am I doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Traversable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Functor</span> <span class=\"n\">f</span> <span class=\"n\">where</span>\n  <span class=\"n\">traverse</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ProdF</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ProdF</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Functor</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">ProdF</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">fa</span> <span class=\"n\">ga</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">Functor.map</span> <span class=\"n\">f</span> <span class=\"n\">fa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Functor.map</span> <span class=\"n\">f</span> <span class=\"n\">ga</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Error: fields missing: 'map'</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Traversable</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Traversable</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Traversable</span> <span class=\"o\">(</span><span class=\"n\">ProdF</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">traverse</span> <span class=\"n\">f</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">fa</span> <span class=\"n\">ga</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">Traversable.traverse</span> <span class=\"n\">f</span> <span class=\"n\">fa</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">Traversable.traverse</span> <span class=\"n\">f</span> <span class=\"n\">ga</span>\n\n<span class=\"c1\">-- Adding map := Functor.map yields error: failed to synthesize instance Functor (ProdF f g)</span>\n</code></pre></div>\n<p>Specifically, if I have <code>Traversable</code> extend <code>Functor</code>, then Lean demands an implementation of <code>map</code>. If I try to default it to <code>Functor.map</code> then it can't figure out that I already have a <code>Functor f</code> instance in scope because I have a <code>Traversable f</code>.</p>\n<p>If instead I depends on a Functor superclass like <code>class Traversable (f : Type -&gt; Type) [Functor f] where</code> then Lean fails to synthesize a Functor instance for <code>f</code> when I define <code>Traversable (ProdF f g)</code>.  If I then add <code>[Functor f]</code> to that instance context, it fails to synthesize <code>Functor (ProdF f g)</code>, even though the appropriate instances are in scope! This has to be a bug.</p>",
        "id": 392417553,
        "sender_full_name": "Eric Conlon",
        "timestamp": 1695343406
    },
    {
        "content": "<p><del><code>set_option pp.universes true</code> should make the problem clear</del></p>",
        "id": 392418472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695343869
    },
    {
        "content": "<p>Your <code>Functor</code> instance has a useless argument that causes it not to fire</p>",
        "id": 392418626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695343927
    },
    {
        "content": "<p>OMG you are so right.</p>",
        "id": 392418749,
        "sender_full_name": "Eric Conlon",
        "timestamp": 1695344000
    },
    {
        "content": "<p>If you add <code>import Std.Tactic.Lint</code> then <code>#lint</code> will tell you this</p>",
        "id": 392418767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695344010
    },
    {
        "content": "<p>Thank you Eric! I added <code>require std from git \"https://github.com/leanprover/std4\" @ \"main\"</code> to pick up <code>std</code> and lint is showing me quite a few issues.</p>",
        "id": 392419663,
        "sender_full_name": "Eric Conlon",
        "timestamp": 1695344442
    }
]