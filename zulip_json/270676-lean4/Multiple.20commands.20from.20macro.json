[
    {
        "content": "<p>I want to write a macro that lives in the <code>command</code> category and returns multiple commands, how can I get that? I tried using <code>section</code> to group the thing but that yields even weirder errors. MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"o\">)</span>\n<span class=\"bp\">``</span>\n</code></pre></div>",
        "id": 386152283,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692486089
    },
    {
        "content": "<p>It works if you remove  <code>command|</code> . Also there was some collision of using <code>foo</code> as identifier and command macro. So I turned the command to <code>#foo</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"#foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n   <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but don't ask me for an explanation :)</p>",
        "id": 386154701,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692488775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> To add on to Tomas's answer. <code>command|</code> only produces a single command syntax. multiple commands grouped together can be created via <code>mkNullNode #[cmds]</code>(the basic <code> `(...) </code> quotation also has special magic to do this).  <code>section</code> will not work because it does not actually group commands (<code>section</code>, the commands, and <code>end</code> are all actually separate commands).</p>",
        "id": 386156348,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692490265
    },
    {
        "content": "<p>(<code>mutual</code> is the only builtin command block I know of that actually groups the commands inside it into a single overall <code>mutual</code> command)</p>",
        "id": 386156404,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692490314
    }
]