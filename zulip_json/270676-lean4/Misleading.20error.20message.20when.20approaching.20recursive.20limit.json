[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">37</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">1</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span>\n        <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>Reports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"bp\">?</span><span class=\"n\">m.412</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">1</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">1</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Bool</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 398756778,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698349901
    },
    {
        "content": "<p>I updated the example to a more minimal case. Sorry for providing a long one before. Should I open an issue for it?</p>",
        "id": 398784947,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698364577
    },
    {
        "content": "<p>Yes please. But please include also what you expect to see!</p>",
        "id": 398785659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698364941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Misleading.20error.20message.20when.20approaching.20recursive.20limit/near/398785659\">said</a>:</p>\n<blockquote>\n<p>Yes please. But please include also what you expect to see!</p>\n</blockquote>\n<p>I think <span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span> means that there are no type errors thrown when maxRecDepth is set to 38 or higher instead. So maybe the expected error message is <code>running out of maxHeartBeats</code> error message that some typeclass instance problems throw.</p>",
        "id": 398787019,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698365706
    },
    {
        "content": "<p>Yes, there should be no error. If <code>maxRecDepth</code> affects the type checking result, it should report errors related to limit.</p>",
        "id": 398787149,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698365792
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/hCgBPaxXfigCVbSiXgWPdd8-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hCgBPaxXfigCVbSiXgWPdd8-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hCgBPaxXfigCVbSiXgWPdd8-/image.png\"></a></div><p>limit-related error does exist if you set it to <code>36</code>. However, for certain cases (say <code>37</code>), it only reports strange type errors.</p>",
        "id": 398787245,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698365861
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/aFuuMFUWtAzArnZkABgKezgW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aFuuMFUWtAzArnZkABgKezgW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/aFuuMFUWtAzArnZkABgKezgW/image.png\"></a></div>",
        "id": 398787342,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698365901
    },
    {
        "content": "<p>You still get the type error for 36 though</p>",
        "id": 398787378,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698365924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Misleading.20error.20message.20when.20approaching.20recursive.20limit/near/398787378\">said</a>:</p>\n<blockquote>\n<p>You still get the type error for 36 though</p>\n</blockquote>\n<p>indeed.</p>",
        "id": 398787406,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698365948
    },
    {
        "content": "<p>For 38 there are suddenly no type errors</p>",
        "id": 398787412,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698365951
    },
    {
        "content": "<p>Best guess: the elaborator just spit out the term as is when it ran out of heartbeats and  <code>if then else</code> gets treated as the <code>ite</code> for <code>Prop</code>. Some edge case behaviour.</p>",
        "id": 398787477,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698365996
    },
    {
        "content": "<p>I think we can find out what the elaborator was doing in that last step by turning on the trace. I'll quickly look up the docs for the correct option</p>",
        "id": 398787638,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698366093
    },
    {
        "content": "<p>Better guess: This coe was the last step and somehow the term was sent on for typechecking w/o this step.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">9</span>\n\n<span class=\"o\">[</span><span class=\"n\">Elab.coe</span><span class=\"o\">]</span> <span class=\"n\">adding</span> <span class=\"n\">coercion</span> <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">1</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"bp\">!=</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 398788167,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698366390
    },
    {
        "content": "<p>Issue: <a href=\"https://github.com/leanprover/lean4/issues/2775\">https://github.com/leanprover/lean4/issues/2775</a></p>",
        "id": 398788559,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698366599
    },
    {
        "content": "<p>I don't feel confident declaring it a bug before an expert chimes in, even though it looks like one.</p>",
        "id": 398788833,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698366724
    },
    {
        "content": "<p>Wow, nice job finding a bug that appears at exactly 37!</p>",
        "id": 398789027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698366829
    },
    {
        "content": "<p>While such \"error\" can be \"by design\", the error message can be improved at least.</p>",
        "id": 398789462,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698367047
    },
    {
        "content": "<p>Agreed. I think this is some weird edge case. I just can't find a way for trace.elab.step.result to print the heartbeat count</p>",
        "id": 398789571,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698367097
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 398789669,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698367153
    }
]