[
    {
        "content": "<p>Uhh.. Stumbled upon this between ideas while representing some data.. Noticed Lean didn't complain. How is this valid?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 279635046,
        "sender_full_name": "Sofia Snow",
        "timestamp": 1650515633
    },
    {
        "content": "<p>It looks like an unfortunate interaction with the <code>autoImplicit</code> feature. Try <code>#check Foo.mk (Foo := Nat)</code> :)<br>\nAnd</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 279635434,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1650516037
    },
    {
        "content": "<p>Ah ! That explains it. Thanks.</p>",
        "id": 279640423,
        "sender_full_name": "Sofia Snow",
        "timestamp": 1650521508
    },
    {
        "content": "<p>Would be good if the syntax highlighting distinguished the two</p>",
        "id": 279657451,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650534407
    },
    {
        "content": "<p>Or injected a verbosity layer, like some editors do with type hints. Ex. <code>let x := 1</code> -&gt; <code>let x : Nat := 1</code> where the <code>: Nat</code> annotation is grayed out because it isn't really in the code, it was merely inferred and displayed as if it were. Don't know if any editors which do this allow you to make that code, to lock in the type, but that'd be nice too.</p>",
        "id": 279658343,
        "sender_full_name": "Sofia Snow",
        "timestamp": 1650535018
    },
    {
        "content": "<p>In <code>scala</code> on VS code (with `metals) the inferred types are shown and can be added, so the editor clearly supports this.</p>",
        "id": 279662110,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1650537507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> has marked this topic as resolved.</p>",
        "id": 279682328,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650548867
    },
    {
        "content": "<p>Yes, LSP supports that, and our LSP server highlights variables. However, in recursive declarations, the highlighting was incorrect because we use auxiliary free variables to elaborate them. I just pushed a fix for this. Now, these auxiliary declarations as not tagged as variables by our LSP server since they are \"morally\" constants.</p>",
        "id": 279695545,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650554820
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/4727fd68832d2d67220ecf9f363b379263b3f469\">https://github.com/leanprover/lean4/commit/4727fd68832d2d67220ecf9f363b379263b3f469</a></p>",
        "id": 279696018,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650555040
    },
    {
        "content": "<p>We also refined the <code>autoImplicit</code> feature. <a href=\"https://github.com/leanprover/lean4/commit/0b92195ec8c677c595fb899f836347f531864abc\">https://github.com/leanprover/lean4/commit/0b92195ec8c677c595fb899f836347f531864abc</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"c1\">-- Error at second `f`</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- Error at second `Foo`</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 279711812,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650561705
    }
]