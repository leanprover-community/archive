[
    {
        "content": "<p>I am digging into Turing machines and started with a simple Collatz function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collatzStep</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">Option.some</span> <span class=\"n\">next</span>\n  <span class=\"k\">else</span> <span class=\"n\">Option.none</span>\n</code></pre></div>\n<p>Then I can make a machine with <code>Turing.eval</code> which uses partial functions to expect a proof it halts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collatz</span> <span class=\"o\">:=</span> <span class=\"n\">Turing.eval</span> <span class=\"n\">collatzStep</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eleven_halts</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"mi\">11</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But unfortunately that's where I've gotten stuck. How do I prove for example that <code>collatz 11</code> halts, or <code>collatz (2^n)</code>? Proving the Dom requires understanding <code>PFun.fix</code> which I'm struggling with. Unfolding the definitions creates an enormous proof goal.</p>",
        "id": 363870013,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1686015755
    },
    {
        "content": "<p>you probably want to use <code>dom_of_mem_fix</code> and then <code>fix_fwd</code> to advance the machine and <code>fix_stop</code> to terminate</p>",
        "id": 363871932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686017024
    },
    {
        "content": "<p>This is great, thank you!</p>",
        "id": 363876994,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1686020547
    },
    {
        "content": "<p>I am really confused by what this means. Do we have a crosspiler that automatically generates a Turing machine for such a complicated function?!</p>",
        "id": 363936524,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686043113
    },
    {
        "content": "<p>there is no TM here. This is just using <code>PFun.fix</code> with a specific step function</p>",
        "id": 363955893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686047897
    },
    {
        "content": "<p>Doesn't <code>Turing.eval</code> refer to a Turing machine?</p>",
        "id": 363959001,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1686048722
    },
    {
        "content": "<p>Turing.eval doesn't actually interact with the Turing machine types, it just takes a function <code>f : α -&gt; Option α</code> and recurses f using PFun.fix - it handles creating the Sum type for you and makes sure it returns the second to last state (the state it halted on).<br>\nSo I am using it to iterate the Collatz function (which might not halt for all we know) but there's no tape or anything.</p>",
        "id": 364136604,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1686096194
    }
]