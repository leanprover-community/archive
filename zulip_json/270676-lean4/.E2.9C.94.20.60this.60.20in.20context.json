[
    {
        "content": "<p>How can I check if there's a <code>this</code> in the context in the <code>TacticM</code> monad?</p>",
        "id": 275456242,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647392514
    },
    {
        "content": "<p>And further, if it is in the context, how can I get its <code>FVarId</code>?</p>",
        "id": 275460122,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647396831
    },
    {
        "content": "<p>You can try <code>(&lt;- Lean.Meta.getLocalDeclFromUserName `this).fvarId</code></p>",
        "id": 275464955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647403165
    },
    {
        "content": "<p>It should throw an error if there's no <code>this</code> to find</p>",
        "id": 275465074,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647403230
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"k\">then</span>\n    <span class=\"n\">assignExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkFVar</span> <span class=\"n\">this.fvarId</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">test</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">this</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">test</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 275465459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647403701
    },
    {
        "content": "<p>what simon said</p>",
        "id": 275465472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647403726
    },
    {
        "content": "<p>note that <code>this</code> is a keyword now, so you can't just use it in binders normally</p>",
        "id": 275465487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647403762
    },
    {
        "content": "<p>but this works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"bp\">;</span> <span class=\"kd\">by</span> <span class=\"n\">test</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"bp\">;</span> <span class=\"kd\">by</span> <span class=\"n\">test</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 275465560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647403833
    },
    {
        "content": "<p>Thanks!<br>\nI had a solution yesterday with a try catch flow and it didn't work. I will try again</p>",
        "id": 275483428,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647421953
    },
    {
        "content": "<p>This approach got me closer I think (no more elaboration errors). But now I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">this</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">this</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">this</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- this : Nat</span>\n  <span class=\"n\">foo</span>       <span class=\"c1\">-- false      (why?)</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I was expecting it to print <code>true</code></p>",
        "id": 275502582,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647433313
    },
    {
        "content": "<p>That's because both Mario and you forgot the mandatory withMainContext around the tactic.</p>",
        "id": 275503748,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647434023
    },
    {
        "content": "<p>It works now! Thanks!</p>",
        "id": 275503900,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647434108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 275504226,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647434311
    }
]