[
    {
        "content": "<p>In:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The tactic state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>rather than <code>x: Nat</code></p>\n<p>The workaround is to avoid pattern matching </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Admittedly the pattern matching version is a stranger way to spell <code>∀x</code> than <code>fun x =&gt;</code> but this bit me in a mathlib port.</p>",
        "id": 328286134,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676566286
    },
    {
        "content": "<p>I'm surprised mathlib doesn't lint for single-pattern matches, since it's never really what you want <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 328318322,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676575359
    },
    {
        "content": "<p>I'm curious: in what way does this lead to problems?</p>",
        "id": 328476935,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676642415
    },
    {
        "content": "<p>I guess you're using a tactic that doesn't expect a let binding?</p>",
        "id": 328477391,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676642522
    },
    {
        "content": "<p>I'm also curious why it happens at all</p>",
        "id": 328477526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676642537
    },
    {
        "content": "<p>I mean if there was more than one branch, then the original variable would not survive, right?</p>",
        "id": 328478080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676642654
    },
    {
        "content": "<p>Or if we match on a pair?</p>",
        "id": 328478109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676642662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/possible.20hygenic.20name.20issue.20in.20pattern.20matching/near/328476935\">said</a>:</p>\n<blockquote>\n<p>I'm curious: in what way does this lead to problems?</p>\n</blockquote>\n<p>It caused hygienic name issues after a <code>cases' x with x x</code></p>",
        "id": 328501431,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676648685
    },
    {
        "content": "<p>The issues were in <code>star_rmatch_iff</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2306\">!4#2306</a> if you are curious. The new <code>x</code> created by <code>cases'</code> is completely dissociated from the let binding.</p>",
        "id": 328502685,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676649006
    }
]