[
    {
        "content": "<p>I am interested in debugging the NormCastExt extension to better understand how it works (<a href=\"https://github.com/leanprover/std4/blob/5aa4ab4f0c096e8d0600e3ae41b8577dcf6edb13/Std/Tactic/NormCast/Ext.lean#L108\">https://github.com/leanprover/std4/blob/5aa4ab4f0c096e8d0600e3ae41b8577dcf6edb13/Std/Tactic/NormCast/Ext.lean#L108</a>).  I'd like to print out the values of the instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NormCast.Ext</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Std.Tactic.NormCast.normCastExt</span>\n</code></pre></div>\n<p>In order to see what its value is.</p>\n<p>But it doesn't seem printable: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expression</span>\n  <span class=\"n\">Std.Tactic.NormCast.normCastExt</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Std.Tactic.NormCast.NormCastExtension</span>\n<span class=\"n\">but</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Lean.MetaEval</span> <span class=\"n\">Std.Tactic.NormCast.NormCastExtension</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">synthesized</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"kd\">instance</span> <span class=\"n\">instructs</span> <span class=\"n\">Lean</span> <span class=\"n\">on</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">display</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">recall</span> <span class=\"n\">that</span> <span class=\"n\">any</span> <span class=\"n\">type</span> <span class=\"n\">implementing</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Repr</span><span class=\"bp\">`</span> <span class=\"kd\">class</span> <span class=\"n\">also</span> <span class=\"n\">implements</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Lean.MetaEval</span><span class=\"bp\">`</span> <span class=\"kd\">class</span>\n</code></pre></div>\n<p>Is there a way I can print it out to see how my declarations affect its value, or is there another way I should be investigating this?</p>",
        "id": 328858405,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1676838642
    },
    {
        "content": "<p>Bump on this thread, does anyone have an idea how to do it?</p>",
        "id": 352092777,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682267116
    },
    {
        "content": "<p>What do you expect <code>#eval</code> to do here?</p>",
        "id": 352094420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682267870
    },
    {
        "content": "<p>Did you mean to use <code>#check</code> or <code>#print</code>?</p>",
        "id": 352094429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682267877
    },
    {
        "content": "<p>It looks like it's three simp sets, so I guess <code>#eval</code> would show you whatever the <code>Repr</code> instance is for that <code>NormCastExtension</code>. You need an instance of <code>Repr</code>, so you'll have to figure out what information you want to view and implement <code>Repr</code> for <code>NormCastExtention</code> in a way that shows the relevant information.</p>",
        "id": 352094766,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1682268029
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/NormCast/Ext.html#Std.Tactic.NormCast.NormCastExtension\">https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/NormCast/Ext.html#Std.Tactic.NormCast.NormCastExtension</a></p>",
        "id": 352094787,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1682268041
    },
    {
        "content": "<p>It seems highly unlikely to me that there is a sensible implementation of <code>Repr</code>for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Tactic.NormCast.NormCastExtension#doc\">docs4#Std.Tactic.NormCast.NormCastExtension</a>, so I suspect that's not helpful advice.</p>",
        "id": 352096276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682268707
    },
    {
        "content": "<p>Yeah I tried to see if it was simple to define a ToString, but it seems like it's un-Repr-able types nested inside un-Repr-able types.  So it would be a big undertaking to define ToString.  (Also, I don't really <em>understand</em> most of the contained types, and printing them out was part of how I wanted to understand them).</p>",
        "id": 352096704,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682268942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352094429\">said</a>:</p>\n<blockquote>\n<p>Did you mean to use <code>#check</code> or <code>#print</code>?</p>\n</blockquote>\n<p>Yeah I wasn't clear on the different between <code>#check</code> and <code>#print</code>,  I just wanted to see some representation of the value of normCastExt.</p>",
        "id": 352096871,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682269023
    },
    {
        "content": "<p>Yeah, the type <code>NormCastExtension</code> is the configuration data of the environment extension, not its \"actual\" data present in the environment. A <code>Repr</code> instance could at best print some of this configuration. The pattern for accessing the actual data is to get an <code>Environment</code> object and then query it using methods on the extension.</p>",
        "id": 352096894,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682269045
    },
    {
        "content": "<p>I have spent more time investigating this on my own since I originally posted, and my conclusion was that I had two difficulties,  first that it wasn't like \"a real value\" it was hidden behind Meta Monad stuff (or something like that), and the second part was that I couldn't figure out how to just print a value without recursively defining ToString implementations for a bunch of types.</p>",
        "id": 352097060,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682269119
    },
    {
        "content": "<p>Here is an example (I don't know how <code>NormCastExtension</code> works, so this is just a guess as to <em>which</em> data you'd want to print out):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"c1\">-- Note that `getTheorems` is a convenience wrapper around</span>\n  <span class=\"c1\">-- `ext.getState (← getEnv)`</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms</span> <span class=\"bp\">←</span> <span class=\"n\">Std.Tactic.NormCast.normCastExt.down.getTheorems</span>\n  <span class=\"n\">thms.lemmaNames.foldM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">nm.key</span>\n    <span class=\"n\">pure</span> <span class=\"o\">())</span> <span class=\"o\">()</span>\n   <span class=\"o\">:</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 352097287,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682269257
    },
    {
        "content": "<p>Note that we have to do the access in <code>MetaM</code> (or at least <code>CoreM</code>) because that's the monad which has access to the environment.</p>",
        "id": 352097479,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682269331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352097479\">said</a>:</p>\n<blockquote>\n<p>Note that we have to do the access in <code>MetaM</code> (or at least <code>CoreM</code>) because that's the monad which has access to the environment.</p>\n</blockquote>\n<p>Ok thanks! I think this answers the question about how to handle the <code>MetaM</code> wrapping.  It still seems like there is a lot of work to just dump the value of these objects?  Is there no automated way to see a representation of some object you didn't define without having to define functions which walk through all its (recursive) fields?</p>",
        "id": 352098229,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682269692
    },
    {
        "content": "<blockquote>\n<p>Is there no automated way to see a representation of some object you didn't define without having to define functions which walk through all its (recursive) fields?</p>\n</blockquote>\n<p>The automated way would be to implement a <code>deriving</code> handler so that you can write <code>deriving instance PrintAllTheStuff for MyType</code> and then use <code>#eval PrintAllTheStuff.print (t : MyType)</code>, but there is no such <code>deriving</code> handler at the moment.</p>",
        "id": 352098310,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682269772
    },
    {
        "content": "<p>I see, the debugging page also mentions that debuggers can't print out sensible representations of lean values: <a href=\"https://leanprover.github.io/lean4/doc/dev/debugging.html\">https://leanprover.github.io/lean4/doc/dev/debugging.html</a> .  So there is basically no way to inspect something without hand rolling the Repr implementation for all relevant types?</p>",
        "id": 352098737,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682269924
    },
    {
        "content": "<p>There is a <code>deriving</code> handler for <code>Repr</code>, you can use <code>deriving instance Repr for MyType</code>. For values which need access to monad state you have to write the code manually.</p>",
        "id": 352098935,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682270018
    },
    {
        "content": "<p>I doubt you are at the level of debugging where you need to invoke gdb on Lean code, which that page is describing</p>",
        "id": 352099029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682270061
    },
    {
        "content": "<p>That should only be needed to debug things in lean itself</p>",
        "id": 352099075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682270083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352099075\">said</a>:</p>\n<blockquote>\n<p>That should only be needed to debug things in lean itself</p>\n</blockquote>\n<p>I see, I was just thinking about other languages, such as Java, where even if you don't define toString, you can also open the debugger and see a tree representation of the values of any variable.</p>",
        "id": 352099409,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682270164
    },
    {
        "content": "<p>Not every type has a meaningful repr; what would you expect the repr of <code>fun x =&gt; x*x : Nat -&gt; Nat</code> to be?</p>",
        "id": 352099597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682270227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352098935\">said</a>:</p>\n<blockquote>\n<p>There is a <code>deriving</code> handler for <code>Repr</code>, you can use <code>deriving instance Repr for MyType</code>. For values which need access to monad state you have to write the code manually.</p>\n</blockquote>\n<p>Ohh, I see, I <em>can</em> derive Repr automatically, I just need to derive it for every type in the hierarchy.  So not ideal but I don't have to manually implement Repr for anything.</p>",
        "id": 352099787,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682270287
    },
    {
        "content": "<p>This feels like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem though; you're asking \"how do I get repr for my norm_num extension\" but presumably your question is actually \"what tools are available to debug [vague description of problem] in my norm_num extension\"?</p>",
        "id": 352099845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682270321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352099845\">said</a>:</p>\n<blockquote>\n<p>This feels like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem though; you're asking \"how do I get repr for my norm_num extension\" but presumably your question is actually \"what tools are available to debug [vague description of problem] in my norm_num extension\"?</p>\n</blockquote>\n<p>I suppose so, yeah, my question is how to debug it</p>\n<p>\"Is there a way I can print it out to see how my declarations affect its value, or is there another way I should be investigating this?\"</p>",
        "id": 352100155,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682270463
    },
    {
        "content": "<p>I think the answer is \"the value isn't affected at all, because declaring new constants doesn't affect the value of other constants in the environment\"</p>",
        "id": 352102051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682271417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352099787\">said</a>:</p>\n<blockquote>\n<p>Ohh, I see, I <em>can</em> derive Repr automatically, I just need to derive it for every type in the hierarchy.  So not ideal but I don't have to manually implement Repr for anything.</p>\n</blockquote>\n<p>I don't know how to apply a <code>deriving</code> handler after the fact, but even if you do it manually it becomes pretty obvious that there's no useful information available to you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NormCast.Ext</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Lean.ScopedEnvExtension.Descr</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">reprPrec</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{ name := \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">x.name</span> <span class=\"bp\">++</span> <span class=\"s2\">\" }\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Lean.ScopedEnvExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">reprPrec</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{ descr := \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprArg</span> <span class=\"n\">x.descr</span> <span class=\"bp\">++</span> <span class=\"s2\">\", ext := _ }\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.Tactic.NormCast.NormCastExtension</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">reprPrec</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Std.Format.bracket</span> <span class=\"s2\">\"{ \"</span> <span class=\"o\">(</span>\n            <span class=\"s2\">\"up := \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprArg</span> <span class=\"n\">x.up</span> <span class=\"bp\">++</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">++</span> <span class=\"n\">Std.Format.line</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\"down := \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprArg</span> <span class=\"n\">x.down</span> <span class=\"bp\">++</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">++</span> <span class=\"n\">Std.Format.line</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\"squash := \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprArg</span> <span class=\"n\">x.squash</span><span class=\"o\">)</span> <span class=\"s2\">\" }\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Std.Tactic.NormCast.normCastExt</span>\n</code></pre></div>",
        "id": 352102149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682271460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352099597\">said</a>:</p>\n<blockquote>\n<p>Not every type has a meaningful repr; what would you expect the repr of <code>fun x =&gt; x*x : Nat -&gt; Nat</code> to be?</p>\n</blockquote>\n<p>For example in Java it would represent it using the file and line number of the definition, which is not great, but better than nothing.</p>",
        "id": 352102481,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682271596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352102149\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352099787\">said</a>:</p>\n<blockquote>\n<p>Ohh, I see, I <em>can</em> derive Repr automatically, I just need to derive it for every type in the hierarchy.  So not ideal but I don't have to manually implement Repr for anything.</p>\n</blockquote>\n<p>I don't know how to apply a <code>deriving</code> handler after the fact, but even if you do it manually it becomes pretty obvious that there's no useful information available to you:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NormCast.Ext</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Lean.ScopedEnvExtension.Descr</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">reprPrec</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{ name := \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">x.name</span> <span class=\"bp\">++</span> <span class=\"s2\">\" }\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Lean.ScopedEnvExtension</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">reprPrec</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{ descr := \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprArg</span> <span class=\"n\">x.descr</span> <span class=\"bp\">++</span> <span class=\"s2\">\", ext := _ }\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.Tactic.NormCast.NormCastExtension</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">reprPrec</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Std.Format.bracket</span> <span class=\"s2\">\"{ \"</span> <span class=\"o\">(</span>\n            <span class=\"s2\">\"up := \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprArg</span> <span class=\"n\">x.up</span> <span class=\"bp\">++</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">++</span> <span class=\"n\">Std.Format.line</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\"down := \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprArg</span> <span class=\"n\">x.down</span> <span class=\"bp\">++</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">++</span> <span class=\"n\">Std.Format.line</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\"squash := \"</span> <span class=\"bp\">++</span> <span class=\"n\">reprArg</span> <span class=\"n\">x.squash</span><span class=\"o\">)</span> <span class=\"s2\">\" }\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Std.Tactic.NormCast.normCastExt</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think this needs to be combined with the MetaM monad unwrapping like Wojciech suggested.  But if you can't derive repr after declaration then that is a problem... :(</p>",
        "id": 352102652,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682271665
    },
    {
        "content": "<blockquote>\n<p>But if you can't derive repr after declaration then that is a problem... </p>\n</blockquote>\n<p>To make this super-clear, I don't think you have to worry about <code>Repr</code> at all in this case because <code>Repr</code> is only useful for pure values. When printing out values of environment extensions which use <code>MetaM</code>, you have to access monad state which is not something you can do in <code>Repr</code> implementations.</p>",
        "id": 352102865,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682271773
    },
    {
        "content": "<blockquote>\n<p>I think the answer is \"the value isn't affected at all, because declaring new constants doesn't affect the value of other constants in the environment\"</p>\n</blockquote>\n<p>I'm assuming the question is not about the value of <code>normCastExt</code> (which is indeed left unaffected) but rather about the state stored for <code>normCastExt</code> in the environment, which <em>is</em> affected.</p>",
        "id": 352103082,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682271850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352102865\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But if you can't derive repr after declaration then that is a problem... </p>\n</blockquote>\n<p>To make this super-clear, I don't think you have to worry about <code>Repr</code> at all in this case because <code>Repr</code> is only useful for pure values. When printing out values of environment extensions which use <code>MetaM</code>, you have to access monad state which is not something you can do in <code>Repr</code> implementations.</p>\n</blockquote>\n<p>Hmm, I think the best way to describe my thinking is the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms</span> <span class=\"bp\">←</span> <span class=\"n\">Std.Tactic.NormCast.normCastExt.down.getTheorems</span>\n<span class=\"c1\">-- Now on this line I want to actually print out thms.  How do I do that?</span>\n<span class=\"o\">)</span> <span class=\"o\">()</span>\n   <span class=\"o\">:</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 352103575,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682272076
    },
    {
        "content": "<p>I think because this is fairly low-level stuff, the only answer to 'how do I print x' is 'read code in Lean/mathlib4 that does something with x and figure out how to print it'. For example this prints the post-traversal discrimination tree (which might not be what you want):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NormCast.Ext</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms</span> <span class=\"bp\">←</span> <span class=\"n\">Std.Tactic.NormCast.normCastExt.squash.getTheorems</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">thms.post.format</span>\n  <span class=\"o\">:</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 352105784,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682273199
    },
    {
        "content": "<p>Also, I made a mistake above; I used <code>logInfo</code> but you should use <code>IO.println</code>. <code>logInfo</code> needs <a href=\"https://github.com/leanprover/lean4/pull/1967\">lean4#1967</a> to work.</p>",
        "id": 352105934,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682273271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20Debug.20.20An.20Extension/near/352105784\">said</a>:</p>\n<blockquote>\n<p>I think because this is fairly low-level stuff, the only answer to 'how do I print x' is 'read code in Lean/mathlib4 that does something with x and figure out how to print it'. For example this prints the post-traversal discrimination tree (which might not be what you want):</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NormCast.Ext</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms</span> <span class=\"bp\">←</span> <span class=\"n\">Std.Tactic.NormCast.normCastExt.squash.getTheorems</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">thms.post.format</span>\n  <span class=\"o\">:</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ok Thanks Wojciech!  The <code>.format</code> function was definitely helpful in combination with everything else you've said, and I've been able to print out and understand the data to my satisfaction!</p>",
        "id": 352323432,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682352612
    }
]