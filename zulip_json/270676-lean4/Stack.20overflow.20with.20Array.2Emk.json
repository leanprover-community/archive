[
    {
        "content": "<p>Hello all;</p>\n<p>I am testing Lean's capacity for memory allocation, and ran into the following problem (mwe follows):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OnesList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">OnesArr</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mk</span> <span class=\"n\">OnesList</span>\n<span class=\"kd\">def</span> <span class=\"n\">One</span> <span class=\"o\">:=</span> <span class=\"n\">OnesArr</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">?</span>\n\n<span class=\"c1\">-- main file</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {One}!\"</span>\n</code></pre></div>\n<p>Compiling this with <code>lake build</code> and running produces:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt;<span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Performance\n<span class=\"o\">[</span><span class=\"m\">1</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Performance\n<span class=\"o\">[</span><span class=\"m\">1</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Main\n<span class=\"o\">[</span><span class=\"m\">2</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Main\n<span class=\"o\">[</span><span class=\"m\">4</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>performance\n\nStack<span class=\"w\"> </span>overflow<span class=\"w\"> </span>detected.<span class=\"w\"> </span>Aborting.\n<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span><span class=\"w\">    </span><span class=\"m\">168414</span><span class=\"w\"> </span>IOT<span class=\"w\"> </span>instruction<span class=\"w\"> </span><span class=\"o\">(</span>core<span class=\"w\"> </span>dumped<span class=\"o\">)</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"m\">2</span>.23s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">12</span>.17s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">56</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">25</span>.583<span class=\"w\"> </span>total\n</code></pre></div>\n<p>I expected an overflow for the <code>List</code> type, but not when making the array; constructing the list and accessing some elements directly is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Performance\n<span class=\"o\">[</span><span class=\"m\">1</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Performance\n<span class=\"o\">[</span><span class=\"m\">1</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Main\n<span class=\"o\">[</span><span class=\"m\">4</span>/4<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>performance\nHello,<span class=\"w\"> </span>world!\nHello,<span class=\"w\"> </span><span class=\"o\">(</span>some<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">)</span>!\n<span class=\"o\">(</span><span class=\"w\"> </span>./build/bin/performance<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"m\">2</span>.50s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">4</span>.78s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">95</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">7</span>.627<span class=\"w\"> </span>total\n</code></pre></div>\n<p>So I have a couple of questions:</p>\n<ol>\n<li>\n<p>Why does making the array from the list cause an overflow?  Is this expected?</p>\n</li>\n<li>\n<p>If we want to allocate and initiate large arrays, and producing them from lists overflows, what is the standard way to do it?  Do we need to push or repeatedly self-append manually, or is there an optimized function?</p>\n</li>\n</ol>\n<p>Thanks for your time!</p>",
        "id": 377778399,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690104062
    },
    {
        "content": "<p>Addendum: my lean version is <code>Lean (version 4.0.0-nightly-2023-07-22, commit 544b704a2589, Release)</code>.</p>",
        "id": 377779220,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690104272
    },
    {
        "content": "<p>For this specific case there is <code>Array.mkArray</code>, which is equivalent to <code>mk</code> + <code>List.replicate</code> but is implemented in C.</p>",
        "id": 377779582,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1690104363
    },
    {
        "content": "<p>Also, your examples aren't that helpful, as you haven't shown us the code for both runs.</p>",
        "id": 377779736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690104395
    },
    {
        "content": "<p>If you're trying to do large scale things, it seems strange to <em>start</em> with <code>List</code>, rather than just directly working with <code>Array</code>.</p>",
        "id": 377779851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690104427
    },
    {
        "content": "<p>Right, but since there does not seem to be any documentation for <code>Array</code> pointing to the right constructors vs wrong constructors, I am just experimenting and asking here.  Is there a better workflow?  Also, I am not sure what you mean, the code is right there, there is no other code.</p>",
        "id": 377780271,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690104539
    },
    {
        "content": "<p>Oh, I see, I forgot to paste the non-array part.</p>",
        "id": 377780401,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690104580
    },
    {
        "content": "<p>Here is the code for the second compilation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OnesList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">1000</span><span class=\"bp\">*</span><span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">One</span> <span class=\"o\">:=</span> <span class=\"n\">OnesList</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">?</span>\n\n<span class=\"c1\">-- main file</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {One}!\"</span>\n</code></pre></div>",
        "id": 377780610,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690104633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587706\">Daniil Kisel</span> <a href=\"#narrow/stream/270676-lean4/topic/Stack.20overflow.20with.20Array.2Emk/near/377779582\">said</a>:</p>\n<blockquote>\n<p>For this specific case there is <code>Array.mkArray</code>, which is equivalent to <code>mk</code> + <code>List.replicate</code> but is implemented in C.</p>\n</blockquote>\n<p>Thank you!  Is there a corresponding function for <code>List.iota</code> which creates an array of consecutive integers?</p>",
        "id": 377781537,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1690104910
    },
    {
        "content": "<p>Not that I know of.</p>",
        "id": 377786748,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1690106240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Stack.20overflow.20with.20Array.2Emk/near/377781537\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"587706\">Daniil Kisel</span> <a href=\"#narrow/stream/270676-lean4/topic/Stack.20overflow.20with.20Array.2Emk/near/377779582\">said</a>:</p>\n<blockquote>\n<p>For this specific case there is <code>Array.mkArray</code>, which is equivalent to <code>mk</code> + <code>List.replicate</code> but is implemented in C.</p>\n</blockquote>\n<p>Thank you!  Is there a corresponding function for <code>List.iota</code> which creates an array of consecutive integers?</p>\n</blockquote>\n<p>There isn't, but you can construct one yourself. Since the array will be modified in-place, you should still get pretty good performance out of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IotaArr</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">size</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"n\">i</span>\n  <span class=\"n\">arr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">IotaArr</span> <span class=\"mi\">10000000</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {arr[10000]!}!\"</span>\n</code></pre></div>",
        "id": 377790661,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1690107180
    },
    {
        "content": "<p>No need to pre-initialize the array, you can use <code>mkEmpty</code> with a given capacity + <code>push</code></p>",
        "id": 377796822,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690108835
    },
    {
        "content": "<p>Fixed <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 377797510,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1690109004
    }
]