[
    {
        "content": "<p>This is a follow-up post from <a href=\"https://github.com/leanprover-community/mathlib4/pull/7572\">#7572</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/7309\">#7309</a>: it seems <code>where</code> sometimes requires fields to be specified even though they are optional in the structure declaration. Specifically, <code>OrderedCommSemiring.mul_le_mul_of_nonneg_right</code> gets a default value in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7572\">#7572</a> but <code>StarOrderedRing.toOrderedCommSemiring</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7309\">#7309</a> requires <code>mul_le_mul_of_nonneg_right</code> to still be specified.</p>\n<p>However, my toy example succeeds without a problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myFoo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span> <span class=\"c1\">-- fields missing: 'foo'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myBar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>What is going on here?</p>",
        "id": 398094502,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698070359
    },
    {
        "content": "<p>(strictly speaking I don't think this is actually an <code>optParam</code>)</p>",
        "id": 398105206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698073406
    },
    {
        "content": "<p>I would guess this is caused by an interaction with multiple (dependent?) inheritance</p>",
        "id": 398105378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698073448
    },
    {
        "content": "<p>I am guessing that in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7309\">#7309</a> since <code>mul_le_mul_of_nonneg_left</code> is getting defined at the same time, Lean cannot find it</p>",
        "id": 398124546,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698080132
    },
    {
        "content": "<p>I was wrong. Lean is unhappy about the change in parent from <code>OrderedSemiring</code> to <code>OrderedCommSemiring</code>. If you use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">OrderedCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">OrderedSemiring</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>then you can delete the <code>mul_comm</code> and the <code>mul_le_mul_of_nonneg_right</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/7883\">#7883</a></p>",
        "id": 398179670,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698109960
    }
]