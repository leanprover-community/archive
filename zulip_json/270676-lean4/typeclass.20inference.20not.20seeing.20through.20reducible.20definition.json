[
    {
        "content": "<p>In Lean 3 this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kd\">universes</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">w</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Category</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">v‚ÇÇ</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Functor'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">‚•§</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"o\">:=</span> <span class=\"n\">Functor'</span>       <span class=\"c1\">-- type as \\func --</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functor.id</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"mi\">ùü≠</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Functor.id</span> <span class=\"c1\">-- Type this as `\\sb1`</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ConcreteCategory</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Forget</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ConcreteCategory.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ConcreteCategory.Forget</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ConcreteCategory.types</span> <span class=\"o\">:</span> <span class=\"n\">ConcreteCategory</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Forget</span> <span class=\"o\">:=</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">idReflectsLimits</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">idReflectsLimits</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>In particular typeclass inference can solve <code>ReflectsLimits (forget (Type u)) </code> (and does, in mathlib). The analogous Lean 4 code doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 4</span>\n<span class=\"kd\">universe</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Category</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Functor'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" ‚•§ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Functor'</span> <span class=\"c1\">-- type as \\func</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functor.id</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ùü≠\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Functor.id</span> <span class=\"c1\">-- Type this as `\\sb1`</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ConcreteCategory</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- We have a functor to Type -/</span>\n  <span class=\"n\">Forget</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ConcreteCategory.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ConcreteCategory.Forget</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ConcreteCategory.types</span> <span class=\"o\">:</span> <span class=\"n\">ConcreteCategory</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Forget</span> <span class=\"o\">:=</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">idReflectsLimits</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">idReflectsLimits</span> <span class=\"c1\">-- works</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Is there some way I can make things more <code>[reducible]</code> or something, in order to get this to work? The point is that <code>forget (Type u)</code> is defeq to <code>ùü≠ _</code> and forget is <code>reducible</code>, but it's not enough in Lean 4. If I can't get this working somehow then I'm going to have to add a bunch of instances to some file in the port to work around this, which is certainly a solution but it's kind of a last resort.</p>",
        "id": 356130343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683308971
    },
    {
        "content": "<p>Adding <code>reducible</code> to literally everything in this file doesn't seem to work. So I guess the answer is no, it's not possible?</p>",
        "id": 356133486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683309864
    },
    {
        "content": "<p>Maybe there's some unification hint that would make this work? Let me try</p>",
        "id": 356133696,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683309925
    },
    {
        "content": "<p>oops: <a href=\"https://leanprover.github.io/lean4/doc/unifhint.html?highlight=hint#unification-hints\">https://leanprover.github.io/lean4/doc/unifhint.html?highlight=hint#unification-hints</a></p>",
        "id": 356134978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683310306
    },
    {
        "content": "<p>I realized I don't actually know how to make unification hints :(</p>",
        "id": 356135092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683310328
    },
    {
        "content": "<p>Maybe it's just the same as in Lean 3! Did you know how to do it in Lean 3? (I certainly didn't...)</p>",
        "id": 356135334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683310412
    },
    {
        "content": "<p>No, I didn't <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 356135502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683310456
    },
    {
        "content": "<p>Okay, I don't have time to try to figure out how (or if) unification hints can help here. But I think it would be very interesting to see whether they do actually solve this issue! Hopefully someone who knows what they're doing with unification hints can help?</p>",
        "id": 356145607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683313518
    },
    {
        "content": "<p>Here's how they work <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"**\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.mul</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- #check (3 : Nat) ** (3 : Nat) -- fails</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.Magma</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">unif_hint</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">S</span> <span class=\"bp\">‚âü</span> <span class=\"n\">Nat.Magma</span> <span class=\"bp\">‚ä¢</span> <span class=\"n\">S.Œ±</span> <span class=\"bp\">‚âü</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">**</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 356673869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683545737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20inference.20not.20seeing.20through.20reducible.20definition/near/356135334\">said</a>:</p>\n<blockquote>\n<p>Maybe it's just the same as in Lean 3! Did you know how to do it in Lean 3? (I certainly didn't...)</p>\n</blockquote>\n<p>I think in Lean3 they only worked in <code>Type 0</code></p>",
        "id": 356680478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683547117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/typeclass.20inference.20not.20seeing.20through.20reducible.20definition/near/356133486\">said</a>:</p>\n<blockquote>\n<p>Adding <code>reducible</code> to literally everything in this file doesn't seem to work. So I guess the answer is no, it's not possible?</p>\n</blockquote>\n<p><code>attribute [reducible] ConcreteCategory.Forget ConcreteCategory.types</code> works</p>",
        "id": 356681120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683547257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I think for your example to make sense, you should move the failing #check <em>below</em> <code>def Nat.Magma</code>!</p>",
        "id": 356689171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683549209
    },
    {
        "content": "<p>Do you have a good heuristic for remembering in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unif_hint</span> <span class=\"n\">where</span>\n  <span class=\"n\">W</span> <span class=\"bp\">‚âü</span> <span class=\"n\">X</span> <span class=\"bp\">‚ä¢</span> <span class=\"n\">Y</span> <span class=\"bp\">‚âü</span> <span class=\"n\">Z</span>\n</code></pre></div>\n<p>the respective roles of <code>W X Y Z</code>? It seems from your example that one should read this as \"if you are trying to match Z with Y, instead try match X with W\", which is disconcertingly right-to-left! :-)</p>",
        "id": 356689975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683549403
    },
    {
        "content": "<p>Moving the check to just after Nat.magma doesn't make it work, fortunately :-) It seems that it's possible to swap Y,Z and also X,W. I'm just putting together the very little stuff that  other people have written about unification hints, I have no more understanding of what's going on than you.</p>",
        "id": 356690911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683549617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> that‚Äôs the sort of example I actually did figure out :) Leo mentioned this example (and related ones) in his ICERM talk, for example. But I still couldn‚Äôt figure out how to make progress with the <code>ReflectLimits</code> issue above unification hints. Could you find some way to make that work?</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I thought I tied that as well, but maybe I‚Äôm misremembering. In any case, it‚Äôs not clear to me whether tagging things as reducible is the right approach in this case.</p>",
        "id": 356717083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683554231
    },
    {
        "content": "<p>I think it's sensible to make defs that resolve to types reducible</p>",
        "id": 356717262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683554265
    },
    {
        "content": "<p>In lean3 we got away with not doing so because TC search would (sometimes) ignore reducibility and reduce things anyway</p>",
        "id": 356717505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683554307
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3857\">!4#3857</a></p>",
        "id": 356821175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683582974
    }
]