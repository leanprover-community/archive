[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20Toolchain.20much.20bigger.20than.20lean3/near/379322911\">said</a>:</p>\n<blockquote>\n<p>This subjective feeling is mostly wrong. We've stopped running the comparison bot against mathlib3, but there was overall about a 1.8x wallclock speedup compiling mathlib4 vs mathlib3 (and a 3.3x speedup in CPU time).</p>\n</blockquote>\n<p>The data shows Lean 4 is faster than Lean 3 for batch processing, but interactive processing could have very different numbers. I've noticed Lean 4 subjectively feeling less snappy compared to Lean 3, especially when I go back to Lean 3, where I get worried Lean must have crashed since some things update so quickly it feels like nothing's happened.</p>\n<p>I'm pretty sure a lot of the feeling of sluggishness is the delay between editing and the LSP updating the info view. It doesn't update until the entire file has finished processing, unlike Lean 3 where it was once the current command finished.</p>\n<p>When compiling mathlib, doesn't Lean 4 skip doing things like generating infotrees for the LSP? Has anyone measured the performance impact of things needed to support the editor?</p>",
        "id": 379379815,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690528199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20Toolchain.20much.20bigger.20than.20lean3/near/379379815\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure a lot of the feeling of sluggishness is the delay between editing and the LSP updating the info view. It doesn't update until the entire file has finished processing, unlike Lean 3 where it was once the current command finished.</p>\n</blockquote>\n<p>Oh, I hadn't even noticed this! That's not great.</p>",
        "id": 379381371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690528606
    },
    {
        "content": "<blockquote>\n<p>I'm pretty sure a lot of the feeling of sluggishness is the delay between editing and the LSP updating the info view. It doesn't update until the entire file has finished processing, unlike Lean 3 where it was once the current command finished.</p>\n</blockquote>\n<p>I find myself often writing <code>#exit</code> just below the code I'm working on precisely for this reason. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> has also flagged this -- they said something like \"I feel like Lean is hiding information from me\".</p>",
        "id": 379381693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690528700
    },
    {
        "content": "<p>I also sometimes write <code>#eval 0</code> <em>above</em> the <del>line</del>declaration that I am editing, to shield reprocessing the previous declaration.</p>",
        "id": 379394303,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690530978
    },
    {
        "content": "<p>Yes absolutely. This in my opinion is one of the biggest pains of using Lean 4. The typical scenario is that I'm fixing 50 errors in a file, and every time I jump to the next error from the infoview, except that my brain state updates faster than the infoview, so I end up trying to fix the same error several times.</p>",
        "id": 379394888,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690531070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20Toolchain.20much.20bigger.20than.20lean3/near/379379815\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure a lot of the feeling of sluggishness is the delay between editing and the LSP updating the info view. It doesn't update until the entire file has finished processing, unlike Lean 3 where it was once the current command finished.</p>\n</blockquote>\n<p>Uh, which scenario are we talking about exactly? Because I'm editing the very first proof in Kaehler (in VS Code!) and seeing updates just fine</p>",
        "id": 379395470,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690531148
    },
    {
        "content": "<p>Or alternatively I'm fixing an error, and the fix creates an error downstream, but the infoview won't tell me what it is until Lean has recompiled the whole damn file.</p>",
        "id": 379395473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690531149
    },
    {
        "content": "<p>I also can't reproduce (the info view not updating until the entire file has finished).</p>",
        "id": 379398881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690531660
    },
    {
        "content": "<p>I can definitely reproduce. This is indeed very unpleasant.</p>",
        "id": 379399559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690531764
    },
    {
        "content": "<p>Sebastian, are you testing with VSCode?</p>",
        "id": 379399670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690531785
    },
    {
        "content": "<p>Yes, I made sure to say so :) <br>\n<a href=\"/user_uploads/3121/5_3W4-BkckQ4FvwXwVVKe3oa/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5_3W4-BkckQ4FvwXwVVKe3oa/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5_3W4-BkckQ4FvwXwVVKe3oa/image.png\"></a></div>",
        "id": 379400290,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690531879
    },
    {
        "content": "<p>Sorry, I read too quickly.</p>",
        "id": 379400674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690531932
    },
    {
        "content": "<p>In case it's not clear from the screenshot, I commented out <code>h₂</code> on line 77 of Kaehler</p>",
        "id": 379400873,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690531963
    },
    {
        "content": "<p>Which updated both the goal view and flagged the error in the next line</p>",
        "id": 379401149,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690532008
    },
    {
        "content": "<p>This is extremely weird. Redoing the exact same experiment here also works, but I can swear this is very unusual.</p>",
        "id": 379405767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690532658
    },
    {
        "content": "<p>I can however confirm that the \"All Messages\" list does not update until the end. This could be a regression from enabling widgets, I have never seen that happen in Emacs</p>",
        "id": 379406405,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690532763
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/2367\">lean4#2367</a></p>",
        "id": 379412531,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690534038
    },
    {
        "content": "<p>Should be fixed <a href=\"https://github.com/leanprover/vscode-lean4/commit/65deda60f1e2fee242335b8276fc837014c07a11\">here</a>. I didn't test it very much so testing would be appreciated! You can either impatiently build the extension or wait for the next release.</p>",
        "id": 379615199,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690572175
    },
    {
        "content": "<p>18 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Lean.204.20Toolchain.20much.20bigger.20than.20lean3\">#lean4 &gt; Lean 4 Toolchain much bigger than lean3</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 379618879,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690573105
    },
    {
        "content": "<p>FWIW, I don't think I've ever experienced this delay.</p>",
        "id": 379619391,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690573264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Info.20view.20delay/near/379379815\">said</a>:</p>\n<blockquote>\n<p>When compiling mathlib, doesn't Lean 4 skip doing things like generating infotrees for the LSP?</p>\n</blockquote>\n<p>It doesn't (as the info trees are used to generate the .ilean files), and there is no significant overhead last we measured. In the end the number of info nodes is roughly linear to the size of the input while the all the bottlenecks usually are in the parts that are <em>not</em> so.</p>",
        "id": 379619641,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690573339
    },
    {
        "content": "<p>Here's something which just happened to me and which I have always assumed was what Yael was talking about when they said \"Lean is hiding things from me\". This uses mathlib but I'm sure that someone who knows how to write a Lean function which just pauses for 5 seconds will be able to write a mathlib-free example. With this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.GroupCohomology.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">GroupCohomology</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">InhomogeneousCochains</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Preadditive.homGroup</span>\n    <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">HomologicalComplex.X</span> <span class=\"o\">(</span><span class=\"n\">GroupCohomology.resolution</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Preadditive.homGroup</span> <span class=\"o\">(</span><span class=\"n\">Rep.ofMulAction</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.of</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Rep.ofMulAction</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">HomologicalComplex.X</span> <span class=\"o\">(</span><span class=\"n\">GroupCohomology.linearYonedaObjResolution</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I'm asking Lean to provide two traces. Both examples take 5-10 seconds on my machine. When the first one has finished compiling I get a blue underline saying to me \"woohoo, I have computed your trace\", but I can't seem to see any output (neither the trace, nor the goal state if I put my cursor before the <code>rfl</code>) until the second example has finished computing, when suddenly everything appears as normal. <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> do you experience this? For me the weird thing is that the first example has clearly 100% finished computing, but I can't see any information about it until the second example is also done.</p>",
        "id": 379850978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690649870
    },
    {
        "content": "<p>I won't be able to test this for ~10 hours. I'll update when I do.</p>",
        "id": 379851325,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690649982
    },
    {
        "content": "<p>hopefully you'll test it before I fix the slowness :-)</p>",
        "id": 379851679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690650090
    },
    {
        "content": "<p>I confirm this (except it's slower on my machine, and the second rfl fails, but maybe I'm not on master).</p>",
        "id": 379851873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690650148
    },
    {
        "content": "<p>Did you overflow the buffer?</p>",
        "id": 379852001,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690650196
    },
    {
        "content": "<p>Oh I have a bunch of local changes -- maybe just set maxHeartbeats to 0?</p>",
        "id": 379852881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690650459
    },
    {
        "content": "<p>Mathlib-free: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">sleep</span> <span class=\"mi\">5000</span>\n  <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">sleep</span> <span class=\"mi\">5000</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and I see the same behaviour</p>",
        "id": 379854369,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690650940
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">010017</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">sleep</span> <span class=\"mi\">5000</span>\n      <span class=\"n\">rfl</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">009816</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">sleep</span> <span class=\"mi\">5000</span>\n        <span class=\"n\">rfl</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">006643</span><span class=\"n\">s</span><span class=\"o\">]</span>\n          <span class=\"n\">sleep</span> <span class=\"mi\">5000</span>\n          <span class=\"n\">rfl</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">006573</span><span class=\"n\">s</span><span class=\"o\">]</span>\n            <span class=\"n\">sleep</span> <span class=\"mi\">5000</span>\n            <span class=\"n\">rfl</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">005185</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">sleep</span> <span class=\"mi\">5000</span>\n</code></pre></div>\n<p>is what I see (in nvim)</p>",
        "id": 379854890,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690651106
    },
    {
        "content": "<p>But when do you see it? (I can reproduce the above complaint in nvim too)</p>",
        "id": 379855260,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690651236
    },
    {
        "content": "<p>In VS Code you do not see that information on the first example until after the second example has compiled. Is this not the case in nvim? If you change first sleep to 1000 and the second to 30000 for example, can you see the first trace after 1 seconds or only after 31 seconds? For me with the 1000,30000 situation you can't interact with the first example at all for 30 seconds even though it's compiled after 1.</p>",
        "id": 379855422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690651296
    },
    {
        "content": "<p>Yes, I do not get the first trace until it finishes processing the file.</p>",
        "id": 379856704,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690651729
    },
    {
        "content": "<p>And that's why I freqently put <code>#exit</code> just after the declaration I'm working on (to work around this sort of thing).</p>",
        "id": 379856937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690651811
    },
    {
        "content": "<p>My standard workaround for this is to place an <code>#eval 0</code> in-between the two.  Thus, what gets delayed is Lean showing me <code>0</code>, rather than the previous output...  Not great, but it works!</p>",
        "id": 379857156,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690651894
    },
    {
        "content": "<p>Wait so the issue with the infoview is that it doesn't update until the <em>next</em> declaration is done processing? That would explain why it happens so inconsistently.</p>",
        "id": 379861997,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1690653559
    },
    {
        "content": "<p>that does seem to be the case -- for me, if you do 3 copies of the example it updates the first infoview after the second (but before the third) declaration processes</p>",
        "id": 379869248,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1690656054
    },
    {
        "content": "<p>Thanks for getting to the bottom of this, fixed in <a href=\"https://github.com/leanprover/lean4/pull/2370\">lean4#2370</a></p>",
        "id": 379881262,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690660809
    },
    {
        "content": "<p>This fix will arrive in Mathlib in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6247\">#6247</a> (it looks like it builds cleanly, so if someone could delegate or merge that would be great).</p>",
        "id": 379986178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690712325
    },
    {
        "content": "<p>Oh wow! Many thanks for the speedy bump Scott!</p>",
        "id": 379987676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690712689
    }
]