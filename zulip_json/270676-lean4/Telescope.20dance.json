[
    {
        "content": "<p>I'm returning to porting Verbose Lean. The last big missing piece compared to the Lean 3 version is the help tactic. It relies on a custom version of <code>Expr</code> where bounded quantifiers are first-class citizen. Of course it requires a parser turning regular <code>Expr</code> into this custom type. This requires juggling with bvar vs fvar. In Lean 3 this was the <code>tactic.mk_local'</code>/<code>expr.instantiate_var</code> dance. My understanding is that <code>forallTelescope</code> is meant to replace this but I had no luck. The custom expression type, a conversion to string and the beginning of the parser can be found below. The example does show a free variable instead of a loose bvar but it doesn't get pretty printed so I guess the context is still off.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forall_rel</span> <span class=\"o\">(</span><span class=\"n\">var_Name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_rhs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forall_simple</span> <span class=\"o\">(</span><span class=\"n\">var_Name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">exist_rel</span> <span class=\"o\">(</span><span class=\"n\">var_Name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_rhs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">exist_simple</span> <span class=\"o\">(</span><span class=\"n\">var_Name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">conjunction</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"n\">propo'</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">disjunction</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"n\">propo'</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">iff</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">equal</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">ineq</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">symb</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">data</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">forall_rel</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">rel</span> <span class=\"n\">rel_rhs</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">rel_rhs</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">propo.toStr</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∀ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.toString</span> <span class=\"bp\">++</span> <span class=\"n\">rel</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">forall_simple</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">propo.toStr</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∀ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exist_rel</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">rel</span> <span class=\"n\">rel_rhs</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">rel_rhs</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∃ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.toString</span> <span class=\"bp\">++</span> <span class=\"n\">rel</span> <span class=\"bp\">++</span> <span class=\"n\">rhs</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exist_simple</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∃ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">conjunction</span> <span class=\"n\">propo</span> <span class=\"n\">propo'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo</span>\n    <span class=\"k\">let</span> <span class=\"n\">p'</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo'</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">p</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ∧ \"</span> <span class=\"bp\">++</span> <span class=\"n\">p'</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">disjunction</span> <span class=\"n\">propo</span> <span class=\"n\">propo'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo</span>\n    <span class=\"k\">let</span> <span class=\"n\">p'</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo'</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">p</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ∨ \"</span> <span class=\"bp\">++</span> <span class=\"n\">p'</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" → \"</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">iff</span> <span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ↔ \"</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">equal</span> <span class=\"n\">le</span> <span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">le</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">re</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" = \"</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ineq</span> <span class=\"n\">le</span> <span class=\"n\">symb</span> <span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">le</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">re</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">symb</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">mkForallFVars</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">MyExpr</span>\n <span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.forallE</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">bi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n   <span class=\"n\">forallTelescope</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n     <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Types of xs: {← xs.mapM (fun x ↦ do ppExpr (← inferType x))}\"</span>\n     <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"xs: {xs}\"</span>\n     <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"pretty xs {← xs.mapM ppExpr}\"</span>\n     <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Pretty A: {← ppExpr A}\"</span>\n     <span class=\"k\">match</span> <span class=\"n\">xs.toList</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n     <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">MyExpr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]))</span>\n     <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">hx</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n       <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"more\"</span> <span class=\"bp\">;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"\"</span>\n\n\n <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">isProp</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">prop</span> <span class=\"n\">e</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">e</span>\n\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Parse output: {← p.toStr}\"</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Parse output: {repr p}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n  <span class=\"c1\">--test ∀ n &gt; 0, P n</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 406843143,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702072025
    },
    {
        "content": "<p>The corresponding Lean 3 code was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">var</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_local'</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">expr.instantiate_var</span> <span class=\"n\">b</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n'</span> <span class=\"n\">bi'</span> <span class=\"n\">t'</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">symbole</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">rel_symb</span> <span class=\"n\">t'</span><span class=\"o\">,</span>\n           <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">x.local_pp_name</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span>\n             <span class=\"n\">var'</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_local'</span> <span class=\"n\">n'</span> <span class=\"n\">bi'</span> <span class=\"n\">t'</span><span class=\"o\">,</span>\n           <span class=\"n\">my_expr.forall_rel</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">symbole</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">expr.instantiate_var</span> <span class=\"n\">b'</span> <span class=\"n\">var'</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n           <span class=\"n\">body</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n           <span class=\"k\">if</span> <span class=\"n\">e.is_arrow</span> <span class=\"k\">then</span>\n              <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">t</span> <span class=\"n\">e'</span> <span class=\"n\">typ</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n           <span class=\"k\">else</span>\n             <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">my_expr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">body</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n           <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n           <span class=\"n\">body</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n            <span class=\"k\">if</span> <span class=\"n\">e.is_arrow</span> <span class=\"k\">then</span>\n              <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">t</span> <span class=\"n\">e'</span> <span class=\"n\">typ</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">expr.instantiate_var</span> <span class=\"n\">b</span> <span class=\"n\">var</span><span class=\"o\">)</span>\n    <span class=\"kd\">end</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists</span> <span class=\"bp\">%%</span><span class=\"n\">α</span> <span class=\"bp\">%%</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists</span> <span class=\"bp\">%%</span><span class=\"n\">α'</span> <span class=\"bp\">%%</span><span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">p.binding_body</span><span class=\"o\">,</span>\n    <span class=\"n\">var</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_local'</span> <span class=\"n\">p.binding_name</span> <span class=\"n\">p.binding_info</span> <span class=\"n\">p.binding_domain</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">symbole</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">rel_symb</span> <span class=\"n\">α'.binding_body</span><span class=\"o\">,</span>\n    <span class=\"n\">exist_rel</span> <span class=\"n\">p.binding_name</span> <span class=\"n\">α</span> <span class=\"n\">symbole</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">expr.instantiate_var</span> <span class=\"n\">p'</span> <span class=\"n\">var</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">binding_body</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"n\">var</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_local'</span> <span class=\"n\">p.binding_name</span> <span class=\"n\">p.binding_info</span> <span class=\"n\">p.binding_domain</span><span class=\"o\">,</span>\n    <span class=\"n\">exist_simple</span> <span class=\"n\">p.binding_name</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">expr.instantiate_var</span> <span class=\"n\">p.binding_body</span> <span class=\"n\">var</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">%%</span><span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">p'</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">conjunction</span> <span class=\"n\">p</span> <span class=\"n\">p'</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">%%</span><span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">p'</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">disjunction</span> <span class=\"n\">p</span> <span class=\"n\">p'</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">iff</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">%%</span><span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">p'</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">ssi</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"n\">p</span> <span class=\"n\">p'</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">%%</span><span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">egal</span> <span class=\"n\">e</span> <span class=\"n\">e'</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">ineq</span> <span class=\"n\">x</span> <span class=\"s2\">\" &lt; \"</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">ineq</span> <span class=\"n\">x</span> <span class=\"s2\">\" ≤ \"</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">ineq</span> <span class=\"n\">x</span> <span class=\"s2\">\" &gt; \"</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">ineq</span> <span class=\"n\">x</span> <span class=\"s2\">\" ≥ \"</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.delta</span> <span class=\"n\">unfold_defs</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n            <span class=\"n\">tactic.trace</span>  <span class=\"s2\">\"Remarque : La commande\"</span><span class=\"o\">,</span>\n            <span class=\"n\">tactic.trace</span>  <span class=\"s2\">\" On déplie nom,\"</span><span class=\"o\">,</span>\n            <span class=\"n\">tactic.trace</span>  <span class=\"s2\">\"ou\"</span><span class=\"o\">,</span>\n            <span class=\"n\">tactic.trace</span>  <span class=\"s2\">\" On déplie nom dans hyp,\"</span><span class=\"o\">,</span>\n            <span class=\"n\">tactic.trace</span>  <span class=\"s2\">\"permet de déplier la définition nom dans le but ou dans une hypothèse hyp.\"</span><span class=\"o\">,</span>\n            <span class=\"n\">tactic.trace</span>  <span class=\"s2\">\"\"</span><span class=\"o\">,</span>\n            <span class=\"n\">parse</span> <span class=\"n\">e'</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n       <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">prop</span> <span class=\"n\">e</span> <span class=\"k\">else</span> <span class=\"n\">data</span> <span class=\"n\">e</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406844217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702072529
    },
    {
        "content": "<p>I think your context might be off because <code>forallTelescope</code> deletes the fvars it creates after the call completes. From the metaprogramming book:</p>\n<blockquote>\n<p>Given <code>type = ∀ (x₁ : T₁) ... (xₙ : Tₙ), U x₁ ... xₙ</code>, this function creates one fvar <code>fᵢ</code> for each <code>∀</code>-bound variable <code>xᵢ</code> and replaces each <code>xᵢ</code> with <code>fᵢ</code> in the conclusion <code>U</code>. It then calls the computation <code>k</code>, passing it the <code>fᵢ</code> and the conclusion <code>U f₁ ... fₙ</code>. <strong>Within this computation, the <code>fᵢ</code> are registered in the local context; afterwards, they are deleted again (similar to <code>withLocalDecl</code>).</strong></p>\n</blockquote>\n<p>I'm not sure if this is the solution you want, but:</p>\n<blockquote>\n<p><code>forallMetaTelescope</code> behaves like the corresponding non-meta function, but the bound variables are replaced by new <code>mvars</code> instead of <code>fvars</code>. <strong>Unlike the non-meta functions, the meta functions do not delete the new metavariables after performing some computation, so the metavariables remain in the environment indefinitely.</strong></p>\n</blockquote>",
        "id": 406848002,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1702074358
    },
    {
        "content": "<p>I'm not sure I want mvars instead. I don't know what I did. I never fully understood what Lean 3 was doing here, this was cargo-cult code.</p>",
        "id": 406848832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702074779
    },
    {
        "content": "<p>What's the motivation behind instantiating the body of the forall with an fvar? Do you essentially just want to <code>MyExpr.toStr</code> to print the bvar using its name?</p>",
        "id": 406853711,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702077671
    },
    {
        "content": "<p>Also, do you do anything specifically different with <code>toStr</code>, or do you just try to emulate normal delaboration? If the latter, why not simply turn <code>MyExpr</code> back into an <code>Expr</code> and let delaboration handle it normally (and use <code>pp*</code>/format utilities if you need a string)?</p>",
        "id": 406855450,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702078470
    },
    {
        "content": "<p>(If you do do something different, it might still be worth just making a custom delaborator instead of recreating the bvar-pretty-printing code—or possibly creating your own syntax categories and going from <code>MyExpr</code> to <code>Syntax</code> instead)</p>",
        "id": 406855563,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702078548
    },
    {
        "content": "<p>I do various things with the MyExpr, this is not simply trying to find a complicated way to pretty-print an expression.  It doesn't seem extravagant to want that, and it was easy in Lean 3.</p>",
        "id": 406869999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702086834
    },
    {
        "content": "<p>Oh, okay—I'm still confused as to why you want fvars in the body of a forall. Shouldn't they still be bvars?</p>",
        "id": 406870096,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702086896
    },
    {
        "content": "<p>I want to have access to their user name</p>",
        "id": 406870135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702086925
    },
    {
        "content": "<p>I can't help but feel that access to that name should occur inside a <code>forallSimpleTelescope</code> or some such which behaves like <code>forallTelescope</code>—otherwise you've got fvars in the local context for variables which are actually bound</p>",
        "id": 406870302,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702087031
    },
    {
        "content": "<p>Does anyone understand precisely what Lean 3 was doing there? Because whatever it did was good enough for me.</p>",
        "id": 406870968,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702087339
    },
    {
        "content": "<p>Just a first thing, rather than <code>forallTelescope</code>, the idiomatic thing seems to be to use <code>withLocalDecl</code>, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">|</span> <span class=\"n\">Expr.forallE</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">bi</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withLocalDecl</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">t</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"n\">MyExpr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><code>forallTelescope</code> can give you too much if there are nested foralls.</p>",
        "id": 406873111,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702088644
    },
    {
        "content": "<p>The next thing is that I think local context handling works different in Lean 4, where it's using a reader monad rather than a state monad, so you can't add an fvar in a non-scoped way -- my understanding of the Lean 3 way was that you added a local variable and it stuck around. If you pass along a <code>LocalContext</code> yourself you should be able to circumvent this.</p>",
        "id": 406873222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702088746
    },
    {
        "content": "<p>You could also use continuation-passing style.</p>",
        "id": 406873289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702088773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Telescope.20dance/near/406873289\">said</a>:</p>\n<blockquote>\n<p>You could also use continuation-passing style.</p>\n</blockquote>\n<p>I have seen those words before but I have no idea what they mean.</p>",
        "id": 406873668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702089037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Telescope.20dance/near/406873111\">said</a>:</p>\n<blockquote>\n<p><code>forallTelescope</code> can give you too much if there are nested foralls.</p>\n</blockquote>\n<p>I want to see some nesting here, since I want to distinguish between <code>∀x, P x</code> and <code>∀ x &gt; 0, P x</code>. That's why the snippet was considering different cases depending on the length of <code>xs</code>. But it's clearly bounded, I don't need to support arbitrary nesting.</p>",
        "id": 406873910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702089205
    },
    {
        "content": "<p>You can match on different nestings of <code>.forallE</code> yourself, but I could see <code>forallTelescope</code> working too.  By the way, there's <code>forallBoundedTelescope</code> for limiting the nesting</p>",
        "id": 406874023,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089278
    },
    {
        "content": "<p>The small annoyance in the logic is handling <code>\\forall x, \\forall y, P x</code> too</p>",
        "id": 406874085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089329
    },
    {
        "content": "<p>Here, I just hacked together threading the context manually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forall_rel</span> <span class=\"o\">(</span><span class=\"n\">var_Name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_rhs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forall_simple</span> <span class=\"o\">(</span><span class=\"n\">var_Name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">exist_rel</span> <span class=\"o\">(</span><span class=\"n\">var_Name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_rhs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">exist_simple</span> <span class=\"o\">(</span><span class=\"n\">var_Name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">conjunction</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"n\">propo'</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">disjunction</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"n\">propo'</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">iff</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">equal</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">ineq</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">symb</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">data</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">forall_rel</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">rel</span> <span class=\"n\">rel_rhs</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">rel_rhs</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">propo.toStr</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∀ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.toString</span> <span class=\"bp\">++</span> <span class=\"n\">rel</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">forall_simple</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">propo.toStr</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∀ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exist_rel</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">rel</span> <span class=\"n\">rel_rhs</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">rel_rhs</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∃ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.toString</span> <span class=\"bp\">++</span> <span class=\"n\">rel</span> <span class=\"bp\">++</span> <span class=\"n\">rhs</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exist_simple</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∃ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">conjunction</span> <span class=\"n\">propo</span> <span class=\"n\">propo'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo</span>\n    <span class=\"k\">let</span> <span class=\"n\">p'</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo'</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">p</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ∧ \"</span> <span class=\"bp\">++</span> <span class=\"n\">p'</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">disjunction</span> <span class=\"n\">propo</span> <span class=\"n\">propo'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo</span>\n    <span class=\"k\">let</span> <span class=\"n\">p'</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">propo'</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">p</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ∨ \"</span> <span class=\"bp\">++</span> <span class=\"n\">p'</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" → \"</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">iff</span> <span class=\"n\">le</span> <span class=\"n\">re</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">MyExpr.toStr</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ↔ \"</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">equal</span> <span class=\"n\">le</span> <span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">le</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">re</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" = \"</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ineq</span> <span class=\"n\">le</span> <span class=\"n\">symb</span> <span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">le</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">re</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">symb</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">mkForallFVars</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">LocalContext</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">LocalContext</span> <span class=\"bp\">×</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"n\">Expr.forallE</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">bi</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshFVarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.mkLocalDecl</span> <span class=\"n\">fvarId</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">bi</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ctx'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fvarId</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ctx'</span><span class=\"o\">,</span> <span class=\"n\">MyExpr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withLCtx</span> <span class=\"n\">ctx</span> <span class=\"o\">{}</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">isProp</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">prop</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n  <span class=\"n\">withLCtx</span> <span class=\"n\">ctx</span> <span class=\"o\">{}</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"g = {g.mvarId!}\"</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Parse output: {← p.toStr}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n  <span class=\"c1\">--test ∀ n &gt; 0, P n</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 406874210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089387
    },
    {
        "content": "<p>It prints <code>Parse output: ∀ n, P n</code></p>",
        "id": 406874230,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089399
    },
    {
        "content": "<p>The main bug to watch out for is to not forget to do <code>withLCtx ctx {}</code> around things that need a type calculation, like <code>inferType</code></p>",
        "id": 406874327,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089453
    },
    {
        "content": "<p>(The <code>{}</code> is filling in the local instances. I'm assuming you don't need to track those for what you're doing?)</p>",
        "id": 406874364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089481
    },
    {
        "content": "<p>Here's with continuation-passing style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">MyExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MyExpr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.forallE</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">bi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">withLocalDecl</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">t</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">b'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">ret</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MyExpr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">isProp</span> <span class=\"k\">then</span>\n      <span class=\"n\">ret</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">prop</span> <span class=\"n\">e</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">ret</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">e</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">parse</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"g = {g.mvarId!}\"</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Parse output: {← p.toStr}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 406874848,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089778
    },
    {
        "content": "<p>Notice that <code>ret</code> gets called from within the context of the <code>withLocalDecl</code>, so the body of the function passed to <code>parse</code> in the <code>test</code> elaborator still has everything in context.</p>",
        "id": 406874895,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089820
    },
    {
        "content": "<p>I'm not sure I coded CPS completely right, since it's a little weird having to do <code>return p</code> at the end artificially</p>",
        "id": 406874975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702089852
    },
    {
        "content": "<p>I think the issue with <code>return p</code> is just that the type signature should be <code>def parse (e : Expr) (ret : MyExpr → MetaM α) : MetaM α</code></p>",
        "id": 406875185,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702089979
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.forallE</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">bi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">withLocalDecl</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">t</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">b'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">ret</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MyExpr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">isProp</span> <span class=\"k\">then</span>\n      <span class=\"n\">ret</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">prop</span> <span class=\"n\">e</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">ret</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"n\">e</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n  <span class=\"n\">parse</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"g = {g.mvarId!}\"</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Parse output: {← p.toStr}\"</span>\n</code></pre></div>",
        "id": 406875651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702090243
    },
    {
        "content": "<p>Thanks! I will try to understand all that tomorrow.</p>",
        "id": 406877362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702091358
    },
    {
        "content": "<p>One small potential refinement I can think of here is including the local decl's <code>fvar</code> as an argument to <code>forall_simple</code>, e.g. such that we can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">withLocalDecl</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">t</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">b'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">ret</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MyExpr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"n\">b'</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Otherwise, you might not be able to tell which fvar came from which binder (or from the broader context) if usernames happen to clash! :) But whether you'll actually need this depends on your specific application.</p>",
        "id": 406877634,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702091530
    },
    {
        "content": "<p>Update: I now want to generalize the signature <code>parse {α : Type} (e : Expr) (ret : MyExpr → MetaM α) : MetaM α</code> replacing both occurences of <code>MetaM α</code> by something more general. In the intended application <code>MetaM</code> is replaced by <code>SuggestionM</code> where <code>abbrev SuggestionM := StateRefT (Array SuggestionItem) MetaM</code>. I made it work using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MonadControlT</span> <span class=\"n\">MetaM</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">MetaM</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">MonadMCtx</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"o\">:</span> <span class=\"n\">MyExpr</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>obtained by adding instance arguments for every complain from Lean, and checking it works in the intended use case. But I feel I'm missing a magic word here.</p>",
        "id": 407592648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702425579
    },
    {
        "content": "<p>the last two instances are unnecessary</p>",
        "id": 407664190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702454274
    },
    {
        "content": "<p>but yes this is the general idea</p>",
        "id": 407664332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702454320
    },
    {
        "content": "<p>There is a function <code>map1MetaM</code> which is designed specifically for making these kind of functions, you may find it easier</p>",
        "id": 407664781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702454473
    },
    {
        "content": "<p>I missed those messages from last night. The last two instances are needed for me. The first one allows to use <code>unreachable!</code> and the second one is needed to use <code>instantiateMVars</code>.</p>",
        "id": 407790102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702493261
    },
    {
        "content": "<p>you can use <code>have : n α := ret default</code> before using <code>unreachable!</code> (or at the beginning or somewhere else convenient) to remove the first instance</p>",
        "id": 407790371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702493370
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instInhabitedMetaM#doc\">docs#instInhabitedMetaM</a> is not inherited using the other type classes.</p>",
        "id": 407790410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702493391
    },
    {
        "content": "<p>you can use <code>liftM instantiateMVars</code> for the second one</p>",
        "id": 407790412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702493391
    },
    {
        "content": "<p>The liftM trick works, but I can't get rid of Inhabited so far.</p>",
        "id": 407790942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702493578
    }
]