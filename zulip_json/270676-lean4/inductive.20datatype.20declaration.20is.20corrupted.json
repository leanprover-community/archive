[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Bad</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>Creates an error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(kernel) error in 'noConfusion' generation, 'Bad' inductive datatype declaration is corrupted\n</code></pre></div>\n<p>I'm using <code>leanprover/lean4:v4.0.0-rc4</code>.</p>",
        "id": 388380132,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1693505090
    },
    {
        "content": "<p>I think it is because when checking whether the sort of the inductive is correct, lean reduces <code>Set</code>, but when generating <code>noConfusion</code> it doesn't. Is this a bug?</p>",
        "id": 388380328,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1693505163
    },
    {
        "content": "<p><code>(kernel)</code> errors are always a bug</p>",
        "id": 388380429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693505195
    },
    {
        "content": "<p>I reported this issue <a href=\"#narrow/stream/270676-lean4/topic/Indexed.20Inductive/near/290684298\">a year ago</a>, and was told it was simply disallowed</p>",
        "id": 388381386,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1693505532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20datatype.20declaration.20is.20corrupted/near/388380429\">said</a>:</p>\n<blockquote>\n<p><code>(kernel)</code> errors are always a bug</p>\n</blockquote>\n<p>Some errors (like non-strict positivity) are meant to be reported by the kernel only though</p>",
        "id": 388381469,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1693505560
    },
    {
        "content": "<p>usually those errors are modeled by the frontend</p>",
        "id": 388381996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693505757
    },
    {
        "content": "<p>It's true that currently the kernel reports strict positivity errors, but you get low quality errors because of that</p>",
        "id": 388382214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693505850
    },
    {
        "content": "<p>normally you would expect some kind of highlight on the part of the definition that is wrong</p>",
        "id": 388382270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693505878
    },
    {
        "content": "<p>You should probably report this in an actual lean issue if you want to see progress on it</p>",
        "id": 388382490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693505971
    },
    {
        "content": "<p>I'm just the help desk :)</p>",
        "id": 388382508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693505982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20datatype.20declaration.20is.20corrupted/near/388382508\">said</a>:</p>\n<blockquote>\n<p>I'm just the help desk :)</p>\n</blockquote>\n<p>damn the  requirements for entry level positions keep rising</p>",
        "id": 388387714,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693508002
    },
    {
        "content": "<p>As it turns out, this issue is a one-line fix, you only have to replace <code>to_telescope(lctx,...)</code> by <code>to_telescope(env,lctx,...)</code> <a href=\"https://github.com/leanprover/lean4/blob/fec3575aaf6e41fb8c739e0e87280c0cba8f9c96/src/library/constructions/no_confusion.cpp#L42\">here</a>. I've made an issue for it. Should I also make a PR ? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if so, I saw that PRs now needed the approval of a developer to be filed as anything but a draft, is your approval enough for such matters, or should I ask someone else ?</p>",
        "id": 388403127,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1693514608
    },
    {
        "content": "<p>I think it needs an RFC because it's resolving the issue by making the noConfusion implementation more permissive rather than making the inductive validity checker less permissive</p>",
        "id": 388410663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693518379
    },
    {
        "content": "<p>I don't think I count as a developer for the purpose of the PR approval process</p>",
        "id": 388410727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693518417
    },
    {
        "content": "<p>I believe that this was an unintended bug, and not a missing feature. If everything else regarding the checking of inductive types works, there is no real reason as to why someone would want to restrict <code>noConfusion</code> and nothing else in that regards. The error message also shows that this sort of error isn't supposed to be thrown, since it calls the inductive \"corrupted\". But I'll make it an RFC just to get a confirmation, thanks for your help.</p>",
        "id": 388419986,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1693523991
    },
    {
        "content": "<blockquote>\n<p>The error message also shows that this sort of error isn't supposed to be thrown, since it calls the inductive \"corrupted\".</p>\n</blockquote>\n<p>Well, you could also interpret this as an assertion that those inductives aren't supposed to exist, or at least the person writing noConfusion thought that when they wrote it :)</p>",
        "id": 388428047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693528635
    },
    {
        "content": "<p>As I said on the other thread, the feelings regarding the acceptability of this type have waxed and waned over time</p>",
        "id": 388428201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693528694
    },
    {
        "content": "<p>On the one hand, it's nice to be able to write an inductive like this from the user side, why not allow more generality? On the other hand it complicates everything to do with inductive processing, which has a lot of index manipulation and generally wants to assume the inductive has a particular syntactic form. If the kernel can be simpler and more correct that sounds like a plus</p>",
        "id": 388428428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693528801
    },
    {
        "content": "<p>Another example along the same lines is let binders in the middle of an inductive constructor, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 388428617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693528868
    },
    {
        "content": "<p>I believe Coq accepts this</p>",
        "id": 388428684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693528907
    },
    {
        "content": "<p>Coq does accept such inductives.</p>",
        "id": 388433309,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1693530838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20datatype.20declaration.20is.20corrupted/near/388428428\">said</a>:</p>\n<blockquote>\n<p>On the one hand, it's nice to be able to write an inductive like this from the user side, why not allow more generality? On the other hand it complicates everything to do with inductive processing, which has a lot of index manipulation and generally wants to assume the inductive has a particular syntactic form. If the kernel can be simpler and more correct that sounds like a plus</p>\n</blockquote>\n<p>Please note that every other feature of the kernel seems to work with that change, the draft PR passes all CI/CL</p>",
        "id": 388433452,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1693530890
    }
]