[
    {
        "content": "<p>Noticing some strange behavior around DecidableEq. The following code doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Denumerable</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BTheorem</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">taut</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">Form.impl</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">andE₁</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">Form.impl</span> <span class=\"o\">(</span><span class=\"n\">Form.and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">andE₂</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">Form.impl</span> <span class=\"o\">(</span><span class=\"n\">Form.and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 340239356,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678234065
    },
    {
        "content": "<p>The diagnostic on the last line is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">cases'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">dependent</span> <span class=\"n\">elimination</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">equation</span>\n  <span class=\"n\">Form.and</span> <span class=\"n\">p</span><span class=\"bp\">✝</span> <span class=\"n\">q</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">✝</span> <span class=\"n\">after</span> <span class=\"n\">processing</span>\n  <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">BTheorem.taut</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span>\n<span class=\"n\">the</span> <span class=\"n\">dependent</span> <span class=\"n\">pattern</span> <span class=\"n\">matcher</span> <span class=\"n\">can</span> <span class=\"n\">solve</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">kinds</span> <span class=\"n\">of</span> <span class=\"n\">equations</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">var</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"n\">and</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">var</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">terms</span> <span class=\"n\">are</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">constructor</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">constructor</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">examples</span><span class=\"o\">:</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.nil</span>\n</code></pre></div>",
        "id": 340239480,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678234121
    },
    {
        "content": "<p>The problem seems to resolve if I remove either the import, the second andE constructor (but not the first!) or the taut constructor.</p>",
        "id": 340239677,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678234206
    },
    {
        "content": "<p><del>Any ideas?</del></p>",
        "id": 340239682,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678234209
    },
    {
        "content": "<p>This is on leanprover/lean4:nightly-2023-02-04</p>",
        "id": 340239738,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678234237
    },
    {
        "content": "<p>Sorry, maybe I should be more specific. What I'm wondering is:</p>\n<ol>\n<li>Is this a bug, or am I doing something incorrectly?</li>\n<li>If it is a bug, should I open an issue somewhere, and if so, where?</li>\n</ol>",
        "id": 340398004,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678290384
    }
]