[
    {
        "content": "<p>What are the semantics of default arguments in Lean? I would like if something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MWE</span> <span class=\"n\">where</span>\n  <span class=\"n\">motive</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>succeeds, but I can understand if the semantics of default arguments is that the default arguments should not \"depend\" on one another.</p>",
        "id": 340412605,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1678293778
    },
    {
        "content": "<p>One trick you can use is to use a tactic instead, which is allowed to fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MWE</span> <span class=\"n\">where</span>\n  <span class=\"n\">motive</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I'm not sure why you can't do <code>by exact Fin.ofNat 0</code> here. (\"invalid auto tactic, identifier is not allowed\")</p>",
        "id": 340414074,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678294144
    },
    {
        "content": "<p>This doesn't completely work because there's no <code>OfNat (motive 1) 0</code> instance, but this works at least as a proof-of-concept:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">MWE.mk</span> <span class=\"n\">Fin</span>\n</code></pre></div>",
        "id": 340414443,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678294237
    },
    {
        "content": "<p>I would have thought that default arguments show up as optional arguments to the constructor, but it seems not. This works at least:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"try_zero\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">Fin.ofNat</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MWE</span> <span class=\"n\">where</span>\n  <span class=\"n\">motive</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">try_zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MWE</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n</code></pre></div>",
        "id": 340415697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678294549
    }
]