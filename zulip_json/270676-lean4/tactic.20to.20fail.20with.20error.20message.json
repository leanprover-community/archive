[
    {
        "content": "<p>I'd like to change the error message of a finishing tactic (for use in a macro which wraps that tactic).  Is there a more idiomatic way to do it than <code>(try ...) &lt;;&gt; fail \"my error message\"</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">\"zz\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 369504904,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687727111
    },
    {
        "content": "<p>You can also do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"s2\">\"zz\"</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Tactic macros do backtracking, and they are tried in reverse-definition order</p>",
        "id": 369507843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687728888
    },
    {
        "content": "<p>If you want it as a single rule, then better than <code>(try ...) &lt;;&gt; ...</code> is <code>first | exact rfl | fail \"zz\"</code> (like <a href=\"https://gist.github.com/kmill/d627e50ec5941f53c1fab725e3795bbc#file-metaprogramming_post_talk-lean-L69\">this example</a>)</p>",
        "id": 369507889,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687728920
    },
    {
        "content": "<p>Those are two very nice solutions.  Thanks!</p>",
        "id": 369509233,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687729822
    },
    {
        "content": "<p>Kyle, maybe I am misunderstanding your suggestion, but with <code>macro_rules</code> it seems that if all available choices fail, then the last-defined one is used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"s2\">\"zz\"</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  rfl</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.3525 = ?m.3525 : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  False : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>You get <code>zz</code> if instead you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"s2\">\"zz\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span>  <span class=\"c1\">-- zz</span>\n</code></pre></div>",
        "id": 369511070,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687731000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I'll admit I might have it backwards!</p>",
        "id": 369511681,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687731456
    },
    {
        "content": "<p>No, I think that what you said was correct, when one of the tactics succeeds: in this case, Lean chooses the <del>top-most</del>last <em>successful</em> tactic.  If they all fail, then again Lean applies the <del>top-most</del>last tactic, and that is the error that you see.</p>",
        "id": 369511885,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687731585
    },
    {
        "content": "<p>So, if you want to replace the error message, you should make the error message that you want to display be the last-defined behaviour of the tactic.</p>",
        "id": 369512093,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687731703
    },
    {
        "content": "<p>If you want it to also be extensible, then something I've seen (like for the <code>GetElem</code> index bounds tactic) is a two-level system, where macro 1 has two expansions, macro 2 and an error message, and then macro 2 is the main implementation. That way you can create rules for macro 2 without changing that the error message is last for macro 1</p>",
        "id": 369512399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687731902
    },
    {
        "content": "<p>Ah, nice!</p>\n<p>Until now, I hadn't realized that if one of the steps of your macro is an error message, then all previously defined error messages will never display.</p>",
        "id": 369512918,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687732301
    }
]