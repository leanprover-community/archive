[
    {
        "content": "<p>One thing that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and I discussed last week is a \"quick-and-dirty\" mode to compile a Lean file (as an option, maybe disabled by default). Our thought was:</p>\n<ul>\n<li>If you open a new file in VSCode, Lean will compile this file using quick-and-dirty mode. This means that it will try to make sense of the file as quick as possible, without rechecking all details. In particular it will not look at the value of any theorem and just presume that they are all correct. It will check all theorem statements and definition values though.</li>\n<li>After you edit the file, the normal Lean mode will kick in, starting at the place that you edited.</li>\n</ul>\n<p>I think this would be very helpful if you want to make a small edit in a huge mathlib file. You cannot cause any errors in lines above your edit, so they need not be checked.</p>",
        "id": 376047430,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689604519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Could you please create a RFC in the Lean 4 repo?</p>",
        "id": 376099066,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1689611757
    },
    {
        "content": "<p>Ok! <a href=\"https://github.com/leanprover/lean4/pull/2326\">lean4#2326</a></p>",
        "id": 376114210,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689615153
    },
    {
        "content": "<p>Is it related to this issue? <a href=\"https://github.com/leanprover/vscode-lean4/issues/305\">https://github.com/leanprover/vscode-lean4/issues/305</a></p>",
        "id": 376115307,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1689615408
    },
    {
        "content": "<p>In the sense that they save expensive elaborations until necessary</p>",
        "id": 376115795,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1689615521
    },
    {
        "content": "<p>Maybe a little, but I think they're quite different.</p>",
        "id": 376121155,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689616825
    },
    {
        "content": "<p>I am guessing this can be implemented in the extension, rather than inside lean 4, with calls to the lsp</p>",
        "id": 376136604,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1689620781
    },
    {
        "content": "<p>no, this mode would need to be part of the elaborator state because commands/elabs/tactics in general can do arbitrarily crazy things and so you need some way for the tactics to cooperate</p>",
        "id": 376146312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689623611
    },
    {
        "content": "<p>another application of the quick-and-dirty mode is for gathering information which does not need the full elaboration result, like getting the AST of a file, for which running all the proofs is a huge waste of time</p>",
        "id": 376146605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689623699
    },
    {
        "content": "<p>Which is also roughly what one would need for large-scale (more than Lean 3) parallelism. In fact, it could be thought of as delaying/not executing parallel parts that are not needed for computing the state at the current position.</p>",
        "id": 376147040,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689623830
    },
    {
        "content": "<p>It occurred to me recently that the main advantage of Lean 3's \"check proofs in parallel\" is that, in interactive use, slow proofs higher in the file don't make Lean take longer to check the thing you're working on (unless there are a lot of them).</p>",
        "id": 376150721,
        "sender_full_name": "Reid Barton",
        "timestamp": 1689624854
    },
    {
        "content": "<p>Sounds exciting. Something like an asynchronous JIT (in the sense of elaborate/compile when needed)?</p>",
        "id": 376154155,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1689625547
    },
    {
        "content": "<blockquote>\n<ul>\n<li>If you open a new file in VSCode, Lean will compile this file using quick-and-dirty mode. This means that it will try to make sense of the file as quick as possible, without rechecking all details. In particular it will not look at the value of any theorem and just presume that they are all correct. It will check all theorem statements and definition values though.</li>\n</ul>\n</blockquote>\n<p>What would it do with this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 376168705,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689630000
    },
    {
        "content": "<p>yeah, variables also came up in discussion with <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> about this. Apparently <a href=\"https://coq.inria.fr/refman/proofs/writing-proofs/proof-mode.html#coq:cmd.Proof-using\">coq uses <code>Proof using a b c.</code></a> as a variant on <code>include</code> which makes it possible to compile proof bodies separately</p>",
        "id": 376172239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689631485
    },
    {
        "content": "<p>but lean 4's current strategy for calculating variables based on usage is a big problem for parallelization</p>",
        "id": 376172323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689631517
    },
    {
        "content": "<p>Couldn't we simply get back Lean 3 variables?</p>",
        "id": 376172551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689631608
    },
    {
        "content": "<p>I agree, except that instead of lean 3 variables we do \"variables are based only on the signature, not the body\" which is 50% more sane than what lean 3 actually does</p>",
        "id": 376172989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689631800
    },
    {
        "content": "<p>You mean even when the body uses pure term mode?</p>",
        "id": 376173210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689631886
    },
    {
        "content": "<p>yes, term mode vs tactic mode was never a particularly sensible dividing line and it is even less sensible in lean 4 where these are commingled</p>",
        "id": 376173419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689631971
    },
    {
        "content": "<p>I agree.</p>",
        "id": 376173463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689631985
    },
    {
        "content": "<p>hm, now I wish <code>variable!</code> was available as a combination of <code>variable</code> and <code>include</code>, because it's silly for <code>variable (x : A) in ...</code> to not include <code>x</code> in the statement</p>",
        "id": 376173942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689632176
    },
    {
        "content": "<p>There's quite a few macros that rely on that behavior.</p>",
        "id": 376174266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689632297
    },
    {
        "content": "<p>My contention is that if the user writes <code>variable (x : Nat) in def foo (y : Nat) : Nat := ...</code> then <code>x</code> should probably be included in <code>foo</code></p>",
        "id": 376175064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689632561
    },
    {
        "content": "<p>if macros use <code>variable ... in</code> without knowing whether the variable will be used and hoping for it to be removed if not used, then that can be migrated to a different command. Alternatively, we just tell users to always use <code>variable!</code> in this position and have a linter warning for unused <code>variable ... in</code> declarations</p>",
        "id": 376175516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689632699
    },
    {
        "content": "<p>Gabriel, you're right that this proposal doesn't work with the current variable command...<br>\nLet's continue that discussion to a different topic.</p>",
        "id": 376298066,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689676562
    },
    {
        "content": "<p>Another relevant complication: <a href=\"#narrow/stream/287929-mathlib4/topic/Change.20of.20the.20proof.20of.20.60WellFounded.60.20causes.20timeouts/near/376670923\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Change.20of.20the.20proof.20of.20.60WellFounded.60.20causes.20timeouts/near/376670923</a></p>",
        "id": 376802901,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689805659
    }
]