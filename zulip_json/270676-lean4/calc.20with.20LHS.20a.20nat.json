[
    {
        "content": "<p>One more observation about the <code>nightly-2023-02-03</code> version of <code>calc</code>.  The following gives an error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid 'calc' step, left-hand-side is\n  Int.ofNat ?m.289 : Int\nprevious right-hand-side is\n  3 : Nat\n</code></pre></div>\n<p>now, and doesn't on <code>nightly-2023-02-02</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Trans</span> <span class=\"n\">Int</span> <span class=\"n\">Int</span> <span class=\"n\">Int</span> <span class=\"n\">LT.lt</span> <span class=\"n\">LT.lt</span> <span class=\"n\">LT.lt</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The Lean 3 translation of this code also doesn't give an error.</p>\n<p>I'm guessing the problem is that as of 02-03 Lean uses default instances to help elaborate the top-LHS, and <code>OfNat Nat</code> is a default instance.  Is that right?</p>",
        "id": 326038372,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675654609
    },
    {
        "content": "<p>In fact, the issue that prompted these changes, <a href=\"https://github.com/leanprover/lean4/pull/2079\">lean4#2079</a>, is now broken in reverse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Trans</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">LT.lt</span> <span class=\"n\">LE.le</span> <span class=\"n\">LT.lt</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Trans</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">LE.le</span> <span class=\"n\">LT.lt</span> <span class=\"n\">LT.lt</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">OfNat</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[default_instance high]</span> <span class=\"kd\">instance</span> <span class=\"n\">Monoid.Pow</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">Monoid.npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">Int</span> <span class=\"n\">where</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- works on 02-03, not 02-02</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- works on 02-02, not 02-03</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 326039144,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675655365
    },
    {
        "content": "<blockquote>\n<p>Is that right?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 326250138,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675722429
    }
]