[
    {
        "content": "<p>I am encountering some weirdness with partial defs that I'm not sure is really a bug but could definitely use better error messages for.</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">Unit</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">()</span> <span class=\"bp\">←</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>The IR optimizes test to a single <code>unreachable</code> call, which is accurate only to the extent that test does not return... it is certainly a surprise to <code>#eval test</code> and crash the server instead of infinitely loop.</p>",
        "id": 342902152,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1679218141
    },
    {
        "content": "<p>If the compiler is detecting the infinite loop and inserting unreachable, then perhaps it should be another symbol that is more descriptive than unreachable. Even a standard non-internal <code>panic!</code> would be much more helpful for debugging.</p>",
        "id": 342902294,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1679218219
    },
    {
        "content": "<p>This seems to be a mis-analysis of the elim dead branches pass that does indeed not ocur in the rewrite of elim dead branches in the new code generator!</p>\n<p>Old:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">init</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">of</span>\n  <span class=\"n\">Prod.mk</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">PUnit.unit</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Prod.mk</span><span class=\"o\">]</span> <span class=\"n\">x_4</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_5</span>\n<span class=\"o\">[</span><span class=\"n\">elim_dead_branches</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">of</span>\n  <span class=\"n\">Prod.mk</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">⊥</span>\n</code></pre></div>\n<p>New:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.elimDeadBranches</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n    <span class=\"kd\">def</span> <span class=\"n\">test._redArg</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.1</span> <span class=\"o\">:=</span> <span class=\"n\">test._redArg</span><span class=\"bp\">;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">_x.1</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">fst.2</span> <span class=\"n\">snd.3</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span><span class=\"bp\">;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_x.4</span> <span class=\"n\">snd.3</span><span class=\"bp\">;</span>\n        <span class=\"n\">return</span> <span class=\"n\">_x.5</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.elimDeadBranches</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"n\">a.1</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">test._redArg</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.2</span>\n</code></pre></div>\n<p>current end result of new:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n    <span class=\"kd\">def</span> <span class=\"n\">test._redArg</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.1</span> <span class=\"o\">:=</span> <span class=\"n\">test._redArg</span><span class=\"bp\">;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">_x.1</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">fst.2</span> <span class=\"n\">snd.3</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span><span class=\"bp\">;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_x.4</span> <span class=\"n\">snd.3</span><span class=\"bp\">;</span>\n        <span class=\"n\">return</span> <span class=\"n\">_x.5</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"n\">a.1</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">test._redArg</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"n\">_x.2</span>\n</code></pre></div>",
        "id": 342903283,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1679218720
    },
    {
        "content": "<p>I cannot tell for sure from the top of my head but I would guess that the abstract interpreter of the old pass somehow got the idea that the return value of <code>test</code> is <code>bot</code> and thus decided to eliminate the <code>Prod.mk</code> branch which was then later turned into just a single unreachable instrruction because \"Hey there is a single branch here and we do not use its data, might as well not branch\" and so on.</p>",
        "id": 342903545,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1679218877
    }
]