[
    {
        "content": "<p>Consider this minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">a_lemma</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">a_lemma</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>\n<p>Before the <code>rewrite</code>, the tactic state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span>\n</code></pre></div>\n<p>afterwards it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_example</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>So it seems that there is a  (hidden) hypothesis <code>example</code>, presumably there in case I choose to make the proof recursive, that <code>rewrite</code> stumbles over, changes, and thus makes visible.</p>\n<p>Is there an easy way I can tell <code>rewrite [] at …</code> to not rewrite this “hidden” hypothesis?</p>",
        "id": 359076810,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684355517
    },
    {
        "content": "<p>It seems there is a <code>nonrec</code> modifier that I just stumbled over by accident :-). That might be a work-around for me for now, but if I want to bundle my tactic expression into something reusable, it would be better to not require the user to do that.</p>",
        "id": 359077354,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684355719
    },
    {
        "content": "<p>I discovered this independently last week and it was one of the reasons that I switched to giving a demo in front of hundreds of mathematicians from lean 4 to lean 3; I wanted to <code>rw continuous_def at *</code> to change hypotheses of continunity to the open set definition but I decided that the arrival of this random new hypothesis was confusing.</p>",
        "id": 359080539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684356918
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2219\">lean4#2219</a></p>",
        "id": 359458602,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684431550
    }
]