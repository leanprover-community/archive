[
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">One‚ÇÅ.one</span>\n</code></pre></div>\n<p>I get the following trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"bp\">?</span><span class=\"n\">m.33</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"bp\">?</span><span class=\"n\">m.33</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">ZeroOne‚ÇÅ.toOne‚ÇÅ</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ZeroOne‚ÇÅ.toOne‚ÇÅ</span> <span class=\"n\">to</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"bp\">?</span><span class=\"n\">m.33</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"bp\">?</span><span class=\"n\">m.33</span> <span class=\"bp\">‚âü</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"bp\">?</span><span class=\"n\">m.33</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"bp\">?</span><span class=\"n\">m.33</span> <span class=\"bp\">‚ñº</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">‚úù</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">üí•</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">‚úù</span> <span class=\"n\">to</span> <span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"bp\">?</span><span class=\"n\">m.33</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"bp\">?</span><span class=\"n\">m.33</span> <span class=\"bp\">‚âü</span> <span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"n\">Œ±</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ZeroOne‚ÇÅ.toOne‚ÇÅ</span> <span class=\"n\">to</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">‚úù</span> <span class=\"n\">to</span> <span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"n\">Œ±</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">ZeroOne‚ÇÅ</span> <span class=\"n\">Œ±</span> <span class=\"n\">of</span> <span class=\"n\">One‚ÇÅ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">ZeroOne‚ÇÅ.toOne‚ÇÅ</span>\n</code></pre></div>\n<p>I'm baffled by the first try. Is this desired or expected?</p>",
        "id": 361906499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685355208
    },
    {
        "content": "<p>By \"try\" you mean the entire <code>synthInstance</code> invocation?</p>",
        "id": 361908749,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685355759
    },
    {
        "content": "<p>Yes, searching for <code>One‚ÇÅ ?m.33</code></p>",
        "id": 361909784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685355990
    },
    {
        "content": "<p>and then failing to solve <code>ZeroOne‚ÇÅ ?m.33 ‚âü ZeroOne‚ÇÅ Œ±</code></p>",
        "id": 361909981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685356040
    },
    {
        "content": "<p>Is the idea here that it first tries to work out if it should be solving an outParam?</p>",
        "id": 361913323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685356813
    },
    {
        "content": "<p>No, this is one of I believe Lean 4's lesser-known features: typeclass inference can find instances even if the class type still contains metavariables as long as those mvars do not affect the search. The search is supposed to fail (\"explode\") relatively quickly like here if an mvar <em>is</em> in the way, but I don't think it is known yet how that plays out in mathlib4 across the board</p>",
        "id": 361934735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685362448
    },
    {
        "content": "<p>Sebastian, I understand this but it does not explain why Lean tries this before trying the search that eventually succeeds in this case. Is that an elaboration order issue?</p>",
        "id": 361986424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685375997
    }
]