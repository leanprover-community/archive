[
    {
        "content": "<p>A beginner hovers over the <code>rewrite</code> tactic and sees the fairly helpful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"n\">applies</span> <span class=\"n\">identity</span> <span class=\"n\">e</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">rewrite</span> <span class=\"n\">rule</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">main</span> <span class=\"n\">goal.</span> <span class=\"n\">If</span> <span class=\"n\">e</span> <span class=\"n\">is</span> <span class=\"n\">preceded</span> <span class=\"kd\">by</span> <span class=\"n\">left</span> <span class=\"n\">arrow</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">or</span> <span class=\"bp\">&lt;-</span><span class=\"o\">),</span> <span class=\"n\">the</span> <span class=\"n\">rewrite</span> <span class=\"n\">is</span> <span class=\"n\">applied</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">reverse</span> <span class=\"n\">direction.</span> <span class=\"n\">If</span> <span class=\"n\">e</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">defined</span> <span class=\"kd\">constant</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"n\">the</span> <span class=\"n\">equational</span> <span class=\"n\">theorems</span> <span class=\"n\">associated</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">are</span> <span class=\"n\">used.</span> <span class=\"n\">This</span> <span class=\"n\">provides</span> <span class=\"n\">a</span> <span class=\"n\">convenient</span> <span class=\"n\">way</span> <span class=\"n\">to</span> <span class=\"n\">unfold</span> <span class=\"n\">e.</span>\n\n<span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">eₙ</span><span class=\"o\">]</span> <span class=\"n\">applies</span> <span class=\"n\">the</span> <span class=\"n\">given</span> <span class=\"n\">rules</span> <span class=\"n\">sequentially.</span>\n<span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l</span> <span class=\"n\">rewrites</span> <span class=\"n\">e</span> <span class=\"n\">at</span> <span class=\"n\">location</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"n\">l</span> <span class=\"n\">is</span> <span class=\"n\">either</span> <span class=\"bp\">*</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">hypotheses</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kn\">local</span> <span class=\"n\">context.</span> <span class=\"n\">In</span> <span class=\"n\">the</span> <span class=\"n\">latter</span> <span class=\"n\">case</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">turnstile</span> <span class=\"bp\">⊢</span> <span class=\"n\">or</span> <span class=\"bp\">|-</span> <span class=\"n\">can</span> <span class=\"n\">also</span> <span class=\"n\">be</span> <span class=\"n\">used</span><span class=\"o\">,</span> <span class=\"n\">to</span> <span class=\"n\">signify</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">goal.</span>\n<span class=\"n\">Using</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">L</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span> <span class=\"n\">where</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">control</span> <span class=\"n\">which</span> <span class=\"s2\">\"occurrences\"</span> <span class=\"n\">are</span> <span class=\"n\">rewritten.</span> <span class=\"o\">(</span><span class=\"n\">This</span> <span class=\"n\">option</span> <span class=\"n\">applies</span> <span class=\"n\">to</span> <span class=\"n\">each</span> <span class=\"n\">rule</span><span class=\"o\">,</span> <span class=\"n\">so</span> <span class=\"n\">usually</span> <span class=\"n\">this</span> <span class=\"n\">will</span> <span class=\"n\">only</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">single</span> <span class=\"n\">rule.</span><span class=\"o\">)</span> <span class=\"n\">Occurrences</span> <span class=\"n\">count</span> <span class=\"k\">from</span> <span class=\"mi\">1</span><span class=\"bp\">.</span> <span class=\"n\">At</span> <span class=\"n\">the</span> <span class=\"n\">first</span> <span class=\"n\">occurrence</span><span class=\"o\">,</span> <span class=\"n\">whether</span> <span class=\"n\">allowed</span> <span class=\"n\">or</span> <span class=\"n\">not</span><span class=\"o\">,</span> <span class=\"n\">arguments</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">rewrite</span> <span class=\"n\">rule</span> <span class=\"n\">e</span> <span class=\"n\">may</span> <span class=\"n\">be</span> <span class=\"n\">instantiated</span><span class=\"o\">,</span> <span class=\"n\">restricting</span> <span class=\"n\">which</span> <span class=\"n\">later</span> <span class=\"n\">rewrites</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">found.</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"n\">allows</span> <span class=\"n\">skipping</span> <span class=\"n\">specified</span> <span class=\"n\">occurrences.</span>\n</code></pre></div>\n<p>(although if I were using this for teaching I would also have a more low-level explanation rather than launching straight into applying an identity as a rewrite rule, and I would definitely have examples). </p>\n<p>Unfortunately, beginners will never hover over the <code>rewrite</code> tactic because nobody ever uses it. They will hover over the <code>rw</code> tactic and see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">is</span> <span class=\"n\">like</span> <span class=\"n\">rewrite</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">also</span> <span class=\"n\">tries</span> <span class=\"n\">to</span> <span class=\"n\">close</span> <span class=\"n\">the</span> <span class=\"n\">goal</span> <span class=\"kd\">by</span> <span class=\"s2\">\"cheap\"</span> <span class=\"o\">(</span><span class=\"n\">reducible</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">afterwards.</span>\n</code></pre></div>\n<p>This doesn't even tell you what the tactic does, it just says \"oh it's like some other tactic, whose docstring you can't see right now, and it's something to do with reducible, an idea which seems to be notoriously difficult to find documentation for\". </p>\n<p>For my teaching in Lean 3 I was really unhappy with the tactic documentation provided by the system. For a bunch of common tactics I wrote new explanations here</p>\n<p><a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_C/Part_C.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/Part_C/Part_C.html</a></p>\n<p>and the documentation for each tactic typically contained one or more of (a) an overview, written with no CS language, (b) examples (c) variants and bells/whistles, and sometimes (d) details. I will be updating everything to Lean 4 in December in preparation for me teaching the course in January. Similarly in NNG4 I make detailed jargon-free explanations of many basic tactics available just one click away.</p>\n<p>My impression from looking at the docstring of the <code>rw</code> tactic is that the issue here (making the system explain itself well) is not something which has been concentrated on so far. In contrast, whenever anyone is unfortunate enough to hover over <code>=</code> (which is <em>everywhere</em>) one finds a huge explanation of introduction and elimination rules which fills up a chunk of the screen and which, I suspect, is not what one wants to know 99% of the time (e.g. I often just want to know the type of the two things which are equal, information which is often not available unless one carefully scrolls through the pop-up taking care not to move ones cursor out of the box because then you'll start scrolling through the proof you're looking at).</p>\n<p>Clearly one cannot please all of the people all of the time here, and in fact it's probably even hard to please most of the people most of the time. But is there a vision going forwards for where, if anywhere, beginner-friendly and expert-helpful tactic documentation can live in the Lean ecosystem? The <code>rewrite</code> docstring has all this useful information about <code>rewrite [t1, t2] at h \\|-</code> and an explanation of a config option allowing more targetted rewriting. But I cannot find a single usage of this tactic in mathlib so nobody ever sees it. Can we do better?</p>",
        "id": 393653566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695890448
    },
    {
        "content": "<p><code>rw</code> is using a discouraged method of documentation, which is to use a cross reference instead of copy paste</p>",
        "id": 393654246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695890630
    },
    {
        "content": "<p><code>alias</code> used to do this too but now it properly copies the original docs</p>",
        "id": 393654350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695890649
    },
    {
        "content": "<p><code>rw</code> should just get its docs by <code>inheritDoc</code>, and there should be a blurb at the end of their common doc about how <code>rewrite</code> and <code>rw</code> differ</p>",
        "id": 393654462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695890680
    },
    {
        "content": "<p>does inheritDoc allow adding a blurb?</p>",
        "id": 393654552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695890708
    },
    {
        "content": "<p>no</p>",
        "id": 393654568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695890712
    },
    {
        "content": "<p>so both <code>rewrite</code> and <code>rw</code> would have the blurb</p>",
        "id": 393654604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695890726
    },
    {
        "content": "<p>The docstring for <code>rewrite</code> even mentions an example using <code>rw</code> so this confusion is already happening :-)</p>",
        "id": 393660438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695892209
    },
    {
        "content": "<p>So are core PRs for this sort of thing welcome or do people not have time for them right now or do I have to open an RFC or what? Is there a way of adding documentation to a core tactic in mathlib? If so, would this idea be unhelpful in the long term?</p>",
        "id": 393661009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695892408
    },
    {
        "content": "<p>please open a PR in core</p>",
        "id": 393681650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695898897
    },
    {
        "content": "<p>Are you speaking for the core devs? I don't want to waste their time.</p>",
        "id": 393751185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695914989
    },
    {
        "content": "<p>Kevin, this is about system usability, and it's only documentation, so it's an easy PR to review. I don't think this will waste their time, regardless of whether Mario is explicitly speaking on their behalf or not.</p>",
        "id": 393751651,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695915112
    },
    {
        "content": "<p>One worry I have is that I'm going to have to figure out how to build core and I don't even have a copy of core on any of my computers (this is some indication of how totally new to core I am). Another issue is that I'd never heard of inheritDoc and I've just searched for it in mathlib and I can't find any occurrences. But if people are prepared to help me through then I can try this.</p>",
        "id": 393763366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695918701
    },
    {
        "content": "<p>You wanna search for inherit_doc which gets used a ton in mathlib (it got renamed)</p>\n<p>Building core itself is rather easy. THe docs are here: <a href=\"https://lean-lang.org/lean4/doc/make/index.html\">https://lean-lang.org/lean4/doc/make/index.html</a>. iirc you are on Ubuntu right? For that you wanna do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sudo</span> <span class=\"n\">apt</span><span class=\"bp\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"n\">git</span> <span class=\"n\">libgmp</span><span class=\"bp\">-</span><span class=\"n\">dev</span> <span class=\"n\">cmake</span> <span class=\"n\">ccache</span> <span class=\"n\">clang</span> <span class=\"bp\">#</span> <span class=\"n\">gets</span> <span class=\"n\">the</span> <span class=\"n\">dependencies</span>\n<span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span> <span class=\"c1\">--recurse-submodules # get the sources</span>\n<span class=\"n\">cd</span> <span class=\"n\">lean4</span>\n<span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span> <span class=\"bp\">#</span> <span class=\"n\">create</span> <span class=\"n\">the</span> <span class=\"n\">directory</span> <span class=\"n\">to</span> <span class=\"n\">build</span> <span class=\"k\">in</span>\n<span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">cmake</span> <span class=\"bp\">../..</span> <span class=\"bp\">#</span> <span class=\"n\">auto</span> <span class=\"n\">generate</span> <span class=\"n\">the</span> <span class=\"n\">Makefiles</span> <span class=\"k\">from</span> <span class=\"n\">CMakeList.txt</span>\n<span class=\"n\">make</span> <span class=\"bp\">#</span> <span class=\"n\">run</span> <span class=\"n\">the</span> <span class=\"n\">make</span> <span class=\"n\">file</span> <span class=\"n\">to</span> <span class=\"n\">compile</span>\n</code></pre></div>\n<p>If you wanna compile faster you can use <code>make -j6</code> to use e.g. 6 cores. To run tests you do <code>make test</code>. If you want to recompile you just have to go into <code>build/release</code> again and re run make.</p>\n<p>As to how to get your editor to cooperate with this custom lean that guide is right next to the above one: <a href=\"https://lean-lang.org/lean4/doc/dev/index.html#development-setup\">https://lean-lang.org/lean4/doc/dev/index.html#development-setup</a></p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 393764998,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695919233
    },
    {
        "content": "<p>Do we even <em>need</em> both <code>rw</code> and <code>rewrite</code>? (Having fewer tactics would be desirable). Kevin says no one ever uses <code>rewrite</code>? So why have it? If it's rarely needed, could it be an option of <code>rw</code>?</p>",
        "id": 393766189,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695919720
    },
    {
        "content": "<p>It's used in NNG for pedagogical purposes, but it was renamed to <code>rw</code> for time-saving purposes ;-)</p>",
        "id": 393766964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695920028
    },
    {
        "content": "<p>I do occasionally use <code>rewrite</code>, mostly when debugging a proof. Making it an option somehow would be fine too</p>",
        "id": 393770109,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695921175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> I've thought of <code>rewrite</code> as being an implementation detail for <code>rw</code>, since <code>rw</code> is a macro for <code>rewrite</code> followed by <code>try (with_reducible rfl)</code>. It seems to be the easiest way to implement <code>rw</code>.</p>\n<p>Maybe <code>rewrite</code> could be named to something else, like <code>rw only</code> or something.</p>",
        "id": 393770311,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695921246
    },
    {
        "content": "<p>Is that something one usually needs? If not, I'd make that behavior a <code>rw</code> config option and ban <code>rewrite</code> from our collective mental model. (If there is a <code>rewriteCore</code> tactic for implementation reasons that's fine, but it should be documented as such, not a “normal” user facing tactic). WDYT?</p>",
        "id": 393772798,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695922274
    },
    {
        "content": "<p>I don't think I've ever needed <code>rewrite</code>, but I think the easiest improvement would be to rename <code>rewrite</code> to something that distinguishes it better from <code>rw</code>.</p>\n<p>Renaming <code>rewrite</code> to <code>rewriteCore</code> might require successfully making the case that no one ever should use <code>rewrite</code>. Something like <code>rw only</code> suggests that <code>rw</code> is the normal one, sidestepping the issue.</p>\n<p>Adding a <code>rw</code> configuration option is a bit tricky since you either add it to the main rewrite configuration structure (in which case it might be worth just merging <code>rw</code> and <code>rewrite</code> into a single tactic), or you make a <code>rw</code>-specific configuration structure and make the macro a bit more complex since you need to transform it to be the <code>rewrite</code> one. It's not hard doing these things, but takes some nonzero energy to evaluate the options.</p>",
        "id": 393775791,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695923299
    },
    {
        "content": "<p>Ah, but for <code>rw only</code> that wouldn't be needed? I didn't immediately see that advantage.</p>\n<p>The main point of my suggestion is less the renaming (although it helps), but to <em>move</em> the docstring to <code>rw</code>, and give <code>rewrite</code> a docstring saying “internal tactic of <code>rw</code>”. Maybe also explaining the difference in behavior (useful for advanced users), and check documentation to introduce <code>rw</code> only. Ideally new users never lean about <code>rewrite</code>, if that's  realistic.</p>",
        "id": 393782254,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695925468
    },
    {
        "content": "<p>This is almost as weird as the idea of changing <code>theorem</code> to <code>lemma</code> everywhere!</p>\n<p>Everyone should fix their code and documentation to use <code>rw</code> when the <code>rfl</code> is needed, and <code>rewrite</code> otherwise. It will run faster.</p>",
        "id": 393803105,
        "sender_full_name": "Richard Copley",
        "timestamp": 1695934206
    },
    {
        "content": "<p>[citation needed]</p>",
        "id": 393804573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695934910
    },
    {
        "content": "<p>Not sure if Buster’s suggestion is sarcastic, or not. (Both seem plausible to me.)</p>",
        "id": 393804887,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695935056
    },
    {
        "content": "<p><code>rfl</code> at reducible transparency is very weak. I wouldn't expect it to take more than a very small fraction of the overhead of <code>rewrite</code> itself.</p>\n<p>I'm curious though if modifying mathlib to use <code>rewrite</code> in every place that doesn't use <code>rfl</code> would make a measurable impact.</p>",
        "id": 393805179,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695935216
    },
    {
        "content": "<p>It would really be a shame if we had to start worrying about such inexpensive parts of tactics in order to get better performance.</p>",
        "id": 393805327,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695935289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20docstrings/near/393804887\">said</a>:</p>\n<blockquote>\n<p>Not sure if Buster’s suggestion is sarcastic, or not. (Both seem plausible to me.)</p>\n</blockquote>\n<p>I think that's Poe's law</p>",
        "id": 393805395,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695935328
    },
    {
        "content": "<p>Not at all. The difference is significant. Here I have a little project with 60 <code>rw</code>'s and 296 <code>rewrite</code>s. Time to rebuild after deleting build artifacts (10 trials):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>12.011s\n11.886s\n12.024s\n12.040s\n11.962s\n11.989s\n11.958s\n11.955s\n11.968s\n11.955s\n</code></pre></div>\n<p>After replacing all the <code>rewrite</code>'s with <code>rw</code>'s:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>15.333s\n12.549s\n12.631s\n12.574s\n12.997s\n12.549s\n12.551s\n12.654s\n12.673s\n12.697s\n</code></pre></div>\n<p>Should I do a p-test?</p>",
        "id": 393806295,
        "sender_full_name": "Richard Copley",
        "timestamp": 1695935848
    },
    {
        "content": "<p>There are 50697 <code>rw</code>'s in mathlib, give or take. I don't know how many are in terminal position.</p>",
        "id": 393806394,
        "sender_full_name": "Richard Copley",
        "timestamp": 1695935900
    },
    {
        "content": "<p>Hmm, good point, I wasn’t expecting that.</p>",
        "id": 393806728,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695936108
    },
    {
        "content": "<p>Just a quick point of reference: the average difference between your runs (including the big outlier in the second set) was : <code>0.9465s</code>, and that's for 296 new <code>rw</code>s. If we expect the same speed-up across all of mathlib (possibly not a fair assumption), we would be looking at <code>0.9465 * 50607 / 296 = 162.11s</code> difference in <em>total</em> build time (not wall time).</p>",
        "id": 393807890,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695936704
    },
    {
        "content": "<p>A little less, since some <code>rw</code>'s will remain. Perhaps <code>0.9465s * 50697 / (296 + 60)=134.78s</code>. Not large, but I still don't think it should be forced on people. These little inefficiencies add up.</p>",
        "id": 393808797,
        "sender_full_name": "Richard Copley",
        "timestamp": 1695937147
    },
    {
        "content": "<p>what percentage of total build time is that?</p>",
        "id": 393808942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695937211
    },
    {
        "content": "<p>90s / 3 hours? Not large</p>",
        "id": 393809011,
        "sender_full_name": "Richard Copley",
        "timestamp": 1695937251
    },
    {
        "content": "<p>I mean, is it noise-level</p>",
        "id": 393809043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695937266
    },
    {
        "content": "<p>it may not even be statistically significant</p>",
        "id": 393809076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695937292
    },
    {
        "content": "<p>It is both statistically significant and noise-level.</p>",
        "id": 393809110,
        "sender_full_name": "Richard Copley",
        "timestamp": 1695937316
    },
    {
        "content": "<p>it's probably nonzero, but I suspect the macro expansion costs more than the rfl. We would need my (still fictional) auto-rewriter to do the test for real (detecting all the <code>rw</code> that can be changed to <code>rewrite</code> without breaking the proof)</p>",
        "id": 393809254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695937405
    },
    {
        "content": "<p>So if the rfl check was part of the actual tactics code, it might be statistically significantly faster than the current implementation with macros?</p>",
        "id": 393809902,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695937760
    },
    {
        "content": "<p>Maybe we should distinguish between \"practically significant\" and \"statistically significant\". It's likely statistically significant (in that one can tell after enough runs whether it was the macro or non-macro one), but the question is whether it's significantly faster.</p>",
        "id": 393810223,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695937932
    },
    {
        "content": "<p>If speed is important, it's a (small) win. If there's something else that's more important (I can't see it ... is it consistency? saved typing? tradition?) then fine, Mathlib should make its decision. But speed is sometimes important. I think it would be a shame to make this change in Lean.</p>",
        "id": 393810823,
        "sender_full_name": "Richard Copley",
        "timestamp": 1695938271
    },
    {
        "content": "<p>Going back to the doc-string issue, there is also the possibility of improving old doc-strings.  This is a little hacky, but seems to give better docs to <code>rw</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic.ExtendDocs</span>\n\n<span class=\"sd\">/-- `extend_docs &lt;declName&gt; before &lt;prefix_string&gt; after &lt;suffix_string&gt;` extends the</span>\n<span class=\"sd\">docs of `&lt;declName&gt;` by adding `&lt;prefix_string&gt;` before and `&lt;suffix_string&gt;` after. -/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"extend_docs\"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"s2\">\"before\"</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"s2\">\"after\"</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"n\">extend_docs</span> <span class=\"bp\">$</span><span class=\"n\">na</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">before</span> <span class=\"bp\">$</span><span class=\"n\">bef</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">after</span> <span class=\"bp\">$</span><span class=\"n\">aft</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">bef.isNone</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">aft.isNone</span> <span class=\"k\">then</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expected at least one of 'before' or 'after'\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">declName</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.resolveGlobalConstNoOverloadWithInfo</span> <span class=\"n\">na</span>\n    <span class=\"k\">let</span> <span class=\"n\">bef</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">bef.isNone</span> <span class=\"k\">then</span> <span class=\"s2\">\"\"</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">bef.get</span><span class=\"bp\">!</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getString</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">aft</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">aft.isNone</span> <span class=\"k\">then</span> <span class=\"s2\">\"\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">aft.get</span><span class=\"bp\">!</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getString</span>\n    <span class=\"k\">let</span> <span class=\"n\">oldDoc</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">declName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"s2\">\"\"</span>\n    <span class=\"n\">addDocString</span> <span class=\"n\">declName</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">bef</span> <span class=\"bp\">++</span> <span class=\"n\">oldDoc</span> <span class=\"bp\">++</span> <span class=\"n\">aft</span>\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic.ExtendDocs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_zero</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"c1\">-- hover over `rw` shows the old doc-string, since nothing has changed yet:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">`rw` is like `rewrite`, but also tries to close the goal by \"cheap\" (reducible) `rfl` afterwards.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> redefine `rw`, since I cannot find a way to replace the doc-string of a declaration that</span>\n<span class=\"cm\">has been defined in an earlier file.</span>\n<span class=\"cm\">The \"new\" `rw` inherits the docs of `rewrite`. -/</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">rewriteSeq</span><span class=\"kd\">]</span>\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">my_rw</span><span class=\"o\">)</span> <span class=\"s2\">\"rw\"</span> <span class=\"n\">c</span><span class=\"o\">:(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- now we add to the docs of the \"new\" `rw` the prefix that we want.</span>\n<span class=\"n\">extend_docs</span> <span class=\"n\">my_rw</span>\n  <span class=\"n\">before</span> <span class=\"s2\">\"`rw` is like `rewrite` (see below), but also tries to close the goal by </span><span class=\"se\">\\\"</span><span class=\"s2\">cheap</span><span class=\"se\">\\\"</span>\n<span class=\"s2\">    (reducible) `rfl` afterwards.\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_zero</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"c1\">-- hover over `rw` now shows</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">`rw` is like `rewrite` (see below), but also tries to close the goal by \"cheap\" (reducible) `rfl` afterwards.</span>\n\n<span class=\"cm\">[rewrite doc-string]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 393857200,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695965816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20docstrings/near/393654552\">said</a>:</p>\n<blockquote>\n<p>does inheritDoc allow adding a blurb?</p>\n</blockquote>\n<p>Since I have also sometimes wanted to use <code>inherit_doc</code> and add some text to the added docs, I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/7446\">#7446</a>.</p>\n<p>Moreover, I also try out the change in the docs to <code>rw</code>.  While I think that those docs can be improved, the solution in the PR does not convince me completely.  However, I still think that <code>extend_doc</code> is something that is potentially useful and I took <code>rw</code> as a <code>Mathlib</code>-wide test.</p>\n<p>Honestly, if it were not a draft PR, I would probably only add the command and would not use it for <code>rw</code>, but since it is a draft... you can explore how <code>Mathlib</code> would look like if the doc-string to <code>rw</code> actually talked about <code>rw</code> and not <code>rewrite</code>!</p>",
        "id": 394106376,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696100084
    },
    {
        "content": "<p>why not add this mechanism directly to <code>inherit_doc</code>?</p>",
        "id": 394114662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696109520
    },
    {
        "content": "<p>I had thought of it, but then I saw that <code>inherit_doc</code> was not in mathlib and I did not know how to produce the PR...</p>",
        "id": 394114959,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696109833
    },
    {
        "content": "<p>I really like the idea of composable docstrings and have several times wanted something like this myself! :) If this is making its way to a core PR, though, I wonder if it would be better to simply be able to interpolate docstrings in general instead of extending <code>inherit_doc</code>. That is, to be able to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `foo` is 0. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">`bar` is one greater than `foo`.</span>\n\n<span class=\"sd\">doc!{foo}</span>\n\n<span class=\"sd\">Note that this causes `bar` to be unequal to `foo`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>up to syntax.</p>\n<p>Maybe it could also (have the option to?) automatically indicate that the inserted text is foo's docstring somehow, either by an automatically inserted heading for <code>foo</code> or a summary element (not sure if those are supported in hovers, though). Not sure if there are any obstacles that would prevent this kind of feature, or if there are reasons (speed?) to just inherit docstrings at the beginning and/or end.</p>",
        "id": 394121236,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696116753
    },
    {
        "content": "<p>speed is usually not the issue here, the major problem is increased code complexity</p>",
        "id": 394121907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696117564
    },
    {
        "content": "<p>Gotcha...maybe it would make more sense to make this a separate thing somehow, then—if at all. (E.g. demand an attribute <code>@[inherit_docs]</code> or something which just processes and replaces the existing docstring, interpolating occurrences like this appropriately.)</p>\n<p>My guess would be that if you wanted to do this \"right\", you'd want to change the <code>docComment</code> parser to add syntax nodes encoding the literal parts of the comment vs. the interpolated parts, and I can see how that could be a big change...I took a look to see how it currently works, and I see that everything is very simple right now! :)</p>",
        "id": 394123241,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696118934
    },
    {
        "content": "<p>To implement this, I would probably keep the parser the same, but add an extra function for \"evaluating\" a doc template string into an actual docstring and call it somewhere between extracting the docstring from the syntax and calling <code>addDocString</code> with the result</p>",
        "id": 394123502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696119149
    },
    {
        "content": "<p>I don't think there is a need to have the parser in on it as long as you can't write expressions in doc template arguments, only labels</p>",
        "id": 394123555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696119211
    },
    {
        "content": "<p>on the other hand, you might want to have the doc template string parse available to the server so that it can use it for semantic highlighting (to make it more obvious that it is special and enable go-to-def on the label)</p>",
        "id": 394123665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696119303
    },
    {
        "content": "<p>Right! (Also likewise I figured you could have better error reporting when an identifier couldn't be found in the environment) So—how would you hand the server one parse while using another? (Is that straightforward?) Or are you saying that that's an argument for changing the parser?</p>",
        "id": 394124446,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696119892
    },
    {
        "content": "<p>the server could call the doc string parser again</p>",
        "id": 394126181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696120936
    },
    {
        "content": "<p>you could also have a parser combinator that takes the result of the docstring parser and parses templates in it, if we want the Syntax itself to represent this structure</p>",
        "id": 394126298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696121013
    },
    {
        "content": "<p>Before trying to interpolate doc-strings directly, I am trying to make the addition of a suffix and a prefix, similar to the PR.<br>\nHere is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.InfoTree.Main</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.DocString</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic.ExtendDoc</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">extend_doc</span><span class=\"o\">)</span> <span class=\"s2\">\"extend_doc\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"s2\">\"before\"</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"s2\">\"after\"</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"c1\">-- interpolated `inherit_doc` attribute and `extend_doc` PR</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">initialize</span> <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">extend_doc</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"inherit documentation from a specified declaration\"</span>\n    <span class=\"n\">add</span>   <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"n\">stx</span> <span class=\"n\">kind</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"n\">kind</span> <span class=\"bp\">==</span> <span class=\"n\">AttributeKind.global</span> <span class=\"k\">do</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid `[extend_doc]` attribute, must be global\"</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">extend_doc</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">before</span> <span class=\"bp\">$</span><span class=\"n\">bef</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">after</span> <span class=\"bp\">$</span><span class=\"n\">aft</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withRef</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"bp\">?</span>\n          <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid `[extend_doc]` attribute, could not infer doc source\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">declName</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.resolveGlobalConstNoOverloadWithInfo</span> <span class=\"n\">id</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">decl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n          <span class=\"n\">logWarning</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← mkConstWithLevelParams decl} already has a doc string\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">doc</span> <span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">declName</span>\n          <span class=\"bp\">|</span> <span class=\"n\">logWarningAt</span> <span class=\"n\">id</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← mkConstWithLevelParams declName} does not have a doc string\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">bef</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">bef.isNone</span> <span class=\"k\">then</span> <span class=\"s2\">\"\"</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">bef.get</span><span class=\"bp\">!</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getString</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">aft</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">aft.isNone</span> <span class=\"k\">then</span> <span class=\"s2\">\"\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">aft.get</span><span class=\"bp\">!</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getString</span>\n        <span class=\"n\">addDocString</span> <span class=\"n\">decl</span> <span class=\"o\">(</span><span class=\"n\">bef</span> <span class=\"bp\">++</span> <span class=\"n\">doc</span> <span class=\"bp\">++</span> <span class=\"n\">aft</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid `[extend_doc]` attribute\"</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>If I import in a separate file the code above, this is what I get (as expected):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.extend_doc</span>  <span class=\"c1\">-- where the attribute is defined</span>\n\n<span class=\"sd\">/-- `foo` is `1` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">extend_doc</span> <span class=\"n\">foo</span> <span class=\"n\">before</span> <span class=\"s2\">\"`alsoFoo` looks like `foo`:\"</span> <span class=\"n\">after</span> <span class=\"s2\">\"... except that it add one to it.\"</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">alsoFoo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">alsoFoo</span>\n<span class=\"c1\">-- hover over `alsoFoo`, as expected you see</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">`alsoFoo` looks like `foo`:</span>\n\n<span class=\"cm\">`foo` is 1</span>\n\n<span class=\"cm\">... except that it add one to it.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>However, with <code>notation</code>, everything breaks down:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extend_doc</span><span class=\"kd\">]</span>  <span class=\"c1\">-- invalid `[extend_doc]` attribute, could not infer doc source</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ex_foo\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span>\n<span class=\"c1\">--  invalid `[extend_doc]` attribute, could not infer doc source</span>\n<span class=\"c1\">-- while `inherit_doc` does work</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">extend_doc</span> <span class=\"n\">foo</span> <span class=\"n\">before</span> <span class=\"s2\">\"prefix to `foo`\"</span> <span class=\"n\">after</span> <span class=\"s2\">\"suffix to `foo`\"</span><span class=\"kd\">]</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"newFoo\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">newFoo</span>\n<span class=\"c1\">--  hover shows: `foo` is 1</span>\n</code></pre></div>",
        "id": 394145665,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696134835
    },
    {
        "content": "<p>If you do this for real, those errors will go away</p>",
        "id": 394148524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696136365
    },
    {
        "content": "<p>various other parts of the system look for <code>inherit_doc</code> annotations and modify them before they execute</p>",
        "id": 394148577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696136395
    },
    {
        "content": "<p>Ok, thanks!</p>\n<p>Does this seem like a good suggestion, then?  Doing it for real means actually modifying core?</p>",
        "id": 394148717,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696136462
    },
    {
        "content": "<p>yes</p>",
        "id": 394148731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696136468
    },
    {
        "content": "<p>So, should I open an issue?  I have never done anything like this...</p>",
        "id": 394148761,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696136493
    },
    {
        "content": "<p>RFC first, I think</p>",
        "id": 394148793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696136504
    },
    {
        "content": "<p>ok, I'll look up what this actually means!</p>",
        "id": 394148825,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696136518
    },
    {
        "content": "<p>Here it is: <a href=\"https://github.com/leanprover/lean4/issues/2609\">Issue #2609</a>!</p>\n<p>It is the first time that I post an issue, so let me know if anything looks strange!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 394151434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696137867
    }
]