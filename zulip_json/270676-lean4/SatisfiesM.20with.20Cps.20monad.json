[
    {
        "content": "<p>Is it possible to write one of the <code>SatisfiesM_M_eq</code> style lemmas for the continuation monad, or is this one of the cases where the continuation monad doesn't behave nicely? E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CpsM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SatisfiesM</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">SatisfiesM</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x.run</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems like with a lawful definition of the monad instance, the subtype pulls you into a tug of war with the goal <code>x (k := fun a =&gt; a.val)) = (x (k := id)).val</code> that the lawful definitions just don't allow you to solve, but I wanted to check whether I'm crazy. The full definition of CpsM I'm using is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">CpsT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">δ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CpsT</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runK</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CpsT</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"n\">β</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CpsT</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">runK</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">CpsT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span>  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">δ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">δ</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span>   <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">δ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">δ</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">δ</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span>  <span class=\"o\">(</span><span class=\"n\">CpsT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">CpsM</span> <span class=\"o\">:=</span> <span class=\"n\">CpsT</span> <span class=\"n\">Id</span>\n</code></pre></div>",
        "id": 342857733,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1679186436
    },
    {
        "content": "<p>I don't have an answer to your question about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SatisfiesM#doc\">docs#SatisfiesM</a>, but... Does <code>Cps</code> exist anywhere in core/std4 already?</p>",
        "id": 375007988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689269093
    },
    {
        "content": "<p>I ended up implementing a CPS monad transformer independently, though it's a bit different (<code>δ</code> is fixed). Pasting it here: <em>(Edit: I guess I was bad at searching before writing this, since it's already in mathlib <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContT#doc\">docs#ContT</a>)</em></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ContT</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Variant of `run`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ContT.delimit</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x.run</span> <span class=\"n\">pure</span>\n\n<span class=\"sd\">/-- Early exit. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ContT.leave</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n\n<span class=\"sd\">/-- To lift one-argument functions into `ContT`. Synonym for `ContT.mk`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ContT.ofFn</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- To lift two-argument functions into `ContT`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ContT.ofFn₂</span> <span class=\"o\">{</span><span class=\"n\">β'</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β'</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">β'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[always_inline]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonadExceptOf</span> <span class=\"n\">ε</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadExceptOf</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">throw</span> <span class=\"n\">e</span>  <span class=\"o\">:=</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">throw</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"n\">tryCatch</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tryCatchThe</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">x.run</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ContT.pure</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ContT.bind</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.run</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">ContT.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">ContT.bind</span>\n\n<span class=\"c1\">-- From Chris</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"o\">(</span><span class=\"n\">ContT</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 375021194,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689272051
    },
    {
        "content": "<p>One application is using it to make it so local declaration functions in <code>MetaM</code> can put their new variables on the LHS and save on some nesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkIndic</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">ContT.delimit</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arg</span> <span class=\"bp\">←</span> <span class=\"bp\">.</span><span class=\"n\">ofFn</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withLocalDeclD</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">x</span> <span class=\"n\">arg</span>\n  <span class=\"n\">mkForallFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">arg</span><span class=\"o\">]</span> <span class=\"n\">eq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arity</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">ContT.delimit</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"bp\">.</span><span class=\"n\">ofFn₂</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">forallTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">args.size</span>\n</code></pre></div>\n<p>I'm not sure if this is a great idea (I don't like how it gives you less control over how long local declarations are still around), but it's interesting</p>",
        "id": 375021867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689272217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris Bailey</span> In case you still care, that example isn't true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">bad</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CpsM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SatisfiesM</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">SatisfiesM</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x.run</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">bad</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">SatisfiesM</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CpsM</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">δ</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">=</span> <span class=\"n\">Bool</span> <span class=\"k\">then</span>\n      <span class=\"n\">h1.mpr</span> <span class=\"n\">false</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">run</span><span class=\"o\">,</span> <span class=\"n\">runK</span><span class=\"o\">,</span> <span class=\"n\">Functor.map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>(this is using <code>import Mathlib</code>)</p>",
        "id": 375034198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689274803
    },
    {
        "content": "<p>What's ContT.delimit in the mathlib spelling?</p>",
        "id": 375063483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689282898
    },
    {
        "content": "<p>I don't see it, at least not in that module.</p>\n<p>When you combine it with monad lifting, it's sort of implementing delimited continuations (which is why I called it <code>ContT.delimit</code>), in particular the <code>reset</code> operator; the <code>ContT</code> constructor is <code>shift</code>.</p>",
        "id": 375065777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689283672
    },
    {
        "content": "<p>I was able to work out what I needed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5863\">#5863</a></p>",
        "id": 375073807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689286641
    },
    {
        "content": "<p>I think <code>ofFun</code> would probably be handy, as right now I have to use a <code>show</code></p>",
        "id": 375073843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689286656
    },
    {
        "content": "<p>The other stumbling block is that I can't seem to throw an exception from within ContT; I haven't yet worked out if this is to be expected, or just a trivial missing instance.</p>",
        "id": 375073983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689286699
    },
    {
        "content": "<p>Ah, fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5897\">#5897</a></p>",
        "id": 375219375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689333906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/SatisfiesM.20with.20Cps.20monad/near/375034198\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris Bailey</span> In case you still care, that example isn't true</p>\n</blockquote>\n<p>Thank you, mystery solved.</p>",
        "id": 377326590,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1689950803
    }
]