[
    {
        "content": "<p><del>It seems the <code>doc</code> facet from <code>doc-gen4</code> was renamed to <code>docs</code>, and I only discovered this thanks to <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> reading the sources. </del></p>\n<p>How does one actually list all targets / facets available from <code>lake</code>?</p>\n<p>CC <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 402026611,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699980313
    },
    {
        "content": "<p>In fixing this I discovered a (I claim) bug.</p>\n<p>Say that you have a lakefile.lean configured with doc-gen like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"dev\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- dev is so not everyone has to build it</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>on leanprover/lean4:v4.3.0-rc1</p>\n<p>Now you compile your package normally with <code>lake build</code>. Then you decide that you wish to build docs so you run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">build</span> <span class=\"n\">Std</span><span class=\"o\">:</span><span class=\"n\">docs</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">library</span> <span class=\"n\">facet</span> <span class=\"bp\">`</span><span class=\"n\">docs</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>Well that's confusing :), after a bit of tinkering I figured out I can run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"n\">build</span> <span class=\"n\">Std</span><span class=\"o\">:</span><span class=\"n\">docs</span>\n</code></pre></div>\n<p>and this works. So forcing lake to re-elaborate the cached config file apparently ends up working? is this a caching bug or intended? I can hardly imagine stuff like this is on purpose right?</p>",
        "id": 402051553,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699989017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> explained the <code>-R</code> option to me here a few days ago: <a href=\"#narrow/stream/113488-general/topic/deleting.20lakefile.2Eolean\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/deleting.20lakefile.2Eolean</a></p>\n<p>and I understood the explanation that it is intended design and you should liberally use <code>lake -R</code> everywhere now.</p>",
        "id": 402053605,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699989712
    },
    {
        "content": "<p>The issue here is a design decision that I delayed. Namely, what should Lake do when <code>-K</code> is passed with an existing saved configuration without <code>-R</code>.   I see two solutions to the current confusion:</p>\n<ol>\n<li>Automatically reconfigure with the new options. To unset options, though, <code>-R</code> would still be needed.</li>\n<li>Ignore the options and produce an error if <code>-R</code> is not passed.</li>\n</ol>\n<p>Presently, as mentioned in <a href=\"https://github.com/leanprover/lean4/releases/tag/v4.1.0\">v4.1.0 release notes</a>, the options are just ignored. I am currently inclined to see (2) as the proper solution as it does not produce an incongruency between when no-option and some-option configurations are reconfigured.</p>",
        "id": 402056195,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699990608
    },
    {
        "content": "<p>(One thing to note is the saved configuration is not meant solely as a cache is is also meant to save the full state including options for future <code>lake</code> commands -- like the server -- so they do not have to be repeated.)</p>",
        "id": 402056458,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699990719
    },
    {
        "content": "<p>Would in (1) mean that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">KoptA</span> <span class=\"n\">build</span>\n<span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">KoptB</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>results in both options being set in the second build? That would indeed sound confusing, while (2) sounds helpful and instructive.</p>",
        "id": 402056791,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699990892
    },
    {
        "content": "<blockquote>\n<p>Automatically reconfigure with the new options. To unset options, though, -R would still be needed.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> in my mind, as an end-user, this is what I would expect to see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/*</span> <span class=\"n\">clean</span> <span class=\"n\">state</span> <span class=\"bp\">*/</span>\n<span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">KoptA</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- lake builds a cache with `optA`</span>\n<span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">KoptB</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- lake flushes cache, rebuilds cache w/ `optB`</span>\n<span class=\"bp\">/*</span> <span class=\"n\">project</span> <span class=\"n\">changes</span> <span class=\"bp\">*/</span>\n<span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">KoptB</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- lake reuses prior cache</span>\n</code></pre></div>",
        "id": 402058327,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699991577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> what do you expect <code>lake build</code> (with no <code>-K</code>) to do in each of those circumstances?</p>",
        "id": 402058394,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699991617
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/*</span> <span class=\"n\">clean</span> <span class=\"n\">state</span> <span class=\"bp\">*/</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- lake builds a cache with `no options`</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- lake reuses prior cache (env did not change)</span>\n<span class=\"bp\">/*</span> <span class=\"n\">project</span> <span class=\"n\">changes</span> <span class=\"bp\">*/</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- lake reuses prior cache (env did not change)</span>\n</code></pre></div>\n<p>I feel like I'm missing something here?</p>",
        "id": 402058620,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699991705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402058394\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> what do you expect <code>lake build</code> (with no <code>-K</code>) to do in each of those circumstances?</p>\n</blockquote>\n<p>Can't you load the lake state (if it's there) and check if your -Ks match the one that the cached state knows about? That should be very cheap to compare correct? And based on the result of that you can either keep going or re-elaborate.</p>",
        "id": 402058726,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699991760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Sorry, no , I mean the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">-</span><span class=\"n\">KoptA</span> <span class=\"c1\">-- saved iwth `optA`</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"c1\">-- does this have `optA` or not?</span>\n</code></pre></div>",
        "id": 402058796,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699991775
    },
    {
        "content": "<p>Doesn't have it IMO</p>",
        "id": 402058822,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699991791
    },
    {
        "content": "<p>You could run these commands far apart from each other and have completely forgotten about the fact that you ran with different options before</p>",
        "id": 402058914,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699991837
    },
    {
        "content": "<p>Ah, in that case, the goal here is different. The point of the current design is to enable saving options (and environment state) so they do not have to  be repeated -- not solely a cache.</p>",
        "id": 402058971,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699991867
    },
    {
        "content": "<p>That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ENVA</span><span class=\"bp\">=</span><span class=\"n\">foo</span> <span class=\"n\">lake</span> <span class=\"n\">buld</span> <span class=\"bp\">-</span><span class=\"n\">KoptA</span><span class=\"bp\">=</span><span class=\"n\">bar</span> <span class=\"bp\">-</span><span class=\"n\">KoptB</span><span class=\"bp\">=</span><span class=\"n\">baz</span> <span class=\"bp\">...</span>\n<span class=\"n\">lake</span> <span class=\"n\">serve</span> <span class=\"c1\">-- should run with previous options</span>\n</code></pre></div>",
        "id": 402059134,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699991937
    },
    {
        "content": "<p>Configuration options are not meant to generally vary per command, but be an initial configuration set like Cargo features or CMake options.</p>",
        "id": 402059265,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699992000
    },
    {
        "content": "<p>Shouldn't behavior that persists across invocations be part of a human readable config file instead of a binary blob?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402059265\">said</a>:</p>\n<blockquote>\n<p>Configuration options are not meant variant per action, but an initial configuration set like Cargo features.</p>\n</blockquote>\n<p>Cargo features too are passed to libraries in plain text in Cargo.toml instead of some hidden thingy</p>",
        "id": 402059473,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699992043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402059265\">said</a>:</p>\n<blockquote>\n<p>Configuration options are not meant variant per action, but an initial configuration set like Cargo features or CMake options.</p>\n</blockquote>\n<p>I was going to say, the only build system that I know of with similar behavior is CMake, and I personally dislike the <code>CMakeCache</code>.</p>",
        "id": 402059502,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699992052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402059473\">said</a>:</p>\n<blockquote>\n<p>Cargo features too are passed to libraries in plain text in Cargo.toml instead of some hidden thingy</p>\n</blockquote>\n<p>Yes. to downstream packages. But, for the root package, they are passed via CLI. (As they in both cases in Lake.)</p>",
        "id": 402059654,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699992092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402059654\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402059473\">said</a>:</p>\n<blockquote>\n<p>Cargo features too are passed to libraries in plain text in Cargo.toml instead of some hidden thingy</p>\n</blockquote>\n<p>Yes to downstream packages, but they are not to the root package (they are passed via CLI (as they in both cases in Lake.)</p>\n</blockquote>\n<p>Wow, I did not know this about <code>cargo</code> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 402060046,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699992212
    },
    {
        "content": "<p>Oh, well <a href=\"https://doc.rust-lang.org/cargo/reference/features.html\">here are the docs on Cargo's features</a>.</p>",
        "id": 402060294,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699992306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402060046\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402059654\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402059473\">said</a>:</p>\n<blockquote>\n<p>Cargo features too are passed to libraries in plain text in Cargo.toml instead of some hidden thingy</p>\n</blockquote>\n<p>Yes to downstream packages, but they are not to the root package (they are passed via CLI (as they in both cases in Lake.)</p>\n</blockquote>\n<p>Wow, I did not know this about <code>cargo</code> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I understood this to mean that <code>cargo build</code> also holds onto invisible, mutable state across executions based on command line configuration flags. Is that right?</p>",
        "id": 402060309,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699992310
    },
    {
        "content": "<p>Kind of, if you run <code>cargo build --feature blah</code> and then <code>cargo test</code>, it is my understanding the feature will be invisibly preserved.</p>",
        "id": 402060506,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699992384
    },
    {
        "content": "<p>I understand <code>test</code> (and <code>lake serve</code>, FWIW) choosing to reuse the <code>build</code> configuration, but do two invocations of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cargo</span> <span class=\"n\">build</span> <span class=\"c1\">--feature blah</span>\n<span class=\"n\">cargo</span> <span class=\"n\">build</span> <span class=\"bp\">#</span> <span class=\"n\">does</span> <span class=\"n\">this</span> <span class=\"n\">implicitly</span> <span class=\"n\">imply</span> <span class=\"bp\">`</span><span class=\"c1\">--feature`?</span>\n</code></pre></div>",
        "id": 402060565,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699992415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402060506\">said</a>:</p>\n<blockquote>\n<p>Kind of, if you run <code>cargo build --feature blah</code> and then <code>cargo test</code>, it is my understanding the feature will be invisibly preserved.</p>\n</blockquote>\n<p>I gotta admit, I have never seen that a person set a cargo feature from the command line so I wouldn't know.</p>",
        "id": 402060674,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699992461
    },
    {
        "content": "<p>I'm gonna check this behavior</p>",
        "id": 402060807,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699992497
    },
    {
        "content": "<p>To be productive, another solution that I would be happy with is:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>configure<span class=\"w\"> </span>-KoptA<span class=\"o\">=</span>valA\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optA=valA</span>\nlake<span class=\"w\"> </span>configure<span class=\"w\"> </span>-KoptB<span class=\"o\">=</span>valB\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optB=valB</span>\nlake<span class=\"w\"> </span>configure<span class=\"w\"> </span>--append<span class=\"w\"> </span>-KoptC<span class=\"o\">=</span>valC\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optB=valB, optC=valC</span>\n</code></pre></div>",
        "id": 402060957,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699992572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402058796\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">-</span><span class=\"n\">KoptA</span> <span class=\"c1\">-- saved iwth `optA`</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"c1\">-- does this have `optA` or not?</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Although I didnt realise immediately, I think my use case actually aligns with your currently implemented solution, namely that it keeps the option ever after</p>\n<p>i.e. I am running</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">update</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">-</span><span class=\"n\">Kuse.local.dev.depend</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"c1\">-- potentially repeatedly after changes</span>\n</code></pre></div>",
        "id": 402060965,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699992573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Admittedly, I have not verified the preserved state either. But I am not sure what else it would do. Furthermore, you can also set features via environment variables which definitely can be preserved across commands.</p>",
        "id": 402061020,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699992602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402060957\">said</a>:</p>\n<blockquote>\n<p>To be productive, another solution that I would be happy with is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>configure<span class=\"w\"> </span>-KoptA<span class=\"o\">=</span>valA\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optA=valA</span>\nlake<span class=\"w\"> </span>configure<span class=\"w\"> </span>-KoptB<span class=\"o\">=</span>valB\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optB=valB</span>\nlake<span class=\"w\"> </span>configure<span class=\"w\"> </span>--append<span class=\"w\"> </span>-KoptC<span class=\"o\">=</span>valC\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optB=valB, optC=valC</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, this is the final intention.</p>",
        "id": 402061102,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699992621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402060957\">said</a>:</p>\n<blockquote>\n<p>To be productive, another solution that I would be happy with is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>configure<span class=\"w\"> </span>-KoptA<span class=\"o\">=</span>valA\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optA=valA</span>\nlake<span class=\"w\"> </span>configure<span class=\"w\"> </span>-KoptB<span class=\"o\">=</span>valB\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optB=valB</span>\nlake<span class=\"w\"> </span>configure<span class=\"w\"> </span>--append<span class=\"w\"> </span>-KoptC<span class=\"o\">=</span>valC\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"c1\"># has optB=valB, optC=valC</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I prefer this, because it's clear to me which options mutate this hidden state, and which operations keep the mutable state.</p>",
        "id": 402061124,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699992632
    },
    {
        "content": "<p>Me too. <code>-R</code> and the current auto-configure just exist to reduce the number of commands required to perform a build, which I know is a goal of a lot of the math people. (And the lack of <code>configure</code> is just due to backlog.)</p>",
        "id": 402061562,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699992810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402061020\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> Admittedly, I have not verified the preserved state either. But I am not sure what else it would do. Furthermore, you can also set features via environment variables which definitely can be preserved across commands.</p>\n</blockquote>\n<p>Cargo does not act like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">cat</span> <span class=\"n\">Cargo.toml</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">main.rs</span>\n<span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"mine\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span> <span class=\"bp\">=</span> <span class=\"s2\">\"2021\"</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">See</span> <span class=\"n\">more</span> <span class=\"n\">keys</span> <span class=\"n\">and</span> <span class=\"n\">their</span> <span class=\"n\">definitions</span> <span class=\"n\">at</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">doc.rust</span><span class=\"bp\">-</span><span class=\"n\">lang.org</span><span class=\"bp\">/</span><span class=\"n\">cargo</span><span class=\"bp\">/</span><span class=\"n\">reference</span><span class=\"bp\">/</span><span class=\"n\">manifest.html</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">features</span><span class=\"o\">]</span>\n<span class=\"n\">hello</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n<span class=\"n\">world</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n<span class=\"n\">fn</span> <span class=\"n\">main</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">cfg</span><span class=\"o\">(</span><span class=\"n\">feature</span> <span class=\"bp\">=</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)]</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">cfg</span><span class=\"o\">(</span><span class=\"n\">feature</span> <span class=\"bp\">=</span> <span class=\"s2\">\"world\"</span><span class=\"o\">)]</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"World\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">run</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span>\n     <span class=\"n\">Running</span> <span class=\"bp\">`</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">`</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">run</span> <span class=\"c1\">--features hello</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span>\n     <span class=\"n\">Running</span> <span class=\"bp\">`</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">`</span>\n<span class=\"n\">Hello</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">run</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span>\n     <span class=\"n\">Running</span> <span class=\"bp\">`</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">`</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">build</span> <span class=\"c1\">--features world                                                      &lt;&lt;&lt;</span>\n   <span class=\"n\">Compiling</span> <span class=\"n\">mine</span> <span class=\"n\">v0.1.0</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">rust</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"o\">)</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">14</span><span class=\"n\">s</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">run</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span>\n     <span class=\"n\">Running</span> <span class=\"bp\">`</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">`</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">run</span> <span class=\"c1\">--features world</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span>\n     <span class=\"n\">Running</span> <span class=\"bp\">`</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">`</span>\n<span class=\"n\">World</span>\n</code></pre></div>",
        "id": 402061622,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699992835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> From its output, It does not recompile, so how is that working? What happens when you run the binary directly?</p>",
        "id": 402061846,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699992935
    },
    {
        "content": "<p>I suspect is is performing a runtime check on the environment variable.</p>",
        "id": 402062021,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699993014
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ligurien</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">rust</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">|</span><span class=\"n\">master</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">build</span> <span class=\"c1\">--features world</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span>\n<span class=\"n\">ligurien</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">rust</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">|</span><span class=\"n\">master</span>\n<span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">build</span>                                                                       <span class=\"bp\">&lt;&lt;&lt;</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span>\n<span class=\"n\">ligurien</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">rust</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">|</span><span class=\"n\">master</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">./</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">mine</span>\n<span class=\"n\">ligurien</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">rust</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">|</span><span class=\"n\">master</span>\n</code></pre></div>\n<p>Nothing, I think it might just be so fast to recompile that it doesn't even measure it properly? Unclear.</p>",
        "id": 402062023,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699993014
    },
    {
        "content": "<p>That said it seems to keep a bunch of incremental build artefacts around:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">tree</span> <span class=\"n\">target</span>\n<span class=\"n\">target</span>\n<span class=\"bp\">├──</span> <span class=\"n\">CACHEDIR.TAG</span>\n<span class=\"bp\">└──</span> <span class=\"n\">debug</span>\n    <span class=\"bp\">├──</span> <span class=\"n\">build</span>\n    <span class=\"bp\">├──</span> <span class=\"n\">deps</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">libmine</span><span class=\"bp\">-</span><span class=\"mi\">5599</span><span class=\"n\">a1cf35f8afea.rmeta</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">libmine</span><span class=\"bp\">-</span><span class=\"mi\">59</span><span class=\"n\">cdf6782576d786.rmeta</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"mi\">24043507</span><span class=\"n\">f9f731c1</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"mi\">24043507</span><span class=\"n\">f9f731c1.d</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"mi\">5599</span><span class=\"n\">a1cf35f8afea.d</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"mi\">59</span><span class=\"n\">cdf6782576d786.d</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"n\">b90cc72d39bcb107</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"n\">b90cc72d39bcb107.d</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"n\">fa080969f27f2053</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"n\">fa080969f27f2053.d</span>\n    <span class=\"bp\">├──</span> <span class=\"n\">examples</span>\n    <span class=\"bp\">├──</span> <span class=\"n\">incremental</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"n\">zvd1w7zv712t</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhvcegw5</span><span class=\"bp\">-</span><span class=\"mi\">16</span><span class=\"n\">eq0ds</span><span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"n\">nk6kh24miwfpb1pzvk2tvn5y</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">1</span><span class=\"n\">aq49z2q662ja0ge.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">2379</span><span class=\"n\">j1b0m5z0emoj.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">5</span><span class=\"n\">edpcnpjgyvidush.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">dep</span><span class=\"bp\">-</span><span class=\"n\">graph.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">fknko5h9wjn6cpi.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">hasfm8b61wclylo.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">query</span><span class=\"bp\">-</span><span class=\"n\">cache.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">work</span><span class=\"bp\">-</span><span class=\"n\">products.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhvcegw5</span><span class=\"bp\">-</span><span class=\"mi\">16</span><span class=\"n\">eq0ds.lock</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"mi\">20</span><span class=\"n\">tbrvg6e9x35</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhvqnmnb</span><span class=\"bp\">-</span><span class=\"mi\">17305</span><span class=\"n\">wh</span><span class=\"bp\">-</span><span class=\"n\">dzz0ltxkn6fcku5hf8vnzjjz2</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">2</span><span class=\"n\">jsfb0ftzpbd2fw5.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">3</span><span class=\"n\">w3rfdw356hqahie.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">478</span><span class=\"n\">gw85nnras31zs.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">4</span><span class=\"n\">cxzivuuj1mj9q34.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">5</span><span class=\"n\">cyrdqmow68ul05g.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">c2kgn36td7i1k0b.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">dep</span><span class=\"bp\">-</span><span class=\"n\">graph.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">query</span><span class=\"bp\">-</span><span class=\"n\">cache.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">work</span><span class=\"bp\">-</span><span class=\"n\">products.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhvqnmnb</span><span class=\"bp\">-</span><span class=\"mi\">17305</span><span class=\"n\">wh.lock</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"mi\">38</span><span class=\"n\">vnh5ay7usv9</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhwwstd2</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"n\">yriovp</span><span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"n\">ivc1fwn2n1t4n8m4z20qwah2</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">17</span><span class=\"n\">ti41rx9l3ccxnt.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">1</span><span class=\"n\">onbuctrgru0i7vp.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">2</span><span class=\"n\">xnxudfgrhbx0jrp.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">4</span><span class=\"n\">dj41tw4kzqki0j3.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"mi\">4</span><span class=\"n\">o0x0pmg72xo4frm.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">dep</span><span class=\"bp\">-</span><span class=\"n\">graph.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">query</span><span class=\"bp\">-</span><span class=\"n\">cache.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">sxaptfaomtf93r7.o</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">work</span><span class=\"bp\">-</span><span class=\"n\">products.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhwwstd2</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"n\">yriovp.lock</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"n\">ag5rbzj8rkgv</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhv2q8aq</span><span class=\"bp\">-</span><span class=\"n\">jjezk6</span><span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"n\">my3xbkn24r0n3jquoectweo3</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">dep</span><span class=\"bp\">-</span><span class=\"n\">graph.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">query</span><span class=\"bp\">-</span><span class=\"n\">cache.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">work</span><span class=\"bp\">-</span><span class=\"n\">products.bin</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhv2q8aq</span><span class=\"bp\">-</span><span class=\"n\">jjezk6.lock</span>\n    <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">mine</span><span class=\"bp\">-</span><span class=\"n\">qpilry2ztwwh</span>\n    <span class=\"bp\">│</span>       <span class=\"bp\">├──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhv2q8bw</span><span class=\"bp\">-</span><span class=\"n\">pvkqvc</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"n\">rmlythn49ud8oged19szgckq</span>\n    <span class=\"bp\">│</span>       <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">dep</span><span class=\"bp\">-</span><span class=\"n\">graph.bin</span>\n    <span class=\"bp\">│</span>       <span class=\"bp\">│</span>   <span class=\"bp\">├──</span> <span class=\"n\">query</span><span class=\"bp\">-</span><span class=\"n\">cache.bin</span>\n    <span class=\"bp\">│</span>       <span class=\"bp\">│</span>   <span class=\"bp\">└──</span> <span class=\"n\">work</span><span class=\"bp\">-</span><span class=\"n\">products.bin</span>\n    <span class=\"bp\">│</span>       <span class=\"bp\">└──</span> <span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">gqlhv2q8bw</span><span class=\"bp\">-</span><span class=\"n\">pvkqvc.lock</span>\n    <span class=\"bp\">├──</span> <span class=\"n\">mine</span>\n    <span class=\"bp\">└──</span> <span class=\"n\">mine.d</span>\n</code></pre></div>\n<p>I would not be surprised if these are for different feature constellations</p>",
        "id": 402062258,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699993113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> What does the following do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">build</span> <span class=\"c1\">--features world</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">./</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">mine</span>\n</code></pre></div>",
        "id": 402062400,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699993179
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">cargo</span> <span class=\"n\">build</span> <span class=\"c1\">--features world</span>\n    <span class=\"n\">Finished</span> <span class=\"n\">dev</span> <span class=\"o\">[</span><span class=\"n\">unoptimized</span> <span class=\"bp\">+</span> <span class=\"n\">debuginfo</span><span class=\"o\">]</span> <span class=\"n\">target</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span>\n<span class=\"n\">ligurien</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">rust</span><span class=\"bp\">/</span><span class=\"n\">mine</span><span class=\"bp\">|</span><span class=\"n\">master</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">./</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">mine</span>\n<span class=\"n\">World</span>\n</code></pre></div>\n<p>If that would have been any different I would have thrown Rust right out of the window.</p>",
        "id": 402062575,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699993239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Okay, so it appears Cargo does require you specify the options at each step but it stores the results for different configurations separately so it can easily switch  between them. Whereas, e.g., CMake saves a single configuration. So it is a question of space and repeativeness.</p>",
        "id": 402063284,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699993531
    },
    {
        "content": "<p>Personally, I like the configure then build, run, etc. approach more than the repeat the configuration at each step.</p>",
        "id": 402063421,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699993585
    },
    {
        "content": "<p>Technically, it also makes save a configuration to be used by the server easier than having to configure it separately via options in the extension.</p>",
        "id": 402063594,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699993667
    },
    {
        "content": "<p>Actually, that raises a question. Does Rust/Cargo's VS Code extension have a features option?</p>",
        "id": 402063735,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699993713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I would prefer the transient behaviour (before we get to the separate <code>lake configure</code> that modifies configuration and <code>lake build</code> that builds) to be like <code>cargo</code>.</p>",
        "id": 402063764,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699993729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Well, each require about the same amount of time to add, so I would probably just add <code>lake configure</code>.</p>",
        "id": 402063902,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699993787
    },
    {
        "content": "<p>Right if we make this with lake configure I think it's cool, I merely found the idea of setting an option while <code>build</code>-ing very unintuitive.</p>\n<p>On a more general note: Are we planning on having a rust style <code>dev-dependencies</code> type of thing?</p>",
        "id": 402064122,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699993847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402064122\">said</a>:</p>\n<blockquote>\n<p>I merely found the idea of setting an option while <code>build</code>-ing very unintuitive.</p>\n</blockquote>\n<p>Agreed. As I mentioned, this was mostly a compromise to just allow simple one liners for math users and me just not finding the time to also add <code>lake configure</code>. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 402064521,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699994002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402064122\">said</a>:</p>\n<blockquote>\n<p>On a more general note: Are we planning on having a rust style <code>dev-dependencies</code> type of thing?</p>\n</blockquote>\n<p>What do you mean? How are you envisioning this to be different from the current <code>meta if</code>?</p>",
        "id": 402064658,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699994053
    },
    {
        "content": "<p>Well dev-dependencies is a more implicit thing in cargo. Basically you have two lists of dependencies the <code>[dependencies]</code> and the <code>[dev-dependencies]</code> one. <code>dependencies</code> are the one your consumers get to see (they can also be gated behind feature gates) <code>dev-dependencies</code> are automatically activated (note the word activated, they don't have to be compiled, like e.g. doc-gen) if the Cargo thing you are building is the root module (I am not sure how it interacts with workspaces) So what you commonly see in the cargo world is that you declare testing frameworks, benchmarkings etc. as dev-dependencies so that only your developers have to build them.</p>\n<p>It is not really semantically different from a feature and could well be emulated by it but it is a whole lot easier to use due to its implicit nature and improved usability I would say. Both of these (especially the improved usability with respect to <code>meta if config....</code> would be present in lake as well</p>",
        "id": 402065125,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699994245
    },
    {
        "content": "<p>Another thing that I've been thinking about: It would be pretty nice if we had a global cache for package source downloads like cargo does. I've gotten like half a dozen mathlibs laying around by now, my poor hard drive ^^</p>",
        "id": 402066064,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699994610
    },
    {
        "content": "<p>Are they the same version of mathlib, though?</p>",
        "id": 402066355,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699994724
    },
    {
        "content": "<p>at least 3 of them are very close to each other although I don't know if they are the same.</p>\n<p>That said, given the fact that we check them out as git repos and do not (yet) distribute them as source packages should allow us to share regardless.</p>",
        "id": 402067331,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699995101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402065125\">said</a>:</p>\n<blockquote>\n<p>Both of these (especially the improved usability with respect to <code>meta if config....</code> would be present in lake as well</p>\n</blockquote>\n<p>One current plan is to replace <code>meta if cond then require ...</code> with <code>require ... if cond</code>. I could also add an <code>isRoot</code> util for determining if a package is the root package. Thus, requiring doc-gen could work like <code>require doc-gen4 if isRoot ..</code>. Would that be ergonomic to you? Or would you prefer something like <code>require dev doc-gen4</code>?</p>",
        "id": 402070427,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699996291
    },
    {
        "content": "<p>I think that's much better than the meta if thing already, if it comes down to it we could always add the require dev later <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 402070572,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699996352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402061124\">said</a>:</p>\n<blockquote>\n<p>... which options mutate this hidden state, and which operations keep the mutable state ...</p>\n</blockquote>\n<p>I would prefer to not have <em>any</em> mutatable hidden state in the first place? All state should be in human readable text files.</p>",
        "id": 402110868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700012324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402110868\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402061124\">said</a>:</p>\n<blockquote>\n<p>... which options mutate this hidden state, and which operations keep the mutable state ...</p>\n</blockquote>\n<p>I would prefer to not have <em>any</em> mutatable hidden state in the first place? All state should be in human readable text files.</p>\n</blockquote>\n<p>That would be nice, but in the interest of balancing usability with purity... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 402113796,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1700013550
    },
    {
        "content": "<p>I don't think there's a usability question here at all, is there?</p>",
        "id": 402114194,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700013676
    },
    {
        "content": "<p>The only reason this mutable hidden state exists at all is the <code>lakefile.olean</code> trick, which was introduced solely as a performance workaround.</p>",
        "id": 402114274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700013702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402114194\">said</a>:</p>\n<blockquote>\n<p>I don't think there's a usability question here at all, is there?</p>\n</blockquote>\n<p>Hm, so the suggestion would be that these are in some kind of <code>toml</code> configuration file that <code>lake</code> reads? Sure, that works for me. It might still be nice to have CLI commands to edit this file via <code>lake configure</code>.</p>",
        "id": 402114432,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1700013739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402114274\">said</a>:</p>\n<blockquote>\n<p>The only reason this mutable hidden state exists at all is the <code>lakefile.olean</code> trick, which was introduced solely as a performance workaround.</p>\n</blockquote>\n<p>I am not sure what qualifies as \"mutable hidden state\" here. The entire build system involves what I would call 'mutable hidden state\" (build artifacts are a kind of mutable state and they are not all transparent and things like the trace files are especially so).</p>",
        "id": 402148792,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700027294
    },
    {
        "content": "<p>Build <em>caches</em> are an acceptable form of mutable state only because they do not change the result of any command, only the amount of time required to run the command. Mutable state that changes the result of later commands is IMO unacceptable, unless it is stored in plain text files or at least has a very clear and well documented CLI interface for showing and setting the state. As far as I know there is no such state in cargo.</p>",
        "id": 402163978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700033626
    },
    {
        "content": "<p>(For example, <code>elan</code>/<code>rustup</code> has caches for toolchains, and mutable state for setting toolchain overrides and the default toolchain, but there are very explicit commands for displaying what the current state is and many of the other commands remind you what the current state is. Even so this mutable state can trip people up.)</p>",
        "id": 402164304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700033737
    },
    {
        "content": "<p>If you want to set features (for the root project) in cargo, you do actually have to pass <code>--feature=foo</code> to every single cargo command you run, if you forget one then it will recompile the project without the feature.</p>",
        "id": 402164751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700033902
    },
    {
        "content": "<p>Normally what I will do if this gets too annoying is modify <code>Cargo.toml</code> to set the default features to what I am using ATM, and try not to commit it</p>",
        "id": 402164945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700033992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402163978\">said</a>:</p>\n<blockquote>\n<p>Build <em>caches</em> are an acceptable form of mutable state only because they do not change the result of any command, only the amount of time required to run the command.</p>\n</blockquote>\n<p>Given that one can run arbitrary IO in a Lean file rebuilding or not can easy change the result of a command. Lake (and Cargo in build scripts) can also do additional arbitrary actions on build which can save and store state, so it seems weird to me to assume that no state exists.</p>",
        "id": 402171350,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700036149
    },
    {
        "content": "<p>you shouldn't make the problem any worse than it already is</p>",
        "id": 402175654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700037590
    },
    {
        "content": "<p>yes, build scripts <em>can</em> do arbitrary IO, but people writing build scripts should \"know what they are doing\" and in particular should know that they are not always called and should try to act as though they don't have any mutable state besides caches because otherwise lake will act strangely</p>",
        "id": 402175905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700037673
    },
    {
        "content": "<p>if they don't do so and weird things happen, the fault lies with the build script doing shenanigans</p>",
        "id": 402176067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700037725
    },
    {
        "content": "<p>It's not that \"no state exists\", it's that the presence of this state should not affect end user behavior. If it does, it becomes an additional thing the user has to think about and they can't just blindly run <code>lake build</code> to get everything in a coherent state anymore, now they are doing some maze solving with lake commands as the actions</p>",
        "id": 402176386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700037833
    },
    {
        "content": "<p>Gentle reminder that one very similar hidden mutable state, <code>elan toolchain override</code>, has turned out to be a terrible idea and desperately wants to be replaced with a file-based solution that one can actually see in <code>git status</code></p>",
        "id": 402177750,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700038282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402176386\">said</a>:</p>\n<blockquote>\n<p>they can't just blindly run <code>lake build</code> to get everything in a coherent state anymore, now they are doing some maze solving with lake commands as the actions</p>\n</blockquote>\n<p>A user can still nuke <code>.lake</code> to blindly get back to a fully fresh state. IMO the big problem with <code>elan toolchain override</code> was that the state was not in the directory it controlled but rather part of the central configuration. If there was a file anywhere in the directory, even ignored, one could look for to indicate that there was an override much of the confusion would have been mitigated.</p>",
        "id": 402184205,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700040235
    },
    {
        "content": "<p>no, that is not good enough</p>",
        "id": 402185538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700040558
    },
    {
        "content": "<p>that's just saying that you can make a mess with the state</p>",
        "id": 402185582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700040572
    },
    {
        "content": "<p>\"you can always just throw the maze away and reset\"</p>",
        "id": 402185641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700040591
    },
    {
        "content": "<p>the goal here is not to delete all state, and if the user needs to do this then they will be deleting a lot of state that they would prefer not to (like build caches) in order to fix the mutable state that is causing the problem</p>",
        "id": 402185962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700040682
    },
    {
        "content": "<p>your usage of the term \"nuke\" already underscores this, it is a simple but very destructive solution to a problem with many downsides</p>",
        "id": 402186168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700040744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402110868\">said</a>:</p>\n<blockquote>\n<p>All state should be in human readable text files.</p>\n</blockquote>\n<p>One thing I forgot to note is that with <a href=\"https://github.com/leanprover/lean4/pull/2842\">lean4#2842</a>, the options used to produce the <code>lakefile.olean</code> will be in a human-readable text file (<code>lakefile.olean.trace</code>).</p>",
        "id": 402336501,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700086117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402185962\">said</a>:</p>\n<blockquote>\n<p>the goal here is not to delete all state, and if the user needs to do this then they will be deleting a lot of state that they would prefer not to (like build caches)</p>\n</blockquote>\n<p>If the user wants to be more precise, they could just delete the compiled configuration files (e.g., <code>lakefile.olean</code>) or just use the <code>-R</code> to regenerate it. My point with the nuking is that if one wants to make sure any and all potential state is cleared for a specific project, they can nuke the whole <code>.lake</code> directory.</p>",
        "id": 402336684,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700086204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402336501\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402110868\">said</a>:</p>\n<blockquote>\n<p>All state should be in human readable text files.</p>\n</blockquote>\n<p>One thing I forgot to note is that with <a href=\"https://github.com/leanprover/lean4/pull/2842\">lean4#2842</a>, the options used to produce the <code>lakefile.olean</code> will be in a human-readable text file (<code>lakefile.olean.trace</code>).</p>\n</blockquote>\n<p>Thanks, although I think this is a really bad name for it, <code>.trace</code> files are currently hashes of the corresponding file so one would not expect it to be human readable, plus this is not a \"trace of the olean of the lakefile\", this is \"default configuration options\" and it should have a name reflecting that like <code>lake-config.json</code> or whatever format it is in</p>",
        "id": 402340689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700088234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402336684\">said</a>:</p>\n<blockquote>\n<p>If the user wants to be more precise, they could just delete the compiled configuration files (e.g., <code>lakefile.olean</code>) or just use the <code>-R</code> to regenerate it. My point with the nuking is that if one wants to make sure any and all potential state is cleared for a specific project, they can nuke the whole <code>.lake</code> directory.</p>\n</blockquote>\n<p>Unless I specifically opt in to having sticky mutable state hanging around, I don't want to have to deal with it! Where's the sticky mutable state to make <code>-R</code> the default? (But without having to pay a performance cost for doing so.)</p>",
        "id": 402341043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700088401
    },
    {
        "content": "<p><code>lakefile.olean</code> is a cache file, nothing more. Please don't make it more than that</p>",
        "id": 402341175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700088481
    },
    {
        "content": "<p>I don't want to hold up <a href=\"https://github.com/leanprover/lean4/pull/2842\">https://github.com/leanprover/lean4/pull/2842</a> on this question, because I really want it in before cutting <code>rc2</code>.</p>",
        "id": 402341983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700088912
    },
    {
        "content": "<p>But I agree:</p>\n<ul>\n<li>a <code>.trace</code> file should not be storing options!</li>\n<li><code>lakefile.olean</code> is a workaround for a performance issue (perhaps a fundamental one without moving to a toml file for simple configurations, but nevertheless), and we should not make it bear any more weight than it absolutely has to</li>\n<li>there should be as little mutable state as possible in the system</li>\n</ul>",
        "id": 402342177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700089007
    },
    {
        "content": "<p>I don't think these are blocking issues for <a href=\"https://github.com/leanprover/lean4/pull/2842\">lean4#2842</a>, the new version is not any worse than what already exists</p>",
        "id": 402342221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700089035
    },
    {
        "content": "<p>how about a <code>.lakeopts</code> file which contains <code>-K</code> options (and is a human readable and writable text file) that is implicitly passed to every <code>lake</code> invocation in the containing folder?</p>",
        "id": 402342464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700089177
    },
    {
        "content": "<p>If you don't have such a file, there is no mutable state, if you do there is still no implicit mutable state since this file is never edited by lake</p>",
        "id": 402342650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700089251
    },
    {
        "content": "<p>the fact that you can create such a file is squirreled away in an \"advanced options\" section so that it doesn't cause problems for the 90%</p>",
        "id": 402342795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700089327
    }
]