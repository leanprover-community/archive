[
    {
        "content": "<p>There have been repeated discussions and confusions about <code>simp</code>’s behavior with the transition from Lean 3, especially with regard to the behavior of <code>rw</code>. In particular, the following expectation seems to be implicit in the minds of many users .</p>\n<p>Whenever <code>rw [h]</code> applies, <code>simp only [h]</code> should also apply.</p>",
        "id": 391189571,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694789130
    },
    {
        "content": "<p>/poll Do you believe that <code>simp</code> should conform to this behavior? <br>\nYes <br>\nNo</p>",
        "id": 391189593,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694789136
    },
    {
        "content": "<p>It doesn't seem reasonable to expect that <code>simp only [h]</code> will work whenever <code>rw [h]</code> does, as they are so different under the hood. Identifying concrete situations where <code>simp</code> behaves worse than it should, and trying to fix them, is IMHO both more realistic and more useful.</p>",
        "id": 391190519,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694789327
    },
    {
        "content": "<p>But this was true in lean 3, wasn't it?</p>",
        "id": 391190615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694789351
    },
    {
        "content": "<p>I think “worse than it should” is subjective and it seems like this is a common standard for that judgement.</p>",
        "id": 391190959,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694789429
    },
    {
        "content": "<p>I don't know if this was strictly true in Lean 3. But clearly the port revealed <em>many</em> places where Lean 3 simp was more efficient in this direction.</p>",
        "id": 391191119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694789462
    },
    {
        "content": "<p>In my experience in lean 3, this implication seemed to hold at least almost everywhere, as the analysts say</p>",
        "id": 391191286,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694789501
    },
    {
        "content": "<p>No, it wasn't always true in Lean 3.</p>",
        "id": 391191343,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694789517
    },
    {
        "content": "<p>Oh, except for Yaëls point</p>",
        "id": 391191395,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694789524
    },
    {
        "content": "<p>The real issue is <code>simp only [A,B,C,D,E]</code> now having to be <code>simp only [A,B]; rw [C]; simp only [D,E]</code>.</p>\n<p>But I absolutely agree with you that identifying concrete situations, minimising, and then solving, is an important problem.</p>",
        "id": 391191426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694789525
    },
    {
        "content": "<p>I am currently strongly leaning yes due to my mental model of <code>simp</code> but want to hear more</p>",
        "id": 391191594,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694789560
    },
    {
        "content": "<p>Another unsatisfactory behavior of <code>simp</code> is it can't un-expand a definition, but it seems the issue <a href=\"https://github.com/leanprover/lean4/pull/2431\">lean4#2431</a> is gonna be closed as won't fix.</p>",
        "id": 391324392,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1694838214
    },
    {
        "content": "<p>Over <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20vs.20rw.20again/near/391348824\">here</a> I tried to summarize the difference between <code>rw</code> and <code>simp</code>. Like Sebastien Gouezel said, they use different algorithms, and even if the new <code>simp</code> didn't use features like discrimination trees then just like in Lean 3 there would be examples where <code>rw</code> works but <code>simp</code> doesn't and vice versa (and these examples do not rely on defeq properties for matching).</p>",
        "id": 391350510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694854110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Behavior.20of.20simp/near/391191119\">said</a>:</p>\n<blockquote>\n<p>where Lean 3 simp was more efficient in this direction.</p>\n</blockquote>\n<p>With a different meaning for \"efficient\" my understanding is that the Lean 4 simp is significantly faster than the Lean 3 one, though I haven't measured it myself.</p>",
        "id": 391351369,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694854611
    },
    {
        "content": "<p>A concrete option that Lean 4 simp might be able to provide is to use <code>rw</code>-like key-based matching to come up with a list of potential simp lemmas for a given subexpression. This entails (I think) using the discrimination tree but stopping the search one level down and then taking all the results in the entire subtree.</p>",
        "id": 391351374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694854617
    },
    {
        "content": "<p>Floris was suggesting to me that the discrimination trees might be too strict for certain arguments to functions (like maybe implicit arguments should be matched at defeq transparency? or not taken into account at all in the tree?)</p>",
        "id": 391351387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694854625
    }
]