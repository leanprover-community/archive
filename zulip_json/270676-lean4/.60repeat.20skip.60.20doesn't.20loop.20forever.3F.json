[
    {
        "content": "<p>Hi, I'm trying to find a simple tactic that will loop forever. I tried <code>repeat skip</code> and several variants such as <code>repeat (try intros)</code> and <code>repeat (revert a ; intro a)</code>, but all of them finished pretty quickly. Example code below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"n\">add_comm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">hello_world</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, Chapter 5 of Theorem Proving in Lean 4 says \"Be careful: repeat (try t) will loop forever, because the inner tactic never fails.\"?</p>",
        "id": 368591389,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687445672
    },
    {
        "content": "<p>Is this because <code>repeat</code> secretly only repeats the tactic a finite but very large number of times?</p>",
        "id": 368596029,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687446363
    },
    {
        "content": "<p>Specifically from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.repeat%27Core#doc\">docs#Lean.Meta.repeat'Core</a> it looks like the specific number is 100000.</p>",
        "id": 368597260,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687446537
    },
    {
        "content": "<p>I suspect that's the case. Just found <code>repeat (repeat (repeat (repeat (revert a ; intro a))))</code>. I'm still not sure if it will loop forever, but the runtime is long enough for my use case.</p>",
        "id": 368600650,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687447095
    },
    {
        "content": "<p>In the spirit of #XY, there is also <code>sleep 5000</code> which will sleep for 5000 ms</p>",
        "id": 368601635,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687447251
    },
    {
        "content": "<p>That's better! Thanks!</p>",
        "id": 368603857,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687447550
    }
]