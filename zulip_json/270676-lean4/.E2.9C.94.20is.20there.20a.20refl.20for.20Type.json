[
    {
        "content": "<p>We are wondering if there is something like refl for Type instead of Prop in the standard library or mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">REq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rrefl</span> <span class=\"o\">:</span> <span class=\"n\">REq</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Also it would be nice if you know of tactics that could help like <code>rfl</code> does for Prop cases?</p>\n<h2>Why not just use Prop?</h2>\n<p>We are translating a paper from Agda to LeanProver<br>\n<a href=\"https://github.com/conal/paper-2021-language-derivatives/\">https://github.com/conal/paper-2021-language-derivatives/</a><br>\nIn this paper the proofs are relevant (not irrelevant), since they represent parses and it is interesting to see how something was parsed.</p>",
        "id": 402201375,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700044990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557483\">awalterschulze</span> <a href=\"#narrow/stream/270676-lean4/topic/is.20there.20a.20refl.20for.20Type/near/402201375\">said</a>:</p>\n<blockquote>\n<p>Also it would be nice if you know of tactics that could help like <code>rfl</code> does for Prop cases?</p>\n</blockquote>\n<p>How about <code>rfl</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"n\">REq.rrefl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">REq</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 402202698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700045410
    },
    {
        "content": "<p>That looks interesting, but I get the error \"unknown attribute [refl]\"<br>\nIs there something I should import?</p>\n<p>lean-toolchain = leanprover/lean4:v4.2.0-rc4</p>",
        "id": 402207877,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700047069
    },
    {
        "content": "<p><code>import Mathlib.Tactic</code> is overkill, but works</p>",
        "id": 402210239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700047685
    },
    {
        "content": "<p>Yeah that works, wow :O</p>\n<p>Ok wow I was already using some of mathlib, but this is a huge extra.<br>\nCompile time is up from 1 minute to 15 minutes plus</p>\n<p>Wonder if there is a way to decouple this or only import the specific library that is necessary?</p>",
        "id": 402214610,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700048853
    },
    {
        "content": "<p>are you using the <code>lake exe cache get</code> mechanism to download Mathlib's oleans?</p>",
        "id": 402216488,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700049314
    },
    {
        "content": "<p>\"Just\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Algebra.Classes</span>\n</code></pre></div>\n<p>works.  I do not know if you can go further up still.  However, I agree with Eric's point that you should be using <code>Mathlib</code>'s cache, rather than building it locally.</p>",
        "id": 402218261,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700049730
    },
    {
        "content": "<p>I forgot about using the cache<br>\nI think the more specific import also helped</p>\n<p>Huge improvement thank you :D</p>",
        "id": 402220100,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700050177
    },
    {
        "content": "<p>Btw is there a standard or mathlib version of this Type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">All</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">All</span> <span class=\"n\">P</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_px</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_pxs</span> <span class=\"o\">:</span> <span class=\"n\">All</span> <span class=\"n\">P</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"n\">All</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402220236,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700050207
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.all#doc\">docs#List.all</a></p>",
        "id": 402220793,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700050337
    },
    {
        "content": "<p>ah, that has been changed to be implemented for bools and stuff now</p>",
        "id": 402220850,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700050355
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.all\">docs3#list.all</a> I think was that</p>",
        "id": 402220860,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700050359
    },
    {
        "content": "<p>Yeah it took me a while to find that one, but as you say it only covers bools</p>\n<p>I know Coq has a ForAll for Prop, but even that won't work in this case, since this is again for Type</p>",
        "id": 402221140,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700050433
    },
    {
        "content": "<p>ah indeed of course, I would doubt there would be one covering types</p>",
        "id": 402221385,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700050481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557483\">awalterschulze</span> has marked this topic as resolved.</p>",
        "id": 402221453,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700050498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557483\">awalterschulze</span> has marked this topic as unresolved.</p>",
        "id": 402221515,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700050515
    },
    {
        "content": "<p>Thank you so much for all your help, this was very very useful<br>\n<a href=\"https://github.com/katydid/proofs/pull/65\">https://github.com/katydid/proofs/pull/65</a></p>",
        "id": 402221563,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700050528
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Forall#doc\">docs#List.Forall</a>, but that's in Prop</p>",
        "id": 402221788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700050580
    },
    {
        "content": "<p>Ah okay, but is still useful for another project, thank you :)</p>",
        "id": 402221878,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700050608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557483\">awalterschulze</span> has marked this topic as resolved.</p>",
        "id": 402225363,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700051489
    },
    {
        "content": "<p>I think probably you can just use <code> ∀ x ∈ l, P x</code>?</p>",
        "id": 402228166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700052172
    },
    {
        "content": "<p>Which works both for prop and for type</p>",
        "id": 402228285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700052208
    },
    {
        "content": "<p>Oh wow this works :O<br>\n<a href=\"https://github.com/katydid/proofs/pull/67\">https://github.com/katydid/proofs/pull/67</a></p>\n<p>This doesn't work in Coq, great to see it working in Lean</p>",
        "id": 402231254,
        "sender_full_name": "awalterschulze",
        "timestamp": 1700052911
    }
]