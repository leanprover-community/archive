[
    {
        "content": "<p>How is the metaprogramming book supposed to work? There are lots of intentional errors in the code, but it is essentially impossible to bump to a new toolchain, because one would have to review every error separately and decide if they are meant to be there or not!</p>\n<p>Any ideas? I would love to bump this to <code>nightly-2023-08-19</code> (which is rapidly becoming the first official release candidate). Any authors of the book want to advise? :-)</p>",
        "id": 386541359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692686761
    },
    {
        "content": "<p>regarding <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">https://github.com/leanprover-community/lean4-metaprogramming-book</a> I guess</p>",
        "id": 386542240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692687163
    },
    {
        "content": "<p>Is there working CI on the repo?</p>",
        "id": 386542257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692687176
    },
    {
        "content": "<p>I see a green checkmark but I'm not sure if it's running any lean</p>",
        "id": 386542292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692687191
    },
    {
        "content": "<p>The CI only generates a PDF based on the markdown files AFAIK. With respect to the update I dont think there is a simpler way to do it than to read the files. Maybe we could add a command that checks that a failure with a certain message occurred such that this process is easier in the future?</p>",
        "id": 386542851,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1692687479
    },
    {
        "content": "<p>is there a way to metaprogram a section of a lean file to say \"this section of commands won't compile -- show the errors but revert the environment at the section end and don't report it as a compile error\"?</p>\n<p>seems useful for LeanInk and co, unless they already have a way for handling snippets that are expected to produce error?</p>",
        "id": 386543148,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692687626
    },
    {
        "content": "<p>IIRC <span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> set up a process for validating error messages for FPIL</p>",
        "id": 386544790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692688398
    },
    {
        "content": "<p>There is <code>#guard_msgs in</code>, which we use extensively in testing (and would like to use to replace <em>all</em> noisy tests).</p>",
        "id": 386544791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692688399
    },
    {
        "content": "<p>Two options:</p>\n<ul>\n<li>use #guard_msgs, with some postprocessing that removes it from the book?</li>\n<li>have a <code>.expected.out</code> file, and CI that verifies the error messages match.</li>\n</ul>",
        "id": 386544871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692688440
    },
    {
        "content": "<p>(personally, I would find it nice to have something in the snippet that indicates \"this doesn't compile, but...\". Is there a reason to postprocess it out?)</p>",
        "id": 386547573,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692689654
    },
    {
        "content": "<p>Perhaps we do need our own Ferris<br>\n<a href=\"/user_uploads/3121/D9hO2CvrWJ93QvEjGBWpVUZE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/D9hO2CvrWJ93QvEjGBWpVUZE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/D9hO2CvrWJ93QvEjGBWpVUZE/image.png\"></a></div>",
        "id": 386548746,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692690191
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/functional_programming_in_lean/introduction.html\">https://leanprover.github.io/functional_programming_in_lean/introduction.html</a> has something similar (without the mascot)</p>",
        "id": 386549279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692690403
    },
    {
        "content": "<p>My first guess was also to use <code>#guard_msgs</code>, but would unique <del>fvar</del>mvar names cause problems anyway?  (I'm on mobile and cannot check right now)</p>",
        "id": 386566152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692696312
    },
    {
        "content": "<p>FPIL also normalizes mvar names to address that issue</p>",
        "id": 386566541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692696439
    },
    {
        "content": "<p>(fvar names are generally not visible in error messages)</p>",
        "id": 386566580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692696456
    }
]