[
    {
        "content": "<p>A while ago, during a monthly dev update (which I miss dearly), I asked whether Lean 4 plans to integrate SMT reasoning to solve \"easy\" goals automatically like Sledgehammer / SMTCoq do, and how.</p>",
        "id": 345899984,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680257460
    },
    {
        "content": "<p>IIRC, Leo answered that doing so raises reproducibility problems, <em>i.e.</em> you would need a notion of heartbeat at solver-level that is consistent across platforms, machines... Otherwise, you easily end up with builds that fail (\"timeout\") in some environment/machines and succeed in others.</p>",
        "id": 345900016,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680257469
    },
    {
        "content": "<p>At this point, I'm pretty sure Leo mentioned something that could solve this problem. I think the name of that solution was something like \"SAT minus minus\" (\"SAT--\"?), but it was not written down so I might have heard wrong (or just remember wrong).</p>",
        "id": 345900043,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680257479
    },
    {
        "content": "<p>I searched for that name, or for SAT/SMT-related techniques with a reproducible notion of heartbeat, but could not find anything that seemed related to what Leo was saying.</p>",
        "id": 345900065,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680257485
    },
    {
        "content": "<p>Does anyone remember or know about this? Did I hallucinate the whole conversation?!</p>",
        "id": 345900089,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680257493
    },
    {
        "content": "<p>I think SMT solvers are mostly useful to run once, find a proof, which is then either enshrined in a sequence of tactics instead, or in a call to a resolution/superposition prover (such as Isabelle's <code>metis</code> or Lean's <code>duper</code>). SMT calls are rather slow, so it would be a bad idea to have calls to an smt tactic in mathlib. There are (at least?) two projects for currently building a Lean4 hammer.</p>\n<p>I'm not sure what you or Leo meant with heartbeat :(.</p>",
        "id": 345902953,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1680258322
    },
    {
        "content": "<p>My understanding is that a heartbeat metric is a deterministic, reproducible measure of a tool/algorithm progress. It's better in terms of reproducibility than timeouts which depend on pretty much the whole hardware/software environment</p>",
        "id": 345907643,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680259469
    },
    {
        "content": "<p>But I'm starting to think this was a fever dream, especially since what you said makes a lot of sense. <a href=\"https://github.com/ufmg-smite/lean-smt\">lean-smt</a> it is then <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 345907900,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680259550
    },
    {
        "content": "<p>I'm pretty sure this conversation happened during the first dev update meeting, for which I cannot find a video, so...</p>",
        "id": 345908285,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680259657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak 🐺</span> what's the other \"Lean 4 hammer\" project, besides lean-smt?</p>",
        "id": 345908358,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680259677
    },
    {
        "content": "<p>I would guess that the discussion was about invoking an external solver, which may run for a long time or forever, so there is no deterministic way to stop the solver if it runs for \"too long\", unless it is somehow integrated with Lean's heartbeats system.</p>",
        "id": 345908670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680259770
    },
    {
        "content": "<p>I'm starting to think that, if this conversation actually happened, there was probably a misunderstanding between my question and his answer (most likely on my end)</p>",
        "id": 345910395,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680260258
    },
    {
        "content": "<p>I thought this SMT-- idea was to have a very slimmed-down SMT solver actually implemented in Lean, working with Lean data structures. Like the <code>ematch</code> functionality in Lean 3. Then one would need a deterministic timeout mechanism as discussed here. But maybe we should ask the people involved. <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 345912132,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680260737
    },
    {
        "content": "<p>Ah! Maybe it was not a fever dream afterall</p>",
        "id": 345917974,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680262363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  Is \"SMT--\" a known, published thing, or is it just a (temporary) name for a potential implementation? A quick search for it returned nothing</p>",
        "id": 345918609,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680262515
    },
    {
        "content": "<p>It's an idea of Leo's which has not been seriously worked on since the Lean 3 days afaik.</p>",
        "id": 345920232,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680262934
    },
    {
        "content": "<p>I see, thank you very much for the clarification <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span></p>",
        "id": 345921036,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680263129
    },
    {
        "content": "<p>There are timeout options for SMT solvers, I don't see the problem?</p>",
        "id": 345930842,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1680265377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/reproducible.20SAT.2FSMT.20reasoning/near/345908358\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak 🐺</span> what's the other \"Lean 4 hammer\" project, besides lean-smt?</p>\n</blockquote>\n<p>I've been slowly working on my own hammer (translation only, no proof reconstruction yet) targeting higher order smt solvers, as a student project. I didn't know lean-smt existed before I started <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. We'll see how it goes, maybe I can contribute to the lean-smt project.</p>",
        "id": 345931327,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1680265475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak 🐺</span> <a href=\"#narrow/stream/270676-lean4/topic/reproducible.20SAT.2FSMT.20reasoning/near/345930842\">said</a>:</p>\n<blockquote>\n<p>There are timeout options for SMT solvers, I don't see the problem?</p>\n</blockquote>\n<p>Reproducibility</p>",
        "id": 345934883,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680266152
    },
    {
        "content": "<p>A timeout does not mean anything for the program, it's just an order to stop that triggers whenever. Even on the same machine and environment, two runs with the same timeout will not stop at the same exact \"place in the unfolding of the algorithm\", meaning in general you can get \"an answer\" or \"timeout\" pretty much randomly with the same program, same input, same timeout.<br>\nNever mind on different machines with different everything</p>",
        "id": 345936037,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680266357
    },
    {
        "content": "<p>Ahhhh now I finally understand the problem. IMO the solution is to only use hammers akin to <code>library_search</code>: Once.</p>",
        "id": 345936478,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1680266440
    },
    {
        "content": "<p>Right, but as <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> clarified it seems that \"SMT--\" was referring to a dialed back SMT solver implemented directly in Lean to do some reasoning on lean objects. I'm not sure the goal of SMT-- is to realize a sledgehammer-like feature, but I'm in way over my head so I think we will have to wait for someone (probably Leo) to clarify further</p>",
        "id": 345937238,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680266612
    },
    {
        "content": "<p>I mean, maybe SMT-- is not even related to proof search (though that'd be surprising), maybe it's (also) for unification / type class resolution / ... (just freestyling at this point)</p>",
        "id": 345938240,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680266845
    },
    {
        "content": "<p>It is not an SAT solver, but you might be interested in MagnusHammer.  <a class=\"stream-topic\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/New.20paper.3A.20Magnushammer\">#Machine Learning for Theorem Proving &gt; New paper: Magnushammer</a>.  It is currently for Isabelle and would require external neural network tools, but on the other hand it seems to do a lot that Sledgehammer can do and more, and I personally think it is a simpler concept.</p>",
        "id": 345939713,
        "sender_full_name": "Jason Rute",
        "timestamp": 1680267152
    },
    {
        "content": "<p>Although, I guess MagnusHammer still needs general purpose reasoning tactics, like Isabelle’s MESON tactic, to reconstruct the proof so I guess this gets back to the question of putting some sort of powerful reasoning tactics directly into Lean.</p>",
        "id": 345941046,
        "sender_full_name": "Jason Rute",
        "timestamp": 1680267440
    },
    {
        "content": "<p>(Reading this topic again, I missed the point.  Ignore me.)</p>",
        "id": 345944822,
        "sender_full_name": "Jason Rute",
        "timestamp": 1680268121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/270676-lean4/topic/reproducible.20SAT.2FSMT.20reasoning/near/345944822\">said</a>:</p>\n<blockquote>\n<p>(Reading this topic again, I missed the point.  Ignore me.)</p>\n</blockquote>\n<p>I'm still grateful for what you said and the link you provided <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 345950350,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680269269
    },
    {
        "content": "<p>Marijn Heule is also working on some new proof formats for SMT that will hopefully make reproducibility &amp; verification easier. But there are many other hurdles to overcome with SMT integration in Lean :)</p>",
        "id": 346055147,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680296062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/reproducible.20SAT.2FSMT.20reasoning/near/346055147\">said</a>:</p>\n<blockquote>\n<p>Marijn Heule is also working on some new proof formats for SMT that will hopefully make reproducibility &amp; verification easier. But there are many other hurdles to overcome with SMT integration in Lean :)</p>\n</blockquote>\n<p>Can you elaborate on that new format? I'm curious!</p>",
        "id": 346138768,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1680340190
    },
    {
        "content": "<p>I don't really know what direction he's thinking about. I think it's something along the lines of Joseph Reeve's <a href=\"https://www.cs.cmu.edu/~mheule/publications/proof-skeleton.pdf\">proof skeletons work</a> as well as prior work on LRAT/DRAT formats for SAT</p>",
        "id": 346240843,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680374865
    },
    {
        "content": "<p>But it's really for SMT solvers and not just SAT solvers right?</p>",
        "id": 346241022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680374945
    }
]