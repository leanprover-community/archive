[
    {
        "content": "<p>I'm running into an error on <code>le_total</code> in the following, which I just don't understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Time</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">LinearOrder</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Time.Tag</span> <span class=\"n\">where</span>\n  <span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">Time</span>\n  <span class=\"n\">microstep</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Time.Tag</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Time.Tag</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g₁.time</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g₂.time</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">g₁.time</span> <span class=\"bp\">=</span> <span class=\"n\">g₂.time</span> <span class=\"bp\">∧</span> <span class=\"n\">g₁.microstep</span> <span class=\"bp\">≤</span> <span class=\"n\">g₂.microstep</span><span class=\"o\">)</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁'.trans</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂.asymm</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Time.Tag.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁'.antisymm</span> <span class=\"n\">h₂'</span><span class=\"o\">)</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- don't know how to synthesize placeholder for argument 'α'</span>\n  <span class=\"n\">decidableLE</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- don't know how to synthesize placeholder for argument 'α'</span>\n  <span class=\"n\">decidableEq</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Time.Tag</span>\n</code></pre></div>\n<p>If I sorry <code>le_antisymm</code> the error goes away:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Time.Tag</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g₁.time</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g₂.time</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">g₁.time</span> <span class=\"bp\">=</span> <span class=\"n\">g₂.time</span> <span class=\"bp\">∧</span> <span class=\"n\">g₁.microstep</span> <span class=\"bp\">≤</span> <span class=\"n\">g₂.microstep</span><span class=\"o\">)</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁'.trans</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">decidableLE</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">decidableEq</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What is this error trying to convey?</p>",
        "id": 363037001,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1685709961
    },
    {
        "content": "<p>I'm still getting the hang of Lean 4 structure constructors so I thought I'd wade in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Time</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">LinearOrder</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Time.Tag</span> <span class=\"n\">where</span>\n  <span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">Time</span>\n  <span class=\"n\">microstep</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Time.Tag</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">preorder</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">Time.Tag</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g₁.time</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g₂.time</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">g₁.time</span> <span class=\"bp\">=</span> <span class=\"n\">g₂.time</span> <span class=\"bp\">∧</span> <span class=\"n\">g₁.microstep</span> <span class=\"bp\">≤</span> <span class=\"n\">g₂.microstep</span><span class=\"o\">)</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁'.trans</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">instance</span> <span class=\"n\">partialOrder</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">Time.Tag</span> <span class=\"n\">where</span>\n  <span class=\"n\">toPreorder</span> <span class=\"o\">:=</span> <span class=\"n\">preorder</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂.asymm</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Time.Tag.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁'.antisymm</span> <span class=\"n\">h₂'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">instance</span> <span class=\"n\">partialOrder'</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">Time.Tag</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">preorder</span> <span class=\"k\">with</span>\n    <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- error `expected '}'`</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂.asymm</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Time.Tag.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁'.antisymm</span> <span class=\"n\">h₂'</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">instance</span> <span class=\"n\">linearOrder</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Time.Tag</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">partialOrder</span> <span class=\"k\">with</span>\n    <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">decidableLE</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">decidableEq</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>Now I'm just confused. Is it something to do with definitions by pattern matching not being valid in some places?</p>",
        "id": 363083451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685718972
    },
    {
        "content": "<p><code>{ ... }</code> structure instance notation simply does not accept parameters to the left of <code>:=</code> at all. We mostly think of it generating data, while <code>where</code> is more used for generating code/functions, thus the slightly different syntactic options</p>",
        "id": 363086802,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685719648
    },
    {
        "content": "<p>Can the <code>where</code> syntax be used in an expression / a substructure?</p>",
        "id": 363107339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685723999
    },
    {
        "content": "<p>Regarding the initial question: Using a <code>by</code> block for <code>le_antisymm</code> fixes the problem for some reason ¯\\_(ツ)_/¯ :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Time.Tag</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁'.trans</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">intro</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂.asymm</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Time.Tag.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁'.antisymm</span> <span class=\"n\">h₂'</span><span class=\"o\">)</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"n\">m₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">m₂</span><span class=\"o\">⟩</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">le_rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">Nat.le_total</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›⟩</span>\n    <span class=\"n\">all_goals</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Nat.le_total</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">ht</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"bp\">·.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n  <span class=\"n\">decidableLE</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">decidableEq</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 363111800,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1685724912
    },
    {
        "content": "<p>You can pattern match on an intro in tactic mode?? Nice!</p>",
        "id": 363123799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685727821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/don't.20know.20how.20to.20synthesize.20placeholder.20for.20argument/near/363123799\">said</a>:</p>\n<blockquote>\n<p>You can pattern match on an intro in tactic mode?? Nice!</p>\n</blockquote>\n<p>In Lean 4 it feels like you can pattern match all the things :D</p>",
        "id": 363133184,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1685730161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/don't.20know.20how.20to.20synthesize.20placeholder.20for.20argument/near/363086802\">said</a>:</p>\n<blockquote>\n<p><code>{ ... }</code> structure instance notation simply does not accept parameters to the left of <code>:=</code> at all. We mostly think of it generating data, while <code>where</code> is more used for generating code/functions, thus the slightly different syntactic options</p>\n</blockquote>\n<p>FYI this is on my list of \"grammar inconsistencies to PR fix once I find the time and stomach for it\"</p>",
        "id": 363155947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685737000
    }
]