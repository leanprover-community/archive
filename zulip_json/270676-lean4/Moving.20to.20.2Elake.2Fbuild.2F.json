[
    {
        "content": "<p>I saved ~3.75 GB by remembering to delete mathlib4/build in favor of mathlib4/.lake/build. (I only realized I still had it after using a program that displays your computer's files by size.)</p>\n<p>Would it be easy to prompt people to delete their old-style build folder (or simply delete it for them)? (Or did I simply miss the notification somehow?) I wouldn't want people to lose hard drive space unnecessarily. :)</p>",
        "id": 406175295,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701817987
    },
    {
        "content": "<p>To keep the projects running, especially ones on older toolchains, after deleting the build folder,   might involve unnecessary invocations to the <code>lake update</code> deity who currently appears to be rather annoyed about some manifest (destiny?).</p>",
        "id": 406175836,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701818271
    },
    {
        "content": "<p>I'm not sure about having lake automatically remove the build folder (lest a certain version of lake that shall not be named mistake the project folder for the build folder), but it might prompt about it. As a user I don't see any reason not to remove it after upgrading. <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>: downgrading is not supported, but you might end up switching to an old version of lake by switching branches. In this case <code>lake update</code> is not the appropriate response, this kind of comment is not helpful. Just <code>lake build</code> or <code>lake exe cache get; lake build</code> should suffice</p>",
        "id": 406177435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819142
    },
    {
        "content": "<p>I changed my mathlib dependency to stable on a recent project. Lake update downgraded my toolchain to 4.3 from 4.4.0-rc1.</p>",
        "id": 406177575,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701819242
    },
    {
        "content": "<p>So lake does seem to handle downgrades upto some point.</p>",
        "id": 406177732,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701819331
    },
    {
        "content": "<p>The question in this case is, isn't the change in lake's folder structure tied to toolchains?</p>",
        "id": 406177836,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701819399
    },
    {
        "content": "<p>Lake will of course do its best with both upgrades and downgrades, but it's not guaranteed to work (and indeed it has a poor track record overall)</p>",
        "id": 406177917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819471
    },
    {
        "content": "<p>when you check out a branch or change the dependency version there usually aren't issues with this as long as all deps are using the same version of lake</p>",
        "id": 406178021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Moving.20to.20.2Elake.2Fbuild.2F/near/406177836\">said</a>:</p>\n<blockquote>\n<p>The question in this case is, isn't the change in lake's folder structure tied to toolchains?</p>\n</blockquote>\n<p>Yes? What's your point</p>",
        "id": 406178058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819557
    },
    {
        "content": "<p>Suppose this new folder structure was introduced in toolchain X, won't lake on projects with toolchains older than X try to search in the older folder structure and otherwise cache and build within the build folder when lake cache + build is called?</p>",
        "id": 406178188,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701819630
    },
    {
        "content": "<p>So lake update would be needed to bring them up to a sufficiently new toolchain. And this causes issues reported on other threads</p>",
        "id": 406178284,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701819715
    },
    {
        "content": "<p>lake update is not how you upgrade your toolchain</p>",
        "id": 406178560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819882
    },
    {
        "content": "<p>it is how you upgrade your dependencies</p>",
        "id": 406178574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819891
    },
    {
        "content": "<p>At the project level</p>",
        "id": 406178576,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701819893
    },
    {
        "content": "<p>(sorry dependencies toolchain)</p>",
        "id": 406178600,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701819910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>, just to clarify, are you talking specifically about a situation in which the current project's toolchain uses <code>project/.lake/build</code>, but its dependencies may rely on an older toolchain which uses <code>project/build</code>?</p>",
        "id": 406178603,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701819913
    },
    {
        "content": "<p>Yeah</p>",
        "id": 406178619,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701819923
    },
    {
        "content": "<p>that cannot happen</p>",
        "id": 406178628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819928
    },
    {
        "content": "<p>your dependencies are compiled with the same lake that compiles your project</p>",
        "id": 406178668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819955
    },
    {
        "content": "<p>whether or not they request a different one in their lean-toolchain file</p>",
        "id": 406178761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701819990
    },
    {
        "content": "<p>Yeah but so far the project toolchain is identical to mathlib's toolchain for successfully building math projects</p>",
        "id": 406178828,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701820042
    },
    {
        "content": "<p>yes, because mathlib specifically pins your toolchain to be the same as mathlib's</p>",
        "id": 406178917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701820090
    },
    {
        "content": "<p>(although this doesn't really work, as the recent lake update revealed - if syntax changes on the new version then lake can't even run the lake script which says to copy the toolchain)</p>",
        "id": 406179011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701820168
    },
    {
        "content": "<p>To make sure I understand this correctly, what you are saying is that I should be able to update (to get the new folder structure) and cache + build a project from, say July/August, using the old folder structure, without a hitch, after discarding my local build folder (ignoring mathlib and Std changes from consideration for the moment)</p>",
        "id": 406179402,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701820428
    },
    {
        "content": "<p>Okay I think I see what was meant. <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> : I guess you are suggesting that users delete the build folder after the lake update has already made it redundant. I previously thought you meant that older projects could save space by updating first and then deleting the build folder. my concern was the update not going through properly for older projects</p>",
        "id": 406180581,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701820970
    },
    {
        "content": "<p>Apologies from my side</p>",
        "id": 406181186,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701821251
    },
    {
        "content": "<p>No problem! I originally was suggesting that either <code>lake</code> deletes it automatically when it’s using <code>.lake/build</code> or that there’s a prompt/pop-up to delete it—Mario explained why the first option could be a little, er, dangerous :P</p>\n<p>Since lake apparently makes this decision based only on the top-level project’s toolchain, if you <em>did</em> (manually) update your project first and got everything building successfully, my understanding is that nothing would go wrong if you <em>then</em> deleted the original non-<code>.lake</code> build folder. I’m not concerned here with bumps in that update process itself, though, which is the only place <code>lake update</code> should come up in all this.</p>",
        "id": 406181671,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701821515
    }
]