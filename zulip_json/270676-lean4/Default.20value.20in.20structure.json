[
    {
        "content": "<p>I'm trying to define a structure with a property which Lean can proof using <code>decide</code>. Here is a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Two</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Two</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Two.mk</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Two</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">⟩</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Both <code>def a</code> and <code>def b</code> work, but <code>def c</code> fails. How can I make <code>def c</code> work as well?</p>",
        "id": 396079423,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697027689
    },
    {
        "content": "<p><code>def c : Two := ⟨2, rfl⟩</code> works, but I guess you want to omit it.</p>",
        "id": 396082441,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697028722
    },
    {
        "content": "<p>I'm not sure that's possible with Lean right now. the anonymous constructor syntax must have as many arguments as explicit arguments for the <code>mk</code> function, and apparently making <code>autoParam</code>s implicit doesnt work</p>",
        "id": 396083325,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697029000
    },
    {
        "content": "<p>I tried <code>_</code>, got <code>don't know how to synthesize placeholder for argument 'property'</code>, then <code>...</code>, got <code>unexpected token '..'; expected term</code>.</p>",
        "id": 396083847,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697029184
    },
    {
        "content": "<p>it does seem a bit .. of a footgun to use autoparams and also anonymous constructors.. seems like a recipe for unmaintainable code</p>",
        "id": 396129614,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1697042553
    }
]