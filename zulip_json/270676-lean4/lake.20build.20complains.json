[
    {
        "content": "<p>I have set up a project (with Mathlib as a dependency) via <code>lake (...) new Legendre_QF math</code> etc. This generated a directory <code>Legendre_QF</code> with a bunch of files in it, one of which was <code>LegendreQF.lean</code>. Since this project needs more than one file, I replaced this file with a subdirectory <code>LegendreQF</code> containing the lean files. Now <code>lake build</code> and <code>lake build LegendreQF</code> complain</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"w\"> </span>or<span class=\"w\"> </span>directory<span class=\"w\"> </span><span class=\"o\">(</span>error<span class=\"w\"> </span>code:<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span>file:<span class=\"w\"> </span>./././LegendreQF.lean\n</code></pre></div>\n<p>and <code>lake build LegendreQF/Legendre.lean</code> (this is the main file) gives</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>package<span class=\"w\"> </span><span class=\"sb\">`</span>LegendreQF<span class=\"sb\">`</span>\n</code></pre></div>\n<p>I suspect that I should make some edits to <code>lakefile.lean</code>, which currently reads</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">legendre_QF</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">LegendreQF</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any library configuration options here</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>but I don't know what precisely needs to be changed. Any hints?</p>\n<p>( I was trying this because I had problems getting the leaf file to \"see\" the new name of a definition in a transitively imported file. In which order do I have to re-process the files to make it work?)</p>",
        "id": 389014475,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693841041
    },
    {
        "content": "<p>Next to <code>lakefile.lean</code>, add a new file <code>LegendreQF.lean</code> with <code>import LegendreQF.Legendre</code> in it</p>",
        "id": 389015310,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693841308
    },
    {
        "content": "<p>OK; this works regarding <code>lake build</code>. (Maybe it can be documented somewhere that one needs to set up the subfolder <em>in</em> <em>addition</em> to the file?)</p>",
        "id": 389016260,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693841645
    },
    {
        "content": "<p>But it ddidn't solve my original problem... I'll try to minimize and open a new thread for that.</p>",
        "id": 389016393,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693841687
    },
    {
        "content": "<p>I would add <code>globs := #[.andSubmodules `LegendreQF]</code> in the <code>lean_lib</code> options</p>",
        "id": 389017147,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693841874
    },
    {
        "content": "<p>What does that do?</p>",
        "id": 389017264,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693841906
    },
    {
        "content": "<p>It tells lake that the library <code>LegendreQF</code> should contain all the submodules (files approximately) inside the <code>LegendeQF</code> folder</p>",
        "id": 389017390,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693841959
    },
    {
        "content": "<p>Which means you don't  need a big file importing everything which needs updating when you move / rename a file</p>",
        "id": 389017471,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693841995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> If one does not want the root <code>LegendreQF</code> file, then on can use just <code>.submodules</code>, which just includes the files in the directory (<code>.andSubmodules</code> adds the root to the mix).</p>",
        "id": 389018332,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693842252
    },
    {
        "content": "<p>(I would have thought <code>.addSubmodules</code> to be the <code>to_additive</code> version)</p>",
        "id": 389018767,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693842388
    },
    {
        "content": "<p>Is this documented at a place where people like me can find it easily?</p>",
        "id": 389018784,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693842395
    },
    {
        "content": "<p>Turns out my original problem was caused by forgetting to hit <code>ctrl-S</code> on the modified file... <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 389018889,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693842444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>  The options for a <code>lean_lib</code> are documented in the <a href=\"https://github.com/leanprover/lean4/tree/master/src/lake#lean-libraries\">README</a>. There are also the online docs for the types (e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lake.Glob#doc\">docs4#Lake.Glob</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lake.LeanLibConfig#doc\">docs4#Lake.LeanLibConfig</a>).</p>",
        "id": 389019389,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693842607
    },
    {
        "content": "<p>OK; thanks for the pointer.<br>\nBut this is not necessarily the place I would look at first. I think it would help if this specific option were mentioned in the instructions for setting up projects.</p>",
        "id": 389019760,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693842765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Which instructions would those be?</p>",
        "id": 389019828,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693842794
    },
    {
        "content": "<p>(i.e., which ones were you using?)</p>",
        "id": 389019876,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693842822
    },
    {
        "content": "<p>Something along the lines of \"if your project contains more than one file, then create a subfolder (with the correct name) to put your stuff in and add <code>globs := #[.submodules </code>&lt;project name&gt;]<code> in the </code>lean_lib<code> options in </code>lakefile.lean`\"?</p>",
        "id": 389020065,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693842899
    },
    {
        "content": "<p>Seems like an occassion to ask: what is a <em>glob</em>? The Readme assumes that readers know this (maybe readers who don't know this can safely assume they will never need to use it).</p>",
        "id": 389020083,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1693842908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Sorry, I meant <em>where</em> were the instructions you were looking at? Where you using the Lake README, some mathlib tutotirals, etc.?</p>",
        "id": 389020261,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693842983
    },
    {
        "content": "<p>In Lake, that is not mentioned because that is not the recommended design. The standard Lean 4 style is to have a root file for every folder which imports (some public subset of) the modules in the folder.</p>",
        "id": 389020397,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693843045
    },
    {
        "content": "<p>I was using <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency\">these instructions</a>. (And then I asked here...)</p>",
        "id": 389020412,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693843052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20complains/near/389020397\">said</a>:</p>\n<blockquote>\n<p>In Lake, that is not mentioned because that is not the recommended design. The standard Lean 4 style is to have a root file for every folder which imports (some public subset of) the modules in the folder.</p>\n</blockquote>\n<p>Where is this documented?</p>",
        "id": 389020521,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693843085
    },
    {
        "content": "<p>It would make sense to add a description of this (or a suitable link) to the instructions I linked to above.</p>",
        "id": 389020647,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693843157
    },
    {
        "content": "<p>I do not believe that is actually documented anywhere. As to the mathlib instructions, I agree have a piece there would be useful. However, those are mathlib-specific docs, so the mathlib would need to decide what is appropriate there.</p>",
        "id": 389020861,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693843229
    },
    {
        "content": "<p>How can something be \"standard Lean 4 style\" if it is not documented anywhere? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 389020976,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693843275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> The term \"glob\" comes from unix (see <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)\">Wikipedia</a>). I would be happy to use a more descriptive option name if you have a suggestion!</p>",
        "id": 389021140,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693843327
    },
    {
        "content": "<p>I would actually prefer not to have to know about \"glob\" if I just want to set up a lean/mathlib project with several files in it...</p>",
        "id": 389021301,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693843395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Fair point (about the docs on the style)! However, it is the style used by core and much of the  ecosystem (e.g., Std) -- and before Lake, it was even was required by the build system.</p>",
        "id": 389021313,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693843398
    },
    {
        "content": "<p>So to know what the standard style is, I'd have to read the code in Core and Std? That is a tough ask...</p>",
        "id": 389021522,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693843470
    },
    {
        "content": "<p>(Or rather, I guess, have a look at the structure of the directory tree.)</p>",
        "id": 389021680,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693843549
    },
    {
        "content": "<p>True, there should definitely be some documentation in Lake about how to setup a multi-file project (with directories).</p>",
        "id": 389021690,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693843557
    },
    {
        "content": "<p>And a prominent link to it from the mathlib side!</p>",
        "id": 389021770,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693843591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20complains/near/389021140\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> The term \"glob\" comes from unix (see <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)\">Wikipedia</a>). I would be happy to use a more descriptive option name if you have a suggestion!</p>\n</blockquote>\n<p>Thanks. Now it's clear and indeed I have used globs without knowing that is what they are called. For readers like me I would suggest adding the same Wikipedia hyperlink to the word glob, and perhaps an example.</p>",
        "id": 389021838,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1693843622
    },
    {
        "content": "<p>Initially, how most of Lean 4 worked could only be gleaned by reading the code in core. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  We are working on moving away from that into better documentation. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 389021856,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693843624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> By the way, you really should copy a large fraction of the readme into the docs on <code>lean_lib</code>, <code>lean_exe</code> and <code>package</code>. Right now they just describe the basic syntax using <code>where</code> and so on but say nothing about the actual fields that can be used, you have to go to definition through several layers of lake to get to the actual struct definition because of the macros, which makes it hard to access or discover new options</p>",
        "id": 389067750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693871475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> imo what we really needs is constant hyper-linking in the hover markdown. Then you could just click on the <code>LeanLibConfig</code> mentioned in the docstring to go to it.</p>",
        "id": 389071205,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693873386
    },
    {
        "content": "<p>Also, it is unfortunate that even in the online docs (i.e., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lake.DSL.leanLibDecl#doc\">docs4#Lake.DSL.leanLibDecl</a>), it is not linkified. (I guess this probably due to the namespaces tripping up the heuristic?)</p>",
        "id": 389071781,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693873655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Is<code>doc-gen4</code> not able to use the namespace of the declaration for reference when searching for constants to linkify in the docstring?</p>",
        "id": 389072106,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693873812
    },
    {
        "content": "<p>It should be able to do that. In general I would appreciate if someone came up with  concrete rules / expectations as to how documentation gets linkified instead of this weird heuristic approach that we've been going with so far.</p>",
        "id": 389114943,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693895422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20complains/near/389020521\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20complains/near/389020397\">said</a>:</p>\n<blockquote>\n<p>In Lake, that is not mentioned because that is not the recommended design. The standard Lean 4 style is to have a root file for every folder which imports (some public subset of) the modules in the folder.</p>\n</blockquote>\n<p>Where is this documented?</p>\n</blockquote>\n<p>I rediscovered today that this actually already documented in the Lean repository <a href=\"https://github.com/leanprover/lean4/blob/master/doc/setup.md\">here</a> as part of the Lean 4 manual (available online <a href=\"https://leanprover.github.io/lean4/doc/setup.html\">here</a>). I had forgotten about that. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  Nonetheless, a similar blurb should still be in the Lake docs and in  the mathlib ones as well.</p>",
        "id": 389215918,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693927112
    }
]