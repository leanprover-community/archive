[
    {
        "content": "<p>Is there a way to check if two theorems are equivalent (a.k.a. if A, then B and if B, then A) in lean4?</p>\n<p><a href=\"/user_uploads/3121/vjH1EkW4Xfd45BpkDHxLBMcX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vjH1EkW4Xfd45BpkDHxLBMcX/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vjH1EkW4Xfd45BpkDHxLBMcX/image.png\"></a></div>",
        "id": 406802028,
        "sender_full_name": "Shubhra Mishra",
        "timestamp": 1702054917
    },
    {
        "content": "<p>All true theorems are equivalent</p>",
        "id": 406802300,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702054963
    },
    {
        "content": "<p><del>In the case of your example your two theorems are exactly the same up to renaming of variables. In type theory this is called alpha equivalence. It is certainly possible to write meta-programs that check whether two proved theorems have alpha equivalent types if that is the only thing you want to check for, but there are many more things that humans might consider equivalent that are more subtle than alpha equivalence. As far as I know there is no Lean 4 code to do this just yet, but it shouldn't be too hard to write it</del><br>\nI see now that there is another difference between your theorems, the use of <code>mul_comm</code>, so this is indeed a more subtle problem, that isnt really well defined without more examples!</p>",
        "id": 406803462,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702055394
    },
    {
        "content": "<p>Syntactically they are not equivalent, because <code>(a+b)*(a-b)</code> is not identical to <code>(a-b)*(a+b)</code>.  They are proven equivalent by the commutativity of multiplication. But as Alex and Ruben's different responses  indicates, the equivalence is upto you to define. There are many forms of equivalence. Your two theorems are equivalent upto a renaming of variables and commutativity. But they are also equivalent by virtue of being true.</p>",
        "id": 406807128,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702056581
    },
    {
        "content": "<p>thank you so much! i asked the question because i was wondering if given two formal statements (one of which is an LLM-produced autoformalization, and the second of which is a ground truth formalization), i thought that one way to check how \"correct\" an autoformalization is could be by checking the two statements: \"if A, then B\" and \"if B, then A\". however, as ruben pointed out, any two theorems that are true would lead us to \"if true, then true\" and \"if true, then true,\" so my idea was flawed. are there other ways to evaluate if two formalizations are \"equivalent\"? even with manual inspection, isn't it a bit vague what someone might consider a good formalization, and what someone might not? sorry if this is a basic question â€” i'm fairly new to the world of rigorously formalized math, so still trying to understand it all. thank you! :)</p>",
        "id": 406822150,
        "sender_full_name": "Shubhra Mishra",
        "timestamp": 1702062464
    },
    {
        "content": "<p>and thank you ruben, alex, and shreyas for your help!</p>",
        "id": 406822252,
        "sender_full_name": "Shubhra Mishra",
        "timestamp": 1702062491
    },
    {
        "content": "<p>You are on the right track.  If A and B are two propositions, it is fair to say they are equivalent in some sense if A &lt;-&gt; B. It's just that this need not be a straightforward equality in math (not just lean). You might have different additional assumptions for both implications.</p>",
        "id": 406847551,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702074138
    },
    {
        "content": "<p>The existence of <code>exact?</code>, <code>simp?</code>, <code>aesop?</code> indicate that equivalence up to alpha equivalence + each of them(i.e. what manipulative rules and heuristics are allowed to use) + <code>import</code>(i.e. what lemmas are they allowed to use) is well defined and can be checked by Lean by proving one with sorry then prove the other one using alpha equivalence and the logic in these automation, then swap them.</p>\n<p>(Defining them as <code>Prop</code>, and use Lean to prove <code>iff</code> is also applicable for some cases but variables make this a little more invasive to the statement, so if the intention is to keep the statement literal, the solution suggested above will be more feasible. Anyway, this comment is just the proof of the existence of such ability in Lean, not an <code>computable</code> implementation.)</p>",
        "id": 406875467,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702090133
    },
    {
        "content": "<p>It seems that the intention is to check if these 2 statement are as close as possible, so the definition might be equivalence up to alpha equivalence + <code>exact?</code> or <code>simp?</code> but check if it's just <code>simp only</code>.</p>",
        "id": 406875725,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702090300
    }
]