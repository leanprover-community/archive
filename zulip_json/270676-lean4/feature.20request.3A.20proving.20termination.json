[
    {
        "content": "<p>I'm not certain how to describe this other than by a minimal example of what I would like to have work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">T1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">T1</span> <span class=\"bp\">→</span> <span class=\"n\">T1</span> <span class=\"bp\">→</span> <span class=\"n\">T1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">T1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Blah</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">T1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">T1.c1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">T1.c2</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Blah</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">Blah</span> <span class=\"n\">l</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">T1.c3</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">,</span> <span class=\"n\">T1.c3</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Blah</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">T1.c3</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">FOL.Blah</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">Blah</span> <span class=\"n\">l</span> <span class=\"n\">x</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">Blah</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">T1.c3</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>",
        "id": 373581970,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688861669
    },
    {
        "content": "<p>Add <code>termination_by Blah l t =&gt; sizeOf l + sizeOf t</code> at the end of <code>Blah</code>.</p>",
        "id": 373583277,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688862413
    },
    {
        "content": "<p>Hmm. Yes, that works, thank you. Maybe the example was too minimal.</p>",
        "id": 373585813,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688863623
    },
    {
        "content": "<p>The issue was with the last case: <code>| hd :: tl, T1.c3 n =&gt; Blah tl (T1.c3 n)</code> where the second argument isn't decreasing, so you need to somehow say that the first argument counts too.</p>",
        "id": 373585991,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688863701
    },
    {
        "content": "<p>Interestingly, if you remove the second case <code>| l, T1.c2 x y =&gt; Blah l x ∧ Blah l y</code> where the second argument decreases but the first does not, then Lean can figure out that the first argument matters.</p>",
        "id": 373586545,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688863954
    },
    {
        "content": "<p>Lean can't be perfect at figuring out termination arguments... otherwise, the Halting Problem wouldn't be a problem at all!</p>",
        "id": 373587079,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688864195
    },
    {
        "content": "<p>:)</p>",
        "id": 373587170,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688864250
    },
    {
        "content": "<p>This is the larger case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">VarAssignment</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Definition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">DefName</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nodup</span> <span class=\"o\">:</span> <span class=\"n\">args.Nodup</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nf</span> <span class=\"o\">:</span> <span class=\"n\">q.freeVarSet</span> <span class=\"bp\">⊆</span> <span class=\"n\">args.toFinset</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Holds</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_const_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_var_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∧</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∨</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">↔</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">),</span> <span class=\"n\">def_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">::</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">d.args.length</span>\n    <span class=\"k\">then</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">V</span> <span class=\"n\">d.args</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"n\">args</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"n\">d.q</span>\n    <span class=\"k\">else</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373587285,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688864295
    },
    {
        "content": "<p>Adding <code>termination_by _ V E psi =&gt; sizeOf E + sizeOf psi</code> gets it to the <code>then</code> case.</p>",
        "id": 373587358,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688864350
    },
    {
        "content": "<p>Which gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n\n<span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Definition</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n<span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">DefName</span>\n<span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">List.length</span> <span class=\"n\">args</span> <span class=\"bp\">=</span> <span class=\"n\">List.length</span> <span class=\"n\">d.args</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sizeOf</span> <span class=\"n\">d.q</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">name</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">args</span>\n</code></pre></div>",
        "id": 373587395,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688864374
    },
    {
        "content": "<p>Aha! That case is not decreasing at all. I don't know exactly what you're trying to do but I think you may have discovered the point of cut elimination!</p>\n<p>The consistency of cut-free systems is easily proved by the kind of recursion you gave. The issue is the cut rule, which is not decreasing in length. However, some cut-elimination theorems can be shown for some system where cuts can be eliminated from a proof at the cost of a super exponential blowup in proof size. So you might have a lot of work ahead of you!</p>\n<p>Then again, I don't know exactly what you're doing, so you might be able to come up with a measure that decreases in that case too.</p>\n<p>Have you tried <code>1 + sizeOf E + sizeOf psi</code>, just in case?</p>",
        "id": 373590087,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688865675
    },
    {
        "content": "<p>I just tried it, but it didn't seem to help.<br>\nI'm sorry, I'm not really familiar with cut elimination.<br>\nMario Carneiro came up with a mutually recursive definition that works, but I was hoping to be able to do it with this definition. This is the mutually recursive definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Holds'</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">holds</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dfn</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Definition</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_const_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_var_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">phi</span> <span class=\"n\">V</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">phi</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">psi</span> <span class=\"n\">V</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">phi</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">psi</span> <span class=\"n\">V</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">phi</span> <span class=\"n\">V</span> <span class=\"bp\">∨</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">psi</span> <span class=\"n\">V</span>\n  <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">phi</span> <span class=\"n\">V</span> <span class=\"bp\">↔</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">psi</span> <span class=\"n\">V</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">phi</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">holds</span> <span class=\"n\">dfn</span> <span class=\"n\">phi</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Option.elim</span> <span class=\"n\">dfn</span>\n      <span class=\"n\">False</span>\n      <span class=\"o\">(</span>\n        <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Definition</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">d.args.length</span>\n        <span class=\"k\">then</span> <span class=\"n\">holds</span> <span class=\"n\">d.q</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">V</span> <span class=\"n\">d.args</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"n\">args</span><span class=\"o\">))</span>\n        <span class=\"k\">else</span> <span class=\"n\">holds</span> <span class=\"o\">(</span><span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"n\">V</span>\n      <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Holds</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"n\">Option.none</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">::</span> <span class=\"n\">E</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Holds'</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373591004,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688866123
    },
    {
        "content": "<p>That case isn't decreasing on <code>Env</code>?</p>",
        "id": 373592047,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688866696
    },
    {
        "content": "<p>This definition is decreasing lexicographically on <code>(phi, E)</code> (or <code>(x, l)</code> for the MWE)</p>",
        "id": 373592062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688866707
    },
    {
        "content": "<p>it's kind of ackermann-esque, not sure how well lean handles termination proving for that</p>",
        "id": 373592113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688866738
    },
    {
        "content": "<p>To make the MWE not allow <code>sizeOf l + sizeOf t</code> as a possible termination measure, you can replace the second case by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">T1.c2</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Blah</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">Blah</span> <span class=\"n\">l</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 373592296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688866845
    },
    {
        "content": "<p>But that's just because <code>(l ++ l).length = l.length + l.length</code> is not applied by the termination tactic?</p>",
        "id": 373592498,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688866964
    },
    {
        "content": "<p>I was afraid of Ackermanian-esque growth issues but this is just a Prop-evaluation function, so it's linear!</p>",
        "id": 373592617,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688867032
    },
    {
        "content": "<p>it's not about growth but about the recursion structure</p>",
        "id": 373592940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688867208
    },
    {
        "content": "<p>and no, applying that lemma would not help because if <code>sizeOf l</code> is bigger than <code>sizeOf y</code> then it really isn't decreasing by the metric <code>sizeOf l + sizeOf t</code></p>",
        "id": 373593021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688867272
    },
    {
        "content": "<p>but you can imagine that it was <code>foo l</code> instead, where <code>foo : List Nat -&gt; List Nat</code> is an opaque function with no particular boundedness guarantees</p>",
        "id": 373593122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688867316
    },
    {
        "content": "<p>The prop evaluation function is in fact exponential, because it unfolds definitions (the <code>E</code> parameter is the environment, and every time a definition is unfolded it goes through another round of substitution / doubling)</p>",
        "id": 373593230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688867401
    },
    {
        "content": "<p>Yes, that's the issue. It might be even worse than exponential in the end!</p>\n<p>I'm confused by <span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span>'s example since there is no type for <code>Env</code>?</p>",
        "id": 373593855,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688867747
    },
    {
        "content": "<p>Sorry, I edited it to add it.</p>",
        "id": 373593942,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688867784
    },
    {
        "content": "<p><code>def Env : Type := List Definition</code></p>",
        "id": 373594065,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688867880
    },
    {
        "content": "<p>There might be a serious issue here: I'm not exactly sure what <code>Defintion</code> actually is but it might allow something like <code>def f x := f (f x)</code> in which case termination is a no-go.</p>",
        "id": 373594619,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688868170
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Definition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">DefName</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nodup</span> <span class=\"o\">:</span> <span class=\"n\">args.Nodup</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nf</span> <span class=\"o\">:</span> <span class=\"n\">q.freeVarSet</span> <span class=\"bp\">⊆</span> <span class=\"n\">args.toFinset</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 373594682,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688868214
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">PredName</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">PredName</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">def_</span> <span class=\"o\">:</span> <span class=\"n\">DefName</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 373594830,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688868317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/feature.20request.3A.20proving.20termination/near/373594619\">said</a>:</p>\n<blockquote>\n<p>There might be a serious issue here: I'm not exactly sure what <code>Defintion</code> actually is but it might allow something like <code>def f x := f (f x)</code> in which case termination is a no-go.</p>\n</blockquote>\n<p>This isn't possible because after unfolding definition <code>d</code> in context <code>d :: E</code>, the definition body is evaluated in context <code>E</code>, so any references to <code>d</code> in the unfolding (if <code>d</code> tries to be self referential) will be treated as non-existing (and unfold to <code>False</code> in the fallback case for <code>([] : Env)</code>)</p>",
        "id": 373594993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688868404
    },
    {
        "content": "<p>however you definitely can have a sequence of definitions <code>x(n+1) := xn -&gt; xn</code> and get exponential growth that way</p>",
        "id": 373595164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688868512
    },
    {
        "content": "<p>You seem to know a lot more than me about <span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span>'s context! However, for the original question: the recursion needs to include <code>Env</code> for sure: you can't expect a shortcut here for reasons we just explained.</p>",
        "id": 373595347,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688868629
    },
    {
        "content": "<p>(I've been talking with <span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> about this project for a very long time via PM)</p>",
        "id": 373595412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688868672
    },
    {
        "content": "<p>That makes sense!</p>",
        "id": 373595494,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688868714
    },
    {
        "content": "<p>This is what I would call a \"structural recursion\", either <code>E</code> decreases (structurally) or it stays the same and <code>phi</code> decreases (structurally)</p>",
        "id": 373595569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688868753
    },
    {
        "content": "<p>but it isn't declared with an argument order that makes this obvious</p>",
        "id": 373595601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688868784
    },
    {
        "content": "<p>looks like lean can't handle the regular ackermann function either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ack</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ack</span> <span class=\"n\">m</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ack</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- fail to show termination for</span>\n<span class=\"c1\">--   ack</span>\n<span class=\"c1\">-- with errors</span>\n<span class=\"c1\">-- argument #1 was not used for structural recursion</span>\n<span class=\"c1\">--   failed to eliminate recursive application</span>\n<span class=\"c1\">--     ack (m + 1) n</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- argument #2 was not used for structural recursion</span>\n<span class=\"c1\">--   failed to eliminate recursive application</span>\n<span class=\"c1\">--     ack m 1</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- structural recursion cannot be used</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- failed to prove termination, use `termination_by` to specify a well-founded relation</span>\n</code></pre></div>\n<p>Adding <code>termination_by _ m n =&gt; (m, n)</code> does work though, unlike <span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> 's example</p>",
        "id": 373595983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688868997
    },
    {
        "content": "<p>See also: <a href=\"https://proofassistants.stackexchange.com/a/2202/\">https://proofassistants.stackexchange.com/a/2202/</a></p>",
        "id": 373596224,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688869177
    },
    {
        "content": "<p>which looks pretty similar to the split definition <code>Holds'</code> kayla posted above</p>",
        "id": 373596428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688869286
    },
    {
        "content": "<p>OK. I think I see what's going on with Kayla's definition. I think it's of ordinal length ω^ω. The size function is something like ω^e(f+1) where e is the definition depth and f is the formula size. The idea is that each definition adds ω since there's no telling how big the definition is. Once it's all settled though it's linear in the length of each formula down the line.</p>",
        "id": 373597577,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688870034
    },
    {
        "content": "<p>well, if you are talking about the asymptotic size of the function, you would include <code>E</code> in the size measure, so the definition is at most linear</p>",
        "id": 373598229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688870492
    },
    {
        "content": "<p>No, I'm talking about the proof-theoretic depth of the termination argument.</p>",
        "id": 373598331,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688870549
    },
    {
        "content": "<p>well, since it has a termination measure of <code>(E, phi)</code> and those are both countable sets with order type omega, the whole termination argument yields order type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ω</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\omega^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 373598500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688870645
    },
    {
        "content": "<p>(same as the ackermann function)</p>",
        "id": 373598539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688870692
    },
    {
        "content": "<p>since this function doesn't grow as explosively as the ackermann function, it's likely that there is a plain old termination measure in <code>Nat</code></p>",
        "id": 373598685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688870779
    },
    {
        "content": "<p>Well, so my first edit was probably correct. </p>\n<blockquote>\n<p>OK. I think I see what's going on with Kayla's definition. I think it's of ordinal length ω². The size function is something like ωe + f where e is the definition depth and f is the formula size. The idea is that each definition adds ω since there's no telling how big the definition is. Once it's all settled though it's linear in the length of each formula down the line.</p>\n</blockquote>\n<p>I was worried that <code>phi</code> might have several occurrences of the topmost definition but they all have the same depth, so that's just a constant multiple. These are tough calculations to do late at night!</p>",
        "id": 373599038,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688871044
    },
    {
        "content": "<p>It might be ω³ though... Oh well, its &gt; ω for sure!</p>",
        "id": 373599213,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688871186
    },
    {
        "content": "<p>yeah I think your quote is correct, why do you think it is omega^3?</p>",
        "id": 373599231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688871211
    },
    {
        "content": "<p>Because <code>phi</code> might have any number of definitions in it.</p>",
        "id": 373599310,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688871248
    },
    {
        "content": "<p>the <code>f</code> in <code>ωe + f</code> represents the number of constructors involved in <code>phi</code> itself. If you unfold any definition, no matter how large, it will be <code>ω(e-1) + f'</code> (where <code>f'</code> is the size of the definition body) which is less</p>",
        "id": 373599437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688871349
    },
    {
        "content": "<p>the number of definitions doesn't matter so much since this is just about the \"height\" of the recursion, not the number of nodes</p>",
        "id": 373599505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688871366
    },
    {
        "content": "<p>I think you're right but it's late over here... I keep second-guessing myself. </p>\n<p>Thank you for the very entertaining discussion! I hope Kayla also got something useful out of it!</p>",
        "id": 373600083,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688871737
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 373600686,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688872144
    },
    {
        "content": "<p>Actually, I'm still not sure. I'm second-guessing again, lol! I'm thinking you didn't factor that the definition in <code>env</code> might involve later definitions when calculating <code>f'</code>. I'm not sure though and, as I said, it's really late over here so I'm not thinking as clearly as I should.</p>",
        "id": 373601138,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688872451
    },
    {
        "content": "<p>I disagree about the \"number of nodes\" argument since that number could grow at each step.</p>",
        "id": 373601254,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688872541
    },
    {
        "content": "<p><code>f'</code> doesn't include the later definitions, the <code>ω(e-1)</code> accounts for that</p>",
        "id": 373601267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688872550
    },
    {
        "content": "<p>The precise claim here is that you can map each pair <code>(E, phi)</code> involved in the computation to an ordinal less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ω</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\omega^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, such that for each immediate call made the current ordinal value is greater than the value of the call arguments</p>",
        "id": 373601523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688872687
    },
    {
        "content": "<p>and the mapping is essentially <code>omega * length E + sizeOf phi</code></p>",
        "id": 373601570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688872731
    },
    {
        "content": "<p>Yes, that is the initial guess.</p>",
        "id": 373601637,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688872785
    },
    {
        "content": "<p>And I think it may be right but I keep second-guessing myself.</p>",
        "id": 373601777,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688872883
    },
    {
        "content": "<p>The issue is that <code>length E</code> doesn't capture the total length of the formulas in <code>E</code>.</p>",
        "id": 373602040,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688873050
    },
    {
        "content": "<p>That could be way large if all definitions are expanded!</p>",
        "id": 373602106,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688873110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> If the initial guess is correct, use something like the sum of the lengths in <code>Env</code> rather than the length of <code>Env</code> for your measure. If the second-guess is right, that still won't work even if you supply a custom <code>decreasing_by</code> argument.</p>",
        "id": 373604533,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688874707
    },
    {
        "content": "<p>By that, I don't mean that it's your burden to decide who's right! It's just the next thing to try to see if it works!</p>",
        "id": 373604780,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688874869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/feature.20request.3A.20proving.20termination/near/373602040\">said</a>:</p>\n<blockquote>\n<p>The issue is that <code>length E</code> doesn't capture the total length of the formulas in <code>E</code>.</p>\n</blockquote>\n<p>That's okay, that's what the <code>omega</code> is for. No matter how big the formula is it's always less than <code>omega</code>. The fact that you can give a more precise upper bound on this in terms of the sum of sizes of the formulas in <code>E</code> or the like is an indication that <code>omega</code> is a loose bound, and there is another bound you could give with order type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ω</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\omega^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 373709879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688911151
    },
    {
        "content": "<p>Now that I've had some sleep, I agree: ω² is right. I was overthinking the effect of substituting formulas from the environment, but the setup doesn't allow recursive definitions so it's not a significant effect.</p>",
        "id": 373725868,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688915653
    },
    {
        "content": "<p>I'm sorry, a lot of this seems to be over my head. It sounds like I should try the sum of the lengths in <code>Env</code>? So the lengths of the <code>Definition</code> structures in <code>Env</code>? What would that be?</p>",
        "id": 373741888,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688920579
    },
    {
        "content": "<p><code>termination_by _ =&gt; (E, phi)</code> should suffice.</p>",
        "id": 373745013,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688921852
    },
    {
        "content": "<p>I have to do <code>termination_by _ V E phi =&gt; (E, phi)</code> to fix the unknown identifiers. That gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n\n<span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">Env</span>\n<span class=\"n\">phipsi</span><span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">V</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">snd</span> <span class=\"k\">fun</span> <span class=\"n\">E</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">))</span>\n          <span class=\"n\">Prod.instWellFoundedRelationProd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n      <span class=\"n\">y</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"kt\">Prop</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">phi</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">V</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">snd</span> <span class=\"k\">fun</span> <span class=\"n\">E</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">))</span>\n          <span class=\"n\">Prod.instWellFoundedRelationProd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n      <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">phi</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"o\">}</span> <span class=\"o\">})</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>at the <code>imp_</code> case.</p>",
        "id": 373745703,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688922088
    },
    {
        "content": "<p>Does that mean it won't work and this does need to be a feature request?</p>",
        "id": 373746880,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688922440
    },
    {
        "content": "<p>It seems to me that <code>sizeOf psi &lt; sizeOf (imp_ phi psi)</code> is true. Try adding <code>have : sizeOf psi &lt; sizeOf (imp_ phi psi) := sorry</code> somewhere in the <code>imp_</code> case and see if that helps. (Of course, you will have to fill in that sorry later on.)</p>",
        "id": 373749154,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688923396
    },
    {
        "content": "<p>The <code>termination_by _ V E psi =&gt; sizeOf E + sizeOf psi</code> seems to work for this case. It just fails on the <code>then</code> case.</p>",
        "id": 373749446,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688923510
    },
    {
        "content": "<p>What is the missing goal there?</p>",
        "id": 373749641,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688923576
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n\n<span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Definition</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n<span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">DefName</span>\n<span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">List.length</span> <span class=\"n\">args</span> <span class=\"bp\">=</span> <span class=\"n\">List.length</span> <span class=\"n\">d.args</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sizeOf</span> <span class=\"n\">d.q</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">name</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">args</span>\n</code></pre></div>",
        "id": 373749726,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688923618
    },
    {
        "content": "<p>That goal is not true. That's why you need to use <code>termination_by _ =&gt; (E, psi)</code>. Did you try adding the have in the <code>imp_</code> case?</p>",
        "id": 373750046,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688923752
    },
    {
        "content": "<p>Sorry, no. What is the syntax for adding it?</p>",
        "id": 373750886,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688924075
    },
    {
        "content": "<p>That is, where does it get added in the <code>| V, E, imp_ phi psi =&gt; Holds D I V E phi → Holds D I V E psi</code></p>",
        "id": 373751062,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688924133
    },
    {
        "content": "<p>I see, it depends on the line spacing.</p>",
        "id": 373751911,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688924422
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n</code></pre></div>",
        "id": 373752442,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688924603
    },
    {
        "content": "<p>That works until I hit the <code>then</code> case again, which is now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n\n<span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Definition</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n<span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">DefName</span>\n<span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">List.length</span> <span class=\"n\">args</span> <span class=\"bp\">=</span> <span class=\"n\">List.length</span> <span class=\"n\">d.args</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 373752879,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688924771
    },
    {
        "content": "<p>Yikes! That's not good!</p>",
        "id": 373753330,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688924969
    },
    {
        "content": "<p>:)</p>",
        "id": 373754941,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688925641
    },
    {
        "content": "<p>Does using <code>termination_by _ =&gt; (sizeOf E, sizeOf psi)</code> change anything?</p>",
        "id": 373756417,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688926263
    },
    {
        "content": "<p>With the <code>have</code>s for the other cases, it brings it back to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n\n<span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Definition</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n<span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">DefName</span>\n<span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">List.length</span> <span class=\"n\">args</span> <span class=\"bp\">=</span> <span class=\"n\">List.length</span> <span class=\"n\">d.args</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sizeOf</span> <span class=\"n\">d.q</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">name</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">args</span>\n</code></pre></div>\n<p>for the <code>then</code> case.</p>",
        "id": 373757223,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688926575
    },
    {
        "content": "<p>Sorry, I'm heading out for a while. Thank you.</p>",
        "id": 373757817,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688926785
    },
    {
        "content": "<p>Aha! I think <code>termination_by _ _ E phi =&gt; (E.length, phi)</code> works.</p>",
        "id": 373778360,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688935319
    },
    {
        "content": "<p>Yep, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Holds</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_const_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_var_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∧</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∨</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">↔</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">),</span> <span class=\"n\">def_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">::</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">d.args.length</span>\n    <span class=\"k\">then</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">V</span> <span class=\"n\">d.args</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"n\">args</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"n\">d.q</span>\n    <span class=\"k\">else</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E.length</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thank you! Do you think there is a way to do it without the <code>have</code>s?</p>",
        "id": 373802058,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688950518
    },
    {
        "content": "<p>Try adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>at the end. (I don't have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, so can't try it, but <code>decreasing_by</code> lets you specify tactics to generate these obligations.</p>",
        "id": 373802586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688950763
    },
    {
        "content": "<p>(you may still need <code>decreasing_tac</code> or at least <code>simp_wf</code>?)</p>",
        "id": 373802844,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688950872
    },
    {
        "content": "<p><code>decreasing_by simp_wf; simp</code> probably suffices <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 373802915,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688950908
    },
    {
        "content": "<p>Interestingly, it seems to work fine without the interpretation stuff. Here is my recreation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">eql</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">cnj</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">dsj</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">any</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">dfn</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Definition</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">form</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">valUpdate</span> <span class=\"o\">{</span><span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Dom</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">ips</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">valUpdate</span> <span class=\"n\">val</span> <span class=\"n\">ips</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Formula.eval</span> <span class=\"o\">{</span><span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eql</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"n\">phi</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">imp</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"n\">psi</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">cnj</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"n\">phi</span> <span class=\"bp\">∧</span> <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"n\">psi</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">dsj</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"n\">phi</span> <span class=\"bp\">∨</span> <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"n\">psi</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">any</span> <span class=\"n\">n</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">valUpdate</span> <span class=\"n\">val</span> <span class=\"o\">[(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)])</span> <span class=\"n\">ctx</span> <span class=\"n\">phi</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">n</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">valUpdate</span> <span class=\"n\">val</span> <span class=\"o\">[(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)])</span> <span class=\"n\">ctx</span> <span class=\"n\">phi</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">dfn</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">dfn</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">==</span> <span class=\"n\">c.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">==</span> <span class=\"n\">c.args.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">valUpdate</span> <span class=\"n\">val</span> <span class=\"o\">((</span><span class=\"n\">c.args.zip</span> <span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n    <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"n\">c.form</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">eval</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">dfn</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">ctx</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373803071,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688950965
    },
    {
        "content": "<p>What if you move the variable assignment left of the colon?</p>",
        "id": 373803230,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688951043
    },
    {
        "content": "<p>Doesn't it need to be to the right because it is changed in the <code>forall_</code> and <code>exists_</code> cases?</p>",
        "id": 373803579,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688951205
    },
    {
        "content": "<p>Aside: This is the <code>Function.updateIte</code> definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Function.updateIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 373803845,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688951316
    },
    {
        "content": "<p>No, it only needs to be to the right of the colon if it's part of the recursion structure.</p>",
        "id": 373804798,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688951761
    },
    {
        "content": "<p>This should be a closer \"MWE\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.CompileInductive</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">def_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"n\">compile_inductive</span><span class=\"bp\">%</span> <span class=\"n\">Formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Definition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateListIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.updateIte</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">VarAssignment</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Holds</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_const_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_var_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∧</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∨</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">↔</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">),</span> <span class=\"n\">def_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">::</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">d.args.length</span>\n    <span class=\"k\">then</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">V</span> <span class=\"n\">d.args</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"n\">args</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"n\">d.q</span>\n    <span class=\"k\">else</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E.length</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373805264,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688951966
    },
    {
        "content": "<p>It still seems to need to <code>have</code>s.</p>",
        "id": 373806085,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688952362
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E.length</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>does not seem to work. I get goals like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n\n<span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">Env</span>\n<span class=\"n\">phi</span><span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Prod.Lex</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373806747,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688952632
    },
    {
        "content": "<p>Yes, but strangely the <code>have</code>s are not actually relevant! It's the same <code>have</code> in each case but it's only relevant in the <code>imp_</code> case. There's no way it's of any help in the <code>and_</code>, <code>or_</code> and <code>iff_</code> cases!</p>\n<p>This is truly bizarre! There's clearly a bug somewhere under the hood!</p>",
        "id": 373806891,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688952697
    },
    {
        "content": "<p>Why is it not relevant in the other cases?</p>",
        "id": 373807136,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688952833
    },
    {
        "content": "<p>With the <code>V</code> to the left of the colon:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.CompileInductive</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">def_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"n\">compile_inductive</span><span class=\"bp\">%</span> <span class=\"n\">Formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Definition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateListIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.updateIte</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">VarAssignment</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Holds</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_const_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_var_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∧</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∨</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">↔</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">),</span> <span class=\"n\">def_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">::</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">d.args.length</span>\n    <span class=\"k\">then</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">V</span> <span class=\"n\">d.args</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"n\">args</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"n\">d.q</span>\n    <span class=\"k\">else</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E.length</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373807378,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688952948
    },
    {
        "content": "<p>In the <code>and_</code> case, for example, what Lean needs to know is that <code>sizeOf psi &lt; sizeOf (and_ phi psi)</code> so that the second recursive call <code>Holds D I V E psi</code> is smaller than the incoming argument <code>and_ phi psi</code>. But the given hint <code>sizeOf psi &lt; sizeOf (imp_ phi psi)</code> says nothing about <code>and_ phi psi</code> but it somehow works!</p>",
        "id": 373808090,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688953287
    },
    {
        "content": "<p>oh, huh, a copy and paste error works.</p>",
        "id": 373808248,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688953370
    },
    {
        "content": "<p>I suspect that Lean somehow knows that <code>sizeOf (and_ phi psi) = sizeOf (imp_ phi psi)</code> so it doesn't matter which hint you give.</p>",
        "id": 373808296,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688953393
    },
    {
        "content": "<p>It's pretty funny though! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 373808473,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688953490
    },
    {
        "content": "<p>:)</p>",
        "id": 373808717,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688953616
    },
    {
        "content": "<p>Fixed version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.CompileInductive</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">def_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"n\">compile_inductive</span><span class=\"bp\">%</span> <span class=\"n\">Formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Definition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateListIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.updateIte</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">VarAssignment</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Holds</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_const_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_var_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∧</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∨</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">psi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">↔</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">phi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">),</span> <span class=\"n\">def_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">::</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">d.args.length</span>\n    <span class=\"k\">then</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">V</span> <span class=\"n\">d.args</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"n\">args</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"n\">d.q</span>\n    <span class=\"k\">else</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E.length</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Unfortunately adding <code>decreasing_by simp_wf; simp</code> seems to break it.</p>",
        "id": 373809104,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688953817
    },
    {
        "content": "<p>The bug is with imports and the <code>compile_inductive% Formula</code> line! If you delete that line and the imports, then <code>termination_by _ E phi =&gt; (E, phi)</code> works just fine!<br>\nI think that <code>Mathlib.Data.List.Basic</code> contains a bad simp lemma. You should report that as a bug on Mathlib!</p>",
        "id": 373810801,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688954745
    },
    {
        "content": "<p>I just checked: <code>compile_inductive% Formula</code> is not an issue. The problem is with <code>Mathlib.Data.List.Basic</code>.</p>",
        "id": 373811180,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688954909
    },
    {
        "content": "<p>Huh. Yeah. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.CompileInductive</span>\n<span class=\"c1\">--import Mathlib.Data.List.Basic</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">def_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"n\">compile_inductive</span><span class=\"bp\">%</span> <span class=\"n\">Formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Definition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateListIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.updateIte</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">VarAssignment</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Holds</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_const_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_var_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--have : sizeOf psi &lt; sizeOf (imp_ phi psi) := by simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--have : sizeOf psi &lt; sizeOf (and_ phi psi) := by simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∧</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--have : sizeOf psi &lt; sizeOf (or_ phi psi) := by simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∨</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--have : sizeOf psi &lt; sizeOf (iff_ phi psi) := by simp</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">↔</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--have : sizeOf phi &lt; 1 + sizeOf x + sizeOf phi := by simp</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">--have : sizeOf phi &lt; 1 + sizeOf x + sizeOf phi := by simp</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">),</span> <span class=\"n\">def_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">::</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">d.args.length</span>\n    <span class=\"k\">then</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">V</span> <span class=\"n\">d.args</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"n\">args</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"n\">d.q</span>\n    <span class=\"k\">else</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E.length</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but not with the <code>Mathlib.Data.List.Basic</code>.</p>",
        "id": 373811392,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688955010
    },
    {
        "content": "<p>You can also use <code>(E, phi)</code> instead of <code>(E.length, phi)</code>.</p>",
        "id": 373811492,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688955074
    },
    {
        "content": "<p>That breaks the <code>then</code> case for me.</p>",
        "id": 373811547,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688955103
    },
    {
        "content": "<p>It doesn't break it for you?</p>",
        "id": 373812157,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688955415
    },
    {
        "content": "<p>It still works on my end. Did you change anything subtle?</p>",
        "id": 373812211,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688955442
    },
    {
        "content": "<p>Here is my version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.CompileInductive</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">def_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"n\">compile_inductive</span><span class=\"bp\">%</span> <span class=\"n\">Formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Definition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Definition</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Function.updateListIte</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.updateIte</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">VarAssignment</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Holds</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_const_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.pred_var_</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">not_</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">→</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∧</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">∨</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">↔</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"n\">psi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">phi</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">def_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">::</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">d.name</span> <span class=\"bp\">∧</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">d.args.length</span>\n    <span class=\"k\">then</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Function.updateListIte</span> <span class=\"n\">V</span> <span class=\"n\">d.args</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"n\">args</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"n\">d.q</span>\n    <span class=\"k\">else</span> <span class=\"n\">Holds</span> <span class=\"n\">D</span> <span class=\"n\">I</span> <span class=\"n\">V</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">def_</span> <span class=\"n\">name</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">phi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373812311,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688955485
    },
    {
        "content": "<p>Hmm. You have <code>abbrev VarAssignment (D : Type) : Type := String → D</code> where I have <code>def VarAssignment (D : Type) : Type := String → D</code>.</p>",
        "id": 373812463,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688955565
    },
    {
        "content": "<p>but that doesn't seem to be it.</p>",
        "id": 373812603,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688955621
    },
    {
        "content": "<p>hmm. your code works for me.</p>",
        "id": 373812668,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688955665
    },
    {
        "content": "<p>Ah! Yes, I forgot I did that. The one you need is for <code>Env</code> though, just make that an <code>abbrev</code> or a <code>@[reducible] def</code> and it will work.</p>",
        "id": 373812753,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688955721
    },
    {
        "content": "<p>Ok, yes, that does it.</p>",
        "id": 373812913,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688955796
    },
    {
        "content": "<p><code>abbrev</code> is probably better, it's basically the same as <code>@[reducible,inline]</code> but the <code>inline</code> part is irrelevant in this case so whatever...</p>",
        "id": 373813104,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688955885
    },
    {
        "content": "<p>I guess the question is now, what is going on with the <code>import Mathlib.Data.List.Basic</code>.</p>",
        "id": 373813105,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688955886
    },
    {
        "content": "<p>Yes! Please send a bug report! Link to this discussion and include the last mwe.<br>\nI suspect it's a bad simp lemma. That happens all the time, but there's some simp experts maintaining mathlib that can fix that way better than we could!</p>",
        "id": 373813460,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688956084
    },
    {
        "content": "<p>Ok. Thank you!!</p>",
        "id": 373813559,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688956148
    },
    {
        "content": "<p>Thank _you_! This was fun!</p>",
        "id": 373813726,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688956239
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/issues/5788\">https://github.com/leanprover-community/mathlib4/issues/5788</a></p>",
        "id": 373819262,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1688959240
    }
]