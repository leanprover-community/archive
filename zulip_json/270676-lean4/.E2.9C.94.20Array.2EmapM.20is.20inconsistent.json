[
    {
        "content": "<p><code>Array.mapM</code> has an inconsistent reference implementation. MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Evil</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Evil</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">x.2.1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">,</span><span class=\"n\">x.2.2</span> <span class=\"bp\">+</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Evil</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">bin</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Evil</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Evil</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">bs.push</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array.mapM</span> <span class=\"n\">test</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">Array.foldlM</span> <span class=\"o\">(</span><span class=\"n\">bin</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- (#[0],1,1)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Array.mapM</span> <span class=\"n\">test</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- (#[0],2,2)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Array.foldlM</span> <span class=\"o\">(</span><span class=\"n\">bin</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I know the monad <code>Evil</code> is not actually a monad as <code>¬ LawfulMonad Evil</code>, so this inconsistency is acceptable to some extent.<br>\nHowever, it should be documented somewhere.</p>",
        "id": 370146034,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1687886368
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2295\">lean4#2295</a></p>",
        "id": 370155377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687888196
    },
    {
        "content": "<p>(Inconsistencies with the reference implementation are never okay, because you can use them to cause UB in safe code.)</p>",
        "id": 370155607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687888232
    },
    {
        "content": "<p>Thanks for making fix so quickly. I hope it will be merged soon.</p>",
        "id": 370157888,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1687888692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433695\">Jun Yoshida</span> has marked this topic as resolved.</p>",
        "id": 370158131,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687888751
    },
    {
        "content": "<p>Should someone label the PR \"bug\"?</p>",
        "id": 370206599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687900101
    },
    {
        "content": "<p>it's already labeled <code>fix:</code>, and also merged so not much point</p>",
        "id": 370217035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687903649
    }
]