[
    {
        "content": "<p>For some reason, the derived Repr is not working correctly.</p>\n<p>Raylib/Structures.lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vector2</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n<span class=\"c1\">-- deriving Inhabited</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_raylib__Vector2_mk\"</span><span class=\"o\">]</span> <span class=\"n\">Vector2.mk</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_raylib__Vector2_x\"</span><span class=\"o\">]</span> <span class=\"n\">Vector2.x</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_raylib__Vector2_y\"</span><span class=\"o\">]</span> <span class=\"n\">Vector2.y</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.definition</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Vector2</span>\n</code></pre></div>",
        "id": 340271167,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678253602
    },
    {
        "content": "<p>Main.lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Raylib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Raylib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Vector2.mk</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">a.x</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">a.y</span>\n</code></pre></div>",
        "id": 340271215,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678253641
    },
    {
        "content": "<p>stdout</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span> <span class=\"o\">}</span>\n<span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">000000</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">000000</span>\n</code></pre></div>",
        "id": 340271302,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678253669
    },
    {
        "content": "<p>When I copy the generated code, it works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vector2</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"c1\">-- from</span>\n<span class=\"c1\">-- set_option trace.Elab.definition true in</span>\n<span class=\"c1\">-- deriving instance Repr for Vector2</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Vector2</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">prec</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Std.Format.bracket</span> <span class=\"s2\">\"{ \"</span>\n        <span class=\"o\">(</span><span class=\"n\">Std.Format.nil</span> <span class=\"bp\">++</span> <span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">++</span> <span class=\"n\">Std.Format.text</span> <span class=\"s2\">\" := \"</span> <span class=\"bp\">++</span>\n                    <span class=\"n\">Std.Format.group</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.nest</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">x.x</span><span class=\"o\">))</span> <span class=\"bp\">++</span>\n                  <span class=\"n\">Std.Format.text</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">++</span>\n                <span class=\"n\">Std.Format.line</span> <span class=\"bp\">++</span>\n              <span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"y\"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">Std.Format.text</span> <span class=\"s2\">\" := \"</span> <span class=\"bp\">++</span>\n          <span class=\"n\">Std.Format.group</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.nest</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">x.y</span><span class=\"o\">)))</span>\n        <span class=\"s2\">\" }\"</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_raylib__Vector2_mk\"</span><span class=\"o\">]</span> <span class=\"n\">Vector2.mk</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_raylib__Vector2_x\"</span><span class=\"o\">]</span> <span class=\"n\">Vector2.x</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_raylib__Vector2_y\"</span><span class=\"o\">]</span> <span class=\"n\">Vector2.y</span>\n</code></pre></div>",
        "id": 340271577,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678253857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> has marked this topic as resolved.</p>",
        "id": 340271975,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678254081
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 340271990,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678254099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> has marked this topic as unresolved.</p>",
        "id": 340272118,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678254186
    },
    {
        "content": "<p>minimal reproducible <a href=\"https://github.com/locriacyber/debug-lean-derived-repr-extern\">https://github.com/locriacyber/debug-lean-derived-repr-extern</a></p>",
        "id": 340273642,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678255242
    },
    {
        "content": "<p>I wonder if the generated instance is using primitive projections (and primitive projections are not going through the extern function definitions)</p>",
        "id": 340274716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678255812
    },
    {
        "content": "<p>Oh, did you put the <code>attribute [extern]</code> before the <code>deriving instance Repr</code> line?</p>",
        "id": 340274935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678255978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span></p>",
        "id": 340274976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678256004
    },
    {
        "content": "<p>The compiler doesn't hot-swap the functions after the fact, so you have to make sure any replacements are set up before functions using the replacements are compiled</p>",
        "id": 340275075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678256051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Derived.20Instance.20not.20using.20.22extern.22.20attribute/near/340274935\">said</a>:</p>\n<blockquote>\n<p>Oh, did you put the <code>attribute [extern]</code> before the <code>deriving instance Repr</code> line?</p>\n</blockquote>\n<p>it doesn't matter</p>",
        "id": 340276836,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678256986
    },
    {
        "content": "<p>Either way it's not working</p>",
        "id": 340276991,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678257021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Derived.20Instance.20not.20using.20.22extern.22.20attribute/near/340274716\">said</a>:</p>\n<blockquote>\n<p>I wonder if the generated instance is using primitive projections (and primitive projections are not going through the extern function definitions)</p>\n</blockquote>\n<p>The derive handler creates <code>Syntax</code>, so I'm honestly not sure where the discrepancy could come from</p>",
        "id": 340284293,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678260228
    }
]