[
    {
        "content": "<p>Hello,</p>\n<p>I encountered an issue with <code>@[irreducible]</code> where <code>isDefEq</code> tries to unfold an irreducible definition. I don't really know how to write a MWE for this, so I don't hope for any solution, but maybe someone will know what triggers the issue and will be interested.<br>\nI tried to get quickly to the point in this message but I know I should really just try to reduce this to a MWE. Unfortunately I can't do that now. I eventually managed to work around this, but maybe this report will be interesting to someone.</p>\n<p><a href=\"https://github.com/thejohncrafter/Catlib4/blob/a106d2cf3626a3526707b9cfbe70b76cddfb0edd/Catlib4/Category/Vect.lean#L102-L112\">Here are the relevant lines in my project, I explain what they mean in the rest of the message.</a></p>\n<p>I defined the tensor product of vector spaces, and I want this equips the category Vect with a monoidal structure. My definition of tensor products involves quotients, which give very long definitions. <a href=\"https://github.com/thejohncrafter/Catlib4/blob/a106d2cf3626a3526707b9cfbe70b76cddfb0edd/Catlib4/Algebra/Vector/Quotient.lean#L123-L125\">I marked these definitions irreducible</a>. I also defined some categorical notions, in particular products and functors, and I want to define monoidal structures in terms of functors <code>C ×c C ⟶ C</code> (with the notations I use in my code).<br>\nThe issue happens when I want to define the associator, which in readable terms gives maps <code>(A ⊗ B) ⊗ C ⟶ A ⊗ (B ⊗ C)</code>, but in my framework is typed (<a href=\"https://github.com/thejohncrafter/Catlib4/blob/a106d2cf3626a3526707b9cfbe70b76cddfb0edd/Catlib4/Monoidal.lean#L31-L50\">full definition here</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">tensor_bifunctor</span> <span class=\"n\">K</span> <span class=\"bp\">×</span><span class=\"n\">c</span> <span class=\"n\">Category.identity</span> <span class=\"o\">(</span><span class=\"n\">KVect</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">tensor_bifunctor</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span>\n    <span class=\"o\">(</span><span class=\"n\">Category.Product.assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">Category.identity</span> <span class=\"o\">(</span><span class=\"n\">KVect</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">×</span><span class=\"n\">c</span> <span class=\"n\">tensor_bifunctor</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n      <span class=\"bp\">≫</span> <span class=\"n\">tensor_bifunctor</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(a natural transformation between the right functors, which is very convoluted, sorry, I wish I knew how to reduce this to a simpler example).<br>\nWhat happens is that I want to define the data of a natural transformation, which is, since I work in Vect, for each object a map</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LinearMap</span> <span class=\"o\">(</span><span class=\"n\">tensor_space</span> <span class=\"o\">(</span><span class=\"n\">tensor_space</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tensor_space</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">tensor_space</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and a function that takes <code>((U, V), W) ((U', V'), W') ((f, g), h)</code> (two triples of spaces and a triple of maps between them) and gives a proof that the previous maps are natural. <em>This holds by definition</em>, and I was able to make Lean understand that.</p>\n<p>I encountered a first issue when defining the maps of my natural transformation: <code>isDefEq</code> would reach the maximum number of heartbeats.<br>\nWhat happened was that the type of the maps involved a <code>tensor_space</code> which is a <code>cokernel</code>, which in turn reduces to a <code>quotient</code>. <a href=\"https://github.com/thejohncrafter/Catlib4/blob/a106d2cf3626a3526707b9cfbe70b76cddfb0edd/Catlib4/Algebra/Vector/Quotient.lean#L123\">By making <code>cokernel</code> irreducible I managed to work around the issue.</a><br>\nNow, I want to prove naturality. I start by with <code>intro ((U, V), W) ((U', V'), W') ((f, g), h)</code>, which is type correct, but makes <code>isDefEq</code> consume too much resource. What happens is that, <em>even though <code>cokernel</code> is <code>irreducible</code>, isDefEq tries to unfold it</em> (which I found out using <code>set_option trace.Meta.isDefEq true</code>.<br>\nThis behavior is very surprising to me, as Lean doesn't do this on the line above.</p>\n<p>I managed to work around this issue by using <code>opaque</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">opaque_id_wrapper</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">opaque_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">opaque_id_wrapper.1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">opaque_id_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">opaque_id</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">opaque_id_wrapper.2</span>\n</code></pre></div>\n<p>If I hide all my definitions behind <code>opaque_id</code>, it works, as <code>isDefEq</code> won't be able to unfold this. Better: with this trick, I can know my definitions are, indeed, type correct and coherent by definitional equality.</p>",
        "id": 355821351,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683216182
    },
    {
        "content": "<p>I don't have a specific question although I'd appreciate any comment :) especially on whether this is a known or new issue. Also, maybe I'm just doing things wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> please tell me if so :)</p>",
        "id": 355822359,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683216335
    },
    {
        "content": "<p>Is this section relevant? <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/metam.md#transparency\">https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/metam.md#transparency</a></p>\n<p>basically something is using TransparencyMode <code>all</code>?</p>",
        "id": 355841144,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683220924
    },
    {
        "content": "<p>This sounds like <a href=\"https://github.com/leanprover/lean4/pull/2162\">https://github.com/leanprover/lean4/pull/2162</a>, but it looks like your Lean version is recent enough to contain the fix</p>",
        "id": 355851040,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683223541
    },
    {
        "content": "<p>Well, I suppose the match discriminant is trivial anyway in the case of pattern <code>intro</code></p>",
        "id": 355851325,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683223595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20irreducible.2C.20report/near/355841144\">said</a>:</p>\n<blockquote>\n<p>Is this section relevant? <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/metam.md#transparency\">https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/metam.md#transparency</a></p>\n</blockquote>\n<p>Yes, I also tried to look at the source of Lean, and I went searching here on Zulip, that's how I found about <code>opaque</code> (and <code>constant</code> which seems to be deprecated?)<br>\nIt seems to me like I'm not the only one who's getting confused with <code>@[irreducible]</code>, I found <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Airreducible\">some</a> <a href=\"#narrow/stream/270676-lean4/topic/inferType.20does.20not.20respect.20ambient.20transparency\">topics</a> about it (that's where I learned more about how reducibility hints work in Lean 4).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20irreducible.2C.20report/near/355841144\">said</a>:</p>\n<blockquote>\n<p>basically something is using TransparencyMode <code>all</code>?</p>\n</blockquote>\n<p>Yes, I guess that's what happens... it's surprising though. I guess there is a difference between the checks that are performed by <code>exact</code> and those that are performed by <code>intro</code>, but I don't know the detail.</p>",
        "id": 355886124,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683234652
    },
    {
        "content": "<p><code>constant</code> is now spelled <code>axiom</code></p>",
        "id": 355886237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683234699
    },
    {
        "content": "<p>although <code>opaque</code> sometimes works in its place (and should be preferred if applicable)</p>",
        "id": 355886329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683234732
    },
    {
        "content": "<p>by the way, your trick with <code>opaque_id</code> is codified in mathlib as the <code>irreducible_def</code> command</p>",
        "id": 355886426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683234792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20irreducible.2C.20report/near/355851040\">said</a>:</p>\n<blockquote>\n<p>This sounds like <a href=\"https://github.com/leanprover/lean4/pull/2162\">https://github.com/leanprover/lean4/pull/2162</a>, but it looks like your Lean version is recent enough to contain the fix</p>\n</blockquote>\n<p>My issue looks similar to this, maybe I stumbled on a piece of code that contains a similar misbehavior?</p>",
        "id": 355886502,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683234836
    },
    {
        "content": "<p>can you make a MWE version of the example?</p>",
        "id": 355886677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683234907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20irreducible.2C.20report/near/355886426\">said</a>:</p>\n<blockquote>\n<p>by the way, your trick with <code>opaque_id</code> is codified in mathlib as the <code>irreducible_def</code> command</p>\n</blockquote>\n<p>Yes, I just copied this from a discussion here about this particular command <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n(This still gives rise to issues though, because now I have some rewriting to do, but that's another subject.)</p>",
        "id": 355886709,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683234923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Issue.20with.20irreducible.2C.20report/near/355886677\">said</a>:</p>\n<blockquote>\n<p>can you make a MWE version of the example?</p>\n</blockquote>\n<p>I'd love to, I'll try later :)</p>",
        "id": 355886761,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683234957
    }
]