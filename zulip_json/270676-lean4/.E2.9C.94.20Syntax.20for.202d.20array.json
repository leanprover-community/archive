[
    {
        "content": "<p>Hi,</p>\n<p>I'm trying to create a macro that parses a 2d array which I would like to denote using matlab-like syntax, i.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">;</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>but I'm having trouble creating the macro.</p>\n<p>I've defined the syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"s2\">\";\"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>and I'm trying to write <code>macro_rules</code> for this. I tried things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">outs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">num</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">row</span> <span class=\"k\">in</span> <span class=\"n\">nns</span> <span class=\"k\">do</span>\n      <span class=\"n\">outs</span> <span class=\"o\">:=</span> <span class=\"n\">outs.push</span> <span class=\"n\">row.getElems</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">outs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span>\n</code></pre></div>\n<p>but I'm getting the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pplication</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">outs.elemsAndSeps</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">outs</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">num</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I seem not to understand how to create the appropriate return type of the macro.<br>\nHow could I achieve this so that the macro produces an <code>Array (Array Nat)</code>?</p>",
        "id": 379574344,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1690563219
    },
    {
        "content": "<p>If you want a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix#doc\">docs#Matrix</a> in Mathlib4, you can use <code>!![1, 2, 3; 4, 5, 6]</code>. if that's not what you want, maybe the implementation is still helpful to build the <code>Array</code>version from.</p>",
        "id": 379580727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690564591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439334\">Jure Taslak (Slovenia)</span> has marked this topic as resolved.</p>",
        "id": 379768010,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690629646
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  I managed to get what I needed from the <code>Matrix</code> notation.</p>\n<p>A simplified version (without checking that dimensions match and corner cases) I got out of it was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"s2\">\",\"</span><span class=\"o\">),</span> <span class=\"s2\">\";\"</span><span class=\"o\">)</span> <span class=\"s2\">\"]]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([[</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rows</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;*</span> <span class=\"o\">]])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">rowVecs</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">rows.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">row</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">row</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"o\">])</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">rowVecs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">;</span> <span class=\"mi\">2</span> <span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 379768987,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1690629817
    }
]