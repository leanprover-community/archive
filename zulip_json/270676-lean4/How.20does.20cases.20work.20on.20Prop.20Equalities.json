[
    {
        "content": "<p>Why does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">EG</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">EG.A</span> <span class=\"bp\">≠</span> <span class=\"n\">EG.B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>I call cases on a hypothesis which is a Prop equality. This has precisely one constructor. Based on the docs this will result in a goal with one case <code>Eq.refl</code>. What further steps did <code>cases</code> do here? I understand that constructors are injective and disjoint. I just don't understand how <code>cases</code> was enough for this.</p>",
        "id": 399088144,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698533124
    },
    {
        "content": "<p>I have tried a few more examples, and essentially <code>cases</code> seems to do what <code>discriminate</code> does in Coq</p>",
        "id": 399088222,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698533200
    },
    {
        "content": "<p>There aren't any cases, because lean knows that A and B are different constructors so are not equal, so it can't unify with x=x</p>",
        "id": 399088254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698533260
    },
    {
        "content": "<p>What would you expect the goal to be if you are expecting a goal?</p>",
        "id": 399088306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698533315
    },
    {
        "content": "<p>what <code>cases</code> normally does, a case with the absurd expression as hypothesis and False as the goal</p>",
        "id": 399088426,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698533435
    },
    {
        "content": "<p>That's what the goal was <em>before</em> <code>cases</code>, right?</p>",
        "id": 399088459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698533489
    },
    {
        "content": "<p>It's <code>cases</code> job to return every possibility for all the constructors which match, but none match here.</p>",
        "id": 399088536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698533540
    },
    {
        "content": "<p>okay so basically that is enough for cases to say \"nothing to do here\".</p>",
        "id": 399088553,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698533568
    },
    {
        "content": "<p>It returns a goal for each case which can work, and none work so it leaves no goals so you proved your theorem. <code>rintro \\&lt;\\&gt;</code> probably works too (for the same reason)</p>",
        "id": 399088579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698533626
    },
    {
        "content": "<p>I think I just stumbled on a difference between Lean's <code>cases</code> and Coq's <code>destruct</code>, although their documentation would suggest that they are the same. For the example I provided both of them do the same thing. But Lean's <code>cases</code> does something more. It tries some unification stuff <br>\nSo while the following example from software foundations translated to lean perfectly works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">discriminate_ex2</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">H</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span>\n    <span class=\"n\">done</span>\n</code></pre></div>\n<p>In the coq proof from SF replacing <code>discriminate</code> with just <code>destruct</code> doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorem</span> <span class=\"n\">discriminate_ex2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">O</span> <span class=\"bp\">→</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"bp\">.</span>\n<span class=\"n\">Proof.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">contra.</span>\n  <span class=\"n\">discriminate</span> <span class=\"n\">contra.</span> <span class=\"c1\">-- replacing this with  `destruct` doesn't work.</span>\n <span class=\"n\">Qed.</span>\n</code></pre></div>\n<p>Therefore,  Lean's <code>cases</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∼</mo></mrow><annotation encoding=\"application/x-tex\">\\sim</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">∼</span></span></span></span>  Coq's<code>destruct</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∪</span></span></span></span> <code>discriminate</code></p>",
        "id": 399089485,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698534381
    }
]