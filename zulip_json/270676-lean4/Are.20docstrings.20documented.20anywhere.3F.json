[
    {
        "content": "<p>Is there any documentation that describes Lean4‚Äôs docstrings? There are plenty of examples in Lean itself that are helpful for me to consult, but I‚Äôm wondering if there is any <em>official</em> description.</p>\n<p>For example, a few minutes ago I fiddled with some example code to ascertain whether Lean accepted a constructor‚Äôs docstring if it‚Äôs written between the pipe and the constructor name. It appears so, but now I‚Äôm not sure whether that‚Äôs intended behavior or accidental leniency.</p>",
        "id": 369288642,
        "sender_full_name": "Josh Tilles",
        "timestamp": 1687656794
    },
    {
        "content": "<p>The places where docstrings can appear are authoritatively described by the grammar, although I realize that's just a \"check the code\" recommendation</p>",
        "id": 369288899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687656939
    },
    {
        "content": "<p>the situation with doc strings around the <code>| </code> in inductives is that it used to only be accepted after the bar, but that looks weird and is hard to format so we added an additional place to put doc strings before the <code>|</code> and transitioned the style to that</p>",
        "id": 369289043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687657006
    },
    {
        "content": "<p>it's a bit difficult to prevent docstrings after <code>|</code> from being syntactically correct because they are considered part of the <code>declModifiers</code> and we want other modifiers like attributes or <code>protected </code> to come after the bar</p>",
        "id": 369289209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687657088
    },
    {
        "content": "<p>Here, I just checked the code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://github.com/leanprover/lean4/blob/4036be4f50824ab3144a3543f83591a25b6476c3/src/Lean/Parser/Command.lean#L123\">https://github.com/leanprover/lean4/blob/4036be4f50824ab3144a3543f83591a25b6476c3/src/Lean/Parser/Command.lean#L123</a></p>\n<p>It says a <code>docComment</code> can appear before the <code>|</code>, and after the <code>|</code> there's a <code>declModifiers</code>, and that can start with a <code>docComment</code> too</p>",
        "id": 369289264,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687657127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Are.20docstrings.20documented.20anywhere.3F/near/369289043\">said</a>:</p>\n<blockquote>\n<p>the situation with doc strings around the <code>| </code> in inductives is that it used to only be accepted after the bar</p>\n</blockquote>\n<p>I didn't realize there was a grammar justification why the docs render inductives like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs4#Lean.Expr</a></p>",
        "id": 369289522,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687657266
    },
    {
        "content": "<p>and I just checked the elaborator code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://github.com/leanprover/lean4/blob/4036be4f50824ab3144a3543f83591a25b6476c3/src/Lean/Elab/Declaration.lean#L150-L152\">https://github.com/leanprover/lean4/blob/4036be4f50824ab3144a3543f83591a25b6476c3/src/Lean/Elab/Declaration.lean#L150-L152</a></p>\n<p>and it says that the doc string can be accepted in either place, it gives an error if you put both</p>",
        "id": 369289538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687657280
    },
    {
        "content": "<p>yeah that docgen output looks pretty crazy</p>",
        "id": 369289675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687657359
    },
    {
        "content": "<p>There was some discussion about improving it <a href=\"#narrow/stream/113488-general/topic/inductive.20types.20in.20documentation/near/357811206\">here</a>. It might be nice to have docstrings come after constructors in the documentation to match how other definitions look, even if it's not justified by the grammar. Another thing that came up was that it might be nice to visually distinguish parameters.</p>",
        "id": 369290709,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687657961
    },
    {
        "content": "<p>I think the parameters should just be dropped from the constructor types</p>",
        "id": 369291286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687658358
    },
    {
        "content": "<p>they are visible in the inductive declaration already</p>",
        "id": 369291309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687658382
    },
    {
        "content": "<p>Mildly related: Is there plans to elaborate code inside docstrings in a similar way to how Rust does it? That way you could have ctrl-click-go-to-definition in docs, and have semantic highlighting in doc strings, and the examples inside doc strings would be checked by the compiler as well, thus making sure they don't silently break.</p>",
        "id": 369745332,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1687793244
    },
    {
        "content": "<p>I wonder if that can be implemented as a linter. Isn't there a way to call the parser on arbitrary strings?</p>",
        "id": 369748906,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687793776
    },
    {
        "content": "<p>In order to have semantic highlighting and click to definition though I guess it would need to be part of the AST</p>",
        "id": 369749252,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687793842
    },
    {
        "content": "<p>One issue with actually elaborating docstrings is that I sometimes refer in a docstring to something later in the file...</p>",
        "id": 369749804,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687793932
    },
    {
        "content": "<p>It feels like you'd want to elaborate docstrings <em>after</em> processing the entire project (since sometimes you forward-refer to stuff in later files)</p>",
        "id": 369750349,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687794019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Are.20docstrings.20documented.20anywhere.3F/near/369750349\">said</a>:</p>\n<blockquote>\n<p>It feels like you'd want to elaborate docstrings <em>after</em> processing the entire project (since sometimes you forward-refer to stuff in later files)</p>\n</blockquote>\n<p>Given how the language server works, my intuition would be that running code in docstrings would be quite easy (change the docstring elaborator; done), whereas running all docstrings after processing everything would be very difficult. Lean elaboration is designed to be quite sequential.</p>",
        "id": 369774989,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1687798761
    },
    {
        "content": "<p>Yes, the best compromise I was able to come up with in my mind (i.e. with no concrete plans to implement it) was to elaborate the docstring after the <em>current</em> command, which would allow it to at least access that function and any above it</p>",
        "id": 369776934,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687799187
    },
    {
        "content": "<p>Yeah. But anything short of allowing forward references between files would be a non-starter for me, at least how I use docstrings ATM. I think there is reasonable justification for elaborating docstring code with the elab state of the project's root file. But I have no idea how you would implement that in the language server without substantial design changes (?)</p>",
        "id": 369777490,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687799322
    },
    {
        "content": "<p>I may be low-key interested in implementing at least the easy version, but I haven't contributed to the Lean compiler before, and got tons of other things to work on ;-;</p>",
        "id": 369783860,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1687800809
    },
    {
        "content": "<p>The problem I see with running forward references in docstrings is that you would have to first compile the deeper file. If you're making edits to the current file, that seems problematic, unless you only use a cached version.</p>",
        "id": 369794441,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687803294
    },
    {
        "content": "<p>yeah, this seems like something that would have to be best effort in vscode</p>",
        "id": 369818728,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687809193
    },
    {
        "content": "<p>In case it's useful, here's some notes from the past. We had this in Idris 1 - not sure if it's been redone for Idris 2 yet. Some things that were turned out well:</p>\n<ul>\n<li>Having a modifier for code blocks that said they should contain an error. This caused them to get a nice red underline with an error message tooltip, rather than having elaboration fail due to errors in the code block. This was good for demonstrating \"this fancy type prevents this mistake\".</li>\n<li>Having the equivalent of <code>#eval</code> inside docs, so that the result of evaluation was rendered in the docs. Good for program examples. We labeled those blocks with the <code>example</code> modifier.</li>\n</ul>\n<p>So e.g. one could write:</p>\n<div class=\"codehilite\" data-code-language=\"Idris\"><pre><span></span><code><span class=\"c1\">||| Add two numbers.</span>\n<span class=\"c1\">|||</span>\n<span class=\"c1\">||| ```idris example</span>\n<span class=\"c1\">||| add 2 3</span>\n<span class=\"c1\">||| ```</span>\n<span class=\"c1\">||| Adding strings doesn't work:</span>\n<span class=\"c1\">||| ```idris error</span>\n<span class=\"c1\">||| add \"two\" \"three\"</span>\n<span class=\"c1\">||| ```</span>\n<span class=\"c1\">||| @ n the first number</span>\n<span class=\"c1\">||| @ k the second number</span>\n<span class=\"nf\">plus</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"ow\">(</span>n<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"ow\">)</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"ow\">(</span>k<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"ow\">)</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\nplus<span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span>k<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>k\nplus<span class=\"w\"> </span><span class=\"ow\">(</span><span class=\"kt\">S</span><span class=\"w\"> </span>n'<span class=\"ow\">)</span><span class=\"w\"> </span>k<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">S</span><span class=\"w\"> </span><span class=\"ow\">(</span>plus<span class=\"w\"> </span>n'<span class=\"w\"> </span>k<span class=\"ow\">)</span>\n</code></pre></div>\n<p>There was also an explicit convention that the first paragraph of the docs was a summary to be shown in tooltips and the like.</p>\n<p>We used the scope that existed right after the decl was elaborated for the docs, and it worked OK. In retrospect, it would have been better to wait for the end of the mutual block.</p>\n<p>A challenge with Markdown is that inline code (that is, not a block) has no way of indicating the language or modifying it, and sometimes people want to refer to code in other languages (e.g. JSON or SQL or C or whatever) or use code font for literal output. IIRC (and I probably don't), we tried to elab those as type-correct Idris but didn't fail if we couldn't.</p>\n<p>In Lean, it would be cool if code blocks could be hooked up to a command elaborator via the modifier name that would allow the above features to be built as libraries.</p>",
        "id": 369822669,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1687810239
    },
    {
        "content": "<p>I also had a prototype of including image references, which was nice. I never merged it due to not having a good place in the package to stick files like that - I think Lake is advanced enough that this could be fixed now. Showing images in docs is occasionally really useful!</p>",
        "id": 369823056,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1687810341
    },
    {
        "content": "<p>The <code>|||</code> syntax for Idris docs was to make them not be syntactically comments. This was done in order to make it a parse error when they were placed in an invalid location, rather than silently ignoring them as comments. This decision had some unfortunate knock-on effects related to syntax highlighting in certain editors, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 369827701,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1687811767
    },
    {
        "content": "<p>Same is true with <code>/-- -/</code></p>",
        "id": 369829204,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687812198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Are.20docstrings.20documented.20anywhere.3F/near/369829204\">said</a>:</p>\n<blockquote>\n<p>Same is true with <code>/-- -/</code></p>\n</blockquote>\n<p>Good! :-)</p>",
        "id": 369831428,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1687812817
    },
    {
        "content": "<p>I assume it is a typo that the declaration named <code>plus</code> has a docstring about <code>add</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> , would this have been highlighted in the editor?</p>",
        "id": 369839724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687815208
    },
    {
        "content": "<p>I would expect it to at least, since it can't find <code>add</code> in the environment, only <code>plus</code>. And the build should fail then as well (docs are important, and easy to fix).</p>",
        "id": 369840286,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1687815417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Are.20docstrings.20documented.20anywhere.3F/near/369839724\">said</a>:</p>\n<blockquote>\n<p>I assume it is a typo that the declaration named <code>plus</code> has a docstring about <code>add</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> , would this have been highlighted in the editor?</p>\n</blockquote>\n<p>Yes, assuming there was no <code>add</code>in scope, it would have failed to compile because the <code>example</code> code block contained an elaboration-time error. I made these features because I'm terrible at this kind of thing and want the computer to take care of it for me!</p>\n<p>OTOH, if <code>add</code> was in scope, then this would not have failed. There was no relevance requirement for docs.</p>\n<p>We didn't have snippet completion, but the explicit docs for arguments could be used to build a nice experience on top of that, I think.</p>",
        "id": 369993507,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1687860306
    }
]