[
    {
        "content": "<p>I'm wondering, is there a way to customize the lean elaborator?</p>",
        "id": 391023691,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694728451
    },
    {
        "content": "<p>There is dozens of ways. What exactly do you want to do? <span class=\"user-mention\" data-user-id=\"384488\">@Joey Eremondi</span></p>",
        "id": 391024122,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694728692
    },
    {
        "content": "<p>A good starting point might be: <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/07_elaboration.md\">https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/07_elaboration.md</a></p>",
        "id": 391024264,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694728789
    },
    {
        "content": "<p>I'm wondering, is there a way to customize the elaborator in lean?</p>\n<p>I've seen some references in the docs to elaborators for type-aware macros. I'm wondering, is there a way to override existing forms without actually modifying the compiler? To have, for example, lambda or function application elaborate to something different? </p>\n<p>I'm looking to do something like the CoqRETT plugin, where each datatype is modified to have additional constructors. Or like Cur, where core language forms can be redefined but you can still refer to the old version.</p>",
        "id": 391024490,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694728899
    },
    {
        "content": "<p>yes</p>",
        "id": 391024596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694728952
    },
    {
        "content": "<p>I'm afraid you will have to be more specific if you want a helpful answer.</p>",
        "id": 391024634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694728973
    },
    {
        "content": "<p>You seem to have asked the question expecting to get a \"no\" or \"yes under these specific conditions\", but the answer is more like \"yes you can do almost every conceivable thing in this space\" so you have to be more specific</p>",
        "id": 391024819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694729078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  Sorry, I submitted only the first line of the message by accident, I'm struggling with the mobile interface.  Full message is <a href=\"#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/391024490\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/391024490</a></p>\n<p>As an example, is there a way to re-define how lambda, application, and function types are elaborated in a specific file? For example, in the CoqRETT example I gave, they add exceptions to Coq by extending each datatype with an extra \"error\" constructor. Then all terms are elaborated into an Error monad. So an application <code>f x</code> is normally just elaborated into an application in the core language, but here instead it would be elaborated into <code>do f' &lt;- f ; x &lt;- x; (f' x')</code>.</p>\n<p>Or suppose I want to add a typecase feature to Lean, so I use a custom elaborator that turns all types into Codes of a Universe ala Tarski, and implicitly inserts calls to the interpretation function for those codes at each point needed.</p>\n<p>So the idea is I can write code using all the normal language core constructs, but I have a custom elaborator that it goes through to translate it into something different in the core. Basically I want to change the language without modifying the compiler, especially without modifying the core language, so I know whatever I get out the other end is sound, even if it's different from what the normal elaborator would produce.</p>\n<p>I guess I'm expecting a \"no\" because the only language I know of that can do this is Cur, which is built on Racket macros and is ridiculously extensible. Coq can do it, but requires you to write a custom plugin. But I've heard that Lean's macros are powerful and take a lot from e.g. Scheme and Racket macros, so I thought there was a chance it would be possible.</p>",
        "id": 391027638,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694730754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Did not know that book existed, looks like the entire thing is probably useful to me. Thanks!</p>",
        "id": 391027715,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694730806
    },
    {
        "content": "<p>again, the answer is yes</p>",
        "id": 391027918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694730913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Cool. How? Are there docs?</p>",
        "id": 391028119,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694731034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/391024264\">said</a>:</p>\n<blockquote>\n<p>A good starting point might be: <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/07_elaboration.md\">https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/07_elaboration.md</a></p>\n</blockquote>",
        "id": 391028137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Looking through that now. It seems to tell how to add new forms to the language, but not how to override existing forms, especially ones that don't have names (that I know of), like lambda and application.</p>",
        "id": 391028621,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694731323
    },
    {
        "content": "<p>They all have names</p>",
        "id": 391028673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731336
    },
    {
        "content": "<p>if you ctrl-click on lambda it should take you to the definition</p>",
        "id": 391028710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731354
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Term.fun#src\">src4#Lean.Parser.Term.fun</a></p>",
        "id": 391028749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731387
    },
    {
        "content": "<p>to override an existing form you use <code>elab_rules</code> instead of <code>elab</code></p>",
        "id": 391028784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731423
    },
    {
        "content": "<p>Ahh, okay. Thanks!</p>",
        "id": 391029284,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694731787
    }
]