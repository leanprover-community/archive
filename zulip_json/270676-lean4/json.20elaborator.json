[
    {
        "content": "<p>ProofWidgets has a nice <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Data/Json.lean\">json% elaborator</a> but it requires a <code>open scoped Json</code> that will break things, especially the words \"true\" and \"false\". Is there a way to get this elaborator without opening those scoped notations? Or is there a way to open it for one line of code in a function. <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 391957912,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695143286
    },
    {
        "content": "<p>You can open it in the scope of a single command (e.g. a single <code>def</code>) using <code>open scoped Json in def ..</code>, <del>but afaik there is no way to open within just a single term</del>. The issue with <code>true</code>/<code>false</code> is due to the token table being global, and I recall Sebastian mention he wanted to fix that at some point. Note also that <code>json%</code> isn't an elaborator, it is a macro.</p>",
        "id": 391958173,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695143394
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Data.Json</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Json</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- let x := true -- cannot uncomment this line</span>\n  <span class=\"n\">return</span> <span class=\"n\">json</span><span class=\"bp\">%</span> <span class=\"o\">{</span><span class=\"s2\">\"x\"</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 391958335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695143440
    },
    {
        "content": "<p>Yes, I know I can open it before def. But here I want to open it before return.</p>",
        "id": 391958385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695143464
    },
    {
        "content": "<p><code>open ... in</code> works within terms, but it is possible that it doesn't work here because you can't change the parser mid-command</p>",
        "id": 391958956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695143672
    },
    {
        "content": "<p>does the json parser work if these are declared as <code>&amp;\"true\"</code> and <code>&amp;\"false\"</code>? Are other identifiers legal in that position?</p>",
        "id": 391959055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695143718
    },
    {
        "content": "<p>Oh,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- let x := true</span>\n  <span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Json</span> <span class=\"k\">in</span>\n  <span class=\"n\">return</span>  <span class=\"n\">json</span><span class=\"bp\">%</span> <span class=\"o\">{</span><span class=\"s2\">\"x\"</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>fails but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">return</span> <span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Json</span> <span class=\"k\">in</span> <span class=\"n\">json</span><span class=\"bp\">%</span> <span class=\"o\">{</span><span class=\"s2\">\"x\"</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>works!</p>",
        "id": 391959292,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695143791
    },
    {
        "content": "<p>I'll be able to re-re-rewrite my code!</p>",
        "id": 391959337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695143816
    },
    {
        "content": "<p>I need to find out how to write a macro that expands to <code>open scoped ProofWidgets.Json in json%</code></p>",
        "id": 391959917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695144021
    },
    {
        "content": "<p>but this doesn't really feel right.</p>",
        "id": 391959942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695144031
    },
    {
        "content": "<p>this seems like leakage of macro internals, you shouldn't need to open anything for <code>json%</code> to do the right thing</p>",
        "id": 391960288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695144166
    },
    {
        "content": "<p>except possibly the <code>json%</code> macro itself, if it is scoped</p>",
        "id": 391960390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695144205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/json.20elaborator/near/391960390\">said</a>:</p>\n<blockquote>\n<p>except possibly the <code>json%</code> macro itself, if it is scoped</p>\n</blockquote>\n<p>Yeah, it's a scoped syntax. The issue is precisely the <code>true</code>/<code>false</code> thing: we don't want importing the macro definition to mess up parsing everywhere.</p>",
        "id": 391960554,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695144261
    },
    {
        "content": "<p>Mario, you can take a look at <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Data/Json.lean\">https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Data/Json.lean</a>, it doesn't depend on anything else.</p>",
        "id": 391960589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695144282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/json.20elaborator/near/391959055\">said</a>:</p>\n<blockquote>\n<p>does the json parser work if these are declared as <code>&amp;\"true\"</code> and <code>&amp;\"false\"</code>? Are other identifiers legal in that position?</p>\n</blockquote>\n<p>Are there any resources for how to use the <code>&amp;</code> parser? Declaring them as non-keywords breaks matching in <code>macro_rules</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">cat</span>\n<span class=\"n\">syntax</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"dogcow\"</span> <span class=\"o\">:</span> <span class=\"n\">cat</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cat</span><span class=\"bp\">|</span> <span class=\"n\">dogcow</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"c1\">-- expected cat</span>\n</code></pre></div>",
        "id": 391960661,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695144321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Data.Json</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"Json%\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">jso</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Json</span> <span class=\"k\">in</span> <span class=\"n\">json</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">return</span> <span class=\"n\">Json</span><span class=\"bp\">%</span> <span class=\"o\">{</span><span class=\"s2\">\"x\"</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>doesn't work <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> I'm out of hack ideas.</p>",
        "id": 391960822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695144384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think the issue is that to parse your <code>Json% blah</code>, the scoped syntaxes that make up <code>blah</code> need to already be open.</p>",
        "id": 391960927,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695144442
    },
    {
        "content": "<p>Yes, I understand, but I'm still out of ideas.</p>",
        "id": 391960971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695144469
    },
    {
        "content": "<p>this seems to work <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">cat</span> <span class=\"o\">(</span><span class=\"n\">behavior</span> <span class=\"o\">:=</span> <span class=\"n\">symbol</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"dogcow\"</span> <span class=\"o\">:</span> <span class=\"n\">cat</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cat</span><span class=\"bp\">|</span> <span class=\"n\">dogcow</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">dogcow</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dogcow</span>\n</code></pre></div>",
        "id": 391961196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695144586
    },
    {
        "content": "<p>Maybe a stop gap would be to drop support of <code>true</code> and <code>false</code> and use <code>$(true)</code> and <code>$(false)</code>.</p>",
        "id": 391961412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695144665
    },
    {
        "content": "<p>I'm not sure if this suffices for the json parser, but I would guess it does since <code>true</code> can only appear at a json object node</p>",
        "id": 391961456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695144687
    },
    {
        "content": "<p>I'm not sure why I'm getting strange reactions on that post</p>",
        "id": 391961484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695144699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/json.20elaborator/near/391961484\">said</a>:</p>\n<blockquote>\n<p>I'm not sure why I'm getting strange reactions on that post</p>\n</blockquote>\n<p>Mine was because the option is not documented on <code>declare_syntax_cat</code> and I had not seen it before. But one can get to its documentation by following the parser trail.</p>",
        "id": 391961697,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695144778
    },
    {
        "content": "<p>it's giving dark metamagic</p>",
        "id": 391961776,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695144812
    },
    {
        "content": "<p>(not opposed)</p>",
        "id": 391961785,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695144816
    },
    {
        "content": "<p>Okay, released new PW4 in which</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Json</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">return</span> <span class=\"n\">json</span><span class=\"bp\">%</span> <span class=\"o\">{</span><span class=\"s2\">\"x\"</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>should work thanks to Mario's metaprogramming investigations.</p>",
        "id": 391963496,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695145475
    },
    {
        "content": "<p>Great! Next question is: do we dare trying to bump PW4 in mathlib or will this break the cache?</p>",
        "id": 391963651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695145547
    },
    {
        "content": "<p>all bumps break the cache</p>",
        "id": 391963763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695145581
    },
    {
        "content": "<p>By the way Mario, don't you want <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Data/Json.lean\">https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Data/Json.lean</a> in Std anyway?</p>",
        "id": 391964484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695145816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/json.20elaborator/near/391963763\">said</a>:</p>\n<blockquote>\n<p>all bumps break the cache</p>\n</blockquote>\n<p>What should we do then?</p>",
        "id": 391964509,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695145826
    },
    {
        "content": "<p>bump anyway</p>",
        "id": 391964723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695145907
    },
    {
        "content": "<p>Do you mean \"invalidate\" rather than \"break\"?</p>",
        "id": 391964881,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695145956
    },
    {
        "content": "<p>I mean invalidate, not sure whether patrick does</p>",
        "id": 391964985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695145999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/json.20elaborator/near/391964484\">said</a>:</p>\n<blockquote>\n<p>By the way Mario, don't you want <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Data/Json.lean\">https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Data/Json.lean</a> in Std anyway?</p>\n</blockquote>\n<p>PRs welcome</p>",
        "id": 391965089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695146038
    },
    {
        "content": "<p>I'm referring the the week of debugging that followed my previous PW bump attempt. I opened  <a href=\"https://github.com/leanprover-community/mathlib4/pull/7258\">#7258</a> anyway.</p>",
        "id": 391968046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695146811
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/std4/pull/267\">std4#267</a>. I hope <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> and <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> are ok. The only differences with the version at ProofWidgets4 are docstrings and tests.</p>",
        "id": 391972185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695148178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I am curious why <code>jso_ident</code> and <code>jso_field</code> are syntax categories rather than just <code>syntax</code> abbreviations. That is, the following should work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">jsoSubst</span> <span class=\"o\">:=</span> <span class=\"s2\">\"$(\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span>\n<span class=\"n\">syntax</span> <span class=\"n\">jsoIdent</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">str</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">jsoSubst</span>\n<span class=\"n\">syntax</span> <span class=\"n\">jsoField</span> <span class=\"o\">:=</span> <span class=\"n\">jsoIdent</span> <span class=\"s2\">\": \"</span> <span class=\"n\">jso</span>\n</code></pre></div>",
        "id": 392418224,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695343744
    },
    {
        "content": "<p>syntax categories are generally only used for recursive or extensible syntax kinds.</p>",
        "id": 392418372,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695343807
    },
    {
        "content": "<p>I'm afraid the answer is that I was sadly never able to understand the intricacies of Lean syntax extensions! I can confirm that after removing the two categories it still works.</p>\n<p>However this does not fix the real issue. To remove the need for <code>scoped</code>, the task is to come up with a syntax extension which makes <code>macro_rules</code> work while also not breaking quotation patterns. Here is a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- Challenge: devise the syntax so that at least one of the `macro_rules`,</span>\n<span class=\"c1\">-- as well as the `#check` below succeed;</span>\n<span class=\"c1\">-- or explain why this is not possible.</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">dog</span> <span class=\"o\">(</span><span class=\"n\">behavior</span> <span class=\"o\">:=</span> <span class=\"n\">symbol</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"$(\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">dog</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"dog% \"</span> <span class=\"n\">dog</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">dog</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1337</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">dog</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1337</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"gr\">sorry</span> <span class=\"k\">else</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 392425904,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695348251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I have two alternative suggestions:</p>\n<ul>\n<li>Just use parentheses without the <code>$</code> (as they are otherwise not valid JSON).</li>\n<li>Use <code>{{ ... }}</code> like Moustache/Handlebars/GitHub actions (via <code>atomic(\"{\" noWs \"{\")</code> / <code>atomic(\"}\" noWs  \"}\")</code>  to avoid a new token).</li>\n</ul>\n<p>The former is simpler that later is clearer for the user.</p>",
        "id": 392429924,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695350921
    },
    {
        "content": "<p>I wonder if it would be a good idea to host some online (or even offline) workshops on some of the fine non-mathematical components of Lean 4 (and, in particular, the various aspects of metaprogramming).</p>",
        "id": 392430139,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695351086
    },
    {
        "content": "<p>I totally agree that a solution which does not clash with antiquotations is the pragmatic way to go. That said, I am interested in this puzzle because it seems intuitively wrong that adding parsers localized to a freshly defined category breaks the <em>global</em> syntax. This intuition might be incorrect, and in that case I would also be interested in learning why.</p>",
        "id": 392431458,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695351993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> The token trie is global. Every token reachable from command/term is in there. As <code>json%</code> makes <code>jso</code> reachable from term, its <code>$(</code> token breaks antiquotes.</p>",
        "id": 392436356,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695355437
    },
    {
        "content": "<p>Yep, you are right about that. Except that with antiquotations, because the token already exists, we can invent some hacks to make it work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">dog</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"dog% \"</span> <span class=\"n\">dog</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">dog</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">stx.raw.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">`</span><span class=\"n\">dog.pseudo.antiquot</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">stx.raw</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">Macro.throwUnsupported</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 10 : Nat -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">dog</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"gr\">sorry</span> <span class=\"k\">else</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 392526352,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695391625
    },
    {
        "content": "<p>Yes, this is in fact the reason I lifted the restriction of antiquotations only being allowed in quotations at some point. Ideally you should make use of functions <code>isEscapedAntiquot</code> etc. such that even <code> `(dog% $$x) </code> works (it should be a dog-level antiquotation, not a Syntax-level one)</p>",
        "id": 392527647,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695391973
    },
    {
        "content": "<p>Actually that should work out of the box since it's the syntax quotation elaborator's job to strip off one <code>$</code> here! You should only have to worry about that in your own quotation-like elaborator if other quotation-likes can be nested in it</p>",
        "id": 392528489,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695392193
    },
    {
        "content": "<p>Nice! The following seems to work as a fallback case handling antiquotations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">json</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span>           <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">stx.raw.isAntiquot</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">stx.raw.getAntiquotTerm</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Lean.toJson</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">Macro.throwUnsupported</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Lean.Json.mkObj [(\"abc\", Lean.toJson foo), (\"_def\", Lean.toJson 10)] : Lean.Json -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">json</span><span class=\"bp\">%</span> <span class=\"o\">{</span> <span class=\"n\">abc</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">_def</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 392532808,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1695393347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/json.20elaborator/near/392430139\">said</a>:</p>\n<blockquote>\n<p>I wonder if it would be a good idea to host some online (or even offline) workshops on some of the fine non-mathematical components of Lean 4 (and, in particular, the various aspects of metaprogramming).</p>\n</blockquote>\n<p>This was actually the point of the ICERM 2022 after-party, it was a metaprogramming workshop to get people trained up to write missing tactics for mathlib4</p>",
        "id": 392592242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695412819
    }
]