[
    {
        "content": "<p>I'm practicing writing simple macros, implementing some nice syntax for set literals. In the below code, if I leave out the second <code>macro_rules</code> case, I will get an error saying \"elaboration function for '«term#{_}»' has not been implemented\" when reaching <code>#{\"qux\"}</code>.</p>\n<p>My question is, why isn't the base \"empty\" case caught by the first rule, unless it's written by hand as in the first <code>#check #{}</code> example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.PersistentHashSet</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"#{\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">{})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">PersistentHashSet.empty</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">PersistentHashSet.insert</span> <span class=\"bp\">#</span><span class=\"o\">{}</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- TODO strange it's needed</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">PersistentHashSet.insert</span> <span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">#</span><span class=\"o\">{}</span> <span class=\"c1\">-- always ok</span>\n<span class=\"k\">#check</span> <span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"s2\">\"foo\"</span><span class=\"o\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"o\">,</span> <span class=\"s2\">\"qux\"</span><span class=\"o\">}</span> <span class=\"c1\">-- will fail without the second rule above</span>\n</code></pre></div>\n<p>Many thanks!</p>",
        "id": 405705293,
        "sender_full_name": "Phil Nguyen",
        "timestamp": 1701643641
    },
    {
        "content": "<p>If you write just <code>#{\"foo\"}</code>, you need that second rule because the third rule requires a comma after the first term.</p>",
        "id": 405705869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701644079
    },
    {
        "content": "<p>If you want to do the expansion all at once using only one rule, there's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"#{\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">MacroM</span> <span class=\"n\">Term</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">xs.getElems.foldlM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">PersistentHashSet.insert</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">PersistentHashSet.empty</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(The <code>show MacroM Term</code> is to get the result to be a <code>MacroM Term</code> rather than <code>MacroM Syntax</code>, which helps the <code>foldlM</code> get the right types.)</p>",
        "id": 405706197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701644339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476925\">Phil Nguyen</span> has marked this topic as resolved.</p>",
        "id": 405706965,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701644846
    },
    {
        "content": "<p>Thanks so much!</p>",
        "id": 405706979,
        "sender_full_name": "Phil Nguyen",
        "timestamp": 1701644862
    }
]