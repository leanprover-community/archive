[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">amazing_lemma</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.a</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Bar.mk</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">amazing_lemma</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p><code>amazing_lemma</code> fails; it complains we lack a <code>Bar R</code> instance even though we just constructed it.</p>",
        "id": 396679007,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697319301
    },
    {
        "content": "<p>These can be changed to your favourite combination of <code>have(I)</code> and <code>let(I)</code>to have the exact same issue.</p>",
        "id": 396679022,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697319325
    },
    {
        "content": "<p>if you then repeat the instance with something like <code>let e := s</code>, then stuff will work again.</p>",
        "id": 396679084,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697319379
    },
    {
        "content": "<p>This is almost certainly a caching bug; even <code>letI</code> fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">amazing_lemma</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bar</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.a</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Bar.mk</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- let s' := Bar.mk (Foo.a : R → R)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">amazing_lemma</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 396679665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697320173
    },
    {
        "content": "<p>(the goal view is indistinguishable between the <code>s</code> and <code>s'</code> case</p>",
        "id": 396679671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697320191
    },
    {
        "content": "<p>Adding <code>let s' : Bar R := s</code> to your original example fixes it</p>",
        "id": 396679898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697320453
    },
    {
        "content": "<p>OK, I think I've found the root cause, with another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">amazing_lemma</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">amazing_lemma</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>This similarly fails; however, if I say <code>s : Foo S := ...</code>, then stuff works. I think as Lean doesn't know the expected type, and doesn't expect it to be a class, the cache is not reset</p>",
        "id": 396681980,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697322661
    },
    {
        "content": "<p>For my applications, this is somewhat easy to work around, thankfully, but it is a bizarre issue when first found.</p>",
        "id": 396681996,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697322686
    },
    {
        "content": "<p>That sounds exactly like the problem</p>",
        "id": 396683178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697324140
    },
    {
        "content": "<p>Qq also fails a lot of the time on <code>let v :=</code> where it succeeds on <code>let v : t :=</code></p>",
        "id": 396683236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697324168
    },
    {
        "content": "<p>Is it worth opening an issue?</p>",
        "id": 396729142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697356723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, you managed to make an even smaller mwe, right? Can you open an issue with that?</p>",
        "id": 396741631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697366330
    },
    {
        "content": "<p>Yeah, I'll post it late tonight :)</p>",
        "id": 396745725,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697369435
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2696\">lean4#2696</a></p>",
        "id": 396877069,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697453818
    }
]