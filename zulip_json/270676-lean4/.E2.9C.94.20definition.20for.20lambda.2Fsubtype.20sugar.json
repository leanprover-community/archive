[
    {
        "content": "<blockquote>\n<p>originally posted at <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/definition.20for.20lambda.20sugar\">Is there code for X</a></p>\n</blockquote>\n<p>@stream where can I find the original lean syntax-definition/macro/notation for \"<em>lambda sugar</em>\"?<br>\ni.e. the \"dot\" in <code>(· + 1)</code> (which makes this whole expression mean the same as <code>fun a =&gt; a + 1</code>)</p>\n<p>I looked in the <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean\">Init/Notation.lean</a> file and it doesn't appear to be there</p>",
        "id": 339676027,
        "sender_full_name": "Somo S.",
        "timestamp": 1678014507
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/3b50410ec0a8b83344d0f61df554a1024bdaf298/src/Lean/Elab/BuiltinNotation.lean#L259\">Lean/Elab/BuiltinNotation.lean</a> should be it</p>",
        "id": 339681961,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1678016968
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> I'm new to lean4 and have been trying to investigate how easy it would be to make analogous sugar for Subtyping. <br>\nIt would be nice if, even just for my own projects, I could write something like e.g.<br>\n<code>{ // 3 + · ≤ 11 }</code>  as syntactic sugar for <code>Subtype (3 + · ≤ 11)</code></p>",
        "id": 339685942,
        "sender_full_name": "Somo S.",
        "timestamp": 1678018543
    },
    {
        "content": "<p>(totally off-topic remark: there was some discussion a few years ago as our community was forming, to use the butterfly emoji to indicate \"this post is not respectful\"; however there seems to have been little need for it and it's clearly not being used for that here)</p>",
        "id": 339689520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678020125
    },
    {
        "content": "<p>I think the best would be not to overload the current dot notation, but to just have notation for <code>{ // f }</code> if that is possible, so then then you can put in a function, a lambda, or a term with the dot notation in place of <code>f</code>.</p>",
        "id": 339690225,
        "sender_full_name": "Jason Rute",
        "timestamp": 1678020473
    },
    {
        "content": "<p>The use case doesn't seem particularly compelling to me; the key selling points of <code>·</code> are that it works with multiple arguments, and avoids the verbose <code>fun</code> notation. Neither benefit is relevant here</p>",
        "id": 339691148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678020895
    },
    {
        "content": "<p>Especially comparing</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-{ r : ℝ // 3 + r ≤ 11 }</span>\n<span class=\"gi\">+{ // 3 + (· : ℝ) ≤ 11 }</span>\n</code></pre></div>\n<p>Where the proposed spelling isn't even shorter!</p>",
        "id": 339691519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678021109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/definition.20for.20lambda.20sugar/near/339689520\">said</a>:</p>\n<blockquote>\n<p>(totally off-topic remark: there was some discussion a few years ago as our community was forming, to use the butterfly emoji to indicate \"this post is not respectful\"; however there seems to have been little need for it and it's clearly not being used for that here)</p>\n</blockquote>\n<p>(still getting used the culture of the community, had put it there myself as \"sorry\" <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> just in case my merely having asked this question/idea was not following some guideline such as posting in the correct stream)</p>",
        "id": 339692391,
        "sender_full_name": "Somo S.",
        "timestamp": 1678021581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/270676-lean4/topic/definition.20for.20lambda.20sugar/near/339690225\">said</a>:</p>\n<blockquote>\n<p>I think the best would be not to overload the current dot notation, but to just have notation for <code>{ // f }</code> if that is possible, so then then you can put in a function, a lambda, or a term with the dot notation in place of <code>f</code>.</p>\n</blockquote>\n<p>I like this idea as well, so as long as <code>f</code> is interpreted as being compatible with type<code>α → Prop</code> then there should  be no ambiguity</p>",
        "id": 339692696,
        "sender_full_name": "Somo S.",
        "timestamp": 1678021739
    },
    {
        "content": "<p>If it's helpful and you want to experiment with it, here's something I wrote by modifying what's in <code>Notation.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"s2\">\" // \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">//</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span>         <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"bp\">//</span> <span class=\"n\">Nat.even</span><span class=\"o\">}</span> <span class=\"c1\">-- short for `Subtype Nat.even`</span>\n</code></pre></div>",
        "id": 339694210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678022509
    },
    {
        "content": "<p>Ah, here's how you can get the bullet notation to work without needing parentheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">MySubtype</span><span class=\"o\">)</span> <span class=\"s2\">\"{\"</span> <span class=\"s2\">\" // \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[macro MySubtype]</span> <span class=\"kd\">def</span> <span class=\"n\">expandMySubtype</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">//</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.expandCDot</span><span class=\"bp\">?</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"n\">e</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"bp\">$</span><span class=\"n\">e'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"bp\">//</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">}</span> <span class=\"c1\">-- is Subtype (1 ≤ ·)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"bp\">//</span> <span class=\"n\">Nat.even</span><span class=\"o\">}</span> <span class=\"c1\">-- is Subtype Nat.even</span>\n</code></pre></div>",
        "id": 339695379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678023075
    },
    {
        "content": "<p>Wow <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> This is awesome. I tried playing around with it as well and honestly dont know enough about macros but you made quick work of this <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> . Thank you!</p>",
        "id": 339696038,
        "sender_full_name": "Somo S.",
        "timestamp": 1678023406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 339696048,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678023410
    },
    {
        "content": "<p>Here's a cleaner version. I didn't realize I could use <code>macro_rules</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"s2\">\" // \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">//</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.expandCDot</span><span class=\"bp\">?</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"n\">e</span>\n    <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"bp\">$</span><span class=\"n\">e'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339697409,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678024024
    }
]