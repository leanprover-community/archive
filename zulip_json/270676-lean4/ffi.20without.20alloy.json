[
    {
        "content": "<p>I have a working ffi setup using <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>’s alloy library, including linking against a system-provided library (<code>libseccomp</code>). But my C code is very trivial, so I’d like to use the FFI directly, but I can’t get it to work.</p>\n<p>Like before, I use this fragment to make lake pick up the system-provided <code>libseccomp.so</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern_lib</span> <span class=\"n\">libseccomp</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"seccomp\"</span>\n   <span class=\"k\">let</span> <span class=\"n\">dst</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span>\n   <span class=\"k\">let</span> <span class=\"n\">libdir</span> <span class=\"bp\">←</span> <span class=\"n\">captureProc</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"pkg-config\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"s2\">\"--variable=libdir\"</span><span class=\"o\">,</span> <span class=\"s2\">\"libseccomp\"</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n   <span class=\"n\">logStep</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Copying {name} from {libdir}\"</span>\n   <span class=\"n\">proc</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"mkdir\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"s2\">\"-p\"</span><span class=\"o\">,</span> <span class=\"n\">pkg.nativeLibDir.toString</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n   <span class=\"n\">proc</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cp\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"s2\">\"-f\"</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{libdir}/{name}\"</span><span class=\"o\">,</span> <span class=\"n\">dst.toString</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n   <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">BuildJob.pure</span> <span class=\"n\">dst</span>\n</code></pre></div>\n<p>Further Cargo-culting the example from the lean repo, I now have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">target</span> <span class=\"n\">loogle_seccomp.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"loogle_seccomp.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"loogle_seccomp.c\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"Seccomp c shim (.o)\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"n\">flags</span> <span class=\"s2\">\"cc\"</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libloogle_seccomp</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"loogle_seccomp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">loogle_seccomp.o</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">]</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">Seccomp</span> <span class=\"n\">where</span>\n   <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Seccomp</span><span class=\"o\">]</span>\n   <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>It builds a <code>.so</code> file from my shim (<code>loogle_seccomp.so</code>), and passes it to lean when building the  <code>Seccomp</code> lean module, but it has missing symbols:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">projekte</span><span class=\"bp\">/</span><span class=\"n\">programming</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"n\">Copying</span> <span class=\"n\">libseccomp.a</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"n\">hdrczj786rpbprb7h92g75j5cx9j48l</span><span class=\"bp\">-</span><span class=\"n\">libseccomp</span><span class=\"bp\">-</span><span class=\"n\">static</span><span class=\"bp\">-</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">unknown</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">musl</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">-</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lib</span>\n<span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">16</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Seccomp</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">etc</span><span class=\"bp\">/</span><span class=\"n\">sane</span><span class=\"bp\">-</span><span class=\"n\">libs</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jojo</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-15/bin/lean ./././Seccomp.lean -R ././. -o ./build/lib/Seccomp.olean -i ./build/lib/Seccomp.ilean -c ./build/ir/Seccomp.c --load-dynlib=./build/lib/libloogle_seccomp.so --load-dynlib=./build/lib/libseccomp.so</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libloogle_seccomp.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">seccomp_init</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jojo</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-15/bin/lean` exited with code 134</span>\n</code></pre></div>\n<p>This command line actually works when I reverse the order of the last two flags, but probably the real solution is to somehow pass <code>-lseccomp</code> when <code>./build/lib/libloogle_seccomp.so </code> is built. Can I achieve this somehow?</p>\n<p>(Full code at &lt;<a href=\"https://github.com/nomeata/loogle/tree/no-alloy\">https://github.com/nomeata/loogle/tree/no-alloy</a>&gt;)</p>",
        "id": 387262159,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692964434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> you can set the option <code>moreLinkArgs</code> and <code>moreLeancArgs</code> on your lean_lib/lean_exe</p>",
        "id": 387262621,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692964654
    },
    {
        "content": "<p>I’ll try. Did Alloy somehow take care of that for me implicitly?</p>",
        "id": 387262817,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692964743
    },
    {
        "content": "<p>Hmm, I’m still a bit lost. Wouldn’t I have to set the flag somewhere  for the <code>extern_lib libloogle_seccomp</code> target, as that is the C shim that uses the system library?</p>",
        "id": 387263050,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692964830
    },
    {
        "content": "<p>Ah, setting it for the package seems to help… And it seems I don’t even need <code>extern_lib libseccomp</code> then</p>",
        "id": 387263300,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692964944
    },
    {
        "content": "<p>How does lake know which <code>extern_lib</code>’s are needed in which <code>lean_lib</code> or <code>lean_exe</code>'s? Does it assume that within one project, all <code>extern_libs</code> are needed all the other targets?</p>",
        "id": 387265122,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692965716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/ffi.20without.20alloy/near/387265122\">said</a>:</p>\n<blockquote>\n<p>How does lake know which <code>extern_lib</code>’s are needed in which <code>lean_lib</code> or <code>lean_exe</code>'s? Does it assume that within one project, all <code>extern_libs</code> are needed all the other targets?</p>\n</blockquote>\n<p>Currently, Yes.</p>",
        "id": 387298367,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692977228
    }
]