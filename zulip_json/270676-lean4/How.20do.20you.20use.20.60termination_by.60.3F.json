[
    {
        "content": "<p>I can't see any documentation for <code>termination_by</code>—I wonder if I'm looking in the wrong files (<code>Init.WF.lean</code>, <code>Lean.Elab.PreDefinition.WF.TerminationHint.lean</code>).</p>\n<p>As far as I understand it, <code>termination_by &lt;xs&gt; =&gt; &lt;y&gt;</code> says that <code>&lt;y&gt;</code> 'can be used to show termination', but I'm not sure <em>how</em> lean uses <code>&lt;y&gt;</code>. What kinds of expressions be used to show termination, and when exactly are they sufficient to do so? (If this relies on a notion of something \"decreasing in size\", what notion of \"decreasing\" is allowed?) And what should be on the lhs of the arrow (<code>&lt;xs&gt;</code>)? Thanks! :)</p>",
        "id": 345528368,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1680130293
    },
    {
        "content": "<p>Decreasing as specified by the <code>WellFoundedRelation</code> type class.  You can put anything after the arrow that has a <code>WellFoundedRelation</code> instance.</p>",
        "id": 345528760,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1680130554
    },
    {
        "content": "<p>Would an instance that produces <code>WellFoundedRelation R</code> from <code>IsWellFounded R (&lt;)</code> be a bad idea?</p>",
        "id": 345529017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680130730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> I have usually found it convenient to define a <code>SizeOf</code> instance on the type I'm considering.  For example, for integer induction,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Int.natAbs</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(edit: apparently when I did this before I tagged it <code>@[default_instance]</code>, too, so maybe there was already an instance which I was overwriting.)</p>",
        "id": 345530038,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680131396
    },
    {
        "content": "<p>Then you are presented with the goal of showing that that quantity is strictly decreasing.</p>",
        "id": 345530143,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680131449
    },
    {
        "content": "<p>Surely instead of adding a subjective global instance you should just write <code>termination_by =&gt; Int.natAbs some_int_arg</code>?</p>",
        "id": 345530891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680131899
    },
    {
        "content": "<p>You're right ... my head is in teaching mode, trying to make things as silent as possible.  Although in this case I do think this is a better <code>SizeOf</code> for <code>Int</code> than the default one.</p>",
        "id": 345531185,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680132113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20do.20you.20use.20.60termination_by.60.3F/near/345530038\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> I have usually found it convenient to define a <code>SizeOf</code> instance on the type I'm considering.  For example, for integer induction,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Int.natAbs</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(edit: apparently when I did this before I tagged it <code>@[default_instance]</code>, too, so maybe there was already an instance which I was overwriting.)</p>\n</blockquote>\n<p>Yes there is such an instance, lean auto generates one for all inductive types itnis basically \"how many nodes are in the term tree\"</p>",
        "id": 345531249,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680132132
    },
    {
        "content": "<p>Which is of course not necessarily what you want to have</p>",
        "id": 345531293,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680132157
    },
    {
        "content": "<p>Ah, so your point is \"there's already a subjective default that is worse in almost every case than my one\"!</p>",
        "id": 345531575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680132333
    },
    {
        "content": "<p>Note that you can view the default instance in action by #eval sizeOf foo or alternatively figuring out the name of the auto generated instance with #synth and #print ing it to inspect its code</p>",
        "id": 345531770,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680132448
    },
    {
        "content": "<p>I see, thanks! What I don't quite get is when this is sufficient for proving termination. Sure, we might be able to produce a quantity that's an inhabitant of a type with a well-founded relation—but which quantities/relations are relevant for termination? I'm guessing we try to \"lift\" the well-foundedness of the relation on a given e.g. argument to the function to something to do with the function itself, but to what exactly? It’s easy to intuit when something <em>should</em> work, but when does it?</p>",
        "id": 345534120,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1680134046
    },
    {
        "content": "<p>The idea is that the value you provide to <code>termination_by</code> is supposed to decrease with every recursive call</p>",
        "id": 345534437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680134280
    },
    {
        "content": "<p>If you provide nothing then I believe the default is to use a <code>Prod</code> of all your recursive arguments, with lexicographic order (almost but not quite <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lex#doc\">docs4#Lex</a>, which is missing the instance needed to work with <code>termination_by</code>!)</p>",
        "id": 345534512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680134311
    },
    {
        "content": "<p>If I supply a value, though, how does lean actually try to prove that it <em>does</em> decrease with each call? What tools does it have available? (Do we just need to place some proof in the local context at the point of the recursive call, maybe?)</p>",
        "id": 345534954,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1680134582
    },
    {
        "content": "<p>I think that's what <code>decreasing_by</code> is for, though I don't know what it tries by default.</p>",
        "id": 345535382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680134859
    },
    {
        "content": "<p>Certainly it knows to try <code>assumption</code> to use local <code>have</code> statements as you suggest</p>",
        "id": 345535451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680134890
    },
    {
        "content": "<p>There is a decreasing_tac it is called iirc that is the default, it should actually be one of the tactics that are macro extensible.</p>",
        "id": 345572423,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680156782
    }
]