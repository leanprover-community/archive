[
    {
        "content": "<p>Hello, I am trying to write an attribute macro which automatically returns the \"runtime\" of a function. I was wondering if there are ways to debug attribute writing? For example, Lean is telling me that the generated function value does not agree with that of the supposed type. Is there any way that I can print out/ check the value of the generated function? Right now, when I try, I get that the function does not exist.</p>",
        "id": 363655395,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1685956121
    },
    {
        "content": "<p>Could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 363787603,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685984277
    },
    {
        "content": "<p>i think the <code>trace.Elab</code> options might have something for attribute macros. but my limited experience says that macro debugging is a pain and it is often easier to make an mwe and ask here what I am doing wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 363827591,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685995023
    },
    {
        "content": "<p>nevermind, i do not see anything relevant to attributes in the trace options, ignore me <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 363827912,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685995138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> sure. I think I have figured out how to check individual components of the macro.</p>\n<p>Now, I am stuck on trying to get type definitions to check out. I am trying to define a function which goes from <code>Nat -&gt; Nat x Bool</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod_make</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addDeclTest</span> <span class=\"o\">:=</span> <span class=\"n\">addDecl</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span> <span class=\"o\">{</span>\n    <span class=\"n\">value</span>  <span class=\"o\">:=</span>\n      <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n        <span class=\"o\">(</span>\n          <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">prod_make</span> <span class=\"o\">[])</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n            <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[],</span>\n            <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Bool</span> <span class=\"o\">[],</span>\n            <span class=\"n\">mkNatLit</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n            <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Bool.false</span> <span class=\"o\">[]</span>\n          <span class=\"o\">]</span>\n       <span class=\"o\">)</span>\n      <span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span>\n    <span class=\"n\">hints</span>  <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">opaque</span>\n    <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span>\n    <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"n\">type</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Prod</span> <span class=\"o\">[</span>\n          <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">),</span>\n          <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n        <span class=\"o\">])</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[],</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Bool</span> <span class=\"o\">[]])</span>\n      <span class=\"bp\">.</span><span class=\"n\">default</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Name.str</span> <span class=\"n\">Name.anonymous</span> <span class=\"s2\">\"counting\"</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>When I do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">addDeclTest</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Prod</span> <span class=\"n\">Nat</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 364539375,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1686226199
    },
    {
        "content": "<p>Ok, I got the above to work by changing the type universe to [.zero, .zero]. I am not quite sure why this fixed it. I also get now that the returned function is non-computable and am unsure as to why.</p>",
        "id": 364540520,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1686226443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572379\">Lev Stambler</span> has marked this topic as resolved.</p>",
        "id": 364726082,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686284361
    },
    {
        "content": "<p><code>Prod.{u,v} : Type u -&gt; Type v -&gt; Type (max u v)</code>. So if you want it specialized to <code>Type -&gt; Type -&gt; Type</code>, you have to set <code>u := 0, v := 0</code>.</p>\n<p>This is slightly confusing because <code>Prod</code> is specialized to <code>Type u</code> instead of <code>Sort u</code>. Since <code>Type u = Sort (u+1)</code>, you can write the type of <code>Prod</code> as<br>\n<code>Prod.{u,v} : Sort (u+1) -&gt; Sort (v+1) -&gt; Sort (max (u+1) (v+1))</code><br>\nSo the [0,0] refers to the universe variables [u,v], NOT the final levels in the resulting type (which are indeed <code>Type = Type 0 = Sort 1</code>)</p>",
        "id": 364963681,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686342682
    },
    {
        "content": "<p>and the computability thing you just have to use <code>addAndCompile</code> instead of <code>addDecl</code>, but I suspect you figured that out <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 364963831,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686342724
    }
]