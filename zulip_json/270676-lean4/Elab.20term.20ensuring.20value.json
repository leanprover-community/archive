[
    {
        "content": "<p>I know <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.elabTermEnsuringType#doc\">docs#Lean.Elab.Tactic.elabTermEnsuringType</a> allow to elaborate a term while ensuring is has a given type <code>(t : Expr)</code>. I need a variant where I want to elaborate a term while ensuring its <em>value</em> is defEq to a given expression. Does that exist?</p>",
        "id": 402523056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700156381
    },
    {
        "content": "<p>just elaborate it and then <code>isDefEq</code> the result</p>",
        "id": 402523277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700156457
    },
    {
        "content": "<p>The defEq would come too late. Typically the term would be <code>0 &lt; 1</code> and I want to compare it to <code>(0 : Int) &lt; 1</code>.</p>",
        "id": 402523428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700156519
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Does elaborating <code>rfl : $t = $input</code> work?</p>",
        "id": 402523760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700156634
    },
    {
        "content": "<p>The context is porting Lean verbose to Lean 4. There I have a version of suffices that allows to list multiple goals that have to be defEq to the goals created by apply.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bySufficesTac</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">mainGoal.withContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">fact</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">newGoals.length</span> <span class=\"bp\">!=</span> <span class=\"n\">goals.size</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"Applying this leads to {newGoals.length} goals, not {goals.size}.\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">newerGoals</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">goal</span><span class=\"o\">,</span> <span class=\"n\">announced</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">newGoals.zip</span> <span class=\"n\">goals.toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">announcedExpr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">announced</span> <span class=\"n\">none</span>\n    <span class=\"n\">newerGoals</span> <span class=\"o\">:=</span> <span class=\"n\">newerGoals.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">goal.replaceTargetDefEq</span> <span class=\"n\">announcedExpr</span><span class=\"o\">)</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"n\">newerGoals.toList</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">maybeApplied</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">maybeApplied</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"applied to\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">maybeApplied</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"applied to [\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">maybeApplied</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">maybeAppliedToTerm</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">maybeApplied</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybeApplied</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybeApplied</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybeApplied</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">Syntax.missing</span><span class=\"o\">⟩</span> <span class=\"c1\">-- This should never happen</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"By \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">maybeApplied</span> <span class=\"s2\">\"it suffices to prove \"</span> <span class=\"s2\">\"that \"</span><span class=\"bp\">?</span> <span class=\"n\">colGt</span> <span class=\"n\">arg</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"n\">bySufficesTac</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">maybeAppliedToTerm</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">arg</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--suffices 1 &gt; 0 from h 1 this</span>\n  <span class=\"n\">By</span> <span class=\"n\">h</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">it</span> <span class=\"k\">suffices</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 402524630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700156933
    },
    {
        "content": "<p>The example at the bottom fails. Ideally it would work with no type ascription at all.</p>",
        "id": 402524725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700156973
    },
    {
        "content": "<p>The <code>suffices</code> call does work (but only because there is only one auxiliary goal).</p>",
        "id": 402524876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700157024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Elab.20term.20ensuring.20value/near/402523760\">said</a>:</p>\n<blockquote>\n<p>Does elaborating <code>rfl : $t = $input</code> work?</p>\n</blockquote>\n<p>It doesn't</p>",
        "id": 402525242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700157167
    },
    {
        "content": "<p><code>have : $t := (?_ : $actual_goal)</code> seems to work</p>",
        "id": 402525515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700157272
    },
    {
        "content": "<p>In fact, you can look at how <code>show</code> works, since that seems to do the right thing</p>",
        "id": 402525849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700157389
    },
    {
        "content": "<p>I think you’ll want to elaborate the term with <code>mayPostpone := true</code> (as an argument to <code>elabTermEnsuringType</code>) and wrap part of the code in <code>Term.withSynthesize</code>. The issue with using <code>Nat</code> instead of <code>Int</code> is the use of instances, and we want to postpone synthesizing an instance until after the <code>isDefEq</code>.</p>",
        "id": 402526255,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700157555
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Help.20with.20writing.20tactic\">this thread</a> for an example of doing exactly this kind of thing; skip to the last message(s) for some relevant code</p>",
        "id": 402527031,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700157789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> that seems useful but I can't find any combination of those things that actually work. Do you think you could fix my mwe?</p>",
        "id": 402532069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700159696
    },
    {
        "content": "<p>I haven't read this whole thread carefully yet, but watch out that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabTermEnsuringType#doc\">docs#Lean.Elab.Term.elabTermEnsuringType</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.elabTermEnsuringType#doc\">docs#Lean.Elab.Tactic.elabTermEnsuringType</a> are different functions with different properties. The latter chooses default instances for example, so an <code>isDefEq</code> would definitely come too late.</p>",
        "id": 402533024,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700160059
    },
    {
        "content": "<p>I had to read your message several times before I was able to spot the difference...</p>",
        "id": 402533541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700160258
    },
    {
        "content": "<p>But switching to <code>Lean.Elab.Term.elabTermEnsuringType</code> doesn  seem to help.</p>",
        "id": 402533674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700160320
    },
    {
        "content": "<p>It takes some more work than just switching. Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bySufficesTac</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">mainGoal.withContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">fact</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">newGoals.length</span> <span class=\"bp\">!=</span> <span class=\"n\">goals.size</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"Applying this leads to {newGoals.length} goals, not {goals.size}.\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">newerGoals</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">goal</span><span class=\"o\">,</span> <span class=\"n\">announced</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">newGoals.zip</span> <span class=\"n\">goals.toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">announcedExpr</span> <span class=\"bp\">←</span> <span class=\"n\">Term.withSynthesize</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">announced</span> <span class=\"n\">none</span>\n      <span class=\"c1\">-- The `withAssignableSyntheticOpaque` is to be able to assign ?_ metavariables</span>\n      <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">withAssignableSyntheticOpaque</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">goal.getType</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"Announced term{indentD e}</span><span class=\"se\">\\n</span><span class=\"s2\">is not definitionally equal to goal{</span>\n<span class=\"s2\">          \"\"}{indentD (← goal.getType)}\"</span>\n      <span class=\"n\">pure</span> <span class=\"n\">e</span>\n    <span class=\"n\">newerGoals</span> <span class=\"o\">:=</span> <span class=\"n\">newerGoals.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">goal.replaceTargetDefEq</span> <span class=\"n\">announcedExpr</span><span class=\"o\">)</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"n\">newerGoals.toList</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">maybeApplied</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">maybeApplied</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"applied to\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">maybeApplied</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"applied to [\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">maybeApplied</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">maybeAppliedToTerm</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">maybeApplied</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybeApplied</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybeApplied</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybeApplied</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">Syntax.missing</span><span class=\"o\">⟩</span> <span class=\"c1\">-- This should never happen</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"By \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">maybeApplied</span> <span class=\"s2\">\"it suffices to prove \"</span> <span class=\"s2\">\"that \"</span><span class=\"bp\">?</span> <span class=\"n\">colGt</span> <span class=\"n\">arg</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">bySufficesTac</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">maybeAppliedToTerm</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">arg</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">By</span> <span class=\"n\">h</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">it</span> <span class=\"k\">suffices</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 402533985,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700160447
    },
    {
        "content": "<p>(<code>withAssignableSyntheticOpaque</code> isn't necessary for your example; and actually maybe it should be removed. When it's safe isn't so clear to me, but it can be annoying when it's missing from tactics.)</p>",
        "id": 402534098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700160486
    },
    {
        "content": "<p>The key is that the <code>isDefEq</code> is happening <em>before</em> the extra synthesis that occurs during <code>Term.withSynthesize</code></p>",
        "id": 402534193,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700160533
    },
    {
        "content": "<p>Great, thank you very much! This will probably be useful in other places as well.</p>",
        "id": 402534303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700160591
    },
    {
        "content": "<p>I think Thomas's suggestion could be incorporated, since <code>Tactic.elabTerm</code> does set up different error recovery options sometimes, but I don't really know when that's used.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">announced</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">mayPostpone</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402534957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700160837
    },
    {
        "content": "<p>That's not the same elabTerm.</p>",
        "id": 402535066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700160867
    },
    {
        "content": "<p>Your doesn't have that argument, right?</p>",
        "id": 402535081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700160875
    },
    {
        "content": "<p>I know, it's different, but it calls <code>Term.elabTerm</code> itself, and it doesn't break your example at least. I <em>think</em> the point is that <code>Tactic.elabTerm</code> makes your tactic work better for tactics like <code>first | ... | ...</code>, since <code>first</code> wants to turn off the error-&gt;sorry feature</p>",
        "id": 402535686,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700161095
    },
    {
        "content": "<p>But maybe you want to turn off error-&gt;sorry for your own tactic. In that case, make sure to wrap <code>Term.withoutErrToSorry</code>, and it seems <code>Tactic.elabTerm</code> wouldn't give you anything.</p>",
        "id": 402535752,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700161124
    },
    {
        "content": "<p>I'm sorry (or error?) but I don't understand your latest message.</p>",
        "id": 402536402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700161316
    },
    {
        "content": "<p>By default, elaboration errors (like type mismatches) get turned into <code>sorry</code> terms, but if you elaborate from within <code>Term.withoutErrToSorry</code>, they raise exceptions instead.</p>",
        "id": 402537033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700161487
    },
    {
        "content": "<p>I got that, but the end of you sentence is mysterious.</p>",
        "id": 402537157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700161536
    },
    {
        "content": "<p>I mean if you use <code>Term.withoutErrToSorry</code>, it looks like there's no point in using <code>Tactic.elabTerm (mayPostpone := true)</code> instead of <code>Term.elabTerm</code>. The former conditionally does <code>Term.withoutErrToSorry</code> if the tactic state is in no recovery mode.</p>",
        "id": 402537250,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700161564
    },
    {
        "content": "<p>Ok.</p>",
        "id": 402537321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700161590
    },
    {
        "content": "<p>Does the order of <code>Term.withoutErrToSorry</code> and <code>Term.withSynthesize</code> matter?</p>",
        "id": 402537462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700161636
    },
    {
        "content": "<p>I currently have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">elabTermEnsuringValue</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Term.withSynthesize</span> <span class=\"k\">do</span>\n  <span class=\"n\">Term.withoutErrToSorry</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"c1\">-- The `withAssignableSyntheticOpaque` is to be able to assign ?_ metavariables</span>\n  <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">withAssignableSyntheticOpaque</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"n\">val</span> <span class=\"k\">do</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"Given term{indentD e}</span><span class=\"se\">\\n</span><span class=\"s2\">is not definitionally equal to the expected{</span>\n<span class=\"s2\">      \"\"}{indentD val}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 402537497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700161654
    },
    {
        "content": "<p>Just to clarify an earlier point, <code>Tactic.elabTermEnsuringType</code> only chooses default instances when <code>mayPostpone := false</code>, right? (Using <code>mayPostpone := true</code> seems to avoid that choice, but I’m on mobile.)</p>",
        "id": 402543498,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700163965
    },
    {
        "content": "<p>Yes, that's my understanding. It'll also throw errors if instance problems are not solvable, which is fine.</p>",
        "id": 402543665,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700164045
    }
]