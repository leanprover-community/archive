[
    {
        "content": "<p>I'm having trouble with elaborating a binder that contains a pattern e.g. <code>(h : FunProp (λ (x,y) =&gt; f x y))</code>. Elaborating <code>(h : FunProp (λ p : Nat×Nat =&gt; f p.1 p.2))</code> works fine, but the <code>λ (x,y) =&gt;</code> trips elaboration for some reason.</p>\n<p>I do not know how this pattern matching works internally so I'm a bit lost on what to do about this. What am I doing wrong here?</p>\n<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"#check_binders\"</span> <span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">check_binders</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n\n  <span class=\"n\">Command.liftTermElabM</span>  <span class=\"k\">do</span>\n\n    <span class=\"n\">Term.elabBinders</span> <span class=\"n\">xs</span> <span class=\"bp\">λ</span> <span class=\"n\">contextVars</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">contextVars</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">x.hasMVar</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">inferType</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hasMVar</span> <span class=\"k\">then</span>\n          <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({← ppExpr x} : {← ppExpr (← inferType x)}) contains meta variables!\"</span>\n\n      <span class=\"k\">let</span> <span class=\"n\">vars</span> <span class=\"bp\">←</span> <span class=\"n\">contextVars.mapM</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← ppExpr x} : {← ppExpr (← instantiateMVars (← inferType x))}\"</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"binders: {vars}\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FunProp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check_binders</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- binders: #[f : Nat → Nat]</span>\n<span class=\"bp\">#</span><span class=\"n\">check_binders</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">FunProp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"c1\">-- binders: #[f : Nat → Nat, h : FunProp f]</span>\n<span class=\"bp\">#</span><span class=\"n\">check_binders</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">FunProp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"bp\">×</span><span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">))</span> <span class=\"c1\">-- binders: #[f : Nat → Nat → Nat, h : FunProp fun p =&gt; f p.fst p.snd]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check_binders</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">FunProp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"c1\">-- Error: (h : FunProp fun x =&gt; ?m.6569 x) contains meta variables!</span>\n</code></pre></div>",
        "id": 352882313,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682527617
    }
]