[
    {
        "content": "<p>How can I define a macro that expands to a sequence of commands? Say I want <code>#foo</code> to be read as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Nat</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 368144284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687334070
    },
    {
        "content": "<p>Note my actual commands don't generate output.</p>",
        "id": 368144410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687334099
    },
    {
        "content": "<p><code>stop_at_first_error</code></p>",
        "id": 368161020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687337752
    },
    {
        "content": "<p>you can also use <code> `(...)</code> which is overloaded to work on commands</p>",
        "id": 368161176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687337775
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"#foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n  <span class=\"k\">#check</span> <span class=\"n\">Nat</span>\n  <span class=\"k\">#eval</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 368161384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687337819
    },
    {
        "content": "<p>Thanks! I was trying to be too specific and used <code> `(command|...)</code> instead of <code> `(...)</code></p>",
        "id": 368161922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687337933
    },
    {
        "content": "<p>While you're here, do you remember whether there was any discussion of having the ProofWidgets4 lib depend on Std?</p>",
        "id": 368162315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687338011
    },
    {
        "content": "<p>do you mean the other way around?</p>",
        "id": 368162403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687338029
    },
    {
        "content": "<p>I mean I want to contribute something to ProofWidgets4 but I need something that is in Std.</p>",
        "id": 368162772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687338112
    },
    {
        "content": "<p>And currently ProofWidgets4 does not require Std in its lakefile</p>",
        "id": 368162904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687338132
    },
    {
        "content": "<p>which seems weird since I thought every Lean lib except for core and Std is meant to require Std.</p>",
        "id": 368162978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687338151
    },
    {
        "content": "<p>The thing I need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Gets the LSP range from a `String.Range`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.FileMap.utf8RangeToLspRange</span> <span class=\"o\">(</span><span class=\"n\">text</span> <span class=\"o\">:</span> <span class=\"n\">FileMap</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">String.Range</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lsp.Range</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"n\">text.utf8PosToLspPos</span> <span class=\"n\">range.start</span><span class=\"o\">,</span> <span class=\"bp\">«</span><span class=\"kd\">end</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">text.utf8PosToLspPos</span> <span class=\"n\">range.stop</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Gets the LSP range of syntax `stx`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.FileMap.rangeOfStx</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">text</span> <span class=\"o\">:</span> <span class=\"n\">FileMap</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Lsp.Range</span> <span class=\"o\">:=</span>\n  <span class=\"n\">text.utf8RangeToLspRange</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">stx.getRange</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>which I think depend on nothing, so I could copy-paste, but then I would need to avoid the name clash for libs importing both Std and ProofWidgets4.</p>",
        "id": 368163588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687338267
    },
    {
        "content": "<p>Probably you should ask <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> about that, I am not maintaining ProofWidgets</p>",
        "id": 368166378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687338854
    },
    {
        "content": "<p>It's definitely not the case that all Lean projects depend on Std; doc-gen, Qq, repl, and oleanparser are some lean projects off the top of my head that don't depend on std</p>",
        "id": 368166777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687338950
    },
    {
        "content": "<p>I know you are not maintaining it, that's why I wrote \"do you remember whether there was any discussion\".</p>",
        "id": 368166876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687338965
    },
    {
        "content": "<p>Do you think those lib try to be independent of Std or is this a historical accident?</p>",
        "id": 368167027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687339004
    },
    {
        "content": "<p>No I don't believe there has been any discussion</p>",
        "id": 368167054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687339011
    },
    {
        "content": "<p>Part of it might be that ProofWidgets might be aiming to be a dependency of Std</p>",
        "id": 368167244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687339059
    },
    {
        "content": "<p>although I don't think Std will be taking any dependencies, for user convenience, meaning that in that case Std would just absorb the whole library</p>",
        "id": 368167440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687339091
    },
    {
        "content": "<p>with the current state of things I think it would be fine to just have ProofWidgets depend on Std</p>",
        "id": 368167629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687339138
    },
    {
        "content": "<p>Ok, we'll see what Wojciech say.</p>",
        "id": 368168182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687339246
    },
    {
        "content": "<p>Actually the list of command thing doesn't work. Could you remind me how to ask Lean to show what macro expand to? Also <code>stop_at_first_error</code> is in Mathlib so I definitely cannot use it here.</p>",
        "id": 368168360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687339286
    },
    {
        "content": "<p>I don't know any good way to see macro expansions, other than finding them in the info tree (<code>set_option trace.Elab.info true</code>). <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ?</p>",
        "id": 368168798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687339384
    },
    {
        "content": "<p><code>stop_at_first_error</code> is very simple, it could be relocated to std. I don't know anything else that has no added behaviors; <code>mutual ... end</code> may work but it also has some extra stuff</p>",
        "id": 368169458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687339548
    },
    {
        "content": "<p><code>trace.Elab.step</code> is the most direct way to debug macro expansion, though I don't know if the output is more helpful than <code>Elab.info</code></p>",
        "id": 368174729,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687340679
    },
    {
        "content": "<p>I think I'm lost in nested macros. Is there a way to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"mkMacro\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>do that <code>mkMacro foo</code> will define a macro <code>foo</code> expanding to <code>#check Nat</code>?</p>",
        "id": 368183063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687342447
    },
    {
        "content": "<p>ie <code>mkMacro foo</code> would expand to <code>macro \"foo\" : command =&gt; `(#check Nat)</code></p>",
        "id": 368183326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687342521
    },
    {
        "content": "<p>To be clear, the part I don't know is what to put instead of <code>$name</code> on the second line.</p>",
        "id": 368184987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687342942
    },
    {
        "content": "<p>Almost right, you just have to specify what category <code>$name</code> is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"mkMacro\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 368186695,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687343358
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 368187915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687343589
    },
    {
        "content": "<p>Next level of complexity is: what if instead of having name as an argument to my outside macro I compute a <code>Lean.Name</code> from other arguments. How can I turn that into a <code>TSyntax `name</code>?</p>",
        "id": 368188175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687343647
    },
    {
        "content": "<p>Actually I have a hard time asking the right question. I have somewhere a function which looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">myName</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myStr</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myOtherName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and I want a macro like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"mkTactic\"</span> <span class=\"n\">myStr</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"n\">myStr'</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"n\">myFun</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">newName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">myStr.getString</span> <span class=\"bp\">++</span> <span class=\"s2\">\"_bar\"</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>such that <code>mkTactic \"baz\" \"Hello\" myfun</code> expands to <code>elab stx:\"baz\" : tactic =&gt; foo `foo.baz_bar \"Hello\" `myfun stx</code></p>",
        "id": 368194513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687345091
    },
    {
        "content": "<p><code>Name</code>s are usually turned into identifiers (<code>ident</code>) with the <code>mkIdent</code> function. But, you don't want an identifier, you want a string literal (that is what the <code>str</code> category means), so for that you need <code>mkStrLit</code>, which takes as argument a <code>String</code> object</p>",
        "id": 368195345,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687345289
    },
    {
        "content": "<p>I've tried endless random combinations of those functions without getting anywhere.</p>",
        "id": 368197922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687345877
    },
    {
        "content": "<p>Could you try to do the example described above?</p>",
        "id": 368198026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687345912
    },
    {
        "content": "<p>You can replace the body of <code>foo</code> with <code>done</code> for instance.</p>",
        "id": 368198162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687345937
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">myName</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myStr</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myOtherName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"called foo {myName} {myStr} {myOtherName} {stx}\"</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"mkTactic\"</span> <span class=\"n\">myStr</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"n\">myStr'</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"n\">myFun</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">newName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">myStr.getString</span> <span class=\"bp\">++</span> <span class=\"s2\">\"_bar\"</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">elab</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">myStr</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">newName</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">myStr'</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">myFun.getId</span><span class=\"o\">)</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"n\">mkTactic</span> <span class=\"s2\">\"baz\"</span> <span class=\"s2\">\"Hello\"</span> <span class=\"n\">myfun</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">baz</span> <span class=\"c1\">-- called foo foo.baz_bar Hello myfun \"baz\"</span>\n</code></pre></div>",
        "id": 368237774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687354071
    },
    {
        "content": "<p>Thanks a lot Mario! I was missing <code>quote</code>.</p>",
        "id": 368246195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687355781
    }
]