[
    {
        "content": "<p>It's quite easy to obtain the source of the current file within <code>CommandElabM</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">readThe</span> <span class=\"n\">Context</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fileMap.source</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>I'm trying to figure out how to do something similar, except that I want the source of a file which contains a declaration with name <code>e : Name</code>. Can someone point me in the right direction?</p>",
        "id": 348566479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681249324
    },
    {
        "content": "<p>You can probably find the module containing the constant by looking at <code>(&lt;- getEnv).allImportedModuleNames</code>, and the <code>declsInModuleIdx</code> and <code>getModuleIdx?</code> functions. Maybe there's some functions which do it more efficiently than just scanning through all modules, but I hope this helps a little bit at least.</p>",
        "id": 348685146,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1681295550
    },
    {
        "content": "<p>This function is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3122\">https://github.com/leanprover-community/mathlib4/pull/3122</a> (shortly to hit master), as <code>Lean.Name.getModule</code>.</p>",
        "id": 348689903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681296875
    },
    {
        "content": "<p>I suspect after that you'll have to actually read the file from the file system: Lean is not going to have it available like for the current file in <code>fileMap</code>. (And even that is a bit hacky, although <code>sagredo</code> uses the same trick.)</p>",
        "id": 348690145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681296949
    },
    {
        "content": "<p>This is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.findModuleOf?#doc\">docs4#Lean.findModuleOf?</a>, see also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Server.locationLinksFromDecl#doc\">docs4#Lean.Server.locationLinksFromDecl</a></p>",
        "id": 348693528,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681297866
    },
    {
        "content": "<p>Both of those links go to blank pages in my browser?</p>",
        "id": 348705748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681300840
    },
    {
        "content": "<p>Mhh, works on my machine</p>",
        "id": 348706733,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681301077
    },
    {
        "content": "<p>Oh, sometime later I went back to those tabs and they had loaded!</p>",
        "id": 348707665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681301267
    },
    {
        "content": "<p>Thanks all! Yes, I figured out how to get a <code>ModuleIdx</code> for the given name, but couldn‚Äôt figure out what to actually do with it! Is there some function that gives the module name from the module index? (Edit: answered by looking at the source for the function that Sebastian mentioned)</p>\n<p>is there no way to get a term of type <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Module#doc\">docs4#Lean.Module</a> from a module‚Äôs name?</p>",
        "id": 348731684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681306403
    },
    {
        "content": "<p>Of course, I could go through the file system to get the source as Scott suggests. Is there some function that gives the path of the root of the current project? That would help with such an approach</p>",
        "id": 348734624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681307033
    },
    {
        "content": "<p>What's wrong with the code in <code>documentUriFromModule</code>?</p>",
        "id": 348763574,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681312765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20source.20of.20file.20containing.20name/near/348731684\">said</a>:</p>\n<blockquote>\n<p>is there no way to get a term of type <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Module#doc\">docs4#Lean.Module</a> from a module‚Äôs name?</p>\n</blockquote>\n<p>No, the syntax tree is not persisted</p>",
        "id": 348763645,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681312785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20source.20of.20file.20containing.20name/near/348763574\">said</a>:</p>\n<blockquote>\n<p>What's wrong with the code in <code>documentUriFromModule</code>?</p>\n</blockquote>\n<p>What was wrong is that I didn't know this existed :)</p>",
        "id": 348764288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681312912
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 348764314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681312921
    },
    {
        "content": "<p>hmmm... now I can't seem to find how to get the correct <code>SearchPath</code>. Is there a quick way to get the search path that includes both the the lean system and the current project?</p>",
        "id": 348769926,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681314211
    }
]