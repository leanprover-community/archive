[
    {
        "content": "<p>In the following MWE, uncommenting the <code>unfold</code> seems to trigger an infinite loop, burning 100% of my CPU without being caught by <code>maxHeartBeats</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ctxt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List</span> <span class=\"n\">Ty</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Ctxt.Var</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"bp\">Γ.</span><span class=\"n\">get</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">matchVar</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"bp\">Δ.</span><span class=\"n\">Var</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"bp\">Δ</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- w† = Var.toSnoc w</span>\n      <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt.Var</span> <span class=\"bp\">Δ</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">[</span><span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"o\">]⟩</span>\n      <span class=\"n\">matchVar</span> <span class=\"n\">w</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">none</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">Δ.</span><span class=\"n\">Var</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matchVar</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- uncommenting the `unfold` triggers an infinite loop of sorts,</span>\n        <span class=\"c1\">-- consuming 100% CPU without being caught by `maxHeartbeats` timeout</span>\n        <span class=\"c1\">-- unfold matchVar</span>\n        <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Running under gdb, we find that we are in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"mi\">6203</span> <span class=\"mi\">0x00007fc263bd9f24</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop___lambda__2</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6204</span> <span class=\"mi\">0x00007fc263bda95d</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6205</span> <span class=\"mi\">0x00007fc263bd9f24</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop___lambda__2</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6206</span> <span class=\"mi\">0x00007fc263bda95d</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6207</span> <span class=\"mi\">0x00007fc263bd9f24</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop___lambda__2</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6208</span> <span class=\"mi\">0x00007fc263bda95d</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6209</span> <span class=\"mi\">0x00007fc263bd9f24</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop___lambda__2</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6210</span> <span class=\"mi\">0x00007fc263bda95d</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6211</span> <span class=\"mi\">0x00007fc263bd9f24</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop___lambda__2</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6212</span> <span class=\"mi\">0x00007fc263bda95d</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">grosser</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/../lib/lean/libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">6213</span> <span class=\"mi\">0x00007fc263bd9f24</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Meta_Match_MatchEqs_0__Lean_Meta_Match_mkSplitterProof_proveSubgoalLoop___lambda__2</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>Which seems to correspond to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">proveSubgoalLoop</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.Match.matchEqs</span><span class=\"o\">]</span> <span class=\"s2\">\"proveSubgoalLoop</span><span class=\"se\">\\n</span><span class=\"s2\">{mvarId}\"</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">injectionAny</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">InjectionAnyResult.solved</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">InjectionAnyResult.failed</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarId'</span> <span class=\"bp\">←</span> <span class=\"n\">substVars</span> <span class=\"n\">mvarId</span>\n      <span class=\"k\">if</span> <span class=\"n\">mvarId'</span> <span class=\"bp\">==</span> <span class=\"n\">mvarId</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.contradictionCore</span> <span class=\"o\">{})</span> <span class=\"k\">then</span>\n          <span class=\"n\">return</span> <span class=\"o\">()</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"failed to generate splitter for match auxiliary declaration '{matchDeclName}', unsolved subgoal:</span><span class=\"se\">\\n</span><span class=\"s2\">{MessageData.ofGoal mvarId}\"</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">proveSubgoalLoop</span> <span class=\"n\">mvarId'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">InjectionAnyResult.subgoal</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">proveSubgoalLoop</span> <span class=\"n\">mvarId</span>\n\n  <span class=\"n\">proveSubgoal</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.Match.matchEqs</span><span class=\"o\">]</span> <span class=\"s2\">\"subgoal {mkMVar mvarId}, {repr (← mvarId.getDecl).kind}, {← mvarId.isAssigned}</span><span class=\"se\">\\n</span><span class=\"s2\">{MessageData.ofGoal mvarId}\"</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.intros</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.tryClearMany</span> <span class=\"o\">(</span><span class=\"n\">alts.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">fvarId</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n    <span class=\"n\">proveSubgoalLoop</span> <span class=\"n\">mvarId</span>\n</code></pre></div>\n<p>My original code threw a <code>failed to generate splitter for match auxiliary declaration</code> error, instead of the infinite looping behaviour; this code suggests that the two problems are related. </p>\n<p>Does anybody have any idea of what triggered this, and how to circumvent it?</p>",
        "id": 382898221,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1691489791
    },
    {
        "content": "<p>Aha, explicitly spelling out the second case seems to work!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ctxt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List</span> <span class=\"n\">Ty</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Ctxt.Var</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"bp\">Γ.</span><span class=\"n\">get</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">matchVar</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"bp\">Δ.</span><span class=\"n\">Var</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"bp\">Δ</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- w† = Var.toSnoc w</span>\n      <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt.Var</span> <span class=\"bp\">Δ</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">[</span><span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"o\">]⟩</span>\n      <span class=\"n\">matchVar</span> <span class=\"n\">w</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">none</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">Δ.</span><span class=\"n\">Var</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matchVar</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">matchVar</span> <span class=\"c1\">-- Yay, it works</span>\n        <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 382905541,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1691490999
    },
    {
        "content": "<p>This insight did not help to solve the original error I was seeing, here is another attempt at an MWE. This one depends on Mathlib and does showcase the exact error I'm having trouble with.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Erased</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ctxt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Erased</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Ctxt.snoc</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Erased.mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"bp\">Γ.</span><span class=\"n\">out</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ctxt.Var</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"bp\">Γ.</span><span class=\"n\">out.get</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">CtxtProp</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">CtxtProp</span> <span class=\"o\">(</span><span class=\"n\">Erased.mk</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">snoc</span> <span class=\"o\">:</span> <span class=\"n\">CtxtProp</span> <span class=\"bp\">Δ</span> <span class=\"bp\">→</span> <span class=\"n\">CtxtProp</span> <span class=\"o\">(</span><span class=\"bp\">Δ.</span><span class=\"n\">snoc</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">matchVar</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CtxtProp</span> <span class=\"bp\">Δ</span> <span class=\"bp\">→</span> <span class=\"bp\">Δ.</span><span class=\"n\">Var</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">snoc</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- w† = Var.toSnoc w</span>\n      <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt.Var</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">[</span><span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">Ctxt.snoc</span><span class=\"o\">]⟩</span>\n      <span class=\"n\">matchVar</span> <span class=\"n\">d</span> <span class=\"n\">w</span>\n  <span class=\"c1\">-- Neither spelling out all cases, nor having a single fallback case work</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">snoc</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"c1\">-- | _, _ =&gt; none</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctxt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">CtxtProp</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">Δ.</span><span class=\"n\">Var</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matchVar</span> <span class=\"n\">d</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">matchVar</span> <span class=\"c\">/-</span><span class=\"cm\"> throws error:</span>\n<span class=\"cm\">          failed to generate splitter for match auxiliary declaration 'matchVar.match_1', unsolved subgoal:</span>\n<span class=\"cm\">            case x</span>\n<span class=\"cm\">            t: Ty</span>\n<span class=\"cm\">            motive: (Δ : Ctxt) → CtxtProp Δ → Ctxt.Var Δ t → Sort u_1</span>\n<span class=\"cm\">            h_1: (Γ : Ctxt) →</span>\n<span class=\"cm\">              (t_2 : Ty) →</span>\n<span class=\"cm\">                (d : CtxtProp Γ) →</span>\n<span class=\"cm\">                  (w : ℕ) →</span>\n<span class=\"cm\">                    (h : List.get? (Erased.out (Ctxt.snoc Γ t_2)) (w + 1) = some t) →</span>\n<span class=\"cm\">                      motive (Ctxt.snoc Γ t_2) (CtxtProp.snoc d) { val := Nat.succ w, property := h }</span>\n<span class=\"cm\">            h_2: (Γ : Ctxt) →</span>\n<span class=\"cm\">              (t_2 : Ty) →</span>\n<span class=\"cm\">                (a : CtxtProp Γ) →</span>\n<span class=\"cm\">                  (property : List.get? (Erased.out (Ctxt.snoc Γ t_2)) 0 = some t) →</span>\n<span class=\"cm\">                    (∀ (Γ_1 : Ctxt) (t_1 : Ty) (d : CtxtProp Γ_1) (w : ℕ)</span>\n<span class=\"cm\">                        (h : List.get? (Erased.out (Ctxt.snoc Γ_1 t_1)) (w + 1) = some t),</span>\n<span class=\"cm\">                        ((fun b =&gt; t_2 :: Erased.out Γ = b) = fun b =&gt; t_1 :: Erased.out Γ_1 = b) →</span>\n<span class=\"cm\">                          HEq (_ : ∃ a, (fun b =&gt; a = b) = fun b =&gt; t_2 :: Erased.out Γ = b)</span>\n<span class=\"cm\">                              (_ : ∃ a, (fun b =&gt; a = b) = fun b =&gt; t_1 :: Erased.out Γ_1 = b) →</span>\n<span class=\"cm\">                            HEq (CtxtProp.snoc a) (CtxtProp.snoc d) →</span>\n<span class=\"cm\">                              HEq { val := 0, property := property } { val := Nat.succ w, property := h } → False) →</span>\n<span class=\"cm\">                      motive (Ctxt.snoc Γ t_2) (CtxtProp.snoc a) { val := 0, property := property }</span>\n<span class=\"cm\">            h_3: (property : List.get? (Erased.out (Erased.mk [])) 0 = some t) →</span>\n<span class=\"cm\">              motive (Erased.mk []) CtxtProp.nil { val := 0, property := property }</span>\n<span class=\"cm\">            h_4: (n : ℕ) →</span>\n<span class=\"cm\">              (h : List.get? (Erased.out (Erased.mk [])) (n + 1) = some t) →</span>\n<span class=\"cm\">                motive (Erased.mk []) CtxtProp.nil { val := Nat.succ n, property := h }</span>\n<span class=\"cm\">            Δ✝: Ctxt</span>\n<span class=\"cm\">            t✝: Ty</span>\n<span class=\"cm\">            a✝: CtxtProp Δ✝</span>\n<span class=\"cm\">            x✝²: Ctxt.Var (Ctxt.snoc Δ✝ t✝) t</span>\n<span class=\"cm\">            val✝: ℕ</span>\n<span class=\"cm\">            property✝¹: List.get? (Erased.out (Ctxt.snoc Δ✝ t✝)) val✝ = some t</span>\n<span class=\"cm\">            property✝: List.get? (Erased.out (Ctxt.snoc Δ✝ t✝)) Nat.zero = some t</span>\n<span class=\"cm\">            Γ: Ctxt</span>\n<span class=\"cm\">            t_1: Ty</span>\n<span class=\"cm\">            d: CtxtProp Γ</span>\n<span class=\"cm\">            w: ℕ</span>\n<span class=\"cm\">            h: List.get? (Erased.out (Ctxt.snoc Γ t_1)) (w + 1) = some t</span>\n<span class=\"cm\">            fst_eq: (fun b =&gt; t✝ :: Erased.out Δ✝ = b) = fun b =&gt; t_1 :: Erased.out Γ = b</span>\n<span class=\"cm\">            snd_eq: HEq (_ : ∃ a, (fun b =&gt; a = b) = fun b =&gt; t✝ :: Erased.out Δ✝ = b)</span>\n<span class=\"cm\">              (_ : ∃ a, (fun b =&gt; a = b) = fun b =&gt; t_1 :: Erased.out Γ = b)</span>\n<span class=\"cm\">            x_1: HEq (CtxtProp.snoc a✝) (CtxtProp.snoc d)</span>\n<span class=\"cm\">            x_2: HEq { val := 0, property := property✝ } { val := Nat.succ w, property := h }</span>\n<span class=\"cm\">            x✝¹: CtxtProp (Ctxt.snoc Δ✝ t✝)</span>\n<span class=\"cm\">            x✝: Ctxt.Var (Ctxt.snoc Δ✝ t✝) t</span>\n<span class=\"cm\">            ⊢ False</span>\n<span class=\"cm\">        -/</span>\n        <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 382937932,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1691497671
    },
    {
        "content": "<p>Tracing with <code>trace.Meta.Match.matchEqs</code> tells us Lean is repeatedly trying to apply <code>injective</code> to the <code>fst_eq</code> hypothesis of that goal, which fails because it's not an injective type.</p>\n<p>Is there some attribute I can use to add a custom injectivity theorem for the <code>injective</code> tactic to use?</p>",
        "id": 382939072,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1691497895
    }
]