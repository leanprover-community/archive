[
    {
        "content": "<p>Do we have a function that checks whether a string contains a substring? E.g. <code>”abcd”.containsSubstr “bc”</code> returns true but <code>”abcd”.containsSubstr “cb”</code> returns false.</p>",
        "id": 371008174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688104337
    },
    {
        "content": "<p>I think there's a function that returns the index of a substring?</p>",
        "id": 371008443,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688104436
    },
    {
        "content": "<p>but I can't find it now <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 371008970,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688104583
    },
    {
        "content": "<p>Must've been thinking of the isPrefix and isSuffix functions</p>",
        "id": 371010716,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688105086
    },
    {
        "content": "<p>It seems we don't. Rather embarrassing. :-)</p>",
        "id": 371011418,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688105297
    },
    {
        "content": "<p>Isn't the linear time algorithm not so straightforward?</p>",
        "id": 371012225,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688105545
    },
    {
        "content": "<p>Implementing the quadratic algorithm, with a big flashing warning on it, would have two great effects:</p>\n<ul>\n<li>Adam, who presumably is not running this on long strings, can do what he wants.</li>\n<li>The big flashing warning will provoke someone else into writing the linear algorithm. :-)</li>\n</ul>",
        "id": 371014084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688106075
    },
    {
        "content": "<p>I'll get by with the following for now :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.String.tails</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">S.length</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">out.push</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">S.extract</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">S.length</span><span class=\"o\">⟩</span>\n  <span class=\"n\">return</span> <span class=\"n\">out</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.String.containsStr</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">tail</span> <span class=\"k\">in</span> <span class=\"n\">S.tails</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">T.isPrefixOf</span> <span class=\"n\">tail</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"n\">return</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 371014836,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688106337
    },
    {
        "content": "<p>Is there a better way to slice strings?</p>",
        "id": 371014882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688106350
    },
    {
        "content": "<p>I'd recommend slicing into Substring, rather than String, since casting to <code>String</code> actually copies the string</p>",
        "id": 371016031,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688106623
    },
    {
        "content": "<p>The most efficient quadratic implementation would use the <code>String.substrEq</code> function and just iterate over the starting positions.</p>",
        "id": 371016349,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688106709
    },
    {
        "content": "<p>Doesn't <code>List.isInfix</code> have a decidability instance?</p>",
        "id": 371017562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688107026
    },
    {
        "content": "<p>in which case a braindead implementation is <code>s.1 &lt;:+: t.1</code></p>",
        "id": 371017727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688107076
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">String.isSubstr</span> <span class=\"o\">(</span><span class=\"n\">pattern</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">aux</span> <span class=\"mi\">0</span>\n<span class=\"n\">where</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i.byteIdx</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.utf8ByteSize</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s.utf8ByteSize</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">s.next</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">byteIdx</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.utf8ByteSize</span> <span class=\"bp\">-</span> <span class=\"n\">i.byteIdx</span> <span class=\"o\">:=</span>\n      <span class=\"n\">Nat.sub_lt_sub_left</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">String.lt_next</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">String.substrEq</span> <span class=\"n\">pattern</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">pattern.utf8ByteSize</span>\n      <span class=\"bp\">||</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">s.next</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">false</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">aux</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.utf8ByteSize</span> <span class=\"bp\">-</span> <span class=\"n\">i.byteIdx</span>\n</code></pre></div>\n<p>should be right?</p>",
        "id": 371017806,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688107089
    },
    {
        "content": "<p>looks like it works from some #evals :P</p>",
        "id": 371017950,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688107127
    },
    {
        "content": "<p>yeah that looks correct</p>",
        "id": 371018294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688107204
    },
    {
        "content": "<p>It might be useful to have a version that returns the index though</p>",
        "id": 371018559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688107277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/String.2EcontainsSubstring/near/371017727\">said</a>:</p>\n<blockquote>\n<p>in which case a braindead implementation is <code>s.1 &lt;:+: t.1</code></p>\n</blockquote>\n<p>can I nerd-snipe you into proving equivalence of this with the above definition? would be a great lemma to have handy :)</p>",
        "id": 371018615,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688107291
    },
    {
        "content": "<p>if you commit it to std, sure</p>",
        "id": 371018712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688107307
    },
    {
        "content": "<p>will make a PR with both an index version and a bool version. <code>String.indexOfSubstr</code> is a fine name to everyone?</p>",
        "id": 371018839,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688107332
    },
    {
        "content": "<p>Also it should work with substrings</p>",
        "id": 371018904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688107354
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/172\">std4#172</a></p>",
        "id": 371041083,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688112452
    },
    {
        "content": "<p>(now with 100% more CI approval!)</p>",
        "id": 371044699,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688113242
    },
    {
        "content": "<p>I had an implementation of the Knuth-Morris-Pratt matching algorithm in my stuff. I cleaned it up to work with Std and created a draft PR <a href=\"https://github.com/leanprover/std4/pull/178\">std4#178</a>. It's pretty versatile and it can be used to implement a linear time string matching, in particular. It's very much a WIP. I would like some input on how to integrate it with Std and design a good API.</p>",
        "id": 373071988,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688701646
    }
]