[
    {
        "content": "<p>If I register an option with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">register_option</span> <span class=\"n\">my_option</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span>\n  <span class=\"n\">defValue</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">group</span>    <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n  <span class=\"n\">descr</span>    <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Can I run <code>lean -D my_option=false ...</code>? Or do I need to register <code>my_option</code> in a different way?</p>\n<p>I'm getting an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"kd\">parameter</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"n\">configuration</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"n\">my_option'</span>\n</code></pre></div>",
        "id": 355867346,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683228136
    },
    {
        "content": "<p>I have heard this issue before, I don't think there is a fix yet. Probably you should open an issue</p>",
        "id": 355867503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683228204
    },
    {
        "content": "<p>for lean code we have <code>sudo set_option</code> thanks to <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> but I don't think there is a <code>-D</code> equivalent</p>",
        "id": 355867611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683228243
    },
    {
        "content": "<p>I think the only way would be to declare the option in a plugin.</p>",
        "id": 356358388,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1683399787
    },
    {
        "content": "<p>Hmm, maybe this all is an XY problem.</p>\n<p>What I want is to have a command <code>#profile_this_file</code> that reruns the file with profiler settings and somehow processes the output. The issue is that the command <code>#profile_this_file</code> needs to be disabled when rerunning the file with profiler on, otherwise it gets into an infinite loop. </p>\n<p>I thought I might use options to do that. Any idea how could I achieve that?</p>",
        "id": 356362100,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683401637
    },
    {
        "content": "<p>If the command is running its own frontend (where it loads the file, parses imports, then elaborates all commands), you could inject an extra import that defines a new elaborator that overrides the <code>#profile_this_file</code> command to be a no-op</p>",
        "id": 356364506,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683403225
    },
    {
        "content": "<p>Good idea, a bit hacky but doable. </p>\n<p>Right now the command just runs <code>lake env lean ... file.lean</code></p>",
        "id": 356365789,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683404094
    },
    {
        "content": "<p>Another hacky but easy solution would be to set an environment variable.</p>",
        "id": 356372130,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1683408379
    },
    {
        "content": "<p>There is a tempting looking <code>(opts : Options)</code> argument to <code>processHeader</code>, which one might hope lets you set options when you are running your own frontend. I can't immediately work out where that argument feeds into, however.</p>",
        "id": 356422213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683442888
    }
]