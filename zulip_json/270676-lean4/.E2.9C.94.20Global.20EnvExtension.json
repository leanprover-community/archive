[
    {
        "content": "<p>How can I register a <code>Lean.EnvExtension</code> which is updated globally, like instances or simp-theorems?<br>\nI can create a \"per module\" env extension storing a Nat as such:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">dataHandle</span> <span class=\"o\">:</span> <span class=\"n\">EnvExtension</span> <span class=\"n\">Nat</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerEnvExtension</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pure</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>And then I can create two commands to get the stored Nat and increse it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#succ\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">dataHandle.modifyState</span> <span class=\"n\">env</span> <span class=\"n\">Nat.succ</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#get\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">dataHandle.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{val}\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">Nat</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">updated</span> <span class=\"n\">globally.</span> <span class=\"n\">So</span> <span class=\"k\">if</span> <span class=\"n\">I</span> <span class=\"k\">in</span> <span class=\"n\">B.lean</span> <span class=\"n\">call</span> <span class=\"bp\">`#</span><span class=\"n\">succ</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"kn\">import</span> <span class=\"bp\">`</span><span class=\"n\">B</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"n\">C.lean</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"bp\">`#</span><span class=\"n\">get</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"n\">C.lean</span> <span class=\"n\">will</span> <span class=\"n\">still</span> <span class=\"n\">give</span> <span class=\"mi\">42</span><span class=\"bp\">.</span>\n\n<span class=\"n\">But</span> <span class=\"n\">for</span> <span class=\"kd\">example</span> <span class=\"n\">the</span> <span class=\"n\">set</span> <span class=\"n\">of</span> <span class=\"n\">all</span> <span class=\"n\">instances</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">suppose</span><span class=\"o\">)</span> <span class=\"n\">is</span> <span class=\"n\">updated</span> <span class=\"n\">globally</span> <span class=\"n\">across</span> <span class=\"n\">all</span> <span class=\"n\">modules.</span> <span class=\"n\">How</span> <span class=\"n\">can</span> <span class=\"n\">I</span> <span class=\"n\">achieve</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"k\">with</span> <span class=\"n\">my</span> <span class=\"n\">small</span> <span class=\"n\">Nat</span> <span class=\"kd\">example</span><span class=\"bp\">?</span>\n\n<span class=\"n\">Thanks</span><span class=\"o\">,</span>\n<span class=\"n\">Tage</span>\n</code></pre></div>",
        "id": 360787635,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1684934319
    },
    {
        "content": "<p>I think you are looking for <code>Lean.PersistentEnvExtension</code>.</p>",
        "id": 360791255,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1684935128
    },
    {
        "content": "<p>It looks like there's also a <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Environment.html#Lean.registerSimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> with a register function.</p>",
        "id": 360791863,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1684935260
    },
    {
        "content": "<p>Actually the docs say neither of these will work. The docs for e.g. <code>PersistentEnvExtension.setState</code> say \"Set the current state of the given extension in the given environment. This change is not persisted across files.\"</p>",
        "id": 360794547,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1684935913
    },
    {
        "content": "<p><code>addEntry</code> does persist</p>",
        "id": 360798494,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684936742
    },
    {
        "content": "<p>Thanks, <code>SimplePersistentEnvExtension</code> was exactly what I needed!</p>",
        "id": 360802287,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1684937447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544752\">Tage Johansson</span> has marked this topic as resolved.</p>",
        "id": 360802391,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684937473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"544752\">@Tage Johansson</span> </p>\n<p>Going off what Sebastian said, if you need <code>addEntry</code> you might need to go with the regular persistent extension. Here's a mwe for your thing that pushes entries to a list and takes the max:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">descr</span> <span class=\"o\">:</span> <span class=\"n\">PersistentEnvExtensionDescr</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">mkInitial</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">xs.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">sink</span> <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sink</span> <span class=\"bp\">++</span> <span class=\"n\">next</span><span class=\"o\">)</span>\n  <span class=\"n\">addEntryFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.push</span> <span class=\"n\">b</span>\n  <span class=\"n\">exportEntriesFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">dataHandle</span> <span class=\"o\">:</span> <span class=\"n\">PersistentEnvExtension</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerPersistentEnvExtension</span> <span class=\"n\">descr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getMax</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">xs.getMax</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#succ\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">dataHandle.modifyState</span> <span class=\"n\">env</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.push</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">((</span><span class=\"n\">xs.getMax</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#get\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">entries</span> <span class=\"o\">:=</span> <span class=\"n\">dataHandle.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">entries.getMax</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{val}\"</span>\n</code></pre></div>\n<p>Which seems to work despite using modifyState instead of addEntry, but I think addEntry after getModuleEntries gets you more control maybe since you can choose the module index.</p>",
        "id": 360804071,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1684937827
    }
]