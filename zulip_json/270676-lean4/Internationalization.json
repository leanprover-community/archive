[
    {
        "content": "<p>Has anyone started to think about internationalization of Lean programs? The minimal version would be defining a new kind of interpolated string, a meta-program creating <a href=\"https://en.wikipedia.org/wiki/Gettext\">po files</a> and a way to set language used in the current file. The motivation is that I'm trying to port Lean verbose tactics but I would like error messages and suggestions to be translated. In Lean 3 I had two completely different Lean project for French and English but that led to the English version being a lot less usable than the original one.</p>",
        "id": 402538310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700161998
    },
    {
        "content": "<p>It would be great if someone who cares about Lean as a general purpose programming language could be tempted to work on that.</p>",
        "id": 402538388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700162032
    },
    {
        "content": "<p>I would be interested to know what kind of localization tools are used these days. I have been looking into <a href=\"https://projectfluent.org/\">https://projectfluent.org/</a>, this is what firefox and rustc use, I know less about gettext</p>",
        "id": 402539478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700162453
    },
    {
        "content": "<p>Internationalizing lean 4 error messages sounds like a pretty big task</p>",
        "id": 402539558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700162483
    },
    {
        "content": "<p>A framework for writing internationalized programs sounds easier but I don't think it would be that helpful for something like lean-verbose since that's all about tactics and elaboration</p>",
        "id": 402539822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700162550
    },
    {
        "content": "<p>Internationalizing the input syntax of lean 4 is comparatively easy, I think you had a prototype of that in lean 4 at ICERM</p>",
        "id": 402540091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700162638
    },
    {
        "content": "<p>Presumably the current work on <code>#lang</code> would make it even easier since then you could change the keywords altogether instead of being merely additive</p>",
        "id": 402540253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700162681
    },
    {
        "content": "<p><code>#lang fran√ßais</code></p>",
        "id": 402540304,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700162704
    },
    {
        "content": "<p>I really mean I have a bunch of tactic which use <code>throwError</code> and I want to translate those error messages, not all messages coming from Lean (which would be great but is a much bigger task).</p>",
        "id": 402540501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700162786
    },
    {
        "content": "<p>And I know only gettext but I have nothing against fancier modern solution especially if they are implemented by someone else.</p>",
        "id": 402540687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700162865
    },
    {
        "content": "<p>If you are okay with conditional compilation you could just have a bunch of string constants and just swap out the file defining them</p>",
        "id": 402540790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700162899
    },
    {
        "content": "<p>Sure, I could use such a very low-tech version, but that's pretty painful compared to using gettext.</p>",
        "id": 402540886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700162962
    },
    {
        "content": "<p>is it?</p>",
        "id": 402540901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700162969
    },
    {
        "content": "<p>What's the interface you are after anyway?</p>",
        "id": 402540950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700162988
    },
    {
        "content": "<p>It doesn't have to be string constants either, it can be arbitrary lean functions</p>",
        "id": 402541055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700163013
    },
    {
        "content": "<p>Yes it is. gettext will automatically collect all strings that needs translations. When you look at the code you see almost nothing special. You see <code>_(\"This is an error message\")</code> instead of <code>\"This is an error message\"</code>. You can write as many such translatable strings as you want without breaking the programming flow.</p>",
        "id": 402541257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163106
    },
    {
        "content": "<p>What if you want to interpolate into the string?</p>",
        "id": 402541355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700163135
    },
    {
        "content": "<p>Same.</p>",
        "id": 402541369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163141
    },
    {
        "content": "<p>Interpolated strings are of course a crucial part of the story.</p>",
        "id": 402541405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163155
    },
    {
        "content": "<p>You write <code>_(\"This is an error message about {stuff}\")</code> instead of <code>\"This is an error message about {stuff}\"</code></p>",
        "id": 402541477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163187
    },
    {
        "content": "<p>Okay, so something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"n\">throwError</span> <span class=\"n\">tr</span><span class=\"bp\">%</span> <span class=\"s2\">\"This is an error message about {e}\"</span>\n</code></pre></div>\n<p><code>translations/fr.json</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"This is an error message about {e}\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Ceci est un message d'erreur pour {e}\"</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 402541788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700163309
    },
    {
        "content": "<p>Yes. And <code>fr.json</code> is automatically generated.</p>",
        "id": 402541845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163339
    },
    {
        "content": "<p>How?</p>",
        "id": 402541865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700163348
    },
    {
        "content": "<p>What's the input?</p>",
        "id": 402541936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700163364
    },
    {
        "content": "<p>That's what I'm asking</p>",
        "id": 402541951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700163370
    },
    {
        "content": "<p>Some meta-program crawls your source file and looks for <code>tr%</code>.</p>",
        "id": 402541955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163371
    },
    {
        "content": "<p>The input is your lean files.</p>",
        "id": 402541965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163378
    },
    {
        "content": "<p>Where are the translations coming from?</p>",
        "id": 402541986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700163386
    },
    {
        "content": "<p>I can see how you can validate this file but not how or where you want to put the translations</p>",
        "id": 402542057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700163421
    },
    {
        "content": "<p>The meta-program generates a json file where all translations are missing originally.</p>",
        "id": 402542071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163426
    },
    {
        "content": "<p>Then human beings put in translation. And next time the meta-program is ran (because the software was updated) it doesn't touch things that were already translated of course.</p>",
        "id": 402542169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163471
    },
    {
        "content": "<p>Note that gettext does not use json for this (probably because it long predates json) but its own format po.</p>",
        "id": 402542277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163501
    },
    {
        "content": "<p>I wonder if this behavior could be implemented using an environment extension, where when a <code>tr!\"...\"</code> string is elaborated it adds this string to the extension (maybe it tags it with the identifier of the current definition too, just in case that is useful), and then the metaprogram that generates the po-analogue just imports the main Lean file and looks at the contents of the environment extension?</p>",
        "id": 402543330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700163909
    },
    {
        "content": "<p>Yes, I was thinking about using environment extensions.</p>",
        "id": 402543451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700163960
    },
    {
        "content": "<p>how are the strings keyed? Just by the english interpolation like I showed?</p>",
        "id": 402543912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700164139
    },
    {
        "content": "<p>Yes.</p>",
        "id": 402543939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700164149
    },
    {
        "content": "<p>are they ordered in any particular way?</p>",
        "id": 402543982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700164169
    },
    {
        "content": "<p>One question is how translation substitutions work. If it's a compile-time transformation, then that's clearer, but if you want it runtime, I suppose you can validate that the substitutions refer to the exact same expressions between the <code>{...}</code>s, up to some permutation.</p>",
        "id": 402544069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700164203
    },
    {
        "content": "<p>I don't think there is any particular order. Again the <a href=\"https://en.wikipedia.org/wiki/Gettext\">wikipedia page</a> shows examples.</p>",
        "id": 402544103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700164209
    },
    {
        "content": "<p>I was thinking to do it as a compile time transformation</p>",
        "id": 402544135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700164219
    },
    {
        "content": "<p>I don't say that we have to use the exact same format, bit those files have tooling such as <a href=\"https://poedit.net/\">https://poedit.net/</a></p>",
        "id": 402544196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700164247
    },
    {
        "content": "<p>you would just look up the interpolation at elaboration time and return the results of interpolating into the translated string</p>",
        "id": 402544226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700164257
    },
    {
        "content": "<p>One reason not to use po is that you would not be able to use lean style interpolated strings with them</p>",
        "id": 402544300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700164290
    },
    {
        "content": "<p>I suppose you could translate the format?</p>",
        "id": 402544330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700164307
    },
    {
        "content": "<p>Maybe you could use %1, %2, etc. in place of the <code>{...}</code>s sequentially</p>",
        "id": 402544480,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700164355
    },
    {
        "content": "<p>And then at the site of the <code>tr!</code> string you use that to permute the interpolated expressions</p>",
        "id": 402544548,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700164380
    },
    {
        "content": "<p>I wonder whether we need a typeclass to unify <code>s!</code> ,<code>f!</code>, <code>m!</code> because otherwise this causes issues here</p>",
        "id": 402544964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700164506
    },
    {
        "content": "<p>For general programming, I'd expect that language can be changed at runtime. For that it seems that <code>tr!</code> probably ought to be monadic  in a suitable monad for getting the current language, and the translations database.</p>",
        "id": 402545266,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700164606
    },
    {
        "content": "<p>That could be a separate mode/macro, I would expect it to be more annoying to use that way</p>",
        "id": 402545412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700164668
    },
    {
        "content": "<p>Yup, but hard to avoid in a pure language, I fear.</p>",
        "id": 402545618,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700164739
    },
    {
        "content": "<p>Many software require to restart to apply language preferences. My use case is a bit special, I want to translate messages coming from tactics.</p>",
        "id": 402547003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700165159
    },
    {
        "content": "<p>Ideally I want to have simply <code>import MyTactics.French</code> and get messages in French.</p>",
        "id": 402547193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700165206
    },
    {
        "content": "<p>Restarting is fine, but (for general programming) not recompilation, I‚Äôd say. But if that's not the use-case needed right now, don‚Äôt let me distract you at this point :-)</p>",
        "id": 402550027,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700166204
    },
    {
        "content": "<p>In the long run it would be really nice to have a robust internationalization framework that would accommodate many use cases. But indeed in the short run I'd happy to have something that is good enough for my use case.</p>",
        "id": 402550410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700166282
    },
    {
        "content": "<p>And my use case is very important for teaching outside the US, so hopefully this is something the FRO also finds interesting.</p>",
        "id": 402550542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700166311
    },
    {
        "content": "<p>I'm not sure this is something the FRO itself needs to do, this can be an external project well enough</p>",
        "id": 402554038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700167632
    },
    {
        "content": "<p>Anyone should feel free to try, I was only trying to encourage Joachim.</p>",
        "id": 402554134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700167678
    },
    {
        "content": "<p>Ah, I didn‚Äôt even notice :-D</p>",
        "id": 402561297,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700170745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Internationalization/near/402544196\">said</a>:</p>\n<blockquote>\n<p>I don't say that we have to use the exact same format, bit those files have tooling such as <a href=\"https://poedit.net/\">https://poedit.net/</a></p>\n</blockquote>\n<p>Minju Kim, <span class=\"user-mention\" data-user-id=\"478528\">@Shim SeongWoo</span> (Shim is the surname) and I used <a href=\"https://omegat.org/\">OmegaT</a> to translate NNG3 into Korean early last year. It's a translation memory application and free software.</p>",
        "id": 402576526,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1700177580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I got a prototype of this together. It's only for <code>String</code> at the moment. It provides <code>tr!\"\"</code> strings that are monad-valued, and they read the current value of the <code>lang</code> option. When compiling, the system checks to see if there are translations for every declared language, and if there are not it suggests a new <code>@[translation]</code> definition to add to the environment. This system expects all translations of all keys to exist ahead of their use.</p>\n<p>Here's an example of usage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.I18n.Basic</span>\n\n<span class=\"n\">decl_lang</span> <span class=\"n\">fr</span> <span class=\"s2\">\"fran√ßais\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">translation</span> <span class=\"n\">fr</span> <span class=\"s2\">\"Expecting an identifier, not {1}\"</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">tr1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"attendu : un identifiant, pas {x}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">throwError</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">tr</span><span class=\"bp\">!</span><span class=\"s2\">\"Expecting an identifier, not {x.getNat}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"c1\">-- Expecting an identifier, not 1</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">lang</span> <span class=\"s2\">\"fr\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"c1\">-- attendu : un identifiant, pas 1</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo2\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">throwError</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">tr</span><span class=\"bp\">!</span><span class=\"s2\">\"unknown error\"</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Warning: Missing translation for fr (fran√ßais) with key \"unknown error\".</span>\n\n<span class=\"cm\">Template:</span>\n\n<span class=\"cm\">@[translation fr \"unknown error\"]</span>\n<span class=\"cm\">def tr : String :=</span>\n<span class=\"cm\">  s!\"unknown error\"</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo3\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">throwError</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">tr</span><span class=\"bp\">!</span><span class=\"s2\">\"The following are not equal: {1} and {2}\"</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Missing translation for fr (fran√ßais) with key \"The following are not equal:{1} and {2}\".</span>\n\n<span class=\"cm\">Template:</span>\n\n<span class=\"cm\">@[translation fr \"The following are not equal:{1} and {2}\"]</span>\n<span class=\"cm\">def tr (s_1 : String) (s_2 : String) : String :=</span>\n<span class=\"cm\">  s! \"The following are not equal: {s_1 } and {s_2}\"</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 402576534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700177583
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Mathlib.I18n.Init</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">I18n</span>\n\n<span class=\"sd\">/-- A language known to the translation system. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Language</span> <span class=\"n\">where</span>\n  <span class=\"n\">lang</span> <span class=\"o\">:</span> <span class=\"n\">Name</span>\n  <span class=\"n\">description</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">LanguageState</span> <span class=\"o\">:=</span> <span class=\"n\">NameMap</span> <span class=\"n\">Language</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">LanguageExtension</span> <span class=\"o\">:=</span> <span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"n\">Language</span> <span class=\"n\">LanguageState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LanguageState.addEntry</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.insert</span> <span class=\"n\">l.lang</span> <span class=\"n\">l</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">languageExtension</span> <span class=\"o\">:</span> <span class=\"n\">LanguageExtension</span> <span class=\"bp\">‚Üê</span>\n  <span class=\"n\">registerSimplePersistentEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"n\">mkStateFromImportedEntries</span> <span class=\"n\">LanguageState.addEntry</span> <span class=\"o\">{}</span>\n    <span class=\"n\">addEntryFn</span>    <span class=\"o\">:=</span> <span class=\"n\">LanguageState.addEntry</span>\n  <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">getLanguages</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"n\">languageExtension.getState</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isLanguage</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lang</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">getLanguages</span> <span class=\"n\">env</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">contains</span> <span class=\"n\">lang</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addLanguage</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Environment</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getLanguages</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">l.lang</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">l'.description</span> <span class=\"bp\">!=</span> <span class=\"n\">l.description</span> <span class=\"k\">then</span>\n      <span class=\"n\">throw</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Language description does not match pre-existing description: {l'.description}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">env</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">languageExtension.addEntry</span> <span class=\"n\">env</span> <span class=\"n\">l</span>\n\n<span class=\"sd\">/-- Declare a new language for translation. -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"decl_lang \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n.getId.eraseMacroScopes</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">lang</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">description</span> <span class=\"o\">:=</span> <span class=\"n\">s.getString</span><span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">ofExcept</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addLanguage</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n  <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Translation</span> <span class=\"n\">where</span>\n  <span class=\"n\">lang</span> <span class=\"o\">:</span> <span class=\"n\">Name</span>\n  <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">expander</span> <span class=\"o\">:</span> <span class=\"n\">Name</span>\n\n<span class=\"sd\">/-- For each key, a map of languages to expanders -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">TranslationState</span> <span class=\"o\">:=</span> <span class=\"n\">HashMap</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">NameMap</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TranslationExtension</span> <span class=\"o\">:=</span> <span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"n\">Translation</span> <span class=\"n\">TranslationState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TranslationState.addEntry</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TranslationState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">Translation</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TranslationState</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">forKey</span> <span class=\"o\">:=</span> <span class=\"n\">s.findD</span> <span class=\"n\">tr.key</span> <span class=\"o\">{}</span>\n  <span class=\"n\">s.insert</span> <span class=\"n\">tr.key</span> <span class=\"o\">(</span><span class=\"n\">forKey.insert</span> <span class=\"n\">tr.lang</span> <span class=\"n\">tr.expander</span><span class=\"o\">)</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">translationExtension</span> <span class=\"o\">:</span> <span class=\"n\">TranslationExtension</span> <span class=\"bp\">‚Üê</span>\n  <span class=\"n\">registerSimplePersistentEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"n\">mkStateFromImportedEntries</span> <span class=\"n\">TranslationState.addEntry</span> <span class=\"o\">{}</span>\n    <span class=\"n\">addEntryFn</span>    <span class=\"o\">:=</span> <span class=\"n\">TranslationState.addEntry</span>\n  <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- For a given key, returns the translations as a map from languages to expansion functions. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">TranslationExtension.getTranslations</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">NameMap</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">translationExtension.getState</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findD</span> <span class=\"n\">key</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addTranslation</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">Translation</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Environment</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">unless</span> <span class=\"n\">isLanguage</span> <span class=\"n\">env</span> <span class=\"n\">tr.lang</span> <span class=\"k\">do</span>\n    <span class=\"n\">throw</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Undefined language {tr.lang}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">translationExtension.addEntry</span> <span class=\"n\">env</span> <span class=\"n\">tr</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">translationAttr</span><span class=\"o\">)</span> <span class=\"s2\">\"translation \"</span> <span class=\"n\">ident</span> <span class=\"n\">ppSpace</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span>\n  <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">translationAttr</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"add a translation\"</span>\n    <span class=\"n\">add</span>   <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"n\">stx</span> <span class=\"n\">kind</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"n\">kind</span> <span class=\"bp\">==</span> <span class=\"n\">AttributeKind.global</span> <span class=\"k\">do</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid `[translation]` attribute, must be global\"</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">translation</span> <span class=\"bp\">$</span><span class=\"n\">lang'</span> <span class=\"bp\">$</span><span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withRef</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">lang</span> <span class=\"o\">:=</span> <span class=\"n\">lang'.getId.eraseMacroScopes</span>\n        <span class=\"k\">let</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">key.getString</span>\n        <span class=\"k\">let</span> <span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">Translation</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">lang</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">expander</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"o\">}</span>\n        <span class=\"n\">setEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">withRef</span> <span class=\"n\">lang'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ofExcept</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addTranslation</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">tr</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid `[translation]` attribute\"</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">register_option</span> <span class=\"n\">lang</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">defValue</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Language to use when translating strings\"</span> <span class=\"o\">}</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Mathlib.I18n.Basic</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.I18n.Init</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">I18n</span>\n\n<span class=\"sd\">/-- Like `s!\"...\"` strings but use the current `lang` option for localization. -/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"tr!\"</span> <span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">expandInterpolatedStrChunks</span>\n    <span class=\"o\">(</span><span class=\"n\">chunks</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkAppend</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Term</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">MacroM</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkElem</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">MacroM</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">√ó</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Ident</span> <span class=\"bp\">√ó</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">Syntax.missing</span><span class=\"o\">‚ü©</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Ident</span> <span class=\"bp\">√ó</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n  <span class=\"n\">for</span> <span class=\"n\">elem</span> <span class=\"k\">in</span> <span class=\"n\">chunks</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">elem</span> <span class=\"bp\">‚Üê</span> <span class=\"k\">match</span> <span class=\"n\">elem.isInterpolatedStrLit</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">elems.size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">elem</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">MonadQuotation.addMacroScope</span> <span class=\"o\">(</span><span class=\"n\">Name.appendIndexAfter</span> <span class=\"bp\">`</span><span class=\"n\">n</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n        <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">key</span> <span class=\"bp\">++</span> <span class=\"s2\">\"{\"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">j</span> <span class=\"bp\">++</span> <span class=\"s2\">\"}\"</span>\n        <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"n\">elems.push</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mkElem</span> <span class=\"o\">‚ü®</span><span class=\"n\">elem</span><span class=\"o\">‚ü©)</span>\n        <span class=\"n\">pure</span> <span class=\"n\">n.raw</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">key</span> <span class=\"bp\">++</span> <span class=\"n\">str</span>\n        <span class=\"n\">mkElem</span> <span class=\"o\">(</span><span class=\"n\">Syntax.mkStrLit</span> <span class=\"n\">str</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">elem</span><span class=\"o\">‚ü©</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">result</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mkAppend</span> <span class=\"n\">result</span> <span class=\"o\">‚ü®</span><span class=\"n\">elem</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">elems</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">expandInterpolatedStr</span> <span class=\"o\">(</span><span class=\"n\">interpStr</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"n\">interpolatedStrKind</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">toTypeFn</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">√ó</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Ident</span> <span class=\"bp\">√ó</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">elems</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">expandInterpolatedStrChunks</span> <span class=\"n\">interpStr.raw.getArgs</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">toTypeFn</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">elems</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkSugg</span> <span class=\"o\">(</span><span class=\"n\">interpStr</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"n\">interpolatedStrKind</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lang</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Command</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.bracketedBinder</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">chunks</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">elem</span> <span class=\"k\">in</span> <span class=\"n\">interpStr.raw.getArgs</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">elem.isInterpolatedStrLit</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n      <span class=\"k\">let</span> <span class=\"n\">arg</span> <span class=\"o\">:=</span> <span class=\"n\">Name.appendIndexAfter</span> <span class=\"bp\">`</span><span class=\"n\">s</span> <span class=\"n\">i</span>\n      <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args.push</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bracketedBinderF</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">arg</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">String</span><span class=\"o\">)))</span>\n      <span class=\"n\">chunks</span> <span class=\"o\">:=</span> <span class=\"n\">chunks.push</span> <span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">chunks</span> <span class=\"o\">:=</span> <span class=\"n\">chunks.push</span> <span class=\"n\">elem</span>\n  <span class=\"k\">let</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"n\">interpolatedStrKind</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">interpStr.raw.modifyArgs</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">chunks</span><span class=\"o\">‚ü©</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"kd\">@[</span><span class=\"n\">translation</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">lang</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">key</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">s</span><span class=\"bp\">!$</span><span class=\"n\">s2</span>\n    <span class=\"o\">)</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tr</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">interpStr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">elems</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">expandInterpolatedStr</span> <span class=\"n\">interpStr</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"o\">))</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">elems.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">translations</span> <span class=\"o\">:=</span> <span class=\"n\">TranslationExtension.getTranslations</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">key</span>\n    <span class=\"k\">let</span> <span class=\"n\">langs</span> <span class=\"o\">:=</span> <span class=\"n\">getLanguages</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">result</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">lang</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">langs</span> <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"n\">translations.find</span><span class=\"bp\">?</span> <span class=\"n\">lang</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">body</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">lang</span> <span class=\"bp\">==</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">lang</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"k\">else</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">sugg</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mkSugg</span> <span class=\"n\">interpStr</span> <span class=\"n\">lang</span> <span class=\"n\">key</span>\n        <span class=\"n\">logWarning</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Missing translation for {lang} ({l.description}) with key {toExpr key}.{</span>\n<span class=\"s2\">          \"\"}</span><span class=\"se\">\\n\\n</span><span class=\"s2\">Template:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">{sugg}\"</span>\n    <span class=\"n\">body</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">lang</span> <span class=\"o\">:=</span> <span class=\"n\">KVMap.getString</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getOptions</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">lang</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n      <span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">lets</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">elems.foldrM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">body</span>\n    <span class=\"c1\">--logInfo m!\"generated: {lets}\"</span>\n    <span class=\"n\">Term.elabTerm</span> <span class=\"n\">lets</span> <span class=\"n\">none</span>\n</code></pre></div>\n</div></div>",
        "id": 402576630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700177639
    },
    {
        "content": "<p>These are basically for <code>s!\"\"</code> string translation, and I was imagining that it could be additionally keyed by whether it's for an <code>s!</code>, <code>f!</code>, or <code>m!</code> translation. You'd need some other prefixes for these options; maybe <code>ts!</code>, <code>tf!</code>, and <code>tm!</code>, or a <code>tr%</code> prefix that's aware of these three types of strings.</p>",
        "id": 402577052,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700177858
    },
    {
        "content": "<p>Thanks! That's already great. Of course translating before using isn't the most convenient thing to do, but this is definitely usable.</p>",
        "id": 402578739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700178813
    },
    {
        "content": "<p>The workflow I'm imagining is this:</p>\n<ul>\n<li>You want to translate a new language, so you add a <code>decl_lang</code></li>\n<li>You compile your project</li>\n<li>The collection of warnings is new translation tasks</li>\n<li>You create a module with all these translations and import it</li>\n<li>You rebuild</li>\n</ul>",
        "id": 402578882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700178905
    },
    {
        "content": "<p>Either some tool could look at the output and collect the warnings, or the elaborator could write them to a file (say if there's some option set that you pass in on the command line)</p>",
        "id": 402579028,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700178988
    },
    {
        "content": "<p>Having some mechanism to write templates to a file would definitely be a huge boost of usability.</p>",
        "id": 402579076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700179025
    },
    {
        "content": "<p>Right now it's not convenient for people who want to translate without recompiling, and you also can't use these translations from within the MacroM monad (it doesn't have <code>getOptions</code>)</p>",
        "id": 402579252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700179123
    },
    {
        "content": "<p>For <code>m!</code> strings, I believe there's not that sort of limitation, since you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MessageData.ofPPFormat#doc\">docs#Lean.MessageData.ofPPFormat</a> to have it lazily translate once it finally gets displayed, rather translated when it's generated.</p>",
        "id": 402580958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700179788
    }
]