[
    {
        "content": "<p><code>lake print-paths</code> has a lot of duplicates (see below). Is it normal or does it hurt the performance of the commands that iterate over the paths?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">print</span><span class=\"bp\">-</span><span class=\"n\">paths</span> <span class=\"bp\">|</span> <span class=\"n\">jq</span>\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"srcPath\"</span><span class=\"o\">:</span> <span class=\"o\">[</span>\n    <span class=\"s2\">\"./lake-packages/std/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/Qq/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/aesop/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/aesop/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/Cli/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/proofwidgets/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/mathlib/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/mathlib/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/mathlib/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/mathlib/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/mathlib/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/mathlib/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/mathlib/./.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"././.\"</span>\n  <span class=\"o\">],</span>\n  <span class=\"s2\">\"oleanPath\"</span><span class=\"o\">:</span> <span class=\"o\">[</span>\n    <span class=\"s2\">\"./lake-packages/std/build/lib\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/Qq/build/lib\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/aesop/build/lib\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/Cli/build/lib\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/proofwidgets/build/lib\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./lake-packages/mathlib/build/lib\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"./build/lib\"</span>\n  <span class=\"o\">],</span>\n  <span class=\"s2\">\"loadDynlibPaths\"</span><span class=\"o\">:</span> <span class=\"o\">[]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 393140474,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1695691191
    },
    {
        "content": "<p>Looks a bit like my <code>PATH</code> :-)</p>",
        "id": 393183413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695715835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"599279\">@Denis Gorbachev</span> This is \"normal\". Lake currently does not deduplicate the source path (this is caused by multiple libraries sharing the same source directory). Since the path is generally used for finds which short-circuit when they find a match, it will generally not need to explore every copy. Still, deduplicating is probably a good idea.</p>",
        "id": 393285621,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695747968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Duplicate.20entries.20in.20.60lake.20print-paths.60/near/393183413\">said</a>:</p>\n<blockquote>\n<p>Looks a bit like my <code>PATH</code> :-)</p>\n</blockquote>\n<p>Offtopic, but for PATH that's fixable by using -- assuming you're using zsh -- the deduplicating way of modifying your path rather than simple string-based one -- i.e. instead of doing <code>PATH=/foo/bar/baz/:$PATH</code> do <code>path=(/foo/bar/baz $path)</code> -- the latter being an (automatically defined) <code>typeset -U</code> array which automatically changes the former, but uniquifies first. (Of course it likely doesn't matter unless some program you run is somehow bound on how often it loops over PATH, but sometimes it's nice that it's tidy for interactive reasons, and also it's good to know the <code>typeset -U</code> trick for other environment variables -- you can define your own and then get the same behavior).</p>",
        "id": 393317995,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695758705
    }
]