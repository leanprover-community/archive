[
    {
        "content": "<p>Often when iterating through for loop via index, you're forced to write either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">as.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">as.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h.2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>By adding e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">get_elem_tactic_trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">exact</span> <span class=\"n\">Membership.mem.upper</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n</code></pre></div>\n<p>you can get away with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">as.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but the <code>h</code> is unfortunately necessary. It would be nice if it could be replaced with <code>_</code>—or, even better, if it wasn't necessary at all.</p>\n<p>Would it be a good or bad idea to use <code>forIn'</code> with an inaccessible hypothesis by default for <code>for i in ...</code> (when possible), so that <code>for h : i in ...</code> wasn't necessary in cases like this? (Would there be any technical obstacles, or any significant costs?)</p>\n<p>In the future, it would also be nice to gradually make <code>get_elem_tactic_trivial</code> powerful enough (either in core or std) to avoid using <code>[]'</code> or <code>[]!</code> in most basic <code>for</code> loops. (This would mean being able to handle things like <code>[:as.size-1]</code> as well, as well as using hypotheses like <code>as.size ≤ bs.size</code> when indexing into <code>bs</code>.)</p>",
        "id": 401242600,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699566712
    },
    {
        "content": "<p>I’ve RFC’ed this at <a href=\"https://github.com/leanprover/lean4/issues/3032\">https://github.com/leanprover/lean4/issues/3032</a></p>",
        "id": 406256656,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701851568
    }
]