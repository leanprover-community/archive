[
    {
        "content": "<p>If I have a theorem/definition with some arguments and a type, say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>what is the best way to retrieve the information that <code>n</code> and <code>m</code> were arguments, i.e., the definition was <strong>not</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">silly</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks</p>",
        "id": 315518743,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670912281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 315520836,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670913388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as unresolved.</p>",
        "id": 315520846,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670913394
    },
    {
        "content": "<p>Afaik Lean does not preserve this information after elaboration, so I don't think it can be done without defining your own variant of <code>theorem</code>.</p>",
        "id": 315551295,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670926174
    },
    {
        "content": "<p>you can do it if you are in a linter though, since that receives the exact input syntax</p>",
        "id": 315551582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670926265
    },
    {
        "content": "<p>Thanks. Does Docgen4 get this?<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I really wanted the exact input syntax. What is a \"linter\" here - does it have to be a plugin or can it be a regular Lean 4 (meta)-program?</p>",
        "id": 315553206,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670926774
    },
    {
        "content": "<p>Linters are programs that run after each command is elaborated, they are usually used to catch common errors, like the unused variable linter</p>",
        "id": 315554250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670927114
    },
    {
        "content": "<p>What is the context in which your program is running? Is it like an autograder?</p>",
        "id": 315554448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670927163
    },
    {
        "content": "<p>I am trying to extract data from mathlib4 of two kinds - the documentation strings and sequences of tactics. This question was for the first kind: log to a file definitions/theorems with docstrings whenever these are present.</p>",
        "id": 315555320,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670927386
    },
    {
        "content": "<p>Seems like a linter can do this. Can you point to an example of a linter?</p>",
        "id": 315555443,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670927414
    },
    {
        "content": "<p>And how to run a linter?</p>",
        "id": 315555562,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670927459
    },
    {
        "content": "<p>Okay, I see the <code>runLinter</code> file and some linters in <code>Std4</code>. I will read the code and ask about what I could not understand of it.</p>",
        "id": 315557281,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670928052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it looks like linters are perfect for my goals, but I had a couple of questions about things too subtle for me to understand from the source.</p>\n<ul>\n<li>I see that <code>Linter := Syntax → CommandElabM Unit</code> so I run in the CommandElab monad. But is the state I get the one <em>before</em> the command was run (or the one after)? If not, is there some way to get the environment before the command was run?</li>\n<li>If I have a transitive import with an <code>addLinter</code> command, will the linter run after each command while building?</li>\n</ul>",
        "id": 315563307,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670929962
    },
    {
        "content": "<p>It is the one after</p>",
        "id": 315563405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670929994
    },
    {
        "content": "<p>yes to the second question</p>",
        "id": 315563469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670930021
    },
    {
        "content": "<p>I don't know any way to get the original environment before the command</p>",
        "id": 315563661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670930081
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 315563775,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670930113
    },
    {
        "content": "<p>there is the <code>whatsnew in</code> command which diffs the environment before/after but that uses actual syntax in the file</p>",
        "id": 315563948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670930160
    },
    {
        "content": "<p>Thanks. Hopefully I have potential solutions to both my tasks. The more immediate (and easier) can use a linter.</p>",
        "id": 315564606,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670930334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 315564651,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670930346
    }
]