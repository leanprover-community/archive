[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">find_theorems</span><span class=\"o\">)</span>\n  <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"#find_theorems\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"o\">(</span><span class=\"n\">strLit</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n</code></pre></div>\n<p>and it works, and I want to extend it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">find_theorems</span><span class=\"o\">)</span>\n  <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"#find_theorems\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"o\">(</span><span class=\"n\">strLit</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"⊢ \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n</code></pre></div>\n<p>This is accepted, but if I then use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find_theorems</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">tsum</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">^</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">group'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"n\">pretty</span> <span class=\"n\">printing</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">group'.</span> <span class=\"n\">Falling</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">raw</span> <span class=\"n\">printer.</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"s2\">\"⊢\"</span> <span class=\"o\">(</span><span class=\"n\">Term.paren</span> <span class=\"s2\">\"(\"</span> <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">=</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">tsum</span> <span class=\"o\">[(</span><span class=\"n\">Term.hole</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)])</span> <span class=\"s2\">\"=\"</span> <span class=\"o\">(</span><span class=\"n\">Term.hole</span> <span class=\"s2\">\"_\"</span><span class=\"o\">))</span> <span class=\"s2\">\")\"</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I am parsing the argument list like this so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">for</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span> <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ss</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.TSyntax.getString</span> <span class=\"n\">ss</span>\n        <span class=\"n\">name_pats</span> <span class=\"o\">:=</span> <span class=\"n\">name_pats.push</span> <span class=\"n\">str</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.TSyntax.getId</span> <span class=\"n\">i</span>\n        <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n          <span class=\"n\">throwErrorAt</span> <span class=\"n\">i</span> <span class=\"s2\">\"Name {n} not in scope\"</span>\n        <span class=\"n\">idents</span> <span class=\"o\">:=</span> <span class=\"n\">idents.push</span> <span class=\"n\">n</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"s2\">\"⊢\"</span> <span class=\"bp\">$</span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">st</span> <span class=\"n\">none</span>\n        <span class=\"n\">terms</span> <span class=\"o\">:=</span> <span class=\"n\">terms.push</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">s</span> <span class=\"n\">none</span>\n        <span class=\"n\">terms</span> <span class=\"o\">:=</span> <span class=\"n\">terms.push</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where the second-to-last clause is new. I found in the docs of <code>&lt;|&gt;</code> that it adds a <code>group</code> node if necessary, but I am unsure how to match it, or if I am approaching this the wrong way.</p>",
        "id": 381538392,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691078698
    },
    {
        "content": "<p>I think I figured it out.</p>",
        "id": 381556711,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691082289
    }
]