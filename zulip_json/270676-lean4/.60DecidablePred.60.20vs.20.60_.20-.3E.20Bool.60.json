[
    {
        "content": "<p>Is there a conversation anyone can point me to about why you might use <code>(p : A -&gt; Prop) [DecidablePred p]</code> instead of <code>(p : A -&gt; Bool)</code>? I'm back to working on moving list APIs from mathlib to Std and want to double-check what is recommended before I finish reviewing the PRs.</p>",
        "id": 402978333,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700380396
    },
    {
        "content": "<p>It seems to me like the <code>DecidablePred</code> version is intended to be more general, but it ends up introducing potentially pesky <code>decide</code>s if your <code>p</code> is passed into the def as <code>A -&gt; Bool</code> or used in the body as <code>A -&gt; Bool</code> (e.g. as argument to <code>List.filter</code>).</p>\n<p>Is there an issue with pushing the <code>Decidable</code> inference off to the callsite, and expecting the <code>A -&gt; Prop</code> argument be coerced to <code>A -&gt; Bool</code>?</p>",
        "id": 402978870,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700380644
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/List.2Efilter.20with.20Bool\">this</a> discussion from 2 years ago seems to back up that <code>A -&gt; Bool</code> is the more recommended one now. but that was before the port <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 402980195,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700381244
    },
    {
        "content": "<p>There's certainly been a bunch of discussion about it during the port, because lean and mathlib 3 used Prop for all filter APIs. Can't find it now on mobile</p>",
        "id": 402990529,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700386607
    },
    {
        "content": "<p>I think we even changed back and forth at some point (for multiset?)</p>",
        "id": 402990845,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700386778
    },
    {
        "content": "<p>Currently, <code>List.filter</code> uses <code>Bool</code>, wheras <code>Finset.filter</code> and <code>Multiset.filter</code> use <code>Prop</code>. I found it mildly annoying to have to deal with the conversion to <code>Bool</code> when proving stuff about <code>Nat.factors</code> that involved filtering the resulting list. I also think it is not so nice that there is no consistency across the various types mentioned above. My preference as a mathematician who wants to use Lean to prove things clearly is for <code>Prop</code>. I assume that people using lists for programming would prefer <code>Bool</code>. So it is hard to make everybody happy.</p>",
        "id": 403000373,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700392249
    },
    {
        "content": "<p>Yeah. I suspect this also has to do with the <code>IsTrue</code> proposal from Mario forever ago, and the <code>Decidable</code> as a subtype of <code>Bool</code> proposal. Hopefully someone who understands this more can advise me <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 403038518,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700417724
    }
]