[
    {
        "content": "<p>I have written a Lake script to automatically detect the top-level folders in a Lean repository and generate the corresponding top-level files that import all the files from these folders. Here is the code, in case anyone else finds it useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">script</span> <span class=\"n\">mkImports</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ws</span> <span class=\"bp\">←</span> <span class=\"n\">Lake.getWorkspace</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">pkg</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">ws.packageList.filter</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">dir</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"s2\">\".\"</span><span class=\"o\">⟩)</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"Current package not found\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Creating imports for package {pkg.name} ...</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">libName</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">pkg.leanLibConfigs</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">dir</span> <span class=\"bp\">←</span> <span class=\"n\">FilePath.walkDir</span> <span class=\"n\">libName.toString</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">Array.filterM</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"bp\">·.</span><span class=\"n\">isDir</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">filePathToImport</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">fp</span> <span class=\"bp\">↦</span> <span class=\"n\">fp.toString.takeWhile</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">!=</span> <span class=\"n\">FilePath.extSeparator</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">FilePath.pathSeparator</span> <span class=\"k\">then</span> <span class=\"sc\">'.'</span> <span class=\"k\">else</span> <span class=\"n\">c</span>\n    <span class=\"k\">let</span> <span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"n\">dir.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"import {filePathToImport f}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"n\">IO.FS.writeFile</span> <span class=\"o\">(</span><span class=\"n\">libName.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\".lean\"</span><span class=\"o\">)</span> <span class=\"n\">imports</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Created imports file for {libName} library.\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This can be inserted at the end of the <code>lakefile</code> of any Lean4 repository and run using the command <code>lake run mkImports</code>.</p>",
        "id": 370743932,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1688038444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span>, would you mind PRing it to mathlib4?</p>\n<p>(A question about scripts: do downstream projects inherit them?)</p>",
        "id": 370746226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688038899
    },
    {
        "content": "<p>Sure, I will do that in a short while. </p>\n<p>(I'm not sure about the answer, actually. I'll try it out on a test set-up.)</p>",
        "id": 370747332,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1688039119
    },
    {
        "content": "<p>You might want to look at <a href=\"https://github.com/lurk-lab/yatima/blob/main/lakefile.lean#L133-L144\">https://github.com/lurk-lab/yatima/blob/main/lakefile.lean#L133-L144</a></p>",
        "id": 370753496,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1688040138
    },
    {
        "content": "<p>You can run <code>lake run import_all?</code> on CI. Or <code>lake run import_all</code>to generate the file.<br>\nThe code from the link I posted has a two-fold role, such that the bash script could be scrapped</p>",
        "id": 370753885,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1688040207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Thanks for the link. The idea of having a separate <code>import_all?</code>function is a neat one; I have modified my code to emulate the design of the <code>Yatima</code> <code>lakefile</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getCurrentPackage</span> <span class=\"o\">:</span> <span class=\"n\">ScriptM</span> <span class=\"n\">Package</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ws</span> <span class=\"bp\">←</span> <span class=\"n\">Lake.getWorkspace</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">pkg</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">ws.packageList.filter</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">dir</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"s2\">\".\"</span><span class=\"o\">⟩)</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"Current package not found\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">pkg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">importsForLib</span> <span class=\"o\">(</span><span class=\"n\">lib</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dir</span> <span class=\"bp\">←</span> <span class=\"n\">FilePath.walkDir</span> <span class=\"n\">lib.toString</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">Array.filterM</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"bp\">·.</span><span class=\"n\">isDir</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">filePathToImport</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">fp</span> <span class=\"bp\">↦</span> <span class=\"n\">fp.toString.takeWhile</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">!=</span> <span class=\"n\">FilePath.extSeparator</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">FilePath.pathSeparator</span> <span class=\"k\">then</span> <span class=\"sc\">'.'</span> <span class=\"k\">else</span> <span class=\"n\">c</span>\n  <span class=\"k\">let</span> <span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"n\">dir.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"import {filePathToImport f}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">imports</span>\n\n<span class=\"n\">script</span> <span class=\"n\">import_all</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">pkg</span> <span class=\"bp\">←</span> <span class=\"n\">getCurrentPackage</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Creating imports for package {pkg.name} ...</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">lib</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">pkg.leanLibConfigs</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"n\">lib.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\".lean\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">imports</span> <span class=\"bp\">←</span> <span class=\"n\">importsForLib</span> <span class=\"n\">lib</span>\n    <span class=\"n\">IO.FS.writeFile</span> <span class=\"n\">fileName</span> <span class=\"n\">imports</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Created imports file for {lib} library.\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">script</span> <span class=\"n\">import_all</span><span class=\"bp\">?</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">pkg</span> <span class=\"bp\">←</span> <span class=\"n\">getCurrentPackage</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Checking imports for package {pkg.name} ...</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">lib</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">pkg.leanLibConfigs</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"n\">lib.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\".lean\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">allImports</span> <span class=\"bp\">←</span> <span class=\"n\">importsForLib</span> <span class=\"n\">lib</span>\n    <span class=\"k\">let</span> <span class=\"n\">existingImports</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">fileName</span>\n    <span class=\"n\">unless</span> <span class=\"n\">existingImports</span> <span class=\"bp\">=</span> <span class=\"n\">allImports</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.eprintln</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Invalid import list for {lib} library.\"</span>\n      <span class=\"n\">IO.eprintln</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Try running `lake run mkImports`.\"</span>\n      <span class=\"n\">return</span> <span class=\"mi\">1</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"The imports for package {pkg.name} are up to date.\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 370811873,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1688049944
    },
    {
        "content": "<p>Unfortunately, it seems that downstream projects do not inherit lake scripts.</p>",
        "id": 370818835,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1688051112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I have created a pull request for this on <code>mathlib4</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5593\">#5593</a>. The existing order of imports in <code>Mathlib.lean</code> is alphabetical, while the order of imports generated by the script <code>import_all</code> is according to the depth-first traversal of the <code>Mathlib</code> directory, which is why <code>import_all?</code> may fail initially (but will succeed after running <code>lake run import_all</code>).</p>",
        "id": 370829199,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1688052868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span> Some tips. The \"current package\" (as your script appears to define it) is always simply <code>ws.root</code>. Also, your <code>getCurrentPackage</code> will break if lake is run from another directory via <code>lake -d /some/pkg</code>).</p>",
        "id": 370935304,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688076169
    },
    {
        "content": "<p>Also, there does not need to be correlation between Lean library's name and its root module. For example, the following is a permissible style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">foo</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">lib</span> <span class=\"o\">{</span><span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Foo</span><span class=\"o\">]}</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">exe</span> <span class=\"o\">{</span><span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Thus, I would suggest you use <code>libConfig.roots</code> to find the root module(s) instead. Similarly, I would suggest you iterator over <code>leanLibs</code> instead of<code>leanLibConfigs</code> and use <code>lib.srcDir </code> to determine the directory where the root modules are stored (as it may not be the current working directory).</p>",
        "id": 370936903,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688076775
    },
    {
        "content": "<p>Thanks a lot for the suggestions, <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>. I have updated the script on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5593\">#5593</a>.</p>",
        "id": 371065384,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1688116908
    }
]