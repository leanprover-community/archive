[
    {
        "content": "<p>Is it possible to have a field in a structure (or a class) that is provided as instance of some class? For example, this can be done in Agda with the <code>{{eqA}}</code> field <a href=\"https://agda.readthedocs.io/en/v2.6.4/language/record-types.html#instance-fields\">here</a></p>",
        "id": 396497135,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697200467
    },
    {
        "content": "<p>I think I might have found the answer to this problem by having [fieldName : type] in instance declarations, but still seems to behave badly with typeclass resolution in the subsequent fields of the class...</p>",
        "id": 396497644,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697200658
    },
    {
        "content": "<p>The square brackets in the definition just mean <del>\"treat this as a typeclass in the rest of the definition\".</del> (this is not exactly right: see Eric's comment below). You need to explicitly make the instance directly after the definition and then you should be ok</p>",
        "id": 396497839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697200728
    },
    {
        "content": "<p>That makes sense, thanks! <br>\np.s., is there an easy way to explicitly supply instances (or implicit arguments, for that matter) that isn't using @ and then providing every single argument?</p>",
        "id": 396498173,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697200828
    },
    {
        "content": "<p>The <code>f (arg := value_of_the_arg)</code> syntax</p>",
        "id": 396498275,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697200869
    },
    {
        "content": "<p>Thanks! I'll try it out but I don't recall ever seeing it in any of the tutorials (e.g. TPIL4, the Lean 4 manual)...</p>",
        "id": 396498401,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697200917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Instance.20field.20in.20structure.2Fclass/near/396497839\">said</a>:</p>\n<blockquote>\n<p>The square brackets in the definition just mean \"treat this as a typeclass in the rest of the definition\".</p>\n</blockquote>\n<p>This half of your comment isn't true, it gets treated as a typeclass even without the <code>[]</code>. The <code>[]</code>s mean \"treat this as an <em>instance argument in the <code>.mk</code> constructor function</em>\".</p>",
        "id": 396499845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697201457
    },
    {
        "content": "<p>That is, this works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SureWhyNot</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">HAdd</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Lean knew to use <code>i</code> as an instance to resolve the <code>+</code> that follows.</p>",
        "id": 396500141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697201554
    },
    {
        "content": "<p>Oh, that's true! Removing the brackets still makes everything go through, so I guess it is automatically provided as instance. The explaination on the constructor also makes sense; in the case of typeclasses I guess it tries to infer them so that they can be left out.</p>",
        "id": 396500211,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697201592
    },
    {
        "content": "<p>In the same vein, you can write <code>{X : Type*}</code> to make that argument to <code>.mk</code> implicit</p>",
        "id": 396501367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697202034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Instance.20field.20in.20structure.2Fclass/near/396501367\">said</a>:</p>\n<blockquote>\n<p>In the same vein, you can write <code>{X : Type*}</code> to make that argument to <code>.mk</code> implicit</p>\n</blockquote>\n<p>What does <code>Type*</code> refer to here? Is it specific syntax?</p>\n<p>On that note, I have another small question on the topic of instances: how do I package a term with an instance on it (e.g., basically a sigma type in which the second part is basically a class) in such a way that the instance is \"picked up\" when the term is brought into scope? Is there an idiomatic way of doing this or should I just unpack it <code>λ ⟨X,_⟩ ⟨Y,_⟩ =&gt; ...&lt;place where the instance is used&gt;</code> like this?</p>",
        "id": 396502213,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697202302
    },
    {
        "content": "<p><code>Type*</code> means \"a type in any universe\". Lean has an infinite heirarchy of types: the type of <code>Type</code> is <code>Type 1</code>, the type of <code>Type 1</code> is <code>Type 2</code> etc.</p>",
        "id": 396504464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697203123
    },
    {
        "content": "<p>Is <code>Type*</code> more or less a shorthand for implicitly quantifying (only once) over any universe level? I don't recall ever seeing this in any Lean book...</p>",
        "id": 396504943,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697203278
    },
    {
        "content": "<p><code>Type*</code> is a shorthand for <code>universe u ; variable {A : Type u}</code> with a new <code>u</code> for every use.</p>",
        "id": 396505151,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697203340
    },
    {
        "content": "<p>This is mathlib-defined syntax, as far as I understand.</p>",
        "id": 396505176,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697203347
    }
]