[
    {
        "content": "<p>In Lean 4 implicit variables seem to be appear more frequently in the Infoview than I recall from Lean 3.<br>\nOften, I want to close the goal using v✝, but it is not allowed (error: \"expected token\"). <br>\nWhat's the general methodology to make variables explicit? Concretely, \"how do I turn v✝ into v?\"</p>",
        "id": 401896072,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1699931690
    },
    {
        "content": "<p>These variables are known as \"inaccessible\", and they generally arise when Lean generates the name itself.</p>\n<p>There are a number of ways to make inaccessible variables be accessible. Some ways are via knowing variants of a tactic (for example, <code>induction</code> and <code>cases</code> let you name variables using a pattern-matching-like syntax). Others are by using extra tactics that are just for renaming, like <code>rename_i</code> (\"rename inaccessibles\").</p>",
        "id": 401896472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699931888
    },
    {
        "content": "<p>I like the <code>next u v w =&gt; ...</code> tactic for doing <code>rename_i</code> while simultaneously focusing on the first goal.</p>",
        "id": 401896539,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699931934
    },
    {
        "content": "<p><code>rename_i</code> seems quite <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> here.</p>",
        "id": 401896989,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1699932195
    },
    {
        "content": "<p>That said, <code>rename_i</code> is a bit ugly. It's better to use structured tactics that result in the hypotheses having accessible names from the beginning.</p>",
        "id": 401908619,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699939424
    },
    {
        "content": "<p>Yeah, the right question isn't \"how do I access this variable whose name has a dagger\", it's \"how did this variable get a name with a dagger in the first place and what should I have done instead\"</p>",
        "id": 401997696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699971980
    },
    {
        "content": "<p>I think sometimes it'd be useful to access daggered variables. I wouldn't mind it if it was put behind a <code>set_option</code>.</p>",
        "id": 402044984,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699986930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/Implicit.20variables.20like.20v.E2.9C.9D/near/402044984\">said</a>:</p>\n<blockquote>\n<p>I think sometimes it'd be useful to access daggered variables. I wouldn't mind it if it was put behind a <code>set_option</code>.</p>\n</blockquote>\n<p>That's <code>set_option tactic.hygienic false</code></p>",
        "id": 402049917,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699988485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Implicit.20variables.20like.20v.E2.9C.9D/near/402049917\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/Implicit.20variables.20like.20v.E2.9C.9D/near/402044984\">said</a>:</p>\n<blockquote>\n<p>I think sometimes it'd be useful to access daggered variables. I wouldn't mind it if it was put behind a <code>set_option</code>.</p>\n</blockquote>\n<p>That's <code>set_option tactic.hygienic false</code></p>\n</blockquote>\n<p>Great, that'll do as a crutch. One can work on getting by without it in due time.</p>",
        "id": 402104945,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1700010203
    }
]