[
    {
        "content": "<p>Hey, I'm trying to get into Lean4 metaprogramming. Online I found this book <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">https://github.com/arthurpaulino/lean4-metaprogramming-book</a>, which seems comprehensive enough to get me started, but I'm afraid that since Lean4 might still be in flux, many of the topics presented might have already changed from when that was released, especially syntactically. When trying a simple example from the book, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">z'</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat.zero</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>I just get told that Expr.const is an unknown identifier. <code>#eval Lean.versionString</code> tells me that I'm using <code>\"4.0.0, commit 96de208a6b1a575b3f07d978965573d5b6fad454\"</code>, but the book sadly doesn't seem to tell me what version they are using... Does anybody have any pointers for what might be going wrong? (I'm mainly interested in manipulating abstract syntax trees for playing around with anti-unification)</p>",
        "id": 326744335,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675927223
    },
    {
        "content": "<p><del>I don't even know which book you're talking about but</del> as a first experiment I would try upgrading to the current nightly ie \"today's lean\"</p>",
        "id": 326744486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675927294
    },
    {
        "content": "<p>Thanks Kevin, I just noticed I hadn't put in the link :) Alright, I'll see if upgrading solves the issue.</p>",
        "id": 326744585,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675927329
    },
    {
        "content": "<p>The issue is that you need <code>import Lean</code> to access most metaprogramming functions/types</p>",
        "id": 326747678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675928696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">z'</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat.zero</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 326747755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675928732
    },
    {
        "content": "<p>Thanks, this seems to work now (updated + imported correctly and the error goes away).</p>",
        "id": 326748841,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675929245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419316\">Andre Graubner (安德)</span> has marked this topic as resolved.</p>",
        "id": 326748846,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675929250
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> if you want to fix it in your book</p>",
        "id": 326749519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675929510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419316\">@Andre Graubner (安德)</span> I recommend you clone the book repo and actually read it in VScode with Lean running.</p>",
        "id": 326750718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675929911
    },
    {
        "content": "<p>This way you will see everything that is actually used and you'll be able to play more.</p>",
        "id": 326750775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675929933
    },
    {
        "content": "<p>And of course you should first read <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a> if you don't know its content yet (especially the latest published chapter on monad transformers that is an absolutely crucial prerequisite).</p>",
        "id": 326750968,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675930018
    },
    {
        "content": "<p>Thanks, that makes sense. I think as-is, this is probably not a mistake in the book - Expr is defined earlier, so this is more likely just me messing it up by not following the examples in order (so following along the repo as <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> suggests is the right approach. I just thought I'd ask anyways, because so far most of my troubles with lean have been by importing the wrong stuff in the wrong place :)</p>",
        "id": 326751031,
        "sender_full_name": "Andre Graubner (安德)",
        "timestamp": 1675930056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I think you should include a prominent link to the functional programming in Lean book now that it covers the prerequisites for the meta-programming book.</p>",
        "id": 326751296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675930183
    },
    {
        "content": "<p>On the subject of the metaprogramming book: Trying to read it, I got a bit lost in the zoo of objects being defined, converted into each other, etc. I hadn't checked the FP book, so thanks for recommending it, but still, is there any other resource that is a bit more like a documentation, with some kind of hierarchy and description of the system's behaviour, and less like a tutorial? Hope this is not topic piracy, thanks!</p>",
        "id": 326775747,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1675937954
    },
    {
        "content": "<p>I understand what you mean and, as far as I know, what you are looking for doesn't exist. But contributions are very welcome.</p>",
        "id": 326775993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675938019
    },
    {
        "content": "<p>Lean 4's own source code is something to learn from. In particular the Module documentation within it will give more of a system description and less of a tutorial (see for example the type <code>Expr</code>).</p>",
        "id": 326781836,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675939599
    },
    {
        "content": "<p>I will mention the FPIL book, that's a good idea. Especially now that it covers monad transformers.</p>\n<p>About the <code>import Lean</code>, it's because the small snippets aren't self-contained. They are incremental pieces of code that work together with texts in the middle. I will also mention that in the intro</p>",
        "id": 326791260,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675942678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419316\">Andre Graubner (安德)</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean4.20metaprogramming.20issues.20.28possibly.20version-related.3F.29/near/326744335\">said</a>:</p>\n<blockquote>\n<p>but the book sadly doesn't seem to tell me what version they are using...</p>\n</blockquote>\n<p>The book repo is a Lake project so you can check the <code>lean-toolchain</code> file</p>",
        "id": 326876825,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675964782
    },
    {
        "content": "<p>Updates done: <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/commit/70a8ebaf5ac931eedf08761c0d1af5975641b233\">https://github.com/arthurpaulino/lean4-metaprogramming-book/commit/70a8ebaf5ac931eedf08761c0d1af5975641b233</a></p>",
        "id": 326876991,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675964825
    }
]