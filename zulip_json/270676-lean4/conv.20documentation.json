[
    {
        "content": "<p>Lack of conv documentation and differences from lean3 came up in <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Freeze.20of.20mathlib3\">#general &gt; Freeze of mathlib3</a> when attempting to forward port existing PRs. I have also seen some documentation of differences in <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/conv.20navigation.20.3A.20Zoom.20out\">#lean4 &gt; conv navigation : Zoom out</a>.<br>\nIs there anywhere that documentation exists for conv mode—or can be written? I would like to help document things and normalize behaviour if possible; since conv mode was very useful in lean3.</p>",
        "id": 373606193,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688875849
    },
    {
        "content": "<p>Please feel free to write an .md file explaining how <code>conv</code> works in lean 4. I'm sure the community will find somewhere to host it. In 2018 there were a few user-written documents on stuff like simp and conv, and they ended up on the community website. You can be inspired by the lean 3 version here <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 373634132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688889627
    },
    {
        "content": "<p>In fact perhaps it's time that document is updated to lean 4</p>",
        "id": 373641256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688891873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> I just went through all the conv tactics to collect a bit about how it works and what you can do with it. Here are my rough notes:</p>",
        "id": 373668004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688899017
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Research into `conv` mode, to help anyone who wants to write proper documentation.</span>\n\n<span class=\"cm\">Syntax:</span>\n\n<span class=\"cm\">conv: \"conv\" (\"at\" ident)? (\"in\" (occs)? term)? \"=&gt;\" convSeq</span>\n\n<span class=\"cm\">occs: \"(occs :=\" (\"*\" &lt;|&gt; num+) \")\"</span>\n\n<span class=\"cm\">convSeq: any sequence of conv tactics</span>\n\n<span class=\"cm\">`conv in (occs := ...) term =&gt; ...`</span>\n<span class=\"cm\">is short for</span>\n<span class=\"cm\">`conv =&gt; pattern (occs := ...) term; ...`</span>\n<span class=\"cm\">(the occs clause is optional)</span>\n\n<span class=\"cm\">Mathlib provides `conv_lhs` and `conv_rhs` variants to immediately do `lhs` or `rhs` as the</span>\n<span class=\"cm\">first tactic.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">`conv` sets up a special kind of tactic environment where you are shown `| lhs`</span>\n<span class=\"cm\">and the goal is actually `⊢ lhs = ?rhs`, where `?rhs` is a metavariable.</span>\n<span class=\"cm\">Each `conv` tactic uses the `lhs` to (partially) fill in the `?rhs` while also</span>\n<span class=\"cm\">(partially) solving for the goal (like the usual tactic environment).</span>\n<span class=\"cm\">At the end, this equality is used to rewrite `lhs` to `rhs`.</span>\n\n<span class=\"cm\">The idea is that if `lhs` starts with the entire original goal, then you can use</span>\n<span class=\"cm\">`conv` tactics to navigate into a subexpression of `lhs`, do some transformations, and then</span>\n<span class=\"cm\">at the end of the `conv` block you have `lhs = rhs`, which is used to convert the goal</span>\n<span class=\"cm\">from `lhs` to `rhs`.</span>\n\n<span class=\"cm\">What `conv` does at the very end of its tactic block is do `try rfl` to auto-solve</span>\n<span class=\"cm\">for the `?rhs` metavariable if it's still not solved for.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Rewrites the second occurrence of a + b</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Rewrites the both occurrences of a + b, using explicit `pattern` rather than</span>\n  <span class=\"c1\">-- `conv in (occs := *) a + b =&gt; ...`</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! # Conv tactics from Lean core -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Control</span>\n\n<span class=\"cm\">`done` checks that there are no `conv` goals remaining.</span>\n\n<span class=\"cm\">`skip` does nothing. It can be used to be the single tactic in an otherwise empty `conv` block.</span>\n<span class=\"cm\">It does *not* skip a `conv` goal.</span>\n\n<span class=\"cm\">`rfl` skips/closes a `conv` goal by using `rfl`. (Remember, the actual goal is `⊢ lhs = ?rhs`, so</span>\n<span class=\"cm\">this sets `?rhs := lhs` and uses `rfl` to prove `lhs = lhs`.)</span>\n\n<span class=\"cm\">`conv =&gt; convSeq` is a nested `conv`. It uses `conv` to change the current goal without closing it.</span>\n<span class=\"cm\">For example, this is how you can do a `conv`-targeted rewrite of the current expression and then</span>\n<span class=\"cm\">apply `conv` tactics to the result.</span>\n\n<span class=\"cm\">`all_goals convSeq` runs the `conv` tactics on every `conv` goal, collecting all the produced</span>\n<span class=\"cm\">subgoals (if any).</span>\n\n<span class=\"cm\">`any_goals convSeq` is like `all_goals` but succeeds if the tactic sequence succees for any</span>\n<span class=\"cm\">of the goals.</span>\n\n<span class=\"cm\">`case tag =&gt; convSeq` focuses on a goal with a given tag. Has the same syntax as the `case` tactic.</span>\n<span class=\"cm\">`case' tag =&gt; convSeq` is like `case` but does not auto-close the goal if the tactics</span>\n<span class=\"cm\">do not close it.</span>\n\n<span class=\"cm\">`next =&gt; convSeq` and `next x1 ... xn =&gt; convSeq` are like the `next` tactic, but they</span>\n<span class=\"cm\">auto-close the focused goal.</span>\n\n<span class=\"cm\">`· convSeq` focuses on the current goal and auto-closes it.</span>\n\n<span class=\"cm\">`focus =&gt; convSeq` focuses on the current goal. It does not auto-close the goal, unlike `next`.</span>\n\n<span class=\"cm\">`{ convSeq }` is like `next`.</span>\n\n<span class=\"cm\">`first | convSeq1 | convSeq2 | ...` tries each `conv` sequence one at a time until one</span>\n<span class=\"cm\">of them succeeds, or else fails.</span>\n\n<span class=\"cm\">`try convSeq` runs the `conv` sequence and succeeds even if it fails.</span>\n<span class=\"cm\">Same as `first | convSeq | skip`.</span>\n\n<span class=\"cm\">`repeat convSeq` repeatedly runs `convSeq` until it fails.</span>\n\n<span class=\"cm\">`( convSeq )` is for grouping. Useful when using `conv` tactic combinators.</span>\n\n<span class=\"cm\">`conv1 &lt;;&gt; conv2` is for trying `conv1` and then doing `conv2` if it fails.</span>\n\n<span class=\"cm\">`tactic =&gt; tacticSeq` converts the goal into `⊢ lhs = ?rhs` form and applies the tactic sequence.</span>\n<span class=\"cm\">The tactic does not have to solve the goal completely, and remaining goals are turned back</span>\n<span class=\"cm\">into `conv` goals. (Internal: there's also a `tactic' =&gt; tacticSeq` that does not remove the `conv`</span>\n<span class=\"cm\">annotations from the goal before applying the tactic sequence.)</span>\n\n<span class=\"cm\">### from Mathlib</span>\n\n<span class=\"cm\">`discharge =&gt; tacticSeq` takes a goal `| p` with `p` a proposition, uses the tactic sequence</span>\n<span class=\"cm\">to prove `⊢ p`, and then closes the goal to convert `p` to `True`.</span>\n\n<span class=\"cm\">`with_reducible convSeq` changes the transparency settings to `reducible` while evaluating the</span>\n<span class=\"cm\">`conv` sequence.</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Navigation</span>\n\n<span class=\"cm\">`congr` (synonym: `args`) creates subgoals for every immediate subexpression of the expression.</span>\n<span class=\"cm\">You can use `rfl` to skip any of these subgoals.</span>\n\n<span class=\"cm\">`lhs` (synonym: `left`) traverses into the second-to-last argument of the expression.</span>\n<span class=\"cm\">(Implemented using `congr`.)</span>\n\n<span class=\"cm\">`rhs` (synonym: `right`) traverses into the last argument of the expression.</span>\n<span class=\"cm\">(Implemented using `congr`.)</span>\n\n<span class=\"cm\">`arg i` (and `arg @i`) traverses into the `i`th explicit argument (resp. the `i`th argument)</span>\n<span class=\"cm\">of the expression. (Implemented using `congr`.)</span>\n\n<span class=\"cm\">`ext` (synonym: `intro`) traverses into lambda, forall, and `let` expressions.</span>\n<span class=\"cm\">`ext x` gives the resulting binder the name `x`.</span>\n<span class=\"cm\">`ext x y z ...` applies `ext` once for each provided binder.</span>\n\n<span class=\"cm\">`enter [...]` is a compact way to describe a path to a subterm.</span>\n<span class=\"cm\">* `enter [i]` (where `i` is a natural number) is equivalent to `arg i`.</span>\n<span class=\"cm\">* `enter [@i]` is equivalent to `arg @i`.</span>\n<span class=\"cm\">* `enter [x]` (where `x` is an identifier) is equivalent to `ext x`.</span>\n\n<span class=\"cm\">Copying the docstring for `pattern`:</span>\n<span class=\"cm\">```quote</span>\n<span class=\"cm\">* `pattern pat` traverses to the first subterm of the target that matches `pat`.</span>\n<span class=\"cm\">* `pattern (occs := *) pat` traverses to every subterm of the target that matches `pat`</span>\n<span class=\"cm\">  which is not contained in another match of `pat`. It generates one subgoal for each matching</span>\n<span class=\"cm\">  subterm.</span>\n<span class=\"cm\">* `pattern (occs := 1 2 4) pat` matches occurrences `1, 2, 4` of `pat` and produces three subgoals.</span>\n<span class=\"cm\">  Occurrences are numbered left to right from the outside in.</span>\n\n<span class=\"cm\">Note that skipping an occurrence of `pat` will traverse inside that subexpression, which means</span>\n<span class=\"cm\">it may find more matches and this can affect the numbering of subsequent pattern matches.</span>\n<span class=\"cm\">For example, if we are searching for `f _` in `f (f a) = f b`:</span>\n<span class=\"cm\">* `occs := 1 2` (and `occs := *`) returns `| f (f a)` and `| f b`</span>\n<span class=\"cm\">* `occs := 2` returns `| f a`</span>\n<span class=\"cm\">* `occs := 2 3` returns `| f a` and `| f b`</span>\n<span class=\"cm\">* `occs := 1 3` is an error, because after skipping `f b` there is no third match.</span>\n<span class=\"cm\">```</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Manipulation</span>\n\n<span class=\"cm\">`change t` changes the expression to `t` if the expression and `t` are definitionally equal.</span>\n\n<span class=\"cm\">`rw [thms...]` rewrites the expression using the given theorems. The syntax is similar to `rw`.</span>\n\n<span class=\"cm\">`erw [thms...]` rewrites the expression using the given theorems. The syntax is similar to `erw`.</span>\n\n<span class=\"cm\">`simp [thms...]` applies `simp` to rewrite the expression. The syntax is similar to `simp`.</span>\n\n<span class=\"cm\">`dsimp [thms...]` applies `dsimp` to rewrite the expression. The syntax is similar to `dsimp`.</span>\n\n<span class=\"cm\">`simp_match` simplifies `match` expressions.</span>\n\n<span class=\"cm\">`apply e` applies `e` to the goal (which remember is `⊢ lhs = ?rhs`) using the `apply` tactic.</span>\n<span class=\"cm\">Strange results may occur if the hypotheses of `e` are not equalities.</span>\n\n<span class=\"cm\">`refine e` applies `e` to the goal (which remember is `⊢ lhs = ?rhs`) using the `refine` tactic.</span>\n<span class=\"cm\">Strange results may occur if the placeholders in `e` are not equalities.</span>\n\n<span class=\"cm\">### from Std4</span>\n\n<span class=\"cm\">`exact e` closes the goal, where `e : lhs = ?rhs`.</span>\n\n<span class=\"cm\">### from Mathlib</span>\n\n<span class=\"cm\">The following apply their corresponding tactics in `conv` mode unless otherwise stated.</span>\n\n<span class=\"cm\">`abel` and `abel_nf`</span>\n\n<span class=\"cm\">`ring` and `ring_nf`</span>\n\n<span class=\"cm\">`norm_cast`</span>\n\n<span class=\"cm\">`norm_num1` and `norm_num`</span>\n\n<span class=\"cm\">`push_neg`</span>\n\n<span class=\"cm\">`apply_congr` applies a relevant `@[congr]` lemma</span>\n\n<span class=\"cm\">(category theory) `slice i j` reassociates as needed and focuses on the subexpression involving</span>\n<span class=\"cm\">the composition of morphisms `i` through `j`.</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Reductions</span>\n\n<span class=\"cm\">`whnf` reduces the expression to weak-head normal form.</span>\n\n<span class=\"cm\">`zeta` applies zeta reduction to the expression (i.e., substitutes all `let` expressions</span>\n<span class=\"cm\">and expands all local variables).</span>\n\n<span class=\"cm\">`reduce` reduces the expression like the `#reduce` command.</span>\n<span class=\"cm\">(Documentation says \"for debugging purposes only.\")</span>\n\n<span class=\"cm\">`delta id1 id2 ...` applies delta reduction for the given constants (i.e., substitutes</span>\n<span class=\"cm\">the values of each constant). It is primitive: it ignores definitional equations and</span>\n<span class=\"cm\">uses the raw definition of each constant. Prefer using `unfold`.</span>\n\n<span class=\"cm\">`unfold id1 id2 ...` unfolds the definitions for the given constants using each</span>\n<span class=\"cm\">definitions equational lemmas. For recursive definitions, only one layer of unfolding</span>\n<span class=\"cm\">is performed.</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Debugging, for internal use, or otherwise technical</span>\n\n<span class=\"cm\">`trace_state` prints the current goal state (runs the `trace_state` tactic)</span>\n\n<span class=\"cm\">`fail_if_success convSeq` fails if the `conv` sequence succeeds.</span>\n\n<span class=\"cm\">### from Std4</span>\n\n<span class=\"cm\">`guard_expr` and `guard_target`</span>\n\n<span class=\"cm\">`unreachable!`</span>\n\n<span class=\"cm\">### from Mathlib</span>\n\n<span class=\"cm\">`run_tac doSeq` evaluates the monadic value and runs it as a tactic using `tactic'`</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Tactics and commands related to `conv`</span>\n\n<span class=\"cm\">`conv' ... =&gt; ...` is like `conv` but assumes the goal is already a `conv` goal.</span>\n<span class=\"cm\">Used internally to go back and forth between tactic mode and conv mode.</span>\n\n<span class=\"cm\">### from Mathlib</span>\n\n<span class=\"cm\">`conv_lhs ... =&gt; ...` and `conv_rhs ... =&gt; ...` are like `conv`, but they immediately use</span>\n<span class=\"cm\">`lhs` or `rhs` (respectively).</span>\n\n<span class=\"cm\">`#conv convTactic =&gt; e` is a command to apply the `convTactic` to the expression `e`, yielding</span>\n<span class=\"cm\">the converted expression (and dropping the generated proof).</span>\n<span class=\"cm\">This is used to implement `#simp`, `#whnf`, `#norm_num`, and `#push_neg`.</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 373668019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688899020
    },
    {
        "content": "<p>This should include all the conv tactics in core, std4, and mathlib4</p>",
        "id": 373668162,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688899068
    },
    {
        "content": "<p><code>tactic =&gt;</code> and <code>tactic' =&gt;</code> are missing the arrows</p>",
        "id": 373711618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688911653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/conv.20documentation/near/373668162\">said</a>:</p>\n<blockquote>\n<p>This should include all the conv tactics in core, std4, and mathlib4</p>\n</blockquote>\n<p>Can you elaborate on this a little bit?<br>\nIs there any reason how it is defined in three places? (i get core/otherwise, but is there any reason this tactic can't be mostly moved to std4 from mathlib4?)</p>",
        "id": 373775297,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688933608
    },
    {
        "content": "<p><code>conv</code> itself is defined in one place, but it's extensible (just like the normal <code>by</code> tactic mode). You can define your own \"<code>conv</code> tactics\" that you can use from within <code>conv</code>. In the notes, all the <code>conv</code> tactics that come from std4 or mathlib4 are in \"from XXX\" sections.</p>",
        "id": 373775740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688933840
    },
    {
        "content": "<p>I guess it's a bit confusing that the <code>conv</code> tactic (which is a tactic in the usual sense) has <code>conv</code> tactics, which are themselves not the usual sorts of tactics, but the <code>conv</code> tactic is not a <code>conv</code> tactic, yet there's a <code>conv</code> <code>conv</code> tactic for nested <code>conv</code>...</p>",
        "id": 373775890,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688933904
    },
    {
        "content": "<p>yep<br>\nthis makes porting a bit clunky too (mentioned on the second thread i linked) because you can't do <code>conv in</code> in conv mode</p>",
        "id": 373775991,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688933964
    },
    {
        "content": "<p>Ah, but it's actually easy to extend nested <code>conv</code> syntax from outside core Lean. It's just a matter of someone actually doing it.</p>\n<p>It's not so bad that to port you just need to add a <code>pattern</code> as the first line of the nested <code>conv</code>. (But also it'd be a nicer experience to have it in the <code>conv</code> syntax)</p>",
        "id": 373776329,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688934149
    },
    {
        "content": "<p>yes, so the way I ported this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5766/commits/6d8d90501764606634fb73514e67049562048ea3\">my commit</a> was <code>for &lt;pat&gt; [&lt;occs&gt;] { &lt;tacs...&gt; }</code> becomes <code>conv =&gt; pattern (occs := &lt;occs&gt;) &lt;pat&gt;; &lt;tacs...&gt;</code><br>\nimo this would be easier if <code>pattern</code> (likewise <code>arg</code>, etc) would only change the <code>conv</code> view for its first argument<br>\nbut i'm unsure if this is a deliberate design decision for lean4 conv.</p>",
        "id": 373776837,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688934382
    },
    {
        "content": "<p>What do you mean \"for its first argument\"? I thought Lean 4's conv works basically the same way as the Lean 3 one, but individual <code>conv</code> tactics might behave differently.</p>",
        "id": 373777034,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688934514
    },
    {
        "content": "<p>this is specifically about how <code>for</code> in lean3 \"zooms out\" after executing the next tactic, but <code>pattern</code> does not</p>",
        "id": 373777439,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688934745
    },
    {
        "content": "<p>It's not that <code>for</code> is zooming out, it's that it's running its tactic block in a sub-<code>conv</code> context. It's basically needing to do <code>conv =&gt; pattern (occs := &lt;occs&gt;) &lt;pat&gt;; &lt;tacs...&gt;</code> internally</p>",
        "id": 373777942,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688935047
    },
    {
        "content": "<p>So, it's not that the Lean 4 <code>conv</code> is designed differently, but rather there's no <code>for</code>-like <code>conv</code> tactic yet</p>",
        "id": 373778097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688935129
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5786\">#5786</a> is for adding it to mathlib. that's more expedient than trying to get it into core lean, but maybe it should find its way there at some point</p>",
        "id": 373779775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688936189
    },
    {
        "content": "<p>We now have a ported version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Introduction.html\">the conv introduction</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html\">a conv guide</a>. You can find these in the mathlib docs in the docs folder in the left sidebar.</p>",
        "id": 376312949,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689679664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, we should delete <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a> and replace the link to it from the community website sidebar with the link to your new doc!</p>",
        "id": 376321917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689681556
    },
    {
        "content": "<blockquote>\n<p>For example, <code>enter [1,@2,x,3]</code> is the same as <code>arg 1, arg @2, ext x, arg 3</code>.</p>\n</blockquote>\n<p>The list of tactics should be separated by semicolons</p>",
        "id": 376375878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689691339
    },
    {
        "content": "<p>the link to the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Docs/Conv/Guide.html\"><code>conv</code> guide</a> at the end of the introduction is broken</p>",
        "id": 376376960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689691553
    },
    {
        "content": "<blockquote>\n<p>The syntax for the <code>conv</code> tactic is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"conv\"</span> <span class=\"o\">(</span><span class=\"s2\">\"at\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"in\"</span> <span class=\"o\">(</span><span class=\"s2\">\"(occs :=\"</span> <span class=\"o\">(</span><span class=\"s2\">\"*\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">num</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"n\">convSeq</span>\n</code></pre></div>\n</blockquote>\n<p>I think we also need a guide for reading syntax declarations, since I think we will want to use them a lot in documentation</p>",
        "id": 376377738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689691712
    },
    {
        "content": "<p>Yeah, and this is mildly simplified from the actual one (strip off <code>&amp;</code>, remove pp-directing-whitespace from strings, merge adjacent strings when sensible (like <code>\"(occs :=\")</code>, inline some <code>syntax</code> definitions, strip off <code>atomic(...)</code>), so that guide could explain these conventions too</p>",
        "id": 376383311,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689692750
    },
    {
        "content": "<p>FYI, if you actually use <code>\"(occs :=\"</code> in a syntax then it won't match <code>(occs  :=</code></p>",
        "id": 376383991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689692874
    },
    {
        "content": "<p>so you usually want to always split into tokens</p>",
        "id": 376384133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689692894
    },
    {
        "content": "<p>Yeah, I'm aware, but I thought it was clearer like this for documentation.</p>",
        "id": 376385144,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689693078
    },
    {
        "content": "<p>Do the syntax tables have any sort of machine-readable representation? It'd be nice if we could generate some quasi-EBNF to document all the available <code>term</code> and <code>tactic</code> syntax.</p>",
        "id": 376387505,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689693548
    },
    {
        "content": "<p>Unfortunately no; My best attempt is in the <code>#help</code> command but it can only show the initial token</p>",
        "id": 376387954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693640
    },
    {
        "content": "<p>everything after that is stored in closures</p>",
        "id": 376388040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693656
    },
    {
        "content": "<p>Well, there are still more radical things you can do parsing exprs</p>",
        "id": 376388187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693688
    },
    {
        "content": "<p>Is there at least an <code>Expr</code> with something that represents the parsers?</p>",
        "id": 376388202,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689693690
    },
    {
        "content": "<p>yes</p>",
        "id": 376388264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693702
    },
    {
        "content": "<p>it comes in two flavors though, the <code>Parser</code> and <code>ParserDescr</code></p>",
        "id": 376388333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693719
    },
    {
        "content": "<p>(also <code>TrailingParser</code> and <code>TrailingParserDescr</code> but these are basically the same)</p>",
        "id": 376388447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693737
    },
    {
        "content": "<p>so you would need to parse both kinds</p>",
        "id": 376388520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693755
    },
    {
        "content": "<p>and <code>Parser</code> can be arbitrary lean code so you would need to bottom out sometimes</p>",
        "id": 376388715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693791
    },
    {
        "content": "<p>I figure anything we can't explain can just be a link to its definition in the docs</p>",
        "id": 376388794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689693805
    },
    {
        "content": "<p>maybe I'll try my hand at this later</p>",
        "id": 376389092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689693851
    },
    {
        "content": "<p>If it's not made out of <code>&gt;&gt;</code>, <code>&lt;|&gt;</code>, and a handful of other combinators, it's probably not worth interpreting the structure any further</p>",
        "id": 376389102,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689693853
    },
    {
        "content": "<p><code>slice i j</code> needs a (Mathlib) mark in the conv guide</p>",
        "id": 376411493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689698164
    },
    {
        "content": "<p><code>#simp</code> et al should be shown on their own lines, since they are probably more interesting than <code>#conv</code></p>",
        "id": 376412420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689698355
    },
    {
        "content": "<p>I figured for those that there would be another guide for mathlib commands. It seems like an implementation detail that these have anything to do with <code>conv</code></p>",
        "id": 376412836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689698446
    },
    {
        "content": "<p>Oh I suppose that's true</p>",
        "id": 376416457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689699186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/conv.20documentation/near/376388187\">said</a>:</p>\n<blockquote>\n<p>Well, there are still more radical things you can do parsing exprs</p>\n</blockquote>\n<p>Fyi, I am currently in the process of completing a library that does just this.</p>",
        "id": 376523207,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689737338
    },
    {
        "content": "<p>Currently, it can compile/transpile the parsers/syntaxes of the entire Lean grammar. The main TODOs are adding configuration options and debugging the test use case (which are parsers for the Lean grammar that does not need an <code>Environment</code> to parse Lean).</p>",
        "id": 376523366,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689737428
    }
]