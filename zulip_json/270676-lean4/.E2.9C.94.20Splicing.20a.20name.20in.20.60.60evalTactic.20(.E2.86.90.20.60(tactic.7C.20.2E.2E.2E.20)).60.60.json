[
    {
        "content": "<p>Hey, I'm trying to translate from Coq to Lean 4 the <code>pick fresh x</code> tactic from the POPLmark challenge.<br>\nSo far I have this snippet which fails at call site with error \"unknown identifier 'xFr<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>'\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"pick_fresh \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabType</span> <span class=\"n\">β</span>\n    <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Atom</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">gatherAtoms</span> <span class=\"n\">β</span>\n    <span class=\"k\">let</span> <span class=\"n\">xFr</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mvarId.assert</span> <span class=\"n\">xFr</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Atom</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"bp\">$</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Atom.freshFor</span> <span class=\"bp\">$</span><span class=\"n\">L</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdNew.intro1P</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"n\">xFr</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The <code>xFr</code> name is defined as an anonymous name and what I'd like to do is splice it into the <code> `(tactic| ...)</code>, how can I achieve this? I tried doing <code>$xFr</code> but this fails with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">xFr.raw</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">xFr</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Name</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.casesTarget</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 364262590,
        "sender_full_name": "felko",
        "timestamp": 1686140909
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 364266311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686141769
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"anon_let\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">--            ^ unused variable `x`</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span>\n  <span class=\"c1\">--  ^ unused variable `a`</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">anon_let</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- ^^^^^^^ unknown identifier 'x✝'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n</code></pre></div>\n<p>there you go, I'm afraid I'm going to be replied with #xyproblem with this example though</p>",
        "id": 364267959,
        "sender_full_name": "felko",
        "timestamp": 1686142142
    },
    {
        "content": "<p>Can you please include the necessary <code>import</code> and <code>open</code> statements?</p>",
        "id": 364268245,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686142203
    },
    {
        "content": "<p>To first approximation you definitely want to be using <code>$a</code> and <code>$x</code> in the quotation, otherwise the variables are unused as it points out</p>",
        "id": 364268280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686142210
    },
    {
        "content": "<p>but you probably don't want to use literally <code>Name.anonymous</code>, that is an identifier with <em>no name</em>, which has special status and will be rejected or printed as <code>[anonymous]</code> by lean code</p>",
        "id": 364268567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686142288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Splicing.20a.20name.20in.20.60.60evalTactic.20.28.E2.86.90.20.60.28tactic.7C.20.2E.2E.2E.20.29.29.60.60/near/364268280\">said</a>:</p>\n<blockquote>\n<p>To first approximation you definitely want to be using <code>$a</code> and <code>$x</code> in the quotation, otherwise the variables are unused as it points out</p>\n</blockquote>\n<p>Yeah doing $x will work since <code>x : TSyntax `ident</code> but it won't work for a because a : Name so I can't splice it<br>\nI guess my question can be reduced to: How do I convert a <code>Name</code> into a <code>TSyntax `ident</code>.</p>",
        "id": 364268662,
        "sender_full_name": "felko",
        "timestamp": 1686142314
    },
    {
        "content": "<p>if you just use <code>a</code> then it will be a hygienic fresh variable, so maybe that's already good enough?</p>",
        "id": 364268925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686142364
    },
    {
        "content": "<p>but also <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> at floris's comment</p>",
        "id": 364268973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686142378
    },
    {
        "content": "<p>this is still not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 364269024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686142389
    },
    {
        "content": "<p>If you want to use a fresh identifier both as a <code>Name</code> and in a quotation, the best way usually is <code>mkFreshUserName</code> + <code>mkIdent</code></p>",
        "id": 364270283,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686142664
    },
    {
        "content": "<p>Sorry it's quite hard to identify  what's important and what's not so I'm not sure what to include in the MWE, I just started learning Lean a few days ago.<br>\nHere's the most minimal exampe I could come up with after Sebastian's comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idk</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"cases_idk\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">xFrIdent</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">xFr</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.assert</span> <span class=\"bp\">`</span><span class=\"n\">xFr</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">idk</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdNew.intro1P</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"n\">xFrIdent</span><span class=\"o\">))</span>\n    <span class=\"c\">/-</span><span class=\"cm\">                             ^^^^^^^^</span>\n<span class=\"cm\">    application type mismatch</span>\n<span class=\"cm\">      xFrIdent.raw</span>\n<span class=\"cm\">    argument</span>\n<span class=\"cm\">      xFrIdent</span>\n<span class=\"cm\">    has type</span>\n<span class=\"cm\">      TSyntax `ident : Type</span>\n<span class=\"cm\">    but is expected to have type</span>\n<span class=\"cm\">      TSyntax `Lean.Parser.Tactic.casesTarget : Type</span>\n<span class=\"cm\">    -/</span>\n</code></pre></div>\n<p><code>Lean.Parser.Tactic.casesTarget</code> is defined as <code>syntax casesTarget := atomic(ident \" : \")? term</code>.<br>\nHow do I lift a <code>TSyntax `ident</code> into a <code>TSyntax `casesTarget</code>?</p>",
        "id": 364275109,
        "sender_full_name": "felko",
        "timestamp": 1686143627
    },
    {
        "content": "<p>Try <code>$xFrIdent:ident</code>. Whenever you get weird errors, annotating each <code>$x</code> with its syntax category is a good start.</p>",
        "id": 364276990,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1686144047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Splicing.20a.20name.20in.20.60.60evalTactic.20.28.E2.86.90.20.60.28tactic.7C.20.2E.2E.2E.20.29.29.60.60/near/364276990\">said</a>:</p>\n<blockquote>\n<p>Try <code>$xFrIdent:ident</code>. Whenever you get weird errors, annotating each <code>$x</code> with its syntax category is a good start.</p>\n</blockquote>\n<p>Thanks, it worked!</p>",
        "id": 364277483,
        "sender_full_name": "felko",
        "timestamp": 1686144150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621919\">felko</span> has marked this topic as resolved.</p>",
        "id": 364278188,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686144278
    },
    {
        "content": "<p>this version of the tactic can probably be reduced to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"cases_idk\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">idk</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 364278703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686144381
    },
    {
        "content": "<p>(I notice that the identifier <code>x</code> is unused in your  example)</p>",
        "id": 364278848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686144414
    },
    {
        "content": "<p>the more realistic version of the tactic has something going on with <code>L</code>, I don't know what those other functions are doing</p>",
        "id": 364279046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686144456
    },
    {
        "content": "<p>Yes the actual code generates the list of all variables in context, and a fresh variable together with a proof that it's actually fresh (i.e. distinct from all other variables in context).</p>",
        "id": 364279810,
        "sender_full_name": "felko",
        "timestamp": 1686144621
    },
    {
        "content": "<p>This is meant to be used in proofs that use locally-nameless<br>\n<a href=\"https://www.cis.upenn.edu/~plclub/popl08-tutorial/code/coqdoc/Fsub_LetSum_Infrastructure.html\">https://www.cis.upenn.edu/~plclub/popl08-tutorial/code/coqdoc/Fsub_LetSum_Infrastructure.html</a></p>",
        "id": 364280025,
        "sender_full_name": "felko",
        "timestamp": 1686144668
    },
    {
        "content": "<p>I think this is the MWE for your first post:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Atom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">gatherAtoms</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Atom</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Atom.freshFor</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Atom</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Atom</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"pick_fresh \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">β</span>\n    <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Atom</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">gatherAtoms</span> <span class=\"n\">β</span>\n    <span class=\"k\">let</span> <span class=\"n\">xFr</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.assert</span> <span class=\"n\">xFr</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Atom</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"bp\">$</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Atom.freshFor</span> <span class=\"bp\">$</span><span class=\"n\">L</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdNew.intro1P</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"n\">xFr</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 364280910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686144841
    },
    {
        "content": "<p>Ah I didn't think about just putting the definitions with <code>sorry</code>s, will do next time, thanks!</p>",
        "id": 364281449,
        "sender_full_name": "felko",
        "timestamp": 1686144944
    },
    {
        "content": "<p>in which case I think you could do something like this, if I understand the spec of the tactic correctly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"pick_fresh \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">β</span>\n    <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Atom</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">gatherAtoms</span> <span class=\"n\">β</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Atom.freshFor</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">L.toSyntax</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 364282231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686145099
    },
    {
        "content": "<p>wouldn't you normally want to be able to refer to <code>hx</code> as well?</p>",
        "id": 364282388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686145130
    },
    {
        "content": "<p>with this implementation it will be in the context but not accessible except by things like <code>assumption</code> or <code>rename_i</code></p>",
        "id": 364282505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686145158
    },
    {
        "content": "<p>Yes, I was planning on using <code>rename_i</code> after the cases but your solution seems cleaner</p>",
        "id": 364282634,
        "sender_full_name": "felko",
        "timestamp": 1686145190
    },
    {
        "content": "<p>to pass in an optional name for the hypothesis you could do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"pick_fresh \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\" with \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">pick_fresh</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">β</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">hx</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">β</span>\n    <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Atom</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">gatherAtoms</span> <span class=\"n\">β</span>\n    <span class=\"k\">let</span> <span class=\"n\">hx</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">hx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Atom.freshFor</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">L.toSyntax</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 364283759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686145423
    },
    {
        "content": "<p>What's the advantage of defining a <code>syntax</code> beforehand then doing <code>elab_rules</code> compared to just having a single <code>elab</code> command?</p>",
        "id": 364284339,
        "sender_full_name": "felko",
        "timestamp": 1686145530
    },
    {
        "content": "<p><code>elab</code> is a shorthand syntax for <code>syntax</code> + <code>elab_rules</code>, but it doesn't handle more complex combinators: if you used <code>hx:(\" with \" ident)?</code> in an <code>elab</code> it would have the type <code>TSyntax Name.anonymous</code> and it would not actually capture the ident of interest. (You can get at the ident with <code>.raw[1]</code> but it's not very clear code)</p>",
        "id": 364284982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686145655
    },
    {
        "content": "<p>ideally we would be able to write <code>(\" with \" hx:ident)?</code> but this isn't implemented</p>",
        "id": 364285163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686145683
    },
    {
        "content": "<p>I see, thanks a lot</p>",
        "id": 364286139,
        "sender_full_name": "felko",
        "timestamp": 1686145877
    }
]