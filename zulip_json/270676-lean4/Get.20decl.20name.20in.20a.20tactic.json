[
    {
        "content": "<p>How does one obtain the declaration name inside of a tactic? I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">decl_name</span><span class=\"bp\">%</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"c1\">-- Prints `_aux_SpecSorry_test___elabRules_tacticTest_1`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I want <code>test</code> to print <code>foo</code> instead of the tactic's underlying name.</p>",
        "id": 349998069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681490315
    },
    {
        "content": "<p>I tried this as well, with the same result</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">ctx.elaborator</span>\n</code></pre></div>",
        "id": 349998573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681490470
    },
    {
        "content": "<p>Maybe I should mention that I don't know whether this is possible.</p>",
        "id": 350000698,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681491034
    },
    {
        "content": "<p>You can. I took the definition of <code>decl_name%</code> to make this, hence the lingering error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">declName</span> <span class=\"bp\">←</span> <span class=\"n\">Term.getDeclName</span><span class=\"bp\">?</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid `decl_name%` macro, the declaration name is not available\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">declName</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"c1\">-- Prints `foo`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 350002093,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681491425
    },
    {
        "content": "<p>Oh great, thanks!</p>",
        "id": 350002245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681491448
    }
]