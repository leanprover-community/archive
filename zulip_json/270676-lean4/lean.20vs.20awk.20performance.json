[
    {
        "content": "<p>Dear All,</p>\n<p>first of all, I hope that this is on-topic!</p>\n<p>While trying to learn some programming in Lean4, I started to play around with <a href=\"https://adventofcode.com/2019/day/6\">Advent of Code 2019, Day 6</a>.  The task is simple: you are essentially given the list of edges <code>(A, B)</code> in a rooted tree and you want to find the sum of the lengths of all the paths that start somewhere in the tree and end in the root of the tree.</p>\n<p>I coded this in both Lean4 and using awk in a very naive way in both cases.  The performance of awk is, of course, amazing.  However, my Lean4 implementation is clearly terrible.</p>\n<p>How would you implement this in a more performant way?</p>\n<p>Thanks!</p>\n<p>My Lean4 implementation (<a href=\"https://gist.github.com/adomani/31e722f20f793912662d4e48bae8192a\">working gist</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.sum</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">as.sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"a very long list of edges looking like</span>\n<span class=\"s2\">A)B</span>\n<span class=\"s2\">C)D</span>\n<span class=\"s2\">E)F</span>\n<span class=\"s2\">...\"</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"k\">let</span> <span class=\"n\">dat</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">data.splitOn</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.splitOn</span> <span class=\"s2\">\")\"</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"n\">while</span> <span class=\"n\">T</span> <span class=\"bp\">!=</span> <span class=\"s2\">\"COM\"</span> <span class=\"k\">do</span>\n      <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n      <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dat.lookup</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"n\">return</span> <span class=\"n\">n</span>\n  <span class=\"o\">(</span><span class=\"n\">dat.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>\n<p>My awk implementation (I stored the input in a file called <code>i6</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>awk<span class=\"w\"> </span>-F<span class=\"s2\">\")\"</span><span class=\"w\"> </span><span class=\"s1\">'{ par[$2]=$1 }</span>\n<span class=\"s1\">  END { for (tgt in par)</span>\n<span class=\"s1\">        { while (tgt != \"COM\")</span>\n<span class=\"s1\">          { con++</span>\n<span class=\"s1\">            tgt=par[tgt] } }</span>\n<span class=\"s1\">        print con }'</span><span class=\"w\"> </span>i6\n</code></pre></div>",
        "id": 326524680,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675843321
    },
    {
        "content": "<p>(Ideally, I would prefer to avoid changing the structure of the program too much, since I am trying to learn how to optimize the various steps, however, I welcome any form of feedback!  I do have a quicker implementation that just computes the distances from the leaves of the tree and that gets the answer more quickly.)</p>",
        "id": 326525129,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675843492
    },
    {
        "content": "<p>Without profiling your code I'd say an obvious thing to do would be to use a single fold operation for what you are trying to achieve. Since it would be tail recursive and you safe iterating the list once (afaik we dont have list fusion yet) </p>\n<p>Also maybe you'll get better performance if you use a better data structure compared to a list? At least an array should make it better ad well I guess. And in general if you want to know what makes things slow you can always profile.</p>\n<p>Also you want to run the compiled version f lean with a main function instead of eval for performance our interpreter is not optimized for perf</p>",
        "id": 326534866,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675847078
    },
    {
        "content": "<p>Henrik, thank you very much for your comments: they are already very helpful to guide me into what could be improved!  When you say \"profiling\" is that something that I can get Lean to do for me, to some extent?  I know about the <code>set_option profiler true</code> command, but, when I am lucky, it gives me one or two times and not much more insight...</p>",
        "id": 326569641,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675857481
    },
    {
        "content": "<p>You can use perf + e.g. hotspot to profile a lean binary. There is an explanation for how to do that in the lean 4 guide.</p>",
        "id": 326570754,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675857832
    },
    {
        "content": "<p>My first suggestion would be to use a hashmap for dat.</p>",
        "id": 326650072,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675878758
    },
    {
        "content": "<p>List.sum can and should be made tail recursive, but I don't think that's the biggest issue here.</p>",
        "id": 326650243,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675878821
    },
    {
        "content": "<p>I know you don't want any suggestions on algorithmic improvements, but that's going to be the biggest win here.  If you make f recursive and memoize the output, you should be able to make the whole thing run in linear time.</p>",
        "id": 326651049,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675879023
    },
    {
        "content": "<p>Thank you both for your comments!</p>\n<p>I realize that this is a very specific question, but I am learning from your replies!</p>",
        "id": 326687606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675891397
    },
    {
        "content": "<p>Gabriel, when you say that <code>List.sum</code> should be made tail recursive is this simply changing the order of <code>a + as.sum</code> to <code>as.sum + a</code>?</p>",
        "id": 326687616,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675891403
    },
    {
        "content": "<p>Also, I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">dat</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"COM\"</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">n</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">dat</span> <span class=\"o\">(</span><span class=\"n\">dat.lookup</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"k\">let</span> <span class=\"n\">dat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">data.splitOn</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">String.splitOn</span> <span class=\"n\">x</span> <span class=\"s2\">\")\"</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dat.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">dat</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>\n<p>which I think makes <code>f</code> recursive, although I could not notice an actual performance gain.</p>",
        "id": 326687747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675891459
    },
    {
        "content": "<p>What mostly prompted my question is that my Lean implementation takes approx 20-30 seconds, while I get</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">time</span><span class=\"w\"> </span>awk<span class=\"w\"> </span>...\nreal<span class=\"w\">    </span>0m0.030s\nuser<span class=\"w\">    </span>0m0.027s\nsys<span class=\"w\"> </span>0m0.000s\n</code></pre></div>\n<p>Of course I realize that this is not a fair comparison.  Anyway, as I said, this has been helpful for my understanding!</p>",
        "id": 326688107,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675891607
    },
    {
        "content": "<p>No you'll have to make an accumulator argument to make it tail recursive. That's why I said a fold should help since those are in fact tail recursive.</p>\n<p>I also wouldnt expect any performance gain from the thing you are doing above since again you are using the interpreter which to my knowledge is not smart enough to exploit things like tail recursion. Again if you want it to be fast, compile it.</p>",
        "id": 326691296,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675893002
    },
    {
        "content": "<blockquote>\n<p>interpreter which to my knowledge is not smart enough to exploit things like tail recursion.</p>\n</blockquote>\n<p>The interpreter does tail-recursion just fine. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 326693178,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675893737
    },
    {
        "content": "<p>Oh really? That's pretty cool then.</p>",
        "id": 326693274,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675893774
    },
    {
        "content": "<blockquote>\n<p>which I think makes f recursive, although I could not notice an actual performance gain.</p>\n</blockquote>\n<p>The important part is to store the result as well, so that <code>f</code> becomes <code>if cache contains T then return cached value else return f dat[T] + 1</code>.</p>",
        "id": 326693524,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675893848
    },
    {
        "content": "<p>But your awk version doesn't do that either so let me reiterate my first suggestion: use a hashmap for dat.</p>",
        "id": 326693586,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675893872
    },
    {
        "content": "<blockquote>\n<p>Oh really? That's pretty cool then.</p>\n</blockquote>\n<p>Yes, TCO is a critical optimization.  Without it, you can easily get stack overflows.</p>",
        "id": 326693766,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675893944
    },
    {
        "content": "<p>I have been trying to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.HashMap#doc\">docs4#Std.HashMap</a>, but I must be doing it wrong.  Here is my attempt.</p>",
        "id": 326693960,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675894008
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">dat</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"COM\"</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">n</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">dat</span> <span class=\"o\">(</span><span class=\"n\">dat.find</span><span class=\"bp\">!</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dat</span> <span class=\"o\">:=</span> <span class=\"n\">Std.HashMap.ofList</span> <span class=\"o\">((((</span><span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">input</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dropRight</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitOn</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">String.splitOn</span> <span class=\"n\">x</span> <span class=\"s2\">\")\"</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"n\">dat.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">dat</span> <span class=\"n\">s</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>However, this seems to have entered an unending loop.</p>",
        "id": 326694057,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675894044
    },
    {
        "content": "<p>(To be honest, I do not really understand the <code>fold</code>, but I tried it, since I could not find a <code>map</code>, nor a <code>for</code> for <code>HashMap</code>... <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span>)</p>",
        "id": 326694293,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675894133
    },
    {
        "content": "<p>Also, I realize that this is something that you are probably very used to, but to me, the fact that using Lists, Arrays or HashMaps can have significant impact on performance is eye-opening.  This is why I wanted to avoid changing the structure of the algorithm, to get a better understanding of what can be achieved by not figuring out a quicker way to get to the answer, but simply using better the available tools.</p>",
        "id": 326694765,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675894333
    },
    {
        "content": "<p>With a different algorithm, I can get to the answer in approx 7secs, so this is not the point (for me).  Besides, the fastest answer so far is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">253104</span>\n</code></pre></div>\n<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 326695066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675894473
    },
    {
        "content": "<blockquote>\n<p>the fact that using Lists, Arrays or HashMaps can have significant impact on performance is eye-opening.</p>\n</blockquote>\n<p>Indeed, I didn't even realize how obvious this was to me.  The average runtime of <code>List.lookup</code> is <code>O(n)</code> where <code>n</code> is the number of entries in <code>dat</code>, while <code>HashMap.find!</code> is <code>O(1)</code>.  So you're essentially speeding up your program by the number of entries if you switch to a hashmap.</p>",
        "id": 326696360,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675894968
    },
    {
        "content": "<p>(The performance of <code>List.lookup</code> is even worse since you need to check string equality for half of the entries (on average), while the hashmap just has to compare the hashes.  I don't know how long <code>T</code> is in practice, but that might make a significant difference as well.)</p>",
        "id": 326696511,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675895037
    },
    {
        "content": "<p>In this example, the strings <code>T</code> are all 3 character long, so I do not expect this to be too significant.  The longest distance from a leaf to the root is 320, I think and there are approx 140 leaves apparently randomly distant from the root.</p>",
        "id": 326697336,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675895360
    },
    {
        "content": "<p>Anyway, I am really glad that I asked the question and that it has not been derailed to suggestions to change the algorithm, but has been focused on \"use this data structure instead\"!</p>",
        "id": 326697580,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675895437
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">COM</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"mi\">9</span><span class=\"n\">JW</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">X5</span>\n  <span class=\"mi\">3</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">P8</span>\n  <span class=\"mi\">4</span> <span class=\"bp\">|</span> <span class=\"mi\">457</span>\n  <span class=\"mi\">5</span> <span class=\"bp\">|</span> <span class=\"n\">VX9</span>\n  <span class=\"mi\">6</span> <span class=\"bp\">|</span> <span class=\"n\">HT3</span>\n  <span class=\"mi\">7</span> <span class=\"bp\">|</span> <span class=\"n\">VC8</span>\n  <span class=\"mi\">8</span> <span class=\"bp\">|</span> <span class=\"n\">WL3</span>\n  <span class=\"mi\">9</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">RL</span>\n <span class=\"mi\">10</span> <span class=\"bp\">|</span> <span class=\"n\">X5D</span>\n <span class=\"mi\">11</span> <span class=\"bp\">|</span> <span class=\"n\">T9T</span>\n <span class=\"mi\">12</span> <span class=\"bp\">|</span> <span class=\"n\">XH2</span>\n <span class=\"mi\">13</span> <span class=\"bp\">|</span> <span class=\"mi\">6</span><span class=\"n\">MC</span>\n <span class=\"mi\">14</span> <span class=\"bp\">|</span> <span class=\"n\">PYF</span>\n <span class=\"mi\">15</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">TH</span>\n <span class=\"mi\">16</span> <span class=\"bp\">|</span> <span class=\"n\">T88</span>\n <span class=\"mi\">17</span> <span class=\"bp\">|</span> <span class=\"mi\">31</span><span class=\"n\">H</span>\n <span class=\"mi\">18</span> <span class=\"bp\">|</span> <span class=\"n\">DBZ</span>\n <span class=\"mi\">19</span> <span class=\"bp\">|</span> <span class=\"mi\">9</span><span class=\"n\">TV</span> <span class=\"n\">SVG</span>\n <span class=\"mi\">20</span> <span class=\"bp\">|</span> <span class=\"n\">XMM</span> <span class=\"mi\">4</span><span class=\"n\">Q8</span>\n <span class=\"mi\">21</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"n\">X8</span> <span class=\"n\">KST</span>\n <span class=\"mi\">22</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">Z3</span> <span class=\"n\">KYJ</span>\n <span class=\"mi\">23</span> <span class=\"bp\">|</span> <span class=\"n\">QV7</span> <span class=\"mi\">428</span>\n <span class=\"mi\">24</span> <span class=\"bp\">|</span> <span class=\"n\">S9K</span> <span class=\"mi\">57</span><span class=\"n\">B</span>\n <span class=\"mi\">25</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">S2</span> <span class=\"n\">PKN</span>\n <span class=\"mi\">26</span> <span class=\"bp\">|</span> <span class=\"n\">LPB</span>\n <span class=\"mi\">27</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span><span class=\"n\">GV</span>\n <span class=\"mi\">28</span> <span class=\"bp\">|</span> <span class=\"n\">J2S</span>\n <span class=\"mi\">29</span> <span class=\"bp\">|</span> <span class=\"n\">QM6</span>\n <span class=\"mi\">30</span> <span class=\"bp\">|</span> <span class=\"n\">GXD</span>\n <span class=\"mi\">31</span> <span class=\"bp\">|</span> <span class=\"n\">SX1</span>\n <span class=\"mi\">32</span> <span class=\"bp\">|</span> <span class=\"n\">VLD</span>\n <span class=\"mi\">33</span> <span class=\"bp\">|</span> <span class=\"n\">DWP</span>\n <span class=\"mi\">34</span> <span class=\"bp\">|</span> <span class=\"n\">TBM</span> <span class=\"n\">RGD</span>\n <span class=\"mi\">35</span> <span class=\"bp\">|</span> <span class=\"n\">RQZ</span> <span class=\"n\">G87</span>\n <span class=\"mi\">36</span> <span class=\"bp\">|</span> <span class=\"n\">L6C</span> <span class=\"n\">N4Z</span>\n <span class=\"mi\">37</span> <span class=\"bp\">|</span> <span class=\"n\">HPZ</span> <span class=\"mi\">3</span><span class=\"n\">H9</span> <span class=\"n\">Q72</span> <span class=\"n\">C1W</span>\n <span class=\"mi\">38</span> <span class=\"bp\">|</span> <span class=\"mi\">41</span><span class=\"n\">Z</span> <span class=\"mi\">8</span><span class=\"n\">XK</span> <span class=\"mi\">8</span><span class=\"n\">LJ</span> <span class=\"n\">CPW</span>\n <span class=\"mi\">39</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">TL</span> <span class=\"n\">YB3</span> <span class=\"mi\">66</span><span class=\"n\">X</span> <span class=\"n\">CMD</span> <span class=\"n\">S2Z</span>\n <span class=\"mi\">40</span> <span class=\"bp\">|</span> <span class=\"n\">L65</span> <span class=\"n\">NHG</span> <span class=\"n\">HLF</span> <span class=\"n\">F31</span> <span class=\"n\">N5Y</span> <span class=\"n\">F2J</span> <span class=\"mi\">5</span><span class=\"n\">MP</span> <span class=\"n\">J3X</span>\n <span class=\"mi\">41</span> <span class=\"bp\">|</span> <span class=\"n\">H6Y</span> <span class=\"n\">Z2R</span> <span class=\"n\">Y91</span> <span class=\"n\">YLQ</span> <span class=\"mi\">5</span><span class=\"n\">V2</span> <span class=\"n\">QSH</span> <span class=\"n\">BNN</span> <span class=\"n\">HPK</span> <span class=\"n\">BCY</span> <span class=\"n\">LN2</span>\n <span class=\"mi\">42</span> <span class=\"bp\">|</span> <span class=\"n\">DZW</span> <span class=\"n\">GTJ</span> <span class=\"n\">GYJ</span> <span class=\"n\">V8J</span> <span class=\"mi\">6</span><span class=\"n\">QF</span> <span class=\"n\">TKH</span> <span class=\"n\">B8G</span> <span class=\"mi\">95</span><span class=\"n\">G</span> <span class=\"mi\">7</span><span class=\"n\">V4</span>\n <span class=\"mi\">43</span> <span class=\"bp\">|</span> <span class=\"n\">TBV</span> <span class=\"n\">HZ1</span> <span class=\"n\">D88</span> <span class=\"n\">RFH</span> <span class=\"n\">VCF</span> <span class=\"n\">R8M</span> <span class=\"n\">LBM</span> <span class=\"n\">PXF</span> <span class=\"n\">B3V</span> <span class=\"n\">HVX</span>\n <span class=\"mi\">44</span> <span class=\"bp\">|</span> <span class=\"n\">TLY</span> <span class=\"n\">KYL</span> <span class=\"n\">TGY</span> <span class=\"n\">WL9</span> <span class=\"n\">VQX</span> <span class=\"n\">JDL</span> <span class=\"mi\">39</span><span class=\"n\">X</span> <span class=\"n\">WNN</span> <span class=\"n\">SPM</span> <span class=\"n\">J82</span>\n <span class=\"mi\">45</span> <span class=\"bp\">|</span> <span class=\"n\">R1J</span> <span class=\"mi\">1</span><span class=\"n\">XD</span> <span class=\"n\">LD5</span> <span class=\"n\">JNX</span> <span class=\"mi\">1</span><span class=\"n\">R2</span> <span class=\"mi\">5</span><span class=\"n\">TJ</span> <span class=\"n\">CYM</span> <span class=\"n\">R4D</span> <span class=\"n\">KGB</span> <span class=\"n\">XTM</span> <span class=\"mi\">6</span><span class=\"n\">ND</span>\n <span class=\"mi\">46</span> <span class=\"bp\">|</span> <span class=\"n\">H9J</span> <span class=\"mi\">1</span><span class=\"n\">J7</span> <span class=\"n\">T4F</span> <span class=\"n\">BCD</span> <span class=\"n\">CH2</span> <span class=\"n\">NX9</span> <span class=\"n\">PZQ</span> <span class=\"n\">XX9</span>\n <span class=\"mi\">47</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span><span class=\"n\">SC</span> <span class=\"mi\">1</span><span class=\"n\">WP</span> <span class=\"mi\">24</span><span class=\"n\">B</span> <span class=\"n\">BDF</span> <span class=\"n\">TYD</span> <span class=\"mi\">3</span><span class=\"n\">RP</span> <span class=\"mi\">21</span><span class=\"n\">X</span> <span class=\"mi\">594</span>\n <span class=\"mi\">48</span> <span class=\"bp\">|</span> <span class=\"n\">YV5</span> <span class=\"n\">Z9V</span> <span class=\"n\">NB8</span> <span class=\"mi\">9</span><span class=\"n\">CF</span> <span class=\"n\">X81</span> <span class=\"n\">MMK</span> <span class=\"n\">V93</span> <span class=\"n\">NBJ</span>\n <span class=\"mi\">49</span> <span class=\"bp\">|</span> <span class=\"n\">VT7</span> <span class=\"mi\">6</span><span class=\"n\">L6</span> <span class=\"n\">DY5</span> <span class=\"n\">HBJ</span> <span class=\"mi\">65</span><span class=\"n\">D</span> <span class=\"n\">ZGB</span> <span class=\"n\">W31</span> <span class=\"n\">L2R</span> <span class=\"n\">V9K</span> <span class=\"n\">TS3</span> <span class=\"n\">PS1</span>\n <span class=\"mi\">50</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">M2</span> <span class=\"n\">HK4</span> <span class=\"n\">BBY</span> <span class=\"n\">GBM</span> <span class=\"n\">B1X</span> <span class=\"n\">N6Z</span> <span class=\"n\">G1G</span> <span class=\"mi\">6</span><span class=\"n\">XM</span> <span class=\"n\">Q2X</span> <span class=\"n\">Z1D</span> <span class=\"n\">J6C</span>\n <span class=\"mi\">51</span> <span class=\"bp\">|</span> <span class=\"n\">F95</span> <span class=\"mi\">7</span><span class=\"n\">TT</span> <span class=\"mi\">4</span><span class=\"n\">TN</span> <span class=\"n\">H8P</span> <span class=\"mi\">9</span><span class=\"n\">GH</span> <span class=\"n\">Z22</span> <span class=\"n\">FFY</span> <span class=\"n\">CBG</span> <span class=\"n\">T6G</span> <span class=\"mi\">27</span><span class=\"n\">G</span> <span class=\"n\">SJR</span>\n <span class=\"mi\">52</span> <span class=\"bp\">|</span> <span class=\"n\">FFZ</span> <span class=\"n\">TSG</span> <span class=\"n\">SKL</span> <span class=\"mi\">22</span><span class=\"n\">K</span> <span class=\"n\">G6S</span> <span class=\"n\">VLG</span> <span class=\"mi\">95</span><span class=\"n\">K</span> <span class=\"n\">LGZ</span> <span class=\"mi\">44</span><span class=\"n\">D</span> <span class=\"n\">NZK</span>\n <span class=\"mi\">53</span> <span class=\"bp\">|</span> <span class=\"n\">HJ7</span> <span class=\"n\">FF8</span> <span class=\"n\">BSR</span> <span class=\"n\">W1W</span> <span class=\"mi\">6</span><span class=\"n\">G5</span> <span class=\"n\">N1C</span> <span class=\"mi\">1</span><span class=\"n\">T3</span> <span class=\"n\">P4Q</span> <span class=\"n\">XV1</span>\n <span class=\"mi\">54</span> <span class=\"bp\">|</span> <span class=\"mi\">513</span> <span class=\"n\">FZS</span> <span class=\"mi\">9</span><span class=\"n\">X7</span> <span class=\"mi\">7</span><span class=\"n\">JW</span> <span class=\"mi\">2</span><span class=\"n\">QZ</span>\n <span class=\"mi\">55</span> <span class=\"bp\">|</span> <span class=\"n\">RFZ</span> <span class=\"n\">DVD</span> <span class=\"n\">Q21</span> <span class=\"n\">GXW</span> <span class=\"n\">R7H</span> <span class=\"n\">SDS</span> <span class=\"n\">LR5</span>\n <span class=\"mi\">56</span> <span class=\"bp\">|</span> <span class=\"n\">YC9</span> <span class=\"mi\">5</span><span class=\"n\">TT</span> <span class=\"n\">QYJ</span> <span class=\"n\">GMR</span> <span class=\"n\">T3V</span> <span class=\"n\">J2D</span> <span class=\"mi\">47</span><span class=\"n\">Y</span>\n <span class=\"mi\">57</span> <span class=\"bp\">|</span> <span class=\"n\">NSQ</span> <span class=\"n\">Q38</span> <span class=\"n\">Y27</span> <span class=\"mi\">7</span><span class=\"n\">L1</span> <span class=\"mi\">2</span><span class=\"n\">G3</span> <span class=\"mi\">6</span><span class=\"n\">PH</span> <span class=\"mi\">7</span><span class=\"n\">SZ</span>\n <span class=\"mi\">58</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span><span class=\"n\">B3</span> <span class=\"n\">QZK</span> <span class=\"mi\">8</span><span class=\"n\">RX</span> <span class=\"n\">ZS6</span> <span class=\"mi\">5</span><span class=\"n\">R5</span> <span class=\"n\">RR8</span> <span class=\"n\">WKK</span> <span class=\"n\">D6Q</span> <span class=\"mi\">5</span><span class=\"n\">PT</span>\n <span class=\"mi\">59</span> <span class=\"bp\">|</span> <span class=\"n\">T4R</span> <span class=\"mi\">82</span><span class=\"n\">V</span> <span class=\"n\">ZC7</span> <span class=\"mi\">769</span> <span class=\"n\">D8K</span> <span class=\"n\">LXW</span> <span class=\"mi\">8</span><span class=\"n\">LQ</span> <span class=\"n\">CJZ</span>\n <span class=\"mi\">60</span> <span class=\"bp\">|</span> <span class=\"n\">S1T</span> <span class=\"n\">J7T</span> <span class=\"n\">ZDZ</span> <span class=\"mi\">86</span><span class=\"n\">H</span> <span class=\"mi\">2</span><span class=\"n\">CQ</span> <span class=\"n\">D19</span> <span class=\"n\">HBZ</span> <span class=\"mi\">7</span><span class=\"n\">TN</span>\n <span class=\"mi\">61</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">QG</span> <span class=\"mi\">2</span><span class=\"n\">FT</span> <span class=\"n\">PBP</span> <span class=\"n\">P93</span> <span class=\"n\">KYY</span> <span class=\"mi\">1</span><span class=\"n\">X5</span> <span class=\"n\">QX4</span> <span class=\"n\">DYP</span>\n <span class=\"mi\">62</span> <span class=\"bp\">|</span> <span class=\"n\">KMM</span> <span class=\"n\">TLG</span> <span class=\"n\">RZS</span> <span class=\"mi\">47</span><span class=\"n\">P</span> <span class=\"mi\">2</span><span class=\"n\">NX</span> <span class=\"n\">CX3</span> <span class=\"n\">QKM</span> <span class=\"n\">JZQ</span> <span class=\"n\">P2Y</span>\n <span class=\"mi\">63</span> <span class=\"bp\">|</span> <span class=\"n\">X31</span> <span class=\"n\">KZJ</span> <span class=\"mi\">9</span><span class=\"n\">HN</span> <span class=\"n\">H96</span> <span class=\"n\">P2H</span> <span class=\"n\">QHC</span> <span class=\"mi\">81</span><span class=\"n\">D</span> <span class=\"n\">SR1</span> <span class=\"n\">CVW</span>\n <span class=\"mi\">64</span> <span class=\"bp\">|</span> <span class=\"n\">BHR</span> <span class=\"n\">XCF</span> <span class=\"mi\">31</span><span class=\"n\">S</span> <span class=\"n\">TZ2</span> <span class=\"n\">NRL</span> <span class=\"mi\">4</span><span class=\"n\">DZ</span> <span class=\"n\">BX3</span> <span class=\"n\">DWR</span> <span class=\"mi\">41</span><span class=\"n\">B</span>\n <span class=\"mi\">65</span> <span class=\"bp\">|</span> <span class=\"n\">VK9</span> <span class=\"n\">LJG</span> <span class=\"n\">KPQ</span> <span class=\"n\">NY4</span> <span class=\"n\">D4Z</span> <span class=\"mi\">3</span><span class=\"n\">KW</span> <span class=\"mi\">6</span><span class=\"n\">X3</span> <span class=\"n\">JSD</span>\n <span class=\"mi\">66</span> <span class=\"bp\">|</span> <span class=\"n\">GNW</span> <span class=\"n\">B3G</span> <span class=\"mi\">7</span><span class=\"n\">H4</span> <span class=\"n\">QHN</span> <span class=\"n\">BXW</span> <span class=\"n\">VC5</span> <span class=\"mi\">2</span><span class=\"n\">R9</span> <span class=\"n\">DQL</span> <span class=\"mi\">4</span><span class=\"n\">SQ</span>\n <span class=\"mi\">67</span> <span class=\"bp\">|</span> <span class=\"n\">XW1</span> <span class=\"n\">Q5T</span> <span class=\"n\">Z3G</span> <span class=\"n\">CCY</span> <span class=\"n\">Q2W</span> <span class=\"mi\">3</span><span class=\"n\">KM</span> <span class=\"n\">LZK</span> <span class=\"n\">C15</span> <span class=\"mi\">25</span><span class=\"n\">M</span>\n <span class=\"mi\">68</span> <span class=\"bp\">|</span> <span class=\"mi\">9</span><span class=\"n\">QL</span> <span class=\"n\">XT3</span> <span class=\"n\">SW5</span> <span class=\"mi\">9</span><span class=\"n\">JL</span> <span class=\"mi\">3</span><span class=\"n\">R1</span> <span class=\"mi\">7</span><span class=\"n\">G4</span> <span class=\"n\">Y9Q</span> <span class=\"n\">YYD</span>\n <span class=\"mi\">69</span> <span class=\"bp\">|</span> <span class=\"n\">C96</span> <span class=\"n\">DGC</span> <span class=\"n\">M18</span> <span class=\"n\">S8H</span> <span class=\"n\">GV7</span> <span class=\"n\">K94</span>\n <span class=\"mi\">70</span> <span class=\"bp\">|</span> <span class=\"n\">NFV</span> <span class=\"mi\">9</span><span class=\"n\">VB</span> <span class=\"mi\">37</span><span class=\"n\">V</span> <span class=\"n\">F5C</span> <span class=\"n\">C7P</span> <span class=\"mi\">87</span><span class=\"n\">N</span>\n <span class=\"mi\">71</span> <span class=\"bp\">|</span> <span class=\"mi\">12</span><span class=\"n\">Z</span> <span class=\"mi\">7</span><span class=\"n\">Q6</span> <span class=\"n\">Z4H</span> <span class=\"n\">PG1</span> <span class=\"n\">JB4</span> <span class=\"n\">B2L</span>\n <span class=\"mi\">72</span> <span class=\"bp\">|</span> <span class=\"n\">BNX</span> <span class=\"mi\">5</span><span class=\"n\">ZM</span> <span class=\"n\">DB9</span> <span class=\"n\">SVH</span> <span class=\"n\">FCB</span>\n <span class=\"mi\">73</span> <span class=\"bp\">|</span> <span class=\"mi\">9</span><span class=\"n\">SH</span> <span class=\"n\">W82</span> <span class=\"n\">ZK9</span> <span class=\"n\">W35</span>\n <span class=\"mi\">74</span> <span class=\"bp\">|</span> <span class=\"n\">Q8T</span> <span class=\"n\">W4H</span> <span class=\"n\">HLX</span> <span class=\"n\">ZGD</span>\n <span class=\"mi\">75</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span><span class=\"n\">WB</span> <span class=\"mi\">9</span><span class=\"n\">T7</span> <span class=\"mi\">48</span><span class=\"n\">R</span> <span class=\"n\">S6X</span>\n <span class=\"mi\">76</span> <span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"n\">BG</span> <span class=\"mi\">84</span><span class=\"n\">H</span> <span class=\"mi\">79</span><span class=\"n\">S</span>\n <span class=\"mi\">77</span> <span class=\"bp\">|</span> <span class=\"n\">DHN</span> <span class=\"n\">VLW</span> <span class=\"n\">YB7</span>\n <span class=\"mi\">78</span> <span class=\"bp\">|</span> <span class=\"n\">QYN</span> <span class=\"n\">DLR</span> <span class=\"n\">P2F</span>\n <span class=\"mi\">79</span> <span class=\"bp\">|</span> <span class=\"mi\">84</span><span class=\"n\">R</span> <span class=\"n\">YH9</span>\n <span class=\"mi\">80</span> <span class=\"bp\">|</span> <span class=\"n\">BHH</span> <span class=\"n\">CQR</span> <span class=\"n\">PKL</span>\n <span class=\"mi\">81</span> <span class=\"bp\">|</span> <span class=\"n\">CDR</span> <span class=\"mi\">6</span><span class=\"n\">YP</span> <span class=\"mi\">7</span><span class=\"n\">CF</span> <span class=\"n\">NLM</span>\n <span class=\"mi\">82</span> <span class=\"bp\">|</span> <span class=\"n\">MNK</span> <span class=\"mi\">6</span><span class=\"n\">LF</span> <span class=\"n\">K77</span> <span class=\"n\">JD4</span>\n <span class=\"mi\">83</span> <span class=\"bp\">|</span> <span class=\"mi\">471</span> <span class=\"n\">S8Q</span> <span class=\"n\">C56</span> <span class=\"mi\">1</span><span class=\"n\">TN</span>\n <span class=\"mi\">84</span> <span class=\"bp\">|</span> <span class=\"n\">S2G</span> <span class=\"mi\">7</span><span class=\"n\">VW</span> <span class=\"n\">JWD</span> <span class=\"mi\">9</span><span class=\"n\">V7</span> <span class=\"n\">TZH</span> <span class=\"n\">S16</span>\n <span class=\"mi\">85</span> <span class=\"bp\">|</span> <span class=\"mi\">51</span><span class=\"n\">H</span> <span class=\"mi\">5</span><span class=\"n\">TG</span> <span class=\"n\">CYC</span> <span class=\"n\">V5N</span> <span class=\"n\">RHS</span> <span class=\"n\">XJP</span> <span class=\"n\">Q3S</span>\n <span class=\"mi\">86</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">BP</span> <span class=\"n\">XSS</span> <span class=\"n\">ZP9</span> <span class=\"mi\">3</span><span class=\"n\">J8</span> <span class=\"mi\">3</span><span class=\"n\">JX</span> <span class=\"mi\">676</span> <span class=\"mi\">4</span><span class=\"n\">D4</span>\n <span class=\"mi\">87</span> <span class=\"bp\">|</span> <span class=\"n\">ZMG</span> <span class=\"n\">ZFV</span> <span class=\"n\">M5Y</span> <span class=\"n\">BXP</span> <span class=\"n\">T62</span> <span class=\"mi\">1</span><span class=\"n\">NS</span> <span class=\"n\">V1H</span>\n <span class=\"mi\">88</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span><span class=\"n\">MW</span> <span class=\"n\">P9T</span> <span class=\"mi\">9</span><span class=\"n\">P3</span> <span class=\"n\">X8K</span> <span class=\"mi\">83</span><span class=\"n\">F</span> <span class=\"n\">LN5</span> <span class=\"mi\">1</span><span class=\"n\">F2</span> <span class=\"n\">MQY</span>\n <span class=\"mi\">89</span> <span class=\"bp\">|</span> <span class=\"n\">VS1</span> <span class=\"n\">YPT</span> <span class=\"n\">LB7</span> <span class=\"n\">X83</span> <span class=\"mi\">1</span><span class=\"n\">WG</span> <span class=\"mi\">5</span><span class=\"n\">KZ</span> <span class=\"n\">CT5</span> <span class=\"n\">DLD</span>\n <span class=\"mi\">90</span> <span class=\"bp\">|</span> <span class=\"n\">Y6C</span> <span class=\"n\">FBX</span> <span class=\"n\">HZZ</span> <span class=\"mi\">72</span><span class=\"n\">J</span> <span class=\"mi\">4</span><span class=\"n\">JM</span> <span class=\"n\">X5Z</span> <span class=\"n\">GXK</span>\n <span class=\"mi\">91</span> <span class=\"bp\">|</span> <span class=\"n\">X4V</span> <span class=\"mi\">61</span><span class=\"n\">P</span> <span class=\"n\">YVX</span> <span class=\"mi\">3</span><span class=\"n\">JT</span> <span class=\"mi\">3</span><span class=\"n\">FH</span> <span class=\"n\">QG5</span> <span class=\"n\">MFZ</span> <span class=\"mi\">3</span><span class=\"n\">QN</span>\n <span class=\"mi\">92</span> <span class=\"bp\">|</span> <span class=\"n\">CVP</span> <span class=\"n\">P63</span> <span class=\"n\">JMT</span> <span class=\"n\">WNX</span> <span class=\"mi\">717</span> <span class=\"n\">DJ3</span> <span class=\"n\">FJV</span> <span class=\"n\">YKD</span>\n <span class=\"mi\">93</span> <span class=\"bp\">|</span> <span class=\"n\">QGR</span> <span class=\"n\">DPW</span> <span class=\"mi\">28</span><span class=\"n\">Y</span> <span class=\"n\">PX5</span> <span class=\"mi\">58</span><span class=\"n\">W</span> <span class=\"n\">SDF</span> <span class=\"mi\">154</span> <span class=\"mi\">6</span><span class=\"n\">ZY</span>\n <span class=\"mi\">94</span> <span class=\"bp\">|</span> <span class=\"n\">XJK</span> <span class=\"n\">RN3</span> <span class=\"n\">CDX</span> <span class=\"n\">GY9</span> <span class=\"n\">GW4</span> <span class=\"n\">CTC</span>\n <span class=\"mi\">95</span> <span class=\"bp\">|</span> <span class=\"n\">SXQ</span> <span class=\"n\">TT2</span> <span class=\"n\">WR7</span> <span class=\"n\">DXW</span> <span class=\"n\">PJX</span> <span class=\"mi\">7</span><span class=\"n\">XD</span> <span class=\"n\">D9Q</span>\n <span class=\"mi\">96</span> <span class=\"bp\">|</span> <span class=\"n\">J75</span> <span class=\"n\">MG2</span> <span class=\"mi\">9</span><span class=\"n\">YJ</span> <span class=\"n\">ZVJ</span> <span class=\"n\">KWM</span> <span class=\"n\">YFJ</span>\n <span class=\"mi\">97</span> <span class=\"bp\">|</span> <span class=\"n\">PWF</span> <span class=\"n\">N91</span> <span class=\"n\">Z48</span> <span class=\"n\">QTQ</span> <span class=\"mi\">9</span><span class=\"n\">DQ</span> <span class=\"mi\">7</span><span class=\"n\">C1</span> <span class=\"n\">HGG</span>\n <span class=\"mi\">98</span> <span class=\"bp\">|</span> <span class=\"n\">SN6</span> <span class=\"n\">SPY</span> <span class=\"n\">XGT</span> <span class=\"n\">JGB</span> <span class=\"n\">YQ2</span>\n <span class=\"mi\">99</span> <span class=\"bp\">|</span> <span class=\"n\">WR6</span> <span class=\"n\">HR7</span> <span class=\"n\">GGZ</span> <span class=\"n\">NPX</span> <span class=\"mi\">1</span><span class=\"n\">W8</span>\n<span class=\"mi\">100</span> <span class=\"bp\">|</span> <span class=\"n\">FG3</span> <span class=\"n\">LP8</span> <span class=\"n\">P4K</span> <span class=\"mi\">79</span><span class=\"n\">V</span> <span class=\"n\">KNY</span>\n<span class=\"mi\">101</span> <span class=\"bp\">|</span> <span class=\"n\">FFL</span> <span class=\"n\">CGH</span> <span class=\"n\">BGZ</span> <span class=\"mi\">4</span><span class=\"n\">MM</span> <span class=\"n\">SH5</span>\n<span class=\"mi\">102</span> <span class=\"bp\">|</span> <span class=\"n\">CHG</span> <span class=\"n\">YCG</span> <span class=\"mi\">21</span><span class=\"n\">Z</span> <span class=\"mi\">5</span><span class=\"n\">MJ</span> <span class=\"mi\">16</span><span class=\"n\">R</span> <span class=\"n\">PCG</span>\n<span class=\"mi\">103</span> <span class=\"bp\">|</span> <span class=\"n\">WVC</span> <span class=\"n\">KK5</span> <span class=\"n\">RYC</span> <span class=\"n\">NK4</span> <span class=\"n\">M6W</span>\n<span class=\"mi\">104</span> <span class=\"bp\">|</span> <span class=\"n\">BMT</span> <span class=\"n\">HNV</span> <span class=\"n\">FYM</span> <span class=\"n\">L7W</span> <span class=\"n\">B8H</span>\n<span class=\"mi\">105</span> <span class=\"bp\">|</span> <span class=\"n\">S2W</span> <span class=\"mi\">2</span><span class=\"n\">MC</span> <span class=\"n\">MYP</span> <span class=\"n\">DQX</span> <span class=\"mi\">5</span><span class=\"n\">SH</span> <span class=\"n\">W2W</span>\n<span class=\"mi\">106</span> <span class=\"bp\">|</span> <span class=\"n\">BHQ</span> <span class=\"mi\">6</span><span class=\"n\">QN</span> <span class=\"mi\">6</span><span class=\"n\">M8</span> <span class=\"n\">RT5</span> <span class=\"mi\">221</span> <span class=\"n\">H1D</span> <span class=\"n\">YV2</span> <span class=\"n\">RSC</span>\n<span class=\"mi\">107</span> <span class=\"bp\">|</span> <span class=\"n\">WFL</span> <span class=\"n\">LNQ</span> <span class=\"n\">M48</span> <span class=\"n\">N6X</span> <span class=\"mi\">2</span><span class=\"n\">GL</span> <span class=\"n\">GFR</span> <span class=\"n\">VDK</span> <span class=\"n\">G2R</span> <span class=\"mi\">3</span><span class=\"n\">W1</span>\n<span class=\"mi\">108</span> <span class=\"bp\">|</span> <span class=\"n\">ZN2</span> <span class=\"n\">DF7</span> <span class=\"n\">GS2</span> <span class=\"n\">D55</span> <span class=\"n\">NL7</span> <span class=\"n\">SZ4</span> <span class=\"n\">KHL</span> <span class=\"mi\">1</span><span class=\"n\">P5</span> <span class=\"n\">W2K</span> <span class=\"n\">B6B</span>\n<span class=\"mi\">109</span> <span class=\"bp\">|</span> <span class=\"mi\">995</span> <span class=\"n\">XBP</span> <span class=\"n\">FTN</span> <span class=\"mi\">4</span><span class=\"n\">DV</span> <span class=\"n\">M1P</span> <span class=\"n\">MR6</span> <span class=\"n\">BBQ</span> <span class=\"mi\">52</span><span class=\"n\">H</span> <span class=\"n\">FRM</span>\n<span class=\"mi\">110</span> <span class=\"bp\">|</span> <span class=\"mi\">825</span> <span class=\"mi\">1</span><span class=\"n\">G1</span> <span class=\"n\">ZYG</span> <span class=\"n\">C8G</span> <span class=\"n\">GPP</span> <span class=\"n\">TY4</span> <span class=\"n\">CMG</span> <span class=\"n\">BXY</span> <span class=\"mi\">54</span><span class=\"n\">Q</span> <span class=\"n\">FHK</span> <span class=\"mi\">6</span><span class=\"n\">DV</span>\n<span class=\"mi\">111</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">GK</span> <span class=\"n\">VSV</span> <span class=\"n\">PBM</span> <span class=\"n\">FZD</span> <span class=\"n\">Q8R</span> <span class=\"n\">D39</span> <span class=\"mi\">6</span><span class=\"n\">XB</span> <span class=\"mi\">2</span><span class=\"n\">RF</span> <span class=\"mi\">57</span><span class=\"n\">R</span> <span class=\"n\">D59</span>\n<span class=\"mi\">112</span> <span class=\"bp\">|</span> <span class=\"n\">CSL</span> <span class=\"mi\">9</span><span class=\"n\">M1</span> <span class=\"mi\">1</span><span class=\"n\">KG</span> <span class=\"mi\">5</span><span class=\"n\">RQ</span> <span class=\"n\">JFR</span> <span class=\"n\">BFF</span> <span class=\"n\">KQH</span> <span class=\"mi\">4</span><span class=\"n\">PV</span> <span class=\"mi\">9</span><span class=\"n\">SF</span>\n<span class=\"mi\">113</span> <span class=\"bp\">|</span> <span class=\"n\">KJJ</span> <span class=\"mi\">5</span><span class=\"n\">TP</span> <span class=\"n\">Q4H</span> <span class=\"mi\">26</span><span class=\"n\">S</span> <span class=\"n\">JQL</span> <span class=\"n\">HW1</span> <span class=\"mi\">586</span> <span class=\"n\">FN6</span> <span class=\"n\">SXK</span> <span class=\"n\">CYR</span>\n<span class=\"mi\">114</span> <span class=\"bp\">|</span> <span class=\"n\">MCG</span> <span class=\"n\">QP7</span> <span class=\"n\">QYP</span> <span class=\"mi\">5</span><span class=\"n\">W2</span> <span class=\"n\">G8T</span> <span class=\"n\">C88</span> <span class=\"n\">BYL</span> <span class=\"mi\">1</span><span class=\"n\">QK</span> <span class=\"n\">Z4D</span> <span class=\"mi\">8</span><span class=\"n\">BN</span> <span class=\"n\">QGP</span>\n<span class=\"mi\">115</span> <span class=\"bp\">|</span> <span class=\"n\">TDJ</span> <span class=\"mi\">3</span><span class=\"n\">VS</span> <span class=\"n\">RTV</span> <span class=\"n\">D66</span> <span class=\"n\">J8V</span> <span class=\"n\">HFR</span> <span class=\"n\">GJN</span> <span class=\"n\">Z1J</span> <span class=\"mi\">41</span><span class=\"n\">X</span> <span class=\"n\">FLP</span> <span class=\"n\">SPH</span> <span class=\"mi\">4</span><span class=\"n\">B2</span>\n<span class=\"mi\">116</span> <span class=\"bp\">|</span> <span class=\"n\">C7B</span> <span class=\"mi\">1</span><span class=\"n\">JP</span> <span class=\"n\">V4T</span> <span class=\"n\">JX8</span> <span class=\"mi\">5</span><span class=\"n\">PQ</span> <span class=\"n\">CMZ</span> <span class=\"n\">GL2</span> <span class=\"n\">YK5</span> <span class=\"n\">BL6</span> <span class=\"mi\">8</span><span class=\"n\">Y5</span>\n<span class=\"mi\">117</span> <span class=\"bp\">|</span> <span class=\"n\">BYZ</span> <span class=\"n\">JFH</span> <span class=\"mi\">847</span> <span class=\"n\">DGD</span> <span class=\"n\">X85</span> <span class=\"n\">JDJ</span> <span class=\"n\">V1X</span> <span class=\"n\">KKF</span> <span class=\"n\">WZW</span>\n<span class=\"mi\">118</span> <span class=\"bp\">|</span> <span class=\"n\">DYC</span> <span class=\"n\">TH6</span> <span class=\"n\">N4J</span> <span class=\"n\">GY1</span> <span class=\"n\">RR4</span> <span class=\"n\">ZLR</span> <span class=\"n\">YKP</span> <span class=\"n\">GF1</span> <span class=\"n\">MD5</span>\n<span class=\"mi\">119</span> <span class=\"bp\">|</span> <span class=\"n\">NY8</span> <span class=\"n\">B2W</span> <span class=\"mi\">2</span><span class=\"n\">JC</span> <span class=\"n\">TPY</span> <span class=\"n\">FKC</span> <span class=\"n\">NYP</span> <span class=\"n\">XL8</span>\n<span class=\"mi\">120</span> <span class=\"bp\">|</span> <span class=\"n\">CLS</span> <span class=\"n\">CXC</span> <span class=\"mi\">689</span> <span class=\"mi\">2</span><span class=\"n\">DW</span> <span class=\"n\">SPL</span> <span class=\"n\">JDM</span> <span class=\"n\">Z5M</span>\n<span class=\"mi\">121</span> <span class=\"bp\">|</span> <span class=\"n\">M7M</span> <span class=\"n\">BSQ</span> <span class=\"n\">ZTS</span> <span class=\"mi\">95</span><span class=\"n\">D</span>\n<span class=\"mi\">122</span> <span class=\"bp\">|</span> <span class=\"mi\">389</span> <span class=\"n\">H1L</span> <span class=\"n\">XQS</span> <span class=\"n\">X5W</span>\n<span class=\"mi\">123</span> <span class=\"bp\">|</span> <span class=\"n\">Q7Z</span> <span class=\"n\">Z8R</span>\n<span class=\"mi\">124</span> <span class=\"bp\">|</span> <span class=\"n\">BKJ</span> <span class=\"n\">JCR</span>\n<span class=\"mi\">125</span> <span class=\"bp\">|</span> <span class=\"n\">LWH</span> <span class=\"mi\">14</span><span class=\"n\">W</span>\n<span class=\"mi\">126</span> <span class=\"bp\">|</span> <span class=\"n\">SRN</span> <span class=\"n\">YD1</span>\n<span class=\"mi\">127</span> <span class=\"bp\">|</span> <span class=\"n\">GHM</span> <span class=\"n\">YXC</span>\n<span class=\"mi\">128</span> <span class=\"bp\">|</span> <span class=\"n\">PY1</span> <span class=\"n\">WDF</span> <span class=\"mi\">112</span>\n<span class=\"mi\">129</span> <span class=\"bp\">|</span> <span class=\"n\">FRB</span> <span class=\"mi\">815</span> <span class=\"mi\">12</span><span class=\"n\">R</span>\n<span class=\"mi\">130</span> <span class=\"bp\">|</span> <span class=\"n\">R3T</span> <span class=\"mi\">6</span><span class=\"n\">BL</span> <span class=\"n\">BM6</span> <span class=\"mi\">32</span><span class=\"n\">K</span>\n<span class=\"mi\">131</span> <span class=\"bp\">|</span> <span class=\"mi\">6</span><span class=\"n\">M6</span> <span class=\"n\">NSY</span> <span class=\"n\">GXQ</span> <span class=\"n\">V4J</span>\n<span class=\"mi\">132</span> <span class=\"bp\">|</span> <span class=\"mi\">784</span> <span class=\"mi\">86</span><span class=\"n\">C</span> <span class=\"n\">Q6G</span> <span class=\"n\">XNJ</span>\n<span class=\"mi\">133</span> <span class=\"bp\">|</span> <span class=\"n\">LZ9</span> <span class=\"mi\">3</span><span class=\"n\">F5</span> <span class=\"n\">FFX</span> <span class=\"n\">B63</span>\n<span class=\"mi\">134</span> <span class=\"bp\">|</span> <span class=\"n\">K1G</span> <span class=\"n\">BB4</span> <span class=\"n\">Q1Q</span> <span class=\"n\">SBL</span> <span class=\"n\">RG8</span> <span class=\"n\">C4S</span>\n<span class=\"mi\">135</span> <span class=\"bp\">|</span> <span class=\"n\">DLL</span> <span class=\"mi\">6</span><span class=\"n\">D6</span> <span class=\"mi\">8</span><span class=\"n\">D3</span> <span class=\"n\">BPL</span> <span class=\"n\">VP3</span> <span class=\"n\">WY2</span>\n<span class=\"mi\">136</span> <span class=\"bp\">|</span> <span class=\"n\">DW3</span> <span class=\"n\">KKQ</span> <span class=\"n\">SYC</span> <span class=\"mi\">51</span><span class=\"n\">T</span> <span class=\"mi\">9</span><span class=\"n\">NJ</span> <span class=\"n\">JRR</span> <span class=\"n\">DMK</span>\n<span class=\"mi\">137</span> <span class=\"bp\">|</span> <span class=\"n\">V2V</span> <span class=\"n\">W2D</span> <span class=\"n\">P1C</span> <span class=\"n\">CJ1</span> <span class=\"n\">G89</span> <span class=\"mi\">2</span><span class=\"n\">T4</span> <span class=\"mi\">8</span><span class=\"n\">F8</span>\n<span class=\"mi\">138</span> <span class=\"bp\">|</span> <span class=\"n\">BL1</span> <span class=\"n\">BT5</span> <span class=\"n\">M34</span> <span class=\"mi\">62</span><span class=\"n\">X</span> <span class=\"n\">G9Y</span> <span class=\"mi\">5</span><span class=\"n\">KG</span> <span class=\"mi\">1</span><span class=\"n\">TH</span> <span class=\"n\">NB7</span>\n<span class=\"mi\">139</span> <span class=\"bp\">|</span> <span class=\"n\">RGL</span> <span class=\"mi\">3</span><span class=\"n\">P3</span> <span class=\"mi\">1</span><span class=\"n\">ZD</span> <span class=\"n\">K5H</span> <span class=\"n\">BSB</span> <span class=\"mi\">1</span><span class=\"n\">CV</span> <span class=\"mi\">7</span><span class=\"n\">KP</span>\n<span class=\"mi\">140</span> <span class=\"bp\">|</span> <span class=\"n\">BYG</span> <span class=\"n\">KBV</span> <span class=\"mi\">7</span><span class=\"n\">NP</span> <span class=\"n\">GFP</span> <span class=\"n\">BFB</span>\n<span class=\"mi\">141</span> <span class=\"bp\">|</span> <span class=\"n\">G3H</span> <span class=\"mi\">9</span><span class=\"n\">PT</span> <span class=\"n\">VZP</span> <span class=\"n\">F3G</span> <span class=\"n\">XGR</span> <span class=\"n\">MSL</span> <span class=\"mi\">297</span>\n<span class=\"mi\">142</span> <span class=\"bp\">|</span> <span class=\"mi\">64</span><span class=\"n\">B</span> <span class=\"mi\">7</span><span class=\"n\">PC</span> <span class=\"n\">PV5</span> <span class=\"mi\">9</span><span class=\"n\">GR</span> <span class=\"mi\">8</span><span class=\"n\">HK</span> <span class=\"n\">WPB</span> <span class=\"mi\">4</span><span class=\"n\">DB</span> <span class=\"n\">QM2</span>\n<span class=\"mi\">143</span> <span class=\"bp\">|</span> <span class=\"n\">KRM</span> <span class=\"n\">Q8N</span> <span class=\"n\">BPN</span> <span class=\"n\">R14</span> <span class=\"n\">CWZ</span>\n<span class=\"mi\">144</span> <span class=\"bp\">|</span> <span class=\"n\">TNG</span> <span class=\"n\">DGS</span> <span class=\"n\">HYK</span> <span class=\"n\">SWH</span> <span class=\"mi\">3</span><span class=\"n\">TR</span>\n<span class=\"mi\">145</span> <span class=\"bp\">|</span> <span class=\"mi\">6</span><span class=\"n\">ZN</span> <span class=\"n\">BGG</span> <span class=\"mi\">56</span><span class=\"n\">V</span> <span class=\"n\">WV8</span> <span class=\"mi\">693</span>\n<span class=\"mi\">146</span> <span class=\"bp\">|</span> <span class=\"n\">VPJ</span> <span class=\"mi\">5</span><span class=\"n\">TX</span> <span class=\"n\">X24</span> <span class=\"n\">SGK</span> <span class=\"mi\">23</span><span class=\"n\">R</span>\n<span class=\"mi\">147</span> <span class=\"bp\">|</span> <span class=\"mi\">55</span><span class=\"n\">L</span> <span class=\"n\">N1L</span> <span class=\"n\">J44</span> <span class=\"n\">QJD</span> <span class=\"n\">XNB</span>\n<span class=\"mi\">148</span> <span class=\"bp\">|</span> <span class=\"n\">DCQ</span> <span class=\"n\">FCH</span> <span class=\"mi\">7</span><span class=\"n\">DV</span> <span class=\"n\">KM2</span> <span class=\"n\">GK6</span>\n<span class=\"mi\">149</span> <span class=\"bp\">|</span> <span class=\"n\">SNG</span> <span class=\"n\">MXQ</span> <span class=\"n\">VDT</span> <span class=\"n\">F4L</span> <span class=\"n\">RTN</span>\n<span class=\"mi\">150</span> <span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"n\">L5</span> <span class=\"n\">T5B</span> <span class=\"n\">QGD</span> <span class=\"n\">T4H</span>\n<span class=\"mi\">151</span> <span class=\"bp\">|</span> <span class=\"n\">FRL</span> <span class=\"n\">HQS</span> <span class=\"n\">PZ9</span> <span class=\"n\">GJB</span>\n<span class=\"mi\">152</span> <span class=\"bp\">|</span> <span class=\"mi\">153</span> <span class=\"n\">C7H</span> <span class=\"mi\">7</span><span class=\"n\">VT</span> <span class=\"n\">T7T</span> <span class=\"n\">XFK</span>\n<span class=\"mi\">153</span> <span class=\"bp\">|</span> <span class=\"n\">YDL</span> <span class=\"n\">X3Y</span> <span class=\"n\">VQT</span> <span class=\"n\">G48</span> <span class=\"mi\">3</span><span class=\"n\">TB</span>\n<span class=\"mi\">154</span> <span class=\"bp\">|</span> <span class=\"n\">KX6</span> <span class=\"n\">C67</span> <span class=\"n\">XNP</span> <span class=\"n\">NV6</span>\n<span class=\"mi\">155</span> <span class=\"bp\">|</span> <span class=\"mi\">52</span><span class=\"n\">Y</span> <span class=\"n\">XGM</span> <span class=\"n\">SNZ</span>\n<span class=\"mi\">156</span> <span class=\"bp\">|</span> <span class=\"n\">LT3</span> <span class=\"n\">KD8</span> <span class=\"mi\">7</span><span class=\"n\">J4</span>\n<span class=\"mi\">157</span> <span class=\"bp\">|</span> <span class=\"n\">BPY</span> <span class=\"mi\">7</span><span class=\"n\">YX</span> <span class=\"n\">DQP</span> <span class=\"n\">S3H</span>\n<span class=\"mi\">158</span> <span class=\"bp\">|</span> <span class=\"n\">FQC</span> <span class=\"mi\">6</span><span class=\"n\">DY</span> <span class=\"mi\">2</span><span class=\"n\">VD</span> <span class=\"n\">BHS</span>\n<span class=\"mi\">159</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">X1</span> <span class=\"mi\">2</span><span class=\"n\">YM</span> <span class=\"n\">MJ4</span>\n<span class=\"mi\">160</span> <span class=\"bp\">|</span> <span class=\"n\">FPG</span> <span class=\"n\">NY9</span> <span class=\"n\">LHT</span>\n<span class=\"mi\">161</span> <span class=\"bp\">|</span> <span class=\"n\">XXQ</span> <span class=\"mi\">2</span><span class=\"n\">MW</span> <span class=\"n\">TJJ</span> <span class=\"n\">YN5</span> <span class=\"n\">KV5</span>\n<span class=\"mi\">162</span> <span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"n\">JW</span> <span class=\"n\">NJD</span> <span class=\"mi\">9</span><span class=\"n\">KD</span> <span class=\"n\">D5L</span> <span class=\"n\">L9K</span>\n<span class=\"mi\">163</span> <span class=\"bp\">|</span> <span class=\"mi\">29</span><span class=\"n\">H</span> <span class=\"mi\">3</span><span class=\"n\">LT</span> <span class=\"mi\">22</span><span class=\"n\">H</span> <span class=\"mi\">1</span><span class=\"n\">F1</span> <span class=\"mi\">3</span><span class=\"n\">MQ</span> <span class=\"n\">Q7S</span>\n<span class=\"mi\">164</span> <span class=\"bp\">|</span> <span class=\"n\">G1L</span> <span class=\"n\">BDB</span> <span class=\"n\">QBS</span> <span class=\"mi\">3</span><span class=\"n\">ND</span> <span class=\"mi\">9</span><span class=\"n\">NN</span> <span class=\"mi\">2</span><span class=\"n\">FF</span>\n<span class=\"mi\">165</span> <span class=\"bp\">|</span> <span class=\"n\">VRF</span> <span class=\"mi\">2</span><span class=\"n\">WS</span> <span class=\"n\">VKT</span> <span class=\"n\">G1Q</span> <span class=\"n\">LGL</span> <span class=\"n\">MRF</span>\n<span class=\"mi\">166</span> <span class=\"bp\">|</span> <span class=\"mi\">9</span><span class=\"n\">MX</span> <span class=\"n\">JNH</span> <span class=\"mi\">5</span><span class=\"n\">V6</span> <span class=\"mi\">3</span><span class=\"n\">BL</span> <span class=\"n\">RLJ</span> <span class=\"n\">C19</span>\n<span class=\"mi\">167</span> <span class=\"bp\">|</span> <span class=\"mi\">611</span> <span class=\"n\">Q64</span> <span class=\"n\">PND</span> <span class=\"n\">KMC</span> <span class=\"n\">T5D</span>\n<span class=\"mi\">168</span> <span class=\"bp\">|</span> <span class=\"n\">P4D</span> <span class=\"n\">CHR</span> <span class=\"n\">YMP</span> <span class=\"n\">SP9</span> <span class=\"n\">WKN</span>\n<span class=\"mi\">169</span> <span class=\"bp\">|</span> <span class=\"n\">MFL</span> <span class=\"mi\">6</span><span class=\"n\">SN</span> <span class=\"mi\">5</span><span class=\"n\">LR</span>\n<span class=\"mi\">170</span> <span class=\"bp\">|</span> <span class=\"n\">T1M</span> <span class=\"mi\">6</span><span class=\"n\">BC</span> <span class=\"n\">RY3</span>\n<span class=\"mi\">171</span> <span class=\"bp\">|</span> <span class=\"n\">HP6</span> <span class=\"n\">LW7</span> <span class=\"mi\">6</span><span class=\"n\">HV</span> <span class=\"n\">BZ6</span>\n<span class=\"mi\">172</span> <span class=\"bp\">|</span> <span class=\"n\">KGV</span> <span class=\"n\">HLC</span> <span class=\"n\">PG2</span> <span class=\"mi\">997</span> <span class=\"n\">NBZ</span>\n<span class=\"mi\">173</span> <span class=\"bp\">|</span> <span class=\"n\">K8D</span> <span class=\"n\">R1Y</span> <span class=\"n\">L9Y</span> <span class=\"n\">G6K</span> <span class=\"mi\">93</span><span class=\"n\">W</span>\n<span class=\"mi\">174</span> <span class=\"bp\">|</span> <span class=\"n\">Q2Z</span> <span class=\"n\">ZL7</span> <span class=\"n\">HTH</span> <span class=\"n\">WQ4</span> <span class=\"n\">JQN</span>\n<span class=\"mi\">175</span> <span class=\"bp\">|</span> <span class=\"n\">TLH</span> <span class=\"n\">NL4</span> <span class=\"n\">R8D</span> <span class=\"n\">DSP</span> <span class=\"n\">KKL</span> <span class=\"mi\">1</span><span class=\"n\">ZC</span>\n<span class=\"mi\">176</span> <span class=\"bp\">|</span> <span class=\"n\">XJ7</span> <span class=\"n\">XQ9</span> <span class=\"n\">MC7</span> <span class=\"n\">XTF</span> <span class=\"n\">TMT</span>\n<span class=\"mi\">177</span> <span class=\"bp\">|</span> <span class=\"n\">RPY</span> <span class=\"mi\">3</span><span class=\"n\">HN</span> <span class=\"n\">VPF</span> <span class=\"mi\">99</span><span class=\"n\">C</span> <span class=\"mi\">4</span><span class=\"n\">VN</span>\n<span class=\"mi\">178</span> <span class=\"bp\">|</span> <span class=\"n\">PD7</span> <span class=\"n\">TKY</span> <span class=\"mi\">9</span><span class=\"n\">YR</span> <span class=\"n\">JVW</span> <span class=\"n\">ZX4</span>\n<span class=\"mi\">179</span> <span class=\"bp\">|</span> <span class=\"n\">DVV</span> <span class=\"n\">NYB</span> <span class=\"mi\">1</span><span class=\"n\">YV</span> <span class=\"n\">DFH</span> <span class=\"mi\">4</span><span class=\"n\">RG</span> <span class=\"n\">CZ8</span>\n<span class=\"mi\">180</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span><span class=\"n\">RC</span> <span class=\"n\">TM2</span> <span class=\"n\">QBB</span> <span class=\"mi\">2</span><span class=\"n\">T5</span>\n<span class=\"mi\">181</span> <span class=\"bp\">|</span> <span class=\"n\">VNQ</span> <span class=\"n\">RTT</span> <span class=\"n\">ZR6</span> <span class=\"mi\">9</span><span class=\"n\">J8</span>\n<span class=\"mi\">182</span> <span class=\"bp\">|</span> <span class=\"n\">RDQ</span> <span class=\"n\">HTJ</span> <span class=\"n\">JM9</span> <span class=\"mi\">2</span><span class=\"n\">B4</span> <span class=\"mi\">39</span><span class=\"n\">B</span>\n<span class=\"mi\">183</span> <span class=\"bp\">|</span> <span class=\"n\">HH4</span> <span class=\"n\">SK2</span> <span class=\"n\">NGV</span> <span class=\"n\">C3T</span> <span class=\"mi\">898</span> <span class=\"mi\">5</span><span class=\"n\">YB</span>\n<span class=\"mi\">184</span> <span class=\"bp\">|</span> <span class=\"n\">NQQ</span> <span class=\"n\">HD6</span> <span class=\"mi\">71</span><span class=\"n\">S</span> <span class=\"n\">NKR</span> <span class=\"n\">DDD</span> <span class=\"mi\">3</span><span class=\"n\">J7</span>\n<span class=\"mi\">185</span> <span class=\"bp\">|</span> <span class=\"mi\">431</span> <span class=\"n\">SQ4</span> <span class=\"n\">C4K</span> <span class=\"n\">SRP</span> <span class=\"n\">PF1</span> <span class=\"n\">NND</span>\n<span class=\"mi\">186</span> <span class=\"bp\">|</span> <span class=\"n\">MHM</span> <span class=\"n\">L1T</span> <span class=\"mi\">171</span> <span class=\"mi\">3</span><span class=\"n\">FX</span>\n<span class=\"mi\">187</span> <span class=\"bp\">|</span> <span class=\"n\">TK6</span> <span class=\"n\">D6Z</span> <span class=\"n\">VXY</span> <span class=\"n\">HSN</span>\n<span class=\"mi\">188</span> <span class=\"bp\">|</span> <span class=\"n\">QHD</span> <span class=\"n\">JZM</span>\n<span class=\"mi\">189</span> <span class=\"bp\">|</span> <span class=\"n\">R91</span> <span class=\"n\">BV4</span>\n<span class=\"mi\">190</span> <span class=\"bp\">|</span> <span class=\"mi\">6</span><span class=\"n\">Q9</span> <span class=\"n\">FY7</span>\n<span class=\"mi\">191</span> <span class=\"bp\">|</span> <span class=\"n\">YJ5</span> <span class=\"n\">KZ6</span> <span class=\"n\">YBC</span>\n<span class=\"mi\">192</span> <span class=\"bp\">|</span> <span class=\"n\">FPM</span> <span class=\"n\">K8S</span> <span class=\"n\">L2G</span>\n<span class=\"mi\">193</span> <span class=\"bp\">|</span> <span class=\"n\">YKV</span> <span class=\"n\">BLT</span> <span class=\"mi\">3</span><span class=\"n\">XB</span>\n<span class=\"mi\">194</span> <span class=\"bp\">|</span> <span class=\"n\">B6Q</span> <span class=\"n\">NB1</span> <span class=\"n\">X46</span>\n<span class=\"mi\">195</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span><span class=\"n\">PP</span> <span class=\"n\">GL4</span> <span class=\"n\">DGY</span>\n<span class=\"mi\">196</span> <span class=\"bp\">|</span> <span class=\"n\">YXN</span> <span class=\"n\">HZQ</span> <span class=\"n\">K4N</span> <span class=\"mi\">4</span><span class=\"n\">GK</span>\n<span class=\"mi\">197</span> <span class=\"bp\">|</span> <span class=\"n\">JC5</span> <span class=\"mi\">57</span><span class=\"n\">G</span> <span class=\"mi\">46</span><span class=\"n\">D</span> <span class=\"n\">KLT</span>\n<span class=\"mi\">198</span> <span class=\"bp\">|</span> <span class=\"n\">CFQ</span> <span class=\"n\">DZ6</span> <span class=\"mi\">5</span><span class=\"n\">YG</span> <span class=\"n\">TBQ</span> <span class=\"n\">BBP</span>\n<span class=\"mi\">199</span> <span class=\"bp\">|</span> <span class=\"n\">RKP</span> <span class=\"mi\">8</span><span class=\"n\">HT</span> <span class=\"n\">H1W</span> <span class=\"n\">XS2</span> <span class=\"n\">LM4</span> <span class=\"n\">WXC</span>\n<span class=\"mi\">200</span> <span class=\"bp\">|</span> <span class=\"n\">XCD</span> <span class=\"n\">PQY</span> <span class=\"n\">HTF</span> <span class=\"n\">CWY</span> <span class=\"n\">MZZ</span>\n<span class=\"mi\">201</span> <span class=\"bp\">|</span> <span class=\"n\">JLR</span> <span class=\"mi\">11</span><span class=\"n\">Y</span> <span class=\"n\">HJS</span> <span class=\"n\">KYV</span> <span class=\"mi\">24</span><span class=\"n\">Y</span>\n<span class=\"mi\">202</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span><span class=\"n\">PM</span> <span class=\"mi\">7</span><span class=\"n\">HW</span> <span class=\"mi\">6</span><span class=\"n\">Z7</span> <span class=\"n\">WMS</span>\n<span class=\"mi\">203</span> <span class=\"bp\">|</span> <span class=\"mi\">6</span><span class=\"n\">GT</span> <span class=\"mi\">512</span> <span class=\"mi\">4</span><span class=\"n\">T3</span>\n<span class=\"mi\">204</span> <span class=\"bp\">|</span> <span class=\"mi\">651</span> <span class=\"n\">VD7</span> <span class=\"n\">B92</span> <span class=\"mi\">9</span><span class=\"n\">PN</span>\n<span class=\"mi\">205</span> <span class=\"bp\">|</span> <span class=\"n\">VG4</span> <span class=\"n\">M8Z</span> <span class=\"n\">C8R</span> <span class=\"n\">NVM</span>\n<span class=\"mi\">206</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">RS</span> <span class=\"n\">LYX</span> <span class=\"n\">FDT</span> <span class=\"n\">H3C</span> <span class=\"n\">TSL</span>\n<span class=\"mi\">207</span> <span class=\"bp\">|</span> <span class=\"n\">SB2</span> <span class=\"n\">X59</span> <span class=\"n\">ZCD</span> <span class=\"n\">MBK</span>\n<span class=\"mi\">208</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span><span class=\"n\">HD</span> <span class=\"mi\">77</span><span class=\"n\">J</span> <span class=\"mi\">9</span><span class=\"n\">WH</span> <span class=\"n\">LVB</span>\n<span class=\"mi\">209</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span><span class=\"n\">Q5</span> <span class=\"n\">DHJ</span> <span class=\"n\">SVY</span> <span class=\"mi\">9</span><span class=\"n\">YL</span> <span class=\"n\">CXN</span>\n<span class=\"mi\">210</span> <span class=\"bp\">|</span> <span class=\"n\">MWN</span> <span class=\"n\">ZMD</span> <span class=\"n\">SGX</span> <span class=\"mi\">3</span><span class=\"n\">LV</span> <span class=\"n\">R8S</span>\n<span class=\"mi\">211</span> <span class=\"bp\">|</span> <span class=\"n\">C5H</span> <span class=\"n\">XYG</span> <span class=\"n\">N3D</span> <span class=\"mi\">2</span><span class=\"n\">TV</span> <span class=\"mi\">8</span><span class=\"n\">N7</span> <span class=\"n\">WL2</span>\n<span class=\"mi\">212</span> <span class=\"bp\">|</span> <span class=\"n\">QRV</span> <span class=\"n\">PZ7</span> <span class=\"mi\">9</span><span class=\"n\">LN</span> <span class=\"mi\">9</span><span class=\"n\">B1</span> <span class=\"n\">FQ4</span> <span class=\"n\">YLM</span> <span class=\"mi\">91</span><span class=\"n\">X</span>\n<span class=\"mi\">213</span> <span class=\"bp\">|</span> <span class=\"n\">C68</span> <span class=\"n\">GK9</span> <span class=\"mi\">8</span><span class=\"n\">MT</span> <span class=\"n\">BG9</span> <span class=\"n\">CTY</span> <span class=\"n\">RLZ</span> <span class=\"mi\">4</span><span class=\"n\">JY</span>\n<span class=\"mi\">214</span> <span class=\"bp\">|</span> <span class=\"n\">X5M</span> <span class=\"mi\">8</span><span class=\"n\">N9</span> <span class=\"n\">S66</span> <span class=\"mi\">2</span><span class=\"n\">D4</span> <span class=\"n\">DXP</span>\n<span class=\"mi\">215</span> <span class=\"bp\">|</span> <span class=\"n\">LSV</span> <span class=\"n\">VKS</span> <span class=\"n\">K4X</span> <span class=\"n\">L3F</span> <span class=\"mi\">79</span><span class=\"n\">F</span>\n<span class=\"mi\">216</span> <span class=\"bp\">|</span> <span class=\"n\">QNJ</span> <span class=\"n\">LPH</span> <span class=\"n\">CB5</span> <span class=\"n\">Z2L</span>\n<span class=\"mi\">217</span> <span class=\"bp\">|</span> <span class=\"n\">VD9</span> <span class=\"mi\">6</span><span class=\"n\">LG</span> <span class=\"n\">QSP</span> <span class=\"n\">JBV</span>\n<span class=\"mi\">218</span> <span class=\"bp\">|</span> <span class=\"n\">LJX</span> <span class=\"n\">V2H</span> <span class=\"mi\">82</span><span class=\"n\">N</span> <span class=\"n\">VGM</span> <span class=\"n\">BJK</span>\n<span class=\"mi\">219</span> <span class=\"bp\">|</span> <span class=\"n\">P1V</span> <span class=\"n\">H4K</span> <span class=\"n\">WS3</span> <span class=\"n\">KF6</span> <span class=\"n\">HZW</span>\n<span class=\"mi\">220</span> <span class=\"bp\">|</span> <span class=\"n\">GNX</span> <span class=\"n\">WDM</span> <span class=\"mi\">24</span><span class=\"n\">J</span> <span class=\"n\">LL7</span>\n<span class=\"mi\">221</span> <span class=\"bp\">|</span> <span class=\"n\">YC3</span> <span class=\"mi\">8</span><span class=\"n\">M1</span> <span class=\"mi\">4</span><span class=\"n\">G9</span>\n<span class=\"mi\">222</span> <span class=\"bp\">|</span> <span class=\"n\">FZL</span> <span class=\"n\">JWR</span> <span class=\"n\">P7J</span>\n<span class=\"mi\">223</span> <span class=\"bp\">|</span> <span class=\"n\">VFV</span> <span class=\"n\">G4B</span> <span class=\"n\">YGJ</span> <span class=\"mi\">572</span>\n<span class=\"mi\">224</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span><span class=\"n\">XR</span> <span class=\"n\">QCS</span> <span class=\"n\">XVY</span> <span class=\"n\">D8N</span> <span class=\"n\">HZ9</span>\n<span class=\"mi\">225</span> <span class=\"bp\">|</span> <span class=\"n\">LWX</span> <span class=\"n\">VHQ</span> <span class=\"mi\">19</span><span class=\"n\">W</span> <span class=\"n\">MCH</span> <span class=\"mi\">82</span><span class=\"n\">S</span>\n<span class=\"mi\">226</span> <span class=\"bp\">|</span> <span class=\"n\">KCT</span> <span class=\"n\">FSW</span> <span class=\"n\">CZ2</span> <span class=\"mi\">45</span><span class=\"n\">G</span>\n<span class=\"mi\">227</span> <span class=\"bp\">|</span> <span class=\"n\">RRC</span> <span class=\"n\">YQC</span> <span class=\"n\">XPD</span> <span class=\"n\">B6J</span>\n<span class=\"mi\">228</span> <span class=\"bp\">|</span> <span class=\"n\">DKM</span> <span class=\"mi\">459</span> <span class=\"mi\">2</span><span class=\"n\">MN</span> <span class=\"n\">R4F</span> <span class=\"n\">J31</span>\n<span class=\"mi\">229</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">T3</span> <span class=\"n\">HSX</span> <span class=\"n\">XQQ</span> <span class=\"n\">KS2</span>\n<span class=\"mi\">230</span> <span class=\"bp\">|</span> <span class=\"mi\">5</span><span class=\"n\">YR</span> <span class=\"n\">BR6</span> <span class=\"n\">J6G</span> <span class=\"n\">V5M</span>\n<span class=\"mi\">231</span> <span class=\"bp\">|</span> <span class=\"n\">S47</span> <span class=\"n\">CQB</span> <span class=\"n\">B1Y</span> <span class=\"n\">WXW</span>\n<span class=\"mi\">232</span> <span class=\"bp\">|</span> <span class=\"n\">CRB</span> <span class=\"n\">YT7</span> <span class=\"n\">NZJ</span> <span class=\"mi\">6</span><span class=\"n\">LD</span> <span class=\"n\">L48</span>\n<span class=\"mi\">233</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">MH</span> <span class=\"n\">XVV</span> <span class=\"n\">QNF</span> <span class=\"n\">DXM</span> <span class=\"n\">JNZ</span>\n<span class=\"mi\">234</span> <span class=\"bp\">|</span> <span class=\"n\">C32</span> <span class=\"n\">Q8J</span> <span class=\"mi\">17</span><span class=\"n\">D</span> <span class=\"n\">VVK</span> <span class=\"n\">YK2</span>\n<span class=\"mi\">235</span> <span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"n\">NJ</span> <span class=\"n\">YCJ</span> <span class=\"mi\">2</span><span class=\"n\">SH</span> <span class=\"n\">S8C</span> <span class=\"n\">S2T</span> <span class=\"n\">JTV</span>\n<span class=\"mi\">236</span> <span class=\"bp\">|</span> <span class=\"n\">Y51</span> <span class=\"n\">DYJ</span> <span class=\"n\">SFW</span> <span class=\"n\">F1B</span> <span class=\"n\">FP1</span> <span class=\"n\">H9N</span>\n<span class=\"mi\">237</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span><span class=\"n\">LW</span> <span class=\"n\">NL3</span> <span class=\"n\">CNY</span> <span class=\"mi\">23</span><span class=\"n\">G</span> <span class=\"n\">GXP</span>\n<span class=\"mi\">238</span> <span class=\"bp\">|</span> <span class=\"mi\">9</span><span class=\"n\">WT</span> <span class=\"n\">KPG</span> <span class=\"n\">QFN</span> <span class=\"mi\">3</span><span class=\"n\">MM</span> <span class=\"n\">BHY</span>\n<span class=\"mi\">239</span> <span class=\"bp\">|</span> <span class=\"n\">GHV</span> <span class=\"n\">QC5</span> <span class=\"n\">GPB</span> <span class=\"mi\">4</span><span class=\"n\">QN</span> <span class=\"n\">PW9</span>\n<span class=\"mi\">240</span> <span class=\"bp\">|</span> <span class=\"n\">D2G</span> <span class=\"n\">LPK</span> <span class=\"n\">BCB</span> <span class=\"n\">MH8</span> <span class=\"mi\">5</span><span class=\"n\">R4</span> <span class=\"n\">TGW</span>\n<span class=\"mi\">241</span> <span class=\"bp\">|</span> <span class=\"n\">QWF</span> <span class=\"n\">BD5</span> <span class=\"mi\">4</span><span class=\"n\">GQ</span> <span class=\"mi\">347</span> <span class=\"n\">FS4</span> <span class=\"mi\">9</span><span class=\"n\">M4</span>\n<span class=\"mi\">242</span> <span class=\"bp\">|</span> <span class=\"n\">FNL</span> <span class=\"n\">L7K</span> <span class=\"n\">RJZ</span> <span class=\"n\">RXJ</span> <span class=\"mi\">5</span><span class=\"n\">C7</span> <span class=\"mi\">9</span><span class=\"n\">K2</span>\n<span class=\"mi\">243</span> <span class=\"bp\">|</span> <span class=\"n\">DSW</span> <span class=\"n\">LPP</span> <span class=\"mi\">37</span><span class=\"n\">Y</span> <span class=\"mi\">3</span><span class=\"n\">X3</span>\n<span class=\"mi\">244</span> <span class=\"bp\">|</span> <span class=\"n\">PB1</span> <span class=\"n\">N3V</span> <span class=\"mi\">5</span><span class=\"n\">SS</span> <span class=\"mi\">79</span><span class=\"n\">D</span> <span class=\"n\">QYB</span>\n<span class=\"mi\">245</span> <span class=\"bp\">|</span> <span class=\"n\">SC5</span> <span class=\"n\">XJ1</span> <span class=\"n\">CC7</span> <span class=\"n\">M1S</span> <span class=\"n\">TG7</span>\n<span class=\"mi\">246</span> <span class=\"bp\">|</span> <span class=\"n\">QXQ</span> <span class=\"mi\">7</span><span class=\"n\">WG</span> <span class=\"mi\">38</span><span class=\"n\">W</span> <span class=\"n\">TT3</span> <span class=\"n\">M1N</span>\n<span class=\"mi\">247</span> <span class=\"bp\">|</span> <span class=\"n\">YVZ</span> <span class=\"n\">K98</span> <span class=\"n\">GLX</span> <span class=\"n\">SGG</span> <span class=\"n\">VDP</span>\n<span class=\"mi\">248</span> <span class=\"bp\">|</span> <span class=\"n\">H1M</span> <span class=\"n\">FQG</span> <span class=\"mi\">13</span><span class=\"n\">Y</span> <span class=\"n\">F3D</span> <span class=\"n\">YG4</span>\n<span class=\"mi\">249</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"n\">S2</span> <span class=\"n\">K9D</span> <span class=\"n\">JPY</span> <span class=\"n\">SWG</span> <span class=\"n\">MYL</span>\n<span class=\"mi\">250</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"n\">QD</span> <span class=\"mi\">2</span><span class=\"n\">TD</span> <span class=\"mi\">5</span><span class=\"n\">YC</span> <span class=\"n\">JXV</span> <span class=\"n\">QXK</span> <span class=\"n\">BSZ</span>\n<span class=\"mi\">251</span> <span class=\"bp\">|</span> <span class=\"n\">TKQ</span> <span class=\"mi\">2</span><span class=\"n\">CS</span> <span class=\"n\">VJ1</span> <span class=\"n\">FTX</span> <span class=\"mi\">2</span><span class=\"n\">YW</span> <span class=\"n\">ZTR</span>\n<span class=\"mi\">252</span> <span class=\"bp\">|</span> <span class=\"n\">WS6</span> <span class=\"n\">MXB</span> <span class=\"mi\">3</span><span class=\"n\">X1</span> <span class=\"mi\">91</span><span class=\"n\">Q</span> <span class=\"n\">ZPV</span>\n<span class=\"mi\">253</span> <span class=\"bp\">|</span> <span class=\"n\">R78</span> <span class=\"n\">V9W</span> <span class=\"n\">NSJ</span> <span class=\"n\">QC2</span> <span class=\"n\">DN6</span>\n<span class=\"mi\">254</span> <span class=\"bp\">|</span> <span class=\"n\">PRG</span> <span class=\"n\">DHQ</span> <span class=\"n\">ZWJ</span> <span class=\"n\">D3Y</span> <span class=\"n\">YP8</span> <span class=\"mi\">37</span><span class=\"n\">R</span>\n<span class=\"mi\">255</span> <span class=\"bp\">|</span> <span class=\"n\">Q1Z</span> <span class=\"n\">ZXG</span> <span class=\"n\">XLJ</span> <span class=\"n\">P5J</span> <span class=\"n\">BXS</span> <span class=\"n\">CGG</span>\n<span class=\"mi\">256</span> <span class=\"bp\">|</span> <span class=\"n\">HFD</span> <span class=\"n\">SMR</span> <span class=\"n\">T31</span> <span class=\"n\">TRZ</span> <span class=\"n\">ZPX</span> <span class=\"mi\">6</span><span class=\"n\">ZD</span> <span class=\"mi\">25</span><span class=\"n\">Y</span>\n<span class=\"mi\">257</span> <span class=\"bp\">|</span> <span class=\"mi\">25</span><span class=\"n\">X</span> <span class=\"n\">JR9</span> <span class=\"mi\">82</span><span class=\"n\">X</span> <span class=\"mi\">42</span><span class=\"n\">V</span> <span class=\"mi\">16</span><span class=\"n\">Z</span> <span class=\"mi\">3</span><span class=\"n\">FD</span>\n<span class=\"mi\">258</span> <span class=\"bp\">|</span> <span class=\"mi\">15</span><span class=\"n\">G</span> <span class=\"n\">H2M</span> <span class=\"n\">C3N</span> <span class=\"mi\">8</span><span class=\"n\">XD</span> <span class=\"n\">MXN</span> <span class=\"mi\">5</span><span class=\"n\">X1</span>\n<span class=\"mi\">259</span> <span class=\"bp\">|</span> <span class=\"n\">G6B</span> <span class=\"n\">L2Y</span> <span class=\"n\">F86</span> <span class=\"mi\">8</span><span class=\"n\">NS</span> <span class=\"mi\">95</span><span class=\"n\">C</span> <span class=\"mi\">4</span><span class=\"n\">Y8</span> <span class=\"n\">Z8Z</span> <span class=\"n\">RSB</span>\n<span class=\"mi\">260</span> <span class=\"bp\">|</span> <span class=\"mi\">36</span><span class=\"n\">Y</span> <span class=\"n\">KXQ</span> <span class=\"n\">RDR</span> <span class=\"n\">LX1</span> <span class=\"n\">KBP</span> <span class=\"mi\">19</span><span class=\"n\">J</span> <span class=\"n\">X2N</span> <span class=\"n\">RF6</span> <span class=\"n\">CQ9</span>\n<span class=\"mi\">261</span> <span class=\"bp\">|</span> <span class=\"n\">LQ9</span> <span class=\"n\">NGG</span> <span class=\"mi\">8</span><span class=\"n\">DG</span> <span class=\"n\">ZQK</span> <span class=\"mi\">47</span><span class=\"n\">G</span> <span class=\"n\">BF4</span> <span class=\"n\">R4P</span> <span class=\"mi\">4</span><span class=\"n\">CH</span> <span class=\"mi\">27</span><span class=\"n\">B</span>\n<span class=\"mi\">262</span> <span class=\"bp\">|</span> <span class=\"n\">J4J</span> <span class=\"n\">H1J</span> <span class=\"n\">GNH</span> <span class=\"n\">VWB</span> <span class=\"n\">HSQ</span> <span class=\"n\">BNY</span> <span class=\"mi\">4</span><span class=\"n\">P2</span> <span class=\"n\">V95</span> <span class=\"n\">G2D</span>\n<span class=\"mi\">263</span> <span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"n\">NH</span> <span class=\"n\">J7W</span> <span class=\"mi\">7</span><span class=\"n\">YL</span> <span class=\"mi\">9</span><span class=\"n\">F6</span> <span class=\"n\">BJS</span> <span class=\"mi\">412</span> <span class=\"n\">B12</span> <span class=\"n\">H6R</span>\n<span class=\"mi\">264</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">GN</span> <span class=\"n\">V97</span> <span class=\"mi\">7</span><span class=\"n\">LZ</span> <span class=\"mi\">8</span><span class=\"n\">B1</span> <span class=\"n\">PP5</span> <span class=\"n\">ZX5</span> <span class=\"n\">LGJ</span> <span class=\"n\">C65</span> <span class=\"n\">YXR</span> <span class=\"mi\">11</span><span class=\"n\">K</span> <span class=\"n\">MDP</span>\n<span class=\"mi\">265</span> <span class=\"bp\">|</span> <span class=\"n\">CDM</span> <span class=\"mi\">3</span><span class=\"n\">K4</span> <span class=\"mi\">7</span><span class=\"n\">DF</span> <span class=\"n\">BCQ</span> <span class=\"mi\">4</span><span class=\"n\">C9</span> <span class=\"n\">SPQ</span> <span class=\"mi\">9</span><span class=\"n\">FN</span> <span class=\"mi\">9</span><span class=\"n\">FS</span> <span class=\"n\">BTL</span>\n<span class=\"mi\">266</span> <span class=\"bp\">|</span> <span class=\"n\">MZ9</span> <span class=\"n\">P3M</span> <span class=\"mi\">1</span><span class=\"n\">N7</span> <span class=\"n\">ZH5</span> <span class=\"n\">R4Z</span> <span class=\"mi\">55</span><span class=\"n\">P</span> <span class=\"n\">HJZ</span> <span class=\"n\">HY3</span> <span class=\"mi\">8</span><span class=\"n\">PC</span>\n<span class=\"mi\">267</span> <span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"n\">FK</span> <span class=\"n\">FZF</span> <span class=\"mi\">878</span> <span class=\"n\">H7Y</span> <span class=\"n\">M3D</span> <span class=\"n\">P8G</span> <span class=\"mi\">9</span><span class=\"n\">NB</span> <span class=\"n\">C26</span> <span class=\"mi\">2</span><span class=\"n\">RD</span> <span class=\"n\">Y3R</span>\n<span class=\"mi\">268</span> <span class=\"bp\">|</span> <span class=\"n\">SCH</span> <span class=\"mi\">6</span><span class=\"n\">TB</span> <span class=\"n\">HD2</span> <span class=\"n\">KRF</span> <span class=\"mi\">7</span><span class=\"n\">XB</span> <span class=\"n\">S4P</span> <span class=\"mi\">91</span><span class=\"n\">H</span> <span class=\"n\">HR2</span> <span class=\"n\">ZZ5</span>\n<span class=\"mi\">269</span> <span class=\"bp\">|</span> <span class=\"n\">CBH</span> <span class=\"mi\">55</span><span class=\"n\">K</span> <span class=\"n\">HTS</span> <span class=\"n\">Q8K</span> <span class=\"n\">KWZ</span> <span class=\"n\">S2R</span> <span class=\"n\">L5B</span> <span class=\"n\">C6F</span> <span class=\"n\">W7X</span> <span class=\"mi\">299</span>\n<span class=\"mi\">270</span> <span class=\"bp\">|</span> <span class=\"n\">GZK</span> <span class=\"n\">QS2</span> <span class=\"n\">YR9</span> <span class=\"n\">MY8</span> <span class=\"n\">LWV</span> <span class=\"n\">ZPD</span> <span class=\"n\">BW7</span> <span class=\"n\">KDQ</span> <span class=\"mi\">6</span><span class=\"n\">QV</span> <span class=\"n\">KTW</span>\n<span class=\"mi\">271</span> <span class=\"bp\">|</span> <span class=\"n\">TBG</span> <span class=\"n\">J62</span> <span class=\"n\">N81</span> <span class=\"n\">BPT</span> <span class=\"n\">JKX</span> <span class=\"mi\">7</span><span class=\"n\">W7</span> <span class=\"n\">QCN</span> <span class=\"n\">ZTH</span> <span class=\"n\">NMC</span> <span class=\"n\">CXV</span>\n<span class=\"mi\">272</span> <span class=\"bp\">|</span> <span class=\"n\">LG3</span> <span class=\"n\">PK7</span> <span class=\"n\">NKQ</span> <span class=\"mi\">14</span><span class=\"n\">C</span> <span class=\"n\">VH6</span> <span class=\"mi\">88</span><span class=\"n\">Q</span> <span class=\"n\">YL8</span> <span class=\"n\">PQ1</span> <span class=\"n\">C89</span> <span class=\"n\">VND</span>\n<span class=\"mi\">273</span> <span class=\"bp\">|</span> <span class=\"n\">C2D</span> <span class=\"mi\">3</span><span class=\"n\">DT</span> <span class=\"mi\">76</span><span class=\"n\">W</span> <span class=\"n\">CPS</span> <span class=\"n\">PQD</span> <span class=\"n\">BFK</span> <span class=\"n\">PL1</span> <span class=\"mi\">396</span>\n<span class=\"mi\">274</span> <span class=\"bp\">|</span> <span class=\"n\">SZR</span> <span class=\"n\">Y93</span> <span class=\"n\">DVM</span> <span class=\"n\">FLH</span> <span class=\"n\">JXH</span> <span class=\"n\">YQQ</span>\n<span class=\"mi\">275</span> <span class=\"bp\">|</span> <span class=\"n\">RRZ</span> <span class=\"n\">GH3</span> <span class=\"mi\">1</span><span class=\"n\">DC</span> <span class=\"n\">BJV</span> <span class=\"n\">HSJ</span> <span class=\"n\">FLB</span> <span class=\"n\">SW6</span>\n<span class=\"mi\">276</span> <span class=\"bp\">|</span> <span class=\"mi\">54</span><span class=\"n\">Y</span> <span class=\"n\">KR8</span> <span class=\"mi\">29</span><span class=\"n\">T</span> <span class=\"n\">NZS</span> <span class=\"n\">F2L</span>\n<span class=\"mi\">277</span> <span class=\"bp\">|</span> <span class=\"n\">TZZ</span> <span class=\"n\">PDD</span> <span class=\"mi\">7</span><span class=\"n\">MR</span> <span class=\"mi\">12</span><span class=\"n\">G</span> <span class=\"n\">Y4V</span>\n<span class=\"mi\">278</span> <span class=\"bp\">|</span> <span class=\"n\">C6X</span> <span class=\"n\">DVX</span> <span class=\"mi\">6</span><span class=\"n\">C3</span>\n<span class=\"mi\">279</span> <span class=\"bp\">|</span> <span class=\"n\">NMX</span> <span class=\"mi\">3</span><span class=\"n\">ZC</span> <span class=\"n\">YXV</span>\n<span class=\"mi\">280</span> <span class=\"bp\">|</span> <span class=\"n\">J5X</span> <span class=\"n\">ZXW</span> <span class=\"mi\">86</span><span class=\"n\">J</span>\n<span class=\"mi\">281</span> <span class=\"bp\">|</span> <span class=\"n\">C9N</span> <span class=\"n\">HKT</span> <span class=\"n\">Z4W</span>\n<span class=\"mi\">282</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">Z7</span> <span class=\"n\">VF6</span> <span class=\"n\">XN7</span>\n<span class=\"mi\">283</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">X8</span> <span class=\"n\">PHB</span>\n<span class=\"mi\">284</span> <span class=\"bp\">|</span> <span class=\"n\">WFH</span> <span class=\"n\">FHY</span>\n<span class=\"mi\">285</span> <span class=\"bp\">|</span> <span class=\"n\">P7V</span> <span class=\"n\">YKX</span>\n<span class=\"mi\">286</span> <span class=\"bp\">|</span> <span class=\"mi\">52</span><span class=\"n\">T</span> <span class=\"n\">TYX</span>\n<span class=\"mi\">287</span> <span class=\"bp\">|</span> <span class=\"mi\">14</span><span class=\"n\">K</span> <span class=\"mi\">75</span><span class=\"n\">R</span>\n<span class=\"mi\">288</span> <span class=\"bp\">|</span> <span class=\"mi\">5</span><span class=\"n\">HD</span> <span class=\"n\">MV6</span>\n<span class=\"mi\">289</span> <span class=\"bp\">|</span> <span class=\"n\">PGC</span> <span class=\"n\">Y5R</span>\n<span class=\"mi\">290</span> <span class=\"bp\">|</span> <span class=\"n\">ZXS</span> <span class=\"mi\">5</span><span class=\"n\">MC</span>\n<span class=\"mi\">291</span> <span class=\"bp\">|</span> <span class=\"n\">M2Z</span> <span class=\"n\">ZZ4</span>\n<span class=\"mi\">292</span> <span class=\"bp\">|</span> <span class=\"mi\">38</span><span class=\"n\">C</span> <span class=\"n\">DYB</span>\n<span class=\"mi\">293</span> <span class=\"bp\">|</span> <span class=\"n\">N84</span> <span class=\"mi\">4</span><span class=\"n\">W6</span>\n<span class=\"mi\">294</span> <span class=\"bp\">|</span> <span class=\"n\">CV9</span> <span class=\"mi\">79</span><span class=\"n\">N</span>\n<span class=\"mi\">295</span> <span class=\"bp\">|</span> <span class=\"n\">NRZ</span> <span class=\"n\">RTQ</span>\n<span class=\"mi\">296</span> <span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"n\">RH</span> <span class=\"n\">W13</span>\n<span class=\"mi\">297</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"n\">T6</span> <span class=\"mi\">483</span> <span class=\"n\">MLV</span>\n<span class=\"mi\">298</span> <span class=\"bp\">|</span> <span class=\"n\">R9B</span> <span class=\"mi\">85</span><span class=\"n\">S</span> <span class=\"n\">KSX</span>\n<span class=\"mi\">299</span> <span class=\"bp\">|</span> <span class=\"n\">RSP</span> <span class=\"mi\">5</span><span class=\"n\">D9</span> <span class=\"n\">L1Y</span> <span class=\"n\">GW2</span>\n<span class=\"mi\">300</span> <span class=\"bp\">|</span> <span class=\"mi\">8</span><span class=\"n\">MK</span> <span class=\"n\">KWF</span> <span class=\"n\">JP2</span> <span class=\"n\">VCM</span> <span class=\"n\">D4D</span> <span class=\"n\">NVR</span>\n<span class=\"mi\">301</span> <span class=\"bp\">|</span> <span class=\"n\">GBL</span> <span class=\"n\">J4M</span> <span class=\"n\">VBW</span> <span class=\"n\">CW3</span> <span class=\"mi\">1</span><span class=\"n\">KX</span> <span class=\"n\">J4G</span> <span class=\"n\">QFX</span>\n<span class=\"mi\">302</span> <span class=\"bp\">|</span> <span class=\"n\">H2Q</span> <span class=\"n\">ZLB</span> <span class=\"mi\">661</span> <span class=\"mi\">8</span><span class=\"n\">PB</span> <span class=\"n\">WBF</span> <span class=\"mi\">7</span><span class=\"n\">GP</span> <span class=\"n\">NHT</span> <span class=\"mi\">2</span><span class=\"n\">WM</span>\n<span class=\"mi\">303</span> <span class=\"bp\">|</span> <span class=\"n\">JHP</span> <span class=\"mi\">1</span><span class=\"n\">S4</span> <span class=\"n\">XB6</span> <span class=\"n\">K87</span> <span class=\"n\">Y1T</span> <span class=\"n\">SAN</span> <span class=\"mi\">82</span><span class=\"n\">H</span> <span class=\"mi\">3</span><span class=\"n\">HJ</span>\n<span class=\"mi\">304</span> <span class=\"bp\">|</span> <span class=\"n\">FRT</span> <span class=\"mi\">5</span><span class=\"n\">LC</span> <span class=\"mi\">8</span><span class=\"n\">VQ</span> <span class=\"mi\">5</span><span class=\"n\">H1</span> <span class=\"n\">T1J</span> <span class=\"n\">RY7</span>\n<span class=\"mi\">305</span> <span class=\"bp\">|</span> <span class=\"mi\">645</span> <span class=\"n\">VX1</span> <span class=\"n\">X7K</span> <span class=\"n\">MKS</span> <span class=\"n\">VCQ</span> <span class=\"n\">C28</span>\n<span class=\"mi\">306</span> <span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"n\">ZY</span> <span class=\"n\">DJH</span> <span class=\"n\">W96</span> <span class=\"n\">KN8</span> <span class=\"mi\">1</span><span class=\"n\">C7</span> <span class=\"n\">N1D</span>\n<span class=\"mi\">307</span> <span class=\"bp\">|</span> <span class=\"n\">CV2</span> <span class=\"n\">ZFL</span> <span class=\"n\">WTN</span> <span class=\"n\">WPW</span> <span class=\"n\">R66</span>\n<span class=\"mi\">308</span> <span class=\"bp\">|</span> <span class=\"n\">DLZ</span> <span class=\"n\">QYX</span> <span class=\"n\">Z6F</span>\n<span class=\"mi\">309</span> <span class=\"bp\">|</span> <span class=\"n\">TFB</span> <span class=\"n\">VT2</span> <span class=\"mi\">272</span>\n<span class=\"mi\">310</span> <span class=\"bp\">|</span> <span class=\"n\">YOU</span> <span class=\"mi\">711</span> <span class=\"mi\">8</span><span class=\"n\">XM</span>\n<span class=\"mi\">311</span> <span class=\"bp\">|</span> <span class=\"n\">Q5L</span> <span class=\"n\">JBB</span> <span class=\"mi\">8</span><span class=\"n\">S9</span>\n<span class=\"mi\">312</span> <span class=\"bp\">|</span> <span class=\"mi\">843</span> <span class=\"n\">BVZ</span> <span class=\"n\">VZD</span>\n<span class=\"mi\">313</span> <span class=\"bp\">|</span> <span class=\"n\">HCL</span> <span class=\"n\">W4D</span>\n<span class=\"mi\">314</span> <span class=\"bp\">|</span> <span class=\"n\">ZHY</span>\n<span class=\"mi\">315</span> <span class=\"bp\">|</span> <span class=\"mi\">5</span><span class=\"n\">CZ</span>\n<span class=\"mi\">316</span> <span class=\"bp\">|</span> <span class=\"mi\">9</span><span class=\"n\">RS</span>\n</code></pre></div>\n<p>this is how the tree more or less looks like: the first column tells you the distance from the root, the rest of each row are all the vertices at that distance.  There is a little part of information missing, which is what branches, but the \"image\" above is enough to answer the question about distances.</p>",
        "id": 326698333,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675895718
    },
    {
        "content": "<p>(again, the picture is a courtesy of awk.)</p>",
        "id": 326698380,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675895745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/lean.20vs.20awk.20performance/near/326694765\">said</a>:</p>\n<blockquote>\n<p>Also, I realize that this is something that you are probably very used to, but to me, the fact that using Lists, Arrays or HashMaps can have significant impact on performance is eye-opening. </p>\n</blockquote>\n<p>We should really have a couple of mandatory computer science courses for all mathematicians. Quick quizz is: what did you think was the difference between List and Array?</p>",
        "id": 326698407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675895759
    },
    {
        "content": "<p>Patrick: clearly the fact that one requires <code>#</code> to type, so it is slower...  <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 326698517,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675895799
    },
    {
        "content": "<p>Also, I still do not know what the difference is, except that I now think that for performance I should use Array.  I know that I cannot pattern-match on Array, though, so I avoid it...</p>",
        "id": 326698683,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675895875
    },
    {
        "content": "<p>On a more serious note, I strongly agree with your assertion, Patrick.  I have been trying to learn some computer science, but, as is obvious from this discussion, I have not learned much yet...</p>",
        "id": 326698887,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675895976
    },
    {
        "content": "<p>The issue is there way too many things that clearly everybody should learn. For instance I know there is a minimal amount of probability theory that every mathematician should know, but I'm very far below that minimum unfortunately.</p>",
        "id": 326699350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675896177
    },
    {
        "content": "<p>And I also find that one of the hardest things is to realize that some knowledge is missing.  In my code, I have been going back and forth between Lists and Arrays <em>all the time</em> and I now suspect that this makes my code very inefficient...</p>",
        "id": 326699583,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675896269
    },
    {
        "content": "<p>To me, the biggest difference between List and Array is that the defs/lemmas have different namespaces.</p>",
        "id": 326699685,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675896316
    },
    {
        "content": "<p>In general if you are doing lots of accesses to an <code>Array</code> thing you will see much much better results than when compared to a linked list. The reason for this is that a <code>List</code> has some start node and then that node points to some other node somewhere else in memory and that node point somewhere else etc. until you reach <code>nil</code>. So if you access a <code>List</code> by index you have two issues:</p>\n<ol>\n<li>You have to traverse the list to get your element</li>\n<li>In computer science we have the principle of locality. What this means is \"if you access things that are close to each other in memory these accesses will be faster\" due to a thing called the cache.</li>\n</ol>\n<p>An array on the other hand gets rid off both of these disadvantages. it does this the following way: Unlike a linked list an array just starts somewhere in memory and then the elements are right next to it. This means that:</p>\n<ol>\n<li>Access is constant in time because you can just add n * the size of your elements to get to the nth element in memory</li>\n<li>If you have accesses that are close to each other or frequently access the same element you can expect this to be much much faster due to the cache.</li>\n</ol>\n<p>There are a couple of other details that you have to keep in mind but this is the basics</p>\n<p>In general what you can do is just: Try to remember the complexities (in computer science they are denoted with the big O notation) of common operations on your datastructures such as:</p>\n<ul>\n<li>insert</li>\n<li>lookup (by a key or an index)</li>\n<li>removal</li>\n</ul>\n<p>And when you have a concrete problem try to think of what operations you are doing most often and then which datastructure can do this best for you. So for example in this case we know: Lookup by key in List O(n), lookup by key in Array also O(n) (it also has to traverse but: will still be faster due to locality principle) but hashmap lookup by key is O(1) so hashmap might be a pretty good idea here.</p>",
        "id": 326699714,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675896326
    },
    {
        "content": "<p>Note that, while i am only presenting disadvantages of lists above there are a couple of advantages to them as well, for example inserting in the front of a list is O(1) while it is O(n) for an Array.</p>",
        "id": 326699888,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675896418
    },
    {
        "content": "<p>And then there's Leany stuff like: inserting at the end of an array is either O(n) or O(1) depending on what else you do with the array.</p>",
        "id": 326700114,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675896498
    },
    {
        "content": "<p>Henrik, thank you so much!  To me, the beginning and the end of an Array/List were simply a matter of visual representation.  I had no idea that there is a higher cost in accessing the last element, as opposed to the first or the middle...</p>",
        "id": 326700214,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675896548
    },
    {
        "content": "<p>Of course, now that I know this, it is completely clear that you should design algorithms to work with the strengths of each different data structure that you use.</p>",
        "id": 326700521,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675896690
    },
    {
        "content": "<p>I simply lacked the concept that data structure had a cost involved for using them and that these costs were structure-specific.  To me, they were simply names for the concept behind them, so Lists and Array were completely interchangeable.  HashMaps are still very hazy.</p>",
        "id": 326700719,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675896771
    },
    {
        "content": "<p>What exactly a HashMap does is a little harder to explain but as a basic understanding it basically suffices to know: It has both insertion and lookup of key value pairs in O(1) so if that is your main operations they are one of the best choices you can have. However you give up properties for this, for example things are not at all ordered in the way they are inserted, they are basically randomly ordered unlike say in an Array where you can determine the ordering precisely yourself.</p>\n<p>If you still want fast lookup but you want your elements to be stored in a certain order you might want to consider a so called <code>RbMap</code> (Rb is for red black because the underlying data structure is called \"red black tree\" due to the way it is implemented) instead which has pretty good times still, O(log n) for insert and lookup (which, if you graph it comes pretty close to \"constant\" as long as your maps dont grow crazy big) and has the nice advantage that your elements are stored in a certain order that you can define by providing an ordering function that compares two elements. (There is also one other reason to use an RbMap or things that are based on an RbMap instead of a HashMap but that's a functional specific thing and a little more complex to explain)</p>",
        "id": 326701682,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675897191
    },
    {
        "content": "<p>Maybe someone should just write up a guide on which datastructures to use (and especially for things like Arrays with their special quirks in what way) that are available in Lean at some point :D</p>",
        "id": 326702113,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675897331
    },
    {
        "content": "<p>(I would argue that most people shouldn't need to understand underlying datastructures to get ~good performance, but I know that is a controversial opinion, and there's still a lot of work to get Lean to that point :)</p>",
        "id": 326702173,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675897355
    },
    {
        "content": "<blockquote>\n<p>for example things are not at all ordered in the way they are inserted, they are basically randomly ordered</p>\n</blockquote>\n<p>While this is is true for the implementation of hashmaps in Lean, this is absolutely not a general property.  For example in Python, insertion order is preserved (intentionally).</p>",
        "id": 326702281,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675897405
    },
    {
        "content": "<p>James, to some extent, what you say is what prompted my question: I wrote the \"same\" program in awk and in lean and got a performance difference of several orders of magnitude.  This is why I asked the question.</p>",
        "id": 326702328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675897435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/lean.20vs.20awk.20performance/near/326702173\">said</a>:</p>\n<blockquote>\n<p>(I would argue that most people shouldn't need to understand underlying datastructures to get ~good performance, but I know that is a controversial opinion, and there's still a lot of work to get Lean to that point :)</p>\n</blockquote>\n<p>Oh I agree fully, I believe that for the majority of users of data structures it is perfectly acceptable that they just know complexities + properties like ordering, locality principle, sharing etc. You do definitely not need an inside view to use them well.</p>",
        "id": 326702424,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675897471
    },
    {
        "content": "<p>some day... some day i will finish my radix balanced tree implementation..............</p>",
        "id": 326702516,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675897528
    },
    {
        "content": "<p>Ok, thank you all for your help!  My initial take-away is to pay more attention to data structures and slowly develop an intuition for what the strengths and weaknesses of them are.  So far, it seems that I should try to use Arrays whenever I was using Lists.</p>",
        "id": 326702652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675897585
    },
    {
        "content": "<p>The arrays instead of lists take is one that will get you quite far but be prepared that eventually you'll meet cases where you do end up wanting a list instead. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 326702780,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675897657
    },
    {
        "content": "<p>Thanks for the heads up!  I certainly meant my assertion as a rough principle, not as a rule written in stone!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 326703182,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675897838
    },
    {
        "content": "<p>Also, I am now satisfied with the state of this thread: my next homework is to learn about Lists, Arrays and HashMaps and try to understand what each of them is good for.</p>",
        "id": 326703413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1675897935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/lean.20vs.20awk.20performance/near/326702173\">said</a>:</p>\n<blockquote>\n<p>(I would argue that most people shouldn't need to understand underlying datastructures to get ~good performance, but I know that is a controversial opinion, and there's still a lot of work to get Lean to that point :)</p>\n</blockquote>\n<p>Theoretically there could be a compiler transform that translates inefficient data-structure like List code to equivalent code using machine friendly data structure like Array. Doesn't something similar happen with nat and gnu mp?</p>\n<p>All (finitary) data structures are isomorphic to tuples of size, shape identifier and an array (finitary version of the polynomial functor):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ogf</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Σ</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I wonder if  those isomorphisms can be used to transform code using say binary trees of <code>nat</code>s to code using <code>ogf catalan nat</code>?</p>",
        "id": 326758341,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1675932576
    },
    {
        "content": "<blockquote>\n<p>Doesn't something similar happen with nat and gnu mp?</p>\n</blockquote>\n<p>Not really, <code>Nat</code> is specified to have this behavior, it is not a compiler transform</p>",
        "id": 326760402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675933269
    },
    {
        "content": "<p>Similarly <code>Array</code> is specified to have the performance characteristics of a dynamic array, even though the model implementation is just a wrapper around a <code>List</code></p>",
        "id": 326760508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675933311
    },
    {
        "content": "<p>The reason both types exist is because it's not like the performance characteristics of one strictly dominates the other. <code>List.cons</code> is a lot slower on arrays than lists</p>",
        "id": 326760646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675933357
    },
    {
        "content": "<p>and with arrays you have to be very careful to preserve linearity (which the current type system does not help much with) while lists are very good as a persistent data structure</p>",
        "id": 326760826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675933417
    },
    {
        "content": "<p>your <code>ogf</code> type doesn't cover </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tree</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tree</span>\n</code></pre></div>\n<p>which I think is pretty finitary</p>",
        "id": 326761422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675933597
    },
    {
        "content": "<p>oh, you want <code>c</code> to be <code>catalan</code> here? That's a pretty crazy rewrite</p>",
        "id": 326761613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675933663
    },
    {
        "content": "<p>And that would be a terrible idea if you want predictable performance. Who knows how expensive it is to evaluate those generating functions</p>",
        "id": 326761894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675933755
    },
    {
        "content": "<p>Ideally those generating functions and isomorphisms should be evaluated compile time and never used during runtime in an efficient implementation. I agree that would be a crazy rewrite.</p>\n<p>The obvious implementation that applies the isomorphism before and the inverse after each function, is also inefficient.</p>",
        "id": 326764437,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1675934518
    },
    {
        "content": "<p>what would be the point of the isomorphism then?</p>",
        "id": 326764650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675934588
    },
    {
        "content": "<p>To pin with which type, one wants the resulting code to work with.<br>\nI guess the original question I should have asked is given an isomorphism between A and B, is there a way to translate code using A to code using B at compile time without calling the isomorphism runtime.</p>",
        "id": 326768683,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1675935796
    },
    {
        "content": "<p>If it is a constant, I guess one could write an elaborator using <code>mkAppM</code> and <code>reduce</code> so that you apply a function and simplify the result. Though what you may want for an isomorphism is to <em>conjugate</em> using two such functions, to transform, work with B, and transform back.</p>",
        "id": 326782990,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675939950
    },
    {
        "content": "<p>Concretely, here is code making a list into an array.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"listAsArray\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List.toArray</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n  <span class=\"n\">reduce</span> <span class=\"n\">e</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"n\">listAsArray</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"c1\">-- #[1, 2, 3, 4, 5]</span>\n</code></pre></div>",
        "id": 326783914,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675940227
    },
    {
        "content": "<p>So just for fun, here is the rest of the code to make a List an Array, calculate with the Array and return. I don't know if there is a case where it helps though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"arrayAsList\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Array.toList</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n  <span class=\"n\">reduce</span> <span class=\"n\">e</span>\n\n<span class=\"n\">macro</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"s2\">\"mapViaArray\"</span>  <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">arrayAsList</span> <span class=\"o\">((</span><span class=\"n\">listAsArray</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"n\">mapViaArray</span>  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- [2, 3, 4, 5, 6]</span>\n</code></pre></div>",
        "id": 326784916,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675940537
    },
    {
        "content": "<p>One more example, of a kind that may actually be useful <span class=\"user-mention\" data-user-id=\"110293\">@Slavomir Kaslev</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mapViaArrayEg</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">mapViaArray</span> <span class=\"n\">f</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mapViaArrayEg</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- [4, 5, 7]</span>\n</code></pre></div>",
        "id": 326790437,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675942385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/lean.20vs.20awk.20performance/near/326790437\">said</a>:</p>\n<blockquote>\n<p>One more example, of a kind that may actually be useful <span class=\"user-mention silent\" data-user-id=\"110293\">Slavomir Kaslev</span> </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mapViaArrayEg</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">mapViaArray</span> <span class=\"n\">f</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mapViaArrayEg</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- [4, 5, 7]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That would be the inefficient \"obvious\" implementation that applies and an isomorphism to and back. An efficient implementation would rewrite the list code to array code compile time without runtime conversions. That's probably hard in general for arbitrary isomorphism though.</p>",
        "id": 326824471,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1675951695
    },
    {
        "content": "<p>+1 to what Mario said -- I meant that we can add more advanced data structures that give \"all around good performance\" without users needing to really understand how/why. There's loads of very cool functional data structures that we can use to get predictably good performance for a majority of use cases :)</p>",
        "id": 326844093,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675956380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/lean.20vs.20awk.20performance/near/326702516\">said</a>:</p>\n<blockquote>\n<p>some day... some day i will finish my radix balanced tree implementation..............</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> , is this the same or similar to <a href=\"https://people.csail.mit.edu/jshun/aspen.pdf\">C-tree</a>'s (and <a href=\"https://www.youtube.com/watch?v=xOyvDwGrk_M\">video</a>)?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"xOyvDwGrk_M\" href=\"https://www.youtube.com/watch?v=xOyvDwGrk_M\"><img src=\"https://uploads.zulipusercontent.net/cfdc91b63d129759eb5f572bbb7ee2dff82d66c6/68747470733a2f2f692e7974696d672e636f6d2f76692f784f7976447747726b5f4d2f64656661756c742e6a7067\"></a></div><p>This seemed quite interesting for Lean when I came across it in Jan. This algo seems to also manually perform drop-reuse, which, I guess, could be handled directly by Perceus (?)</p>",
        "id": 326905557,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1675972830
    },
    {
        "content": "<p>That actually does sound pretty similar, yeah -- <a href=\"https://github.com/scala/scala/pull/8534\">this</a> is what I was referring to, which seems to have independently gotten to a similar design</p>",
        "id": 326907056,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675973333
    },
    {
        "content": "<p>lean's in place updates would definitely help with performance. that's part of why I'm interested in implementing them, to see whether I can get similar performance to ephemeral data structures but without sacrificing performance in the persistent case :D</p>",
        "id": 326907529,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675973501
    }
]