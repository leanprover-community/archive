[
    {
        "content": "<p>Hello everyone,</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  and I were discussing about how lake works in relation to a   recent <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency\">thread</a>. There are two lines of thought in how lake should develop: </p>\n<ol>\n<li>One line of thought would like to see lake develop into a proper build and dependency management tool that can handle a wide range of projects in line with lean's goals to be a programming language beyond just mathematics. This means adapting changes carefully, in a way that works for non-mathlib users as much as mathlib users and developers.</li>\n<li>Another line of thought suggests that given that the current majority of users are largely working on math, it is fine to make quick changes that work for them even if it might not work for the handful of others. These changes are often as simple as copying a lean-toolchain file from the mathlib directory. A crucial concern motivating this is that new math users, including students, are not command-line savvy and complicating their life with more CLI usage is terrible. In fact, if everything could be done within vscode without dealing with lake issues, then they would take that approach.</li>\n</ol>\n<p>One way that has been suggested is to add special sticky defaults for <code>math</code>projects, or maybe add a math option to lake that makes the relevant commands do sane default actions. There are a few drawbacks to this option:</p>\n<ol>\n<li>It adds a bunch of stuff to lake that has to be refactored away when more systematic solutions are implemented (for example dependency management for stable lean toolchains and mathlib releases sometime in the future). This is technical debt.</li>\n<li>Math users still have to do stuff on the CLI.</li>\n</ol>\n<p>Many of the sane defaults that mathlib users request involve UX issues, such as automating the execution of some additional commands after operations like <code>lake update</code>.  This can be accomplished in the extension. So after discussing with <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I have the following suggestion for many of these requests for changes:</p>\n<ol>\n<li>To implement a side panel for lake (as in latex-workshop, vscoq,...) in the vscode extension. This side panel has nice gui options for standard lake operations, with descriptive titles. </li>\n<li>These options implement the sane defaults that math-heavy users seek. </li>\n<li>Changes to lake behaviour that mainly math users consider a necessary and immediate QoL improvement are first implemented here, and only if this is impossible, then changes are added to lake itself.</li>\n<li>lake development continues as it is.</li>\n<li>Math heavy users are encouraged to use the vscode panel.</li>\n</ol>",
        "id": 392138782,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695222765
    },
    {
        "content": "<p>My 2c, lake is doing <em>too much</em> right now, not too little. It also follows the toolchain release cycle, which is slower than I assume mathlib maintainers would like.</p>\n<p>I'd suggest Mathlib maintain a wrapper around lake that encodes mathlib-specific workflows and simplifies CLI stuff for most users. Then, maybe CLI is simple enough for most users, and you don't need vscode side panel stuff?</p>",
        "id": 392141742,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695223614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392141742\">said</a>:</p>\n<blockquote>\n<p>My 2c, lake is doing <em>too much</em> right now, not too little. It also follows the toolchain release cycle, which is slower than I assume mathlib maintainers would like.</p>\n<p>I'd suggest Mathlib maintain a wrapper around lake that encodes mathlib-specific workflows and simplifies CLI stuff for most users. Then, maybe CLI is simple enough for most users, and you don't need vscode side panel stuff?</p>\n</blockquote>\n<p>As Kevin told me, math people dread the CLI. So the less they need the CLI, the better.</p>",
        "id": 392142038,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695223687
    },
    {
        "content": "<p>What we in CS consider a \"simplified CLI\" might already be too much for non-CS people, which is perfectly reasonable. It is not part of their day to day usage.</p>",
        "id": 392142578,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695223824
    },
    {
        "content": "<p>Makes sense. I think a simple vscode extension (separate from the main lean4 extension) to add a side panel should be pretty straightforward?</p>",
        "id": 392142955,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695223930
    },
    {
        "content": "<p>A lot of requests for math specific conveniences are essentially saying \"here's the sane default sequence of commands for math, why can't lake just do it\". But lake doesn't have to do it. The extension can do it too.</p>",
        "id": 392143011,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695223945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392142955\">said</a>:</p>\n<blockquote>\n<p>Makes sense. I think a simple vscode extension (separate from the main lean4 extension) to add a side panel should be pretty straightforward?</p>\n</blockquote>\n<p>Probably. This should add no extra burden to users, since vscode allows extension packs.</p>",
        "id": 392143152,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695223991
    },
    {
        "content": "<p>There will be a menu frontend for many common Lake commands in the next release of the VS Code extension, but it won't magically solve all the issues that people are having with lake.  <br>\nI want to provide more UI support for all things related to projects in the future, but it'll take some time to get there.</p>\n<p>Generally speaking, the same quality standards that apply to Lake should also apply to the extension. Supporting mathlib specially in the VS Code extension is good if it helps Mathlib users be productive, but we shouldn't cut corners and add features that are broken when not using Mathlib. At worst, they should explicitly declare that they are being used in the wrong context.</p>",
        "id": 392143470,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695224070
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> suggests, we could go for a separate extension for this. Then math users could ask their students to use the extension pack</p>",
        "id": 392143650,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695224135
    },
    {
        "content": "<p>(with a careful warning to math users to not touch the lake UI in the next release of the VS Code extension! <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>)</p>\n<p>As a non-math user I am nonetheless excited for the lake frontend :)</p>",
        "id": 392143952,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695224224
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> : I see my suggestion more as a layer of UX on top of lake with sane defaults  that addresses many concerns that non-CS math users have, until lake matures, and the UI parts just implement lake commands.</p>",
        "id": 392144817,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695224507
    },
    {
        "content": "<p>It would be helpful if you were more specific regarding \"sane defaults\". What is the exhaustive list of features that you want your extension to support for Mathlib and projects downstream of Mathlib in particular?</p>",
        "id": 392144864,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695224523
    },
    {
        "content": "<p>Math people would have a more comprehensive list, but I'll start with two:</p>\n<ol>\n<li>For updating toolchains, after<code>lake update</code> for mathlib projects, the lean-toolchain must be copied from mathlib's toolchain. This addresses the concerns of Patrick from the <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency\">linked thread</a>. </li>\n<li>For math projects, run <code>lake exe cache get</code> before starting a build. Currently vscode starts its own build process rather than cache first.</li>\n</ol>",
        "id": 392145735,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695224791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392145735\">said</a>:</p>\n<blockquote>\n<p>Math people would have a more comprehensive list, but I'll start with two:</p>\n<ol>\n<li>For updating toolchains, after<code>lake update</code> for mathlib projects, the lean-toolchain must be copied from mathlib's toolchain. This addresses the concerns of Patrick from the linked thread. Rerun cache, before building.</li>\n<li>For math projects, run <code>lake exe cache get!</code> before starting a build, or after a project has been opened and no oleans are found. Currently vscode starts its own build process.</li>\n</ol>\n</blockquote>\n<ol>\n<li>is on my to-do list (updating lean-toolchain before <code>lake update</code>, though), 2. is already done when creating new math projects downstream of Mathlib (in my local branch) but could be extended to existing projects as well.</li>\n</ol>\n<p>I think both of these should just be supported in the main extension. \"Use this extra extension with this side panel instead of the one provided by the official extension\" risks introducing another layer of confusion.</p>",
        "id": 392148636,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695225656
    },
    {
        "content": "<p>I've filed <a href=\"https://github.com/leanprover/lake/issues/180\">https://github.com/leanprover/lake/issues/180</a> for 1.</p>",
        "id": 392149405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695225867
    },
    {
        "content": "<p>I don't think this (edit: 1.) needs any mathlib customization or a vscode extension</p>",
        "id": 392149440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695225878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392149440\">said</a>:</p>\n<blockquote>\n<p>I don't think this needs any mathlib customization or a vscode extension</p>\n</blockquote>\n<p>I suspect the reason the new extension idea came up is that math users could install it and modify it for QoL improvements over lake, without being held up by the main extension development (for which we just learnt about the planned side panel).</p>",
        "id": 392149687,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695225954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392149687\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392149440\">said</a>:</p>\n<blockquote>\n<p>I don't think this needs any mathlib customization or a vscode extension</p>\n</blockquote>\n<p>I suspect the reason the new extension idea came up is that math users could install it and modify it for QoL improvements over lake, without being held up by the main extension development.</p>\n</blockquote>\n<p>I think this idea is worth considering if there are any examples that we do not intend to implement in the official extension soon, or if they are genuinely incompatible with general usage. The ones listed so far seem perfectly fine to add to the official tooling.</p>",
        "id": 392150763,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695226244
    },
    {
        "content": "<p>Isn't cache math-specific at the moment? A number of sensible default behaviours regarding this (like clean, get, get!) could therefore be  math specific right?</p>",
        "id": 392152719,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695226876
    },
    {
        "content": "<p>As mentioned earlier, I want the extension to support Mathlib and projects downstream of Mathlib specially. It should just keep working fine when used outside of this context and make it clear that commands related to Mathlib cannot be used.  <br>\nFor example, adjusting the \"Lake update\" command to always pull Mathlib's toolchain would not always be a good idea. Adding an \"Update Mathlib\" command that does this and displays a helpful error when used outside of Mathlib would be fine.</p>",
        "id": 392155165,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695227689
    },
    {
        "content": "<p>Right now <code>lake</code> is quick to suggest <code>lake update</code> as a solution, and right now this breaks things more often than not for mathematician users: the moment one thing goes wrong, lake suggests <code>lake update</code>, the user tries it and now lots of things have gone wrong.</p>",
        "id": 392156312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695228124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392155165\">said</a>:</p>\n<blockquote>\n<p>For example, adjusting the \"Lake update\" command to always pull Mathlib's toolchain would not always be a good idea. Adding an \"Update Mathlib\" command that does this and displays a helpful error when used outside of Mathlib would be fine.</p>\n</blockquote>\n<p>I like the idea of an <code>update mathlib</code> command on the proposed side panel. We should also probably give them a <code>reset</code> or <code>clean</code> option for the dependencies in case something goes wrong and users don't know how to get back to a sane state. I guess this is already part of your planned panel. This should go a long way to reduce CLI usage after a new project is initialised.</p>",
        "id": 392157381,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695228530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392156312\">said</a>:</p>\n<blockquote>\n<p>Right now <code>lake</code> is quick to suggest <code>lake update</code> as a solution, and right now this breaks things more often than not for mathematician users: the moment one thing goes wrong, lake suggests <code>lake update</code>, the user tries it and now lots of things have gone wrong.</p>\n</blockquote>\n<p>This is addressed in the next release (<a href=\"https://github.com/leanprover/lean4/pull/2525\">lean4#2525</a>)</p>",
        "id": 392157431,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695228552
    },
    {
        "content": "<p>I thought this was already addressed by the introduction of <code>inherited</code> in the lake manifest, which we have had for a while?</p>",
        "id": 392158142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695228803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392157381\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392155165\">said</a>:</p>\n<blockquote>\n<p>For example, adjusting the \"Lake update\" command to always pull Mathlib's toolchain would not always be a good idea. Adding an \"Update Mathlib\" command that does this and displays a helpful error when used outside of Mathlib would be fine.</p>\n</blockquote>\n<p>I like the idea of an <code>update mathlib</code> command on the proposed side panel. We should also probably give them a <code>reset</code> or <code>clean</code> option for the dependencies in case something goes wrong and users don't know how to get back to a sane state. I guess this is already part of your planned panel. This should go a long way to reduce CLI usage after a new project is initialised.</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/bmLkrQWCTzlCL_uk7G9gpwuT/image.png\">image.png</a><br>\n;-)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bmLkrQWCTzlCL_uk7G9gpwuT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bmLkrQWCTzlCL_uk7G9gpwuT/image.png\"></a></div>",
        "id": 392158170,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695228812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392155165\">said</a>:</p>\n<blockquote>\n<p>Adding an \"Update Mathlib\" command that does this and displays a helpful error when used outside of Mathlib would be fine.</p>\n</blockquote>\n<p>Why not simply not displaying that \"Update Mathlib\" command for project that do not depend on Mathlib?</p>",
        "id": 392164451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695231207
    },
    {
        "content": "<p>I like the idea of having a nice interface in the VSCode extension since I see so many students that are completely unable to use a terminal. But it would be nice to also have a usable client. Also remember some people use other editors. Of course we could say that people who insist to use vim or emacs don't need any interface, but they still need a usable cli.</p>",
        "id": 392164694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695231291
    },
    {
        "content": "<p>That goes back to my post at the top of this thread. Basically there are two concurrent goals. Get lake usable easily for math users who also coincidentally happen to be averse to CLIs, while allowing lake to mature into the build and dependency manager that lean, the language requires. One which properly manages builds, versions of dependencies, version conflicts etc. It also separates the UX concern which might be of immediate relevance for new users or teaching, from the dependency management concern that, I am guessing, will take time to fully develop.</p>",
        "id": 392165549,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695231602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392164451\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392155165\">said</a>:</p>\n<blockquote>\n<p>Adding an \"Update Mathlib\" command that does this and displays a helpful error when used outside of Mathlib would be fine.</p>\n</blockquote>\n<p>Why not simply not displaying that \"Update Mathlib\" command for project that do not depend on Mathlib?</p>\n</blockquote>\n<p>That would be better. Finding a general abstraction that works outside of Mathlib as well would be even better. I was just pointing out the minimum I expect.</p>",
        "id": 392165722,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695231661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I would expect vim or emacs users to be better able to interpret CLI errors and run multiple commands (since they are both terminal-based editors) whereas I would not necessarily expect the same from VSCode users (since it is more UI-focused).</p>",
        "id": 392167170,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695232222
    },
    {
        "content": "<p>I might have said something along these lines before, but let me try to elaborate a bit more.</p>\n<p>One thing that worries me about Lake development is that Mathlib seems to make some Lake development decisions hard to conciliate. I agree with what's been said above about Lake doing <em>too much</em>.</p>\n<p>My read is that if Lean 4 is meant to go beyond mathematics and become a programming language that really stands out, Lake will need to detach from Mathlib needs that are too specific and run free to become the most amazing package manager / build tool it can be.</p>\n<p>For example, I find it a bit weird that there exists <code>lake new foo math</code> because it feels inverted to me. I believe Mathlib can evolve to acquire its own wrapper tools around Lake. Similar to <code>mathlibtools</code>, but written in a language that people can just download a binary instead of having to setup Python (is Lean 4 a good choice?).</p>\n<p>I also think that Mathlib can have its own VS Code extension, full of buttons to run terminal commands in the background so users don't need to reach for the terminal. These buttons can do a bunch of stuff, from calling Lake to performing Git operations.</p>\n<p>If Lake and Mathlib embrace self-contained roles, I think it empowers both fronts to develop to their full potential, with much less tied decisions.</p>",
        "id": 392167613,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695232416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> While I largely agree, there is some difficulties in doing this at the moment. Versioning tools heavily reliant on the Lean toolchain outside of it can be difficult . Namely, distribution is a major problem (how do users get the right version of <code>mathlibtools</code> for their project?). Thus, I think enabling this fully will require something like a <code>lake install</code> to add packages like <code>mathlibtools</code> to the toolchain.</p>",
        "id": 392168377,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695232764
    },
    {
        "content": "<p>Distributing/versioning <code>mathlibtools</code> would become a self-contained responsibility of Mathlib maintainers. They would be free to go with it while barely having to request or wait for changes on Lake. That's the idea</p>",
        "id": 392169278,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1695233095
    },
    {
        "content": "<p>I think separating mathlib dep management from lake is a bad idea in that, </p>\n<ol>\n<li>you would have to build these tools from scratch</li>\n<li>They would largely repeat lake's functionality</li>\n<li>Lean users who also work with mathlibtools would have to deal with two potentially incompatible CLI tools. Imagine working simultaneously with yarn and npm</li>\n<li>Many problems that math users currently face fall into two categories: <br>\na) versioning: all lean projects need this anyway.<br>\nb) UX problems: which can be dealt with by the extension.</li>\n</ol>",
        "id": 392169770,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695233297
    },
    {
        "content": "<p>We need lake to be a full fledged depedency manager like cargo or cabal. Adding too many math specific hacks increases maintenance work, adds redundancy, and distracts from the main goal. Once lake is a proper dependency manager, mathlib should be able to work with it like any other dependency. Additional mathlib specific tooling built on top of it will then be consistent with lake.</p>",
        "id": 392170177,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695233469
    },
    {
        "content": "<p>The most recurrent problems currently facing math users are the complications they face when using lake update or lake cache. This can be alleviated by offering mathlib specific GUI options that <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> is proposing. It also makes lean convenient for those who find CLIs inconvenient.</p>",
        "id": 392170421,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695233567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392170177\">said</a>:</p>\n<blockquote>\n<p>Additional mathlib specific tooling built on top of it will then be consistent with lake.</p>\n</blockquote>\n<p>This was what I understood <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>'s suggestion to be.</p>",
        "id": 392170961,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695233779
    },
    {
        "content": "<p>Ah okay. I got the impression that it would be more akin to lean project. Independent and specific to math</p>",
        "id": 392171176,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695233886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20Development.3A.20Extending.20the.20extension/near/392169278\">said</a>:</p>\n<blockquote>\n<p>Distributing/versioning <code>mathlibtools</code> would become a self-contained responsibility of Mathlib maintainers. They would be free to go with it while barely having to request or wait for changes on Lake. That's the idea</p>\n</blockquote>\n<p>Based on this</p>",
        "id": 392171355,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695233962
    },
    {
        "content": "<p>Also, where non-UX lake features are concerned, most libraries would be happy to have quite a few the features mathlib wants. So it makes sense that they be implemented in lake in a general way</p>",
        "id": 392171617,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695234063
    },
    {
        "content": "<blockquote>\n<p>Also remember some people use other editors. Of course we could say that people who insist to use vim or emacs don't need any interface, but they still need a usable cli.</p>\n</blockquote>\n<p>Tangentially speaking at least for nvim, if there are things VSCode adds that are helpful workflow-wise for anyone not as willing to spend time in the CLI I still will probably try to copy them as long as they're not intrusive, such that hopefully there's at least a kind of parallel for things you'll find in VSCode (e.g. the Refresh File Dependencies thing we of course added to match VSCode, probably a bunch of other things I'm forgetting).</p>",
        "id": 392209319,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695245069
    }
]