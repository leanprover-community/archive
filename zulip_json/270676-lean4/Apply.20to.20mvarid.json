[
    {
        "content": "<p>What is the canonical way to apply a specific lemma to a metavariable? In mathlib4 I found</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mvarId.apply</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">foo</span> <span class=\"o\">[])</span>\n<span class=\"n\">mvarId.apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"n\">mvarId.apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"n\">mvarId.apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Is there one good way or are several of these sensible in different situations (what are these situations?)</p>",
        "id": 360570079,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684856424
    },
    {
        "content": "<p>Are (1), (3) and (4) all just the same?</p>",
        "id": 360570853,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684856624
    },
    {
        "content": "<p>1 and 3 are not good since they don't set the universe levels (unless <code>foo</code> doesn't have universe level parameters, in which case they're fine)</p>",
        "id": 360572267,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684856890
    },
    {
        "content": "<p>Where did you see 4? I'm surprised that that would work since quotations create Syntax, not Exprs. (Were you looking at a use of <code>evalApplyLikeTactic</code> in <code>test/runCmd.lean</code>?)</p>",
        "id": 360572680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684857000
    },
    {
        "content": "<p>Examples:</p>\n<ul>\n<li><code>propext</code> doesn't have universe levels, so <code>mvarId.apply (mkConst ``propext [])</code> or <code>mvarId.apply (mkConst ``propext)</code> is fine</li>\n<li><code>pi_congr</code> does, so you need <code>mvarId.apply (← mkConstWithFreshMVarLevels ``pi_congr)</code></li>\n<li>if you know the levels already, you can do <code>mvarId.apply (mkConst ``foo [u,v])</code> and set them manually</li>\n</ul>",
        "id": 360574198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684857319
    },
    {
        "content": "<p>Thanks Kyle! Yes, it was in <code>test/runCmd.lean</code>, I was just searching for <code>mvarid.apply</code></p>",
        "id": 360575078,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684857518
    },
    {
        "content": "<p>Is there a case where (2) is wrong when setting the universe levels by hand is the correct solution?</p>",
        "id": 360575381,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684857595
    },
    {
        "content": "<p>For <code>mvarId.apply</code>, it's probably never wrong to use (2). Manual universe variables are just a hint (I'd believe there are cases where you need to set them for apply to succeed, but I'm not sure that's in the realm of wrong behavior, just non-ideal).</p>",
        "id": 360576218,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684857776
    },
    {
        "content": "<p>Maybe it'd be worth having <code>.applyConst n</code> somewhere (which would just be<code>.apply (← mkConstWithFreshMVarLevels n)</code>) to help avoid gotchas/ambiguity for future metaprogrammers?</p>",
        "id": 360642028,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1684877298
    },
    {
        "content": "<p>I can put a version of that into mathlib when PRing <code>congrm</code>.</p>",
        "id": 360668312,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684891581
    }
]