[
    {
        "content": "<p>I have quite a few induction principles where the statement is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_ind</span> <span class=\"o\">{</span><span class=\"n\">motive</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfoo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hbar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>When used with <code>induction</code>, this gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"n\">my_ind</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">hfoo</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">hbar</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>These <code>h</code>s are annoying, since they don't appear when using primitive recursors.</p>\n<p>Of course, you can fix the lemma statement to use nicer names for the hypotheses, but now the induction principle itself is hard to read (and prove) due to name shadowing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_ind</span> <span class=\"o\">{</span><span class=\"n\">motive</span><span class=\"o\">}</span>\n    <span class=\"c1\">-- two `foo`s and two `bar`s</span>\n    <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Should <code>induction</code> strip <code>h</code> prefices when naming goals?</p>",
        "id": 383271689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691585743
    },
    {
        "content": "<p>A real example of this happening is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.cons_induction#src\">src#Finset.cons_induction</a></p>",
        "id": 383272376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691585871
    },
    {
        "content": "<p>I'm in favour of removing the <code>h</code>.</p>\n<p>I also think that giving more thought to the names chosen for the hypotheses is more important in Lean4, given the new feature of being able to single out implicit arguments by calling them by their tag.</p>",
        "id": 383275016,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691586255
    }
]