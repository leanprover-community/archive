[
    {
        "content": "<p>How does Lean decide when a parameter is a type index vs a parameter? I am using <code>addDecl</code> to add a structure with one constructor and no indices (that I can see at least), but Lean later shows 2 indices and 0 params in its <code>ConstantInfo</code>. Oddly enough, when I write the structure in a normal Lean file (instead of via <code>addDecl</code>), it correctly reports 0 indices and 2 params (but if anyone wants I can provide the example anyway). </p>\n<p>Is there some heuristic that I'm not aware of?</p>",
        "id": 347735582,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680896985
    },
    {
        "content": "<p>can you show the example (or a simplified version)?</p>",
        "id": 347737085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680897533
    },
    {
        "content": "<p>AFAIK lean tries to promote indices to parameters whenever it can, but I think that logic only applies when you use the <code>inductive</code> command - if you are using <code>addDecl</code> I think you should be able to specify exactly the signature you want</p>",
        "id": 347737309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680897620
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Œ±2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- The thing my metaprogram spits out (almost 1:1)</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">NeZero2</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Œ±2.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±2.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">NeZero.mk2</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Œ±2.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Œ±2.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}},</span>\n  <span class=\"bp\">@</span><span class=\"n\">Ne.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±2.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Œ±2.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Œ±2.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">inst</span><span class=\"o\">))</span>\n  <span class=\"bp\">-&gt;</span>\n    <span class=\"bp\">@</span><span class=\"n\">NeZero2</span> <span class=\"n\">inst</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Same, but more human-readable</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">NeZero'</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">‚Ñï</span><span class=\"o\">]</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñï</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">@</span><span class=\"n\">NeZero'</span> <span class=\"n\">inst</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 347737315,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680897622
    },
    {
        "content": "<p>(without the import mathlib please)</p>",
        "id": 347737368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680897650
    },
    {
        "content": "<p><code>import Mathlib.Init.ZeroOne</code> suffices</p>",
        "id": 347737533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680897718
    },
    {
        "content": "<p>where is the <code>addDecl</code>?</p>",
        "id": 347737642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680897752
    },
    {
        "content": "<p>as written I'm getting 2 parameters on both versions</p>",
        "id": 347737749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680897804
    },
    {
        "content": "<p>Yes, this example works correctly, I'm only getting the indices from <code>addDecl</code>. I just copy-pasted the <code>NeZero2</code> output from a trace from my tactic.  I'd have to take the above code and construct <code>Expr.*</code> manually to reproduce, I thought I'd ask here before that.</p>",
        "id": 347738105,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680897943
    },
    {
        "content": "<p>you can use <code>Qq</code> to construct exprs on the spot</p>",
        "id": 347738191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680897972
    },
    {
        "content": "<p>I couldn't figure out how to make Qq accept <code>NeZero2</code> in the constructor while it is being defined.</p>",
        "id": 347738255,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680898017
    },
    {
        "content": "<p>or write an <code>elab</code> which grabs the input and calls <code>elabTerm</code></p>",
        "id": 347738320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680898059
    },
    {
        "content": "<p>Not sure what you mean? Log the expr before I put it into addDecl? That's what I did.</p>",
        "id": 347738438,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680898121
    },
    {
        "content": "<p>you could use <code>Expr.replace</code> to replace all instances of <code>Nat</code> with <code>Expr.const `NeZero2 []</code>, and write it with <code>Nat</code> instead</p>",
        "id": 347738472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680898143
    },
    {
        "content": "<p>that's the quick and dirty solution at least</p>",
        "id": 347738486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680898153
    },
    {
        "content": "<p>Good idea actually, I'll try that.</p>",
        "id": 347738505,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680898168
    },
    {
        "content": "<p>also if you call <code>repr</code> on the expr it should print something that is mostly usable to be copy pasted as a term of type expr</p>",
        "id": 347738695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680898260
    },
    {
        "content": "<p>...and with that, I discover that I actually simply pass in <code>0</code> as amount of parameters into <code>addDecl</code> for some reason.</p>\n<p>Great thanks for the help nonetheless, and sorry for bothering you, it's been a long day <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 347739213,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680898499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> has marked this topic as resolved.</p>",
        "id": 347740434,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680899060
    }
]