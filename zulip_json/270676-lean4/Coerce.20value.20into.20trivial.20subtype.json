[
    {
        "content": "<p>How do I \"coerce\" a value into a subtype wherever the predicated property is trivially provable?</p>\n<p>So for example, assuming we can prove that \"racecar\" is a palindrome <code>by simp</code>, I would like to just declare  it directly as a value of palindrome subtype like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">good</span><span class=\"o\">:</span>  <span class=\"n\">MySubtype</span> <span class=\"o\">(</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"n\">String.reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">\"racecar\"</span>\n</code></pre></div>\n<p>instead of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bad</span><span class=\"o\">:</span>  <span class=\"n\">Subtype</span> <span class=\"o\">(</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"n\">String.reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"s2\">\"racecar\"</span><span class=\"o\">,</span> <span class=\"n\">property</span><span class=\"o\">:=(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>The best I have been able to do is just reduce it to (better but not ideal) terser notation like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- \"§\"  symbol wraps the str up into the verbosity above</span>\n<span class=\"kd\">def</span> <span class=\"n\">meh</span><span class=\"o\">:</span>  <span class=\"n\">MySubtype</span> <span class=\"o\">(</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"n\">String.reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">§</span><span class=\"s2\">\"racecar\"</span>\n</code></pre></div>",
        "id": 365677388,
        "sender_full_name": "Somo S.",
        "timestamp": 1686602288
    },
    {
        "content": "<p>Would you be happy with <code> := { val := \"racecar\" }</code>? For that you can just use an <code>auto_param</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">P</span> <span class=\"n\">where</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Unfortunately you can't write <code>example : P := ⟨0⟩</code> here.</p>",
        "id": 365679690,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686603081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Coerce.20value.20into.20trivial.20subtype/near/365679690\">said</a>:</p>\n<blockquote>\n<p>Would you be happy with <code> := { val := \"racecar\" }</code>? </p>\n<p>Unfortunately you can't write <code>example : P := ⟨0⟩</code> here.</p>\n</blockquote>\n<p>No I did explore both of those options. I would ideally like to reduce the extra boilerplate down to exactly 0 extra characters.</p>",
        "id": 365681616,
        "sender_full_name": "Somo S.",
        "timestamp": 1686603810
    },
    {
        "content": "<p><del>This type of thing already works with Fin. So with Fin you can simply just say</del>:</p>\n<p><del>example : Fin 5 := 2</del></p>\n<p><del>instead of:</del></p>\n<p><del>example : Fin 5 := <a href=\"http://Fin.mk\">Fin.mk</a> 2 (by simp)</del><br>\n<del>-- OR</del><br>\n<del>example : Fin 5 := {val:=3, isLt:=by simp}</del></p>\n<p><del>Is there any inspiration that can be drawn from the OfNat code that makes Fin work nicely in this way?</del></p>",
        "id": 365681816,
        "sender_full_name": "Somo S.",
        "timestamp": 1686603882
    },
    {
        "content": "<p>It actually doesn't work quite that way --</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n</code></pre></div>",
        "id": 365682646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686604196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Coerce.20value.20into.20trivial.20subtype/near/365682646\">said</a>:</p>\n<blockquote>\n<p>It actually doesn't work quite that way --</p>\n</blockquote>\n<p>Thanks I forgot about that it has a mod based definition. Ok so is there a way to make it work so that it passes when it can be trivially proven and otherwise it fails; all without defining any new notation?</p>",
        "id": 365683564,
        "sender_full_name": "Somo S.",
        "timestamp": 1686604531
    },
    {
        "content": "<p>Numerals are a special case but what's happening there is a coercion and, as Reid pointed out, no proof needs to be supplied, so it doesn't apply to your situation.</p>",
        "id": 365687559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686606197
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Try.20to.20convert.20value.20into.20trivial.20subtype/near/365677388\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Coerce.20value.20into.20trivial.20subtype\">#lean4 &gt; Coerce value into trivial subtype</a> by <span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span>.</p>",
        "id": 365693296,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686608881
    },
    {
        "content": "<p><del>Sorry ignore this thread in favor of <a href=\"#narrow/stream/270676-lean4/topic/Coerce.20value.20into.20trivial.20subtype\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Coerce.20value.20into.20trivial.20subtype</a> </del></p>\n<p><del>... I was only trying to rename the above</del></p>",
        "id": 365693763,
        "sender_full_name": "Somo S.",
        "timestamp": 1686609044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 365693799,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686609059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Try.20to.20convert.20value.20into.20trivial.20subtype/near/365677388\">said</a>:</p>\n<blockquote>\n<p>How do I \"coerce\" a value into a subtype wherever the predicated property is trivially provable?</p>\n<p>So for example, assuming we can prove that \"racecar\" is a palindrome <code>by simp</code>, I would like to just declare  it directly as a value of palindrome subtype like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">good</span><span class=\"o\">:</span>  <span class=\"n\">MySubtype</span> <span class=\"o\">(</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"n\">String.reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">\"racecar\"</span>\n</code></pre></div>\n<p>instead of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bad</span><span class=\"o\">:</span>  <span class=\"n\">Subtype</span> <span class=\"o\">(</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"n\">String.reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"s2\">\"racecar\"</span><span class=\"o\">,</span> <span class=\"n\">property</span><span class=\"o\">:=(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>The best I have been able to do is just reduce it to (better but not ideal) terser notation like so:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- \"§\"  symbol wraps the str up into the verbosity above</span>\n<span class=\"kd\">def</span> <span class=\"n\">meh</span><span class=\"o\">:</span>  <span class=\"n\">MySubtype</span> <span class=\"o\">(</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"n\">String.reverse</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">§</span><span class=\"s2\">\"racecar\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>@<em>@role:moderators</em> I have lost the original post for this thread while attempting to merely edit the title to that of &lt;<a href=\"#narrow/stream/270676-lean4/topic/Try.20to.20convert.20value.20into.20trivial.20subtype\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Try.20to.20convert.20value.20into.20trivial.20subtype</a>&gt; .. for some reason it created a new topic instead of merely changing the title of this one.. Kindly assist in restoring my original post that contained the original question</p>",
        "id": 365694577,
        "sender_full_name": "Somo S.",
        "timestamp": 1686609408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as unresolved.</p>",
        "id": 365704179,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686613934
    },
    {
        "content": "<p>I've glued the threads back together</p>",
        "id": 365704202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686613959
    },
    {
        "content": "<p>Note this this was easier in lean3, where the <code>⟨0⟩</code> notation would have worked: in lean3 anonymous constructor notation made use of <code>auto_param</code>, although not of default values. In lean4, anonymous constructor notation uses neither.</p>\n<p>See <a href=\"https://github.com/leanprover-community/mathlib4/issues/4998\">https://github.com/leanprover-community/mathlib4/issues/4998</a></p>",
        "id": 365712120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686618289
    },
    {
        "content": "<p>shouldn't that issue be on lean4 repo?</p>",
        "id": 365712363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686618422
    },
    {
        "content": "<p>Well, I'm not sure that it's actually a bug report! In neither lean3 nor lean4 does anonymous constructor notation make use of default values. The change between lean3 and lean4 is just the auto_params have become a special case of default values. So it may well be \"expected behaviour\".</p>",
        "id": 365713627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686619075
    },
    {
        "content": "<p>I made this issue mostly to illustrate what I was hoping we could <a href=\"#narrow/stream/287929-mathlib4/topic/triage.20of.20.22Porting.20notes.22\">start doing with porting notes</a> --- have <em>some</em> place to link to that gives an explanation for classes of porting notes.</p>",
        "id": 365713743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686619129
    }
]