[
    {
        "content": "<p>I'm trying to understand when I should expect <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.whnf#doc\">docs#Lean.Meta.whnf</a> to work in the presence of <code>bvar</code>s. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"c1\">-- fine</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.whnf</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"c1\">-- panic</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.whnf</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The second code block fails with a panic but the first one works fine.</p>",
        "id": 408683153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702931459
    },
    {
        "content": "<p>You should never expect it to work with loose bvars. It might accidentally be ok with them in some cases, but you shouldn't rely on it.</p>",
        "id": 408684212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702932029
    },
    {
        "content": "<p>Ok good to know.</p>",
        "id": 408684231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702932050
    },
    {
        "content": "<p>Is there a standard way to convert bvars to fvars and back?</p>",
        "id": 408684284,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702932083
    },
    {
        "content": "<p>Are you in a situation where bvars can't be instantiated with fvars?</p>",
        "id": 408684326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702932114
    },
    {
        "content": "<p>I'm essentially trying to get the <code>whnf</code> of <code>Expr</code>s which are types of parameters of some lambda or a forall.</p>",
        "id": 408684395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702932148
    },
    {
        "content": "<p>If you look through the source for examples of withLocalDecl, instantiate1, and mkForallFvars/mkLambdaFvars, you'll see a design pattern. (On my phone or I might give you a specific example)</p>",
        "id": 408684987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702932461
    },
    {
        "content": "<p>Thanks! I'll take a look at those.</p>",
        "id": 408685107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702932506
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.transform#doc\">docs#Lean.Meta.transform</a> might be an example (I'll check after sending this message)</p>",
        "id": 408685243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702932576
    },
    {
        "content": "<p>Yeah, take a look at its visit functions. Maybe you can use this transform function for what you're doing?</p>",
        "id": 408685481,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702932680
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallTelescope#doc\">docs#Lean.Meta.forallTelescope</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.lambdaTelescope#doc\">docs#Lean.Meta.lambdaTelescope</a> might be what you're looking for. These 'open up' terms of the form <code>forall (a1 : T1) ... (an : Tn), U</code>, making <code>a1 : T1</code>, ..., <code>an : Tn</code> available as temporary local hypotheses. You can then get <code>Ti</code> via <code>fvarId.getDecl</code> and <code>whnf</code> it.</p>",
        "id": 408685535,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702932707
    },
    {
        "content": "<p>Thanks Jannis, I'll try that as well.</p>",
        "id": 408686225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702932981
    },
    {
        "content": "<p>If you're happy with it going through a whole telescope, then those are definitely a good choice rather than using withLocalDecl manually. There are also Bounded variants.</p>",
        "id": 408686649,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702933177
    },
    {
        "content": "<p><code>forallTelescope</code> is working perfectly for my application, but it's a bit cumbersome to extract the name and binder info for each parameter. I can do it by getting the local context and using <code>LocalContext.fvarIdToDecl</code> with various matches, but is there a more direct way?</p>",
        "id": 408695275,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702938688
    },
    {
        "content": "<p>You get the name and binder info immediately if you do withLocalDecl yourself (since this is data you have to pass it).</p>\n<p>There are some functions in the FVarId namespace you can use rather than obtaining the decl first. For example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.FVarId.getBinderInfo#doc\">docs#Lean.FVarId.getBinderInfo</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.FVarId.getUserName#doc\">docs#Lean.FVarId.getUserName</a></p>",
        "id": 408696579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702939444
    },
    {
        "content": "<p>Oh great those two functions will make my life easy :)</p>",
        "id": 408696635,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702939486
    }
]