[
    {
        "content": "<p>I'm currently trying to port the code from here <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/testing/slim_check/sampleable.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/testing/slim_check/sampleable.lean</a> and this is what I've come up with so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Testing.SlimCheck.Gen</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SlimCheck</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Sampleable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">[</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">sample</span> <span class=\"o\">:</span> <span class=\"n\">Gen</span> <span class=\"n\">α</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SampleableFunctor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Functor</span> <span class=\"n\">f</span> <span class=\"n\">where</span>\n  <span class=\"o\">[</span><span class=\"n\">wf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n  <span class=\"n\">sample</span> <span class=\"o\">:</span> <span class=\"n\">Gen</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Gen</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SampleableExt</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">proxyRepr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"o\">[</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">proxyRepr</span><span class=\"o\">]</span>\n  <span class=\"n\">interp</span> <span class=\"o\">:</span> <span class=\"n\">proxyRepr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"c1\">-- TODO what does the trivial interp do here</span>\n  <span class=\"o\">[</span><span class=\"n\">pRepr</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">proxyRepr</span><span class=\"o\">]</span>\n  <span class=\"n\">sample</span> <span class=\"o\">:</span> <span class=\"n\">Gen</span> <span class=\"n\">proxyRepr</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">proxyRepr</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">SampleableExt.ofSampleable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Sampleable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SampleableExt</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SampleableExt.mk</span> <span class=\"n\">α</span> <span class=\"n\">id</span> <span class=\"n\">Sampleable.sample</span> <span class=\"n\">Sampleable.shrink</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SlimCheck</span>\n</code></pre></div>\n<p>Just a little remark before I explain my issue: As far as I understand the <code>SizeOf</code>system every type gets a <code>SizeOf</code> instance thats just <code>fun _ =&gt; 0</code> per default, the inductive compiler is however very much capable of generating sensible instances but you have to explicitly let the type class system pass them to you by carrying all these explicitly mentioned <code>SizeOf</code> instances around. This understanding is based on the fact that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">12</span>\n</code></pre></div>\n<p>evals to 0 but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span>\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span> <span class=\"mi\">12</span>\n</code></pre></div>\n<p>evals to 12, the correct value. Is my understanding based on this observation correct?</p>\n<p>Now to my actual questions:</p>\n<ol>\n<li><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/testing/slim_check/sampleable.lean#L159\">https://github.com/leanprover-community/mathlib/blob/master/src/testing/slim_check/sampleable.lean#L159</a> what does this syntax do here? It appears the author basically wrote a trivial \"custom inference producedure\" for this value here? How does this work? What is the correct way to do stuff like this in Lean 4?</li>\n<li>When defining the rather trivial SampleableExt of Sampleable instance in the above manner the compiler will throw a:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">instSizeOf</span> <span class=\"n\">α</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">Sampleable.wf</span>\n</code></pre></div>\n<p>at me. Now I suspect this is due to the priority stuff that is explicitly set in the file via attributes and I guess I could just change the priorities in the same way and cross fingers that the typeclass inference will work out but I actually want to understand what's going on here and how to fix it</p>",
        "id": 275161095,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647186762
    },
    {
        "content": "<ol>\n<li><code>(interp [] : proxy_repr → α . sampleable.mk_trivial_interp)</code> invokes a tactic to create that function. I think you would write the same as <code>interp : proxy_repr → α := by sampleable.mk_trivial_interp</code> in Lean 4</li>\n</ol>",
        "id": 275164128,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647190712
    },
    {
        "content": "<ol start=\"2\">\n<li>Can you narrow down which field it throws that error at? For instance, comment out one declaration after another</li>\n</ol>",
        "id": 275164267,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647190839
    },
    {
        "content": "<p>Btw, if <code>ShrinkFn</code> gets awkward to use, you could consider making that type into a structure with <code>fn : a -&gt; List a</code> and separately a proof that <code>fn</code> only creates objects that are smaller that the argument.</p>",
        "id": 275164582,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647191185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> it is the <code>shrink</code> field it seems</p>",
        "id": 275165508,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647192548
    },
    {
        "content": "<p>at least it works if i remove it</p>",
        "id": 275165513,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647192560
    },
    {
        "content": "<p>The <code>shrink</code> field on <code>SampleableExt</code> that is</p>",
        "id": 275165573,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647192608
    },
    {
        "content": "<p>You may just have to declare it as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">shrinkFn</span> <span class=\"n\">proxyRepr</span> <span class=\"n\">wf</span>\n</code></pre></div>",
        "id": 275165589,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647192645
    },
    {
        "content": "<p>Thaaaat.....changed nothing :(</p>",
        "id": 275165620,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647192719
    },
    {
        "content": "<p>same error message?</p>",
        "id": 275165849,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647193022
    },
    {
        "content": "<p>Yup, exactly the same</p>",
        "id": 275165925,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647193114
    },
    {
        "content": "<p>What version of Lean are you running? I'm putting this in a buffer and I get no issues:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n<span class=\"c1\">-- \"4.0.0-nightly-2022-03-06\"</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SampleableExt</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">proxyRepr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"o\">[</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">proxyRepr</span><span class=\"o\">]</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">proxyRepr</span>\n  <span class=\"n\">shrink'</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">shrinkFn</span> <span class=\"n\">proxyRepr</span> <span class=\"n\">wf</span>\n</code></pre></div>",
        "id": 275166250,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647193586
    },
    {
        "content": "<p>(My version is the nightly from March 6)</p>",
        "id": 275166258,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647193608
    },
    {
        "content": "<p>No no the issue appears when I try to declare the instance, not with the class itself, sorry if I didnt explain that correctly</p>",
        "id": 275166363,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647193788
    },
    {
        "content": "<p>Can you show the code of the instance?</p>",
        "id": 275166410,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647193832
    },
    {
        "content": "<p>It's at the bottom of the code above</p>",
        "id": 275166437,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647193890
    },
    {
        "content": "<p>it's not declared with the usual where style because i wanted to make 100% sure it was actually related to my class and not some other weird issue</p>",
        "id": 275166484,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647193929
    },
    {
        "content": "<p>You can fix the issue with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Sampleable.wf</span>\n</code></pre></div>\n<p>The square brackets are useful for inferring instances in the declaration itself but it doesn't make that field into an instance.</p>",
        "id": 275166666,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647194183
    },
    {
        "content": "<p>In your instance declaration, the type of <code>Sampleable.shrink</code> mentions the <code>wf</code> field of your <code>Sampleable</code> instance but <code>SampleableExt.mk</code> uses type class resolution to fill in its <code>wf</code> field. That's where the clash comes from</p>",
        "id": 275166733,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647194288
    },
    {
        "content": "<p>ahhh, I see that makes sense, thank you</p>",
        "id": 275167063,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647194688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> has marked this topic as resolved.</p>",
        "id": 275167187,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647194875
    }
]