[
    {
        "content": "<p>I thought that this was impossible, but today I saw something unusual and now I'm not sure I understand the system.</p>\n<p>To summarize my setup, I have a project <code>lean4-test</code> in which there is a <code>elan override set lean4-stage1</code> which points to the stage1 dev build of lean4, which I use for testing lean4 changes in a standalone lake project. Currently I open this in a separate vscode instance from the one I use for the <code>lean4</code> repo itself. This was not entirely by choice, I originally tried opening the test files from the same instance but they get built using stage0 when you do that so it isn't suitable for testing. Having a separate vscode instance means that it uses stage1 in the <code>lean4-test</code> folder and all is well.</p>\n<p>Now, sometimes I want to open a file inside <code>lean4/tests</code>. As mentioned I can't do that from the <code>lean4</code> vscode instance directly, but I can drag those files to the <code>lean4-test</code> instance to check them using stage1, because as I mentioned vscode uses the version of lean set at the project root for everything opened in that vscode instance. However, today I tried to do that and it did not work: the server seems to be using stage0 for files in the <code>tests</code> folder and stage1 in the <code>lean4-test</code> folder, from the <code>lean4-test</code> instance, which I thought was impossible. Did <code>lake serve</code> change the way it resolves which <code>lean</code> to call?</p>\n<p>If I do <code>#eval Lean.versionString</code> from <code>lean4/tests/lean/run/foo.lean</code> I get <code>\"4.0.0, commit \"</code>, and <code>#eval Lean.versionString</code> from <code>lean4-test/Test.lean</code> I get <code>\"4.0.0, commit 45b3c4eabe5c11a904f64535e25ca88d892da893\"</code>, although both link to the same source file from <code>lean4</code> directory. I don't know a good way to ascertain whether I am actually looking at stage0 and stage1 here, but that would make the most sense.</p>",
        "id": 364671500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686255925
    },
    {
        "content": "<p>Not quite an answer to your question, but if you open multiple folders in one VSCode workspace they should use their respective version of Lean. This includes opening a subfolder, e.g. if you have the Lean 4 dev setup and a workspace with both <code>lean4</code> and <code>lean4/src</code> open as folders, the latter will use stage0 whereas the former will use stage1.</p>",
        "id": 364672675,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686256330
    },
    {
        "content": "<p>I'm not using a multiple-folder workspace. I have <code>lean4-stage0</code> set in <code>lean4</code> root and <code>lean4-stage1</code> set in <code>lean4/tests</code>, and my observation is that from the <code>lean4</code> project opening files in <code>tests</code> still uses stage0, but if I open <code>tests</code> as a folder on its own then it uses stage1</p>",
        "id": 364673280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256521
    },
    {
        "content": "<p>but opening <code>lean4/tests</code> from <code>lean4-test</code> (which is a completely separate folder which also has a <code>lean4-stage1</code> override) uses stage0, which I can't make any sense of</p>",
        "id": 364673500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256572
    },
    {
        "content": "<p>where is the logic for this implemented?</p>",
        "id": 364673531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256582
    },
    {
        "content": "<p>What is <code>lean4-test</code>?</p>",
        "id": 364673784,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686256659
    },
    {
        "content": "<p>it's a separate project outside the <code>lean4</code> directory</p>",
        "id": 364673813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256671
    },
    {
        "content": "<p>it's a basic hello world lake project</p>",
        "id": 364673913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256686
    },
    {
        "content": "<p>If you have a <code>stage1</code> override there and you use that as your vsc workspace root, it should use stage1.</p>",
        "id": 364673988,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686256714
    },
    {
        "content": "<p>It does, inside the folder itself</p>",
        "id": 364674051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256737
    },
    {
        "content": "<p>I don't know what you mean by \"opening <code>lean4/tests</code> from <code>lean4-test</code>\". Did you use <code>Add folder to workspace</code>? Then that's a multi-folder workspace.</p>",
        "id": 364674087,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686256747
    },
    {
        "content": "<p>no, I mean opening a file outside the folder</p>",
        "id": 364674138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256765
    },
    {
        "content": "<p>i.e. \"open file\" and navigate outside the folder, or drag a file from another vscode instance to it</p>",
        "id": 364674200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256791
    },
    {
        "content": "<p>Oh, you had <code>lean4-test</code> as the workspace root and then opened a standalone file in <code>lean4/tests</code> ?</p>",
        "id": 364674216,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686256797
    },
    {
        "content": "<p>yes</p>",
        "id": 364674238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256802
    },
    {
        "content": "<p>Ah I see, there might be some logic in vsc or vsc-lean4 that essentially treats that as if it were its own root in the workspace.</p>",
        "id": 364674322,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686256824
    },
    {
        "content": "<p>my experience has been that this will still use stage1 regardless of any overrides in <code>lean4</code> or <code>lean4/tests</code></p>",
        "id": 364674341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256827
    },
    {
        "content": "<p>but today it used stage0 and I don't know why</p>",
        "id": 364674384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256842
    },
    {
        "content": "<p>Vsc 1.79 was released two hours ago, possible that the logic changed.</p>",
        "id": 364674500,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686256892
    },
    {
        "content": "<p>I'm not using it yet</p>",
        "id": 364674539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could it be that instead of using stage0/stage1, it is actually using the default toolchain in elan and that may have changed?</p>",
        "id": 364674549,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686256918
    },
    {
        "content": "<p>do you know how I can determine the version more precisely?</p>",
        "id": 364674648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256940
    },
    {
        "content": "<p>maybe get the olean root</p>",
        "id": 364674703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686256963
    },
    {
        "content": "<p>aha, <code>#eval IO.appDir</code> returns <code>stage0/bin</code> indeed</p>",
        "id": 364674997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686257073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> there are overrides everywhere, I don't see how it could be using the default toolchain</p>",
        "id": 364675110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686257122
    },
    {
        "content": "<p>VS Code runs toolchain binaries directly, not through elan. So, if it some gets a bad setup it can circumvent overrides.</p>",
        "id": 364675681,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686257322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Multiple.20versions.20of.20lean.20in.20one.20vscode.20session/near/364673531\">said</a>:</p>\n<blockquote>\n<p>where is the logic for this implemented?</p>\n</blockquote>",
        "id": 364675760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686257351
    },
    {
        "content": "<p>I don't really understand how work is distributed among <code>lake serve</code>, <code>lean --server</code> and the vscode extension</p>",
        "id": 364675824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686257390
    },
    {
        "content": "<p>Right now, <code>lake serve</code> is essentially just sugar for <code>lake env lean --server &lt;extra user args...&gt;</code></p>",
        "id": 364676353,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686257585
    },
    {
        "content": "<p>VS Code either use its settings for the Lean toolchain path and Lake path or the system version (i.e., whatever <code>lean</code> and <code>lake</code> in path are).</p>",
        "id": 364677221,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686257918
    },
    {
        "content": "<p>FWIW the <code>\"lean4.toolchainPath\"</code> setting is unset in <code>lean4-test</code> in this situation</p>",
        "id": 364677424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686258001
    },
    {
        "content": "<p>Okay so poking around in the output of <code>ps</code> reveals that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"c1\">--worker file:///home/mario/Documents/lean/lean4/tests/lean/run/cdotTests.lean</span>\n</code></pre></div>\n<p>was started by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"c1\">--server /home/mario/Documents/lean/lean4</span>\n</code></pre></div>\n<p>which was started by <code>code</code>, which suggests that elan and/or the vscode configuration is at fault somehow</p>",
        "id": 364680806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686259216
    },
    {
        "content": "<p>apparently the <code>code</code> process for <code>lean4-test</code> has two <code>lean --server</code> children:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"c1\">--server /home/mario/Documents/lean/lean4-test</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">stage0</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"c1\">--server /home/mario/Documents/lean/lean4</span>\n</code></pre></div>\n<p>I guess I need to read the extension code because this shouldn't be possible</p>",
        "id": 364681697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686259585
    },
    {
        "content": "<p>If you open a file outside of a project, my understanding is that kind of works like new special single-file project (in the same way an untitled file does).</p>",
        "id": 364682884,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686260016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Multiple.20versions.20of.20lean.20in.20one.20vscode.20session/near/364673531\">said</a>:</p>\n<blockquote>\n<p>where is the logic for this implemented?</p>\n</blockquote>",
        "id": 364683179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686260128
    },
    {
        "content": "<p>hm, you might be on to something, I tried opening <code>lean4/tests/lean/run/cdotTests.lean</code> in a standalone vscode instance (no \"open folder\") and it used stage0</p>",
        "id": 364683567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686260280
    },
    {
        "content": "<p>despite the fact that <code>elan show</code> in the containing directory tells me that the active toolchain is <code>lean4-stage1</code></p>",
        "id": 364683745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686260347
    },
    {
        "content": "<p>What are the VS Code settings for Lean toolchain and Lake Path when you open the file standalone?</p>",
        "id": 364684279,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686260576
    },
    {
        "content": "<p>there are no custom settings at all</p>",
        "id": 364684385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686260616
    },
    {
        "content": "<p>both of those are set to the empty string</p>",
        "id": 364684553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686260665
    },
    {
        "content": "<p>having read <code>leanclient.ts</code> I'm now sure I don't understand. The command line invocation above clearly shows that the cwd for the <code>lean --server</code> invocation is <code>/home/mario/Documents/lean/lean4</code> but the code never sets <code>cwd</code> when <code>folderUri</code> is null (which I guess is the case when opening a standalone file?), and the cwd of the code process itself is just <code>/home/mario</code> so I have no idea what gave it the idea to look at the lean4 directory and not one of its parents or children. My only theory is that there happens to be a git directory there</p>",
        "id": 364688497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686262388
    }
]