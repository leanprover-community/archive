[
    {
        "content": "<p>How exactly does the following work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span>  <span class=\"c1\">-- { toFoo := { x := 2 } } : Bar</span>\n</code></pre></div>\n<p>Without looking for the source code of <code>Bar</code>, how can I tell with <code>#check</code> / <code>#eval</code> that there is a default of <code>x := 2</code> somewhere? <code>#check Bar.mk</code> reveals no such information.</p>",
        "id": 395579184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696802418
    },
    {
        "content": "<p>The default field seems to produce a <code>mdata</code> in the resulting expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">inspect_lhs</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">inspect: '{ toFoo := { x := 2 } }'</span>\n\n<span class=\"cm\">'Bar.mk' -- app</span>\n<span class=\"cm\">|-'Foo.mk' -- app</span>\n<span class=\"cm\">|   |-'[structInstDefault := true]' '2' -- mdata</span>\n<span class=\"cm\">|   |   |-'OfNat.ofNat' -- app</span>\n<span class=\"cm\">|   |   |   |-'Nat' '[]' -- const</span>\n<span class=\"cm\">|   |   |   |-'2' -- lit</span>\n<span class=\"cm\">|   |   |   |-'instOfNatNat' -- app</span>\n<span class=\"cm\">|   |   |   |   |-'2' -- lit</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">inspect_rhs</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">inspect: '{ toFoo := { x := 3 } }'</span>\n\n<span class=\"cm\">'Bar.mk' -- app</span>\n<span class=\"cm\">|-'Foo.mk' -- app</span>\n<span class=\"cm\">|   |-'OfNat.ofNat' -- app</span>\n<span class=\"cm\">|   |   |-'Nat' '[]' -- const</span>\n<span class=\"cm\">|   |   |-'3' -- lit</span>\n<span class=\"cm\">|   |   |-'instOfNatNat' -- app</span>\n<span class=\"cm\">|   |   |   |-'3' -- lit</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>However, if you used <code>({} : Bar)</code>, you probably already knew that there might have been a default field anyway...</p>",
        "id": 395580485,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696803800
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.StructInst.DefaultFields.findDefaultMissing%3F#doc\">docs#Lean.Elab.Term.StructInst.DefaultFields.findDefaultMissing?</a> useful?  I have not been able to get it to work, but it seems to give information about default fields...</p>",
        "id": 395588993,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696811675
    },
    {
        "content": "<p>How are you building your <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.StructInst.Struct#doc\">docs#Lean.Elab.Term.StructInst.Struct</a> ?</p>",
        "id": 395684289,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696853279
    },
    {
        "content": "<p>Yeah, that is exactly the reason I could not get it to work: it looks like everything is in place, except a constructor for Struct...</p>",
        "id": 395684472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696853333
    },
    {
        "content": "<p>I couldnâ€™t find an ergonomic way either. I am not sure <code>Struct</code> is meant for public consumption. But there is some nice functionality in that file</p>",
        "id": 395685187,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696853573
    },
    {
        "content": "<p>Yes, virtually using <code>Struct</code> in my mind allowed me to do wonders with it!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 395685720,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696853766
    },
    {
        "content": "<p>Note that my question is less \"how do I metaprogram this\" and more \"how am I expected to know that a default is available without looking at the source\"?</p>",
        "id": 395685773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696853795
    },
    {
        "content": "<p>(But the solution to the latter is likely to involve the former!)</p>",
        "id": 395685819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696853816
    },
    {
        "content": "<p>Ah, so your question is more \"how do I know that <code>#check ({} : Bar)</code> is going to work, if I am not allowed to look at the source\".  Not that I have an answer to this either, but if we could get our hands on <code>Struct</code>, I am sure that we could write a command that takes a name as input and returns the default values that it has...</p>",
        "id": 395686126,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696853920
    }
]