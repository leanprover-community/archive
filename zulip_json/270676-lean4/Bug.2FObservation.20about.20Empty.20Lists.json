[
    {
        "content": "<p>Without importing Mathlib <code>[]</code> is treated as an empty list. <br>\nAfter I import mathlib I get a <code>term expected</code> error on all occurrences of <code>[]</code>. I am guessing there is some similar operator in mathlib that has higher precedence. Because when I hover the mouse over the error term I get the docstring : <code>The ore localization of a monoid and a submonoid fulfilling the ore condition</code>. Isn't Lean sufficiently polymorphic to infer that when an argument of a list type is expected <code>[]</code> is an empty list?</p>",
        "id": 360479548,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835028
    },
    {
        "content": "<p>Or is the corresponding syntax parser/notation/macro/elaborator doing its work before any such inference is done?</p>",
        "id": 360479884,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835122
    },
    {
        "content": "<p>that's definitely a missing <code>scoped</code> on a notation</p>",
        "id": 360479917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835135
    },
    {
        "content": "<p>presumably this one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inherit_doc OreLocalization]</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">1075</span> <span class=\"n\">R</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">S</span> <span class=\"s2\">\"‚Åª¬π]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OreLocalization</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 360480110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360480110\">said</a>:</p>\n<blockquote>\n<p>presumably this one</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inherit_doc OreLocalization]</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">1075</span> <span class=\"n\">R</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">S</span> <span class=\"s2\">\"‚Åª¬π]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OreLocalization</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is it possible to make notations \"typed\"?</p>",
        "id": 360480447,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835285
    },
    {
        "content": "<p>it's not a typing problem, it's a parse error</p>",
        "id": 360480501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835303
    },
    {
        "content": "<p>setting scopedness aside this notation is broken</p>",
        "id": 360480564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360480501\">said</a>:</p>\n<blockquote>\n<p>it's not a typing problem, it's a parse error</p>\n</blockquote>\n<p>No I understand this. I also understand that in Lean, notation defines a syntactic unit that is parsed in a certain way, as long as the input string matches this notation (and precedence, longest match....). But in agda's mixfix definitions or haskell's infix operator definitions, the operators only accept arguments of the right type and are suitably polymorphic. I am asking if there is such a feature in lean or a possibility to implement one.</p>",
        "id": 360481517,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835558
    },
    {
        "content": "<p>that feature exists</p>",
        "id": 360481735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835633
    },
    {
        "content": "<p>I can't replicate the issue in OreLocalization.lean, do you have an example?</p>",
        "id": 360482049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835716
    },
    {
        "content": "<p>what is it called (so that I can search in the docs)?</p>",
        "id": 360482051,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835716
    },
    {
        "content": "<p>it doesn't have a name, it's just part of elaboration, notations can be overloaded and are determined based on the types</p>",
        "id": 360482276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835767
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.const</span> <span class=\"bp\">``</span><span class=\"n\">Nat.zero</span> <span class=\"o\">[]</span> <span class=\"c1\">--error</span>\n</code></pre></div>",
        "id": 360482303,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835775
    },
    {
        "content": "<p>do you have an example that imports less than all of mathlib?</p>",
        "id": 360482363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835798
    },
    {
        "content": "<p>that's not even correct, <code>Expr</code> is in the <code>Lean</code> namespace</p>",
        "id": 360482469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684835830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360482363\">said</a>:</p>\n<blockquote>\n<p>do you have an example that imports less than all of mathlib?</p>\n</blockquote>\n<p>sorry there was an <code>open Lean</code></p>",
        "id": 360482528,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835847
    },
    {
        "content": "<p>I have some examples in other projects, but I would have to search for them now.</p>",
        "id": 360482831,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835923
    },
    {
        "content": "<p>And I usually just <code>import Mathlib</code> so I am not sure any of them would be the kind of example you are looking for.</p>",
        "id": 360482957,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684835960
    },
    {
        "content": "<p>Probably importing the file which defines the notation.</p>",
        "id": 360483040,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1684835985
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.OreLocalization.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat.zero</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 360483499,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684836120
    },
    {
        "content": "<p>that was what I had tried, but I did just <code>#check []</code> which seems to work fine, not the expr.const thing</p>",
        "id": 360483571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684836128
    },
    {
        "content": "<p>Yes, this notation is problematic under the local backtracking the Lean parser implements. It should really use <code>noWs</code></p>",
        "id": 360484526,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684836396
    },
    {
        "content": "<p>this is what my patch looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inherit_doc OreLocalization]</span>\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">1075</span> <span class=\"n\">term</span> <span class=\"n\">noWs</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"‚Åª¬π]\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">S</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">OreLocalization</span> <span class=\"bp\">$</span><span class=\"n\">R</span> <span class=\"bp\">$</span><span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>unfortunately you can't use <code>atomic</code> with <code>notation</code></p>",
        "id": 360487375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684837272
    },
    {
        "content": "<p>using <code>noWs</code> alone isn't good enough since it will still clash with array indexing IIUC</p>",
        "id": 360487481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684837313
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4267\">!4#4267</a></p>",
        "id": 360488469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684837618
    },
    {
        "content": "<p>Even with this fix, this notation is just terrible. You still can't write <code>#check [1, 2‚Åª¬π]</code> because it makes <code>‚Åª¬π]</code> a token</p>",
        "id": 360488886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684837732
    },
    {
        "content": "<p>Perfect is the enemy of good ;-) You guys are so obsessed about edge cases :-)</p>",
        "id": 360511361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684843735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360511361\">said</a>:</p>\n<blockquote>\n<p>Perfect is the enemy of good ;-) You guys are so obsessed about edge cases :-)</p>\n</blockquote>\n<p>I was just bitten by this edge case. Also, strictly speaking the empty list is a base case <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> and appears as such in lots of places.</p>",
        "id": 360518866,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684845517
    },
    {
        "content": "<p>Yeah I'm well aware that this sort of attitude to notation is not acceptable :-) Mario has always held us to high standards.</p>",
        "id": 360531490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684848348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360531490\">said</a>:</p>\n<blockquote>\n<p>Yeah I'm well aware that this sort of attitude to notation is not acceptable :-) Mario has always held us to high standards.</p>\n</blockquote>\n<p>At some level I am curious to see how this tension between mathematicians' wild and inconsistent notation and the limits of parsers plays out. Mathematicians did not develop their notation with the foresight that some day they would have to be sufficiently consistent and unique. Lean (and to varying degrees, Coq and Isabelle) seem to do what they can to accommodate all sorts of extensions that work without giving incurable headaches so far. I am waiting to see when the point comes where computer scientists say \"nope, can't do\".</p>",
        "id": 360538005,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684849810
    },
    {
        "content": "<p>This already happens all the time.</p>",
        "id": 360538684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684849937
    },
    {
        "content": "<p>Having the same character for beginning and ending certain parens like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‚à£</mi><mi>x</mi><mi mathvariant=\"normal\">‚à£</mi></mrow><annotation encoding=\"application/x-tex\">|x|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">‚à£</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">‚à£</span></span></span></span> apparently really stinks but we do it</p>",
        "id": 360554368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684853036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360554368\">said</a>:</p>\n<blockquote>\n<p>Having the same character for beginning and ending certain parens like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‚à£</mi><mi>x</mi><mi mathvariant=\"normal\">‚à£</mi></mrow><annotation encoding=\"application/x-tex\">|x|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">‚à£</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">‚à£</span></span></span></span> apparently really stinks but we do it</p>\n</blockquote>\n<p>Interesting. How is each occurrence of <code>|</code> identified as a closing or opening <code>|</code> in say <code>| |x| + |y| + | { v \\in V | ... }| | |</code>? I can imagine that there are much more annoying expressions like that and the notation would have to be defined with great care.</p>",
        "id": 360561131,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684854440
    },
    {
        "content": "<p>In mathlib3 you see a lot of <code>(|x|)</code> because of this issue</p>",
        "id": 360565345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684855351
    },
    {
        "content": "<p><code>[a, b)</code> etc. are also fun, I don't think anyone even <em>considered</em> importing these into a theorem prover because they are just asking for trouble</p>",
        "id": 360565524,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684855393
    },
    {
        "content": "<p>I wouldn't be so sure that it hasn't been considered...</p>",
        "id": 360565602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684855415
    },
    {
        "content": "<p>We definitely considered it. More precisely we considered it was obviously needed, and then we were very disappointed.</p>",
        "id": 360566590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684855636
    },
    {
        "content": "<p>I mean, it should actually work. Except for VS Code's paren highlighter of course.</p>",
        "id": 360567193,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684855760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360567193\">said</a>:</p>\n<blockquote>\n<p>I mean, it should actually work. Except for VS Code's paren highlighter of course.</p>\n</blockquote>\n<p>Yes it already messes up much more basic things for e.g. with markdown + math. An <code>_</code> for subscript in math-mode is read as the beginning of an italics block.</p>",
        "id": 360568040,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684855944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360565524\">said</a>:</p>\n<blockquote>\n<p><code>[a, b)</code> etc. are also fun</p>\n</blockquote>\n<p>Even better would be supporting <code>[a,b[</code> etc if those aren't trouble enough <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 360575375,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684857594
    },
    {
        "content": "<p>Ah, that's what I actually had in mind I guess</p>",
        "id": 360575753,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684857667
    },
    {
        "content": "<p>Of course that would be the ideal notation.</p>",
        "id": 360577628,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684858091
    },
    {
        "content": "<p>Knuth has a whole algorithm in TeX for determining whether a symbol is an opening or closing delimiter. I suppose that it could be mostly reused by the Lean parser?</p>",
        "id": 360578515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684858323
    },
    {
        "content": "<p>I don't have the TeXbook with me here in Banff (yes, I know, I'm sorry), but I can look it up next week</p>",
        "id": 360578655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684858346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Bug.2FObservation.20about.20Empty.20Lists/near/360578515\">said</a>:</p>\n<blockquote>\n<p>Knuth has a whole algorithm in TeX for determining whether a symbol is an opening or closing delimiter. I suppose that it could be mostly reused by the Lean parser?</p>\n</blockquote>\n<p>Doesn't Tex get away with a lot by requiring escaped characters where ambiguities might arise between a character to be printed and a special character?</p>",
        "id": 360580242,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684858762
    },
    {
        "content": "<p>Quoting directly : </p>\n<blockquote>\n<p>Every once in a while it is necessary to treat part of a manuscript as a unit, so you<br>\nneed to indicate somehow where that part begins and where it ends. For this<br>\npurpose TEX gives special interpretation to two ‚Äúgrouping characters,‚Äù which<br>\n(like the escape character) are treated differently from the normal symbols that<br>\nyou type. We assume in this manual that { and } are the grouping characters,<br>\nsince they are the ones used in plain TEX</p>\n</blockquote>",
        "id": 360580930,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684858936
    },
    {
        "content": "<p>In LaTeX, when writing the interval <code>]a, b]</code> with the French convention, you are supposed to write it as <code>\\mathopen{]} a, b]</code>, as the spacing is not correct otherwise. Essentially everyone gets it wrong...</p>",
        "id": 360586171,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1684860205
    },
    {
        "content": "<p>But TeX gets the spacing in <code>|a| + |b|</code> right automatically. So registering <code>[</code> and <code>]</code> as the correct character class should also get you quite far, I think.</p>",
        "id": 360591920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684861601
    }
]