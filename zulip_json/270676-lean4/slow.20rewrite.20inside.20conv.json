[
    {
        "content": "<p>I'm porting my project into lean 4 and ran into an issue while reordering sums.</p>\n<p>In lean 3 the following code runs instantly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">parsing took 48ms</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">d1</span> <span class=\"n\">d2</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"n\">d1</span> <span class=\"bp\">*</span> <span class=\"n\">d2</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"n\">d1</span> <span class=\"n\">d2</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"n\">d1</span> <span class=\"bp\">*</span> <span class=\"n\">d2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span><span class=\"o\">{</span><span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">sum_comm</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">d1</span> <span class=\"n\">hd1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But translated directly into lean 4 the <code>sum_comm</code> inside the <code>conv</code> block takes ages to run.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic execution of Lean.Parser.Tactic.refl took 12.6s</span>\n<span class=\"cm\">tactic execution of Lean.Parser.Tactic.tacticRfl took 11.3s</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">d1</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d2</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"n\">d1</span> <span class=\"bp\">*</span> <span class=\"n\">d2</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d1</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d2</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"n\">d1</span> <span class=\"bp\">*</span> <span class=\"n\">d2</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rhs</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">d1</span> <span class=\"n\">hd1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_comm</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Compiles instantly -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">d1</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d2</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"n\">d1</span> <span class=\"bp\">*</span> <span class=\"n\">d2</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d1</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d2</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"n\">d1</span> <span class=\"bp\">*</span> <span class=\"n\">d2</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">symm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_comm</span><span class=\"o\">,</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">d1</span> <span class=\"n\">hd1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I've obviously found a workaround, but I'm wondering what's causing the difference with lean 3. Does anybody have an idea?</p>",
        "id": 366794790,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1686915621
    },
    {
        "content": "<p>The slow part is calling <code>rfl</code> which conv does by default, so you can see the difference just by trying <code>refl</code> as the first line of the proof, i.e</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">d1</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d2</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"n\">d1</span> <span class=\"bp\">*</span> <span class=\"n\">d2</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d1</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d2</span> <span class=\"k\">in</span> <span class=\"n\">P.divisors</span><span class=\"o\">,</span> <span class=\"n\">d1</span> <span class=\"bp\">*</span> <span class=\"n\">d2</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>takes a long time to fail</p>",
        "id": 366807773,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686918093
    }
]