[
    {
        "content": "<p>There is an issue with the <code>math</code> template for a Lake package: it may use a toolchain that's incompatible with <code>mathlib4</code>'s. That happens because at package initiation time we haven't downloaded <code>mathlib4</code> yet so we can't overwrite <code>lean-toolchain</code> with the one from <code>mathlib4</code>.</p>\n<p>Do you folks have alternative ideas?</p>",
        "id": 325414650,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675348717
    },
    {
        "content": "<p>Yes, this is part of what I called \"lake isn't working\"</p>",
        "id": 325422451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675350603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20lake.20new.20with.20mathlib/near/325414650\">said</a>:</p>\n<blockquote>\n<p>Do you folks have alternative ideas?</p>\n</blockquote>\n<p>Force the materialization of mathlib4, then copy lean-toolchain? It will likely be materialized soon enough anyway after invoking <code>init</code>.</p>",
        "id": 325423985,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675350939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20lake.20new.20with.20mathlib/near/325422451\">said</a>:</p>\n<blockquote>\n<p>Yes, this is part of what I called \"lake isn't working\"</p>\n</blockquote>\n<p>What else didn't work?</p>",
        "id": 325424765,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675351133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as unresolved.</p>",
        "id": 325424786,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675351137
    },
    {
        "content": "<p>Fetching oleans, but we  already discussed that one was because I didn't run it in the correct folder (although the root cause is that it expect users to run it instead of doing it right away when creating the project).</p>",
        "id": 325428532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675352101
    },
    {
        "content": "<p>Do we want Lake to call <code>cache</code> though? I think it's more prudent to leave <code>cache</code> as an independent executable in <code>mathlib4</code> that is supposed to be called manually</p>",
        "id": 325431342,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675352852
    },
    {
        "content": "<p>Until we have a generic and reliable implementation of caching in Lake itself, which would allow us to call <code>lake cache get</code> instead of <code>lake exe cache get</code>, configure custom hosts, inherit caches from dependencies etc, it's better to keep <code>cache</code> as an isolated thing</p>",
        "id": 325432354,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675353129
    },
    {
        "content": "<p>The current implementation of <code>cache</code> is a quick - but not too dirty - solution to speed up the porting effort. With a bit more effort I was able to make it work (unreliably due to <code>curl</code> issues) for downstream projects like <code>mathport</code>.</p>",
        "id": 325433978,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675353557
    },
    {
        "content": "<p>Here I'm specifically talking about creating a new project. If you create a new math project there is <em>nothing</em> you can do before getting mathlib oleans.</p>",
        "id": 325434191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675353604
    },
    {
        "content": "<p>Even then... what if <code>cache</code> downloads corrupted oleans during initialization? I would be more comfortable with <code>cache</code> users calling it manually at its current stage</p>",
        "id": 325434752,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675353734
    },
    {
        "content": "<p>If we mix things together, users might be more confused with errors, thinking that it was a bug in the scope of Lake when it was not. Or simply being confused by how the pieces come together. In my understanding, calling <code>cache</code> from Lake is a bad eng decision. The fundamental flaw is that <code>mathlib4</code> is a downstream project wrt <code>lake</code> and <code>cache</code> is implemented in <code>mathlib4</code> so it would be a weird design to call <code>cache</code> from <code>lake</code></p>",
        "id": 325436493,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675354095
    },
    {
        "content": "<p>That doesn't make sense, <code>lake init _ math</code> clearly makes Lake already conceptually dependent on mathlib4. It would not be a new dependency edge.</p>",
        "id": 325438030,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675354473
    },
    {
        "content": "<p>We can call it a \"soft\" dependency. In fact, it only depends on the fact that there exists a Git repository hosted at <code>github/leanprover-community/mathlib4</code></p>",
        "id": 325438538,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675354596
    },
    {
        "content": "<p>But if we create a \"hard\" dependency, by making Lake rely on some implementation of <code>mathlib4</code> by assuming that it behaves in a certain way, maintaining the thing coherent would be hell: imagine a Lake command that only works for certain versions of <code>mathlib4</code></p>",
        "id": 325438887,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675354688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20with.20mathlib/near/325423985\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20lake.20new.20with.20mathlib/near/325414650\">said</a>:</p>\n<blockquote>\n<p>Do you folks have alternative ideas?</p>\n</blockquote>\n<p>Force the materialization of mathlib4, then copy lean-toolchain? It will likely be materialized soon enough anyway after invoking <code>init</code>.</p>\n</blockquote>\n<p>This PR implements just that <a href=\"https://github.com/leanprover/lake/pull/152\">https://github.com/leanprover/lake/pull/152</a></p>",
        "id": 325469104,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675362804
    },
    {
        "content": "<p>The PR has been merged but I don't know when that change will be released for a new toolchain.</p>\n<p>This is important because the mathlib4 readme needs to be updated with such toolchain suggestion</p>",
        "id": 325585585,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675417864
    }
]