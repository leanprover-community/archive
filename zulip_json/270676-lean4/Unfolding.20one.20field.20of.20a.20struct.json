[
    {
        "content": "<p>Suppose I have a structure with some fields very simple and some fields being very complicated values. I would like to be able to unfold the simple fields so that I can reason about them, while not unfolding the complicated ones, because they will clutter my view. Is there any way of doing this without defining specific lemmas for all the fields I want to unfold?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Lagrange</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foobar</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">37</span> <span class=\"bp\">^</span> <span class=\"mi\">37</span> <span class=\"bp\">-</span> <span class=\"mi\">59</span> <span class=\"bp\">+</span> <span class=\"mi\">34</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">baz.a</span> <span class=\"bp\">+</span> <span class=\"n\">baz.a</span> <span class=\"bp\">+</span> <span class=\"n\">baz.b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">baz.a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"o\">]</span> <span class=\"c1\">-- unfolds baz.b definition, which I don't want</span>\n</code></pre></div>\n<p>Is there some name for the fact that <code>baz.a = 1</code> that I can use to rewrite with here?</p>",
        "id": 406359055,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701885990
    },
    {
        "content": "<p>You can do :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">baz.a</span> <span class=\"bp\">+</span> <span class=\"n\">baz.a</span> <span class=\"bp\">+</span> <span class=\"n\">baz.b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">baz.a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">baz.a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There is probably a better way to do it.</p>",
        "id": 406360153,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1701886403
    },
    {
        "content": "<p>There is no autogenerated lemma of that form, it is true by defeq so you can do what Arthur says or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">baz.a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or maybe even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"n\">baz.a</span> <span class=\"k\">with</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>(untested) which should do the same thing</p>",
        "id": 406360328,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701886463
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foobar</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">37</span> <span class=\"bp\">^</span> <span class=\"mi\">37</span> <span class=\"bp\">-</span> <span class=\"mi\">59</span> <span class=\"bp\">+</span> <span class=\"mi\">34</span>\n\n<span class=\"c1\">-- setting to 37 to prevent `conv` from closing the resulting goal by `rfl`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">baz.a</span> <span class=\"bp\">+</span> <span class=\"n\">baz.a</span> <span class=\"bp\">+</span> <span class=\"n\">baz.b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">baz.a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">baz.a</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ⊢ { a := 1, b := 2 + 2 * 37 ^ 37 - 59 + 34 }.a + { a := 1, b := 2 + 2 * 37 ^ 37 - 59 + 34 }.a +</span>\n<span class=\"cm\">      baz.b * ({ a := 1, b := 2 + 2 * 37 ^ 37 - 59 + 34 }.a - 1) = 37</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 406360385,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701886492
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <code>change ... with ...</code> hasn't been implemented yet)</p>",
        "id": 406360456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701886522
    },
    {
        "content": "<p>Ok thanks, I'll think about these options</p>",
        "id": 406360608,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701886579
    }
]