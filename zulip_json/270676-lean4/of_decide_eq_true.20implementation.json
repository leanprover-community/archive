[
    {
        "content": "<p>Why is the theorem <em>of_decide_eq_true</em> (from Prelude.lean) ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">generalizing</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">inst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span>  <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ne_true_of_eq_false</span> <span class=\"o\">(</span><span class=\"n\">decide_eq_false</span> <span class=\"n\">h₁</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>.... not simply implemented like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">inst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool.noConfusion</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 347620335,
        "sender_full_name": "Mike Schneeberger",
        "timestamp": 1680862329
    },
    {
        "content": "<p>you are welcome to PR it (no promises about it getting in though, I'm not the one with the big green button when it comes to changes to core)</p>",
        "id": 347704940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680885829
    },
    {
        "content": "<p>the main important aspect would be ensuring that both implementations compile to an <code>unreachable</code>, but I think that will be the case here</p>",
        "id": 347705036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680885862
    },
    {
        "content": "<p>actually since this is a <code>theorem</code> I guess the compilation doesn't even matter here. Proofs in core are sometimes a bit weird since they aren't the focus</p>",
        "id": 347705400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680885998
    },
    {
        "content": "<p>the more idiomatic proof would use <code>nomatch h</code> instead of <code>noConfusion</code> directly</p>",
        "id": 347705508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680886041
    },
    {
        "content": "<p>you might even be able to leave off the <code>isFalse</code> case entirely</p>",
        "id": 347705598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680886074
    },
    {
        "content": "<p>It may have been hand-ported from Lean 3 long ago and never given any further attention.</p>",
        "id": 347730228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680894899
    },
    {
        "content": "<p>yes, <code>nomatch h</code> works as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">inst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Concerning a PR, it says in the contribution guidelines to hold off on submitting PRs. I guess, the core team will eventually clean up Prelude.lean and simplify theorems like <code>of_decide_eq_true </code> that are hand-ported from Lean3 anyway. Or, what do you think?</p>\n<p>Thanks a lot for the clarifications!</p>",
        "id": 348158007,
        "sender_full_name": "Mike Schneeberger",
        "timestamp": 1681113922
    },
    {
        "content": "<p>It is unlikely that anything will happen to these proofs unless contributors care to make modifications (and there is a chance that such modifications will be seen as a nuisance), which is why they tend to sit unmodified for a long time</p>",
        "id": 348174203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681119957
    },
    {
        "content": "<p>In case you hadn't seen from another thread, the main core lean developer has been in the process of changing jobs and there is a backlog of issues right now; this issue, whilst cool, can probably wait until the developers remove the warning that they are overwhelmed from the lean 4 contributions readme</p>",
        "id": 348182100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681122581
    }
]