[
    {
        "content": "<p>Is there a way to transform <code>Syntax</code> representing directly an <code>Expr</code> into an <code>Expr</code>? For instance, in the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"%dynDelab\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">dynDelab</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">dynDelab</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>how could I fill the sorry? I tried using <code>elabTerm</code> but then I got the following error in <code>t</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span><span class=\"o\">,</span> <span class=\"n\">got</span>\n  <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems that Lean delaborated it back to the Expr, instead of Nat... I printed the representation of the output of <code>elabTerm</code> and it was something a lot bigger than the original Expr:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">Lean.Expr.app</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Expr.const</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Name.mkStr1</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.lit</span> <span class=\"o\">(</span><span class=\"n\">Lean.Literal.strVal</span> <span class=\"s2\">\"Nat\"</span><span class=\"o\">))))</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">List.nil</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">1621</span><span class=\"o\">)])</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">1622</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>I believe I need something like <code>deriving Read</code> from Haskell in the type <code>Expr</code></p>",
        "id": 347258685,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1680731004
    },
    {
        "content": "<p>So, what you are giving <code>elabTerm</code> here is a <code>Syntax</code> object that described the construction of an <code>Expr</code> object. Not actually an <code>Expr</code> object itself (you are basically confusing the meta level and the language level here).  I guess what you really want is more or less an <code>eval</code> type of stuff? I know we have <code>evalConst</code> but I'm not sure whether we also have <code>evalExpr</code>.</p>",
        "id": 347263781,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680733566
    },
    {
        "content": "<p>Tangentially; we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ToExpr\">docs#ToExpr</a> for turning a value into the <code>Expr</code> that represents it; do we have something similar that converts things to the corresponding syntax?</p>",
        "id": 347265663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680734698
    },
    {
        "content": "<p>Or is the idea to convert to an expression, and then hand that to the global delaborators?</p>",
        "id": 347265712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680734735
    },
    {
        "content": "<p>We do have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.evalExpr#doc\">docs4#Lean.Meta.evalExpr</a></p>",
        "id": 347269133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680736755
    },
    {
        "content": "<p>to be more precise, what is needed for <code>dynDelab%</code> is to call <code>elabTerm</code> to convert the result into an <code>Expr</code> representing an expr, and then call <code>evalExpr</code> on the result to turn it into the expr you want</p>",
        "id": 347269417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680736887
    },
    {
        "content": "<p>Regarding <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's question, to turn an expr into syntax requires the delaborator, the entry point is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.delab#doc\">docs4#Lean.PrettyPrinter.delab</a></p>",
        "id": 347269683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680737038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20Expr/near/347265663\">said</a>:</p>\n<blockquote>\n<p>Tangentially; we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ToExpr\">docs#ToExpr</a> for turning a value into the <code>Expr</code> that represents it; do we have something similar that converts things to the corresponding syntax?</p>\n</blockquote>\n<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Quote.quote#doc\">docs4#Lean.Quote.quote</a>. There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.exprToSyntax#doc\">docs4#Lean.Elab.Term.exprToSyntax</a> for embedding an <code>Expr</code> into syntax, which can often work.</p>",
        "id": 347284320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680745861
    },
    {
        "content": "<p>Can I use any of these in MacroM?</p>",
        "id": 347444105,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680792850
    },
    {
        "content": "<p>thanks, I could get exactly the effect I wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"%dynDelab\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"bp\">←</span> <span class=\"n\">unsafe</span> <span class=\"o\">(</span><span class=\"n\">evalExpr</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idNat'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">dynDelab</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">dynDelab</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">idNat'</span> <span class=\"c1\">-- idNat' (a : Nat) : Nat</span>\n</code></pre></div>",
        "id": 347457435,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1680795813
    }
]