[
    {
        "content": "<p>is it possible for simp to normalize <code>getElem</code>s to use either <code>Fin arr.size</code> or <code>Nat</code> in the index? Right now both are simp-normal, and rewriting between these forms is quickly becoming not worth the pain <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>\n<p>I'm guessing the <code>Nat</code>-indexed access is quite reasonable to be simp-normal, and everything should be rewritten into that form.</p>",
        "id": 362611217,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685585720
    },
    {
        "content": "<p>(I still am suspicious whether the <code>Fin</code> form is even necessary, but I haven't tried removing it)</p>",
        "id": 362611317,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685585803
    },
    {
        "content": "<p>I'm also realizing the value of moving a <code>SetElem</code> class into std so we can do similar normalization for <code>set</code>s. I'm doing lots of manual proving that should just be solved by simp.</p>",
        "id": 362611547,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685585989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/array.20getelem.20simp.20nf/near/362611217\">said</a>:</p>\n<blockquote>\n<p>is it possible for simp to normalize <code>getElem</code>s to use either <code>Fin arr.size</code> or <code>Nat</code> in the index? Right now both are simp-normal, and rewriting between these forms is quickly becoming not worth the pain <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>\n</blockquote>\n<p>are you sure? I see this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">getElem_fin</span> <span class=\"o\">[</span><span class=\"n\">GetElem</span> <span class=\"n\">Cont</span> <span class=\"n\">Nat</span> <span class=\"n\">Elem</span> <span class=\"n\">Dom</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Cont</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i.1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>which suggests that the <code>Nat</code> form is simp-normal</p>",
        "id": 362611939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685586252
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> that does suggest that</p>",
        "id": 362612281,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685586502
    },
    {
        "content": "<p>why is that one not triggering? I will investigate</p>",
        "id": 362612303,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685586519
    },
    {
        "content": "<p>okay, I think this is just me not understanding simp :) I have a hypothesis roughly like <code>\\forall (i : Fin arr.size), arr[i] ...</code>, and simp doesn't rewrite that <code>getElem</code> until the hypothesis is specialized.</p>",
        "id": 362615635,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685588602
    },
    {
        "content": "<p>er, no, it is rewriting it</p>",
        "id": 362615810,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685588718
    },
    {
        "content": "<p>hm. cannot reproduce anymore</p>",
        "id": 362615821,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685588727
    }
]