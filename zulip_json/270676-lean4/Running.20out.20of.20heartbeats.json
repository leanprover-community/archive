[
    {
        "content": "<p>I'm encountering a new problem in my formalization project in that Lean is beginning to complain about running out of heartbeats and returning weird errors.  I can temporarily get around this by setting the max_heartbeat parameter to something large like 400000, and also splitting my project into many files each of which are compiled separately seems to help, but I am wondering if I am somehow coding extremely inefficiently (certainly Lean is now taking quite some time to compile each file).  Is there a way to detect which portions of a Lean proof are particularly resource intensive?</p>",
        "id": 398411241,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698210444
    },
    {
        "content": "<p>Are you familiar with locally setting parameters? For example, <code>set_option maxHeartbeats 400000 in theorem myResult ...</code> lets you set it theorem-by-theorem. You can also put <code>set_option</code> inside of a <code>section ... end</code> block to localize it.</p>",
        "id": 398411564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698210647
    },
    {
        "content": "<p>(I'll mention also that there's a <code>#where</code> command you can use to see the current values of all set options, in case that's helpful.)</p>",
        "id": 398411687,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698210727
    },
    {
        "content": "<p>Okay... but is the standard thing to do just to increase the maxHeartbeats parameter for any theorem that Lean starts barfing at?  I'm wondering if its a sign that I'm relying too much on overpowered tactics or something.</p>",
        "id": 398411924,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698210879
    },
    {
        "content": "<p>You can also turn on profiler messages with <code>set_option trace.profiler true</code> to see what might be taking the most time</p>",
        "id": 398412067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698210965
    },
    {
        "content": "<p><code>maxHeartbeats</code> is not ideal... maybe <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> has tips, since he seems to have been leading the charge to eliminate them from mathlib4</p>",
        "id": 398412156,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698211058
    },
    {
        "content": "<p>If you're able to localize the slow theorem and you're able to share it here, maybe it's possible to give more precise advice, even if it's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 398412411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698211239
    },
    {
        "content": "<p>Okay... but it's a mess, and it relies on other results in my project, so it won't compile standalone</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iterated_rev</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">):</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">((</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">|^</span><span class=\"o\">(((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hsn</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hsn</span><span class=\"o\">]</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_rpow</span><span class=\"o\">]</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">bound</span> <span class=\"o\">:=</span> <span class=\"n\">iterated</span> <span class=\"o\">(</span><span class=\"n\">attainable_reflect</span> <span class=\"n\">h2</span> <span class=\"n\">hsn</span><span class=\"o\">)</span> <span class=\"n\">h3</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">attainable_zero_eq_one</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_inv</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">div_rpow</span><span class=\"o\">,</span> <span class=\"n\">div_rpow</span><span class=\"o\">,</span> <span class=\"n\">inv_rpow</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rcases</span> <span class=\"n\">bound</span> <span class=\"k\">with</span> <span class=\"n\">bound</span> <span class=\"bp\">|</span> <span class=\"n\">bound</span>\n    <span class=\"bp\">.</span> <span class=\"n\">left</span>\n      <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n        <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">this</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_cancel</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_of_le</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_eq_div</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_sub</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rpow_le_rpow_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n      <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"n\">bound</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">.</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n        <span class=\"bp\">.</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n        <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n    <span class=\"n\">right</span> <span class=\"c1\">-- could possibly shorten this proof by judicious use of swap, let, all_goals, and try</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n      <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_cancel</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_of_le</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_eq_div</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_sub</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rpow_le_rpow_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n    <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"n\">bound</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n      <span class=\"bp\">.</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">.</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n      <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>It was the second <code>convert</code> that triggered the error, but I don't know whether that's because <code>convert</code> is particularly expensive.  I'm also using an experimental extension to <code>positivity</code> that could possibly be the culprit.</p>",
        "id": 398412546,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698211362
    },
    {
        "content": "<p>protip, the <code>{}</code> after <code>all_goals</code> is not necessary</p>",
        "id": 398412897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698211639
    },
    {
        "content": "<p>Unfortunately it most likely does need to be a MWE (i.e. fully working with all imports) to debug this, meaning you may need to extract or stub out all the definitions from your project (or link to your project and get someone else to do the hatchet job)</p>",
        "id": 398413029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698211737
    },
    {
        "content": "<p>If you do <code>set_option trace.profiler true</code> and then increase the maxHeartbeats until the proof works, it might be interesting to see which tactics are taking the most time. Maybe the second <code>convert</code> is merely unlucky to be the last straw, or maybe it really is expensive. (There's nothing that looks like it ought to be particularly slow from just a cursory read-through.)</p>",
        "id": 398413037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698211742
    },
    {
        "content": "<p>It's also probably not <code>convert</code> itself that is expensive, but rather some definitional equality goal or typeclass inference problem it is kicking up</p>",
        "id": 398413075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698211789
    },
    {
        "content": "<p>Do heartbeats reset to zero at the end of each theorem?  This particular result is compiling with heartbeats = 400000, so one option I have is simply to set it equal to this high value for this theorem alone and not try to figure out what is going wrong</p>",
        "id": 398413226,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698211901
    },
    {
        "content": "<p>Yes, it does. Mathlib also has a <code>count_heartbeats in</code> command to generate a reasonable maxHeartbeats count automatically -- just put it right before your <code>theorem</code>. (The reason for this tool, rather than just not having a maxHeartbeats, is that for a large library like mathlib, these act as high-water marks to detect when certain particularly slow lemmas gave gotten unacceptably slower due to unrelated changes.)</p>",
        "id": 398413535,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698212116
    },
    {
        "content": "<p>The trace profiler is reporting how many seconds it takes to prove the lemma (about 40 seconds right now), as well as the linter  (0.3 s), but not any finer detail than that.  Would one have to try to break up the lemma into sublemmas to isolate the source of the high compute cost?</p>",
        "id": 398413592,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698212155
    },
    {
        "content": "<p>You can <code>set_option trace.profiler true in</code> before the statement and then you'll get a detailed breakdown of times taken by many things including all tactics. You can unfold the trace further by clicking on the little triangles.</p>",
        "id": 398413819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698212313
    },
    {
        "content": "<p>Just chase the big number.</p>",
        "id": 398413839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698212331
    },
    {
        "content": "<p>Is it normal for the \"count_heartbeats\" command to throw up  an \"unexpected token\" error while also reporting the number of heartbeats used?</p>",
        "id": 398414399,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698212766
    },
    {
        "content": "<p>Is there an <code>in</code> after <code>count_heartbeats</code>? It sounds like it might be missing -- if it is, then it will complain about a syntax error but likely continue to operate.</p>",
        "id": 398414484,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698212838
    },
    {
        "content": "<p>Either <code>set_option trace.profiler true in</code> or <code>count_heartbeats in</code> in the line before my lemma will report an unexpected token error while also reporting data.  But I don't see how the triangles Kevin says should be there to unfold the trace further.  This is what I see:</p>\n<p><a href=\"/user_uploads/3121/3Xjj_i38t3PfQwREjzvgR1e6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3Xjj_i38t3PfQwREjzvgR1e6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/3Xjj_i38t3PfQwREjzvgR1e6/image.png\"></a></div>",
        "id": 398414674,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698212986
    },
    {
        "content": "<p>Oh wait, I see the triangles now.</p>",
        "id": 398414761,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698213023
    },
    {
        "content": "<p>Oh, that syntax error is because docstrings are part of the <code>lemma</code> command syntax (I am aware of this, but I often forget and re-surprise myself). The <code>count_heartbeats in</code> should come <em>before</em> the <code>/--</code> (same for <code>set_option ... in</code>). The results should still be valid in this case despite the syntax error.</p>",
        "id": 398414944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698213172
    },
    {
        "content": "<p><code>convert bound using 2</code> is indeed the bottleneck, in particular these two defeq checks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">))</span>\n\n <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=?=</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 398414947,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698213175
    },
    {
        "content": "<p>Each of the convert's is taking 23 seconds each, with defeq being the problem</p>",
        "id": 398414968,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698213195
    },
    {
        "content": "<p>Hmm.  What would you recommend to deal with this?  I could avoid using convert and write out my subgoals manually.</p>",
        "id": 398415088,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698213289
    },
    {
        "content": "<p>if you are lucky, this is due to a bug in lean which can be fixed once the problem is isolated</p>",
        "id": 398415409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698213513
    },
    {
        "content": "<p>Should I try to create a MWE then?  (Or has Mauricio already managed to make a version of my code run already?)</p>",
        "id": 398415557,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698213609
    },
    {
        "content": "<p>Actually, based on Mauricio's diagnosis I think the fix will be to add <code>irreducible</code> more aggressively in the library</p>",
        "id": 398415574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698213616
    },
    {
        "content": "<p>Or if you want to try two random things first, it seems like this might be the stage of <code>convert</code> where it tries to close goals using <code>rfl</code>. You might be able to speed it up by using <code>convert bound using 3</code> (or with a higher number still), which will involve a defeq check with smaller terms. You might also have success using <code>with_reducible convert bound using 2</code>, which causes it to use less-expensive defeq checks here (though this has a chance of failing spectacularly).</p>",
        "id": 398415674,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698213653
    },
    {
        "content": "<p>maybe we should just do that by default</p>",
        "id": 398415799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698213718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398415557\">said</a>:</p>\n<blockquote>\n<p>Should I try to create a MWE then?  (Or has Mauricio already managed to make a version of my code run already?)</p>\n</blockquote>\n<p>I replaced the previous definition of <code>iterated_rev</code> at <code>prev_bound.lean</code> from <a href=\"http://github.com/teorth/symmetric_project\">http://github.com/teorth/symmetric_project</a> by Tao's code above, if anyone wants to run it locally too.</p>",
        "id": 398415854,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698213729
    },
    {
        "content": "<p>changing <code>convert bound with 2</code> to <code>convert bound with 3</code> reduces the run time from 43 secs to 8 secs but the proof breaks down now (it is trying to match things at so granular a level that they don't actually match any more).</p>",
        "id": 398416010,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698213828
    },
    {
        "content": "<p>does <code>with_reducible convert bound using 2</code> help?</p>",
        "id": 398416349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698213990
    },
    {
        "content": "<p>I'll also mention <code>convert (config := {closePost := false}) bound with 2</code> if you want to just turn off this slow feature of <code>convert</code>, at the cost of perhaps ending up with more goals than expected.</p>",
        "id": 398416374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698213998
    },
    {
        "content": "<p>Similarly for <code>with_reducible convert bound using 2</code>... run time is about 9 seconds, but it is matching the wrong things</p>",
        "id": 398416387,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698214005
    },
    {
        "content": "<p>e.g., trying to match <code>Preorder.toLE = instLEReal</code></p>",
        "id": 398416429,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698214029
    },
    {
        "content": "<p>oh, if <code>using 2</code> is also giving false goals then you will need to reduce it</p>",
        "id": 398416433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698214031
    },
    {
        "content": "<p><code>convert bound with 2</code> works, it's just extremely expensive</p>",
        "id": 398416507,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698214062
    },
    {
        "content": "<p>the general idea is to set it to the highest value for which the subgoals are actually true</p>",
        "id": 398416530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698214077
    },
    {
        "content": "<p>setting aside runtime concerns</p>",
        "id": 398416607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698214092
    },
    {
        "content": "<p>Yeah, which in my case is 2</p>",
        "id": 398416707,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698214141
    },
    {
        "content": "<p>By the way, using mathlib master (and therefore Lean 4.2.0-rc4), count_heartbeats reports \"Used 75262 heartbeats, which is less than the current maximum of 200000.\"</p>",
        "id": 398416714,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698214145
    },
    {
        "content": "<p>The mathlib bump exposes a possible linarith bug in roots_deriv.lean:77:4, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">neg_nonpos_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">Linarith.nat_cast_nonneg</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Linarith.nat_cast_nonneg</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">MonoidWithZero.toZero</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">NegZeroClass.toZero</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>In this particular case I just replaced linarith by <code>exact mne.symm</code>, but it might be worth looking at. Other than this and replacing <code>powersetLen</code> by <code>powersetCard</code> everywhere, the update works fine.</p>",
        "id": 398416935,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698214276
    },
    {
        "content": "<p><code>convert (config := {closePost := false}) bound with 2</code> runs blindingly fast, but creates werid goals like <code>HMul.hMul = HDiv.hDiv</code></p>",
        "id": 398416945,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698214282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398416935\">said</a>:</p>\n<blockquote>\n<p>The mathlib bump exposes a possible linarith bug in roots_deriv.lean:77:4, though:</p>\n</blockquote>\n<p>Is this something I should fix on my end?  That particular line of code runs fine with the version of Mathlib that I have.</p>",
        "id": 398417341,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698214475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> can you make an MWE for the linarith issue?</p>",
        "id": 398417592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698214599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398416714\">said</a>:</p>\n<blockquote>\n<p>By the way, using mathlib master (and therefore Lean 4.2.0-rc4), count_heartbeats reports \"Used 75262 heartbeats, which is less than the current maximum of 200000.\"</p>\n</blockquote>\n<p>So does this mean that whatever weird issue I am having with <code>convert</code> has already become significantly less of an issue with the latest version of mathlib?  With my build it is 331174 heartbeats.</p>",
        "id": 398418342,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698214964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398417592\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> can you make an MWE for the linarith issue?</p>\n</blockquote>\n<p>Hopefully this is not too minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Derivative</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"n\">bla</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">degP</span> <span class=\"o\">:</span> <span class=\"n\">P.degree</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">P'ne0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 398418838,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698215206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398418342\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398416714\">said</a>:</p>\n<blockquote>\n<p>By the way, using mathlib master (and therefore Lean 4.2.0-rc4), count_heartbeats reports \"Used 75262 heartbeats, which is less than the current maximum of 200000.\"</p>\n</blockquote>\n<p>So does this mean that whatever weird issue I am having with <code>convert</code> has already become significantly less of an issue with the latest version of mathlib?  With my build it is 331174 heartbeats.</p>\n</blockquote>\n<p>Yes, I believe so. There have been some caching improvements in defeq checks lately. With regards to the linarith issue, if Mario confirms that it really is a linarith bug, then there's nothing you need to do on your end to fix it; you can choose to either work around it to upgrade Mathlib sooner, though (but I bet Mario will fix this soon if it is a bug).</p>",
        "id": 398419114,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698215329
    },
    {
        "content": "<p>OK.  Then I will just raise the heartbeats limit for this particular theorem and continue on with my project.  Thanks for the help!</p>",
        "id": 398419219,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698215382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398416945\">said</a>:</p>\n<blockquote>\n<p><code>convert (config := {closePost := false}) bound with 2</code> runs blindingly fast, but creates weird goals like <code>HMul.hMul = HDiv.hDiv</code></p>\n</blockquote>\n<p>This was too weird (not impossible, but unwanted) so I just pulled up your project to check. It looks like each <code>convert</code> creates a <code>Preorder.toLE = instLEReal</code> goal -- you can dispatch these with a <code>rfl</code>.</p>\n<p>This takes 7 seconds overall for me:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iterated_rev</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">):</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">((</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">|^</span><span class=\"o\">(((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hsn</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hsn</span><span class=\"o\">]</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_rpow</span><span class=\"o\">]</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">bound</span> <span class=\"o\">:=</span> <span class=\"n\">iterated</span> <span class=\"o\">(</span><span class=\"n\">attainable_reflect</span> <span class=\"n\">h2</span> <span class=\"n\">hsn</span><span class=\"o\">)</span> <span class=\"n\">h3</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">attainable_zero_eq_one</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_inv</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">div_rpow</span><span class=\"o\">,</span> <span class=\"n\">div_rpow</span><span class=\"o\">,</span> <span class=\"n\">inv_rpow</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rcases</span> <span class=\"n\">bound</span> <span class=\"k\">with</span> <span class=\"n\">bound</span> <span class=\"bp\">|</span> <span class=\"n\">bound</span>\n    <span class=\"bp\">.</span> <span class=\"n\">left</span>\n      <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n        <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">this</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_cancel</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_of_le</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_eq_div</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_sub</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rpow_le_rpow_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n      <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">closePost</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">bound</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">.</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n        <span class=\"bp\">.</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n        <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n    <span class=\"n\">right</span> <span class=\"c1\">-- could possibly shorten this proof by judicious use of swap, let, all_goals, and try</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n      <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_cancel</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_of_le</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_eq_div</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_sub</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rpow_le_rpow_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n    <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">closePost</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">bound</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">.</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">.</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n      <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 398419324,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698215430
    },
    {
        "content": "<p>Hmm, that works here now.  Not sure where all the <code>HMul.hMul = HDiv.hDiv</code> goals disappeared to, but I guess I won't question it.  The code now works and is not excessively slow, so I guess I'm satisfied.</p>",
        "id": 398420187,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698215834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398418838\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398417592\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> can you make an MWE for the linarith issue?</p>\n</blockquote>\n<p>Hopefully this is not too minimized:</p>\n</blockquote>\n<p>It looks like it is not a bug, to first order: it is failing to find an instance of <code>OrderedAddCommGroup (WithBot Nat)</code> which makes sense since it is not true</p>",
        "id": 398421538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698216446
    },
    {
        "content": "<p>What's happening is that it has noticed the <code>degP</code> assumption and it has taken the fact <code>0 &lt;= m</code> (because <code>m : Nat</code>), lifted it to <code>WithBot Nat</code> to be useful in conjunction with <code>degP</code>, then tried to flip it around to the normal form <code>-m &lt;= 0</code> and ran into trouble because <code>WithBot Nat</code> doesn't have negation</p>",
        "id": 398422047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698216701
    },
    {
        "content": "<p>In case anyone is interested, this is a \"minimization up to mathlib\" of the code pasted above (with Kyle's speed up).</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> hack to avoid the real powers bug -/</span>\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The purpose of this file is to prove the bound</span>\n\n<span class=\"cm\">|s_l|^(1/2) ≪ l^(1/2) max |s_k|^(1/k), |s_{k+1}|^(1/k+1)</span>\n\n<span class=\"cm\">established by Gopalan-Yehudayoff.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"sd\">/-- `set_binom n k` is the set $\\binom{[n]}{k}$ of k-element subsets of $[n] = \\{0, \\dots, n-1\\}$ -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">set_binom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">powersetCard</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- \"esymm n k\" is the k^th elementary symmetric polynomial $S_{n,k}(x)$ in the first n of an infinite number $x_1, x_2, \\dots$ of real variables.</span>\n\n<span class=\"sd\">We define this polynomial directly as a sum of monomials, instead of using MvPolynomial.esymm -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">esymm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">A</span> <span class=\"k\">in</span> <span class=\"n\">set_binom</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- If S_{n,n}(x) is non-zero, then</span>\n<span class=\"sd\">$$ S_{n,k}(1/x) = S_{n,n-k}(x) / S_{n,n}(x) $$</span>\n<span class=\"sd\">for all 0 ≤ k ≤ n</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">esymm_reflect</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkn</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The Pascal identity for esymm:</span>\n\n<span class=\"sd\">$$S_{n+1,k+1}(x) = S_{n,k+1}(x) + S_{n,k}(x) x_n$$</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">esymm_pascal</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">esymm</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- attainable n s holds if there exists a sequence of real numbers x such that</span>\n<span class=\"sd\">$$ S_k(x) = s_k \\binom{n}{k}$$</span>\n<span class=\"sd\">for all $0 \\leq k \\leq n$.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">attainable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Any attainable sequence starts at one. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">attainable_zero_eq_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- An attainable sequence can be reflected if its final entry is non-zero. [Lemma 2.1(ii) in the paper]-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">attainable_reflect</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"sd\">/-- inequality (2.1) from the paper, corrected to only hold for k+3 ≤ n --/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iterated</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">((</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- the bound two displays after (2.1) --/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iterated_rev</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">):</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">((</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">|^</span><span class=\"o\">(((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hsn</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hsn</span><span class=\"o\">]</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_rpow</span><span class=\"o\">]</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">bound</span> <span class=\"o\">:=</span> <span class=\"n\">iterated</span> <span class=\"o\">(</span><span class=\"n\">attainable_reflect</span> <span class=\"n\">h2</span> <span class=\"n\">hsn</span><span class=\"o\">)</span> <span class=\"n\">h3</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">attainable_zero_eq_one</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_inv</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">div_rpow</span><span class=\"o\">,</span> <span class=\"n\">div_rpow</span><span class=\"o\">,</span> <span class=\"n\">inv_rpow</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rcases</span> <span class=\"n\">bound</span> <span class=\"k\">with</span> <span class=\"n\">bound</span> <span class=\"bp\">|</span> <span class=\"n\">bound</span>\n    <span class=\"bp\">.</span> <span class=\"n\">left</span>\n      <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n        <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">this</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_cancel</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_of_le</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_eq_div</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_sub</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rpow_le_rpow_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n      <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">closePost</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">bound</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">.</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n        <span class=\"bp\">.</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n        <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n    <span class=\"n\">right</span> <span class=\"c1\">-- could possibly shorten this proof by judicious use of swap, let, all_goals, and try</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n      <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_cancel</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_of_le</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_eq_div</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_sub</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rpow_le_rpow_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n    <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">closePost</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">bound</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">.</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">.</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n      <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 398422165,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698216742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398422047\">said</a>:</p>\n<blockquote>\n<p>What's happening is that it has noticed the <code>degP</code> assumption and it has taken the fact <code>0 &lt;= m</code> (because <code>m : Nat</code>), lifted it to <code>WithBot Nat</code> to be useful in conjunction with <code>degP</code>, then tried to flip it around to the normal form <code>-m &lt;= 0</code> and ran into trouble because <code>WithBot Nat</code> doesn't have negation</p>\n</blockquote>\n<p>It might not be a bug, but it used to work in Tao's code (maybe I removed important parts while minimizing, though).</p>",
        "id": 398422293,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698216812
    },
    {
        "content": "<p>I can bisect later if that helps</p>",
        "id": 398422330,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698216834
    },
    {
        "content": "<p>No it's a bug for sure, but the proof is failing for a good reason</p>",
        "id": 398422411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698216856
    },
    {
        "content": "<p>oh man <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Exception.isFailedToSynthesize#src\">src#Lean.Exception.isFailedToSynthesize</a> is a total hack</p>",
        "id": 398422456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698216884
    },
    {
        "content": "<p>I think some inference changes in lean changed what error is reported</p>",
        "id": 398422533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698216919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398422165\">said</a>:</p>\n<blockquote>\n<p>In case anyone is interested, this is a \"minimization up to mathlib\" of the code pasted above (with Kyle's speed up).</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> hack to avoid the real powers bug -/</span>\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The purpose of this file is to prove the bound</span>\n\n<span class=\"cm\">|s_l|^(1/2) ≪ l^(1/2) max |s_k|^(1/k), |s_{k+1}|^(1/k+1)</span>\n\n<span class=\"cm\">established by Gopalan-Yehudayoff.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"sd\">/-- `set_binom n k` is the set $\\binom{[n]}{k}$ of k-element subsets of $[n] = \\{0, \\dots, n-1\\}$ -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">set_binom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">powersetLen</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- \"esymm n k\" is the k^th elementary symmetric polynomial $S_{n,k}(x)$ in the first n of an infinite number $x_1, x_2, \\dots$ of real variables.</span>\n\n<span class=\"sd\">We define this polynomial directly as a sum of monomials, instead of using MvPolynomial.esymm -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">esymm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">A</span> <span class=\"k\">in</span> <span class=\"n\">set_binom</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- If S_{n,n}(x) is non-zero, then</span>\n<span class=\"sd\">$$ S_{n,k}(1/x) = S_{n,n-k}(x) / S_{n,n}(x) $$</span>\n<span class=\"sd\">for all 0 ≤ k ≤ n</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">esymm_reflect</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkn</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- The Pascal identity for esymm:</span>\n\n<span class=\"sd\">$$S_{n+1,k+1}(x) = S_{n,k+1}(x) + S_{n,k}(x) x_n$$</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">esymm_pascal</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">esymm</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- attainable n s holds if there exists a sequence of real numbers x such that</span>\n<span class=\"sd\">$$ S_k(x) = s_k \\binom{n}{k}$$</span>\n<span class=\"sd\">for all $0 \\leq k \\leq n$.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">attainable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">esymm</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Any attainable sequence starts at one. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">attainable_zero_eq_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- An attainable sequence can be reflected if its final entry is non-zero. [Lemma 2.1(ii) in the paper]-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">attainable_reflect</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"sd\">/-- inequality (2.1) from the paper, corrected to only hold for k+3 ≤ n --/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iterated</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">((</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- the bound two displays after (2.1) --/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iterated_rev</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">attainable</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">):</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"bp\">|^</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">((</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">|^</span><span class=\"o\">(((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hsn</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hsn</span><span class=\"o\">]</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_rpow</span><span class=\"o\">]</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">bound</span> <span class=\"o\">:=</span> <span class=\"n\">iterated</span> <span class=\"o\">(</span><span class=\"n\">attainable_reflect</span> <span class=\"n\">h2</span> <span class=\"n\">hsn</span><span class=\"o\">)</span> <span class=\"n\">h3</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">attainable_zero_eq_one</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_inv</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">div_rpow</span><span class=\"o\">,</span> <span class=\"n\">div_rpow</span><span class=\"o\">,</span> <span class=\"n\">inv_rpow</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rcases</span> <span class=\"n\">bound</span> <span class=\"k\">with</span> <span class=\"n\">bound</span> <span class=\"bp\">|</span> <span class=\"n\">bound</span>\n    <span class=\"bp\">.</span> <span class=\"n\">left</span>\n      <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n        <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">this</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_cancel</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_of_le</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_eq_div</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_sub</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rpow_le_rpow_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n      <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">closePost</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">bound</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">.</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n        <span class=\"bp\">.</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n        <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n      <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n    <span class=\"n\">right</span> <span class=\"c1\">-- could possibly shorten this proof by judicious use of swap, let, all_goals, and try</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n      <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_cancel</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.add_sub_of_le</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">div_pos</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_eq_div</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_sub</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rpow_le_rpow_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">rpow_mul</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">bound</span>\n    <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">closePost</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">bound</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">.</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">.</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n      <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}</span>\n</code></pre></div>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>I'm getting <code>unknown identifier 'powersetLen'</code> on line 20 with this.</p>",
        "id": 398423837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698217462
    },
    {
        "content": "<p>powersetLen was renamed to powersetCard in mathlib recently</p>",
        "id": 398424798,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698217847
    },
    {
        "content": "<p>Just checking, but you aren't expecting <code>linarith</code> to prove your example, right <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> ?</p>",
        "id": 398425348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698218079
    },
    {
        "content": "<p>Ah, I did not paste in a current version of Mathlib, just the one in Terry's project.</p>",
        "id": 398426596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698218584
    },
    {
        "content": "<p>(and I'm on mobile and then teaching, so won't be able to fix for a while)</p>",
        "id": 398426782,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698218654
    },
    {
        "content": "<p>the <code>linarith</code> issue is fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7916\">#7916</a></p>",
        "id": 398427064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698218765
    },
    {
        "content": "<p>(Since I got to my office earlier than expected, I checked against the online Lean server: Mauricio caught the only issue, I believe and the code I pasted above should work with the current Mathlib.)</p>",
        "id": 398431319,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698220532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Running.20out.20of.20heartbeats/near/398425348\">said</a>:</p>\n<blockquote>\n<p>Just checking, but you aren't expecting <code>linarith</code> to prove your example, right <span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> ?</p>\n</blockquote>\n<p>I wasn't expecting it to prove anything in the minimized example. I've checked and your fix makes linarith work again in Tao's project. Thanks!</p>",
        "id": 398434457,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698221810
    },
    {
        "content": "<p>With <a href=\"https://github.com/leanprover-community/mathlib4/pull/7916\">#7916</a> and the bump to <code>rc4</code>, there are no issues left here correct?</p>",
        "id": 398476398,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698237597
    }
]