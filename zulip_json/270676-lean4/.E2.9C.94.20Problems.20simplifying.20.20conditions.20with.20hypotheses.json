[
    {
        "content": "<p>In principle, if we run into a goal like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n      <span class=\"n\">Std.AssocList.toList</span>\n        <span class=\"o\">(</span><span class=\"n\">addSubSup</span> <span class=\"n\">sub</span> <span class=\"n\">sup</span>\n          <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"bp\">||</span> <span class=\"n\">List.any</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.toList</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span>\n          <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">sup</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span>\n</code></pre></div>\n<p>(for an MWE, see: <a href=\"https://github.com/NicolasRouquette/oml.lean4/blob/master/src/Oml/MWE8.lean\">https://github.com/NicolasRouquette/oml.lean4/blob/master/src/Oml/MWE8.lean</a>)</p>\n<p>I noticed that I can split the goal with either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span>\n</code></pre></div>\n<p>or:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">sup</span>\n</code></pre></div>\n<p>I understand the former involves an <code>Eq</code> Prop, the latter involves <code>BEq</code>.<br>\nCan someone explain the difference and how it matters?</p>\n<p>Regardless of which I choose, I get two subgoals: <code>pos</code> and <code>neg</code>.</p>\n<p>For the <code>pos</code> case,  I also get the hypothesis that <code>key == sup</code> (or <code>key = sup</code>).<br>\nI can apply that hypothesis and simplify the <code>pos</code> subgoal. Great!</p>\n<p>This seems to be a common pattern and I see that it is often written like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>For the <code>neg</code> case, I also get the hypothesis that <code>¬(key == sup) = true</code> (or <code>¬key = sup</code>).<br>\nHowever, no matter what I do, I can't get lean to simplify the <code>neg</code> subgoal!</p>\n<p>Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">addBoth.sub_eq</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">sup</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ss</span><span class=\"o\">:</span> <span class=\"n\">Std.AssocList</span> <span class=\"n\">String</span> <span class=\"n\">Strings</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">addBoth</span> <span class=\"n\">sub</span> <span class=\"n\">sup</span> <span class=\"n\">ss</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">sub</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ss</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">addBoth</span><span class=\"o\">,</span> <span class=\"n\">addDecl</span><span class=\"o\">,</span> <span class=\"n\">addSubSup</span><span class=\"o\">,</span> <span class=\"n\">cond_eq_ite</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span> <span class=\"n\">tail_ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">addBoth</span><span class=\"o\">,</span> <span class=\"n\">addDecl</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">sup</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">addSubSup</span><span class=\"o\">,</span> <span class=\"n\">cond_eq_ite</span><span class=\"o\">]</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">sup</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n      <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">addBoth</span><span class=\"o\">,</span> <span class=\"n\">addDecl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">tail_ih</span>\n        <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">tail_ih</span>\n        <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">h_1</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">by_cases</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n        <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">h_2</span> <span class=\"n\">x</span> <span class=\"n\">heq</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">by_cases</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">addSubSup</span><span class=\"o\">,</span> <span class=\"n\">cond_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">tail_ih</span>\n          <span class=\"n\">apply</span> <span class=\"n\">tail_ih</span>\n    <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">addBoth</span><span class=\"o\">,</span> <span class=\"n\">addDecl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">tail_ih</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The only unsolved case is the last one where the tactic state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">subsupkey</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n<span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"n\">Strings</span>\n<span class=\"n\">tail</span><span class=\"o\">:</span> <span class=\"n\">Std.AssocList</span> <span class=\"n\">String</span> <span class=\"n\">Strings</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">sup</span>\n<span class=\"n\">tail_ih</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n      <span class=\"n\">Std.AssocList.toList</span>\n        <span class=\"o\">(</span><span class=\"n\">addSubSup</span> <span class=\"n\">sub</span> <span class=\"n\">sup</span>\n          <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">List.any</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.toList</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tail</span>\n          <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">sup</span> <span class=\"o\">[]</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n      <span class=\"n\">Std.AssocList.toList</span>\n        <span class=\"o\">(</span><span class=\"n\">addSubSup</span> <span class=\"n\">sub</span> <span class=\"n\">sup</span>\n          <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"bp\">||</span> <span class=\"n\">List.any</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.toList</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span>\n          <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">sup</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span>\n</code></pre></div>\n<p>I tried to do <code>simp [h]</code> but that makes no difference.<br>\nI also tried the version using  <code>BEq</code> (see the MWE link above) -- same problem.</p>\n<p>Any suggestions?</p>",
        "id": 323170079,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1674539743
    },
    {
        "content": "<p>I would just go for the manual approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"bp\">\\&lt;</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"bp\">\\&gt;</span> <span class=\"o\">:=</span> <span class=\"n\">tail_ih</span>\n<span class=\"n\">exists</span> <span class=\"n\">x</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and continue the proof from there by using <code>hx</code>.</p>",
        "id": 323259956,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1674569243
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> for the suggestion; this trick is useful for focusing on hypotheses but not the goal; i.e. I cannot do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">he</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tail_ih</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⊢</span>\n</code></pre></div>\n<p>On the 2nd line, vscode says that it is expecting a term, not <code>⊢</code>. </p>\n<p>The crux of the problem is: Why can't Lean simplify <code>match key == sup</code> given <code>h: ¬key = sup</code>?</p>\n<p>This simplification is comparatively trivial when we have <code>h: key = sup</code>.</p>\n<p>Why is the negative case so hard to simplify?</p>",
        "id": 324184750,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1674863158
    },
    {
        "content": "<p><code>key == sup</code> is <code>BEq.bEq key sup</code>, which is different from <code>Eq key sup</code> and <code>Not (Eq key sup)</code>...</p>\n<p>but if the beq instance is also <code>LawfulBEq</code>, then we should have a simp lemma somewhere that <code>Not(key = sup) -&gt; Not (key == sup)</code>. if there's not one already, you can prove it as a lemma real quick</p>",
        "id": 324203800,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674868282
    },
    {
        "content": "<p>oh, it is a bit weird that this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- doesn't work: simp [h]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 324204454,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674868746
    },
    {
        "content": "<p>Hum. Are you referring to this one?</p>\n<p><a href=\"https://github.com/leanprover/std4/blob/main/Std/Classes/BEq.lean#LL20-L23\">https://github.com/leanprover/std4/blob/main/Std/Classes/BEq.lean#LL20-L23</a></p>\n<p>Is there an instance of <code>BEq String</code>?</p>",
        "id": 324204545,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1674868803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Problems.20simplifying.20.20conditions.20with.20hypotheses/near/324204454\">said</a>:</p>\n<blockquote>\n<p>oh, it is a bit weird that this doesn't work:</p>\n</blockquote>\n<p>this is probably a missing beq simp lemma... <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if you have a moment</p>",
        "id": 324205302,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"362579\">Nicolas Rouquette</span> <a href=\"#narrow/stream/270676-lean4/topic/Problems.20simplifying.20.20conditions.20with.20hypotheses/near/324204545\">said</a>:</p>\n<blockquote>\n<p>Hum. Are you referring to this one?</p>\n<p><a href=\"https://github.com/leanprover/std4/blob/main/Std/Classes/BEq.lean#LL20-L23\">https://github.com/leanprover/std4/blob/main/Std/Classes/BEq.lean#LL20-L23</a></p>\n<p>Is there an instance of <code>BEq String</code>?</p>\n</blockquote>\n<p>You can check with <code>#synth BEq String</code> :)</p>\n<p>(yes there is)</p>",
        "id": 324205398,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869072
    },
    {
        "content": "<p>This seems to work, is it right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Classes.BEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MWE_eq1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">beq_eq_false_iff_ne</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MWE_eq1</span>\n</code></pre></div>",
        "id": 324205524,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1674869105
    },
    {
        "content": "<p>Yep. It's weird to me that <code>simp [h]</code> alone doesn't work.</p>",
        "id": 324206039,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869229
    },
    {
        "content": "<p>I think the reasonable simp lemma here is <code>x == y = (x = y)</code> given <code>LawfulBEq</code></p>",
        "id": 324206135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869254
    },
    {
        "content": "<p>Probably. I'm not sure what the simp-normal form for BEqs is, if we have one in mind</p>",
        "id": 324206304,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869286
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2060\">lean4#2060</a> will help here</p>",
        "id": 324206360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869301
    },
    {
        "content": "<p>this is mostly a lean4 core question</p>",
        "id": 324206391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869310
    },
    {
        "content": "<p>Is that like the <code>IsTrue</code> proposition from a thread a while back?<br>\nedit: it is not<br>\nedit edit: it is</p>",
        "id": 324206521,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869345
    },
    {
        "content": "<p>the idea behind that simp lemma is to say that the simp-normal form is to use <code>=</code> over <code>==</code> when they are both applicable</p>",
        "id": 324206592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869366
    },
    {
        "content": "<p>since proposition world has better lemmas generally</p>",
        "id": 324206813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869408
    },
    {
        "content": "<p>Note that we already have <code>a == b ↔ a = b</code> as a simp lemma.  The issue here is the <code>= false</code> part.</p>",
        "id": 324206921,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674869435
    },
    {
        "content": "<p>I'm writing <code>↔</code> here so that it's clear where the coercion goes.  With <code>=</code> this is a bit ambiguous, is it <code>((a == b) = true) = (a = b)</code> or <code>(a == b) = decide (a = b)</code>?</p>",
        "id": 324207194,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674869505
    },
    {
        "content": "<p>oh, I meant the second one</p>",
        "id": 324207352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869537
    },
    {
        "content": "<p>that is, we want to completely remove references to <code>==</code>, not just simplify <code>a == b = true</code> or <code>a == b = false</code></p>",
        "id": 324207487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869574
    },
    {
        "content": "<p>the second one will be obsolete after <a href=\"https://github.com/leanprover/lean4/pull/2060\">lean4#2060</a>, no?</p>",
        "id": 324207665,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869617
    },
    {
        "content": "<p>The second one goes a bit against the grain.  Usually we push coercions to the leaves.</p>",
        "id": 324207695,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674869624
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2060\">lean4#2060</a> only changes <code>(a == b) = true</code> to <code>(a == b).asProp</code>, nothing else.</p>",
        "id": 324207852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674869657
    },
    {
        "content": "<p><code>decide (a = b)</code> and <code>a == b</code> are still different and not defeq.</p>",
        "id": 324207960,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674869684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Problems.20simplifying.20.20conditions.20with.20hypotheses/near/324207695\">said</a>:</p>\n<blockquote>\n<p>The second one goes a bit against the grain.  Usually we push coercions to the leaves.</p>\n</blockquote>\n<p>I get that, but that's also the reasoning behind the <code>decide (a /\\ b) = decide a &amp;&amp; decide b</code> simp lemma and that really doesn't work well</p>",
        "id": 324208425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869785
    },
    {
        "content": "<p>I think we should just push coercions to the props here</p>",
        "id": 324208537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869812
    },
    {
        "content": "<p>(sorry for hijacking your thread, Nicolas)</p>",
        "id": 324208860,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869886
    },
    {
        "content": "<p>Also, this isn't pushing any coercions anywhere. There is no coercion on the LHS of <code>(a == b) = decide (a = b)</code></p>",
        "id": 324208885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674869892
    },
    {
        "content": "<p>Is this discussion still about why Lean can't simplify a goal like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n      <span class=\"n\">Std.AssocList.toList</span>\n        <span class=\"o\">(</span><span class=\"n\">addSubSup</span> <span class=\"n\">sub</span> <span class=\"n\">sup</span>\n          <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"bp\">||</span> <span class=\"n\">List.any</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.toList</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span>\n          <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">sup</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span>\n</code></pre></div>\n<p>when we have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">sup</span>\n</code></pre></div>\n<p>I would expect that <code>simp [h]</code> would reduce to something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n      <span class=\"n\">Std.AssocList.toList</span>\n        <span class=\"o\">(</span><span class=\"n\">addSubSup</span> <span class=\"n\">sub</span> <span class=\"n\">sup</span>\n          <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">List.any</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.toList</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span> <span class=\"bp\">==</span> <span class=\"n\">sup</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span>\n          <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">sup</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Std.AssocList.cons</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"n\">tail</span><span class=\"o\">)))</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span>\n</code></pre></div>",
        "id": 324211208,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1674870522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Problems.20simplifying.20.20conditions.20with.20hypotheses/near/324208885\">said</a>:</p>\n<blockquote>\n<p>Also, this isn't pushing any coercions anywhere. There is no coercion on the LHS of <code>(a == b) = decide (a = b)</code></p>\n</blockquote>\n<p>The <code>decide</code> is the coercion here.  Or at least that was my rationale.</p>",
        "id": 324212399,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674871070
    },
    {
        "content": "<p>right, but I'm saying that it's not \"pushing coercions\" because there isn't a coercion on both sides</p>",
        "id": 324212540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674871201
    },
    {
        "content": "<p>it's introducing a coercion</p>",
        "id": 324212597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674871212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"362579\">@Nicolas Rouquette</span> If you use this lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">beq_eq_eq</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>then the match simplifies the way you want</p>",
        "id": 324212663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674871253
    },
    {
        "content": "<p>Thanks everyone for your comments. I made some progress; at least, I don't have the false condition elimination problem anymore. Now I have to grind through the rest of my proofs...</p>",
        "id": 324213185,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1674871639
    },
    {
        "content": "<p>I did a careful assessment of the necessity of Mario's <code>beq_eq_eq</code> lemma using:<br>\nleanprover/lean4:nightly unchanged - Lean (version 4.0.0-nightly-2023-01-28, commit e37f209c1a2a, Release)</p>\n<p>This version imports Std.Classes.BEq and has Mario's lemma:<br>\n<a href=\"https://github.com/NicolasRouquette/oml.lean4/blob/dc5fca86f6b2fac4a6427ba04bef0f47e0987389/src/Oml/MWE8.lean\">https://github.com/NicolasRouquette/oml.lean4/blob/dc5fca86f6b2fac4a6427ba04bef0f47e0987389/src/Oml/MWE8.lean</a></p>\n<p>This version has Mario's lemma only:<br>\n<a href=\"https://github.com/NicolasRouquette/oml.lean4/blob/dc5fca86f6b2fac4a6427ba04bef0f47e0987389/src/Oml/MWE8b.lean\">https://github.com/NicolasRouquette/oml.lean4/blob/dc5fca86f6b2fac4a6427ba04bef0f47e0987389/src/Oml/MWE8b.lean</a></p>\n<p>The results are identical.</p>",
        "id": 324342749,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1674935292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"362579\">Nicolas Rouquette</span> has marked this topic as resolved.</p>",
        "id": 324342931,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674935418
    }
]