[
    {
        "content": "<p>I have experimented a little bit with improving semantic highlighting,<br>\nand before I continue working on this: Would a PR be appreciated?<br>\nI understand if there are other priorities at the moment, I have read the contributing guidelines;<br>\nworst case this was some fun Lean practice for myself :).<br>\nIf a PR is desired, I can clean up the code and improve things further.</p>\n<p>This is what I have so far.</p>\n<p><a href=\"/user_uploads/3121/Gdr3senTzbPIvbHVGeiIbBqB/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/X7Da59UTM9-a28G-btd-c1VH/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/5SCjv4EhbGqDDQRqI6adk9Sq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Gdr3senTzbPIvbHVGeiIbBqB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Gdr3senTzbPIvbHVGeiIbBqB/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/X7Da59UTM9-a28G-btd-c1VH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/X7Da59UTM9-a28G-btd-c1VH/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5SCjv4EhbGqDDQRqI6adk9Sq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5SCjv4EhbGqDDQRqI6adk9Sq/image.png\"></a></div><p>It's less about the color choice, and more about the semantic tokens that you can use to<br>\ncustomize your editor to your liking.<br>\nThe LSP allows tokens to have exactly one <em>token type</em>, and any amount of <em>token modifiers</em>,<br>\nwritten <code>tokentype.mod‚ÇÅ.mod‚ÇÇ.mod‚ÇÉ</code>, which can be easily customized in your VSCode <code>settings.json</code>.<br>\nIt is possible to introduce new token types and modifiers.</p>\n<p>All the information is already there, I didn't do much other than add some extra cases.<br>\nYou can very easily check whether a constant is a typeclass by reading the <code>Environment</code>.<br>\nEven invoking typeclass synthesis to check whether a type is a monad didn't immediately<br>\ndestroy performance, which surprised me, but I didn't measure timings.</p>",
        "id": 362470241,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685542375
    },
    {
        "content": "<p>My main concern would be that it will be a lot harder to get a good out of the box experience with standard themes. Most themes are already not suitable because they don't differentiate the 'variable' semantic token, which is critical for finding autoimplicits</p>",
        "id": 362557925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685562757
    },
    {
        "content": "<p>It's way too much to expect end users to customize all those types to a variety of colors</p>",
        "id": 362558132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685562819
    },
    {
        "content": "<p>That is my concern as well. Re-using as many of the existing token types and modifiers is one (bad, imo) solution. I think the simplest and easiest solution would be to provide a fork of the standard VSCode theme(s) that has been adapted to Lean?</p>",
        "id": 362574267,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685567779
    },
    {
        "content": "<p>That way you can tell busy users to \"just quickly install this theme, or you can copy-paste this json snippet into your <code>settings.json</code>\".</p>",
        "id": 362574830,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685567966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> <a href=\"#narrow/stream/270676-lean4/topic/Better.20semantic.20highlighting/near/362574267\">said</a>:</p>\n<blockquote>\n<p>That is my concern as well. Re-using as many of the existing token types and modifiers is one (bad, imo) solution. I think the simplest and easiest solution would be to provide a fork of the standard VSCode theme(s) that has been adapted to Lean?</p>\n</blockquote>\n<p>Re-using existing token types and modifiers is the heavily recommended standard practice it comes to LSP and VSCode. When customization is necessary, custom modifiers are much more acceptable than custom token types (as a custom token type gives basic themes and LSP clients no reasonable defaulting for highlighting).</p>",
        "id": 362576517,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685568529
    },
    {
        "content": "<p>As for forking themes, that seems impractical as the variety of themes used in the community almost certainly far exceeds the ability to maintain forks.</p>",
        "id": 362576795,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685568613
    },
    {
        "content": "<p>However, if this was togglable or if the improvements just relied on custom modifiers then it would be possible to support standard usage while still providing something nicer for power users. So, that may be an option.</p>",
        "id": 362577012,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685568701
    },
    {
        "content": "<p>Yeah, I will try to reuse as many token types and modifiers as possible. Problem is that the LSP was not architected with functional languages in mind, so often there just aren't suitable token types. Currently <code>Person</code> is marked up as <code>type.type.struct</code>, but it would be possible to instead mark it up as <code>struct.type</code>. Similar for types which are typeclasses, which would get the existing <code>interface</code> token type. I'll play around with this, but I'm open to suggestions of course.</p>\n<p>I was thinking of only forking one theme, like the default VSCode theme, for users who want to get started with Lean. From what I see, a lot of people simply use the default VSCode theme and are happy with it.</p>\n<p>The existing semantic highlighting is very bare-bones, this would be a superset of what we have now.</p>",
        "id": 362578791,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1685569394
    },
    {
        "content": "<p>You shouldn't get too hung up on the names like <code>interface</code> et al. Just look at how the token types are used in common themes</p>",
        "id": 362581248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685570310
    },
    {
        "content": "<p>Theming is a many-to-many synchronization problem (between many LSP servers / languages and many themes), so the common interface is obviously not going to be a great semantic fit for everyone</p>",
        "id": 362581476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685570402
    },
    {
        "content": "<p>Is there a token type for \"variable introduced by <code>autoImplicit</code>\"?</p>",
        "id": 362583245,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685570992
    },
    {
        "content": "<p>you can query the token scopes explicitly using \"Developer: Inspect Editor Tokens and Scopes\"</p>",
        "id": 362583621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685571102
    },
    {
        "content": "<p>the answer appears to be no, both <code>x</code> and <code>y</code> are described as <code>variable.other.readwrite</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 362583908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685571210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Better.20semantic.20highlighting/near/362583245\">said</a>:</p>\n<blockquote>\n<p>Is there a token type for \"variable introduced by <code>autoImplicit</code>\"?</p>\n</blockquote>\n<p>Needs more testing: <a href=\"https://github.com/Kha/lean4/commit/923a1488efd302c0118545493bc91d9060ffddbf\">https://github.com/Kha/lean4/commit/923a1488efd302c0118545493bc91d9060ffddbf</a></p>",
        "id": 362709327,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685616604
    },
    {
        "content": "<p>I haven't had time to work further on this, but I may have some time this week. This would be my first contribution to the Lean itself. Should I make an RFC as outlined in the contributing guidelines first, before I polish up the code? Sorry for necro.</p>",
        "id": 369784800,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1687801021
    }
]