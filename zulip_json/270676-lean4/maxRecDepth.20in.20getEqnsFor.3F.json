[
    {
        "content": "<p>A recent Lean update seems to have broken <code>Lean.Meta.getEqnsFor?</code> in a way. More concretely doc-gen4 was generating documentation using this function for <code>Lean.Level.substParams.go</code> just fine until I bumped it from <code>v4.2.0-rc4</code> to <code>v4.3.0-rc2</code> just now. Now it fails to generate the equations with a max recursion depth error, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Meta.getEqnsFor</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Level.substParams.go</span>\n</code></pre></div>\n<p>This can be worked around with <code>set_option maxRecDepth 4096</code> though, at which point it times out on heartbeats. Note that this was previously possible as <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Level.html#Lean.Level.substParams.go\">https://leanprover-community.github.io/mathlib4_docs/Lean/Level.html#Lean.Level.substParams.go</a> used to contain rendered equation output (right until I deployed the first doc-gen output with the updated version).</p>\n<p>Should I report this regression on the issue tracker as well?</p>",
        "id": 402917295,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700344221
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 402921298,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700347320
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 402921696,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700347679
    },
    {
        "content": "<p>The cause of the failure is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Lean.Level</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">u_1</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Level</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Lean.Level.substParams.go</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">if</span> <span class=\"n\">Lean.Level.hasParam</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"n\">Lean.Level.updateSucc</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.substParams.go</span> <span class=\"n\">s</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">Lean.Level.succ</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit)</span>\n</code></pre></div>",
        "id": 402923106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700348742
    },
    {
        "content": "<p>I just got a regression in mathport of a similar nature: <a href=\"https://github.com/leanprover-community/mathport/actions/runs/6918636188/job/18821091067\">https://github.com/leanprover-community/mathport/actions/runs/6918636188/job/18821091067</a> (things time out with maxHeartbeats), so this lends credence to there being a performance regression somewhere</p>",
        "id": 402970399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700376040
    }
]