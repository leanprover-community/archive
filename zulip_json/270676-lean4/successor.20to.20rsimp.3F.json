[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"371938\">@Son Ho</span> and I were reading the 2017 ICFP paper (\"A Metaprogramming Framework for Formal Verification\") and it mentions rsimp, which (insofar as we understand) would be quite helpful for the kinds of proofs we're trying to do with the Aeneas/Lean backend. Now rsimp is probably an artifact from Lean 3, and we're wondering what would be a modern equivalent in Lean4.</p>\n<p>It might be helpful to have a bit more context. When trying to prove properties about programs (and here I'm perhaps biased because of my experience verifying crypto code), there are oftentimes supremely boring lemmas and administrative things that we want to make progress on, automatically. Example: a &gt; 0 /\\ b &gt; 0 =&gt; a *b &gt; 0 is <em>always</em> a good idea to apply, before \"getting to work\". Or, List.length (l1 ++ l2) = List.length l1 + List.length l2, etc. In SMT-based proof, we typically rely on the SMT solver to saturate the context with those mundane facts, except it doesn't scale up, especially in the presence of non-linear arithmetic. But it would be helpful (in our opinion) to have a similar facility that can eagerly apply a set of known useful lemmas in the context of interactive proof, in Lean4.</p>\n<p>Now I realize that what I'm describing is very similar to auto (in other theorem provers), crush, or perhaps Aesop, in Lean. Except Aesop (correct me if I'm wrong) aims to find a proof, and fails otherwise, whereas here, we are trying to get a bunch of repetitive work out of the way before we roll up our sleeves and focus on the core of the proof which requires careful explaining to the proof assistant.</p>\n<p>What would be the idiomatic, \"classic\" way of implementing that approach in Lean4? Is there a successor to rsimp? An equivalent to <code>crush</code>? A mode of Aesop that can be used to make progress on, but not necessarily clear the proof obligation? Any thoughts welcome. Thanks!</p>",
        "id": 365979772,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1686686684
    },
    {
        "content": "<p>By default, Aesop, when it can't solve a goal, returns the goals obtained by exhaustively applying rules tagged as 'safe'. Sounds like this should do what you want. Aesop usually prints a warning in this situation, but you can suppress this with <code>aesop (options := { warnOnNonterminal := false })</code>.</p>",
        "id": 365981276,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1686687129
    },
    {
        "content": "<p>When I started working on lean in 2016-2017, <code>rsimp</code> was already of unclear usability and there were no good examples of its use. This has obviously not changed since mathlib was founded and developed, so we are left with nothing to work with. I would expect that any <code>rsimp</code> successor needs to be redesigned from scratch, as IIRC the original one was tied in to the SMT framework (that was buggy / unmaintained and not ported to lean 4)</p>",
        "id": 365981308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686687141
    },
    {
        "content": "<p>(this is meant as historical context for those who don't know about <code>rsimp</code>)</p>",
        "id": 365981498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686687199
    },
    {
        "content": "<p>I would guess that aesop is the best way to do this in lean 4. It hits on some tensions regarding non-terminal use, which I'm not sure are solvable if you are tagging an open ended collection of lemmas as intro rules or forward reasoning steps</p>",
        "id": 365981979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686687333
    },
    {
        "content": "<p>ok, thanks <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> for the customization option for aesop... we'll start with that and see how far that gets us, then we'll report back!</p>",
        "id": 365984225,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1686687980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks for the historical context. Out of curiosity, is there any summary or debrief on what happened with the SMT framework and why it ended up not being ported to Lean4?</p>",
        "id": 365984438,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1686688044
    },
    {
        "content": "<p>Like I said, it was unmaintained for a long time, it accrued bugs and we just started avoiding it</p>",
        "id": 365984547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688075
    },
    {
        "content": "<p>I guess this means that the need for it was never big enough, otherwise surely some maintainers would've kept it alive... interesting</p>",
        "id": 365985101,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1686688206
    },
    {
        "content": "<p>It's a very technical bit of infrastructure, I'm not sure it could be maintained by anyone except Leo, and he was not involved in lean 3 for most of the history of mathlib</p>",
        "id": 365985213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688232
    },
    {
        "content": "<p>There is some work on getting CVC5 into Lean right now.</p>",
        "id": 365985279,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1686688248
    },
    {
        "content": "<p>I think there is a fair amount of expressed desire, but no one knowledgeable enough to write something with all the bells and whistles of a SMT solver and get it into mathlib</p>",
        "id": 365985471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688306
    },
    {
        "content": "<p>Something that interfaces with an external solver is in some ways simpler, although there is a significant impedance mismatch between SMT-LIB and DTT</p>",
        "id": 365985678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688359
    },
    {
        "content": "<p>but the original <code>smt_tactic</code> framework was written by someone who was involved in Z3 for a long time, and we don't have anyone else with that kind of experience AFAIK</p>",
        "id": 365985976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688446
    },
    {
        "content": "<p>once upon a time lean was going to be a more configurable kind of ATP and the vision changed pretty drastically over time to the ITP it is today</p>",
        "id": 365986136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"342995\">Jonathan Protzenko</span> <a href=\"#narrow/stream/270676-lean4/topic/successor.20to.20rsimp.3F/near/365985101\">said</a>:</p>\n<blockquote>\n<p>I guess this means that the need for it was never big enough, otherwise surely some maintainers would've kept it alive... interesting</p>\n</blockquote>\n<p>It's certainly not something you can't work around, I mean what you are talking about boils down to calling <code>intro</code> and <code>apply</code> with appropriately chosen lemmas</p>",
        "id": 365986604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688641
    },
    {
        "content": "<p>oh definitely -- I'm just interesting in what is seen as a desirable/popular style of going about proofs</p>",
        "id": 365986947,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1686688734
    },
    {
        "content": "<p>it's annoying for sure but it takes off a lot of the pressure to do something better, especially when it's up against a project the size of a masters thesis (+ continuing maintenance)</p>",
        "id": 365986969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688738
    },
    {
        "content": "<p>luckily <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> has graciously donated his PhD to solving this problem, and <code>aesop</code> is in mathlib so the continuing maintenance part is also handled</p>",
        "id": 365987563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686688895
    }
]