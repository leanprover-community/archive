[
    {
        "content": "<p>This question is out of pure curiosity.</p>\n<p>One misunderstanding about \"pure\" functions is that if I have <code>f : Nat -&gt; Nat</code> and at a point evaluate <code>f 1</code> to <code>1</code>, I guarantee <code>f 1</code> will always evaluate to <code>1</code>, because \"functions only depend on their arguments\".  Of course I can write a function of signature <code>Nat -&gt; Nat</code> with completely non-deterministic behavior by running <code>IO</code> actions inside it.</p>\n<p>Is there a way to ensure in Lean that I really have a deterministic function only through its signature or some attribute?  E.g. can I forbid running <code>IO</code> inside the function body somehow?</p>",
        "id": 396068059,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697024194
    },
    {
        "content": "<blockquote>\n<p>Of course I can write a function of signature Nat -&gt; Nat with completely non-deterministic behavior by running IO actions inside it.</p>\n</blockquote>\n<p>This is not true in a functional programming language like Lean 4. You'll need a monad to run IO actions, if you try, you'll have errors indicating type mismatch, that's how it's ensured to be forbidden. Chapter Monads in <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a> may have answers you need.</p>",
        "id": 396069281,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697024640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Ensuring.20naive.20purity/near/396069281\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Of course I can write a function of signature Nat -&gt; Nat with completely non-deterministic behavior by running IO actions inside it.</p>\n</blockquote>\n<p>This is not true in a functional programming language like Lean 4. You'll need a monad to run IO actions, if you try, you'll have errors indicating type mismatch, that's how it's ensured to be forbidden. Chapter Monads in <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a> may have answers you need.</p>\n</blockquote>\n<p>I am confused; what about </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">natFun</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run'</span> <span class=\"o\">())</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">bytes</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bytes.toUInt64BE</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">256</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">natFun</span> <span class=\"mi\">4</span>\n<span class=\"k\">#eval</span> <span class=\"n\">natFun</span> <span class=\"mi\">4</span>\n<span class=\"k\">#eval</span> <span class=\"n\">natFun</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 396070186,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697024870
    },
    {
        "content": "<p>This code is abusing that  <code>IO</code> monad is effectively <code>StateM IO.RealWorld</code> and <code>IO.RealWorld</code> is just <code>Unit</code>. In the most recent version of lean, <code>IO.RealWorld</code> is turned into opaque and you will no longer be able to write <code>()</code> to create an element of <code>IO.RealWorld</code>. Furthermore, soon <code>IO</code> will be opaque too so you won't be able to write the  <code>|&gt;.run'</code></p>",
        "id": 396073821,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697025702
    },
    {
        "content": "<p>You are effectively exploiting a consistency bug.</p>",
        "id": 396074160,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697025806
    },
    {
        "content": "<p>Nice; that takes care of <code>IO</code>; are there any other similar traps that we know of?  For the record, I had no idea this was considered a bug; I just freely used it in real code that I am writing.</p>",
        "id": 396074554,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697025930
    },
    {
        "content": "<p>These all fall into the category of \"inconsistent <code>implemented_by</code> / <code>extern</code>\"s, which are only relevant for execution and not proofs</p>",
        "id": 396074780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697026001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Ensuring.20naive.20purity/near/396074780\">said</a>:</p>\n<blockquote>\n<p>These all fall into the category of \"inconsistent <code>implemented_by</code> / <code>extern</code>\"s, which are only relevant for execution and not proofs</p>\n</blockquote>\n<p>Yes, I am not talking about proofs at all; I am porting some CLI utilities I wrote in <code>sh</code> to Lean as programming practice, and have been writing this kind of code a lot.</p>",
        "id": 396074946,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697026068
    },
    {
        "content": "<p>Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">main</span> <span class=\"bp\">=</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- Save the current state of the universe</span>\n    <span class=\"n\">world_as_we_know_it</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getWorld</span>\n\n    <span class=\"c1\">-- Cause serious international side effects</span>\n    <span class=\"n\">launchMissiles</span>\n\n    <span class=\"c1\">-- After realizing that was a terrible, terrible mistake, restore the</span>\n    <span class=\"c1\">-- pre-war state of the universe.</span>\n    <span class=\"n\">putWorld</span> <span class=\"n\">world_as_we_know_it</span>\n</code></pre></div>\n<p>in Lean 4? (<a href=\"https://hackage.haskell.org/package/acme-realworld\">ref</a>)</p>",
        "id": 396075075,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697026108
    },
    {
        "content": "<p>I think you can write that but it doesn't work</p>",
        "id": 396075193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697026163
    },
    {
        "content": "<p>I think you can prove that you didn't delete your hard drive but in fact you actually did.</p>",
        "id": 396075397,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697026230
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ohNo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">EStateM.get</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Oh no\"</span>\n  <span class=\"n\">EStateM.set</span> <span class=\"n\">s</span>\n<span class=\"k\">#eval</span> <span class=\"n\">ohNo</span>\n</code></pre></div>",
        "id": 396075484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697026264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Ensuring.20naive.20purity/near/396075397\">said</a>:</p>\n<blockquote>\n<p>I think you can prove that you didn't delete your hard drive but in fact you actually did.</p>\n</blockquote>\n<p>\"Beware of bugs in the above code; I have only proved it correct, not tried it.\" -- Donald Knuth</p>",
        "id": 396075567,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697026302
    },
    {
        "content": "<p><code>EStateM.set</code> does work for the random number generator though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anyway</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">EStateM.get</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toUInt64BE</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span>\n  <span class=\"n\">EStateM.set</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toUInt64BE</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{x} {y}\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">anyway</span>\n</code></pre></div>",
        "id": 396075986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697026447
    },
    {
        "content": "<p>Actually, I mean is it possible to write it as a pure function like <span class=\"user-mention\" data-user-id=\"577163\">@Ioannis Konstantoulas</span> tried:</p>\n<p><a href=\"/user_uploads/3121/PLVCcimgWo5MZ_5C0oSmwpqR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PLVCcimgWo5MZ_5C0oSmwpqR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PLVCcimgWo5MZ_5C0oSmwpqR/image.png\"></a></div>",
        "id": 396076144,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697026518
    },
    {
        "content": "<p>You can't run <code>IO</code> from the <code>Id</code> monad without cheating</p>",
        "id": 396076547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697026665
    },
    {
        "content": "<p>the question is asked after witnessing cheating <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 396076704,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697026716
    },
    {
        "content": "<p><code>ohNo.run' ()</code> lets you cheat</p>",
        "id": 396076742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697026736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Ensuring.20naive.20purity/near/396075986\">said</a>:</p>\n<blockquote>\n<p><code>EStateM.set</code> does work for the random number generator though:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anyway</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">EStateM.get</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toUInt64BE</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span>\n  <span class=\"n\">EStateM.set</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toUInt64BE</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{x} {y}\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">anyway</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Nice, it now consistently generates the same \"random\" number.</p>",
        "id": 396076796,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697026754
    },
    {
        "content": "<p>Does the Lean interpreter do CSE or something?</p>",
        "id": 396076903,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697026784
    },
    {
        "content": "<p>The fact that two <code>eval</code>s return different results is not a problem, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anyway</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">EStateM.get</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toUInt64BE</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span>\n  <span class=\"n\">EStateM.set</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toUInt64BE</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{x} {y}\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">anyway</span>\n<span class=\"k\">#eval</span> <span class=\"n\">anyway</span>\n</code></pre></div>",
        "id": 396077088,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697026844
    },
    {
        "content": "<p>Correct, because the real world changed between the two evals</p>",
        "id": 396077170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697026870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/270676-lean4/topic/Ensuring.20naive.20purity/near/396076903\">said</a>:</p>\n<blockquote>\n<p>Does the Lean interpreter do CSE or something?</p>\n</blockquote>\n<p>What is CSE?</p>",
        "id": 396077425,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697026974
    },
    {
        "content": "<p>Common subexpression elimination, maybe</p>",
        "id": 396077476,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697026994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Ensuring.20naive.20purity/near/396077425\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/270676-lean4/topic/Ensuring.20naive.20purity/near/396076903\">said</a>:</p>\n<blockquote>\n<p>Does the Lean interpreter do CSE or something?</p>\n</blockquote>\n<p>What is CSE?</p>\n</blockquote>\n<p>Common subexpression elimination – after inlining, both <code>getRandomBytes</code> calls refer to the same <code>RealWorld</code>, so it would be a \"valid\" optimization to unify them</p>",
        "id": 396077576,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697027039
    },
    {
        "content": "<p>Though I wonder why Lean is happy to turn two calls into one, but not one into zero <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 396077789,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697027115
    },
    {
        "content": "<p>Good catch, it is exactly what is happening:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">randNat'</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"calling randNat\"</span>\n  <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toUInt64BE</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">anyway</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">EStateM.get</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">randNat'</span>\n  <span class=\"n\">EStateM.set</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">randNat'</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{x} {y}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">anyway</span>\n</code></pre></div>\n<p>prints <code>calling randNat</code> only once</p>",
        "id": 396078717,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697027425
    },
    {
        "content": "<p>once the linearity checker is implemented, the realworld parameter is gonna be marked linear, you won't be able to <code>get</code> the state, and none of these (wrong) optimizations will occur :p</p>",
        "id": 396127793,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1697041900
    },
    {
        "content": "<p>There are some stark misconceptions in this thread. Deduplicating an <code>IO</code> <em>value</em> does not affect the number of <em>executions</em>. <code>dbg_trace</code> breaks precisely because it does <em>not</em> live in <code>IO</code>, thus the <code>dbg_</code> prefix. There are no issues with compiler optimizations and <code>IO</code>.</p>",
        "id": 396129237,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697042409
    },
    {
        "content": "<p>Wait so why is it producing two same \"random\" numbers?</p>",
        "id": 396150532,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697051385
    },
    {
        "content": "<p>because the random state was reset?</p>",
        "id": 396150578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697051403
    },
    {
        "content": "<p>Ah, by breaking open the IO abstraction, you allow for CSE, yes. But the compiler would be free to deduplicate the dbg_trace even without that.</p>",
        "id": 396151414,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697051796
    },
    {
        "content": "<p>I tend to think that even exposing that <code>IO A</code> is a function type is a bad idea. Because if it is, then it is equal to its eta expansion, and you can do funny things exploiting that to duplicate effects</p>",
        "id": 396151444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697051809
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hello</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"hi\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">noinline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">blackBox</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">blackBox</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dup</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dup</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hello</span>\n<span class=\"c1\">-- hi</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">dup</span> <span class=\"n\">hello</span>\n<span class=\"c1\">-- hi</span>\n<span class=\"c1\">-- hi</span>\n</code></pre></div>",
        "id": 396152211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697052148
    },
    {
        "content": "<p>I'm pretty sure I can cause another native_decide contradiction using this and <code>ST</code></p>",
        "id": 396152391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697052242
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">noinline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">blackBox</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">blackBox</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">dup</span> <span class=\"o\">{</span><span class=\"n\">ω</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">ω</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">ω</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flipBool</span> <span class=\"o\">{</span><span class=\"n\">ω</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ST.Ref</span> <span class=\"n\">ω</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">ω</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">r.set</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">r.get</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex1</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">runST</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">ST.mkRef</span> <span class=\"n\">false</span>\n  <span class=\"n\">flipBool</span> <span class=\"n\">r</span>\n  <span class=\"n\">r.get</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex2</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">runST</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">ST.mkRef</span> <span class=\"n\">false</span>\n  <span class=\"n\">dup</span> <span class=\"o\">(</span><span class=\"n\">flipBool</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">r.get</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ex1</span> <span class=\"bp\">≠</span> <span class=\"n\">ex2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n  <span class=\"n\">this</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 396153183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697052592
    },
    {
        "content": "<p>I'm confused. I thought we weren't supposed to trust <code>native_decide</code> anyway?</p>",
        "id": 396153396,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697052684
    },
    {
        "content": "<p>it's not at the same level of correctness, but we still want the compiler not to be able to prove false things, because if it can then safe lean code can cause UB</p>",
        "id": 396153599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697052778
    },
    {
        "content": "<p>Trust is always a choice :-)<br>\nIf you trust <code>native_decide</code>, you trust much more code, and we know that this allows you to prove false. But that doesn’t mean we <em>want</em> that. I assume we don’t, and will fix these bugs as we find them.</p>",
        "id": 396153617,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697052785
    },
    {
        "content": "<p>We do not want <code>native_decide</code> to be inconsistent</p>",
        "id": 396153644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697052801
    },
    {
        "content": "<p>or at least, it should be the fault of the user (e.g. some <code>implemented_by</code>) if something goes wrong</p>",
        "id": 396153751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697052844
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ex1</span> <span class=\"bp\">≠</span> <span class=\"n\">ex2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ex1</span> <span class=\"bp\">=</span> <span class=\"n\">ex2</span> <span class=\"k\">then</span> <span class=\"n\">blackBox</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">bla</span> <span class=\"c1\">-- boom</span>\n</code></pre></div>",
        "id": 396154082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697053030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Ensuring.20naive.20purity/near/396150578\">said</a>:</p>\n<blockquote>\n<p>because the random state was reset?</p>\n</blockquote>\n<p>Yes, ideally that would happen but the function <a href=\"https://github.com/leanprover/lean4/blob/57e23917b605d1f1e6b6ff70aa022065d55bb60c/src/runtime/io.cpp#L403C7-L403C7\"><code>lean_io_get_random_bytes</code></a> is not using the <code>IO.RealWorld</code> at all. <code>IO.RealWorld</code> is not holding <a href=\"https://github.com/leanprover/lean4/blob/57e23917b605d1f1e6b6ff70aa022065d55bb60c/src/include/lean/lean.h#L1829C48-L1829C48\">any information</a>, so  you can't reset the state of the random generator.</p>",
        "id": 396186280,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697071904
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 396186583,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697072067
    },
    {
        "content": "<p>I did make a start on making <code>EIO</code> an opaque definition (i.e. so you can't see at all that it is really an <code>EStateM</code>). However there is a fair bit of API to collect, and some design decisions about how to expose \"enough\" of the fact that it is a function type, so I didn't get there. I may try again later, but if someone would like to make an RFC or PR for this I would happily review it!</p>",
        "id": 396208119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697082653
    }
]