[
    {
        "content": "<p>Coming from Coq, I'm a little confused about how <code>&lt;;&gt;</code> is working. </p>\n<p>I'd expect to be able to chain an entire sequence of tactics together with it, and have everything produced along the way get caught by the later tactics. </p>\n<p>i.e. something like:</p>\n<p><code>tac1 &lt;;&gt; tac2 &lt;;&gt; tac3 &lt;;&gt; tac4</code></p>\n<p>I haven't minimized my example yet (sorry!), but I noticed, first, that whereas when I wrote something like the above, it wasn't closing the proof, but doing this was:</p>\n<p><code>tac1 &lt;;&gt; tac2\nall_goals tac3\nall_goals tac4</code></p>\n<p>(where there was only a single goal before <code>tac1</code>) </p>\n<p>Based on my understanding how how <code>&lt;;&gt;</code> should work, there shouldn't be any difference (assuming there was only _one_ goal before <code>tac1</code>, which there was).</p>\n<p>But then I realized that if I added parenthesis, I would get the right behavior, i.e.,</p>\n<p><code>((tac1 &lt;;&gt; tac2) &lt;;&gt; tac3) &lt;;&gt; tac4</code></p>\n<p>This seems... very confusing? Is this expected? I would have expected that this was the default associativity! Or is there something more subtle going on with regards to error behavior that the parentheses are working around?</p>",
        "id": 329614774,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1677116257
    },
    {
        "content": "<p>I would normally expect sequencing operations to be right associative (e.g. <code>do { x ; y ; z } = x &gt;&gt; (y &gt;&gt; z)</code>.<br>\nHowever, I also can't think of a situation with <code>&lt;;&gt;</code> where it would make a difference...</p>",
        "id": 329632074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677130928
    },
    {
        "content": "<p>(Let's ignore <code>tac4</code>, since three tactics is enough to discuss associativity.)<br>\nIs the idea that <code>tac2</code> fails on some of the goals from <code>tac1</code>, and then you want <code>tac3</code> to run on them?</p>",
        "id": 329633682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677131974
    },
    {
        "content": "<p><code>&lt;;&gt;</code> is associative, but if any of the tactic invocations fails then the whole sequence fails. If you want tactics to be able to fail and continue with the rest, you should use <code>tac1 &lt;;&gt; (try tac2) &lt;;&gt; tac3</code> and the like</p>",
        "id": 329640483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677135411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"494227\">@Daniel Patterson</span>  re: lack of MWE, it will be helpful to show the actual tactics involved rather than just <code>tac1</code>, <code>tac2</code>, because the goal-handling behavior of the involved tactics is potentially relevant</p>",
        "id": 329640633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677135491
    },
    {
        "content": "<p>Oh! I understand my issue, and it's (unsurprisingly) unrelated to what I thought it was.</p>\n<p>The issue is that <code>&lt;;&gt;</code> binds tighter than <code>try</code>, so <code>try</code> has to be wrapped in parethesis, which I see in your use <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> .  Two of my tactics (<code>rw</code>s) I knew might fail, so I had wrapped them in <code>try</code>, but as <code>&lt;;&gt; try (rw [...]) &lt;;&gt; ...</code>, _not_ as <code>&lt;;&gt; (try ...) &lt;;&gt;</code>. As a result, the <code>rw</code> (which would sometimes fail) would take the entire rest of the chain with it. </p>\n<p>Fixing that fixed the issue. So, apologies for the false report. I guess my actual issue was the binding precedence of <code>&lt;;&gt;</code>.</p>",
        "id": 329712330,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1677157297
    },
    {
        "content": "<p>it's not the first time this has come up: <a href=\"#narrow/stream/270676-lean4/topic/precedence.20of.20.60.3B.60.2F.60.3C.3B.3E.60.20vs.20.60try.60.2F.60repeat.60/near/314691801\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/precedence.20of.20.60.3B.60.2F.60.3C.3B.3E.60.20vs.20.60try.60.2F.60repeat.60/near/314691801</a></p>",
        "id": 329712901,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677157453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Unfortunately, you can't search for <code>&lt;;&gt;</code> on here! Obviously, I'm new to Lean, but like you, I find the behavior very surprising, and I'm not sure what the purported benefit actually is. I'd much rather have to add braces / parens / something to be able to pass a block to <code>try</code> than to _need_ to have parens around it every time I use it with <code>&lt;;&gt;</code> (which, at least for me, I imagine will be much more common). I'm also anticipating this causing a lot of problems with my students (tbh, I'm wondering if its worth introducing them to <code>try</code> because of it... but it's kind of impossible to show any kind of automation without it...)</p>",
        "id": 329727218,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1677161186
    },
    {
        "content": "<blockquote>\n<p>I'm not sure what the purported benefit actually is</p>\n</blockquote>\n<p>Using significant whitespace to avoid the need for explicit delimiters like <code>{}</code> seems to be one of the design goals of Lean 4.</p>",
        "id": 329739686,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677163969
    },
    {
        "content": "<p>I think the challenge is more that we would need to make some complex parser changes to make it work, rather than that this is actually the desired behavior. I don't think anyone finds the current precedence to be sensible</p>",
        "id": 329747233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677165815
    }
]