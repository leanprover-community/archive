[
    {
        "content": "<p>How can we define a custom syntax containing an identifier prefix while not causing parsing problems? For example, if I define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"foo\"</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>produces error \"expected ')' or term\". Is there any way to fix this?</p>",
        "id": 388597823,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1693601492
    },
    {
        "content": "<p>does using <code>&amp;\"foo\"</code> work?</p>",
        "id": 388598086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693601591
    },
    {
        "content": "<p>Oh it works!</p>",
        "id": 388598182,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1693601630
    },
    {
        "content": "<p>it should work in this case, but I don't know whether the real example is more complex</p>",
        "id": 388598202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693601637
    },
    {
        "content": "<p>What does <code>&amp;</code> stand for?</p>",
        "id": 388598262,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1693601646
    },
    {
        "content": "<p><code>nonReservedToken</code> instead of <code>token</code></p>",
        "id": 388598297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693601663
    },
    {
        "content": "<p>Ok, it also works in the real example.</p>",
        "id": 388598299,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1693601663
    },
    {
        "content": "<p>the limitation of <code>nonReservedToken</code> is that it will not be differentiated from an <code>ident</code> in the same position</p>",
        "id": 388598437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693601720
    },
    {
        "content": "<p>Ok, I see. If a token is reserved then it cannot be <code>ident</code>, but if it's not reserved, then the corresponding string can represent either the token or an ident.</p>",
        "id": 388599108,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1693602038
    }
]