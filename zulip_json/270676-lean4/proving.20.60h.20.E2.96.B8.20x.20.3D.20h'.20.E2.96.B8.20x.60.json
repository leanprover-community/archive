[
    {
        "content": "<p>How do I prove that <code>h ▸ x = h' ▸ x</code> i.e. rfl with two different casts? </p>\n<p>mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span> <span class=\"bp\">▸</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Anyway, I guess the advice is stop doing whatever I was doing that got me here :)</p>",
        "id": 403472008,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700605258
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span> <span class=\"bp\">▸</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span> <span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 403472219,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700605359
    },
    {
        "content": "<p>Is there a way to do it without referencing <code>h</code> or <code>h'</code>?</p>",
        "id": 403472432,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700605459
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 403472472,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700605480
    },
    {
        "content": "<p>Ahh with few <code>congr</code> and <code>funext</code> I can navigate inside of the if statement where this was and assign a name to <code>h</code>. Ok it works now, thanks!</p>",
        "id": 403472869,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700605674
    },
    {
        "content": "<p>Do you know about <code>generalize_proofs</code>? It's a tactic that lets you name proofs that might be useful in your actual use case.</p>",
        "id": 403473055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700605750
    },
    {
        "content": "<p>No I do not know this, I will look it up. Interestingly searching mathlib4 doc for \"generalize_proofs\" does not yield a useful link. Searching \"GeneralizeProofs\" works though</p>",
        "id": 403473481,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700605968
    },
    {
        "content": "<p>The tactic is <code>generalize_proofs</code> as you can see here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/383ec12856a51cae18f9790f4e66595289b574a6/Mathlib/Tactic/GeneralizeProofs.lean#L102\">https://github.com/leanprover-community/mathlib4/blob/383ec12856a51cae18f9790f4e66595289b574a6/Mathlib/Tactic/GeneralizeProofs.lean#L102</a></p>",
        "id": 403473557,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700606016
    },
    {
        "content": "<p>it's a shame that we don't (yet?!) have a good way to search for tactics using the actual syntax of the tactic :-/</p>",
        "id": 403473644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700606053
    },
    {
        "content": "<p>It needs a little help with the motive in the second subst, but here's one solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">xi</span> <span class=\"bp\">=</span> <span class=\"n\">h'</span> <span class=\"bp\">▸</span> <span class=\"n\">xi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rec_heq_iff_heq</span><span class=\"o\">,</span> <span class=\"n\">heq_rec_iff_heq</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>This is an example of where <code>HEq</code> is useful, since it lets you shake off casts.</p>",
        "id": 403475816,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700607282
    },
    {
        "content": "<p>If you don't do <code>(C := id)</code> then it thinks that <code>X</code> is the motive, leading it down the wrong path, and it fails to rewrite.</p>",
        "id": 403475860,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700607326
    },
    {
        "content": "<p>This proof still \"uses h\" in the sense that h is mentioned in the statement of the theorem :-)</p>",
        "id": 403481098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700610309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/proving.20.60h.20.E2.96.B8.20x.20.3D.20h'.20.E2.96.B8.20x.60/near/403481098\">said</a>:</p>\n<blockquote>\n<p>This proof still \"uses h\" in the sense that h is mentioned in the statement of the theorem :-)</p>\n</blockquote>\n<p>Ok :) here is a more realistic example of what I was doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">⊕</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">yi</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">i'</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">i'</span> <span class=\"k\">then</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">xi</span> <span class=\"k\">else</span> <span class=\"n\">yi</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">:=</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">xi</span> <span class=\"k\">else</span> <span class=\"n\">yi</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">funext</span> <span class=\"n\">h</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 403484057,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700612095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/proving.20.60h.20.E2.96.B8.20x.20.3D.20h'.20.E2.96.B8.20x.60/near/403472432\">said</a>:</p>\n<blockquote>\n<p>Is there a way to do it without referencing <code>h</code> or <code>h'</code>?</p>\n</blockquote>\n<p>I recommend making this general version a lemma and then use <code>rw [my_lemma]</code> in your application.</p>",
        "id": 403486577,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700613335
    }
]