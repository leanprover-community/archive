[
    {
        "content": "<p>I have a project depending on mathlib and when I try to run <code>lake exe cache get</code>, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span>\n</code></pre></div>\n<p>The line in my project's lakefile is <code>require Mathlib from git \"...\" @ \"...\"</code>. Is lake just getting the name wrong?</p>",
        "id": 345155243,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680014673
    },
    {
        "content": "<p>Lake will download to a folder as you name it in <code>require &lt;some folder name&gt; ...</code>. Whether that's a good behavior or not is debatable. In the meantime, <code>cache</code> needs you to say <code>require mathlib ...</code></p>",
        "id": 345156012,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680014832
    },
    {
        "content": "<p>(note <code>Mathlib</code> vs <code>mathlib</code>)</p>",
        "id": 345156236,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680014888
    },
    {
        "content": "<p>Thanks, I though the lakefile line needed to match the declared package name (which for mathlib is <code>Mathlib</code>)...</p>",
        "id": 345156978,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680015059
    },
    {
        "content": "<p>That makes sense too. But due to this behavior of Lake, we're following what the <a href=\"https://github.com/leanprover/lake/blob/9e00151251d3e550f1ef4b24e59fd0d0419b0602/Lake/CLI/Init.lean#L100\">Lake template for <code>lake new foo math</code></a> does</p>",
        "id": 345157918,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680015281
    },
    {
        "content": "<p>So <a href=\"https://github.com/leanprover-community/mathlib4/blob/ad723d1303fede81b66d564ba70cd79b3e3f7b9a/Cache/IO.lean#L66\">this is how</a> we hardcode the path for mathlib</p>",
        "id": 345158374,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680015377
    },
    {
        "content": "<p>Should <code>lake build</code> on the parent project afterwards use the mathlib caches? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 345158438,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680015395
    },
    {
        "content": "<p>Yes, please don't call <code>cache</code> from within the downloaded <code>mathlib</code> folder. These are the instructions: <a href=\"https://github.com/leanprover-community/mathlib4#using-mathlib4-as-a-dependency\">https://github.com/leanprover-community/mathlib4#using-mathlib4-as-a-dependency</a></p>",
        "id": 345158777,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680015480
    },
    {
        "content": "<p>Call <code>cache</code> from the root directory of your project that depends on mathlib</p>",
        "id": 345158961,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680015510
    },
    {
        "content": "<p>If you've called <code>cache</code> from <code>lake-packages/mathlib</code>, you might as well remove the entire folder and download it again, because it's full of useless <code>.olean</code> files</p>",
        "id": 345159304,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680015587
    },
    {
        "content": "<p>Nope, I didn't, but it still didn't use the cache.</p>",
        "id": 345159889,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680015679
    },
    {
        "content": "<p>Didn't use the same lean4 version, though, maybe that's the issue?</p>",
        "id": 345160282,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680015745
    },
    {
        "content": "<p>Yes, the toolchain version is included in the hashing scheme. If you use a different version, your hashes won't match the available ones</p>",
        "id": 345160647,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680015813
    },
    {
        "content": "<p>Do you know how diamonds are handled? My project also depends on your Megaparsec, so mathlib and Megaparsec both import std4</p>",
        "id": 345160964,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680015865
    },
    {
        "content": "<p>Require <code>mathlib</code> first and pray that Megaparsec will work with the version that's downloaded from that requirement. Gabriel taught me that dependencies are downloaded from the top to the bottom of requirements</p>",
        "id": 345161631,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680015989
    },
    {
        "content": "<p><code>std4</code> is pretty stable though. I don't think there will be any issue</p>",
        "id": 345161839,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680016032
    },
    {
        "content": "<p>Thanks for the advice!</p>",
        "id": 345162716,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680016209
    },
    {
        "content": "<p>Please let me know if it works. It's a good use case data point</p>",
        "id": 345162859,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680016242
    },
    {
        "content": "<p>Will do</p>",
        "id": 345163643,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680016414
    },
    {
        "content": "<p><code>import Mathlib.Init.ZeroOne failed, environment already contains 'Zero' from YatimaStdLib.Algebra.Defs</code></p>",
        "id": 345165239,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680016729
    },
    {
        "content": "<p>I see. <span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span> maybe we should put those YSL typeclasses in a namespace. They're clashing with content from Mathlib</p>",
        "id": 345166405,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680016944
    },
    {
        "content": "<p>Is this part of the <code>Algebra.Defs</code> part of the library?</p>",
        "id": 345168150,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1680017253
    },
    {
        "content": "<p>I'm doing it right now. <span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> I'll let you know when it's done</p>",
        "id": 345168257,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680017276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> try this hash for Megaparsec: <code>7331b206ce132746ff7653ac63d1ff9491c8f8c9</code></p>",
        "id": 345178988,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680019614
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 345186184,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680021292
    },
    {
        "content": "<p>(let me know if it works)</p>",
        "id": 345186307,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680021320
    },
    {
        "content": "<p>It worked :)</p>",
        "id": 345186478,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680021367
    },
    {
        "content": "<p>Oh, damn, I take that back, missed one error <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> :<br>\n<code>import Mathlib.Data.Int.GCD failed, environment already contains 'Nat.gcdA._cstage1' from YatimaStdLib.Nat</code></p>",
        "id": 345194722,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680023503
    },
    {
        "content": "<p>Alright, let me namespace that too</p>",
        "id": 345196120,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680023936
    },
    {
        "content": "<p>Okay, try this one now: <code>93b28d0ee4be435b6b395d8b6f816fabfc085166</code></p>",
        "id": 345210289,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1680028201
    },
    {
        "content": "<p>Not related to the above (perhaps a new YatimaStdLIb thread should be split out), but I've also been having trouble with <code>lake exe cache get</code> in non-mathlib projects.</p>\n<p>Specifically, if I open the <a href=\"http://gitpod.io/#https://github.com/leanprover-community/mathport\">mathport repo in gitpod</a>, and run</p>\n<ul>\n<li><code>pkill lean</code> (just to be sure)</li>\n<li><code>lake exe cache get</code></li>\n<li><code>lake build</code></li>\n</ul>\n<p>it seems to rebuild mathlib4 from scratch</p>",
        "id": 345235355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680035089
    },
    {
        "content": "<p>The version of <code>curl</code> there is recent so that shouldn't be the problem</p>",
        "id": 345235451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680035140
    },
    {
        "content": "<p><del>(do you mean <code>lake exe cache get</code>?)</del></p>",
        "id": 345235492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680035159
    },
    {
        "content": "<p>(yes, edited)</p>",
        "id": 345237288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680035868
    },
    {
        "content": "<p>I think you should do <code>pkill lake</code> as well.  Lake will restart Lean processes.</p>",
        "id": 345242403,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1680037923
    },
    {
        "content": "<p>That seems to make no difference</p>",
        "id": 345254402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680043059
    },
    {
        "content": "<p>Is it something to do with the <code>libleanffi</code> file being built?</p>",
        "id": 345254435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680043077
    },
    {
        "content": "<p>That shouldn't have any effect on mathlib.</p>",
        "id": 345255030,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1680043312
    },
    {
        "content": "<blockquote>\n<p>it seems to rebuild mathlib4 from scratch</p>\n</blockquote>\n<p><code>Compiling</code> != <code>Building</code></p>",
        "id": 345255409,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1680043478
    },
    {
        "content": "<p>It will indeed Compile mathlib, but not Build it.  This is expected.</p>",
        "id": 345255457,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1680043499
    },
    {
        "content": "<p>Note that we compile all of mathlib into native code and link it into mathport.  I'm not sure if that's totally necessary.</p>",
        "id": 345255678,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1680043592
    },
    {
        "content": "<p>Ah, that sounds like the cause of my confusion, thanks.</p>",
        "id": 345255799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680043646
    }
]