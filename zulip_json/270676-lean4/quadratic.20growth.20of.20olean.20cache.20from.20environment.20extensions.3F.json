[
    {
        "content": "<p>Do we expect to see quadratic growth of the olean cache (in terms of LOC), coming from <code>PersistentEnvironmentExtension</code>?</p>\n<p>It seems if each file is adding something, and the extension saves its data at each olean, we expect that olean data to be linear in the number of imports, and hence the total size to be quadratic.</p>\n<p>If that is the case, how much of a worry is it for existing extensions? I made a few quick graphs, and there's certainly no obvious sign of a quadratic term dominating!</p>\n<p>If I try stashing the library_search data (i.e. a key-value pair for every declaration) in a persistent environment extension, could it become a problem then? By the end of mathlib, every olean file would essentially contain a list of every imported declaration. Opinions welcome on:</p>\n<ol>\n<li>This is obviously a bad idea.</li>\n<li>Err, try it and see.</li>\n<li>No worries, mate.</li>\n</ol>\n<p>My back of the envelope calculation says it's a bad idea: mathlib3 has 150000 declarations, so with say 100 bytes in the cache for each declaration, that would add in the worst case 15mb to an olean file. A typical file that doesn't import so much would optimistically average say 1mb, but over 3000 files that adds 3gb to the olean cache, which is untenable.</p>",
        "id": 342182752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678921183
    },
    {
        "content": "<p>For precisely this reason, the builtin extensions only export entries which were added in the current module. This way each module's <code>olean</code> contains only module-local data. You then have to merge the data during import, but that seems better than the alternative you describe.</p>",
        "id": 342191048,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1678925697
    },
    {
        "content": "<p>But isn't that just hiding the problem in a quadratic growth in compile time? In each file, we need to do linearly much work to import the extension.</p>",
        "id": 342200575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678931611
    },
    {
        "content": "<p>I guess implicit in what you've said is that when a <code>PersistentEnvironmentExtension</code> is handed an <code>Array (Array α)</code> of data to reassemble, that outermost array is indexed by all transitive imports of the current file. I had been assuming it was just the immediate imports.</p>",
        "id": 342200693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678931700
    },
    {
        "content": "<p>It seems for a really \"heavy\" environment extension like <code>library_search</code>, neither option is really good enough.</p>\n<p>An alternative would be to:</p>\n<ul>\n<li>during CI, have a file with <code>import Mathlib</code>, and then assembles the full <code>library_search</code> <code>DiscrTree</code>, and writes it to disk</li>\n<li>put this somewhere persistent (git or azure, I guess)</li>\n<li>a mechanism like <code>lake exe cache get</code> to obtain it?</li>\n<li>low down in mathlib, we import this <code>DiscrTree</code>, and then all calls to <code>library_search</code> can be fast. (in fact, the DiscrTree would be returned the <code>Name</code>s of theorems that hadn't even been imported yet, but these would fail fast)</li>\n</ul>",
        "id": 342201021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678931942
    },
    {
        "content": "<p>The alternative would also mean it’s only useful for finding mathlib lemmas.</p>",
        "id": 342204886,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678934646
    },
    {
        "content": "<p>I mean, we could keep the existing mechanisms available for other projects. It's not like anything comparable in size to mathlib is on the horizon.</p>",
        "id": 342208304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678936838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/quadratic.20growth.20of.20olean.20cache.20from.20environment.20extensions.3F/near/342200575\">said</a>:</p>\n<blockquote>\n<p>In each file, we need to do linearly much work to import the extension.</p>\n</blockquote>\n<p>Some extensions do not actually have to import all data -- if the .olean structure is already sufficient for e.g. finding specific entries via binary search, the OS should in theory only have to load those O(log n) accessed pages into memory. See <code>MapDeclarationExtension</code> for the generic representative example for this. But I guess that doesn't apply to assembling the <code>DiscrTree</code>.</p>",
        "id": 342242899,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678955298
    },
    {
        "content": "<p>Similarly to the declaration .ilean data, a global solution sounds interesting because it would allow you to find theorems you have not imported yet; on the flip side, you need to be careful not to construct self-referential proofs, such as solving a theorem with itself.</p>",
        "id": 342243430,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678955442
    }
]