[
    {
        "content": "<p>I'm stuck writing a syntax extension for <a href=\"https://prometheus.io/docs/prometheus/latest/querying/basics/\">PromQL</a>. I need to transform an array of label matchers (e.g. <code>my_name{labelA=\"foo\", labelB=\"bar\"}</code>) to a list. I've seen this being done using recursion (<a href=\"https://github.com/leanprover-community/mathlib4/blob/fc66e256246e15cb172688da993d165b2910f0b2/Mathlib/Data/Fin/VecNotation.lean#L73\">Mathlib vector notation</a>), but I'm using a syntax category different than <code>term</code>. This doesn't work I guess because I'm transforming from <code>labelmatchers</code> to <code>term</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">labelmatchers</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">labelmatcher</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">labelmatchers</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">labelmatcher</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">})</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([])</span>\n</code></pre></div>\n<p>Here is the mwe (with the non-working bits commented out):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.PrettyPrinter</span>\n<span class=\"kn\">open</span> <span class=\"n\">TSyntax.Compat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">LabelMatcher</span>\n  <span class=\"bp\">|</span> <span class=\"n\">equal</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">InstantVector</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">selector</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lms</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">LabelMatcher</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">InstantVector</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">withAntiquot</span> <span class=\"o\">(</span><span class=\"n\">mkAntiquot</span> <span class=\"s2\">\"name\"</span> <span class=\"bp\">`</span><span class=\"n\">LX.text</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">startPos</span> <span class=\"o\">:=</span> <span class=\"n\">s.pos</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">takeWhile1Fn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.isAlphanum</span> <span class=\"bp\">||</span> <span class=\"s2\">\"_\"</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"s2\">\"Invalid name\"</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"bp\">;</span>\n    <span class=\"n\">mkNodeToken</span> <span class=\"bp\">`</span><span class=\"n\">LX.text</span> <span class=\"n\">startPos</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[combinator_formatter name]</span> <span class=\"kd\">def</span> <span class=\"n\">name.formatter</span> <span class=\"o\">:</span> <span class=\"n\">Formatter</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"kd\">@[combinator_parenthesizer name]</span> <span class=\"kd\">def</span> <span class=\"n\">name.parenthesizer</span> <span class=\"o\">:</span> <span class=\"n\">Parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">labelmatcher</span>\n<span class=\"n\">syntax</span> <span class=\"n\">name</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">strLit</span> <span class=\"o\">:</span> <span class=\"n\">labelmatcher</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatcher</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">key</span><span class=\"o\">:</span><span class=\"n\">name</span><span class=\"bp\">=$</span><span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">LabelMatcher.equal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">key.raw</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getAtomVal</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">value</span><span class=\"o\">)</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">labelmatchers</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">labelmatcher</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">labelmatchers</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"c1\">--| `(labelmatchers| { $x,$xs,* }) =&gt; `($x :: {$xs:labelmatcher,*})</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([])</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">instantvector</span>\n<span class=\"n\">syntax</span> <span class=\"n\">name</span> <span class=\"n\">labelmatchers</span> <span class=\"o\">:</span> <span class=\"n\">instantvector</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">instantvector</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">labelmatchers</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">InstantVector.selector</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">name.raw</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getAtomVal</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">))</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[pql|\"</span> <span class=\"n\">instantvector</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">pql</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">instantvector</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">[</span><span class=\"n\">pql</span><span class=\"bp\">|</span> <span class=\"n\">up</span><span class=\"o\">{</span><span class=\"kd\">instance</span><span class=\"bp\">=</span><span class=\"s2\">\"foo\"</span><span class=\"o\">}</span> <span class=\"o\">]</span>\n<span class=\"c1\">--#reduce [pql| up{instance=\"foo\", job=\"nodes\"} ]</span>\n</code></pre></div>",
        "id": 357219335,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1683710547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198384\">@Björn Fischer</span>  </p>\n<p>This gets rid of the error and fixes your second (commented out) example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([])</span>\n</code></pre></div>\n<p>Disclaimer: I looked at your example very briefly and just poked at it to distract myself from studying for exams, so I don't understand the larger thing you're going for and this may not actually address your problem.</p>",
        "id": 357418620,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1683759826
    },
    {
        "content": "<p>You can do a more direct recursion thing that's more akin to what you were doing as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">xs'</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">})</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">xs'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 357421956,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1683761950
    },
    {
        "content": "<p>The most direct solution is probably just using a single rule since you already have a rule for the individual elements:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatchers</span><span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 357422298,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1683762213
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"228466\">@Chris Bailey</span> . That helps a bunch.</p>\n<p>So I can expand all elements at once using the syntax <code>$xs,*</code> (i was missing the <code>,*</code> on the expansion side) or provide the syntax category explicitly in the subterm of <code>term</code> (for a recursive approach).</p>\n<p>Good luck with your exams :)</p>",
        "id": 357478634,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1683787274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198384\">Björn Fischer</span> has marked this topic as resolved.</p>",
        "id": 357480299,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683787653
    }
]