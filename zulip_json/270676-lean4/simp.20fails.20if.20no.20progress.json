[
    {
        "content": "<p>I've managed to get <code>simp</code> to fail if it doesn't make progress.</p>\n<ul>\n<li>the Lean PR implementing it <a href=\"https://github.com/leanprover/lean4/pull/2334\">lean4#2334</a></li>\n<li>the Lean PR turning it on by default <a href=\"https://github.com/leanprover/lean4/pull/2336\">lean4#2336</a></li>\n<li>the Std PR <a href=\"https://github.com/leanprover/std4/pull/190\">std4#190</a> (currently depending on a custom toolchain)</li>\n<li>the Mathlib PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6019\">#6019</a> (currently depending on a custom toolchain, and a custom Std branch)</li>\n</ul>",
        "id": 376909337,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689845977
    },
    {
        "content": "<p>Reviews at any point along that chain welcome. :-)</p>",
        "id": 376909446,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689845999
    },
    {
        "content": "<p>(Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for the implementation help!)</p>",
        "id": 376909568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689846017
    },
    {
        "content": "<p>There's a 4 missing from the first linkifier I think</p>",
        "id": 376910442,
        "sender_full_name": "Julian Berman",
        "timestamp": 1689846214
    },
    {
        "content": "<blockquote>\n<p>Files changed 214</p>\n</blockquote>\n<p>Sounds like fun :)</p>",
        "id": 376912129,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1689846553
    },
    {
        "content": "<p>Is there a nice way to make <code>make_two_goals; simp</code> only consider \"no progress\" if <code>simp</code> doesn't progres on either goal?</p>",
        "id": 376912643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689846650
    },
    {
        "content": "<p>We could have an <code>any_goals</code> combinator, which fails unless the tactic succeeds on at least one goal. In fact I think we had this in mathlib3.</p>",
        "id": 376918504,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689847909
    },
    {
        "content": "<p>Can you remind me what the advantage of tracking \"no changes\" inside <code>simp</code> vs outside <code>simp</code> as a combinator is?</p>",
        "id": 376920271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689848234
    },
    {
        "content": "<p>Does it need information that's only available within <code>simp</code>?</p>",
        "id": 376920317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689848243
    },
    {
        "content": "<p>we had to modify the implementation a bit, but the way it works now, it could quite easily be done outside of <code>simp</code>: it fails with no progress iff the returned goal is a singleton of the input goal (the exact same <code>MVarId</code>)</p>",
        "id": 376921403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689848419
    },
    {
        "content": "<p>but I think we want it to be the default behavior anyway</p>",
        "id": 376921718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689848464
    },
    {
        "content": "<p>I wonder if we want it to be the default for all tactics except those which opt-out somehow</p>",
        "id": 376925603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689849237
    },
    {
        "content": "<p>While we could achieve the same result from something wrapping <code>simp</code>, that outside wrapper would then be depending on something that is observationally true about <code>simp</code> (namely, that if it makes no progress the returned goal is identically the same <code>MVarId</code>), but not strictly part of the specification of <code>simp</code>. I'd prefer that <code>simp</code> is \"responsible\" for ensuring that it fails correctly.</p>\n<p>(For smaller tactics this distinction is perhaps less important, but <code>simp</code> is complicated!)</p>",
        "id": 376933567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689850813
    },
    {
        "content": "<p>Thanks, that makes sense to me</p>",
        "id": 376951539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689854334
    },
    {
        "content": "<p>I think the only other thing that concerns me is that <code>simp { fail_if_no_progress := false}</code> is long so people will type <code>try simp</code> instead, which isn't really the right thing</p>",
        "id": 376951727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689854375
    },
    {
        "content": "<p>I have some code lying around which implements a more extensional answer to the question \"do two mvars represent the same goal?\". It's mostly a straightforward check for syntactic equality of the hypotheses and the target (possibly ignoring <code>mdata</code>), though we have to match up <code>FVarId</code>s which may be different in the two goals. The only difficulty is, as always, the treatment of unassigned metavariables: if two metavariables occur in the same position in the goals, we have to (a) recursively check that they are equal and (b) make sure that henceforth these two metavariables are paired up, so when we see one in one goal, we have to see the other in the other goal.</p>",
        "id": 376951889,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689854412
    },
    {
        "content": "<p>If detecting if progress was made is something that is best for the tactic itself to do, could there be a standard way to communicate that to the <code>;</code> combinator, and to allow something like <code>allow_no_progress { simp at hx, simp }</code> which means the same as your <code>simp { fail_if_no_progress := false} at hx, simp { fail_if_no_progress := false}</code>?</p>",
        "id": 376952452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689854531
    },
    {
        "content": "<p>I've wondered about what sort of protocol we could have to communicate additional general configuration to tactics. For example, what if <code>? tac</code> was how you could get a \"Try this\" for any tactic that supports it? This allowing no progress could be another such configuration.</p>\n<p>Could this be implemented using <code>set_option tactic.allow_no_progress true in tac</code> and <code>set_option tactic.try_this true in tac</code>?</p>",
        "id": 376953833,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689854820
    },
    {
        "content": "<p>Not sure if everyone has seen this pr <a href=\"https://github.com/leanprover-community/mathlib4/pull/3757\">#3757</a> of <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>', which provides a highly configurable way to test if progress has been made.</p>",
        "id": 376953961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689854840
    },
    {
        "content": "<p>I had not, thank you! <a href=\"#narrow/stream/287929-mathlib4/topic/progress.20on.20fail_if_no_progress\">Related discussion.</a></p>",
        "id": 376961960,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689856484
    },
    {
        "content": "<p>In order to merge these PRs, it would be good to have clear consensus about changing the behaviour of <code>simp</code> to fail if it doesn't make progress.</p>\n<p>The situation at present is that we have four PRs</p>\n<ul>\n<li>the Lean PR implementing it <a href=\"https://github.com/leanprover/lean4/pull/2334\">lean4#2334</a> (coauthored with Mario)</li>\n<li>the Lean PR turning it on by default <a href=\"https://github.com/leanprover/lean4/pull/2336\">lean4#2336</a></li>\n<li>the Std PR <a href=\"https://github.com/leanprover/std4/pull/190\">std4#190</a> (currently depending on a custom toolchain)</li>\n<li>the Mathlib PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6019\">#6019</a> (currently depending on a custom toolchain, and a custom Std branch)</li>\n</ul>\n<p>For context, we have a general <code>fail_if_no_progress</code> combinator, which is currently not particularly capable, but Thomas Murrils' PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/3757\">#3757</a> gives it many configuration options.</p>\n<p>Thus is would be possible to achieve a \"<code>simp</code> that fails if it makes no progress\" without modifying the behaviour of <code>simp</code>, and instead wrapping it whenever needed. However, this would be depending on something that is observationally true about <code>simp</code> (namely, that if it makes no progress then the returned goal is identically the same <code>MVarId</code>), but not strictly part of the specification of <code>simp</code>. The PRs above make <code>simp</code> \"responsible\" for ensuring that it fails correctly.</p>\n<p>The arguments in favour of having <code>simp</code> fail if it makes no progress by default are:</p>\n<ul>\n<li>It's easier when writing proofs to see if any progress happened</li>\n<li><code>simp_rw</code> proofs will show errors when the simp set changes and causes a step to become ineffective</li>\n<li>It is easier for tactics that use <code>simp</code> as a step to do flow control depending on whether it made progress</li>\n</ul>\n<p>The argument against having <code>simp</code> fail if it makes no progress by default are:</p>\n<ul>\n<li>Many tactics that use <code>simp</code> as a pre-processing step need to write <code>try simp [...]</code> or <code>simp (config := {failIfUnchanged := false}) [...]</code> now.</li>\n<li>We need to slightly modify the behaviour of <code>simp_all</code>, so that the ordering of the hypotheses afterwards may have changed slightly. This did not appear to affect Mathlib.</li>\n</ul>\n<p>I'll post a poll as the next message. It would be good if people could indicate their choice on that, and hopefully if there is positive consensus we'll be able to link to here from the release notes justifying this change.</p>",
        "id": 380153295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690761888
    },
    {
        "content": "<p>/poll Should the default behaviour of <code>simp</code> be to fail if it makes no progress?</p>",
        "id": 380154217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690762422
    },
    {
        "content": "<p>Finally, here are all the past discussions of this that I could find:</p>\n<ul>\n<li><a href=\"#narrow/stream/113488-general/topic/split_ifs/near/127536703\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/split_ifs/near/127536703</a></li>\n<li><a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/325897614\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/325897614</a></li>\n<li><a href=\"#narrow/stream/287929-mathlib4/topic/Stepping.20through.20simp_rw/near/326972115\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Stepping.20through.20simp_rw/near/326972115</a></li>\n<li><a href=\"#narrow/stream/270676-lean4/topic/tactics.20that.20have.20no.20effect/near/366038803\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/tactics.20that.20have.20no.20effect/near/366038803</a></li>\n<li><a href=\"#narrow/stream/287929-mathlib4/topic/.23stalled.20PRs/near/373462921\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.23stalled.20PRs/near/373462921</a></li>\n<li><a href=\"#narrow/stream/270676-lean4/topic/Inheriting.20defaults.20from.20parent.20structures/near/373696355\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Inheriting.20defaults.20from.20parent.20structures/near/373696355</a></li>\n</ul>",
        "id": 380154332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690762467
    }
]