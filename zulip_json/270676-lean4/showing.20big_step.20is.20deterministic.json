[
    {
        "content": "<p>I'm attempting to translate the lean3 example files from Ch8 <a href=\"https://lean-forward.github.io/logical-verification/2022/index.html\">logical verification course</a> to lean4.</p>\n<p>To prove the deterministic theorem,  induction on hl seems the way to go,<br>\nbut <code>deterministic1</code> gives <code>induction hl</code> fails.</p>\n<p><code>deterministic2</code> uses match, but the inaccessible variables are preventing<br>\nprogress.</p>\n<p>Any suggestions?<br>\nMWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">state</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">state.update</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">stmt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">skip</span>   <span class=\"o\">:</span> <span class=\"n\">stmt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">assign</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span>    <span class=\"o\">:</span> <span class=\"n\">stmt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span>    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">while</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">big_step</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span> <span class=\"bp\">×</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">stmt.skip</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">assign</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">stmt.assign</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">state.update</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">stmt.seq</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite_true</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hcond</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hbody</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">stmt.ite</span> <span class=\"n\">b</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite_false</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hcond</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hbody</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">stmt.ite</span> <span class=\"n\">b</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">while_true</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hcond</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hbody</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hrest</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">stmt.while</span> <span class=\"n\">b</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">stmt.while</span> <span class=\"n\">b</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">while_false</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hcond</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">stmt.while</span> <span class=\"n\">b</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">deterministic1</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hl</span>\n  <span class=\"c1\">-- index in target's type is not a variable (consider using the `cases` tactic instead)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">deterministic2</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">big_step</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">hl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">big_step.skip</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">big_step.skip</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">big_step.assign</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">big_step.assign</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">big_step.ite_true</span> <span class=\"n\">lcond</span> <span class=\"n\">lbody</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">big_step.ite_true</span> <span class=\"n\">rcond</span> <span class=\"n\">rbody</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">deterministic2</span> <span class=\"n\">lbody</span> <span class=\"n\">rbody</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">big_step.ite_false</span> <span class=\"n\">rcond</span> <span class=\"n\">rbody</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">big_step.ite_false</span> <span class=\"n\">lcond</span> <span class=\"n\">lbody</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">big_step.ite_true</span> <span class=\"n\">rcond</span> <span class=\"n\">rbody</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n    <span class=\"bp\">|</span> <span class=\"n\">big_step.ite_false</span> <span class=\"n\">rcond</span> <span class=\"n\">rbody</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">deterministic2</span> <span class=\"n\">lbody</span> <span class=\"n\">rbody</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">big_step.while_true</span> <span class=\"n\">lcond</span> <span class=\"n\">lbody</span> <span class=\"n\">lrest</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">big_step.while_true</span> <span class=\"n\">rcond</span> <span class=\"n\">rbody</span> <span class=\"n\">rrest</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">--   lcond : b✝ s</span>\n      <span class=\"c1\">--   lbody : big_step (S✝, s) t✝¹</span>\n      <span class=\"c1\">--   lrest : big_step (stmt.while b✝ S✝, t✝¹) l</span>\n      <span class=\"c1\">--   rcond : b✝ s</span>\n      <span class=\"c1\">--   rbody : big_step (S✝, s) t✝</span>\n      <span class=\"c1\">--   rrest : big_step (stmt.while b✝ S✝, t✝) r</span>\n      <span class=\"c1\">-- Would like to:</span>\n      <span class=\"c1\">--  1. recurse on lbody, rbody to show t✝¹ = t✝</span>\n      <span class=\"c1\">--  2. replace t✝¹ with t✝</span>\n      <span class=\"c1\">--  3. recurse on lrest, rrest to show l = r</span>\n</code></pre></div>",
        "id": 324754717,
        "sender_full_name": "Daniel Bourgeois",
        "timestamp": 1675105190
    },
    {
        "content": "<p>oh, I feel like this might be a regression of the induction tactic</p>",
        "id": 324963072,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675183913
    },
    {
        "content": "<p>cuz I think in Lean3 it would generalize <code>(S,s) = s'</code> such that the index is a variable. you can do this manually in Lean4 with the <code>generalize</code> tactic</p>",
        "id": 324963321,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675183963
    },
    {
        "content": "<p>RE: unreachable names, you can use <code>next a b ... =&gt; ...</code> to give names to the most recent unreachable variables</p>",
        "id": 324963593,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675184038
    },
    {
        "content": "<p>The <code>induction'</code> tactic which we use for Lean 3 LoVe does generalisation automatically. Stock <code>induction</code> probably doesn't, or at least not correctly. It's actually nicer that Lean 4 induction refuses to operate in this situation instead of doing the likely-wrong thing.</p>",
        "id": 324973876,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675186595
    },
    {
        "content": "<p>(<code>induction'</code> is defined in Mathlib, in case you weren't importing Mathlib already)</p>",
        "id": 324976971,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675187468
    },
    {
        "content": "<p><code>next</code> tactic worked for the <code>deterministic2</code> attempt, but it looks like using the match approach isn't appropriate because it doesn't show no termination</p>\n<p>I'll take a look at the <code>induciton'</code> mathlib tactic <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span></p>",
        "id": 324980008,
        "sender_full_name": "Daniel Bourgeois",
        "timestamp": 1675188258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/showing.20big_step.20is.20deterministic/near/324976971\">said</a>:</p>\n<blockquote>\n<p>(<code>induction'</code> is defined in Mathlib, in case you weren't importing Mathlib already)</p>\n</blockquote>\n<p>Actually I think that's the wrong <code>induction'</code></p>",
        "id": 324986133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675190016
    },
    {
        "content": "<p>the mathlib4  <code>induction'</code> tactic is a replacement for lean 3 <code>induction</code>, and lean 3 <code>induction'</code> is still on the todo list (it might have been marked as \"skip\" because there aren't any uses of it in mathlib)</p>",
        "id": 324986372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675190075
    }
]