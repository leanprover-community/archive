[
    {
        "content": "<p>I have an unsafe function, which I'm only ever going to call from meta code. What is the simplest mechanism to cope with the unsafe keyword? As an example, how do I make this run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foobar\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foobar</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Am I just meant to use <code>implemented_by</code> with a noop for the complicated reality of <code>foo</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"kd\">@[implemented_by foo]</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foobar\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foobar</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foobar</span> <span class=\"c1\">-- prints 37 still</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 342530637,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679051539
    },
    {
        "content": "<p>If there's some way to just decorate the <code>elab_rules</code> to allow it to make unsafe declarations I'd be happier with that.</p>",
        "id": 342530778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679051582
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.TermUnsafe.termUnsafe_#doc\">docs4#Std.TermUnsafe.termUnsafe_</a> as in <code>=&gt; unsafe do</code></p>",
        "id": 342532735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679052160
    }
]