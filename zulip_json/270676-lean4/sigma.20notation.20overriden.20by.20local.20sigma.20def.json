[
    {
        "content": "<p>It seems that if we have a definition called <code>Sigma</code> in a namespace, that the <code>Σ</code> notation will refer to this local <code>Sigma</code>, rather than the usual, root, <code>Sigma</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">MySigma</span>\n  <span class=\"sd\">/-- We define a new `Sigma` -/</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Sigma</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> Now, `Σ` notatation refers to `MySigma.Sigma`, rather than the root `Sigma` -/</span>\n  <span class=\"k\">#reduce</span> <span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"c1\">-- This reduces to `String`</span>\n<span class=\"kd\">end</span> <span class=\"n\">MySigma</span>\n</code></pre></div>\n<p>Looking at the definition, this surprises me bit.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"Σ\"</span> <span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">explicitBinders</span> <span class=\"s2\">\", \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">expandExplicitBinders</span> <span class=\"bp\">``</span><span class=\"n\">Sigma</span> <span class=\"n\">xs</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I though the double quotes in <code>``Sigma </code> were supposed to prevent exactly this kind of shadowing.</p>\n<p>So, is this behaviour of sigma a bug? I wouldn't mind digging in deeper and seeing if I can make a PR that fixes it, but I heard the core team is not really able to accept outside PRs right now, is that true?</p>",
        "id": 329461417,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677080611
    },
    {
        "content": "<p>Interestingly, even if we change the notation to mention <code>_root_.Sigma</code>explicitly, it still has this same shadowing behaviour</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"Σ''\"</span> <span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">explicitBinders</span> <span class=\"s2\">\", \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">expandExplicitBinders</span> <span class=\"bp\">``</span><span class=\"n\">_root_.Sigma</span> <span class=\"n\">xs</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 329462247,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677080837
    },
    {
        "content": "<p>Oh looks like a simple oversight in <code>expandExplicitBinders</code></p>",
        "id": 329462250,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677080838
    },
    {
        "content": "<p>Ah, yeah, it seems that if we change </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">combinator</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">combinatorDeclName</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">combinator</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdentFrom</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">combinatorDeclName</span>\n</code></pre></div>\n<p>in <code>expandExplicitBinders</code>, then everything works.</p>",
        "id": 329465609,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677081622
    },
    {
        "content": "<p>Yep <a href=\"https://github.com/leanprover/lean4/commit/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95\">https://github.com/leanprover/lean4/commit/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95</a></p>",
        "id": 329467581,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677082087
    },
    {
        "content": "<p>Oh well, I could have used <code>mkCIdentFromRef</code></p>",
        "id": 329467699,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677082116
    },
    {
        "content": "<p>Cool, thanks for fixing it!</p>",
        "id": 329471648,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677082987
    }
]