[
    {
        "content": "<p>What I want to do: I want a list of all structure instances (in mathlib) for which there are declared fields of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here <code>add</code> is an example. Generally, I want to know if the user has explicitly filled a field with what is effectively a call to<code>inferInstance</code>. What are people's thoughts on the best way to do this?</p>",
        "id": 388363459,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693499155
    },
    {
        "content": "<p>a linter sounds like the easiest way to do this</p>",
        "id": 388373586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693502424
    },
    {
        "content": "<p>you won't get a list exactly but you can run it in CI and get a bunch of warnings</p>",
        "id": 388373713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693502483
    },
    {
        "content": "<p>I am guessing we will want a linter for this anyway. The context being the following: such a pattern, most of the time, creates a expanded term for the structure instance which is less efficient for unification than just deleting the line and for no benefit.</p>",
        "id": 388374560,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693502845
    },
    {
        "content": "<p>Note that in Lean3 the opposite was often true; writing <code>add := (+)</code> would ensure that you could unfold one step and get to the <code>has_add</code> instance</p>",
        "id": 388374728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693502915
    },
    {
        "content": "<p>I've had timeouts (in Lean 3) that were solved by adding lines exactly of the form you mention above.</p>",
        "id": 388374796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693502950
    },
    {
        "content": "<p>And we defaulted to Lean 3 muscle memory for the port.</p>",
        "id": 388374874,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693502991
    },
    {
        "content": "<p>What is the closest thing we have to this behavior (figuring out if we are using <code>inferInstance</code> or something close to it) at the moment?</p>",
        "id": 388394489,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693510821
    },
    {
        "content": "<p>I was thinking of something pretty syntactic: look for a structure instance syntax, and if the field is <code>foo := e</code> then both <code>foo</code> and <code>e</code> will have Exprs in the info tree, see if <code>e</code> is an application of <code>foo</code> (modulo some lambdas)</p>",
        "id": 388397579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693512210
    },
    {
        "content": "<p>Are we talking <code>Lean.Linter</code> since you mention the info tree? Are those in <code>runLinter</code>?</p>",
        "id": 388523994,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693575201
    },
    {
        "content": "<p>What is the current infrastructure to run a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.Linter#doc\">docs#Lean.Elab.Command.Linter</a> like the std linters in<code>runLinter</code>? I want to run over a whole library and report back the results in a single place.</p>",
        "id": 388583616,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693594867
    },
    {
        "content": "<p>there is no such thing currently</p>",
        "id": 388584601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693595317
    },
    {
        "content": "<p>you can run a linter on a specific <code>Syntax</code>, but in order to get that syntax you would have to elaborate the file, at which point you are already running the linter</p>",
        "id": 388584695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693595370
    },
    {
        "content": "<p>and moreover that only works for one file; if you wanted the results from multiple files you would need multiple processes because lean doesn't handle multiple files in one process right now</p>",
        "id": 388584840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693595422
    },
    {
        "content": "<p>so you could do it, but it would involve compiling the whole project</p>",
        "id": 388584881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693595459
    },
    {
        "content": "<p>and then a bunch of IPC via json or something to get the results in one place</p>",
        "id": 388584924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693595481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, I have some infrastructure for running something at every declaration in mathlib. Look at <a href=\"https://github.com/semorrison/lean-training-data\">https://github.com/semorrison/lean-training-data</a>, particularly <code>tactic-benchmark</code>.</p>",
        "id": 388674708,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693648826
    },
    {
        "content": "<p>If you give me exactly what you want to run at each declaration I can hook it up to that on Monday.</p>",
        "id": 388674824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693648896
    }
]