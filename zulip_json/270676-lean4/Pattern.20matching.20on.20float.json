[
    {
        "content": "<p>I tried pattern matching on floats and it seems to fail. I presume it's because <code>Float</code> is opaque. Is there anything I could do to make this go through?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Float.isZero</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">dependent elimination failed, type mismatch when solving alternative with type</span>\n<span class=\"cm\">  motive (Float.ofScientific 0 false 0)</span>\n<span class=\"cm\">but expected</span>\n<span class=\"cm\">  motive x</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 387318508,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1692985781
    },
    {
        "content": "<p>I am not surprised because <code>=</code> doesn't work on floats either.</p>",
        "id": 387319731,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1692986384
    },
    {
        "content": "<p>Is <code>Float.isZero -0</code> true or false? :) Yeah Float is a bit messed up here and there is a reason no decidable equality is defined on Float. For \"deciding\" float equality <code>x = y</code> I'm using <code>x ≤ y &amp;&amp; y ≤ x</code>.</p>",
        "id": 387319917,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692986462
    },
    {
        "content": "<p>Does <code>x ≤ y &amp;&amp; y ≤ x</code> ever give a different result than <code>x == y</code> on Floats?</p>",
        "id": 387320009,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1692986511
    },
    {
        "content": "<p><span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span>  I didn't notice that Float has <code>BEq</code></p>",
        "id": 387332652,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1692991597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20on.20float/near/387320009\">said</a>:</p>\n<blockquote>\n<p>Does <code>x ≤ y &amp;&amp; y ≤ x</code> ever give a different result than <code>x == y</code> on Floats?</p>\n</blockquote>\n<p>I would ask that the IEEE standard</p>",
        "id": 387332964,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692991708
    },
    {
        "content": "<p>knowing how funky said standard can be my bet is: yes</p>",
        "id": 387332980,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692991717
    },
    {
        "content": "<p>What does it give on NaN and NaN</p>",
        "id": 387333483,
        "sender_full_name": "MangoIV",
        "timestamp": 1692991914
    },
    {
        "content": "<p>false</p>",
        "id": 387333593,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692991959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20on.20float/near/387332964\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20on.20float/near/387320009\">said</a>:</p>\n<blockquote>\n<p>Does <code>x ≤ y &amp;&amp; y ≤ x</code> ever give a different result than <code>x == y</code> on Floats?</p>\n</blockquote>\n<p>I would ask that the IEEE standard</p>\n</blockquote>\n<p>I think that one is actually true (that is, there are no such counterexamples)</p>",
        "id": 387343273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692997191
    }
]