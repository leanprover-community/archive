[
    {
        "content": "<p>Upon updating to Lean 4 nightly 2023-04-20, I've run into the following issue when using <code>Coe</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A.With</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">a_eq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">instance does not provide concrete values for (semi-)out-params</span>\n<span class=\"cm\">  Coe (A.With ?a) (A α)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">A.With</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">A.With.toA</span>\n</code></pre></div>\n<p>I'm not well-versed when it comes to type class inference, so in this example I'm guessing I'm doing something bad which Lean is now capable of informing me about. What is the problem here though, and how do I fix or work around it?</p>",
        "id": 352511815,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1682423044
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#Important-typeclasses\">https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#Important-typeclasses</a> help?</p>",
        "id": 352517836,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682424544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.28semi-.29out-params/near/352517836\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#Important-typeclasses\">https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#Important-typeclasses</a> help?</p>\n</blockquote>\n<p>Thanks, I think it did! Would the right move be to use <code>CoeOut</code>?</p>",
        "id": 352584730,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1682439611
    },
    {
        "content": "<p>To me it seems <code>CoeDep</code> is the right way, no?</p>",
        "id": 352589050,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682440700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/.28semi-.29out-params/near/352589050\">said</a>:</p>\n<blockquote>\n<p>To me it seems <code>CoeDep</code> is the right way, no?</p>\n</blockquote>\n<p>The type <code>A α</code> doesn't depend on the precise term of type <code>A.With a</code> though.</p>",
        "id": 352590833,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1682441109
    }
]