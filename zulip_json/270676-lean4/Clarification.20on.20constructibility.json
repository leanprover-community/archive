[
    {
        "content": "<p>I have been reading a question on the Std4 stream regarding classical logic in <code>Std4.</code>.  As I understand it, by sticking to term-based proofs, you do not run the risk of accidentally invoking classical logic; however, <code>simp</code>in <code>Std4</code> uses classical lemmata, if I read that stream correctly.</p>\n<p>Is this also true for tactics in bare Lean 4?  That is, if I have no imports on my file, does invoking <code>simp</code> or other tactics run the risk of having my proofs be dependent on classical logic, without me manually opening the <code>Classical</code> namespace?</p>",
        "id": 385944876,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692373538
    },
    {
        "content": "<p>I don't think this is so much an issue of tactics, rather than whether you use, directly or indirectly, a result that is proved using an axiom that you do not want.</p>\n<p>Tactics may use such a result without you realising it.  But, unless you inspect every theorem that you use, you run the same risk by writing your own proof.</p>",
        "id": 385966731,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692382891
    },
    {
        "content": "<p>The answer is yes, there are tactics in core that use classical, e.g <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Classical.lean#L129\">https://github.com/leanprover/lean4/blob/master/src/Init/Classical.lean#L129</a>. As for simp, anyone could prove a lemma with excluded middle and tag it with simp and simp will use it, namespaces are simply an organizational feature they don't control whether simp will apply lemmas or not. I am not sure if there are such simp lemmas in core but I would guess there are indeed. Simp also uses propositional extensionality internally so that's another source of non-classicality.</p>",
        "id": 385967221,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692383116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/Clarification.20on.20constructibility/near/385966731\">said</a>:</p>\n<blockquote>\n<p>I don't think this is so much an issue of tactics, rather than whether you use, directly or indirectly, a result that is proved using an axiom that you do not want.</p>\n<p>Tactics may use such a result without you realising it.  But, unless you inspect every theorem that you use, you run the same risk by writing your own proof.</p>\n</blockquote>\n<p>I am not using external theorems except for elementary <code>Nat</code> theorems from core that, as far as I know, are all valid constructively.   I do not use any imports, and am implementing notions of divisibility, primality etc. from first principles as an exercise; I want to do this completely constructively.</p>",
        "id": 385986029,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692391255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Clarification.20on.20constructibility/near/385967221\">said</a>:</p>\n<blockquote>\n<p>The answer is yes, there are tactics in core that use classical, e.g <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Classical.lean#L129\">https://github.com/leanprover/lean4/blob/master/src/Init/Classical.lean#L129</a>. As for simp, anyone could prove a lemma with excluded middle and tag it with simp and simp will use it, namespaces are simply an organizational feature they don't control whether simp will apply lemmas or not. I am not sure if there are such simp lemmas in core but I would guess there are indeed. Simp also uses propositional extensionality internally so that's another source of non-classicality.</p>\n</blockquote>\n<p>Could you avoid those lemmas in <code>simp</code> using <code>simp only</code>?  More to the point, I got the impression from the beginning chapters of TPIL that one could stick to a constructive logic for proving basic propositions about <code>Prop</code> and <code>Nat</code>.  If <code>simp</code> introduces accidental classicality, the exercises with/without <code>Classical</code> in the first few chapters make no sense.</p>",
        "id": 385988135,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692392285
    },
    {
        "content": "<p>I suspect that you will find that, while theoretically possible to stay constructive, it is in practice essentially impossible.  It might work for a very small project, but anything larger scale is unlikely to succeed.</p>\n<p>At least, this is my personal opinion.</p>",
        "id": 385992195,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692394552
    },
    {
        "content": "<p>This is fine, I want to prove the infinitude of prime numbers constructively.</p>",
        "id": 385993830,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692395723
    },
    {
        "content": "<p>All the uses of classical axioms come from Lean core. Tactics in Std currently don't add more but they could if the alternative is inconvenient. </p>\n<p>The one tactic in core that always uses classical axioms is <code>by_cases</code>, this is partly fixed in Std. The <code>split</code> tactic uses classical axioms to split <code>if</code> statements. The <code>simp</code> tactic calls <code>split</code> in some circumstances. As a result, many theorems in Lean core and Std use classical axioms even when they are not necessary.</p>\n<p>To avoid classical axioms the easy way, you can use <code>semorrison/lean4:release-2023-08-17-split-ifs</code> as your lean toolchain, but then you will not get the benefit of recent Lean updates. The more difficult route is to avoid <code>by_cases</code> completely, avoid <code>split</code> for if statements, inspect every <code>simp</code> use carefully, inspect every theorem you use that's not your own and reprove any one that unnecessarily uses classical axioms.</p>",
        "id": 385996283,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692397292
    },
    {
        "content": "<p>Thank you for the directions, <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>.  For my modest goal, I think I can follow your advice.</p>",
        "id": 385997274,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692398024
    },
    {
        "content": "<p>I don’t know how linters work, but has anyone made a linter which warns if a theorem is not constructive and if so where the sources of nonconstructivity are?</p>",
        "id": 386002362,
        "sender_full_name": "Jason Rute",
        "timestamp": 1692400985
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10954\">!3#10954</a></p>",
        "id": 386002487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692401053
    },
    {
        "content": "<p>The lean 3 meta code is of course worthless and not very portable</p>",
        "id": 386002518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692401078
    },
    {
        "content": "<p>If there's not a lot of stuff to check, you can get by with manual checks,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Logic</span>\n\n<span class=\"c1\">-- (3) The classical theorem ¬(p ↔ q) → (¬p ↔ q) is equivalent to dne.</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">part3</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">not_iff_self</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hdne</span> <span class=\"n\">_</span> <span class=\"n\">q</span> <span class=\"n\">hneq</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">part1.mp</span> <span class=\"n\">hneq</span> <span class=\"bp\">;</span> <span class=\"o\">⟨</span><span class=\"n\">hdne</span> <span class=\"n\">q</span> <span class=\"bp\">∘</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">part3</span> <span class=\"c1\">-- 'part3' does not depend on any axioms</span>\n</code></pre></div>",
        "id": 386003639,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692401808
    },
    {
        "content": "<p>Another source of <code>Classical</code> is, surprisingly, recursion. You will see the following even if you use <code>semorrison/lean4:release-2023-08-17-split-ifs</code> toolchain:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">test</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- 'test' depends on axioms: [Classical.choice, Quot.sound, propext]</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 386023048,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692409144
    },
    {
        "content": "<p>Fascinating example! The termination proof somehow uses classical axioms but I don't know why. This is worth investigating...</p>",
        "id": 386028439,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692411559
    },
    {
        "content": "<p>Lean internally convert the def of <code>test</code> into well-founded recursion (see e.g. <code>#print test</code>). The termination proof depends on theorems in <code>Init.Data.Nat.Linear</code> where you see a lot of <code>by_cases</code>s.</p>",
        "id": 386028799,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692411754
    },
    {
        "content": "<p>Indeed, <code>by_cases</code> ends up being the culprit. This is really interesting because indiscriminately using classical axioms in termination proofs is not sound. Fortunately, it appears that all of these uses are not essential since the definition makes it past the kernel.</p>",
        "id": 386029337,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692412021
    },
    {
        "content": "<p>Yeah, almost all uses of <code>by_cases</code> in <code>Init.Nat.Data.Linear</code> are virtually equivalent to <code>cases</code>. So, if you want to make the file <code>Classical</code>-free, it would be a trivial (but maybe boring) work. I am not sure if it impacts the performance of the kernel.</p>",
        "id": 386032159,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692413477
    },
    {
        "content": "<p>There is no possible way this could impact the performance of the kernel</p>",
        "id": 386032394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692413567
    }
]