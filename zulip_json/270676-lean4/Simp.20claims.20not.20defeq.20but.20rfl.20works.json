[
    {
        "content": "<p>Why would I see a failure like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">assign</span> <span class=\"kd\">instance</span>\n      <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">SMul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span>\n    <span class=\"n\">sythesized</span> <span class=\"n\">value</span>\n      <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Algebra.toSMul</span>\n    <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n      <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n</code></pre></div>\n<p>with the following working fine?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">SMul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Algebra.toSMul</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">SMul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(also synthesized is mis-spelled)</p>",
        "id": 407588651,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702423076
    },
    {
        "content": "<p>I just checked the source (the spelling error made it quick to find), and when it does the check it does reducible-and-instances defeq. Maybe that's too strict in this case?</p>",
        "id": 407589827,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702423801
    },
    {
        "content": "<p>Indeed, this fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 407590235,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702424023
    },
    {
        "content": "<p>Note this is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9007\">#9007</a> and not on <code>master</code></p>",
        "id": 407590348,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702424089
    },
    {
        "content": "<p>For a follow up, how does <code>simp [Pi.smul_apply _, ...]</code> bypass this?</p>",
        "id": 407590757,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702424360
    },
    {
        "content": "<p>Does this short-circuit synthesis?</p>",
        "id": 407591900,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702425121
    },
    {
        "content": "<p>It looks like the normal isDefEq check for instances does it at default transparency</p>",
        "id": 407592845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702425649
    },
    {
        "content": "<p>I'm guessing <code>_</code> is a bypass since it switches from having simp deal with the instance argument to having the main elaborator deal with it.</p>",
        "id": 407592951,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702425686
    },
    {
        "content": "<p>And this fills in something from the cache instead of resynthesizing?</p>",
        "id": 407596923,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702427873
    },
    {
        "content": "<p>No, I don't think so. I think both with and without <code>_</code> it will use a cache. The question is who is responsible for making sure the metavariable associated to the instance argument ends up being filled in. I believe putting a <code>_</code> causes the main elaborator to handle the implicit arguments to <code>Pi.smul_apply</code>, but not including it means <code>simp</code> will decide it will take responsibility. In both cases the instance argument might be filled in via unification, but in the first the usual method checks that the filled-in value is defeq to what the synthesized value would be, but in the second <code>simp</code> does that check with reducible-and-instances defeq.</p>",
        "id": 407600006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702429165
    },
    {
        "content": "<p>Here's how instance arguments work in the main elaborator:</p>\n<ol>\n<li>The instance argument is filled in with a fresh metavariable.</li>\n<li>This metavariable is added to a table of pending instance synthesis problems. This makes it be a \"synthetic metavariable\".</li>\n<li>Periodically, the elaborator tries to synthesize pending instance synthesis problems. The synthesis either succeeds, fails, or remains indeterminate. On failure (which happens if it can tell there are no instances no matter what), it throws an error.</li>\n<li>On success, it checks if the metavariable has already been independently assigned. If it hasn't, then it assigns the metavariable. If it has, then it does an isDefEq check; if that check fails, it throws an error.</li>\n</ol>",
        "id": 407601243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702429569
    },
    {
        "content": "<p>The way <code>simp</code> works is</p>\n<ol>\n<li>The LHS of the simp lemma is unified against the target.</li>\n<li>If that succeeds, then it goes on to try to synthesize the instance arguments to the simp lemma. There's some logic about if arguments have a class as a type, it still tries to synthesize if possible, and if the argument is a prop, it tries to use <code>simp</code> on it.</li>\n</ol>",
        "id": 407602516,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702429996
    },
    {
        "content": "<p>There's an interesting comment in here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"c1\">-- Note that the binderInfo may be misleading here:</span>\n    <span class=\"c1\">-- `simp [foo _]` uses `abstractMVars` to turn the elaborated term with</span>\n    <span class=\"c1\">-- mvars into the lambda expression `fun α x inst =&gt; foo x`, and all</span>\n    <span class=\"c1\">-- its bound variables have default binderInfo!</span>\n</code></pre></div>",
        "id": 407602576,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702430011
    },
    {
        "content": "<p>Huh</p>",
        "id": 407602738,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702430052
    },
    {
        "content": "<p>I guess actually <code>foo _</code> causes all the arguments to become explicit, so it becomes less picky about the usual instance rules. (I'm pretty sure instance arguments will still be handled by the main elaborator's system. This is just about causing <code>simp</code> to not try using the pickier method on top of that.)</p>",
        "id": 407602782,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702430068
    },
    {
        "content": "<p>I didn't know that <code>simp</code> was happy to fill in non-<code>[...]</code> typeclass arguments. Maybe we should use <code>{...}</code> instead of <code>[...]</code> a lot more frequently for <code>simp</code> lemmas, since that means (1) it should pick up these arguments via unification (skipping potentially expensive instance synthesis) and (2) do instance synthesis if that wasn't sufficient</p>",
        "id": 407603153,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702430188
    },
    {
        "content": "<p>If that's a problem for using these as <code>rw</code> lemmas, maybe <code>rw</code> could use the same logic?</p>",
        "id": 407603210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702430210
    },
    {
        "content": "<p>What are the disadvantages in principal of prioritizing unification over synthesis here?</p>",
        "id": 407603475,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702430298
    },
    {
        "content": "<p>There's nothing making sure that instances remain canonical, and maybe it could be a problem that unification might only half solve for an instance? (i.e., the instance it picks up might contain metavariables that a full instance synthesis could fill in)</p>",
        "id": 407603672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702430378
    },
    {
        "content": "<p>That second point doesn't seem like a real problem, since those metavariables would still be goals or should otherwise be accounted for.</p>",
        "id": 407603789,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702430409
    },
    {
        "content": "<p>Here's the line in <code>rewrite</code> that causes arguments to a rewrite lemma to be synthesized: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Rewrite.lean#L50\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Rewrite.lean#L50</a> (in particular, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.synthAppInstances#doc\">docs#Lean.Meta.synthAppInstances</a>)</p>\n<p>Here's the logic in <code>simp</code> for synthesizing simp lemma arguments: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L22-L65\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L22-L65</a></p>",
        "id": 407604628,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702430731
    },
    {
        "content": "<p>Upgrading that logic for rewrite would also affect <code>apply</code></p>",
        "id": 407605085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702430899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Simp.20claims.20not.20defeq.20but.20rfl.20works/near/407589827\">said</a>:</p>\n<blockquote>\n<p>I just checked the source (the spelling error made it quick to find), and when it does the check it does reducible-and-instances defeq. Maybe that's too strict in this case?</p>\n</blockquote>\n<p>Previous thread about a similar issue: <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/apply.20instance.20check.20fails.20at.20reducible.20transparency\">#lean4 &gt; apply instance check fails at reducible transparency</a></p>\n<p>There, the problem is that the instance check in <code>apply</code> is performed with the ambient transparency. So with <code>with_reducible apply</code> (which I'd like to use for Aesop), it can happen that a lemma is applicable at <code>reducible</code> transparency, but the instance check fails at <code>reducible</code> transparency and so <code>apply</code> fails.</p>\n<p>I think we should investigate whether it would be feasible to have these instance checks use a fixed, fairly aggressive transparency (<code>default</code>? <code>all</code> even?). This would make sure that users are bothered as little as possible by these checks. Of course, we'd have to keep an eye on performance.</p>",
        "id": 407693520,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702463201
    },
    {
        "content": "<p>best not to ever use <code>all</code>, it is an implementation detail that irreducible defs are even unfoldable</p>",
        "id": 407695695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702463778
    },
    {
        "content": "<p>Would using <code>with_reducible_and_instances apply</code> solve this issue, while not making the <code>apply</code> significantly more expensive?</p>",
        "id": 407730099,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702475260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Simp.20claims.20not.20defeq.20but.20rfl.20works/near/407603153\">said</a>:</p>\n<blockquote>\n<p>I didn't know that <code>simp</code> was happy to fill in non-<code>[...]</code> typeclass arguments. Maybe we should use <code>{...}</code> instead of <code>[...]</code> a lot more frequently for <code>simp</code> lemmas, since that means (1) it should pick up these arguments via unification (skipping potentially expensive instance synthesis) and (2) do instance synthesis if that wasn't sufficient</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9020\">#9020</a> yolo</p>",
        "id": 407735593,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702476746
    },
    {
        "content": "<p>Clearly this should be solved by making  the instances defeq up to instances transparency.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>In particular <code>RingHom.toAlgebra</code> should be reducible (and maybe others as well). This is the library note <code>[reducible non-instances]</code>.</p>",
        "id": 407739188,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702477794
    },
    {
        "content": "<p>You need <code>Algebra.id</code> to be reducible.</p>",
        "id": 407739700,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702477927
    },
    {
        "content": "<p>To be clear, I am not strongly advocating for anything currently. I want to check breakage and performance implications.</p>",
        "id": 407739983,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702478018
    },
    {
        "content": "<p><code>Algebra.id</code> is an instance, so will already be unfolded using <code>with_reducible_and_instances</code></p>",
        "id": 407740031,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702478030
    },
    {
        "content": "<p>It doesn't appear to be unfolded currently. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import Mathlib.Analysis.NormedSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.RestrictScalars</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Normed.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Normed.MulAction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Module.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>Uncomment the first import and <code>foo</code> goes green. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedAlgebra.id#doc\">docs#NormedAlgebra.id</a> has an extra eta expansion which unfolds <code>Algebra.id</code> as side-effect </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">NormedAlgebra.id</span> <span class=\"o\">:</span> <span class=\"n\">NormedAlgebra</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">NormedField.toNormedSpace</span><span class=\"o\">,</span> <span class=\"n\">Algebra.id</span> <span class=\"bp\">𝕜</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 407740948,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702478295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I tried to mark it as draft to express my current neutrality but the web UI is borked</p>",
        "id": 407741826,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702478573
    },
    {
        "content": "<p>Ok, it seems to have taken but didn't reload the page</p>",
        "id": 407742621,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702478816
    },
    {
        "content": "<p>Went through smoothly. No performance benefit/cost.</p>",
        "id": 407755051,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702482302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/Simp.20claims.20not.20defeq.20but.20rfl.20works/near/407739188\">said</a>:</p>\n<blockquote>\n<p>Clearly this should be solved by making  the instances defeq up to instances transparency.</p>\n</blockquote>\n<p>I agree, but the other part of this is that making arguments for instances not be inst-implicit means simp won't try re-synthesizing them and it will trust the value obtained through unification. This might have interesting performance implications.</p>\n<p>It's also worth thinking about improvements to how simp elaborates arguments. Anne in <a href=\"https://github.com/leanprover-community/lean/pull/659\">https://github.com/leanprover-community/lean/pull/659</a> made it so Lean 3's simp could handle out params, which as far as I understand Lean 4's simp doesn't -- it just processes arguments left-to-right just like how Lean 3 did before Anne's change.</p>",
        "id": 407764534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702484875
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9025\">#9025</a> has the minimal amount of changes to achieve unification at appropriate transparency</p>",
        "id": 407778189,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702488875
    },
    {
        "content": "<p>It builds and lints now but the benchmark is going to be painful.</p>",
        "id": 407792599,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702494213
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Benchmark<span class=\"w\">                                                  </span>Metric<span class=\"w\">          </span><span class=\"nv\">Change</span>\n<span class=\"w\">  </span><span class=\"o\">=================================================================================</span>\n-<span class=\"w\"> </span>build<span class=\"w\">                                                      </span>instructions<span class=\"w\">      </span><span class=\"m\">5</span>.7%\n-<span class=\"w\"> </span>build<span class=\"w\">                                                      </span>simp<span class=\"w\">             </span><span class=\"m\">29</span>.6%\n-<span class=\"w\"> </span>build<span class=\"w\">                                                      </span>wall-clock<span class=\"w\">        </span><span class=\"m\">8</span>.2%\n</code></pre></div>\n<p>ouch</p>",
        "id": 407795754,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702495697
    },
    {
        "content": "<p>So in well-studied example of <code>Pi.smul_apply</code> <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works\">#lean4 &gt; simp [X] fails, rw [X] works</a> we have three options to have <code>simp</code> work \"as expected\":</p>\n<ol>\n<li>Make the instance implicit just implicit <a href=\"https://github.com/leanprover-community/mathlib4/pull/9020\">#9020</a></li>\n<li>Make <code>RingHom.id</code> (and intermediate defs reducible) <a href=\"https://github.com/leanprover-community/mathlib4/pull/9025\">#9025</a></li>\n<li>Use <code>simp [Pi.smul_apply _]</code>. </li>\n</ol>\n<p>Option 2 follows the general principles for handling this situation but the (mind-numbed) implementation is horrifically slower overall. Option 3 muddles us along.</p>",
        "id": 407817897,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702504875
    },
    {
        "content": "<p>I guess there is also </p>\n<ol start=\"4\">\n<li>Change the behavior of <code>simp</code> in some principled way that makes it easier for end users to reason about application and failure </li>\n</ol>\n<p>which is what Kyle is suggesting based on path walked in Lean 3.</p>",
        "id": 407968492,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702563155
    },
    {
        "content": "<p>If someone can make 2. more performance neutral, that would be great</p>",
        "id": 407968684,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702563210
    }
]