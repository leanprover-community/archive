[
    {
        "content": "<p>I've been trying to prove some things for this ListNat type, to practice, and I've been having this problem with having to prove <code>(true = true) = True</code>, and also with <code>¬(false = true) = True</code> every time I want to use an if-then-else. It would be most helpful if one could point me in the right direction here. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ListNat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filter</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">function</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">function</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">function</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">filter</span> <span class=\"n\">function</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">append</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">false_not_true</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"bp\">≠</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">filter_reverse</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">):</span>\n  <span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">ns</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">append</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">ns</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">ns</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ns</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reverse</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"o\">,</span> <span class=\"n\">append</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">false_not_true</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H</span>\n    <span class=\"n\">exact</span> <span class=\"n\">false_not_true</span> <span class=\"n\">H</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">case nil.true</span>\n<span class=\"cm\">  l: ListNat</span>\n<span class=\"cm\">  n: Nat</span>\n<span class=\"cm\">  p: Nat → Bool</span>\n<span class=\"cm\">  ⊢ (if (true = true) = True then cons n nil else nil) = if true = true then cons n nil else nil</span>\n<span class=\"cm\">  Expected type</span>\n<span class=\"cm\">  Messages (1)</span>\n\n<span class=\"cm\">lean:413:25</span>\n<span class=\"cm\">  application type mismatch</span>\n<span class=\"cm\">    false_not_true H</span>\n<span class=\"cm\">  argument</span>\n<span class=\"cm\">    H</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    (false = true) = True : Prop</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    false = true : Prop</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 396561479,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697225581
    },
    {
        "content": "<p>The <code>simp</code> tactic should be able to prove that for you.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>",
        "id": 396562133,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697225899
    },
    {
        "content": "<p>But what is it doing behind the scenes?</p>",
        "id": 396563499,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697226702
    },
    {
        "content": "<p>It looks like the main thing it's using is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eq_true_of_decide#doc\">docs#eq_true_of_decide</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n  <span class=\"c1\">-- Try this: exact of_eq_true (eq_true_of_decide (Eq.refl true))</span>\n</code></pre></div>",
        "id": 396564236,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697227126
    },
    {
        "content": "<p>The <code>decide</code> tactic also works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 396564522,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697227303
    },
    {
        "content": "<p>And what would work for the other case <code>¬(false = true) = True</code>?</p>",
        "id": 396564964,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697227552
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 396565068,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697227603
    },
    {
        "content": "<p>(<code>simp</code>/<code>simp only</code> would work as well. By default <code>simp</code> uses <code>decide</code> automatically, so anything <code>decide</code> can prove <code>simp</code> can prove too.)</p>",
        "id": 396565240,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697227708
    },
    {
        "content": "<p>If you're trying to prove things rather than compute things, then why not use <code>Prop</code> instead of <code>bool</code>? It's far more proof-friendly. It's quite rare to see <code>bool</code> in mathlib, for example.</p>",
        "id": 396565284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697227757
    },
    {
        "content": "<p>(I like to avoid simp because I like to write every part of the proof myself, when I put simp I feel like I have no clue as to what solved it)</p>",
        "id": 396565323,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697227787
    },
    {
        "content": "<p>It's a part of a homework I got, so it was supposed to be in <code>bool</code>. (Even though making it on Lean is a part of my desire to suffer, it seems)</p>",
        "id": 396565468,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697227875
    },
    {
        "content": "<p>I think (part of) the cause may be the <code>if function n = True</code> in your <code>filter</code>, where <code>function n</code> returns a <code>Bool</code> but <code>True</code> is a <code>Prop</code>. Try replacing that by <code>= true</code>, perhaps</p>",
        "id": 396565657,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697227997
    },
    {
        "content": "<p>Oh!</p>",
        "id": 396565703,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697228041
    },
    {
        "content": "<p>I did that again!</p>",
        "id": 396565749,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697228047
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 396565754,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697228054
    },
    {
        "content": "<p>By the way, there are other ways to show this equality! One is by <code>decide</code>, but you can turn <code>decide</code> off in <code>simp</code> and it still works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">only</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>The main ingredient in this method (which imo is more \"sensible\") is <code>propext</code>, turning <code>a ↔︎ b</code> into <code>a = b</code>; and we can prove <code>a ↔︎ b</code> directly when <code>a</code> and <code>b</code> are true (in the sense that <code>h1 : a</code> and <code>h2 : b</code>) by just providing those proofs for each direction. So this bottoms out to <code>rfl : true = true</code> and <code>trivial : True</code>; see <code>eq_self</code> and <code>eq_true</code> (which perform this proof) for details. (Actually this particular <code>simp</code> does some unnecessary stuff as well, so it's not the best example, but you can still find sensible things by digging through the term and command-clicking.)</p>\n<p>You might be aware of these already, but just in case it's helpful for discovery: <code>simp?</code>, is useful in seeing what lemmas <code>simp</code> uses behind the scenes (I think you might need to <code>import Std</code>?), and if you don't have access to that, there's always <code>set_option trace.Meta.Tactic.simp true</code>. (And, ofc, <code>#print &lt;theoremName&gt;</code>  after the fact to see what the term is! :) )</p>",
        "id": 396566851,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697228727
    },
    {
        "content": "<p>Classically Prop and bool are the same thing. I'm a bit unclear about the homework claim. If the homework wasn't \"do this in lean\" then you could argue that Prop = {True, False} just like bool = {true, false} and surely it's very difficult to tell them apart</p>",
        "id": 396568756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697229943
    }
]