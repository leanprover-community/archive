[
    {
        "content": "<p>I see that currently <code>False.rec</code> has motive <code>False -&gt; Sort u</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">False.rec</span> <span class=\"c1\">-- (motive : False → Sort u_1) → (t : False) → motive t</span>\n</code></pre></div>\n<p>However, the code for trepplein for Lean 3 (written 7 years ago by <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>) assumes that if a type is a proposition then the motive has type simpy <code>Sort u</code>, presumably because all functions are constants.</p>\n<p>Has there been a change in the last 7 years so that the motive is always <code>A -&gt; Sort u</code> independent of whether <code>A</code> is a proposition?</p>",
        "id": 396287740,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697117179
    },
    {
        "content": "<p>For reference, here is the scala code that is supposed to check the types (only the comments are mine).</p>\n<div class=\"codehilite\" data-code-language=\"Scala\"><pre><span></span><code><span class=\"w\">  </span><span class=\"cm\">/**</span>\n<span class=\"cm\">   * Whether to use dependent elimination. This is done unless the elimination</span>\n<span class=\"cm\">   * type is a proposition.</span>\n<span class=\"cm\">   */</span>\n<span class=\"w\">  </span><span class=\"kd\">val</span><span class=\"w\"> </span><span class=\"n\">useDepElim</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Boolean</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"p\">.</span><span class=\"n\">maybeNonZero</span>\n\n<span class=\"w\">  </span><span class=\"cm\">/**</span>\n<span class=\"cm\">   * The motive type for the elimination type.</span>\n<span class=\"cm\">   */</span>\n<span class=\"w\">  </span><span class=\"kd\">val</span><span class=\"w\"> </span><span class=\"n\">motiveType</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Expr</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">useDepElim</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"nc\">Pis</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">indices</span><span class=\"w\"> </span><span class=\"o\">:+</span><span class=\"w\"> </span><span class=\"nc\">LocalConst</span><span class=\"p\">(</span>\n<span class=\"w\">          </span><span class=\"nc\">Binding</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Apps</span><span class=\"p\">(</span><span class=\"n\">indTy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"n\">indices</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nc\">BinderInfo</span><span class=\"p\">.</span><span class=\"nc\">Default</span><span class=\"p\">)))(</span><span class=\"nc\">Sort</span><span class=\"p\">(</span><span class=\"n\">elimLevel</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"nc\">Pis</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)(</span><span class=\"nc\">Sort</span><span class=\"p\">(</span><span class=\"n\">elimLevel</span><span class=\"p\">))</span>\n\n<span class=\"w\">  </span><span class=\"cm\">/**</span>\n<span class=\"cm\">   * Variable for the motive.</span>\n<span class=\"cm\">   */</span>\n<span class=\"w\">  </span><span class=\"kd\">val</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LocalConst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">LocalConst</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"nc\">Binding</span><span class=\"p\">(</span><span class=\"s\">\"C\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">motiveType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">BinderInfo</span><span class=\"p\">.</span><span class=\"nc\">Implicit</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 396288393,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697117379
    },
    {
        "content": "<p>I don't fully understand your question, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=And.rec#doc\">docs#And.rec</a> uses <code>Sort u</code>, while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Or.rec#doc\">docs#Or.rec</a> uses <code>Prop</code></p>",
        "id": 396296953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697119863
    },
    {
        "content": "<p>(and this is expected)</p>",
        "id": 396296978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697119868
    },
    {
        "content": "<p>I believe the terms to look for are \"small\" vs \"large\" elimination</p>",
        "id": 396297075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697119895
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nUnless I am misunderstanding something, it seems that in trepplein the motive is just <code>Prop</code> or <code>Sort u</code> for an inductive type that is a <code>Prop</code>, rather than <code>a ∧ b → Sort u_1</code> or <code>motive : a ∨ b → Prop</code>. This is not unreasonable - any function on a <code>Prop</code> is a constant so one could specify the unique value instead of the function, but there may be issues if the prop is empty.</p>\n<p>I assume that trepplein worked fine at some stage, so this is a change in Lean over the years. I was checking if someone new this.</p>",
        "id": 396302081,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697121388
    },
    {
        "content": "<p>There is a different variable <code>elimIntoProp</code> that is supposed to determine the codomain of the elimination rule - either <code>Prop</code> or <code>Sort u</code> for a fresh level <code>u</code>.</p>",
        "id": 396302443,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697121492
    },
    {
        "content": "<p>Oh, yes I think this changed</p>",
        "id": 396303930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697121956
    },
    {
        "content": "<p>In lean 3 the kernel would be smart about props and give you the nondependent recursor (which is apparently weaker but actually equivalent) and the compiler would prove the <code>T.drec</code> theorem. This was annoying to write generic code for though since sometimes the <code>T.rec</code> function would look different and <code>T.drec</code> is the one that follows the pattern. In lean 4 this behavior was removed, the recursor is always dependent even for propositions</p>",
        "id": 396304353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697122086
    },
    {
        "content": "<p>in other words you should be able to just fix <code>useDepElim</code> to <code>true</code> and remove it</p>",
        "id": 396304649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697122177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks a lot. Since this is close to foundations I wanted to confirm. Will make the change.</p>",
        "id": 396304795,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697122220
    },
    {
        "content": "<p>Just to confirm those errors are gone. There are still plenty of errors but that is for the unimplemented parts for the new features (projections and literals).</p>",
        "id": 396305700,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697122484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 396305718,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697122490
    }
]