[
    {
        "content": "<p>I'm having hard time getting all the theorems marked with a custom simp extension. Only theorems with default priority are obtained.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- MySimpAttr.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">initialize</span> <span class=\"n\">mysimp_extension</span>\n  <span class=\"o\">:</span> <span class=\"n\">SimpExtension</span> <span class=\"bp\">←</span> <span class=\"n\">registerSimpAttr</span> <span class=\"bp\">`</span><span class=\"n\">mysimp</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">import</span> <span class=\"n\">MySimpAttr</span>\n\n<span class=\"kd\">@[mysimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_mid</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[mysimp low]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_low</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[mysimp high]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_high</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta.DiscrTree</span> <span class=\"k\">in</span>\n<span class=\"sd\">/-- Function from: Std.Tactic.Lint.Simp -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.DiscrTree.elements</span> <span class=\"o\">{</span><span class=\"n\">red</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Meta.DiscrTree</span> <span class=\"n\">α</span> <span class=\"n\">red</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">d.root.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"n\">arr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trieElements</span> <span class=\"n\">arr</span>\n<span class=\"n\">where</span>\n  <span class=\"sd\">/-- Returns the list of elements in the trie. -/</span>\n  <span class=\"n\">trieElements</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Trie.node</span> <span class=\"n\">vs</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">children.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">arr</span> <span class=\"bp\">++</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">child</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trieElements</span> <span class=\"n\">arr</span> <span class=\"n\">child</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Lean.CoreM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ext</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.getSimpExtension</span><span class=\"bp\">?</span> <span class=\"s2\">\"mysimp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms</span> <span class=\"bp\">←</span> <span class=\"n\">ext.get</span><span class=\"bp\">!.</span><span class=\"n\">getTheorems</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Number of mysimp theorems: {thms.post.root.size}\"</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"MySimp  theorems: {(thms.post.elements.map λ t =&gt; s!\"</span><span class=\"kd\">theorem</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t.origin.key</span><span class=\"o\">}</span> <span class=\"bp\">|</span> <span class=\"n\">prio</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t.priority</span><span class=\"o\">}</span><span class=\"s2\">\").foldl (· ++ \"</span><span class=\"bp\">\\</span><span class=\"n\">n</span><span class=\"s2\">\" ++ ·) \"\"}\"</span>\n</code></pre></div>\n<p>The output is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"n\">mysimp</span> <span class=\"n\">theorems</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">MySimp</span>  <span class=\"n\">theorems</span><span class=\"o\">:</span>\n<span class=\"kd\">theorem</span><span class=\"o\">:</span> <span class=\"n\">theorem_mid</span> <span class=\"bp\">|</span> <span class=\"n\">prio</span><span class=\"o\">:</span> <span class=\"mi\">1000</span>\n</code></pre></div>\n<p>I'm expecting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"n\">mysimp</span> <span class=\"n\">theorems</span><span class=\"o\">:</span> <span class=\"mi\">3</span>\n<span class=\"n\">MySimp</span>  <span class=\"n\">theorems</span><span class=\"o\">:</span>\n<span class=\"kd\">theorem</span><span class=\"o\">:</span> <span class=\"n\">theorem_mid</span> <span class=\"bp\">|</span> <span class=\"n\">prio</span><span class=\"o\">:</span> <span class=\"mi\">1000</span>\n<span class=\"kd\">theorem</span><span class=\"o\">:</span> <span class=\"n\">theorem_low</span> <span class=\"bp\">|</span> <span class=\"n\">prio</span><span class=\"o\">:</span> <span class=\"mi\">100</span>\n<span class=\"kd\">theorem</span><span class=\"o\">:</span> <span class=\"n\">theorem_high</span> <span class=\"bp\">|</span> <span class=\"n\">prio</span><span class=\"o\">:</span> <span class=\"mi\">10000</span>\n</code></pre></div>\n<p>What am I doing wrong?</p>",
        "id": 327149636,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676064501
    },
    {
        "content": "<p>Ahh I'm registering the simp attribute wrong, I even created github <a href=\"https://github.com/leanprover/lean4/issues/1164\">issue</a> about it <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> </p>\n<p>The correct way to register simp attribute is with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">register_simp_attr</span> <span class=\"n\">mysimp</span>\n</code></pre></div>",
        "id": 327155592,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676067015
    },
    {
        "content": "<p>And then everything works as expected</p>",
        "id": 327155628,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676067034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> has marked this topic as resolved.</p>",
        "id": 327155700,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676067060
    }
]