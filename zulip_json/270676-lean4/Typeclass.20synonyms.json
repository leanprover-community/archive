[
    {
        "content": "<p>I'd like to define a custom typeclass which is just a \"more instantiated\" case of another typeclass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"n\">Foo</span> <span class=\"n\">Int</span>\n</code></pre></div>\n<p>Note that this seems to be perfectly valid:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>However, in this case <code>inferInstance</code> fails </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Example</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>giving as error <code>type class instance expected\\nBar</code>, suggesting to me that Bar isn't viewed as typeclass although definitionally equal to one. Is there any way to solve this and let inference go through?</p>",
        "id": 396506652,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697203851
    },
    {
        "content": "<p>Try using <code>abbrev</code> instead of <code>def</code></p>",
        "id": 396507077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697204024
    },
    {
        "content": "<p>Nice, that works, thanks! Is <code>abbrev</code> just like <code>def</code> with some additional reducibility?  I tried <code>@[inline]</code> with <code>def</code> but thst still didn't work. Would be nice to have some other examples where one cannot get anywhere without <code>abbrev</code></p>",
        "id": 396507623,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1697204218
    },
    {
        "content": "<p>abbrev is quite close to being <code>@[reducible] def</code> indeed. Inline on the other hand is only useful for programming and getting efficient code from the compiler, not for typeclass inference</p>",
        "id": 396518084,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697207748
    }
]