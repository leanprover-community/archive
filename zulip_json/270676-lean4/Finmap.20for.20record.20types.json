[
    {
        "content": "<p>I'm trying to implement a simple type theory with finite product types. <code>Finmap</code> looks like exactly what I want to define record types, so I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finmap</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Finmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n</code></pre></div>\n<p>which causes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Multiset.NodupKeys</span> <span class=\"n\">entries</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Multiset</span> <span class=\"n\">_nested.Sigma_2</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Multiset</span> <span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The error isn't really clear to me what the problem is, so I instead tried pulling it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finmap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Finmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">String</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n</code></pre></div>\n<p>but this causes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">Ty.prod'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>which seems to be indicate it fails the positivity check? Is there a way I can use <code>Finmap</code> to do what I want or do I have to roll my own definition?</p>",
        "id": 359984113,
        "sender_full_name": "Scott Godwin",
        "timestamp": 1684637664
    },
    {
        "content": "<p>You can only use a very limited set of type wrappers around the type being defined. I recommend using either fixed arity (e.g. a binary product constructor), or functions</p>",
        "id": 359985335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684638594
    },
    {
        "content": "<p>Here's a way to get a very similar definition to the one you were trying to do using functions instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n</code></pre></div>",
        "id": 359985439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684638661
    },
    {
        "content": "<p>Thanks, that helps. I was a bit confused by <code>s → Ty</code>, took me a while to figure out there's a <code>CoeSort</code>. Now just need to figure out how I can similarly define tuple expressions considering they're intrinsically typed.</p>",
        "id": 360123530,
        "sender_full_name": "Scott Godwin",
        "timestamp": 1684704482
    }
]