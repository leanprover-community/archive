[
    {
        "content": "<p>Should importing the same module multiple times be something the linter catches, or even be an error?</p>\n<p>I.e. quite simply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n</code></pre></div>",
        "id": 371524917,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688227967
    },
    {
        "content": "<p>The style Linter probably should at the very least, I can't think of a good reason someone would do this except by accident.</p>",
        "id": 371540085,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688232336
    },
    {
        "content": "<p>Manipulation of order of instance discovery</p>",
        "id": 371580008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688248549
    },
    {
        "content": "<p>How often is that done? If it's rare maybe it would be better to have the linter catch this by default and have a comment to point out what the multiple import is used for when it does occur.</p>",
        "id": 371586704,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688252193
    },
    {
        "content": "<p>wasn't someone working on a code action to automatically remove transitively-imported files? it would hopefully also remove repeated imports like this</p>",
        "id": 371586870,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688252307
    },
    {
        "content": "<p>I think that manipulation of instance order is a pretty niche use case.</p>",
        "id": 371615250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688267330
    },
    {
        "content": "<p>ideally there would be a lint against it</p>",
        "id": 371617111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688268327
    },
    {
        "content": "<p>Even if you wanted to manipulate instance discovery order would you ever need to duplicate an import? I'm not sure that would achieve anything (isn't the second time a no-op)</p>",
        "id": 371817851,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688335587
    },
    {
        "content": "<p>Just to be clear: the instance discovery post was a joke</p>",
        "id": 371887971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688367286
    },
    {
        "content": "<p>It would be nice if we could e.g. automatically sort imports alphabetically and the like. The soundness of doing so depends on there not being any same-priority conflicts by sibling files</p>",
        "id": 371888385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688367383
    },
    {
        "content": "<p>Maybe such same-priority conflicts should raise an \"ambiguous instance\" error (at the point of use, not directly at the import, so that downstream users can mitigate the situation with retroactive attributes). It seems like a decently-sized footgun to have behaviour depend on the order of imports</p>",
        "id": 372039929,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1688396514
    },
    {
        "content": "<p>FWIW, in Racket, multiple imports are intentionally supported. There could be a macro A that expands to the import of module X and Y and macro B that expands to the import of module Y and Z, and it makes sense to be able to use both macro A and B together, even though module Y is imported twice.</p>",
        "id": 372177638,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1688444804
    },
    {
        "content": "<p>in lean, you cannot macro expand to an <code>import</code>, the imports are all statically known before elaboration starts</p>",
        "id": 372178649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688445355
    }
]