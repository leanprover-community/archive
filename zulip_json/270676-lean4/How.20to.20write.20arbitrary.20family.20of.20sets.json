[
    {
        "content": "<p>I'm trying to prove the implication well order principle =&gt; choice axiom. The way I wanted to prove it is using the following definition of the choice axiom.</p>\n<p>Having <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>X</mi><mi>i</mi></msub><msub><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\{X_i\\}_{i\\in I} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1774em;\"><span></span></span></span></span></span></span></span></span></span> a family of non-empty sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>i</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">\\forall i \\in I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>,  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>s</mi><mo>:</mo><mo stretchy=\"false\">{</mo><msub><mi>X</mi><mi>i</mi></msub><msub><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub><mo>→</mo><mi>U</mi><mi>i</mi><mo separator=\"true\">,</mo><mi>X</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">\\exist s : \\{X_i\\}_{i\\in I}  \\to U i, X i </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1774em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">i</span></span></span></span> satisfying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>∈</mo><msub><mi>X</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∀</mi><mi>i</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">s (X_i) \\in X_i ,  \\forall i \\in I </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">wop</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">S.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">s.Nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₁</span>\n\n<span class=\"c1\">--def ca (h₁ : ∀ (i : I), Nonempty (X i)) : ∃ s : ⋃ (i : I), X i, ∀ (i : I), s i ∈ (h₁ i).choose := by</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ca</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>The main problem is finding the syntax for creating this family and function s. </p>\n<p>Thank you.</p>",
        "id": 405780195,
        "sender_full_name": "Santiago Mourenza Rivero",
        "timestamp": 1701681266
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405795021,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701686042
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405795090,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701686057
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'iUnion'<br>\nDid you mean <a href=\"https://loogle.lean-lang.org/?q=%22iUnion%22\"><code>\"iUnion\"</code></a>, <a href=\"https://loogle.lean-lang.org/?q=Set.iUnion\"><code>Set.iUnion</code></a>, or <a href=\"https://loogle.lean-lang.org/?q=iUnion\">something else</a>?</p>",
        "id": 405795091,
        "sender_full_name": "loogle",
        "timestamp": 1701686058
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405795197,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701686101
    },
    {
        "content": "<p>Oh sorry misread the question. Sincere apologies</p>",
        "id": 405795344,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701686163
    },
    {
        "content": "<p>I suspect your definition is not computable since you classical choice.</p>",
        "id": 405796318,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701686517
    },
    {
        "content": "<p>Note you can use <code>$$\\Latex$$</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8988em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6833em;\"><span style=\"top:-2.905em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord\"><span class=\"mord textrm mtight sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4678em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span>) in your post via double dollars; would you mind editing it?</p>",
        "id": 405796452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701686546
    },
    {
        "content": "<p>further you say you want to declare an axiom. The syntax for that is <code>axiom &lt;name&gt; : &lt;Proposition you want&gt;</code></p>",
        "id": 405796651,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701686609
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405798279,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701687207
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405798418,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701687252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20write.20arbitrary.20family.20of.20sets/near/405798279\">ha dicho</a>:</p>\n<blockquote>\n<p>The part that  I am not able to understand is what you would like this to mean <code>(X i → ⋃ i, X i)</code></p>\n</blockquote>\n<p>Maybe is wrong but I wanted to make the function map from the family of set to the union of those sets</p>",
        "id": 405798706,
        "sender_full_name": "Santiago Mourenza Rivero",
        "timestamp": 1701687356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20write.20arbitrary.20family.20of.20sets/near/405796452\">ha dicho</a>:</p>\n<blockquote>\n<p>Note you can use <code>$$\\Latex$$</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8988em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6833em;\"><span style=\"top:-2.905em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord\"><span class=\"mord textrm mtight sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4678em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span>) in your post via double dollars; would you mind editing it?</p>\n</blockquote>\n<p>Thank you, I did it.</p>",
        "id": 405799248,
        "sender_full_name": "Santiago Mourenza Rivero",
        "timestamp": 1701687546
    },
    {
        "content": "<p>I am stuck here : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">ca</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>For the final part <code>(s i (@Classical.choice (X i) (h₁ i))) ∈ X i</code>,  lean complains <code>Membership (↑(⋃ i, X i)) (Set β)</code> Here the coercion <code>↑(⋃ i, X i))</code> is  <code>@Elem β (⋃ i, X i)</code> where Elem is supposed to mean <code>Given the set s, Elem s is the Type of element of s</code></p>",
        "id": 405801362,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701688238
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ca</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">subset_iUnion</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 405801550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701688311
    },
    {
        "content": "<p>Your statement looks fishy though; did you really mean to globally fix <code>i</code> (indeed, <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>' version does not)? I recommend adding <code>set_option autoImplicit false</code> and fixing the new error, because the automatic fix you're currently getting doesn't look like the one you actually want</p>",
        "id": 405801723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701688361
    },
    {
        "content": "<p>Oh. I forget that sometimes coercions have to be made explicit (although I don't understand why it didn't automatically get inferred here).</p>",
        "id": 405802061,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701688483
    },
    {
        "content": "<p>In my case I got a syntax error at <code>i</code> when I turned the def into an axiom. So I was able to spot the mistake faster.</p>",
        "id": 405804565,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701689405
    },
    {
        "content": "<p>I was thinking  about it and I tried to do this way but I think I am not understanding something about the types theory.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"c1\">--Toma un i ∈ I y le asigna un Xᵢ ∈ Set β</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">wop</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">S.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">s.Nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wop_implies_ca</span>  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">S.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">s.Nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wop</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407526210,
        "sender_full_name": "Santiago Mourenza Rivero",
        "timestamp": 1702401885
    },
    {
        "content": "<p>I think I am not getting the point on how it works because I really don't understand the error I have.  On the other hand I don't really get how the solutions you've sent works (maybe because of the syntaxis). Thank you for helping.</p>",
        "id": 407526823,
        "sender_full_name": "Santiago Mourenza Rivero",
        "timestamp": 1702402096
    },
    {
        "content": "<p>The error here is easy to understand: <code>f</code> has type <code>Set β → Set β</code>, so what does <code>f (X i) ∈ (X i)</code> mean?</p>",
        "id": 407527231,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702402238
    },
    {
        "content": "<p><code>X i</code> is a term of type <code>Set β</code>, so its elements are terms of type <code>β</code>, but <code>f (X i)</code> is of type <code>Set β</code>, so it cannot be an element of <code>X i</code></p>",
        "id": 407527486,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702402315
    },
    {
        "content": "<p>Note that I am not talking about paradoxes in set theory</p>",
        "id": 407527570,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702402334
    }
]