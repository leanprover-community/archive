[
    {
        "content": "<p>The following came up on the Discord. In Lean 3 this is just a second or two:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">,</span>  <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>Copying the relevant instances over to core Lean 4 we get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LE.le.lt_or_eq_dec</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">hab</span>\n   <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n   <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"n\">Nat.succ_le_succ</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidableBallLT</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)],</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">decidableBallLT</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_succ_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n                 <span class=\"n\">intro</span> <span class=\"n\">hn</span> <span class=\"n\">k</span> <span class=\"n\">h</span>\n                 <span class=\"n\">apply</span> <span class=\"n\">hn</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">Decidable.byCases</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n                <span class=\"bp\">·</span> <span class=\"n\">exact</span>\n                    <span class=\"n\">isTrue</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span>\n                      <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_or_eq_dec.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n                        <span class=\"k\">match</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"k\">with</span>\n                        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n                <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hn</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>which pauses for a good few seconds and then times out. This came up in the context of discussing how to prove various bounds for Waring's problem (the number of powers you need to express every number as a sum of powers). Increasing timeout just makes the pause longer -- I've never seen this succeed in Lean 4.</p>",
        "id": 391579832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694988484
    },
    {
        "content": "<p>This seems to be an issue with the kernel reduction engine to me, if you run with <code>native_decide</code> it finishes instantly.</p>",
        "id": 391581429,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694989353
    },
    {
        "content": "<p>Bhavik says that this fixes it but I'm just off to bed so can't check</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidableBallLT</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)],</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">decidableBallLT</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">·</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.le_succ_of_le</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">Nat.le.refl</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_or_eq_dec.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">▸</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 391581610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694989457
    },
    {
        "content": "<p>Yes, this restores <code>decide</code> to be just as fast as in Lean 3 - the key difference is the first <code>match</code>, which was previously a <code>by cases</code></p>",
        "id": 391581772,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694989607
    },
    {
        "content": "<p>In particular,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidableBallLT</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)],</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">decidableBallLT</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_succ_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n                <span class=\"n\">refine</span> <span class=\"n\">Decidable.byCases</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n                <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">isTrue</span> <span class=\"gr\">sorry</span>\n                <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>makes it fast, and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidableBallLT</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)],</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">decidableBallLT</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_succ_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">Decidable.byCases</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n                <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">isTrue</span> <span class=\"gr\">sorry</span>\n                <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>makes it slow</p>",
        "id": 391581842,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694989664
    },
    {
        "content": "<p>Note this is one of many regressions I've observed with <code>decide</code> - there are a good number of things that <code>dec_trivial</code> can do in Lean 3, but <code>decide</code> times out on in Lean 4, and my understanding is that the kernel reduction engine is very similar in both.</p>",
        "id": 391581999,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694989753
    },
    {
        "content": "<p>Thanks for the nice minimisation. I've recorded this at <a href=\"https://github.com/leanprover/lean4/pull/2552\">lean4#2552</a>.</p>",
        "id": 391585483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694992710
    },
    {
        "content": "<p>Thanks! Credit to <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> too who did the minimisation</p>",
        "id": 391623911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695016109
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7232\">#7232</a> works around this, in Mathlib. I'm curious if it also fixes some mysterious slowdowns with <code>Finset</code> that were reported elsewhere.</p>",
        "id": 391629891,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695019728
    },
    {
        "content": "<p>OK, so a third one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidableBallLT</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)],</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">decidableBallLT</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_succ_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">isTrue</span> <span class=\"gr\">sorry</span> <span class=\"k\">else</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is in between the two, but certainly slower than the <code>match</code> version. This may be relevant for other instances; for example, I was trying to debug <a href=\"#narrow/stream/287929-mathlib4/topic/List.20insertion.20slowdown\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/List.20insertion.20slowdown</a>, and in that case key instances that are used such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=forall_prop_decidable#doc\">docs#forall_prop_decidable</a> use <code>if</code>.</p>",
        "id": 391674397,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695035111
    },
    {
        "content": "<p>There's a second issue, in that there is duplicated instances. Mathlib provides <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.decidableBex#doc\">docs#List.decidableBex</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.decidableBall#doc\">docs#List.decidableBall</a>, but Std provides (and these are currently unpatched) <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.decidableBEx#doc\">docs#List.decidableBEx</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.decidableBAll#doc\">docs#List.decidableBAll</a>. These are equal, so one of these (likely mathlib's) should be removed.</p>",
        "id": 391860857,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695113016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, your fix in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7232\">#7232</a> goes beyond what is currently reported in <a href=\"https://github.com/leanprover/lean4/pull/2552\">lean4#2552</a>.</p>\n<p><a href=\"https://github.com/leanprover/lean4/pull/2552\">lean4#2552</a> only demonstrates a problem with use <code>cases</code>.</p>\n<p>However your 2nd and 3rd changes <a href=\"https://github.com/leanprover-community/mathlib4/pull/7232\">#7232</a> seems to be fixing a problem with merely using <code>if</code>! Is that really the case? If so, we either need a second issue for the lean4 issue tracker, or <a href=\"https://github.com/leanprover/lean4/pull/2552\">lean4#2552</a> updated to explain that you can't even safely use <code>if</code>!</p>",
        "id": 392764967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695521756
    },
    {
        "content": "<p>Also, the second change in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7232\">#7232</a> in Mathlib/Init/Data/List/Instances.lean should have a link to the issue, so it can be cleaned up later.</p>",
        "id": 392764970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695521760
    },
    {
        "content": "<p>hmm, I seem to remember having done this for some reason but rewriting the instance with <code>ite</code> seems just as performant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"n\">decidableBallLT</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)],</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">decidableBallLT</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">·</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.le_succ_of_le</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n_1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n_1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.le_succ_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">then</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">Nat.le.refl</span>\n    <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">Nat.le.refl</span> <span class=\"k\">then</span> <span class=\"n\">isTrue</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_or_eq_dec.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">▸</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this version is actually mildly faster than the <code>match</code> version in mathlib... (on the big example I put, it takes 179K heartbeats instead of 186K)</p>",
        "id": 392824608,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695556578
    },
    {
        "content": "<p>I will keep an eye out for the issue again but I dug through some stuff and couldn't find me talking about it. Good reason to start keeping a log of all experiments I do...</p>",
        "id": 392824636,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695556631
    },
    {
        "content": "<p>this very explicit version is faster again (174K), but I don't think it'd be worth writing this to such a ridiculous extent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidableBallLT</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)],</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">@</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n_1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n_1</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">decidableBallLT</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">·</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.le_succ_of_le</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n_1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n_1</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">Nat.le.refl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">isTrue</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_or_eq_dec.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">▸</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 392825073,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695557006
    },
    {
        "content": "<p>Just noting that Leo has just closed <a href=\"https://github.com/leanprover/lean4/pull/2552\">lean4#2552</a> via <a href=\"https://github.com/leanprover/lean4/pull/2730\">lean4#2730</a>. If anyone has related problems still occurring, please let us know!</p>",
        "id": 397976123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698013872
    },
    {
        "content": "<p>This is great news!</p>",
        "id": 398014312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698040041
    }
]