[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263053145\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> why are so many of the definitions/constants <code>private</code>?</p>\n</blockquote>\n<p>For <code>constant</code>, I'm just copying what I've seen in other implementations that rely on FFI. I don't understand why just yet. For <code>private</code>, I'm trying to hide implementation details from the API user</p>",
        "id": 263053299,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638212514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> that is not really what <code>private</code> is for. Lean makes it very hard to interact with things marked <code>private</code>, which, in Lean, you generally want to do (e.g., for proofs). Things should really only be marked <code>private</code> if they are part of an already opaque definition (e.g., a <code>partia</code> or <code>unsafe</code> <code>def</code>) and simply serve as some form of auxiliary utility function.</p>",
        "id": 263053832,
        "sender_full_name": "Mac",
        "timestamp": 1638212768
    },
    {
        "content": "<p>Nothing in your MWE looks like something that should be marked <code>private</code>.</p>",
        "id": 263053919,
        "sender_full_name": "Mac",
        "timestamp": 1638212806
    },
    {
        "content": "<p>also why are <code>toString'</code>  functions not named  just <code>toString</code>?</p>",
        "id": 263054041,
        "sender_full_name": "Mac",
        "timestamp": 1638212876
    },
    {
        "content": "<p>I am guessing because the <code>toString</code> in the body then clashes with the name, in which case they should be marked <code>protected</code>, not renamed.</p>",
        "id": 263054156,
        "sender_full_name": "Mac",
        "timestamp": 1638212917
    },
    {
        "content": "<p>Is there a way to hide things from the API user? Or this is not a thing in Lean?</p>",
        "id": 263054245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638212994
    },
    {
        "content": "<p>Here's a reduced MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Query</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">QueryStep</span>\n  <span class=\"bp\">|</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Query.steps</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">steps</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">steps</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">applyStep</span> <span class=\"o\">(</span><span class=\"n\">sql</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">QueryStep</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">QueryStep.join</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q.steps.foldl</span> <span class=\"n\">applyStep</span> <span class=\"n\">Unit.unit</span>\n<span class=\"n\">termination_by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263054388,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638213063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263054245\">said</a>:</p>\n<blockquote>\n<p>Is there a way to hide things from the API user? Or this is not a thing in Lean?</p>\n</blockquote>\n<p>In Lean, 99% of the time you don't <em>want</em>  to hide things from the API user. Or, more accurately, the APO user doesn't want things hidden from them (as it inhibits their ability to reason about the code).</p>",
        "id": 263054929,
        "sender_full_name": "Mac",
        "timestamp": 1638213360
    },
    {
        "content": "<p>Also note that you are overriding standard syntax with your <code>ColProp</code> operations, which is a very bad idea.</p>",
        "id": 263055156,
        "sender_full_name": "Mac",
        "timestamp": 1638213466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263055156\">said</a>:</p>\n<blockquote>\n<p>Also note that you are overriding standard syntax with your <code>ColProp</code> operations, which is a very bad idea.</p>\n</blockquote>\n<p>This was the solution I found to make it easy for the user to type in things like <code>`age &gt; 20</code></p>",
        "id": 263055510,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638213641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263055510\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263055156\">said</a>:</p>\n<blockquote>\n<p>Also note that you are overriding standard syntax with your <code>ColProp</code> operations, which is a very bad idea.</p>\n</blockquote>\n<p>This was the solution I found to make it easy for the user to type in things like <code>`age &gt; 20</code></p>\n</blockquote>\n<p>I believe you can also do this by conforming to certain instances like <code>LE</code>, <code>LT</code>, etc.<br>\nThey will then \"provide\" the notation for you.</p>",
        "id": 263055622,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638213713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> usually that is true, but in this case that will not work because these functions do not match the type classes types.</p>",
        "id": 263055711,
        "sender_full_name": "Mac",
        "timestamp": 1638213750
    },
    {
        "content": "<p>I'm open to ideas. I'm green in Lean and I'm kind of finding my own ways to do things</p>",
        "id": 263055807,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638213797
    },
    {
        "content": "<p>Oh, I see. I'm guessing there is no <code>HLE</code> or <code>HLT</code>? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263055828,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638213805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> The problem is that they're <code>Prop</code>-valued, and Arthur wants an abstract syntax tree basically.</p>",
        "id": 263055906,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638213843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Would this be a place where Arthur could create a new type of syntax for query expressions? That way <code>&gt;</code> in a query is different from the usual <code>&gt;</code> in an unambiguous way.</p>",
        "id": 263055958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638213864
    },
    {
        "content": "<p>It would be nice if there were general classes for <code>Eq</code>, <code>Lt</code>, and <code>Le</code> (and I have proposed such things before), but unfortunately they currently don't exist.</p>",
        "id": 263056032,
        "sender_full_name": "Mac",
        "timestamp": 1638213899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> yeah, that would probably be the best way to go about this.</p>",
        "id": 263056142,
        "sender_full_name": "Mac",
        "timestamp": 1638213959
    },
    {
        "content": "<p>With the things I've defined it's possible to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">table</span> <span class=\"s2\">\"person\"</span> <span class=\"bp\">↠</span>\n<span class=\"n\">select</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">age</span><span class=\"o\">]</span> <span class=\"bp\">↠</span>\n<span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">age</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">20</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">build</span>\n<span class=\"c1\">-- \"select * from (select name,age from person where true and (age&gt;20)) as person\"</span>\n</code></pre></div>\n<p>If it's possible to achieve something like this with better practices, I'm in!</p>",
        "id": 263056311,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638214034
    },
    {
        "content": "<p>I'm building a SQL query from those \"spark-like\" transformations, which I find a lot better to explore data than pure SQL</p>",
        "id": 263056429,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638214090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/struggling.20with.20recursion/near/263055958\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> Would this be a place where Arthur could create a new type of syntax for query expressions? That way <code>&gt;</code> in a query is different from the usual <code>&gt;</code> in an unambiguous way.</p>\n</blockquote>\n<p>That's exactly what I intended to do, but I don't know how exactly</p>",
        "id": 263057521,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638214625
    },
    {
        "content": "<p>Is there an example of it? I just need to tweak and fix my recursion and then I can come back to this and fix this syntax overriding issue</p>",
        "id": 263058304,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638214956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> here is a quick example of how such a DSL might look:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">entry</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"-\"</span> <span class=\"n\">noWs</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"NULL\"</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"entry% \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">numLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Entry.int</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"bp\">-$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">numLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Entry.int</span> <span class=\"o\">(</span><span class=\"bp\">-$</span><span class=\"n\">v</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">strLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Entry.str</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|</span> <span class=\"n\">NULL</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Entry.null</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwErrorAt</span> <span class=\"n\">stx</span> <span class=\"s2\">\"ill-formed entry\"</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">colProp</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ≠ \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ≤ \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" &lt; \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ≥ \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" &gt; \"</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ≠ \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ≤ \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" &lt; \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ≥ \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">ident</span> <span class=\"s2\">\" &gt; \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">colProp</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" ∧ \"</span> <span class=\"n\">colProp</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">colProp</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" ∨ \"</span> <span class=\"n\">colProp</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">colProp</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">colProp</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"colProp% \"</span> <span class=\"n\">colProp</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.EqE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≠</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.NeE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.LeE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.LE</span>  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≥</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.GeE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.GE</span>  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.EqC</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≠</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.NeC</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.LeC</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.LC</span>  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≥</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.GeC</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.GC</span>  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">y.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.And</span> <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ColProp.Or</span>  <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwErrorAt</span> <span class=\"n\">stx</span> <span class=\"s2\">\"ill-formed column proposition\"</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"mi\">42</span> <span class=\"bp\">+</span> <span class=\"mi\">21</span><span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">ColProp.Or (ColProp.And (ColProp.EqE `a (Entry.int 2)) (ColProp.EqC `b `c))</span>\n<span class=\"cm\">  (ColProp.EqE `d (Entry.int (42 + 21))) : ColProp</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>EDIT: Added parenthetical syntax</p>",
        "id": 263059502,
        "sender_full_name": "Mac",
        "timestamp": 1638215532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> any tip/idea on how to make it a bit simpler/straightforward than having to write <code>colProp%</code> everytime?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">DataFrame.empty.filter</span> <span class=\"o\">(</span><span class=\"n\">colProp</span><span class=\"bp\">%</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"c1\">-- filter empty (ColProp.EqE `a (Entry.int 2)) : DataFrame</span>\n</code></pre></div>\n<p>It would also be very cool if one could say it like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">DataFrame.empty.filter</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263242499,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638331935
    },
    {
        "content": "<p>Actually wait, I need to think of the use cases better</p>",
        "id": 263243383,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638333224
    },
    {
        "content": "<p>you could make <code>filter</code> a macro which takes a <code>colProp</code> and produces a <code>term</code></p>",
        "id": 263243530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638333407
    },
    {
        "content": "<p>Might as well go full LINQ at this point</p>",
        "id": 263259056,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638348292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/263054245\">said</a>:</p>\n<blockquote>\n<p>Is there a way to hide things from the API user? Or this is not a thing in Lean?</p>\n</blockquote>\n<p><code>private</code> is as much a thing in Lean programming as in other languages. While it's true that it can be counterproductive for <em>proving</em>, it is extremely unlikely that code that was not designed to be reasoned about from the very beginning will ever be reasoned about. So you should not worry about it.</p>",
        "id": 263259462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638348540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> incidental reasoning still appears (e.g., for things like <code>Array.get</code>). Also, like <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , I think <code>private</code> in general is (in most cases) a bad idea. </p>\n<p>It makes sense in purely compiled languages where the compiler can use that information to do smarter optimizations because it knows the symbols won't be used outside the current target. For a  highly reflective language like Lean, though, where it is still perfectly possible circumvent <code>private</code> with tricks, it just makes for bad UX.  </p>\n<p>For example, there are a number of <code>private</code> definitions in the Lean core that I have had to copy paste into various projects because I needed to use them. One good example that has been brought up in the <code>doc-gen4</code> discussion is <code>Name.isBlacklisted</code>.</p>",
        "id": 263288343,
        "sender_full_name": "Mac",
        "timestamp": 1638364846
    },
    {
        "content": "<p>Is there any use for the <code>private</code> keyword at all in your opinion then?</p>",
        "id": 263291191,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638366111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 263291200,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638366118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I think it works fine for auxiliary functions to <code>partial</code> definitions (though <code>where</code> clauses are an alternative there) and for some tricks with runtime unsafe code like <a href=\"https://github.com/leanprover/lean4/blob/5c39ddbad1bd187a4db71610bc874c402ae24356/src/Init/Prelude.lean#L2141\"><code>Macro.MethodsRefPointed</code></a> where an end user fiddling with the definition directly can break invariants and be quite bad.</p>\n<p>But, in general, no, I don't think <code>private</code> should be used (an opinion I believe is shared by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>).</p>",
        "id": 263292497,
        "sender_full_name": "Mac",
        "timestamp": 1638366678
    },
    {
        "content": "<p>Auxiliary definitions in general can't be <code>private</code>, since that's often where you want to start when proving properties about an operation. If it's a <code>partial</code> definition you are already hosed though, so I agree with <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> 's assessment</p>",
        "id": 263292768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638366777
    },
    {
        "content": "<p>I think of <code>private</code> as the keyword to use when you want someone to curse your name 2 years later</p>",
        "id": 263292957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638366864
    },
    {
        "content": "<p>I like to think of  the proper use of <code>private</code> in  program languages as \"if an user interacts with this directly, the computer is likely to halt and catch fire\". In imperative languages, <code>private</code> is thus most apt for black magic implementation details. In a declarative, functional language like Lean, though, such black magic should be vanishingly rare (and thus the use of <code>private</code> as well).</p>",
        "id": 263293998,
        "sender_full_name": "Mac",
        "timestamp": 1638367230
    },
    {
        "content": "<p><code>private</code> can also be seen as a means to simplify APIs, so the user can focus on learning how to make use of the lib more easily</p>",
        "id": 263295890,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638367989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I make heavy use of <code>private</code>, and I think it is very useful when maintaining the code. It makes it clear the function should not be used in other modules. It also helps accidental misuse when the function makes many assumptions about the input arguments. It also makes it clear to Lean users they should not assume this function will exist forever. </p>\n<blockquote>\n<p>For a highly reflective language like Lean, though, where it is still perfectly possible circumvent private with tricks, it just makes for bad UX.</p>\n</blockquote>\n<p>Sure, you can circumvent with tricks, but you cannot complain when things break if you use this kind of trick. </p>\n<blockquote>\n<p>In imperative languages, private is thus most apt for black magic implementation details. </p>\n</blockquote>\n<p>This is not true . <code>private</code> (<code>static</code>) is heavily used in many projects to hide implementation details from others even when there is no black magic.</p>",
        "id": 274454728,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646685999
    },
    {
        "content": "<p>(sorry for the little mess btw. I wanted to rename the thread I created but for some reason Zulip split it in two)</p>",
        "id": 274455264,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646686242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> Since this thread is quite old, I am not going to resurrect it. However, I do appreciate hearing your thoughts on the topic, even if I (and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ) disagree.</p>",
        "id": 274457981,
        "sender_full_name": "Mac",
        "timestamp": 1646687436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I thought it was a new thread since it was on the top today. It seems it accidentally moved to the top when Arthur renamed some thread.</p>",
        "id": 274458558,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646687695
    }
]