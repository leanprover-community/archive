[
    {
        "content": "<p>I am trying to write a \"tactic\" <code>Template</code> that evaluates a tactic block, but also stores a (string) version of this tactic block, where all <code>Hole</code>s are replaced with <code>sorry</code> so it can be used as a template later. But I'm struggling to create a <code>sorry</code> syntax node. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">partial</span>\n<span class=\"kd\">def</span> <span class=\"n\">replaceHoles</span> <span class=\"o\">(</span><span class=\"n\">tacs</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tacs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">kind</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">GameServer.Tactic.Hole</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- Replace the hole with a sorry.</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"got one!\"</span>\n      <span class=\"c1\">-- TODO: How do I create a `sorry` syntax node?</span>\n      <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.tacticSorry</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- Iterate over the `args` to search for holes in there</span>\n      <span class=\"k\">let</span> <span class=\"n\">newArgs</span> <span class=\"o\">:=</span> <span class=\"n\">args.map</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">replaceHoles</span> <span class=\"bp\">Â·</span><span class=\"o\">)</span>\n      <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">k</span> <span class=\"n\">newArgs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- Don't do anything to other syntax</span>\n    <span class=\"n\">other</span>\n</code></pre></div>\n<ol>\n<li>how do I create the <code>sorry</code> syntax at the <code>TODO</code>? (i.e. what should I put instead of <code>#[]</code>?</li>\n<li>Is there a better way to do this? In particular I'd need to show termination for this kind of approach...</li>\n</ol>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Expected Behaviour</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The tactic block will look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Template</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">Hole</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">my_lemma</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>and eventually I'd need to get a <code>String</code> that looks like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"gr\">sorry</span>\n<span class=\"n\">assumption</span>\n</code></pre></div>\n<p>to display it.</p>\n</div></div>",
        "id": 386357094,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692613593
    },
    {
        "content": "<p>You can use check statements like <code>#check `(command| theorem a : Nat := by sorry)</code> to see what the syntax of a given command, idk if there is a better way but this works at least. So it seems you want <code> #[Syntax.atom info \"sorry\"]</code></p>",
        "id": 386395771,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692625809
    },
    {
        "content": "<p>Oh thanks! I tried to <code>dbg_trace</code> it, but didn't realise that it was an <code>.atom</code> instead of a <code>.node</code>, so the outputs didn't make sense.</p>",
        "id": 386402553,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692627420
    }
]