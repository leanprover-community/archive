[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388914529\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>refine</code> and <code>have</code> complain when they can't figure out metavariables instead of making them new goals (this is particularly harmful when figuring out a proof)</p>\n</blockquote>\n<p>you can use <code>refine'</code> and <code>have'</code> , these are core tactics intended for the purpose</p>\n</blockquote>\n<p>Could you elaborate on this? In Lean 3 I can type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.dual</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">inner_product_space.to_dual_symm_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>while the Lean 4 version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Dual</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span><span class=\"bp\">'</span> <span class=\"o\">:=</span> <span class=\"n\">InnerProductSpace.toDual_symm_apply</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>while the same with or without prime after <code>have</code>. The question is: can we get back Lean 3 behavior?</p>",
        "id": 389681632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694098298
    },
    {
        "content": "<p>This example isn't great because there are no explicit arguments at all, but it still shows the difference between Lean 3 and Lean 4.</p>",
        "id": 389682724,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694098560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> weren't you flagging this issue on Xena recently?</p>",
        "id": 389689996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694100347
    },
    {
        "content": "<p>Yes - Patrick's example is precisely the sort of thing that was making my life difficult</p>",
        "id": 389690218,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694100390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, yes: <a href=\"#narrow/stream/113488-general/topic/lean3.20support/near/388917291\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/lean3.20support/near/388917291</a></p>",
        "id": 389732085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694111892
    },
    {
        "content": "<p>Again, the best way to get anything done is whining about it to Kyle <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 389732162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694111920
    },
    {
        "content": "<p>I know, but I have this schizophrenia issue where I keep complaining everybody keeps distracting Kyle from working on our informal Lean project and then the next minute I distract him with a new metaprogramming request.</p>",
        "id": 389741804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694115148
    },
    {
        "content": "<p>And my question is: why isn't this the default behavior of <code>have</code>?</p>",
        "id": 389742216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694115318
    },
    {
        "content": "<p>I actually extracted <code>:-(</code> from the <code>convert</code> tactic, so abusing <code>convert</code> here's a <code>have</code> that creates new goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"refine_lift'' \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">focus</span> <span class=\"o\">(</span><span class=\"n\">convert</span> <span class=\"n\">no_implicit_lambda</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"n\">using</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">rotate_right</span><span class=\"o\">))</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"have'' \"</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">haveDecl</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine_lift''</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">haveDecl</span><span class=\"bp\">;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.let</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span><span class=\"bp\">''</span> <span class=\"o\">:=</span> <span class=\"n\">InnerProductSpace.toDual_symm_apply</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The reason why <code>have</code>/<code>have'</code> throw an error (I don't mean the rationale why, just why it happens)  is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.elabTermEnsuringType#doc\">docs#Lean.Elab.Tactic.elabTermEnsuringType</a> ends up elaborating a term in a way where stuck TC is an error, vs allowing stuck TC problems to turn into a metavariables.</p>",
        "id": 389747858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694117232
    },
    {
        "content": "<p>I have similarly been struggling with this, constantly needing to put <code>have := @whatever</code>, and then specifying what I can with <code>(G := G)</code> etc, and putting underscores for the rest. When that's all done, and I get the theorem I want, I have to go back and remove the <code>@</code> and underscores...</p>",
        "id": 389747980,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694117262
    }
]