[
    {
        "content": "<p>I'm trying to guide aesop to use a more specific normalization rule before it tries to use a general rule. I thought I could give the general rule a higher penalty, but it seems to not actually affect which rule gets applied.</p>\n<p>Consider the following MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.neg</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">foo.x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.neg</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.mk</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.negOne</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">@[aesop norm 10]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Foo.desugar_neg</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">foo.neg</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[aesop norm 1]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Foo.desugar_negOne</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.negOne</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n  <span class=\"c1\">-- ⊢ Foo.neg 1 = z</span>\n</code></pre></div>\n<p>Here, I want to rewrite the constant <code>-1</code> differently from a generic occurence of <code>-foo</code>, so <code>desugar_negOne</code> is the more specific rule, while <code>desugar_neg</code> is the general rule. However, whatever I try, the goal in the last example always becomes <code>Foo.neg 1</code>, i.e., the generic rule got applied. Only if I remove the <code>aesop</code> attribute from <code>desugar_neg</code> entirely, does the second rule fire and the goal becomes <code>Foo.negOne</code> as desired.</p>\n<p>Am I misunderstanding how the <code>norm</code> penalty works / should work?</p>",
        "id": 373909790,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1688985499
    },
    {
        "content": "<p>Equations are added as <code>simp</code> rules and are applied in a simplifier pass, so we can't use the same semantics for penalties as for other types of rules. However, the simplifier supports priorities, which Aesop could (and should) set and which would solve this particular issue. I'll implement this. As a workaround, you can write <code>@[simp 10]</code> for the <code>negOne</code> lemma.</p>",
        "id": 373945912,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1688992567
    },
    {
        "content": "<p>Thanks, that indeed fixes my problem!</p>",
        "id": 373949485,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1688993261
    }
]