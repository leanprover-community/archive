[
    {
        "content": "<p>I was doing some tests, and ended up with some code equivalent to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span>\n<span class=\"k\">#eval</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I expected the result to be <code>true</code>, but it is <code>false</code>. This is because <code>n</code> is coerced to <code>0 : Fin 100</code>. I was not aware of this coercion existing, and I thought it would coerce <code>m</code> to a <code>Nat</code>. I don't have an opinion on which coercion is the 'right' one, however I would like to be able to see which coercion is going on. No matter where I put the cursor or hover the mouse, it doesn't say anything about the coercion.</p>\n<p>So I would like to see a change to the hover info so that coercions become visible. In Haskell, I remember that hovering over an expression shows you the type of that expression and not just the information about the constant. So in this example, one possible way to resolve my confusion would be by hovering over <code>n</code>, and the hover info telling me that it has type <code>Fin 100</code> instead of the <code>Nat</code> that shows up now.</p>",
        "id": 402289717,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700067788
    },
    {
        "content": "<p>You can use <code>check</code> to see the coercion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span>\n<span class=\"k\">#check</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>  <span class=\"c1\">-- m.val ≤ n : Prop</span>\n</code></pre></div>",
        "id": 402289864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700067833
    },
    {
        "content": "<p>I see, but what if I'm writing some more complicated function, which happens to have <code>m ≤ n</code> as a subexpression. e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 402290537,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700068046
    },
    {
        "content": "<p>And importing Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"c1\">-- m ≤ Nat.cast n : Prop</span>\n</code></pre></div>",
        "id": 402290567,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700068059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> You're seeing <code>m.val ≤ n</code>, but we're seeing <code>m ≤ ↑n</code>.</p>",
        "id": 402293258,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700068951
    },
    {
        "content": "<p>Yep, my version was without imports</p>",
        "id": 402293488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700069042
    },
    {
        "content": "<p>This is really not good that there's a cycle in coercions.</p>\n<p>This is fun:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span>\n<span class=\"k\">#eval</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"c1\">-- false</span>\n</code></pre></div>",
        "id": 402293652,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700069099
    },
    {
        "content": "<p><code>import Mathlib.Data.Fin.Basic</code> seem to be enough to switch the behavior</p>",
        "id": 402293721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700069125
    },
    {
        "content": "<p>The expression tree elaborator (which <code>≤</code> participates in) assumes that the coercion instances form some kind of directed system</p>",
        "id": 402293880,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700069178
    },
    {
        "content": "<p>Specifically, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.instAddMonoidWithOne#doc\">docs#Fin.instAddMonoidWithOne</a> changes the tide (because it makes <code>#synth NatCast (Fin 100)</code> succeed)</p>",
        "id": 402294043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700069258
    },
    {
        "content": "<p>Arguably <code>Fin.val</code> is the bad coercion because its not structure-preserving</p>",
        "id": 402299256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700071218
    },
    {
        "content": "<p>The coercion from <code>Fin</code> to <code>Nat</code> makes sense to have, since it's a subtype coercion, but is there some solution where we can prevent the <code>Nat</code> to <code>Fin</code> coercion? I thought having an algebraic structure was what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod#doc\">docs#ZMod</a> was for.</p>",
        "id": 402299281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700071225
    },
    {
        "content": "<p><code>ZMod 0</code> and <code>Fin 0</code> are very different, so I don't think one can be dropped in as a replacement for the other</p>",
        "id": 402299479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700071288
    },
    {
        "content": "<p>Also, <code>Fin (2 ^ n)</code> is used to implement bitvectors and fixed-width integers, which are available long before Zmod</p>",
        "id": 402299655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700071327
    },
    {
        "content": "<p>Is there something we can do about <code>NatCast</code> not giving <code>Fin</code> a <code>Nat -&gt; Fin</code> coercion?</p>",
        "id": 402299881,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700071402
    },
    {
        "content": "<p><code>Fin</code> is used as a plain subtype of <code>Nat</code> too, for indexing. For that use, having the the coercion to Nat seems to make sense.</p>\n<p>I find non-injective coercions to be suspicious in general though. I'd think it would be better if you only got a <code>NatCast</code>-derived automatic coercion in characteristic 0.</p>",
        "id": 402300751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700071685
    },
    {
        "content": "<p>Isn't the <code>Nat</code> to <code>Fin</code> used precisely to have wrapping indices too?</p>",
        "id": 402301007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700071791
    },
    {
        "content": "<p>who wants wrapping indices?</p>",
        "id": 402301560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700071995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Visibility.20of.20coercions/near/402299881\">said</a>:</p>\n<blockquote>\n<p>Is there something we can do about <code>NatCast</code> not giving <code>Fin</code> a <code>Nat -&gt; Fin</code> coercion?</p>\n</blockquote>\n<p>This one isn't <code>NatCast</code>'s fault, it is a \"notation typeclass\" for exactly this map. Rather, you should blame <code>AddGroupWithOne</code> for having a <code>NatCast</code> instance</p>",
        "id": 402301817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700072101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Visibility.20of.20coercions/near/402301560\">said</a>:</p>\n<blockquote>\n<p>who wants wrapping indices?</p>\n</blockquote>\n<p>Toeplitz matrices are one example</p>",
        "id": 402302201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700072238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Visibility.20of.20coercions/near/402300751\">said</a>:</p>\n<blockquote>\n<p>I find non-injective coercions to be suspicious in general though.</p>\n</blockquote>\n<p>We use them quite a lot for quotient constructions, though we could perhaps allocate a different notation there</p>",
        "id": 402302418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700072313
    },
    {
        "content": "<p>we already do, the <code>\\[[ x \\]]</code> notation</p>",
        "id": 402308439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700074773
    },
    {
        "content": "<p>Or we could remove the additive group structure from <code>Fin</code> completely and tell users to use ZMod if they want a group structure and fin if they want the finite set. In my brain there's a coercion from Fin n to Nat and a coercion from Nat to ZMod n and no coercions in either of the opposite directions, and this is what distinguishes the set Fin n from the group ZMod n.</p>",
        "id": 402314307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700077065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Visibility.20of.20coercions/near/402308439\">said</a>:</p>\n<blockquote>\n<p>we already do, the <code>\\[[ x \\]]</code> notation</p>\n</blockquote>\n<p>We don't use that though because it has the wrong type up to semireducibility</p>",
        "id": 402314495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700077118
    },
    {
        "content": "<p>I've mentioned before that I'd like having <code>[[x]]</code> be a notation typeclass. Would this be another point in favor for that?</p>",
        "id": 402315780,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700077637
    },
    {
        "content": "<p>yeah I'd love to fix <code>[[x]]</code> to just do the right thing in quotient wrapper types</p>",
        "id": 402317321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700078248
    },
    {
        "content": "<p>not sure that means making it a notation typeclass, additional magic may be needed</p>",
        "id": 402317403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700078282
    },
    {
        "content": "<p>Maybe we can remove the additive structure of <code>Fin</code>, and keep the ability to have wrapping indices, by instead having a group action of <code>Int</code> on <code>Fin n</code> that shifts the indeces cyclicly?</p>",
        "id": 402334066,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700085030
    },
    {
        "content": "<p>We probably want that action anyway, regardless of the other conversation here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- this instance might cause some diamonds, or it might be fine</span>\n<span class=\"kd\">instance</span> <span class=\"n\">AddMonoidWithOne.toAddAction</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddAction</span> <span class=\"n\">ℕ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddAction.compHom</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.castAddMonoidHom</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- this instance might cause some diamonds, or it might be fine</span>\n<span class=\"kd\">instance</span> <span class=\"n\">AddGroupWithOne.toAddAction</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddAction</span> <span class=\"n\">ℤ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddAction.compHom</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Int.castAddHom</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddAction</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402342410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700089144
    },
    {
        "content": "<p>Yeah I had a branch adding those fields to <code>AddCommGroupWithOne</code> in Lean 3.</p>",
        "id": 402408609,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700121744
    },
    {
        "content": "<p>Did you have a case in mind where they were needed to avoid a diamond?</p>",
        "id": 402434055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700130087
    },
    {
        "content": "<p>The only case I can think of where you might want a different defeq is complex numbers, where you could pick either <code>(n + re, im)</code> or <code>(n + re, 0 + im)</code> (where my proposal above gives the latter)</p>",
        "id": 402434492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700130205
    },
    {
        "content": "<p>Going back to the original question, I think that it would be very beneficial for lean as a programming language that when you hover your mouse over an expression it shows you the 'true' type of that expression. There is this thing in the infoview called expected type that sort of does this but not quite; For example it doesn't show the coerced type. I want to be able to hover over the coerced <code>m : Fin 100</code>, and the info telling me that it has type <code>Nat</code>.</p>\n<p>In tactic mode this isn't an issue because you can hover over expressions in the tactic state view (and coercions are shown), so this is just about lean as a (meta) programming language.</p>",
        "id": 402583612,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700180906
    }
]