[
    {
        "content": "<p><a href=\"https://github.com/0art0/lean-slides/\"><code>LeanSlides</code></a> is a tool I wrote to generate and display <code>reveal.js</code> slides as a widget in the infoview by processing Markdown comments in the Lean editor. During talks and demonstrations related to Lean, I find myself having to constantly switch between the slides and the editor, and this tool is an attempt to eliminate that friction. Here is what it looks like:</p>\n<p><a href=\"/user_uploads/3121/sEXdJdGfvib0jQJW3vfrxVvi/LeanSlides.png\">LeanSlides.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sEXdJdGfvib0jQJW3vfrxVvi/LeanSlides.png\" title=\"LeanSlides.png\"><img src=\"/user_uploads/3121/sEXdJdGfvib0jQJW3vfrxVvi/LeanSlides.png\"></a></div><p>The tool currently uses <code>http-server</code> as a workaround to displaying local HTML files within <code>iframe</code>s. I feel that this step is unnecessary and would appreciate feedback to improve the tool.</p>",
        "id": 380028894,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690722427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span> I'm trying to get this working in a test repo... Can you (or anyone else who knows about nodejs etc.) offer a bit of help? I installed <code>http-server</code> globally with <code>npm install -g http-server</code>, and it's in my path. I also have <code>reveal.js</code> in the <code>lib</code> folder in my global npm folder, and pandoc in my path. Trying out the demo file just shows a blank black rectangle. What step am I missing?</p>",
        "id": 380375478,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690815100
    },
    {
        "content": "<p>Ah I got it working! I missed the step that says \"run <code>http-server</code> in the project dir`.</p>",
        "id": 380377344,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690815417
    },
    {
        "content": "<p>Ok, one more question: What's the preferred way to regenerate the slides? Modifying the markdown comments in a lean file doesn't seem to update the slides themselves. I realize there is some caching involved. Am I supposed to just delete the slides/markdown files to get it to regenerate?</p>",
        "id": 380378519,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690815591
    },
    {
        "content": "<p>I'm struggling a bit with that myself. Ideally I would expect it to regenerate dynamically, but for some reason, it doesn't. I'll push a commit that disables the caching to see if that fixes it; that feature was added before I had the code action to go in and out of draft mode.</p>",
        "id": 380385637,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690816664
    },
    {
        "content": "<p>It seems that I can't get the slides to regenerate even if I delete the <code>md</code> and <code>slides</code> folders.... where is the cache stored?</p>",
        "id": 380386283,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690816762
    },
    {
        "content": "<p>I'm using Lean's built-in caching mechanism; I'm not sure exactly where that information. I assume it disappears when the server is restarted.</p>",
        "id": 380389998,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690817289
    },
    {
        "content": "<p>I have pushed the commit. I will test to make sure it hasn't broken anything.</p>",
        "id": 380390126,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690817308
    },
    {
        "content": "<p>To clarify, the issue I'm having is that my making an \"Introduction\" slide, I only ever get the one from the demo file.</p>",
        "id": 380390951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690817434
    },
    {
        "content": "<p>Oh, I see. As a temporary workaround, renaming it to something like <code>Intro</code> should fix it. I will try to incorporate the name of the Lean file into the auto-generated HTML file name. I was in fact planning to do this earlier, but I couldn't find a command to print the name of current file (the closest was <code>IO.currentDir</code>, which gives the current directory).</p>",
        "id": 380392810,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690817711
    },
    {
        "content": "<p>I pulled your latest changes, but even with caching disabled, it seems that I still can't regenerate slides. Is there some caching being done by <code>reveal.js</code>?</p>",
        "id": 380393580,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690817828
    },
    {
        "content": "<p>I suspect it might be the HTTP server part (since the name of the request remains the same, though the contents have changed). I will test in a browser to rule out caching on the Lean side.</p>",
        "id": 380394776,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690817980
    },
    {
        "content": "<p>Are you aware of <a href=\"https://github.com/webpro/reveal-md\">https://github.com/webpro/reveal-md</a>?</p>",
        "id": 380395913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818128
    },
    {
        "content": "<p>It seems like the browser updates just fine. This suggests that either my use of iframes is creating issues, or there is some sort of internal caching on the Lean or widget side.</p>",
        "id": 380396367,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690818184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.60LeanSlides.60.3A.20Auto-generating.20slides.20from.20Lean.20comments/near/380395913\">said</a>:</p>\n<blockquote>\n<p>Are you aware of <a href=\"https://github.com/webpro/reveal-md\">https://github.com/webpro/reveal-md</a>?</p>\n</blockquote>\n<p>I have not used it myself (I typically use pandoc), though I have seen it mentioned a few times. I will look into it.</p>",
        "id": 380397009,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690818259
    },
    {
        "content": "<p>I think it has some auto-reloading support, but maybe that's trivial anyway and the issue is with VSCode as you say</p>",
        "id": 380397153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818280
    },
    {
        "content": "<p>BTW, it seems that pandoc uses the revealjs from <code>unpgs.com</code>, so installing it (as mentioned in the readme for the repo) seems to be unnecessary</p>",
        "id": 380397800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690818365
    },
    {
        "content": "<p>It sounds worthwhile to try <code>reveal-md</code>, I will experiment with integrating it on a branch tomorrow. Thanks for the suggestion!</p>",
        "id": 380398083,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690818411
    },
    {
        "content": "<p>Anyway, thanks for writing this! I hope to be able to use it for my course starting in Sept.</p>",
        "id": 380398462,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690818479
    },
    {
        "content": "<p>Thanks for testing it out! I hope to iron out these issues by then :)</p>",
        "id": 380398842,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690818535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I tried <code>reveal-md</code> on live mode and I think it does solve the problem! I'll have to test further to be sure - I'll write the code up more cleanly tomorrow and test again. Thanks a lot!</p>",
        "id": 380412097,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690820551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/.60LeanSlides.60.3A.20Auto-generating.20slides.20from.20Lean.20comments/near/380398462\">said</a>:</p>\n<blockquote>\n<p>Anyway, thanks for writing this! I hope to be able to use it for my course starting in Sept.</p>\n</blockquote>\n<p>Same here. Please don't hesitate to post updates if you make progress with this project!</p>",
        "id": 380416558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690821335
    },
    {
        "content": "<p>I had trouble getting <code>reveal-md</code> to run on multiple files at once, though the <code>--watch</code> flag of <code>reveal-md</code> led me to explore a bit more. I found that by replacing <code>http-server</code> with <code>browser-sync</code> and using the <code>--watch</code> flag, it is possible to get slides that update dynamically. I have pushed the new code and instructions to use it.</p>",
        "id": 380738691,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1690902680
    },
    {
        "content": "<p>I have updated the instructions on the <code>README</code> for starting <code>browser-sync</code> from the command-line. The slides now live-update within a reasonable amount of time - I have tested both from the repository itself as well as from a downstream project.<br>\nCC: <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 382356932,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1691326854
    },
    {
        "content": "<p>I just tried the updated version, and can confirm that dynamic reloading works great! Thanks!</p>",
        "id": 383123151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691547004
    },
    {
        "content": "<p>What do you think about putting the <code>browser-sync</code> command behind a lake script? It would be nice to be able to write <code>lake script run serve-slides</code> instead of <code>browser-sync</code> with a bunch of flags.</p>",
        "id": 383123479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691547151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/.60LeanSlides.60.3A.20Auto-generating.20slides.20from.20Lean.20comments/near/383123479\">said</a>:</p>\n<blockquote>\n<p>What do you think about putting the <code>browser-sync</code> command behind a lake script? It would be nice to be able to write <code>lake script run serve-slides</code> instead of <code>browser-sync</code> with a bunch of flags.</p>\n</blockquote>\n<p>Thanks for the suggestion. I think that <code>browser-sync</code> command with its long list of arguments is quite inconvenient too; the entire thing should ideally be bundled up into a short command.</p>\n<p>However, when I had experimented with <code>lake script</code>s previously, I found that they do not get inherited by downstream projects. I would like the command to work even in projects that use <code>LeanSlides</code> as a dependency, but I do not know of a way to achieve this currently (for development within the <code>LeanSlides</code> repository, there is the <code>./build/bin/launchServer</code> executable that runs <code>browser-sync</code> with all the configuration options). </p>\n<p>I have opened <a href=\"https://github.com/0art0/lean-slides/issues/4\">an issue on the repository</a> for this and will look around for ways to get scripts to run in dependencies.</p>",
        "id": 383165721,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1691563910
    },
    {
        "content": "<p>you can run <code>lake exe</code> in downstream projects, that's how <code>lake exe cache</code> works</p>",
        "id": 383166961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691564201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao Tadipatri</span> <a href=\"#narrow/stream/270676-lean4/topic/.60LeanSlides.60.3A.20Auto-generating.20slides.20from.20Lean.20comments/near/383165721\">said</a>:</p>\n<blockquote>\n<p>However, when I had experimented with <code>lake script</code>s previously, I found that they do not get inherited by downstream projects.</p>\n</blockquote>\n<p>They are inherited. You just have to prefix them with the name of the package (i.e., <code>lake run lean-slides/serve</code>). <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 383418310,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691615437
    },
    {
        "content": "<p>Admittedly, that is inconsistent and could be fixed. (It is mostly a result of the difference in how the args of <code>lake build</code> and <code>lake run</code> are processed.)</p>",
        "id": 383419250,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691615725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I have written a Lake script <code>serve-slides</code> to avoid the direct call to <code>browser-sync</code>. The instructions for use are in the updated <code>README</code>. </p>\n<p>Since lake scripts are required to return a termination code, the command <code>lake run lean-slides/serve-slides</code> terminates shortly after spawning the server process. The server remains unaffected and continues to work in the background, but this means that the only way to stop the server is to close the terminal itself.  I find this slightly inconvenient and will try to think of ways to avoid this (the tool is still usable in the meanwhile).</p>",
        "id": 384682011,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1691999603
    },
    {
        "content": "<p>For people interested in LeanSlides: be careful that it assumes you have a recent enough version of pandoc. Specifically I just spent about one hour fighting because I didn't have <a href=\"https://github.com/jgm/pandoc/commit/7c6dbd37eb3e785f875e0030d723e422db72d453\">https://github.com/jgm/pandoc/commit/7c6dbd37eb3e785f875e0030d723e422db72d453</a> because the latest Ubuntu LTS is <a href=\"https://packages.ubuntu.com/search?keywords=pandoc\">stuck</a> on the last pandoc version before that change, three months too old. <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span></p>",
        "id": 387345022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1692998286
    },
    {
        "content": "<p>See also <a href=\"https://github.com/0art0/lean-slides/issues/7\">https://github.com/0art0/lean-slides/issues/7</a> (which also implicitly contains a question for <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>).</p>",
        "id": 387346701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1692999362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span>  I opened <a href=\"https://github.com/0art0/lean-slides/pull/8\">https://github.com/0art0/lean-slides/pull/8</a> which allows adding pandoc options. It doesn't do anything fancy with lake, rather it just uses an <code>IO.Ref</code></p>",
        "id": 387350066,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693001596
    },
    {
        "content": "<p>If PRs are not welcome, just let me know <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span> and I will delete this PR.</p>",
        "id": 387350191,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693001675
    },
    {
        "content": "<p>now I see that <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> has commented on the issue. With Mac's suggestion, how does one capture an option provided by lake as in the suggested </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">slides</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"s2\">\"https://github.com/0art0/lean-slides.git\"</span> <span class=\"k\">with</span>\n  <span class=\"n\">NameMap.empty.insert</span> <span class=\"bp\">`</span><span class=\"n\">morePandocArgs</span> <span class=\"s2\">\"-V theme=white\"</span>\n</code></pre></div>\n<p>Does this appear in some <code>Lake</code> monad?</p>",
        "id": 387350832,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693002156
    },
    {
        "content": "<p>This seems good enough for simple options, but I guess it would become really inconvenient for larger options. For instance there was previous discussions about calling doc-gen with a lot more options to provide a custom landing page message or layout options. How would that work?</p>",
        "id": 387351134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693002410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> To receive options in a Lake configuration, one uses <code>get_config? opt</code>.  For instance, for <code>morePandocArgs</code>, this would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">morePandocArgs</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">morePandocArgs</span> <span class=\"k\">then</span> <span class=\"n\">cfg.splitOn</span> <span class=\"s2\">\" \"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span> <span class=\"k\">else</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 387351840,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693002871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I am confused, why do think this approach would not generalize in those circumstances? If the problem is just size, a package could instead read a configuration from file in the workspace root (e.g., <code>lean-slides.json</code>).</p>",
        "id": 387351974,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693002966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/.60LeanSlides.60.3A.20Auto-generating.20slides.20from.20Lean.20comments/near/387351840\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> To receive options in a Lake configuration, one uses <code>get_config? opt</code>.  For instance, for <code>morePandocArgs</code>, this would work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">morePandocArgs</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">morePandocArgs</span> <span class=\"k\">then</span> <span class=\"n\">cfg.splitOn</span> <span class=\"s2\">\" \"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span> <span class=\"k\">else</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>is there a particular reason get_config? doesn't follow the common naming convention? Is it special in a way?</p>",
        "id": 387352169,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693003155
    },
    {
        "content": "<p>You mean that it should be <code>get_config%</code> or something like that?</p>",
        "id": 387352304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693003245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Are you asking why it uses an underscore? If so, that is because it is a special elaborator that reads the option from the environment.</p>",
        "id": 387352323,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693003259
    },
    {
        "content": "<p>Yes <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 387352341,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693003271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Thanks for the pull request, I have merged it.</p>",
        "id": 387438926,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1693065899
    },
    {
        "content": "<p>I will also work on adding the <code>lakefile</code>-based approach suggested by Mac, so that users have the flexibility of customising the <code>pandoc</code> config using either method.</p>",
        "id": 387439128,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1693066061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/.60LeanSlides.60.3A.20Auto-generating.20slides.20from.20Lean.20comments/near/387345022\">said</a>:</p>\n<blockquote>\n<p>For people interested in LeanSlides: be careful that it assumes you have a recent enough version of pandoc. Specifically I just spent about one hour fighting because I didn't have <a href=\"https://github.com/jgm/pandoc/commit/7c6dbd37eb3e785f875e0030d723e422db72d453\">https://github.com/jgm/pandoc/commit/7c6dbd37eb3e785f875e0030d723e422db72d453</a> because the latest Ubuntu LTS is <a href=\"https://packages.ubuntu.com/search?keywords=pandoc\">stuck</a> on the last pandoc version before that change, three months too old. <span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao Tadipatri</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thank you for pointing this out. I have <a href=\"https://github.com/0art0/lean-slides/commit/df2f4ce3b3d798b51cdfcdbe7bbab1d4d5decaa4\">updated the <code>README</code></a> cautioning users against this and have included a suggestion for a potential fix in such cases.</p>",
        "id": 387444347,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1693070446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao Tadipatri</span> <a href=\"#narrow/stream/270676-lean4/topic/.60LeanSlides.60.3A.20Auto-generating.20slides.20from.20Lean.20comments/near/384682011\">said</a>:</p>\n<blockquote>\n<p>Since lake scripts are required to return a termination code, the command <code>lake run lean-slides/serve-slides</code> terminates shortly after spawning the server process. The server remains unaffected and continues to work in the background, but this means that the only way to stop the server is to close the terminal itself.  I find this slightly inconvenient and will try to think of ways to avoid this (the tool is still usable in the meanwhile).</p>\n</blockquote>\n<p>I just noticed I overlooked this comment. You  can have the script wait on the child and return its termination code like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">script</span> <span class=\"bp\">«</span><span class=\"n\">serve</span><span class=\"bp\">-</span><span class=\"n\">slides</span><span class=\"bp\">»</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Starting HTTP server for `Lean Slides` ...\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">child</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.spawn</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"browser-sync\"</span><span class=\"o\">,</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span> <span class=\"s2\">\"--port\"</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">getPort</span><span class=\"o\">,</span>\n              <span class=\"s2\">\"--watch\"</span><span class=\"o\">,</span> <span class=\"s2\">\"--no-open\"</span><span class=\"o\">],</span>\n    <span class=\"n\">cwd</span> <span class=\"o\">:=</span> <span class=\"s2\">\".\"</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">child.wait</span>\n</code></pre></div>",
        "id": 389964261,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694216765
    }
]