[
    {
        "content": "<p>I want to turn a <code>Term</code> into a <code>TSyntax `Lean.Parser.Tactic.rwRule</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Add a suggestion for `rw [h]`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">addRewriteSuggestion</span> <span class=\"o\">(</span><span class=\"n\">origTac</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">estx</span> <span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span>\n    <span class=\"k\">if</span> <span class=\"n\">symm</span> <span class=\"k\">then</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">$</span><span class=\"n\">estx</span><span class=\"o\">])</span>\n    <span class=\"k\">else</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">estx</span><span class=\"o\">])</span> <span class=\"c1\">-- error here: estx has type Term but is expected to have type  TSyntax `Lean.Parser.Tactic.rwRule</span>\n  <span class=\"n\">addSuggestion</span> <span class=\"n\">origTac</span> <span class=\"n\">tac</span>\n</code></pre></div>\n<p>Notice that in the <code>symm</code> branch it works just fine!</p>",
        "id": 342459860,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679020387
    },
    {
        "content": "<p>This at least typechecks, but I haven't set up a test to see if it's the right thing: <code> `(tactic| rw [($estx)])</code></p>",
        "id": 342460774,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679021086
    },
    {
        "content": "<p>Ah, right, it's just <code> `(tactic| rw [$estx:term])</code></p>",
        "id": 342461207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679021419
    },
    {
        "content": "<p>And to answer the title of the thread, <code> `(Parser.Tactic.rwRule| $estx:term) </code>.</p>",
        "id": 342463570,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679023301
    }
]