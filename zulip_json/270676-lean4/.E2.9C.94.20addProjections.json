[
    {
        "content": "<p>I am adding a new structure myself via <code>addDecl</code>, and I want to derive projection functions for it. I do not have <code>Syntax</code>, I only have <code>Expr</code>, hence I can't use elaboration. I see that there's <code>addProjections</code> in <code>Lean/Elab/Structure.lean</code>, but it's private, so I can't use it. I've kinda resorted to deriving projection functions manually now, but maybe there is some other helper functions that I've missed?</p>",
        "id": 342615989,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1679071611
    },
    {
        "content": "<p>Would you be willing to e.g. <code>open private addProjections from Lean.Elab.Structure in</code>?</p>",
        "id": 342713844,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679118963
    },
    {
        "content": "<p>Wait, you can do that? Does this allow you to use arbitrary <code>private</code> definitions?</p>",
        "id": 342731678,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1679128437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> <a href=\"#narrow/stream/270676-lean4/topic/addProjections/near/342615989\">said</a>:</p>\n<blockquote>\n<p>I do not have <code>Syntax</code>, I only have <code>Expr</code>, hence I can't use elaboration</p>\n</blockquote>\n<p>Maybe I have suggested that before, but have you thought about losslessly converting <code>Expr</code> to <code>Syntax</code> using <code>pp.all</code>?</p>",
        "id": 342732181,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679128595
    },
    {
        "content": "<p>Is it guaranteed that if you go through an <code>Expr -&gt; Syntax -&gt; Expr</code> roundtrip with <code>pp.all</code> that you end up with the same expression?</p>",
        "id": 342733111,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1679128927
    },
    {
        "content": "<p>I'm not sure if anyone has tried yet, and in fact it probably breaks on implicit lambdas. In theory, <code>pp.analyze</code> is the one that tries to guarantee that, but I believe it is somewhat neglected as no-one is using it, a catch-22.</p>",
        "id": 342733832,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679129285
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.toSyntax#doc\">docs4#Lean.Expr.toSyntax</a> is also a fun trick, but it doesn't work on the command level as there is no metavariable context</p>",
        "id": 342734021,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679129396
    },
    {
        "content": "<p>it's definitely not true if you include mdata</p>",
        "id": 342734651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679129674
    },
    {
        "content": "<p>and internal names</p>",
        "id": 342734665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679129689
    },
    {
        "content": "<p>Alright, mdata at least should not matter for these kinds of use cases I'd hope</p>",
        "id": 342735573,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679130027
    },
    {
        "content": "<p>Fun fact, <code>Syntax</code> had an <code>Expr</code> constructor for a while exactly for this use case. But it was terrible, in many other use cases there's nothing reasonable we can do when encountering an Expr in a syntax tree. And it wouldn't even be all that hard to replicate with a little more overhead, just make up <code>SyntaxNodeKind</code>s without surface syntax for all Expr constructors and write the trivial, guaranteed-roundtripping elaborators for them. Nothing of this needs to be in core.</p>",
        "id": 342736245,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679130253
    },
    {
        "content": "<p>Like Scott has mentioned before, I think the root cause of issues like this is that many elaborator internal functions work directly on <code>Syntax</code> instead of using <code>Expr</code> and parsed representations, which makes them inconvenient to use for anything except the front end tactic they were originally designed for</p>",
        "id": 342736647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679130398
    },
    {
        "content": "<p>Of course the interfaces could be improved, but this is additional work that someone would have to do in core. It is not always something that naturally falls out of the implementation with a few more lines of code but requires explicit, careful design.</p>",
        "id": 342738549,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679131180
    },
    {
        "content": "<p>I agree that in the case of tactics and not complex commands, it could often be realized with much less work</p>",
        "id": 342738744,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679131240
    },
    {
        "content": "<p>I agree that this is work, but usually it is mathlib tactic writers that are best positioned (and motivated) to determine how to factor core tactics into a pluming and porcelain part. When you just have a front end tactic it is difficult to tell how to do this usefully</p>",
        "id": 342739604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679131574
    },
    {
        "content": "<p>Yeah, I think we are in agreement. But if there is a simple workaround until we get to that point, I'm happy with that too.</p>",
        "id": 342741836,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679132353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/addProjections/near/342732181\">said</a>:</p>\n<blockquote>\n<p>Maybe I have suggested that before, but have you thought about losslessly converting <code>Expr</code> to <code>Syntax</code> using <code>pp.all</code>?</p>\n</blockquote>\n<p>I wasn't aware of that, but I will keep that in mind :o <br>\nThough if it's not guaranteed to end up with the same expression, I'm a little hesitant to use that.<br>\nI have implemented deriving projection functions on my own yesterday evening, it wasn't as hard as I thought it would be.</p>",
        "id": 342773854,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1679142970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> has marked this topic as resolved.</p>",
        "id": 342774014,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679143034
    }
]