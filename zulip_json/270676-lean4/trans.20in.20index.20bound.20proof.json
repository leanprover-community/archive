[
    {
        "content": "<p>When I index-access to <code>List</code>/<code>Array</code>, it is frustrating the following causes errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Both arguments of `trans` cause errors.</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">i.pred_le</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to know why <code>trans</code> doesn't work here.</p>\n<p>From the error message above, it seems that <code>trans</code> cannot infer its implicit arguments correctly.<br>\nSo I next tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Only `i.pred_le` causes an error.</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:=</span><span class=\"n\">LE.le</span><span class=\"o\">)</span> <span class=\"n\">i.pred_le</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">The error message says</span>\n<span class=\"cm\">&gt; application type mismatch</span>\n<span class=\"cm\">&gt;   trans (Nat.pred_le i)</span>\n<span class=\"cm\">&gt; argument</span>\n<span class=\"cm\">&gt;   Nat.pred_le i</span>\n<span class=\"cm\">&gt; has type</span>\n<span class=\"cm\">&gt;   Nat.pred i ≤ i : Prop</span>\n<span class=\"cm\">&gt; but is expected to have type</span>\n<span class=\"cm\">&gt;   x ≤ ?m.2258 : Prop</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- The same errors as in the case without `s` specified.</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:=</span><span class=\"n\">LT.lt</span><span class=\"o\">)</span> <span class=\"n\">i.pred_le</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- No error</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:=</span><span class=\"n\">LT.lt</span><span class=\"o\">)</span> <span class=\"n\">i.pred_le</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Seeing the result, I completely got lost.<br>\nWhy on earth does the elaborator think <code>r:=LE.le (List Nat)</code> is the appropriate choice when <code>r:=LE.le</code> is given?<br>\nI am not sure either why the last one compiles while it doesn't without <code>t</code> specified; isn't the target binary relation <code>t</code> of <code>trans</code> determined by <code>GetElem</code> instance of <code>List</code>?<br>\nI am glad if you could give me a hint.</p>",
        "id": 397665155,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697792976
    },
    {
        "content": "<p>Note that <code>hi</code> is not a <code>le</code> statement, but a <code>lt</code> statement. I think there is other issues in here, but this is one issue</p>",
        "id": 397668323,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697794110
    },
    {
        "content": "<p>Here's a way you could do it with mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">((</span><span class=\"n\">i.pred_le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it does seem quite annoying to do in basic Lean</p>",
        "id": 397669017,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697794389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/trans.20in.20index.20bound.20proof/near/397668323\">said</a>:</p>\n<blockquote>\n<p>Note that <code>hi</code> is not a <code>le</code> statement, but a <code>lt</code> statement. I think there is other issues in here, but this is one issue</p>\n</blockquote>\n<p>Thank you for commenting, but I can't see what you mean. Note that <code>Trans</code> is a heterogeneous transitivity, and actually it can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.instTransNatLeInstLENatLtInstLTNat#doc\">docs#Nat.instTransNatLeInstLENatLtInstLTNat</a> .<br>\nIn fact, <code>trans</code> uses it in my example if <code>(t:=LT.lt)</code> is supplied. One of my questions is why we need to specify it.</p>",
        "id": 397681418,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697798440
    },
    {
        "content": "<p>I mean, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span> <span class=\"o\">:=</span> <span class=\"n\">trans</span> <span class=\"n\">i.pred_le</span> <span class=\"n\">hi</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">this</span> <span class=\"c1\">-- or just `x[i-1]`</span>\n</code></pre></div>",
        "id": 397682121,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697798679
    },
    {
        "content": "<p>Oh, I was a bit surprised knowing the code just above works without type specification in <code>have</code>-clause.</p>",
        "id": 397686236,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697800189
    },
    {
        "content": "<p>Hmm, this even works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">i.pred_le</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397687880,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697800788
    },
    {
        "content": "<p>Oh I see! Apologies, this was based on old Lean3 knowledge, I didn't know that this worked automatically. It seems to be an expected type issue, I now agree this is bizarre!</p>",
        "id": 397689406,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697801304
    }
]