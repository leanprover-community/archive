[
    {
        "content": "<p>I have the following example, which I'd like to run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Stack</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">stuff</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pop</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Stack</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.stuff</span> <span class=\"bp\">==</span> <span class=\"o\">[]</span> <span class=\"k\">then</span>\n    <span class=\"o\">⟨</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">s.stuff.head</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">s.stuff.tail</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>List.head</code> requires proof that the list is non empty (<code>s.stuff ≠ [] : Prop</code>) . The type of <code>h</code> is however <code>¬(s.stuff == []) = true : Prop</code>. What is the quickest way to get there? Is an equation lemma the only way to go?</p>",
        "id": 353527448,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682636022
    },
    {
        "content": "<p>Can you put <code>h : s.stuff = []</code> instead? <code>if</code> is expecting a Prop, not a bool.</p>",
        "id": 353528089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682636148
    },
    {
        "content": "<p>Making it a prop means I need to add a decidable instance.  I can see why this is true. On the other hand, I don't see why a computable bool can't be converted to a proof of the corresponding prop.</p>",
        "id": 353528543,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682636230
    },
    {
        "content": "<p>Specifically , changing to a Prop gives the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">s.stuff</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 353528626,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682636247
    },
    {
        "content": "<p>A coomputable bool can be converted to a Prop. It is just that <code>==</code> Does not necessarily have to mean <code>=</code>. The implementation can be completely distinct. The reason the Decidable thing does not work here is that the general decidability function on lists requires decidability to be shown, what you want to do here is add a <code>deriving DecidableEq</code> to your structure (or just making it an abbrev all together) and a <code>[DecidableEq α]</code> argument to your function so it can synthesize.</p>\n<p>Alternatively, since there is no need to know that alpha is decidableeq since yoou only want to check for equality to the empty list you might as well simply pattern match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">s.stuff</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>which in general just simplifies your program largely because there is no need for the head and tail stuff anymore in the first place</p>",
        "id": 353530808,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682636648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Converting.20Bool.20to.20Prop/near/353530808\">said</a>:</p>\n<blockquote>\n<p>A coomputable bool can be converted to a Prop. It is just that <code>==</code> Does not necessarily have to mean <code>=</code>. The implementation can be completely distinct. The reason the Decidable thing does not work here is that the general decidability function on lists requires decidability to be shown, what you want to do here is add a <code>deriving DecidableEq</code> to your structure (or just making it an abbrev all together) and a <code>[DecidableEq α]</code> argument to your function so it can synthesize.</p>\n<p>Alternatively, since there is no need to know that alpha is decidableeq since yoou only want to check for equality to the empty list you might as well simply pattern match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">s.stuff</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>which in general just simplifies your program largely because there is no need for the head and tail stuff anymore in the first place</p>\n</blockquote>\n<p>Ah no this was an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I constructed to express  my question on how to reason with conditionals. In each of the respective branches of the conditional <code>if then else</code>, the <code>if</code> condition is either true or false.</p>",
        "id": 353531934,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682636870
    },
    {
        "content": "<p>Adding <code>[DecidableEq α]</code> helps in this example</p>",
        "id": 353533627,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682637202
    },
    {
        "content": "<p>thanks a lot :)</p>",
        "id": 353533660,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682637211
    },
    {
        "content": "<p>I guess a better example would have a condition that is not a pattern match. (something like <code>n &gt; m</code> where <code>n</code> and <code>m</code> are naturals.</p>",
        "id": 353539203,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682638296
    },
    {
        "content": "<p>It's worth knowing that you can either stick with the <code>==</code> side of things and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulBEq#doc\">docs4#LawfulBEq</a>, or you can switch to <code>=</code> and use <code>DecidableEq</code>. In both cases you get a decidable equality test that is also meaningful (in that it can either be turned into <code>=</code> or is already <code>=</code>).</p>",
        "id": 353719117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682669904
    }
]