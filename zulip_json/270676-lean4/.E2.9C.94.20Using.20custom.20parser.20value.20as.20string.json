[
    {
        "content": "<p>I'm upgrading Lean from m4 to nightly-2023-05-06. Looks like macros have changed a bit. I used to have a custom parser in my macro rules like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">withAntiquot</span> <span class=\"o\">(</span><span class=\"n\">mkAntiquot</span> <span class=\"s2\">\"name\"</span> <span class=\"bp\">`</span><span class=\"n\">LX.text</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">startPos</span> <span class=\"o\">:=</span> <span class=\"n\">s.pos</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">takeWhile1Fn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.isAlphanum</span> <span class=\"bp\">||</span> <span class=\"s2\">\"_\"</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"s2\">\"Invalid name\"</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"bp\">;</span>\n    <span class=\"n\">mkNodeToken</span> <span class=\"bp\">`</span><span class=\"n\">LX.text</span> <span class=\"n\">startPos</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">labelmatcher_aux</span>\n<span class=\"n\">syntax</span> <span class=\"n\">name</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">strLit</span> <span class=\"o\">:</span> <span class=\"n\">labelmatcher_aux</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">labelmatcher_aux</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">key</span><span class=\"o\">:</span><span class=\"n\">name</span><span class=\"bp\">=$</span><span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">({</span><span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">key</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getAtomVal</span><span class=\"bp\">!</span><span class=\"o\">),</span> <span class=\"n\">value</span><span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">value</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>I wrote the parser to match valid keys (alphanumerical and underscores) The bit <code>$(quote key[0].getAtomVal!)</code> is no longer valid in nightly-2023-05-06. By trial and error I changed it <code>$(quote key.raw.getAtomVal)</code> which compiles again but now key is always an empty string <code>\"\"</code>. How can I use the \"value\" of my parser in the macro rules?</p>",
        "id": 356655305,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1683540866
    },
    {
        "content": "<p>The <code>[0]</code> is still necessary, it should be <code>key.raw[0].getAtomVal!</code></p>",
        "id": 356663488,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683543218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198384\">Björn Fischer</span> has marked this topic as resolved.</p>",
        "id": 357220422,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683710766
    }
]