[
    {
        "content": "<p>I found the following code producing an error around <code>ite</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">:=</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span>  <span class=\"c1\">-- OK</span>\n<span class=\"k\">#eval</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">:=</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span>     <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  ite ?m.2520 (1 = 2)</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  1 = 2</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Prop : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ‚Ñï : Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Could you tell me what happens here?<br>\nI'd also like to know the best way to specify an instance of <code>Decidable c</code> to <code>ite</code> or <code>if-then-else</code>.</p>",
        "id": 345033779,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1679983568
    },
    {
        "content": "<p>The best way to specify an instance of <code>Decidable c</code> is to make sure the type class inference system knows about it and then let it do the work for you.</p>",
        "id": 345040266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679985809
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite#doc\">docs4#ite</a></p>",
        "id": 345040298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679985821
    },
    {
        "content": "<p>I don't understand the error though</p>",
        "id": 345040757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679985977
    },
    {
        "content": "<p>My best guess is, since in the second eval you don't have a continuous sequence of <code>(_ := _)</code> named args, it gets confused about the argument order?</p>",
        "id": 345052599,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1679989861
    },
    {
        "content": "<p>This has to do with the way that you're specifying <code>\\alpha</code> which is implicit. The '... is expected to have type \\N'  means that it's trying to resolve it as the first argument following the instance of <code>Decidable</code>.</p>\n<p>E.g. this will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">inferInstance</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 345052882,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1679989926
    },
    {
        "content": "<p>Right -- that's what's happening, and that's a workaround, but at the end of the day this still looks like a bug? This doesn't work either (same error):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">:=</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 345056289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679990888
    },
    {
        "content": "<p>Thanks for a lot of comments.<br>\nIn contrast to the ordinary math project, I have several instances of <code>Decidable p</code> which depend on different sets of axioms. So it is convenient having a way to specify instances explicitly in addition to the type-class inference system. <span class=\"user-mention\" data-user-id=\"364929\">@Franti≈°ek Silv√°≈°i ü¶â</span> 's method looks neat to me; moving from Lean 3, I have nearly forgot about <code>@</code> notation.</p>",
        "id": 345077617,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1679996832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> <a href=\"#narrow/stream/270676-lean4/topic/Specifying.20instance.20for.20ite.2E/near/345052599\">said</a>:</p>\n<blockquote>\n<p>My best guess is, since in the second eval you don't have a continuous sequence of <code>(_ := _)</code> named args, it gets confused about the argument order?</p>\n</blockquote>\n<p>That makes sense, but writing <code>(h:=_)</code> first looks ugly to me since it is a dependent argument.</p>",
        "id": 345078584,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1679997111
    },
    {
        "content": "<p>Besides, the error message doesn't make sense or at least isn't helpful.</p>",
        "id": 345079375,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1679997332
    },
    {
        "content": "<p>Here is MWE from scratch.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsThree</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">inst3</span> <span class=\"o\">:</span> <span class=\"n\">IsThree</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsThree</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"mi\">3</span>                         <span class=\"c1\">-- OK</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span>      <span class=\"c1\">-- error</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"mi\">3</span>      <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  test ?m.10077</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  ‚Ñï</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"c1\">-- OK</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">inst3</span><span class=\"o\">)</span>                <span class=\"c1\">-- OK (?!)</span>\n</code></pre></div>\n<p>I was surprised that the last one compiles successfully. Is it an expected behavior?</p>",
        "id": 345085076,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1679998846
    }
]