[
    {
        "content": "<p>is it possible to configure a <code>Coe</code> instance such that it continues instance search even with metavariables?</p>\n<p>To de-XY, here's a little example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ParseRes</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Parser</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String.Pos</span> <span class=\"bp\">→</span> <span class=\"n\">ParseRes</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ofString</span> <span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">Parser</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ofString</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.coe</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">parser</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">seq</span> <span class=\"s2\">\"hi\"</span> <span class=\"s2\">\"bye\"</span>\n</code></pre></div>\n<p>I could make a class specifically for \"coercions to <code>Parser</code>\" where the type arg is marked outParam and all my combinators take a parameter of that type, but it seems a bit unwieldy</p>",
        "id": 327692932,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676351390
    },
    {
        "content": "<p>In Haskell (GHC) you could write something like <code>instance (a ~ Unit) =&gt; FromString (Parser a)</code> to get the behavior you want</p>",
        "id": 327699213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676355758
    },
    {
        "content": "<p>:/ hoping there's a lean replacement for that; otherwise I'll have to go with the custom CoeToParser class</p>",
        "id": 327710534,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676361336
    }
]