[
    {
        "content": "<p>Earlier today I saw some people using block arguments and single-statement <code>do</code> in Haskell to provide a structured way of providing arguments to a function as if they were bulleted lists. This doesn't work in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.map</span>\n  <span class=\"k\">do</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">do</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is because Lean demands a monad even if the desugaring of the <code>do</code> doesn't require it.</p>\n<p>However, macros allow me to directly add this feature, rather than repurposing <code>do</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Provide a number of arguments as an indented bulleted list</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">many1Indent</span><span class=\"o\">(</span><span class=\"s2\">\"•\"</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">•</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"n\">List.map</span> <span class=\"k\">with</span>\n    <span class=\"bp\">•</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">•</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It's also possible to use bullet points for other related constructors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"List\"</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">many1Indent</span><span class=\"o\">(</span><span class=\"s2\">\"•\"</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">List</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">•</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"n\">List.map</span> <span class=\"k\">with</span>\n    <span class=\"bp\">•</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">•</span> <span class=\"n\">List</span> <span class=\"k\">with</span>\n      <span class=\"bp\">•</span> <span class=\"mi\">1</span>\n      <span class=\"bp\">•</span> <span class=\"mi\">2</span>\n      <span class=\"bp\">•</span> <span class=\"mi\">88</span>\n</code></pre></div>\n<p>I thought this was a fun little demo :-) It's probably too obscure for real code, but when list elements or function arguments are themselves large expressions and a <code>let</code> would for some reason make it harder to read, something like this starts getting tempting.</p>",
        "id": 384908572,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1692046625
    },
    {
        "content": "<p>seems like a fantastic gateway drug leading to structured editors <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 384919508,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692051165
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Id#doc\">docs#Id</a> ? It exists precisely to be able to make a monad out of something that isn’t to be able to use do notation. I think you just have to use <code>Id.run do</code> instead of <code>do</code></p>",
        "id": 385053197,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692090888
    },
    {
        "content": "<p>But that doesn’t really help here since you’d need parentheses</p>",
        "id": 385053440,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692090942
    },
    {
        "content": "<p>The other option is to simply use <code>&lt;|</code></p>",
        "id": 385053709,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692090995
    },
    {
        "content": "<p>This is lovely.</p>",
        "id": 386114860,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692458043
    },
    {
        "content": "<p>I'd argue that this would make more sense with <code>·</code> as the symbol, as this is already used for bullets within proofs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Provide a number of arguments as an indented bulleted list</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">many1Indent</span><span class=\"o\">(</span><span class=\"s2\">\"·\"</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">·</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"n\">List.map</span> <span class=\"k\">with</span>\n    <span class=\"bp\">·</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 386122391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692461839
    },
    {
        "content": "<p>It would be neat if something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>\n  <span class=\"n\">List.map</span> <span class=\"k\">with</span>\n    <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>were allowed as term version of the syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or as notation for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 386123596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692462558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Fun.20macro.20-.20bulleted.20argument.20lists/near/386122391\">said</a>:</p>\n<blockquote>\n<p>I'd argue that this would make more sense with <code>·</code> as the symbol, as this is already used for bullets within proofs</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Provide a number of arguments as an indented bulleted list</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">many1Indent</span><span class=\"o\">(</span><span class=\"s2\">\"·\"</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">·</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"n\">List.map</span> <span class=\"k\">with</span>\n    <span class=\"bp\">·</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I would love this, especially if it could help eliminate some parentheses.  A lot of the time I have (term-mode) code as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Or.elim</span> <span class=\"n\">p</span>\n  <span class=\"o\">(</span><span class=\"n\">complicated</span>\n    <span class=\"n\">stuff</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">more_complicated</span>\n    <span class=\"n\">stuff</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and getting lost in parentheses. It is worse when I have more than two arguments.  If I could replace this with the dot, that would be great.  Unfortunately, when I add your code to my file, I get hit with tons of errors of the form <code>expected ·</code> in <code>match</code> statements.</p>\n<p>Any ideas how to fix this error, and if some precedence rule magic can make it work like parentheses?</p>",
        "id": 386570726,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692698026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> , neat! Have you been at the GHC Implementors Workshop 2017? I gave a lightning talk asking for that feature in Haskell (see <a href=\"https://www.joachim-breitner.de/blog/730-Less_parentheses\">https://www.joachim-breitner.de/blog/730-Less_parentheses</a>, “Less parentheses 1: Bulleted argument lists”). It’s certainly on my list of syntactic ideas to consider if I ever get to write a new PL.</p>",
        "id": 386578756,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692700913
    },
    {
        "content": "<p>One way you can avoid the parentheses is using tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">Or.elim</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"c1\">-- or apply Or.elim p</span>\n<span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">complicated</span> <span class=\"n\">stuff</span>\n<span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">more_complicated</span> <span class=\"n\">stuff</span>\n</code></pre></div>",
        "id": 386579117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692701004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Fun.20macro.20-.20bulleted.20argument.20lists/near/386579117\">said</a>:</p>\n<blockquote>\n<p>One way you can avoid the parentheses is using tactics:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">Or.elim</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"c1\">-- or apply Or.elim p</span>\n<span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">complicated</span> <span class=\"n\">stuff</span>\n<span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">more_complicated</span> <span class=\"n\">stuff</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is neat, but using it for arbitrary functions (rather than just theorems) becomes cumbersome; I'd like to have this bulleted argument list for all applications to avoid parentheses.</p>",
        "id": 386583306,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692702555
    },
    {
        "content": "<p>I definitely use <code>refine</code> in this way, even for definitions, mainly to avoid awkwardly nested large subterms by breaking them out into separate blocks</p>",
        "id": 386657588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692724084
    },
    {
        "content": "<p>bad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span>\n    <span class=\"n\">some</span>\n    <span class=\"n\">tactics</span>\n    <span class=\"n\">here</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">some</span>\n    <span class=\"n\">other</span>\n    <span class=\"n\">tactics</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>good:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">some</span>\n    <span class=\"n\">tactics</span>\n    <span class=\"n\">here</span>\n  <span class=\"bp\">·</span> <span class=\"n\">some</span>\n    <span class=\"n\">other</span>\n    <span class=\"n\">tactics</span>\n</code></pre></div>",
        "id": 386658234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692724313
    },
    {
        "content": "<p>Does that mean that <code>refine</code> works as a term as well, not only in tactic mode? Or did you forget a <code>by</code>?</p>",
        "id": 386659025,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692724574
    },
    {
        "content": "<p>forgot a <code>by</code></p>",
        "id": 386664699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692726230
    },
    {
        "content": "<p>But do you also use it for normal programming?  That is what I mean by \"general functions\"; do you go to tactic mode in order to invoke functions with complicated arguments?  I am not saying it's wrong, it just feels a bit too much to me.</p>",
        "id": 386682766,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692733956
    },
    {
        "content": "<p>Yes, sometimes. I would need a more realistic example to evaluate for sure</p>",
        "id": 386683498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692734284
    },
    {
        "content": "<p>I definitely try to avoid large subexpressions, but in a do block I would more likely accomplish that by binding the subexpressions to <code>let</code> binders</p>",
        "id": 386683649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692734362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Fun.20macro.20-.20bulleted.20argument.20lists/near/386578756\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> , neat! Have you been at the GHC Implementors Workshop 2017? I gave a lightning talk asking for that feature in Haskell (see <a href=\"https://www.joachim-breitner.de/blog/730-Less_parentheses\">https://www.joachim-breitner.de/blog/730-Less_parentheses</a>, “Less parentheses 1: Bulleted argument lists”). It’s certainly on my list of syntactic ideas to consider if I ever get to write a new PL.</p>\n</blockquote>\n<p>I was not there, unfortunately, but you seem to have made an impact :-)</p>\n<p>It's beginning to sound like this quick hack of a macro deserves some more thought, to properly account for implicit arguments and by-name arguments, and then it could even end up being useful!</p>",
        "id": 386820213,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1692789665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> / <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> / <span class=\"user-mention\" data-user-id=\"577163\">@Ioannis Konstantoulas</span>  Here is version that supports by-name arguments and function sugar:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Parser.Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funTk</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">Lean.Parser.unicodeSymbol</span> <span class=\"s2\">\" ↦ \"</span> <span class=\"s2\">\" =&gt; \"</span>\n<span class=\"n\">syntax</span> <span class=\"n\">funBulletArg</span> <span class=\"o\">:=</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"n\">funBinder</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">typeSpec</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">funTk</span><span class=\"o\">)</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">namedBulletArg</span> <span class=\"o\">:=</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span><span class=\"o\">)</span> <span class=\"n\">term</span>\n\n<span class=\"sd\">/-- An argument written in bullet form. -/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">bulletArg</span> <span class=\"o\">:=</span> <span class=\"s2\">\"· \"</span> <span class=\"o\">(</span><span class=\"n\">namedBulletArg</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">funBulletArg</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Provide a number of arguments as an indented bulleted list. -/</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">lead</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\" with' \"</span> <span class=\"n\">ppIndent</span><span class=\"o\">(</span><span class=\"n\">many1Indent</span><span class=\"o\">(</span><span class=\"n\">ppLine</span> <span class=\"n\">bulletArg</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">with</span><span class=\"bp\">'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">·</span> <span class=\"bp\">$</span><span class=\"n\">as</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">as.foldlM</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">a.raw.getKind</span>\n      <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">namedBulletArg</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">namedBulletArg</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwErrorAt</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"ill-formed {k}\"</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">funBulletArg</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">funBulletArg</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwErrorAt</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"ill-formed {k}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">a.raw</span><span class=\"o\">⟩))</span> <span class=\"c1\">-- term</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"n\">List.map</span> <span class=\"k\">with</span><span class=\"bp\">'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">·</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It currently has to use <code>with'</code> to avoid clashing with <code>match</code>'s, but this could be solved with a change in core that uses <code>withForbiddenTk</code> in <code>match</code> (and <code>change</code>).</p>",
        "id": 386951226,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692825171
    },
    {
        "content": "<p>I'd argue it should be <code>f x := x</code> not <code>f x =&gt; x</code>, else it's inconsistent with <code>where</code> and <code>let</code> syntax</p>",
        "id": 386951525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692825340
    },
    {
        "content": "<p>That's pretty great!</p>\n<p>I'd tend to agree with <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> about the color of the velocipede storage facility.</p>",
        "id": 386952207,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1692825643
    },
    {
        "content": "<p>to be fair, lean is quite inconsistent about <code>:=</code> vs <code>=&gt;</code> elsewhere in the grammar anyway</p>",
        "id": 386952548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692825809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> / <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> In that case, here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Parser.Term</span>\n\n<span class=\"sd\">/-- A bullet argument: A nameable argument with sugar for functions. -/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">bulletArg</span> <span class=\"o\">:=</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"n\">funBinder</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">typeSpec</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\" := \"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">term</span>\n\n<span class=\"sd\">/-- Provide a number of arguments as an indented bulleted list. -/</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">lead</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\" with' \"</span> <span class=\"n\">ppIndent</span><span class=\"o\">(</span><span class=\"n\">many1Indent</span><span class=\"o\">(</span><span class=\"n\">ppLine</span> <span class=\"s2\">\"· \"</span> <span class=\"n\">bulletArg</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">with</span><span class=\"bp\">'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">·</span> <span class=\"bp\">$</span><span class=\"n\">as</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">as.foldlM</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bulletArg</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span><span class=\"bp\">%$</span><span class=\"n\">dtk</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"n\">bs.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n          <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">:=</span><span class=\"bp\">%$</span><span class=\"n\">dtk</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"k\">else</span>\n          <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">ty</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n            <span class=\"k\">match</span> <span class=\"n\">ty</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">typeSpec</span><span class=\"bp\">|</span> <span class=\"o\">:</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">:=</span><span class=\"bp\">%$</span><span class=\"n\">dtk</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">)))</span>\n            <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwErrorAt</span> <span class=\"n\">ty</span> <span class=\"s2\">\"ill-formed type specifier\"</span>\n          <span class=\"k\">else</span>\n            <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">:=</span><span class=\"bp\">%$</span><span class=\"n\">dtk</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bulletArg</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwErrorAt</span> <span class=\"n\">a</span> <span class=\"s2\">\"ill-formed bullet argument\"</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"n\">List.map</span> <span class=\"k\">with</span><span class=\"bp\">'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">·</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 386952702,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692825886
    },
    {
        "content": "<p>Now we just need to hope this beast never escapes the lab :⁠-⁠)</p>",
        "id": 386953480,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1692826238
    },
    {
        "content": "<p>Note that this syntax could be made simpler by dropping the bullet without introducing significant ambiguity (due to its already space-sensitive nature).</p>",
        "id": 386955325,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692827314
    },
    {
        "content": "<p>aside: I would really like <code>(f x := x + 1)</code> to be legal for regular optional args as well</p>",
        "id": 386958440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692829324
    },
    {
        "content": "<p>that comes up in particular for <code>(motive := _)</code> args</p>",
        "id": 386958461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692829340
    }
]