[
    {
        "content": "<p>Consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    t: List Nat</span>\n<span class=\"cm\">    x: Nat</span>\n<span class=\"cm\">    xs: List Nat</span>\n<span class=\"cm\">    h✝: t = x :: xs</span>\n<span class=\"cm\">    ⊢ Unit</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the second branch, <code>t@(x :: xs)</code>, do we have some convenient way to name the hypothesis <code>h✝: t = x :: xs</code>?</p>",
        "id": 408007147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702574057
    },
    {
        "content": "<p>yes we do</p>",
        "id": 408008452,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702574482
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    t: List Nat</span>\n<span class=\"cm\">    x: Nat</span>\n<span class=\"cm\">    xs: List Nat</span>\n<span class=\"cm\">    h✝: t = x :: xs</span>\n<span class=\"cm\">    ⊢ Unit</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408008616,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702574532
    },
    {
        "content": "<p>no, that doesn't answer my actual question.</p>",
        "id": 408008697,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702574563
    },
    {
        "content": "<p>That gives a hypothesis <code>h : k = x :: xs</code>, not <code>t = x :: xs</code>.</p>",
        "id": 408008735,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702574578
    },
    {
        "content": "<p>Oh okay. Apologies for misunderstanding the question</p>",
        "id": 408009044,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702574684
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover/lean4/blob/d279a4871fa641f9bc423404cf2797fd3c26426e/src/Lean/Elab/PatternVar.lean#L149\">the answer is no</a></p>",
        "id": 408015930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702577117
    },
    {
        "content": "<p>Oh, the comment is wrong!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408016140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702577181
    },
    {
        "content": "<p>aha!</p>",
        "id": 408016184,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702577201
    },
    {
        "content": "<p>(guessed from <a href=\"https://github.com/leanprover/lean4/blob/d279a4871fa641f9bc423404cf2797fd3c26426e/src/Lean/Parser/Term.lean#L672-L676\">here</a>)</p>",
        "id": 408016262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702577235
    },
    {
        "content": "<p>Comment is fixed in <a href=\"https://github.com/leanprover/lean4/pull/3073\">lean4#3073</a></p>",
        "id": 408016908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702577472
    },
    {
        "content": "<p>I've seen plenty of <code>this</code> but this is the first time I've seen <code>th@t</code>. Oh, sorry, <code>t@ht</code>.</p>",
        "id": 408019401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702578456
    },
    {
        "content": "<p>I'm happy such a syntax exists, but my first guess would have been <code>ht:t@(x :: xs)</code>.</p>",
        "id": 408022052,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702579502
    },
    {
        "content": "<p>What does <code>@</code> mean in general? I can't really parse it with <code>:</code> in my mental model <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 408504254,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702864659
    },
    {
        "content": "<p>BTW, what's the rationale behind these equalities no longer being definitional? In Lean 3, it was possible to use <code>t</code> as a short name for <code>x :: xs</code>.</p>",
        "id": 408505387,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702865189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Naming.20equality.20hypothesis.20in.20match.20branch/near/408504254\">said</a>:</p>\n<blockquote>\n<p>What does <code>@</code> mean in general? I can't really parse it with <code>:</code> in my mental model <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n</blockquote>\n<p>In patterns, <code>@</code> lets you name terms while still destructuring them: <code>| a@(x :: xs) =&gt; body</code> matches <code>x :: xs</code> and binds <code>x</code> and <code>xs</code> as usual, but also gives the whole thing the name <code>a</code>.</p>\n<p>That’s why this syntax is weird: you’d expect <code>t@ht : x :: xs</code> to name…just <code>ht</code>, I suppose? Even <code>t@(ht : x :: xs)</code> would look wrong, since <code>t</code> is the name for <code>x :: xs</code>, not some <code>ht</code>. (And <code>ht</code> doesn’t really have type <code>x :: xs</code>, of course, so we’re using a lot of notation differently here.)</p>",
        "id": 408521298,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702871174
    }
]