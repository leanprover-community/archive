[
    {
        "content": "<p>Consider the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fIsZero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">fIsZero</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"c1\">-- failed to synthesize instance</span>\n  <span class=\"n\">Foo</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>We've just defined an instance of <code>Foo Nat</code> by providing <code>x</code>, but <code>fIsZero</code> can't see it.</p>\n<p>How do we get something like <code>fIsZero</code> to use the <code>Foo α</code> we've just defined? Is there a better option than just \"precariously\" inlining an instance of <code>Foo Nat</code> which happens to be equal to the one we're defining?</p>",
        "id": 341613654,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678763986
    },
    {
        "content": "<p>you could do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">true</span><span class=\"o\">⟩</span>\n  <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">fIsZero</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 341614037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678764263
    },
    {
        "content": "<p>Nice, thanks!</p>",
        "id": 341617428,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678766878
    },
    {
        "content": "<p>Don't you want to use <code>letI</code> so that it actually gets inlined?</p>",
        "id": 341622486,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678770687
    },
    {
        "content": "<p>Ok, sounds good—but just wondering, what's the actual difference, there? Why would I want <code>let</code> to <em>not</em> inline sometimes? (Or when can it not?)</p>",
        "id": 341624041,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678771968
    },
    {
        "content": "<p>Usually you don't want <code>let</code> to inline, to avoid computing something more than once, or to avoid blowing up the term size.</p>",
        "id": 341631714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678776207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/Use.20just-defined.20instance.20of.20substructure.20in.20superstructure.3F/near/341622486\">said</a>:</p>\n<blockquote>\n<p>Don't you want to use <code>letI</code> so that it actually gets inlined?</p>\n</blockquote>\n<p>Yes, <code>letI</code> would be better here. I only used <code>let</code> because I wasn't sure whether Thomas wanted to rely on std4 (which is where <code>letI</code> is defined)</p>",
        "id": 341846949,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678811303
    }
]