[
    {
        "content": "<p>In the following simple example, <code>linarith</code> fails to prove the goal, and the provided proof term works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">convex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_nonneg</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg_of_le</span> <span class=\"n\">ht₂</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"n\">ht₁</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any ideas how to tell Lean what to do automatically?</p>",
        "id": 358552316,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1684178321
    },
    {
        "content": "<p>This is not in scope for <code>linarith</code></p>",
        "id": 358552480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684178371
    },
    {
        "content": "<p><code>lin</code> in <code>linarith</code> means linear.</p>",
        "id": 358552520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684178381
    },
    {
        "content": "<p>positivity might have a go at it, though it's still missing some tricks on mathlib 4</p>",
        "id": 358552659,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684178413
    },
    {
        "content": "<p>Ah thanks, <code>positivity</code> works once we <code>have := sub_nonneg_of_le ht₂</code>.</p>",
        "id": 358552706,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1684178434
    },
    {
        "content": "<p>Thanks, I assumed <code>linarith</code> could handle basically what <code>ring</code> could for some reason.</p>",
        "id": 358552751,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1684178452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> has marked this topic as resolved.</p>",
        "id": 358553078,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684178558
    }
]