[
    {
        "content": "<p>The bound-check of <code>Array.anyMUnsafe</code> and <code>Array.anyM</code> are inconsistent. As a result, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">any_t</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">any</span> <span class=\"n\">id</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">any_f</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">any</span> <span class=\"n\">id</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">native_decide</span>\n</code></pre></div>\n<p>which together imply <code>False</code>.</p>\n<p>The bug seems to have already been filed in <a href=\"https://github.com/leanprover/lean4/issues/1921\">lean4#1921</a> about 10 months ago. Any problem? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 395394651,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1696670238
    },
    {
        "content": "<p>(For the sake of any innocent bystanders, note that <code>#print axioms any_f</code> includes <code>Lean.ofReduceBool</code>, which tells you that you've taken the guard-rails off and are calculating rather than proving.)</p>",
        "id": 395513136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696755996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.2EanyM.20is.20inconsistent/near/395513136\">said</a>:</p>\n<blockquote>\n<p>(For the sake of any innocent bystanders, note that <code>#print axioms any_f</code> includes <code>Lean.ofReduceBool</code>, which tells you that you've taken the guard-rails off and are calculating rather than proving.)</p>\n</blockquote>\n<p>To emphasize, the documentation warns of the danger appropriately loudly: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Lean.ofReduceBool\">https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Lean.ofReduceBool</a></p>",
        "id": 395706315,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696860133
    },
    {
        "content": "<blockquote>\n<p>Warning: by using this feature, the Lean compiler and interpreter become part of your trusted code base. </p>\n</blockquote>\n<p>This reads to me as 'we're fairly sure it's correct but we're not sure', not 'you can definitely prove False'</p>",
        "id": 395715178,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696862770
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2641\">lean4#2641</a> fixes <a href=\"https://github.com/leanprover/lean4/pull/1921\">lean4#1921</a>, using Mario's suggestion.</p>",
        "id": 395718942,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696863891
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>. Maybe I could make that PR, but I just wanted to know why the fix was not created beforehand.</p>",
        "id": 395720196,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1696864283
    },
    {
        "content": "<p>Just that no one had the time, I think.</p>",
        "id": 395720292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696864314
    },
    {
        "content": "<p>I thought so. Sorry for bothering you all.</p>",
        "id": 395720623,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1696864421
    },
    {
        "content": "<p>Not at all! Your post prompted me to do it.</p>",
        "id": 395720883,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696864520
    },
    {
        "content": "<p>You forgot to write the most important corollary!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">FLT</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"k\">have</span> <span class=\"n\">abracadabra</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">any</span> <span class=\"n\">id</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">·</span> <span class=\"n\">native_decide</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">abracadabra</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 395722589,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696865071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.2EanyM.20is.20inconsistent/near/395715178\">said</a>:</p>\n<blockquote>\n<p>This reads to me as 'we're fairly sure it's correct but we're not sure', not 'you can definitely prove False'</p>\n</blockquote>\n<p>It is ideally correct insofar as the code you are using is expected to be implemented correctly (thus <code>anyM</code> was a bug that needing fixing). However,  in general, it is easy to forcefully derive a <code>False</code> from <code>native_decide</code> on arbitrary user code. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">@[</span><span class=\"n\">implemented_by</span> <span class=\"n\">one</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_ne_eq_one</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">≠</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n  <span class=\"n\">contradiction</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">zero_ne_eq_one</span>\n <span class=\"c1\">-- zero_ne_eq_one' depends on axioms: [Lean.ofReduceBool]</span>\n</code></pre></div>",
        "id": 396007426,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696999411
    },
    {
        "content": "<p>Thus, proofs using depending on <code>native_decide</code> and its axiom (i.e., <code>ofReduceBool</code>) from untrusted users can be suspect.</p>",
        "id": 396007681,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696999609
    },
    {
        "content": "<p>I have on the todo list a mechanism to collect up the <code>implemented_by</code> and <code>extern</code> declarations used by a lean function, which should help address this issue</p>",
        "id": 396008336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697000046
    },
    {
        "content": "<p>Does that mean uses of <code>Array</code> are to be deprecated in theorem proving scene?</p>",
        "id": 396025753,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697008774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433695\">@Jun Yoshida</span> I am not sure quite what you are referring too, but it is certainly possible to prove things about <code>Array</code> soundly without using <code>native_decide</code> (that is what the reference implementations are designed to enable).</p>",
        "id": 396026326,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697009033
    },
    {
        "content": "<p>Yes, but a lot of basic functions on <code>Array</code>, including the constructor <code>Array.mk</code>, have <code>implemented_by</code> attributes. The arguments above seem to imply that it is hard to think of such functions as a part of trusted codebase.</p>",
        "id": 396026910,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697009268
    },
    {
        "content": "<p>Using arrays in proofs without <code>native_decide</code> is just using <code>List</code> with a slightly different API.</p>",
        "id": 396027380,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697009475
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span>  notes, <code>implemented_by</code> is only really an issue in the context of <code>native_decide</code>. Without it, one is just dealing with the Lean <code>Expr</code> view of the <code>Array</code>, which is just a wrapper around a <code>List</code>. <code>implemented_by</code> does not impact this level (<code>implemented_by</code> is for codegen).</p>",
        "id": 396027671,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697009623
    },
    {
        "content": "<p>Ah, that's right. Thank you for pointing it out.</p>",
        "id": 396028760,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1697010061
    },
    {
        "content": "<p>I am confused; if a mathematician (non-programmer) asks me if arrays are ok in their proofs, what should I tell them?  More importantly, what if they don't ask me?</p>",
        "id": 396063198,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697022398
    },
    {
        "content": "<p>The answer is that <code>native_decide</code> is placing trust in a lot more things (as it says in the documentation), and one of those things is that every <code>implemented_by</code> attribute is correct (in the sense that the functions really coincide everywhere).</p>",
        "id": 396063673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697022580
    },
    {
        "content": "<p>There is no reason to single out <code>Array</code>, as demonstrated by Mac's <a href=\"#narrow/stream/270676-lean4/topic/Array.2EanyM.20is.20inconsistent/near/396007426\">post above</a> which doesn't mention it</p>",
        "id": 396063801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697022621
    },
    {
        "content": "<p>My example is meant to demonstrate the level of question a non-lean expert would ask, and the kind of concern they would display.  The answer you give <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> is completely opaque to them: what depends, directly or indirectly, on <code>native_decide</code>?  Is that \" <code>native_decide</code>\"  a unique thing we need to keep in mind when writing proofs, or are there other things that compromise soundness?  How do we know?</p>",
        "id": 396064239,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697022807
    },
    {
        "content": "<p>I think the key thing is to have Mario's tool, because then you can inspect your trusted code base.</p>",
        "id": 396064324,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697022842
    },
    {
        "content": "<p>If you care only about mathematics, then you probably want to completely avoid <code>native_decide</code> (as it pulls in  the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ofReduceBool#doc\">docs#Lean.ofReduceBool</a> axiom)</p>",
        "id": 396064467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697022879
    },
    {
        "content": "<p>In general if you want to know whether you can trust a proof, use <code>#print axioms</code>. If it prints anything other than <code>choice, propext, Quot.sound</code>, then you have to think very carefully about whether you trust the extra things in the list.</p>",
        "id": 396064823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697023001
    },
    {
        "content": "<p>In light of the <a href=\"#narrow/stream/270676-lean4/topic/soundness.20bug.3A.20native_decide.20leakage\">recent thread</a>, I sadly see we need to be more careful than relying on <code>#print axioms</code>.</p>",
        "id": 396065117,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697023114
    },
    {
        "content": "<p>I think in a previous thread we saw that <code>#print axioms</code> is not foolproof against a malicious attacker; but I think it is in combination with <code>leanchecker</code></p>",
        "id": 396065823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697023372
    },
    {
        "content": "<p>Nice; Scott just corrected a concern I had about <code>leanchecker</code>.  I think when <code>leanchecker</code> is completely ready, we should emphasize its existence and role to mathematicians.</p>",
        "id": 396066124,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697023488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.2EanyM.20is.20inconsistent/near/396066124\">said</a>:</p>\n<blockquote>\n<p>I think when <code>leanchecker</code> is completely ready, we should emphasize its existence and role to mathematicians.</p>\n</blockquote>\n<p>I strongly disagree with this. All this discussion is completely irrelevant to mathematics. This recent obsession comes purely from the new software engineering and computer science side of the community and is only noise from the mathematical point of view. All those issues simply do not arise on the mathematics side. I know you are also interested in mathematics, but \"porting shell scripts\" is not part of mathematics.</p>",
        "id": 396078492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697027357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.2EanyM.20is.20inconsistent/near/396063198\">said</a>:</p>\n<blockquote>\n<p>if a mathematician (non-programmer) asks me if arrays are ok in their proofs</p>\n</blockquote>\n<p>How would that happen?? How would they meet arrays?</p>",
        "id": 396078680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697027410
    },
    {
        "content": "<p>This confuses me so much!  Isn't <code>leanchecker</code> supposed to be the thing that verifies the veracity of proofs?? What the hell am I missing now!</p>\n<p>Never mind, I am a little too angry now to talk.</p>",
        "id": 396079994,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1697027883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.2EanyM.20is.20inconsistent/near/396079994\">said</a>:</p>\n<blockquote>\n<p>This confuses me so much!  Isn't <code>leanchecker</code> supposed to be the thing that verifies the veracity of proofs?? What the hell am I missing now!</p>\n<p>Never mind, I am a little too angry now to talk.</p>\n</blockquote>\n<p>Yes it is but the point is that the mathematicians trust code they write themselves + code that is already in mathlib and accepted both by the maintainers and the compiler enough that this \"cheat the system\" type of stuff is a non issue from their POV</p>",
        "id": 396129006,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697042322
    },
    {
        "content": "<p>Speaking for myself, the biggest added value of formalization for me is not <em>verifying</em> maths.  I am not at all worried that some theorem that I thought was true is in fact false.</p>\n<p>For me, one of the biggest reasons for being interested in formalization is actually digitalisation, pattern finding and automation.</p>",
        "id": 396130721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697042991
    },
    {
        "content": "<p>Unlike the computer scientists we have no interest in hacking the system. We are trying to build a beautiful library of our beliefs. We're not checking our work -- this is a big misconception that some people have. We're just storing it.</p>",
        "id": 396178821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697066873
    },
    {
        "content": "<p>Could you tell more about the mission of such a library?  How will it be used in the future?</p>",
        "id": 396183161,
        "sender_full_name": "Ming Li",
        "timestamp": 1697069974
    },
    {
        "content": "<p>I have to admit I agree with Patrick's rather extreme position here. :-)</p>\n<p><code>lean4checker</code> is of course helpful if you want machine verified proofs, and for some reason have decided to trust the Lean kernel but very little else.</p>\n<p>But generally I think it is a terrible idea if we advertise to mathematicians that the <strong>point</strong> of Lean is that the computer will verify your proofs. That would be rather unappealing, and I think besides the point!</p>\n<p>The reason mathematicians should use Lean are:</p>\n<ul>\n<li>it's fun</li>\n<li>it brings mathematics and programming closer, as they always ought to have been</li>\n<li>the computer can (one day, hopefully, <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span>) actually <strong>help</strong> you do mathematics</li>\n<li>we're building a big coherent library that will enable other interesting things</li>\n<li>we sometimes learn interesting things from formalisation (if only how to Bourbaki a topic)</li>\n<li>... and the big one: Lean + Mathlib + ML might be the playground where AGI grows up, and that will be fun to watch. :-)</li>\n</ul>",
        "id": 396207260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697082158
    },
    {
        "content": "<p>I'm not intending to make any argument about the discussion, but as a rather amateur mathematician, having the computer check my proofs is one of the big appeals of Lean to me. It means I don't have to keep asking someone if my handwritten proof is correct when I am trying to learn mathematics.</p>",
        "id": 396211546,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1697084536
    },
    {
        "content": "<p>I learned about filters and hypermaps from formalization. So +1 to that point!</p>",
        "id": 396216088,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697087772
    }
]