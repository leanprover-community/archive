[
    {
        "content": "<p>Here is a very simple structure, and a <code>BEq</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- 64-bit two's complement integers -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"sd\">/-- Boolean equality -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.n</span> <span class=\"bp\">==</span> <span class=\"n\">y.n</span>\n</code></pre></div>\n<p>In working with <code>Int64</code>s, will there be a performance difference between <code>==</code> and <code>=</code>, resp. <code>bif</code> and <code>if</code>, or will the decidable equality checks get inlined away?  I started with <code>bif</code> and <code>==</code>, but I'm finding it annoying to prove stuff about the <code>bif, ==</code> version, though possibly this will go away once I build up a few extra ergonomic lemmas.  I suppose a first difference is that <code>bif</code> and <code>Bool</code> give me short-circuiting <code>&amp;&amp;</code> and <code>||</code>.</p>\n<p>Aside: I didn't do <code>deriving BEq</code> since I didn't know how to get a <code>LawfulBEq</code> instance in this case, but I am likely missing something obvious.  Automating deriving for <code>LawfulBEq</code> seems not to exist.   Here's an MWE for the issue: <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60LawfulBEq.60.20for.20automatically.20generated.20.60BEq.60/near/396675319\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60LawfulBEq.60.20for.20automatically.20generated.20.60BEq.60/near/396675319</a></p>\n<p>To add more detail, here's the kind of thing I'll be doing with this structure (not a fully closed example, but it illustrates the kind of <code>bif</code> code I'm dealing with):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The sign bit of an `Int64` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">pp_dot</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Int64.isNeg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">63</span> <span class=\"bp\">≤</span> <span class=\"n\">x.n</span>\n\n<span class=\"sd\">/-- A 64-bit fixed point number, corresponding to either</span>\n<span class=\"sd\">    1. `n * 2^s`, if `n ≠ nan`</span>\n<span class=\"sd\">    2. Arbitrary, if `n = nan` -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Fixed</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"sd\">/-- Sentinel value, indicating we don't know what the number is -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">nan</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">63</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"sd\">/-- `Fixed` addition saturates to `nan` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Fixed.add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.n</span> <span class=\"bp\">+</span> <span class=\"n\">y.n</span><span class=\"o\">⟩</span>\n  <span class=\"n\">bif</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">nan</span> <span class=\"bp\">||</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"n\">nan</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">x.n.isNeg</span> <span class=\"bp\">==</span> <span class=\"n\">y.n.isNeg</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">x.n.isNeg</span> <span class=\"bp\">!=</span> <span class=\"n\">z.n.isNeg</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">nan</span> <span class=\"k\">else</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Fixed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.add</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 396674265,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697313348
    },
    {
        "content": "<p>You can find this out quite easily on your own. If you write an example function you can see the resulting IR that gets thrown into codegen like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>in your case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">u64</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">u64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">UInt64.decEq</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_4</span>\n  <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">UInt64.decEq</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_5</span>\n<span class=\"kd\">def</span> <span class=\"n\">test._boxed</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span> <span class=\"n\">unbox</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u64</span> <span class=\"o\">:=</span> <span class=\"n\">unbox</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"n\">x_3</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">box</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_6</span>\n</code></pre></div>\n<p>we are interested in the test version which as you can see ends up using decidable equality on UInt64 in both cases.</p>",
        "id": 396676385,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697316005
    },
    {
        "content": "<p>Thank you!  I will be using <code>set_option trace.compiler.ir.result true</code> a lot (and I also didn't know about the <code>in</code> syntax).</p>",
        "id": 396676588,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697316214
    }
]