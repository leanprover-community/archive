[
    {
        "content": "<p>Hi everyone! <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and I are happy to announce the initial release of <a href=\"https://github.com/EdAyers/ProofWidgets4\">ProofWidgets4</a>, a library adding support for custom interactive extensions to the infoview using the <a href=\"https://leanprover.github.io/lean4/doc/examples/widgets.lean.html\">user widgets</a> mechanism built into Lean. Our paper covering some of the ideas behind the Lean 4 infoview and ProofWidgets4 will be presented at <a href=\"https://mizar.uwb.edu.pl/ITP2023/\">ITP 2023</a>, and a draft can be found <a href=\"https://voidma.in/assets/papers/23nawrocki_extensible_user_interface_lean_4.pdf\">here</a>.</p>\n<p>ProofWidgets4 is better shown than explained, so here are some things you can visualize and do with it:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/EdAyers/ProofWidgets4/66caee900bcd4103f9e8e7950cf02a062c91adec/doc/infoview-rbtree.png\">Display data structures symbolically</a><div class=\"message_inline_image\"><a href=\"https://raw.githubusercontent.com/EdAyers/ProofWidgets4/66caee900bcd4103f9e8e7950cf02a062c91adec/doc/infoview-rbtree.png\" title=\"Display data structures symbolically\"><img src=\"https://uploads.zulipusercontent.net/81b24c15e686229531a6a9b6c01ca36ccecaed2c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f456441796572732f50726f6f6657696467657473342f363663616565393030626364343130336639653865373935306366303261303632633931616465632f646f632f696e666f766965772d7262747265652e706e67\"></a></div></li>\n<li><a href=\"/user_uploads/3121/T3b80GNtQ9vX-D-NGi3c37_L/infoview-diags.png\">Work with commutative diagrams</a><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/T3b80GNtQ9vX-D-NGi3c37_L/infoview-diags.png\" title=\"Work with commutative diagrams\"><img src=\"/user_uploads/3121/T3b80GNtQ9vX-D-NGi3c37_L/infoview-diags.png\"></a></div></li>\n<li><a href=\"/user_uploads/3121/FIOkQi6dLRxKpr5ehcTCBjHy/infoview-sets.png\">Inspect set relations</a><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FIOkQi6dLRxKpr5ehcTCBjHy/infoview-sets.png\" title=\"Inspect set relations\"><img src=\"/user_uploads/3121/FIOkQi6dLRxKpr5ehcTCBjHy/infoview-sets.png\"></a></div></li>\n<li><a href=\"/user_uploads/3121/ynfOQ-8mR8dMbmRxuq583IJA/infoview-conv.png\">Generate <code>conv</code> mode invocations</a><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ynfOQ-8mR8dMbmRxuq583IJA/infoview-conv.png\" title=\"Generate \"><img src=\"/user_uploads/3121/ynfOQ-8mR8dMbmRxuq583IJA/infoview-conv.png\"></a></div></li>\n<li>Equip interactive tactics such as <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/sagredo\">Sagredo</a> with user interfaces</li>\n</ul>\n<p>And here are some new features we added:</p>\n<ul>\n<li>Depending on ProofWidgets4 does not pull in JS build tools as a dependency by default thanks to support for cloud build caching in Lake</li>\n<li>Builtin support for JS libraries including <a href=\"https://penrose.cs.cmu.edu/\">Penrose</a> and <a href=\"https://recharts.org/en-US/\">Recharts</a></li>\n<li><code>Component Props</code> API for giving widget components Lean types</li>\n<li>JSX-like syntax so you can write what looks like HTML in Lean</li>\n<li>Dynamic loading of JS modules with <code>importWidgetModule</code> and <code>DynamicComponent</code> (which was requested <a href=\"#narrow/stream/270676-lean4/topic/generalizing.20.40.5Bwidget.5D/near/311959962\">here</a>)</li>\n<li>.. many technical improvements</li>\n</ul>\n<p>Do give it a try! We especially welcome bug reports, contributions (there are a few issues marked with 'good first issue' in the repository), and well-motivated feature requests.</p>",
        "id": 351710876,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682103598
    },
    {
        "content": "<p>Does this support using the widget to make changes to the text in the editor?</p>",
        "id": 351786920,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1682144304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, you may want to add tags <code>lean</code> and <code>lean4</code> to your repository</p>",
        "id": 351800741,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1682148670
    },
    {
        "content": "<p>I see that the lakefile does not require <code>Mathlib</code> - is it possible that we could make Mathlib depend on ProofWidgets in future?</p>",
        "id": 351858258,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682164562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4/near/351786920\">said</a>:</p>\n<blockquote>\n<p>Does this support using the widget to make changes to the text in the editor?</p>\n</blockquote>\n<p>Yeah, this part is essentially the same as with user widgets. For example the <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/66caee900bcd4103f9e8e7950cf02a062c91adec/ProofWidgets/Demos/Conv.lean\">conv demo</a> does it.</p>",
        "id": 351936028,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682189302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4/near/351858258\">said</a>:</p>\n<blockquote>\n<p>I see that the lakefile does not require <code>Mathlib</code> - is it possible that we could make Mathlib depend on ProofWidgets in future?</p>\n</blockquote>\n<p>That would be possible, yes :)</p>",
        "id": 351936172,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682189351
    },
    {
        "content": "<p>I think a PR to mathlib4 that implemented the \"Try this\" code actions via ProofWidgets would receive an enthusiastic welcome. :-)</p>\n<p>(I'm biased here, as I want ProofWidgets imported into mathlib4 so sagredo can use it.)</p>",
        "id": 351965807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682205744
    },
    {
        "content": "<p>From the side of the people who didn't write sagredo, I too want those fancy widgets in mathlib!</p>",
        "id": 351966859,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682206591
    },
    {
        "content": "<p>is there any hope whatsoever for this to work in emacs?</p>",
        "id": 352082187,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1682262742
    },
    {
        "content": "<p>I guess if we embed a web browser in emacs^^</p>",
        "id": 352082293,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682262790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4/near/352082187\">said</a>:</p>\n<blockquote>\n<p>is there any hope whatsoever for this to work in emacs?</p>\n</blockquote>\n<p>A while ago I conjectured <a href=\"https://github.com/leanprover/lean4/issues/737\">a concrete plan</a> for how that could work, but so far no one has attempted an implementation, as far as I know. One disadvantage of the plan is that it's quite specific to the emacs GUI, requires native, platform-specific code for emacs-webkit, and emacs-webkit itself has not received maintenance since 2021. A potential alternative, which would even work with terminal-based emacs when the terminal emulator is running in an otherwise graphical environment, would be to spawn a separate browser window (probably electron or something like it) and orchestrate its behavior from within emacs.</p>",
        "id": 352090410,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682266047
    },
    {
        "content": "<p>Heya, this is super cool! I've been <a href=\"https://github.com/bollu/polyscope.lean/blob/master/Main.lean#L122-L126\">playing around with this</a>, and as a consumer of the library, I have one question:</p>\n<p>How do I reuse the <code>lakefile</code> scripts that builds the <code>.tsx</code> from <code>ProofWidgets4</code>? I currently have <a href=\"https://github.com/bollu/polyscope.lean/blob/master/lakefile.lean#L67-L95\">copy-pasted</a> the code for the <code>widgetJsAllTarget</code>, since I did not spend the cycles figuring out how to invoke a target (<code>widgetsJsAll</code>) from a library dependency (<code>ProofWidgets4</code>). <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> , is there a simple API to do this?</p>\n<p>I think the target <code>widgetsJsAll</code> might also benefit from being slightly more general, as IIUC, it currently hardcodes the paths for the widgets as <code>widgets/</code>.</p>",
        "id": 352612377,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1682447191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> providing nice Lake integration for building widgets is a future work item. Copy-pasting the build script is the only workable solution at the moment, unfortunately. I think a solution may require some minor additions to Lake around module facets. Contributions are always appreciated!</p>",
        "id": 352619404,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682449224
    },
    {
        "content": "<p>Having an interface to something like polyscope would be super cool!</p>\n<p>Today I have done a nice visualization of basic geometric shapes used to build finite elements. I have bunch of functions allowing to iterate over faces, the animation shows iteration over all two dimensional faces for all the basic shapes up to dimension 4.<br>\n<a href=\"/user_uploads/3121/99miAYZxfB-4ia83KWmowVz1/Peek-2023-04-25-14-55.gif\">Peek-2023-04-25-14-55.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/99miAYZxfB-4ia83KWmowVz1/Peek-2023-04-25-14-55.gif\" title=\"Peek-2023-04-25-14-55.gif\"><img src=\"/user_uploads/3121/99miAYZxfB-4ia83KWmowVz1/Peek-2023-04-25-14-55.gif\"></a></div>",
        "id": 352619530,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682449264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> where's the code? :D</p>",
        "id": 352619670,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1682449307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4/near/352619670\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> where's the code? :D</p>\n</blockquote>\n<p><a href=\"https://github.com/lecopivo/SciLean/blob/a0504d1791047192bb793cb3a22bc1e19038c9ea/examples/PrismWidget.lean\">here</a> :)</p>",
        "id": 352620200,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682449478
    },
    {
        "content": "<p>I'm trying to debug a <code>simp</code> failure in the port and I have a conjecture that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">k''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">gf</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">))))</span> <span class=\"bp\">=</span>\n<span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">k''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span>           <span class=\"n\">g</span> <span class=\"bp\">≫</span>        <span class=\"n\">gf</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span>     <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">))</span>     <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Is there any way that I can get widgets to draw me a picture? <a href=\"https://github.com/leanprover-community/mathlib4/blob/f576ac8bcdf0467a15eaf387602c61734c5523ea/Mathlib/CategoryTheory/Limits/FilteredColimitCommutesFiniteLimit.lean#L407\">here</a> is my exact problem. If we had an <code>extract_goal</code> tactic, this would be much easier to minimise. Right now I'm working on it on paper. NB CI is only failing on the build because the file has a <code>sorry</code> in it, so the import in <code>Mathlib.lean</code> fails with an error. (I couldn't figure out how to install widgets on my machine, I opened an issue).</p>",
        "id": 352637929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682456028
    },
    {
        "content": "<blockquote>\n<p>Is there any way that I can get widgets to draw me a picture?</p>\n</blockquote>\n<p>Yes, but someone would have to write a metaprogram which \"knows\" about functoriality in order to draw diagrams where the top-level terms are not directly compositions but rather compositions taken through a functor. At a very high level I think it could be an <code>@[expr_presenter]</code> that looks at the term, and if the term has <code>F.map</code> applications on both sides, strips them and draws the diagram without the <code>F</code>s, then readds the <code>F</code>s.</p>",
        "id": 352647458,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682460508
    },
    {
        "content": "<p>What even is the appropriate graphical calculus here for functors to/from cartesian products?</p>",
        "id": 352647786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682460695
    },
    {
        "content": "<p>I think in this case the morphisms are in <code>Type _</code> (i.e. functions) and are being applied to some element (<code>(y j)</code>). So one would also have to extract the relevant categorical compositions</p>",
        "id": 352647794,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682460697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4/near/352612377\">said</a>:</p>\n<blockquote>\n<p>I did not spend the cycles figuring out how to invoke a target (<code>widgetsJsAll</code>) from a library dependency (<code>ProofWidgets4</code>). <span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> , is there a simple API to do this?</p>\n</blockquote>\n<p>Unfortunately, the answer is currently a bit clunky:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">pkg</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">findPackage</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">ProofWidgets4</span> <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"s2\">\"no such package\"</span>\n<span class=\"k\">let</span> <span class=\"n\">targetName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">widgetsJsAll</span>\n<span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.findTargetConfig</span><span class=\"bp\">?</span> <span class=\"n\">targetName</span> <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"s2\">\"no such target\"</span>\n<span class=\"k\">let</span> <span class=\"n\">job</span> <span class=\"o\">:=</span> <span class=\"n\">config.getJob</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"n\">targetName</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I will wrap the target job stuff into a nice single convenience function on the package (probably <code>pkg.fetchTarget?</code>) and release it when I jump back into Lean soon (hopefully next week).</p>",
        "id": 352648874,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682461263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I noticed the ProofWidgets4 tactic keywords do not follow the snake case convention. Is that deliberate?</p>",
        "id": 352653446,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682463574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4/near/352653446\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> I noticed the ProofWidgets4 tactic keywords do not follow the snake case convention. Is that deliberate?</p>\n</blockquote>\n<p>No, that's a bug. Thanks :)</p>",
        "id": 352656077,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682464974
    },
    {
        "content": "<p>One may be pleased to know that the stanford bunny loads now :) </p>\n<p><a href=\"/user_uploads/3121/-T-ks24X-UqHNiKPUTGDtHSc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-T-ks24X-UqHNiKPUTGDtHSc/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-T-ks24X-UqHNiKPUTGDtHSc/image.png\"></a></div><p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> , couple of questions about how to use <code>ProofWidgets4</code> to render complex objects like meshes:</p>\n<ol>\n<li>\n<p>Can we save the state of the widget, such that when the user returns to the widget, the camera angle remains saved in the widget state? Right now, it seems like intra-widget state is wiped away.  Similarly, the state of the slider in the Rubik's cube example is reset when one moves the cursor away from the widget and comes back.</p>\n</li>\n<li>\n<p>I currently load meshes from disk and masquerade the <code>IO Mesh</code> as a <code>Mesh</code> <a href=\"https://github.com/bollu/polyscope.lean/blob/master/Main.lean#L160-L167\">via a terrible hack</a>:</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">polyscope.lean</span><span class=\"bp\">/</span><span class=\"n\">blob</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">Main.lean</span><span class=\"bp\">#</span><span class=\"n\">L160</span><span class=\"bp\">-</span><span class=\"n\">L167</span>\n<span class=\"c1\">-- | Actually do the IO. This incurs an `unsafe`.</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">unsafePerformIO</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">unsafeIO</span> <span class=\"n\">io</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">a</span>    <span class=\"bp\">=&gt;</span>  <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"expected io computation to never fail\"</span>\n\n<span class=\"c1\">-- | Circumvent the `unsafe` by citing an `implementedBy` instance.</span>\n<span class=\"kd\">@[implemented_by unsafePerformIO]</span>\n<span class=\"kd\">def</span> <span class=\"n\">performIO</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Inhabited.default</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bunny</span> <span class=\"o\">:</span> <span class=\"n\">MeshProps</span> <span class=\"o\">:=</span> <span class=\"n\">performIO</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">loadMeshFromOffFile</span> <span class=\"s2\">\"./data/bunny.off\"</span>\n<span class=\"bp\">#</span><span class=\"n\">html</span> <span class=\"bp\">&lt;</span><span class=\"n\">Mesh</span> <span class=\"n\">vertices</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"n\">bunny.vertices</span><span class=\"o\">}</span> <span class=\"n\">faces</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"n\">bunny.faces</span><span class=\"o\">}</span> <span class=\"bp\">/&gt;</span>\n</code></pre></div>\n<p>Is there a cleaner way to build top-level definitions that can be <code>#html</code>d? It would really great from an API perspective if I could say <code>#htmlIO</code>, which would run the <code>IO Mesh</code> and render the <code>Mesh</code> if the mesh loaded successfully, and catch the <code>IOError</code> and display the error if the computation failed.</p>",
        "id": 352933238,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1682538210
    },
    {
        "content": "<blockquote>\n<p>Can we save the state of the widget, such that when the user returns to the widget, the camera angle remains saved in the widget state?</p>\n</blockquote>\n<p>Yeah, the entire React component including its state is destroyed when it is no longer in view. Note that state <em>is</em> preserved when moving the cursor between different positions that contain the same widget (e.g. moving around in a proof where the whole proof displays a single custom goal state widget).</p>\n<p>I haven't thought about how to persist widget state beyond this; there is in general a tension between which parts of the UI are authoritative and which are \"pure functions\" of the authoritative parts. I fear that putting too much state in the UI will make it too easy to lose that state, so it is preferrable for the proof script to determine many parameters of the display. On the other hand some more transient parameters such as the collapse-state of collapsible panels, and camera angles like here, may well be worth preserving.</p>\n<p>There is no API to do that currently; we could think about adding one. As a hack you could rely on the fact that widget JS modules are loaded once and store whatever you need in a global <code>let</code> in your JS script (I haven't tested this though, so there may be some obstacle preventing it from working). Beware that if you do this, the global <code>let</code> is shared between all instances of your component if you display more than one.</p>",
        "id": 352940211,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682540646
    },
    {
        "content": "<blockquote>\n<p>Is there a cleaner way to build top-level definitions that can be <code>#html</code>d? </p>\n</blockquote>\n<p>For loading data off disk and storing it in a Lean definition, you can copy the definition of the <code>include_str</code> elaborator and make it store whichever type you care about.</p>\n<blockquote>\n<p>It would really great from an API perspective if I could say <code>#htmlIO</code></p>\n</blockquote>\n<p>I think this would become possible with a combination of <a href=\"https://github.com/leanprover/lean4/pull/1967\">lean4#1967</a> and <a href=\"https://github.com/leanprover/lean4/pull/2064\">lean4#2064</a>.</p>",
        "id": 352940870,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682540898
    },
    {
        "content": "<p>Thanks for the help!</p>\n<hr>\n<blockquote>\n<p>.As a hack ...</p>\n</blockquote>\n<p>I think I shall avoid hacks for as long as possible :D </p>\n<hr>\n<blockquote>\n<p>you can copy the definition of the <code>include_str</code> elaborator and make it store whichever type you care about.</p>\n</blockquote>\n<p>Thanks, I'll try this!</p>\n<hr>\n<blockquote>\n<p>I think this would become possible with a combination of <a href=\"https://github.com/leanprover/lean4/pull/1967\">lean4#1967</a> and <a href=\"https://github.com/leanprover/lean4/pull/2064\">lean4#2064</a>.</p>\n</blockquote>\n<p>Let me try to understand. Is it that <a href=\"https://github.com/leanprover/lean4/issues/2064\">lean4#2064</a> allows the widget to throw the error when the IO action fails, and <a href=\"https://github.com/leanprover/lean4/pull/1967\">lean4#1967</a> will give us <a href=\"https://github.com/leanprover/lean4/pull/1967/files#diff-b1a4ba9717c52758307051dfe6a90e7be8ca0ba2406ecd25afa1a938cbc3afefR31-R33\"><code>MetaEval (IO a)</code></a> instances, so I ought to be able to say <code>#html bunnyIO</code>, which can be evaluated via <code>MetaEval</code> and then rendered?</p>",
        "id": 352945038,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1682542391
    },
    {
        "content": "<blockquote>\n<p>Is it that <a href=\"https://github.com/leanprover/lean4/pull/2064\">lean4#2064</a> allows the widget to throw the error when the IO action fails, and <a href=\"https://github.com/leanprover/lean4/pull/1967\">lean4#1967</a> will give us MetaEval (IO a) instances, so I ought to be able to say #html bunnyIO, which can be evaluated via MetaEval and then rendered?</p>\n</blockquote>\n<p>The idea would be that <a href=\"https://github.com/leanprover/lean4/pull/1967\">lean4#1967</a> allows <code>MetaEval (MetaM a)</code> in such a way that messages produced using <code>logInfo</code> by the <code>MetaM</code> computation are shown as messages in the infoview, and <a href=\"https://github.com/leanprover/lean4/pull/2064\">lean4#2064</a> proposes being able to put widgets in <code>MessageData</code>. But barring all that it shouldn't be too hard, I think, to just write a <code>#htmlIo</code> elaborator without making any changes to core.</p>",
        "id": 352947134,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682543187
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Vtec234/7ecf31b2a67341558692e60a2f870853\">Here</a> is an unchecked implementation.</p>",
        "id": 352948353,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682543695
    }
]