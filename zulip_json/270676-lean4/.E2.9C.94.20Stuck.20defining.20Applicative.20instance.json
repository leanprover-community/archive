[
    {
        "content": "<p>In the FP book, there is an exercise to define a validator of type <code>Validate \\epsilon \\alpha</code> where <code>\\epsilon</code> is an appendable type, and create an Applicative instance.  My code fails and I am not sure how to tell the <code>instance</code> that I am declaring <code>\\epsilon</code> to be an Append:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Write a Validate ε α where ε is an appendable that</span>\n<span class=\"c1\">-- carries errors, and α carries results.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Validate</span>  <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Append</span> <span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ok</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- Write an Applicative instance for this Validate</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Append</span> <span class=\"n\">ε</span><span class=\"o\">]:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Validate</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ok</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This produces the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Validate</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Validate</span> <span class=\"n\">ε</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Append</span> <span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.17095</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.17094</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17094</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.17095</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>What is the correct syntax to declare the Appendable \\epsilon ?</p>",
        "id": 375551216,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1689428396
    },
    {
        "content": "<p>Without having tested it, I'd guess <code>inductive Validate (ε : Type) [Append ε] (α : Type) : Type where</code></p>",
        "id": 375551532,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689428474
    },
    {
        "content": "<p>Thank you, this works.</p>",
        "id": 375551894,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1689428569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> has marked this topic as resolved.</p>",
        "id": 375551976,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689428593
    }
]