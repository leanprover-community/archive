[
    {
        "content": "<p>When doing <code>simp</code> investigations, I found something surprising.<br>\nIn the following code snippet <code>simp</code> doesn't simplify anything (as expected), but there are two unification failures, that I thought would be lemmas excluded because of the discrimination tree.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Nat.succ_ne_self</span> <span class=\"c1\">-- this is a simp-lemma in Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>This gives three unification failures:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">eq_self</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n    <span class=\"k\">with</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"n\">Nat.succ.injEq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"n\">Nat.succ</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"bp\">?</span><span class=\"n\">n</span>\n    <span class=\"k\">with</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"n\">Nat.succ_ne_self</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"n\">Nat.succ</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">n</span>\n    <span class=\"k\">with</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>The first one makes sense to me, but why are the other two not caught by Discrimination tree considerations. <code>0 = _</code> shouldn't match the discrimination tree entries for these two lemmas, or should they?<br>\nFor convenience, here is the statement for these lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Nat.succ.injEq</span> <span class=\"c1\">-- Nat.succ.injEq (n m : Nat) : (Nat.succ n = Nat.succ m) = (n = m)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Nat.succ_ne_self</span> <span class=\"c1\">-- Nat.succ_ne_self (n : Nat) : Nat.succ n â‰  n</span>\n</code></pre></div>",
        "id": 406752028,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702039717
    },
    {
        "content": "<p>I think <code>Nat.succ</code> is considered as matching numerals, although maybe it shouldn't be considered for that particular numeral</p>",
        "id": 406771132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702045970
    },
    {
        "content": "<p>Oh, that makes sense. Probably there is some rule that <code>Nat.succ</code> and <code>OfNat.ofNat</code> fall into the same category, because the patterns overlap.</p>",
        "id": 406777154,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702047889
    }
]