[
    {
        "content": "<p>From the recent thread <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>:</p>\n<blockquote>\n<p>this is a workaround for the fact that there are two lean compilers</p>\n</blockquote>\n<p>Can someone explain some of the end-to-end details behind what is happening with the code generator? I've been able to piece things together by going to dev meetings, looking at the PR history, and scanning the compiler code base, so I have ~some idea of what's going on. However, I've never heard the \"full story\" and would appreciate any insight!</p>",
        "id": 320097286,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673196520
    },
    {
        "content": "<p>There exists a 2 part old code generator, the first part is written in C++ in <code>src/library/compiler</code>, the 2nd part is written in Lean in <code>src/Lean/Compiler/IR</code>. The Lean part implements the lambda RC part of the pipeline, most notably the garbage collection optimizations + outputting C or LLVM code based on that. This part is written in Lean due to historical reasons.</p>\n<p><code>src/Lean/Compiler/LCNF</code> is right now a reimplementation of <code>src/library/compiler</code> in Lean and better. It is not fully functional because we cannot generate actual executable code with it yet but basically all relevant parts of the old C++ part are already ported here and I do have a branch laying around that gets 90% the way there to attach the LCNF Lean implementation to the IR implementation so that we can produce executable code, we're probably gonna integrate that soon <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> Once that works we can basically drop the C++ part of the compiler.</p>\n<p>The next step from there would be to port <code>src/Lean/Compiler/IR</code> to the LCNF representation, this involves two major things:</p>\n<ol>\n<li>We will need to port the new LLVM backend that is available for the IR part right now. I don't know if we want to port the C backend that is in use right now as well.</li>\n<li>We will need to port the lambda rc optimizations</li>\n</ol>\n<p>Once we have that tackled we can also drop <code>src/Lean/Compiler/IR</code>, then the entire compiler will live in <code>src/Lean/Compiler/LCNF</code> and we can be happy at last <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 320099352,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673197902
    },
    {
        "content": "<p>Does it look something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LCNF</span> <span class=\"o\">(</span><span class=\"n\">originally</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">compiler</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">rewritten</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Compiler</span><span class=\"bp\">/</span><span class=\"n\">LCNF</span><span class=\"bp\">`;</span> <span class=\"n\">theoretically</span> <span class=\"n\">done</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">untested</span><span class=\"o\">)</span>\n<span class=\"n\">LCNF</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LCNF.IR</span> <span class=\"o\">(</span><span class=\"n\">originally</span> <span class=\"bp\">???</span><span class=\"o\">,</span> <span class=\"n\">rewritten</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span> <span class=\"n\">soon</span><span class=\"bp\">?;</span> <span class=\"n\">not</span> <span class=\"n\">done</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">soon</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"n\">afaiu</span> <span class=\"n\">Perceus</span> <span class=\"n\">is</span> <span class=\"n\">written</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"o\">)</span>\n<span class=\"n\">LCNF.IR</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LLVM</span> <span class=\"o\">(</span><span class=\"n\">originally</span> <span class=\"bp\">`</span><span class=\"n\">C</span><span class=\"bp\">/</span><span class=\"n\">C</span><span class=\"bp\">++`</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"n\">EmitC.lean</span><span class=\"bp\">`?</span><span class=\"o\">,</span> <span class=\"n\">rewritten</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"n\">EmitLLVM.lean</span><span class=\"bp\">`?;</span> <span class=\"n\">theoretically</span> <span class=\"n\">done</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 320100212,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673198466
    },
    {
        "content": "<p>What does \"porting the LLVM/C backend\" mean?</p>",
        "id": 320100329,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673198567
    },
    {
        "content": "<p>Yes it does look like that pretty much</p>\n<p>Right now <code>IR</code> supports outputting the final code as both LLVM and C, if we want to get rid off <code>IR</code> we have to reimplement that for the LCNF format.</p>",
        "id": 320100386,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673198614
    },
    {
        "content": "<p>By get rid of <code>IR</code>, do you mean removing the <code>LCNF.IR</code> type? Or is the plan to move LCNF.IR into Compiler/LCNF and reimplement it, porting the lowering/Perceus/EmitLLVM</p>\n<p>Also <code>src/runtime</code> will remain, right? Then we will link against its binaries as normal</p>",
        "id": 320101357,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673199331
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 320101454,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673199386
    },
    {
        "content": "<p>We want to drop all of the old code generator and implement it completely with the LCNF type in one pipeline and yes that involves porting perceus and EmitLLVM to LCNF.</p>\n<p>I am not aware of plans to touch the runtime, however we might end up eventually reimplementing the C++ based interpeter while we are at it.</p>",
        "id": 320101981,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673199796
    },
    {
        "content": "<p>Ah so the new pipeline should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LCNF</span>\n<span class=\"n\">LCNF</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LCNF</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"n\">phase</span><span class=\"o\">,</span> <span class=\"n\">mono</span> <span class=\"n\">phase</span><span class=\"o\">)</span>\n<span class=\"n\">LCNF</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LCNF</span> <span class=\"o\">(</span><span class=\"n\">refcounting</span> <span class=\"n\">here</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">LCNF</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LLVM</span>\n</code></pre></div>",
        "id": 320102414,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673200096
    },
    {
        "content": "<p>Yes</p>",
        "id": 320102923,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673200444
    },
    {
        "content": "<p>:O ok interesting, thank you!</p>",
        "id": 320103032,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673200547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20state.20of.20the.20code.20generator/near/320100386\">said</a>:</p>\n<blockquote>\n<p>Yes it does look like that pretty much</p>\n<p>Right now <code>IR</code> supports outputting the final code as both LLVM and C, if we want to get rid off <code>IR</code> we have to reimplement that for the LCNF format.</p>\n</blockquote>\n<p>How to use the LLVM backend?</p>",
        "id": 325726448,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675459213
    },
    {
        "content": "<p>There was a flag for it I tihnk? <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> should know</p>",
        "id": 325727796,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675459775
    },
    {
        "content": "<p>I found the flag in CMakefiles.txt. I had to manually edit those.<br>\nAfter I enabled it, what CLI flags do I have to use?</p>",
        "id": 325728866,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675460317
    },
    {
        "content": "<p><code>-DLLVM=ON</code>. Note that one needs to point to a copy of <code>llvm-config</code> that is LLVM 15.</p>",
        "id": 325729484,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675460655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20state.20of.20the.20code.20generator/near/325729484\">said</a>:</p>\n<blockquote>\n<p><code>-DLLVM=ON</code>. Note that one needs to point to a copy of <code>llvm-config</code> that is LLVM 15.</p>\n</blockquote>\n<p>The CMake flag is not public</p>",
        "id": 325729581,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675460714
    },
    {
        "content": "<p>It's not editable with <code>make edit_cache</code></p>",
        "id": 325729598,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675460726
    },
    {
        "content": "<p>I got this error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_llvm_parse_bitcode</span> <span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">file</span> <span class=\"n\">doesn't</span> <span class=\"n\">start</span> <span class=\"k\">with</span> <span class=\"n\">bitcode</span> <span class=\"n\">header</span>\n<span class=\"n\">LEAN</span> <span class=\"n\">ASSERTION</span> <span class=\"n\">VIOLATION</span>\n<span class=\"n\">File</span><span class=\"o\">:</span> <span class=\"n\">compiler</span><span class=\"bp\">/</span><span class=\"n\">llvm.cpp</span>\n<span class=\"n\">Line</span><span class=\"o\">:</span> <span class=\"mi\">1065</span>\n<span class=\"bp\">!</span><span class=\"n\">is_error</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"s2\">\"failed to parse bitcode\"</span>\n<span class=\"bp\">'</span><span class=\"n\">unreachable'</span> <span class=\"n\">code</span> <span class=\"n\">was</span> <span class=\"n\">reached</span>\n</code></pre></div>",
        "id": 325730994,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675461369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> interesting, I have not used <code>edit_cache</code>. I usually configure these with <code>cmake ../  -DLLVM=ON -DLLVM_CONFIG=/path/to/llvm/15</code> . I shall change the flag to be public once we are less overwhelmed with high priority <code>mathlib</code> porting changes.</p>",
        "id": 325731003,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675461370
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325731015,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675461380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20state.20of.20the.20code.20generator/near/325731003\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> interesting, I have not used <code>edit_cache</code>. I usually configure these with <code>cmake ../  -DLLVM=ON -DLLVM_CONFIG=/path/to/llvm/15</code> . I shall change the flag to be public once we are less overwhelmed with high priority <code>mathlib</code> porting changes.</p>\n</blockquote>\n<p>I can do that. There are two CMakeLists.txt, one in stage0/. It seems like I have to change both</p>",
        "id": 325731112,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675461426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> there is no need.  Right now, even with the LLVM backend enabled, lean still compiles _itself_ using the C backend. Compiling the <code>stage2</code> lean compiler via the LLVM backend is under development: <a href=\"https://github.com/bollu/lean4/tree/llvm/stage2-build\">https://github.com/bollu/lean4/tree/llvm/stage2-build</a></p>",
        "id": 325731483,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675461607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20state.20of.20the.20code.20generator/near/325730994\">said</a>:</p>\n<blockquote>\n<p>I got this error</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_llvm_parse_bitcode</span> <span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">file</span> <span class=\"n\">doesn't</span> <span class=\"n\">start</span> <span class=\"k\">with</span> <span class=\"n\">bitcode</span> <span class=\"n\">header</span>\n<span class=\"n\">LEAN</span> <span class=\"n\">ASSERTION</span> <span class=\"n\">VIOLATION</span>\n<span class=\"n\">File</span><span class=\"o\">:</span> <span class=\"n\">compiler</span><span class=\"bp\">/</span><span class=\"n\">llvm.cpp</span>\n<span class=\"n\">Line</span><span class=\"o\">:</span> <span class=\"mi\">1065</span>\n<span class=\"bp\">!</span><span class=\"n\">is_error</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"s2\">\"failed to parse bitcode\"</span>\n<span class=\"bp\">'</span><span class=\"n\">unreachable'</span> <span class=\"n\">code</span> <span class=\"n\">was</span> <span class=\"n\">reached</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It seems like my build is broken. I built it as above, and used <code>elan toolchain link xxx bulid/stage1</code> to set it as the default toolchain.</p>",
        "id": 325731651,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675461696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> could you please help me reproduce this locally? What should I do, starting from a bare <code>git clone</code> of lean to see this error?</p>",
        "id": 325731844,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675461791
    },
    {
        "content": "<p>I hope lean will bootstrap from WASM like Zig. No need to build stage0 then.</p>",
        "id": 325732469,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675462076
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CMake</span> <span class=\"n\">Error</span> <span class=\"n\">at</span> <span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeLists.txt</span><span class=\"o\">:</span><span class=\"mi\">22</span> <span class=\"o\">(</span><span class=\"n\">message</span><span class=\"o\">):</span>\n  <span class=\"n\">building</span> <span class=\"bp\">'</span><span class=\"n\">lean.h.bc'</span><span class=\"o\">,</span> <span class=\"n\">need</span> <span class=\"n\">CMAKE_CXX_COMPILER_ID</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"n\">Clang</span> <span class=\"n\">to</span> <span class=\"n\">build</span>\n  <span class=\"n\">LLVM</span> <span class=\"n\">bitcode</span> <span class=\"n\">file</span> <span class=\"n\">of</span> <span class=\"n\">Lean</span> <span class=\"n\">runtime.</span>\n</code></pre></div>\n<p>I got this when building stage1</p>",
        "id": 325733139,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675462381
    },
    {
        "content": "<p>sorry, wrong thread</p>",
        "id": 325733364,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675462498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> could you please send a pastebin of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">cmake</span> <span class=\"c1\">--trace &lt;YOUR_OPTIONS_HERE&gt;</span>\n<span class=\"bp\">$</span> <span class=\"n\">VERBOSE</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"n\">make</span> <span class=\"bp\">&lt;</span><span class=\"n\">YOUR_OPTIONS_HERE</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 325733394,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675462515
    },
    {
        "content": "<p>First, I did <code>cmake -G \"Unix Makefiles\" -B build -DLLVM=ON</code><br>\ngcc is selected as the compiler<br>\nI then changed the compiler  to clang/clang++ in <code>build/CMakeCache.txt</code></p>",
        "id": 325733790,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675462688
    },
    {
        "content": "<p><code>CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc</code> to <code>CMAKE_C_COMPILER:FILEPATH=/usr/bin/clang</code><br>\n<code>CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/c++</code> to <code>CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/clang++</code></p>",
        "id": 325733864,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675462731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20state.20of.20the.20code.20generator/near/325733139\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CMake</span> <span class=\"n\">Error</span> <span class=\"n\">at</span> <span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeLists.txt</span><span class=\"o\">:</span><span class=\"mi\">22</span> <span class=\"o\">(</span><span class=\"n\">message</span><span class=\"o\">):</span>\n  <span class=\"n\">building</span> <span class=\"bp\">'</span><span class=\"n\">lean.h.bc'</span><span class=\"o\">,</span> <span class=\"n\">need</span> <span class=\"n\">CMAKE_CXX_COMPILER_ID</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"n\">Clang</span> <span class=\"n\">to</span> <span class=\"n\">build</span>\n  <span class=\"n\">LLVM</span> <span class=\"n\">bitcode</span> <span class=\"n\">file</span> <span class=\"n\">of</span> <span class=\"n\">Lean</span> <span class=\"n\">runtime.</span>\n</code></pre></div>\n<p>I got this when building stage1</p>\n</blockquote>\n<p>Then this error</p>",
        "id": 325733877,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675462739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> You might want to ensure that you have a system <code>clang</code> installed. Could you try to nuke your <code>build</code> directory and retry with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">CC</span><span class=\"bp\">=</span><span class=\"n\">clang</span> <span class=\"n\">CXX</span><span class=\"bp\">=</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"n\">cmake</span> <span class=\"bp\">../</span> <span class=\"bp\">-</span><span class=\"n\">DLLVM</span><span class=\"bp\">=</span><span class=\"n\">ON</span>\n</code></pre></div>\n<p>I believe that manually editing the <code>CMAKE_{C,CXX}_COMPILER</code> does not refresh <code>CMAKE_CXX_COMPILER_ID</code>.</p>",
        "id": 325734068,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675462811
    },
    {
        "content": "<p>Is there a way to skip stage0 and use existing lean compiler?</p>",
        "id": 325734871,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675463149
    },
    {
        "content": "<p>Not that I'm aware of, perhaps <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> knows :)</p>",
        "id": 325735111,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675463236
    },
    {
        "content": "<p>It's too slow to build it every time</p>",
        "id": 325735136,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675463248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> if you have <a href=\"https://ccache.dev/\"><code>ccache</code></a>, it ought to be much faster the subsequent times</p>",
        "id": 325735426,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675463349
    },
    {
        "content": "<p>When will the build system gets changed from CMake+Make?</p>",
        "id": 325735449,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675463361
    },
    {
        "content": "<p>I found the problem. compiler detection of stage1 happens independently.</p>",
        "id": 325735516,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675463392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20state.20of.20the.20code.20generator/near/325735449\">said</a>:</p>\n<blockquote>\n<p>When will the build system gets changed from CMake+Make?</p>\n</blockquote>\n<p>That is not at all on the list right now afaik.</p>",
        "id": 325735630,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675463421
    },
    {
        "content": "<p>It's too flaky.</p>",
        "id": 325735828,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675463520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20state.20of.20the.20code.20generator/near/325735516\">said</a>:</p>\n<blockquote>\n<p>I found the problem. compiler detection of stage1 happens independently.</p>\n</blockquote>\n<p>Solved with env var CC, CXX</p>",
        "id": 325735905,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675463539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> thanks, I shall write that down.</p>",
        "id": 325736060,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675463627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20state.20of.20the.20code.20generator/near/325736060\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> thanks, I shall write that down.</p>\n</blockquote>\n<p>Should I open an issue</p>",
        "id": 325736911,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675464051
    },
    {
        "content": "<p>Please do so.</p>",
        "id": 325737555,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675464345
    },
    {
        "content": "<p>Now it works (can compile to bc)<br>\nHowever, I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">❯</span> <span class=\"n\">lean</span> <span class=\"c1\">--bc=Hello.bc --target=wasm32-freestanding Hello.lean</span>\n<span class=\"bp\">'</span><span class=\"n\">x86</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">processor</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">processor</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">cx8'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">fxsr'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">mmx'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">sse'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">sse2'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">x87'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'</span><span class=\"n\">x86</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">processor</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">processor</span><span class=\"o\">)</span>\n<span class=\"bp\">'</span><span class=\"n\">x86</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">processor</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">processor</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">cx8'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">fxsr'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">mmx'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">sse'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">sse2'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'+</span><span class=\"n\">x87'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">feature</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">feature</span><span class=\"o\">)</span>\n<span class=\"bp\">'</span><span class=\"n\">x86</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">recognized</span> <span class=\"n\">processor</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">ignoring</span> <span class=\"n\">processor</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 325737636,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675464371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> those are warning emitted by the LLVM toolchain, I believe? Does it produce a <code>&lt;FILENAME&gt;.bc.o</code> file in the same folder, which should be a wasm blob?</p>",
        "id": 325738411,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675464727
    },
    {
        "content": "<p>Yes it does</p>",
        "id": 325738504,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675464761
    },
    {
        "content": "<p>Slight problem</p>",
        "id": 325739094,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675465000
    },
    {
        "content": "<p>the main function signature is incorrect</p>",
        "id": 325739107,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675465007
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">❯</span> <span class=\"n\">zig</span> <span class=\"n\">cc</span> <span class=\"c1\">--target=wasm32-wasi -lc -o Hello.wasm Hello.bc.o</span>\n<span class=\"n\">LLD</span> <span class=\"n\">Link...</span> <span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">signature</span> <span class=\"n\">mismatch</span><span class=\"o\">:</span> <span class=\"n\">main</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i32</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i32</span> <span class=\"k\">in</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">user</span><span class=\"bp\">/.</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">zig</span><span class=\"bp\">/</span><span class=\"n\">o</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"n\">e4aeb420731c7ddc81a4c7da00c93e4</span><span class=\"bp\">/</span><span class=\"n\">libc.a</span><span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">user</span><span class=\"bp\">/.</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">zig</span><span class=\"bp\">/</span><span class=\"n\">o</span><span class=\"bp\">/</span><span class=\"n\">e856621094245318444f2a7d4ed86adf</span><span class=\"bp\">/</span><span class=\"n\">__main_void.o</span><span class=\"o\">)</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">i64</span><span class=\"o\">,</span> <span class=\"n\">i32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i64</span> <span class=\"k\">in</span> <span class=\"n\">Hello.bc.o</span>\n</code></pre></div>",
        "id": 325739123,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675465019
    },
    {
        "content": "<p>That's definitely not right. wasm32 is 32-bit</p>",
        "id": 325739165,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675465041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Do you think it's ok to stop at emitting bytecode? I think <code>lean</code> doesn't need to compile the object file.<br>\nAlso, it's better to emit LLVM IR (for readability).</p>",
        "id": 325741945,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675466537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> Couple of things:</p>\n<ol>\n<li>Since we already have the LLVM bitcode in memory, it ought to be faster for <code>lean</code> to build the object file, rather than paying the cost of saving <code>file.bc</code>, then launch <code>llc</code> to compile <code>file.bc</code> into <code>file.o</code>. I'll be benchmarking this soon <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> </li>\n<li>One can always go back from LLVM bitcode to readable LLVM with <code>opt -S file.bc -o file.llvm</code></li>\n</ol>",
        "id": 325794003,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1675504235
    },
    {
        "content": "<p>Writing out <code>.bc</code> would probably be better for implementing ccache-like caching, or even the basic version \"do not recompile .o if .bc is exactly the same as before\" that we can implement even in Make</p>",
        "id": 325794607,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675504560
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> . Is there a way to skip stage0 and use existing <code>lean</code>?</p>",
        "id": 328058850,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1676480017
    },
    {
        "content": "<p>I found a way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span>\n<span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"n\">stage0</span>\n<span class=\"n\">rsync</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly/ stage0/</span>\n<span class=\"n\">touch</span> <span class=\"n\">stage0</span><span class=\"bp\">-</span><span class=\"kd\">prefix</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">-</span><span class=\"n\">stamp</span><span class=\"bp\">/</span><span class=\"n\">stage0</span><span class=\"bp\">-</span><span class=\"n\">build</span>\n<span class=\"bp\">#</span> <span class=\"n\">now</span> <span class=\"n\">stage0</span> <span class=\"n\">is</span> <span class=\"s2\">\"built\"</span>\n<span class=\"n\">make</span>\n</code></pre></div>",
        "id": 328059597,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1676480191
    },
    {
        "content": "<p>i think you should at least <code>make -t stage0-prefix/src/stage0-stamp/stage0-build</code> to make that reliable</p>",
        "id": 328068659,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676482549
    }
]