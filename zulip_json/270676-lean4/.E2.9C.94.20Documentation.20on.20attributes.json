[
    {
        "content": "<p>Is there an attribute (such as <code>reducible</code> or <code>simp</code>) which means \"when deriving type-class instances, please pass through this definition as if it were transparent\"? Or more generally, where can I find out what attributes there are, apart from <code>simp</code> and <code>reducible</code>?</p>",
        "id": 359411077,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1684419781
    },
    {
        "content": "<p><code>reducible</code> should do it.</p>",
        "id": 359411579,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684419898
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> where reducible doesn't work?</p>",
        "id": 359411853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684419957
    },
    {
        "content": "<p>Is this a rumor or is it documented? And is there any documents showing/explaining what all the other attributes are for?</p>",
        "id": 359412032,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1684419991
    },
    {
        "content": "<p>If you hover over <code>reducible</code> in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>then some sort of documentation will show up (it's not very descriptive in this case, unfortunately)</p>",
        "id": 359412446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684420092
    },
    {
        "content": "<p>But you can right click and go to definition on <code>reducible</code> to jump to the actual code of the attribute</p>",
        "id": 359412528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684420124
    },
    {
        "content": "<p>Unfortunately, I don't know of any documentation that discusses <em>all</em> existing attributes :-/</p>",
        "id": 359412698,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684420169
    },
    {
        "content": "<p>it is one of the main reasons that reducible exists. If you do an <code>abbrev</code> that desugars into <code>@[reducible]  def</code> and you do abbrevs precisely because you want to reuse type class instances.</p>\n<p>As for a list of all attributes...it does not exist officially but the most comprehensive list of attribtues that you will find are probably: <br>\n<a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Attributes.lean#L54\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Attributes.lean#L54</a><br>\n<a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Attributes.lean#L81\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Attributes.lean#L81</a><br>\n<a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Attributes.lean#L101\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Attributes.lean#L101</a><br>\n<a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Attributes.lean#L146\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/Attributes.lean#L146</a></p>\n<p>these are all attributes that doc-gen knows about. Note libraries can add as many attributes as they wish. For example aesop adds the aesop attribute. It is generally speaking right now not possible for doc-gen to figure out all attributes that a declaration is associated with for 2 reasons:</p>\n<ol>\n<li>Not all attributes store information in the .olean files (this is okay in certain instances and not something directly fixable without removving this class of attributes)</li>\n<li>Attributes are not registered at some central facility in the compiler they are kind of...just there somewhere in the olean files. (this is fixable in theory)</li>\n</ol>\n<p>In general the documentation on all of what Lean does is pretty sparse :( we only have introductory level stuff for the most part</p>",
        "id": 359413964,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684420454
    },
    {
        "content": "<p>A side question: I declared <code>foo</code> using <code>Lean.addAndCompile</code>. How do I slap the <code>reducible</code> attribute on it?</p>",
        "id": 359414338,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1684420559
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.setReducibleAttribute#doc\">docs4#Lean.setReducibleAttribute</a></p>",
        "id": 359415162,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684420759
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 359415539,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1684420862
    },
    {
        "content": "<p>(One thing to not confuse: when you add a definition with <code>Lean.addAndCompile</code>, there is a separate reducibility setting of type <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ReducibilityHints#doc\">docs4#Lean.ReducibilityHints</a> that is independent from the transparency setting controlled by <code>@[reducible]</code>, and as far as I understand it's just a hint for the kernel's defeq checker and plays no role when elaborating.)</p>",
        "id": 359416681,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684421157
    },
    {
        "content": "<p>Yes, I understand the difference, but have no idea what to set the reducibility setting to. Right now I am just randomly using <code>.regular 0</code>.</p>",
        "id": 359417081,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1684421256
    },
    {
        "content": "<p>FWIW, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getAttributeNames#doc\">docs4#Lean.getAttributeNames</a> to get all the attributes in the current environment</p>",
        "id": 359417427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684421348
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Attributes</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">Nat</span> <span class=\"k\">from</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">getAttributeNames</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n</code></pre></div>\n<p>gives me 132 in the mathlib file I'm currently working in :)</p>",
        "id": 359417744,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684421420
    },
    {
        "content": "<p>I have no idea what to set the reducibility hint to either; I just figured I'd mention that there's a difference in case it's helpful for anyone.</p>\n<p>I've seen in some Lean code that they set it to one more than the highest reducibility of all the constants mentioned by the current definition. I think the point is that as a heuristic, you want to unfold things sort of in lockstep as you work backwards through reverse-definition-order</p>",
        "id": 359418817,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684421644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 359429477,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684424139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as unresolved.</p>",
        "id": 359429483,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684424141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 359429503,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684424145
    }
]