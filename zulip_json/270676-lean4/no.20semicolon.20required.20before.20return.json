[
    {
        "content": "<p>This apparently parses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"n\">return</span>\n</code></pre></div>\n<p>and means the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"n\">return</span>\n</code></pre></div>\n<p>I don't think this is intentional?</p>",
        "id": 364073411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686073524
    },
    {
        "content": "<p>other doSeq/term constructors have varying behavior:</p>\n<p>Interpreted as an argument:</p>\n<ul>\n<li><code>do foo () for x in [] do e</code> means <code>do foo () (for x in [] do e)</code></li>\n<li><code>do foo () try e catch _ =&gt; e</code> means <code>do foo () (try e catch _ =&gt; e')</code></li>\n<li><code>do foo () try e finally e</code> means <code>do foo () (try e finally e')</code></li>\n<li><code>do foo () do e</code> means <code>do foo () (do e)</code></li>\n<li><code>do foo () unless e do e'</code> means <code>do foo () (unless e do e')</code></li>\n</ul>\n<p>Interpreted as a doSeq:</p>\n<ul>\n<li><code>do foo () return</code> means <code>do foo (); return</code></li>\n<li><code>do foo () break</code> means <code>do foo (); break</code></li>\n<li><code>do foo () continue</code> means <code>do foo (); continue</code></li>\n<li><code>do foo () dbg_trace e</code> means <code>do foo (); dbg_trace e</code></li>\n<li><code>do foo () assert! e</code> means <code>do foo (); assert! e</code></li>\n<li><code>do foo () repeat e</code> means <code>do foo (); repeat e</code></li>\n<li><code>do foo () while e do e'</code> means <code>do foo (); while e do e'</code></li>\n<li><code>do foo () match e with | _ =&gt; e'</code> means <code>do foo (); match e with | _ =&gt; e'</code></li>\n<li><code>do foo () if e then e else e</code> means <code>do foo (); if e then e else e</code></li>\n</ul>",
        "id": 364073847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686073633
    },
    {
        "content": "<p>Is there a reason layout doesn't just work the same way as in Haskell?</p>",
        "id": 364077624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686074596
    },
    {
        "content": "<p>details?</p>",
        "id": 364078132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686074729
    },
    {
        "content": "<p>my guess is that most of the problems here are fixed by using <code>sepBy1IndentSemicolon</code> instead of <code>many1Indent</code> in the definition of <code>doSeq</code>. That will give <code>doSeq</code> the same semicolon-or-newline behavior as <code>tacticSeq</code></p>",
        "id": 364079415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686075046
    },
    {
        "content": "<p><a href=\"https://www.haskell.org/onlinereport/lexemes.html\">https://www.haskell.org/onlinereport/lexemes.html</a> section 2.7 but in brief, in a layout context, an equally-indented line desugars to <code>;</code> and a less-indented line desugars to <code>}</code> (or multiple <code>}</code>s)</p>",
        "id": 364079416,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075048
    },
    {
        "content": "<p>and a more-indented line?</p>",
        "id": 364079616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686075102
    },
    {
        "content": "<p>is just whitespace</p>",
        "id": 364079742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075126
    },
    {
        "content": "<p>I think this would not be a small change, lean's layout mechanism is architected very differently</p>",
        "id": 364080209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686075280
    },
    {
        "content": "<p>Lean's system seems a lot less predictable for the non-omniscient user</p>",
        "id": 364080463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075349
    },
    {
        "content": "<p>One difference of note is that adding semicolons doesn't make the result whitespace-insensitive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n  <span class=\"bp\">.</span> <span class=\"n\">skip</span><span class=\"bp\">;</span>\n    <span class=\"n\">skip</span><span class=\"bp\">;</span>\n  <span class=\"n\">skip</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>the indentation of the third line matters</p>",
        "id": 364080562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686075368
    },
    {
        "content": "<p>I think that e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">do</span>\n<span class=\"w\">  </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"w\">     </span><span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">z</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>means the same in Haskell</p>",
        "id": 364080792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075440
    },
    {
        "content": "<p>Layout in Haskell is only disabled if you use braces</p>",
        "id": 364081000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075489
    },
    {
        "content": "<p>can you use braces without semicolons?</p>",
        "id": 364081148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686075536
    },
    {
        "content": "<p>(I'm not sure if the extra semicolons are actually legal--it's an unnatural thing to write--but I am sure that the block that <code>y</code> belongs to will be determined by the indentation)</p>",
        "id": 364081274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075576
    },
    {
        "content": "<p>if there's only one thing <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 364081297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075584
    },
    {
        "content": "<p>weird but legal</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 364081517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075646
    },
    {
        "content": "<p>Anyways the main effect is that the layout rules effectively take priority over whatever other syntax is happening, e.g., something starting in column 1 is definitely a new top-level command, which I think is not the case in Lean 4 (based on error messages at least)</p>",
        "id": 364081926,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075764
    },
    {
        "content": "<p>actually I'm sure it's not the case because I have been putting definition bodies there</p>",
        "id": 364082303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075844
    },
    {
        "content": "<p>Yeah I'm reading the layout rules in <a href=\"https://www.haskell.org/onlinereport/syntax-iso.html#layout\">https://www.haskell.org/onlinereport/syntax-iso.html#layout</a> and</p>\n<blockquote>\n<p>A nested context must be further indented than the enclosing context (n&gt;m). If not, L fails, and the compiler should indicate a layout error.</p>\n</blockquote>\n<p>is definitely not true for lean</p>",
        "id": 364082348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686075862
    },
    {
        "content": "<p>one of the effects of a bracketing syntax is <code>withoutPosition</code>, so you can insert nested scopes with less indentation</p>",
        "id": 364082661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686075939
    },
    {
        "content": "<p>GHC has some extensions that allow optional semicolons in things like <code>if c [;] then expr1 [;] else expr2</code> for people who don't want to nest those</p>",
        "id": 364082743,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075957
    },
    {
        "content": "<p>(when the <code>if</code> appears in a <code>do</code> block)</p>",
        "id": 364082948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686075998
    },
    {
        "content": "<p>Being able to understand what the compiler thinks the nesting structure from the indentation is a very useful feature, even just for better error reporting</p>",
        "id": 364083280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076088
    },
    {
        "content": "<p>the rest of the details aren't very important</p>",
        "id": 364083361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076109
    },
    {
        "content": "<p>hmm I think there is also something like <code>RelaxedLayout</code> in GHC</p>",
        "id": 364083515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076153
    },
    {
        "content": "<p>I think that those notions should broadly apply, do you have an example in mind where you need something galaxy-brained to interpret valid lean code?</p>",
        "id": 364083672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686076198
    },
    {
        "content": "<p>I'm under the impression that e.g. <code>apply</code> can take its argument on the next line unindented?</p>",
        "id": 364084199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076333
    },
    {
        "content": "<p>Maybe there are rules and I just don't know them</p>",
        "id": 364084308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076365
    },
    {
        "content": "<p>I mean also the examples you posted at the start of this thread</p>",
        "id": 364084429,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076394
    },
    {
        "content": "<p>yes, most tactics that have a mandatory argument do not require <code>colGt</code>, perhaps that is a mistake</p>",
        "id": 364085003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686076549
    },
    {
        "content": "<p>right while optional arguments obviously can't be given on the next line at the same indentation level</p>",
        "id": 364085402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076666
    },
    {
        "content": "<p>and the same thing happens following <code>using</code>, <code>where</code>, etc. whenever there is a mandatory argument I guess</p>",
        "id": 364085539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076693
    },
    {
        "content": "<p>the reasoning is that the next thing has to be an expr regardless of where it appears. It's still difficult to take advantage of this in practice because the <code>app</code> parser does require a column check, so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n        <span class=\"n\">apply</span>\n<span class=\"n\">f</span>\n</code></pre></div>\n<p>parses but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n        <span class=\"n\">apply</span>\n<span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>does not</p>",
        "id": 364085566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686076699
    },
    {
        "content": "<p>so in order to make sense of the layout, you have to know the whole syntax of every tactic</p>",
        "id": 364085595,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076711
    },
    {
        "content": "<p>I get worried about column checks in too many places because it can make it difficult to keep the whitespace-insensitive variant working</p>",
        "id": 364086057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686076841
    },
    {
        "content": "<p>whitespace-insensitive syntax is about as well maintained in lean 4 as ascii equivalent symbols in lean 3</p>",
        "id": 364086265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686076894
    },
    {
        "content": "<p>Presumably all sensible systems will agree on the meaning of correct, tastefully written files</p>",
        "id": 364086501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686076948
    },
    {
        "content": "<p>so what's at stake is the system not inventing an obviously unintended meaning of something (e.g. an unindented \"argument\" to <code>apply</code>)</p>",
        "id": 364086727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686077009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/no.20semicolon.20required.20before.20return/near/364086057\">said</a>:</p>\n<blockquote>\n<p>I get worried about column checks in too many places because it can make it difficult to keep the whitespace-insensitive variant working</p>\n</blockquote>\n<p>Yeah so Haskell's layout rules can be completely avoided if you always write a <code>{</code> after the layout keywords, which is nice.</p>",
        "id": 364087022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686077069
    },
    {
        "content": "<p>People don't really write code like that (though I think there is still some in GHC itself) but programs might want to</p>",
        "id": 364087146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686077093
    },
    {
        "content": "<p>OTOH, maybe generating textual Lean code is not a really sensible thing to attempt.</p>",
        "id": 364087221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686077115
    },
    {
        "content": "<p>the haskell report has this lovely example of tasteless code:</p>\n<blockquote>\n<p>The parse-error rule is hard to implement in its full generality, because doing so involves fixities. For example, the expression</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">do</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">==</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>has a single unambiguous (albeit probably type-incorrect) parse, namely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"o\">})</span> <span class=\"bp\">==</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>because <code>(==)</code> is non-associative. Programmers are therefore advised to avoid writing code that requires the parser to insert a closing brace in such situations.</p>\n</blockquote>",
        "id": 364087282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686077132
    },
    {
        "content": "<p>Yeah this is a bit of a dark corner. I think it is to support <code>let a = 1 in</code></p>",
        "id": 364087593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686077203
    },
    {
        "content": "<p>otherwise you would logically be required to use either braces or a newline before <code>in</code></p>",
        "id": 364088006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686077294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/no.20semicolon.20required.20before.20return/near/364087221\">said</a>:</p>\n<blockquote>\n<p>OTOH, maybe generating textual Lean code is not a really sensible thing to attempt.</p>\n</blockquote>\n<p>Heh, this has been done by many people, including me. It's difficult to tell people not to</p>",
        "id": 364088075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686077310
    },
    {
        "content": "<p>unless you are working in lean it's not all that easy to construct lean source directly via Syntax</p>",
        "id": 364088715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686077439
    },
    {
        "content": "<p>maybe we need a lean frontend that reads JSON ASTs</p>",
        "id": 364088845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686077462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/no.20semicolon.20required.20before.20return/near/364086501\">said</a>:</p>\n<blockquote>\n<p>Presumably all sensible systems will agree on the meaning of correct, tastefully written files</p>\n</blockquote>\n<p>I certainly would not presume this. For a Lean example, parts of a definition can be flushed left when in many other languages the different parts would be considered separate statements. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">foo</span> <span class=\"o\">:</span>\n<span class=\"n\">ExceptT</span> <span class=\"n\">String</span>\n<span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"n\">BaseIO</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"s2\">\"hi\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Furthermore, there is actually a lot of Lean code that leverages this style,  so at least some users consider it \"tasteful\". However, this design decision also prevents terms from being lifted into commands . This means things like Template Haskell shorthand would be impossible in Lean (and this style impossible in Template Haskell).</p>",
        "id": 364144121,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686101045
    },
    {
        "content": "<p>... which Lean code uses this style, I'm curious?</p>",
        "id": 364144607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686101357
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/blob/0d4da61cbfe65f19ac7070c2c9f62f36db529c4c/Lake/Build/Actions.lean#L16-L22\">Mac's</a></p>",
        "id": 364147155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686103121
    },
    {
        "content": "<p>(I have to resist the urge to reformat things whenever I read lake code)</p>",
        "id": 364147596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686103384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Also, Lean <a href=\"https://github.com/leanprover/lean4/blob/d5348dfac847a56a4595fb6230fd0708dcb4e7e9/src/Lean/Parser/Term.lean#L13-L14\">core</a> <a href=\"https://github.com/leanprover/lean4/blob/d5348dfac847a56a4595fb6230fd0708dcb4e7e9/src/Init/Data/Array/Basic.lean#L438-L439\">code</a>. However, not as much as I thought. I did notice you reformatted some cases when changing <a href=\"https://github.com/leanprover/lean4/blob/90e228818702510290cd6008609010eedf4cb511/src/Init/Data/String/Basic.lean#L353\">String.lean</a>. Maybe the few cases were just mistakes and they made more of impression on my perception of Lean style than they should have. However, Mathlib <a href=\"https://github.com/leanprover-community/mathlib4/blob/21511d60b443ece53a558acf6a0b596adf9bbbc9/Mathlib/Algebra/Category/Ring/Limits.lean#L52-L61\">code</a> also flushes definition contents to left at times as well.</p>",
        "id": 364188201,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686123242
    },
    {
        "content": "<p>Note that for my code, I only flush parameters and return types, not contents (except in the special case of multi-line strings due to the fact that such indentation would end up in the string).</p>",
        "id": 364188743,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686123364
    },
    {
        "content": "<p>Also, FYI, my example was meant to be a particularly egregious case of the flush left style, not an example of my own code, but apparently there is overlap from others' perspectives. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 364189019,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686123460
    },
    {
        "content": "<p>I see. I will say that certainly the linked code from lake is not nearly as bad as your example (which among other things could be written on just 1-2 lines).</p>",
        "id": 364189542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686123609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/no.20semicolon.20required.20before.20return/near/364147596\">said</a>:</p>\n<blockquote>\n<p>(I have to resist the urge to reformat things whenever I read lake code)</p>\n</blockquote>\n<p>As a bikeshedding tangent, I am curious how you would format the signature of  <code>compileLeanModule</code>. I would think there are too many parameters to go on one line, so some multi-line formatting would be inevitable. I also would think that indenting them to the same level as the definition contents would be more confusing as it would then be hard to visually separate them. So I am interested in what your approach would be.</p>",
        "id": 364191290,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686124033
    },
    {
        "content": "<p>We usually indent the declaration header by 4 spaces for this reason</p>",
        "id": 364194336,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686124829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/no.20semicolon.20required.20before.20return/near/364188201\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Also, Lean <a href=\"https://github.com/leanprover/lean4/blob/d5348dfac847a56a4595fb6230fd0708dcb4e7e9/src/Lean/Parser/Term.lean#L13-L14\">core</a> <a href=\"https://github.com/leanprover/lean4/blob/d5348dfac847a56a4595fb6230fd0708dcb4e7e9/src/Init/Data/Array/Basic.lean#L438-L439\">code</a>.</p>\n</blockquote>\n<p>This is old code written in Lean 3 style</p>",
        "id": 364194458,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686124870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Ah, I was not aware the indentation style had changed between Lean 3 and Lean 4.</p>",
        "id": 364197106,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686125589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/no.20semicolon.20required.20before.20return/near/364194336\">said</a>:</p>\n<blockquote>\n<p>We usually indent the declaration header by 4 spaces for this reason</p>\n</blockquote>\n<p>So, do you mean like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span>\n    <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">baz</span>\n</code></pre></div>\n<p>Personally, this is hard for me to parse because the dedent in <code>baz</code> makes me feel like it should be a separate, outer statement of <code>(bar ... :=</code>, when it is actually the RHS of <code>:=</code>. This is probably I habit I formed from the common programming style of requiring the RHS of an operator to be grater than the LHS indent of the operator. Essentially, that style feels like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"some long string\"</span> <span class=\"bp\">+</span> <span class=\"s2\">\"another long string\"</span> <span class=\"bp\">+</span>\n      <span class=\"s2\">\"more long strings\"</span> <span class=\"bp\">==</span>\n    <span class=\"s2\">\"even more and more long strings\"</span> <span class=\"bp\">+</span> <span class=\"s2\">\"and more and more\"</span>\n</code></pre></div>\n<p>Which feels wrong (and does not parse in some whitespace-sensitive languages).</p>",
        "id": 364199996,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686126328
    },
    {
        "content": "<p>It would be more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">baz</span>\n</code></pre></div>\n<p>depending on the available space.</p>\n<blockquote>\n<p>This is probably I habit I formed from the common programming style of requiring the RHS of an operator to be grater than the LHS indent of the operator</p>\n</blockquote>\n<p>You are talking about infix operators. <code>def ... := ...</code> is not an infix operator. This argument looks very subjective. Which is fine, it just doesn't seem to be the predominant opinion.</p>",
        "id": 364213763,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686129502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/no.20semicolon.20required.20before.20return/near/364213763\">said</a>:</p>\n<blockquote>\n<p><code>def ... := ...</code> is not an infix operator.</p>\n</blockquote>\n<p>The <code>:=</code> sort of is, and it feels like one to my eyes. It also used as one, for example, in <code>do</code> notation.</p>\n<blockquote>\n<p>This argument looks very subjective. Which is fine, it just doesn't seem to be the predominant opinion.</p>\n</blockquote>\n<p>True, it is subjective and my opinion does seem to be the minority one. I guess that's life. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span>  I do think I have a better grip of what is common Lean 4 style now, which is good. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 364393733,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686171432
    },
    {
        "content": "<p>you know, there is a formatter that will tell you what the recommended format is (modulo some bugs)</p>",
        "id": 364396355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686172419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The 'modulo some bugs' however makes it hard to tell what is proper formatting and what is the result of bugs.</p>",
        "id": 364396531,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686172467
    },
    {
        "content": "<p>you can always ask, most of the bugs are known at this point since we have a small army looking at hundreds of thousands of lines of auto-formatted code</p>",
        "id": 364396811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686172572
    },
    {
        "content": "<p>i am excited for the day when we are all using structure editors, so we can have a sliding bar of how much vertical whitespace to display the code with :) my preferred style there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span>\n    <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"o\">:=</span>\n  <span class=\"n\">baz</span>\n</code></pre></div>\n<p>which I admit is a lot of newlines for most people <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 364971287,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686345431
    },
    {
        "content": "<p>Your style doesn't typecheck: <code>baz</code> is a <code>Nat</code>, not a <code>String</code>...</p>",
        "id": 364972389,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686345844
    }
]