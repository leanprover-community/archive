[
    {
        "content": "<p>I try to use the <code>inferInstance</code> function in meta code and replace some outParams with meta variables. However I seem to get something wrong. A minimal example: I call <code>@inferInstance (MonadState ?m.XXX (StateT Nat))</code> where <code>?m.XXX</code> is a metavariable created with <code>mkFreshTypeMVar</code>. Since that parameter is an outParam to <code>MonadState</code> it should be infered, but I get \"Failed to synthesize ...\". The code looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span> <span class=\"n\">Term</span>\n<span class=\"sd\">/-- An expression that simply should infer the instance `MonadState Nat (StateT Nat)` -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"instTest\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">instTy</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">MonadState</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mvar</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">StateM</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">]]</span>\n  <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">inferInstance</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">instTy</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">instTest</span>  <span class=\"c1\">-- Failed to synthesize ...</span>\n</code></pre></div>\n<p>Can anyone tell what I am doing wrong? Should I do something with the metavariable or should I use something else?</p>\n<p>Thanks,<br>\nTage</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 361290068,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1685099053
    },
    {
        "content": "<p>Hmm, doing it by hand works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">inferInstance</span> <span class=\"o\">(</span><span class=\"n\">MonadState</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">StateM</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 361346465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685111456
    },
    {
        "content": "<p>Oh, right, <code>mkAppM</code> doesn't allow assigning metavariables, so it refuses to infer an instance here.</p>",
        "id": 361347893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685111769
    },
    {
        "content": "<p>Lean has a function for synthesizing instances however:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span> <span class=\"n\">Term</span>\n<span class=\"sd\">/-- An expression that simply should infer the instance `MonadState Nat (StateT Nat)` -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"instTest\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">instTy</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">MonadState</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mvar</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">StateM</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">]]</span>\n  <span class=\"n\">synthInstance</span> <span class=\"n\">instTy</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">instTest</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 361348029,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685111799
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 361489039,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1685169992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544752\">Tage Johansson</span> has marked this topic as resolved.</p>",
        "id": 361489045,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685169998
    }
]