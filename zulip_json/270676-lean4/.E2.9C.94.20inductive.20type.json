[
    {
        "content": "<p>Hello everyone, I am a new starter testing \"Theorem_proving_in_lean4. inductive types\" and face the challenge of implementing a Bool Type: the code I write is exactly the same as the  website:</p>\n<p>namespace Hidden <br>\n  inductive my_Bool where<br>\n    | my_false : my_Bool<br>\n    | my_true  : my_Bool</p>\n<p>def and (a b : my_Bool) : my_Bool :=<br>\n    match a with<br>\n    | my_true  =&gt; b<br>\n    | my_false =&gt; my_false<br>\nend Hidden</p>\n<p>but it red-lined the line <br>\n| my_false =&gt; my_false<br>\nand report an error :  redundant alternative<br>\nare there any clue on what is the cause of the error and how to solve it?</p>",
        "id": 349139044,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1681398669
    },
    {
        "content": "<p>Can you edit your message to use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> ? That would help display the syntax nicely.</p>",
        "id": 349139209,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681398713
    },
    {
        "content": "<p>Hello everyone, I am a new starter testing \"Theorem_proving_in_lean4. inductive types\" and face the challenge of implementing a Bool Type: the code I write is exactly the same as the website:</p>\n<p>namespace Hidden<br>\ninductive my_Bool where<br>\n| my_false : my_Bool<br>\n| my_true : my_Bool</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">my_Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">my_true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">my_false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">my_false</span>\n<span class=\"kd\">end</span> <span class=\"n\">Hidden</span>\n</code></pre></div>\n<p>but it red-lined the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">my_false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">my_false</span>\n</code></pre></div>\n<p>and report an error : redundant alternative<br>\nare there any clue on what is the cause of the error and how to solve it?</p>",
        "id": 349139402,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1681398757
    },
    {
        "content": "<p>When you ate defining your and function you are not in the my_Bool scope so it interpreted my_true as a wild card pattern. You have 3 options:<br>\nDefine my_Bool.and<br>\nUse my_Bool.true<br>\nOr use the intelligent version of the previous: .true (note the dot)</p>",
        "id": 349139434,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1681398763
    },
    {
        "content": "<p>You could also open the <code>my_Bool</code> namespace (or work inside of it)</p>",
        "id": 349139628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681398810
    },
    {
        "content": "<p>got it, so it should be written as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">my_Bool</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">my_Bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"o\">:</span> <span class=\"n\">my_Bool</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">my_Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_Bool</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">my_Bool.true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"n\">my_Bool.false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">my_Bool.false</span>\n<span class=\"kd\">end</span> <span class=\"n\">Hidden</span>\n</code></pre></div>",
        "id": 349140086,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1681398915
    },
    {
        "content": "<p>thank you guys</p>",
        "id": 349140363,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1681398970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609478\">Meizu Fan</span> has marked this topic as resolved.</p>",
        "id": 349140395,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681398979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609478\">Meizu Fan</span> has marked this topic as resolved.</p>",
        "id": 349140396,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681398979
    }
]