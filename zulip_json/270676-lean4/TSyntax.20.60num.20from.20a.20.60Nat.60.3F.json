[
    {
        "content": "<p>How do I get a <code>TSyntax `num</code> from a <code>Nat</code>?</p>",
        "id": 368417788,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687410179
    },
    {
        "content": "<p>Ah, found <a href=\"#narrow/stream/270676-lean4/topic/Re-assembling.20a.20TSyntax.20.60tacticSeq/near/305936469\">my own post</a> with an answer, although it seems a bit round-about.</p>",
        "id": 368418005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687410274
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 368418027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687410289
    },
    {
        "content": "<p>I think the most straightfoward way is <code>let n : TSyntax `num := quote n</code></p>",
        "id": 368421839,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687411410
    },
    {
        "content": "<p>This is doing exactly the same thing (the instance is <code>instance : Quote Nat numLitKind := ⟨fun n =&gt; Syntax.mkNumLit &lt;| toString n⟩</code>), but the <code>quote</code> interface is nicer</p>",
        "id": 368422095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687411458
    }
]