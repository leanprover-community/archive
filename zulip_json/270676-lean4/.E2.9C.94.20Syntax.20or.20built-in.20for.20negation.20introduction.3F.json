[
    {
        "content": "<p>Is there any \"rfl\" type of statement or mathlib4 function that would finish this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Sandwich</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">egg</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span>\n  <span class=\"bp\">|</span> <span class=\"n\">roast_beef</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vegetable</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Sandwich</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Sandwich</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">egg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">roast_beef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">roast_beef</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">roast_beef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vegetable</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">egg</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_f_is_not_beef</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Sandwich</span><span class=\"o\">),</span>\n    <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">roast_beef</span>\n  <span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">vegetable</span> <span class=\"bp\">=</span> <span class=\"n\">roast_beef</span> <span class=\"o\">:=</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">Sandwich</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">roast_beef</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Exists.intro</span> <span class=\"n\">vegetable</span> <span class=\"n\">h0</span>\n  <span class=\"n\">not_forall_of_exists_not</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 272628197,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1645404449
    },
    {
        "content": "<p><code>by simp only [f]</code> can replace your <code>sorry</code> (not sure if this is what you asked for)</p>",
        "id": 272630412,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645407066
    },
    {
        "content": "<p>That works, thanks. Is there a short non-tactic way of doing this?</p>",
        "id": 272631252,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1645408199
    },
    {
        "content": "<p>Not that I know, sorry</p>",
        "id": 272632042,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645409025
    },
    {
        "content": "<p>np thanks again</p>",
        "id": 272632213,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1645409169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431462\">Mark Wilhelm</span> has marked this topic as resolved.</p>",
        "id": 272632220,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645409180
    },
    {
        "content": "<p>Another tactic way of doing it is <code>by intro a; injection a</code>, and a short non-tactic way is <code>λ h =&gt; nomatch h</code></p>",
        "id": 272636842,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645413947
    },
    {
        "content": "<p>the <code>λ h =&gt; nomatch h</code> can be reduced to <code>λ.</code></p>",
        "id": 272644448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645422834
    }
]