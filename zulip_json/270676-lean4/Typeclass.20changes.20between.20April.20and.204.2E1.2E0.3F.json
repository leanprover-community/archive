[
    {
        "content": "<p>I had been working on a paper for some time last spring using Lean 4 typeclasses in a formalization, then left the implementation alone for a bit after submitting a paper. Since Lean 4 made its official release, I've been looking off and on to update my code, and have been stuck for a while due to what seem to be significant changes to typeclass machinery since then. The last nightly version of Lean that my code works with is <code>leanprover/lean4:nightly-2023-04-07</code>, at which point there seems to be a gap in the nightlies being published, and picking up the first May nightly build results in new errors that I've been unable to fix; poking around git commits from that time reveals significant changes to the typeclass code, but I've been unable to find explanations of exactly what the conceptual model of the change was. I was hoping someone could help me get my code working, or better yet, explain the general scope/shift of the changes in general so I can reason through the consequences for my development.</p>\n<p>My actual development is fairly substantial and makes extensive use of typeclasses, but I can reproduce the same error quite simply. Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">sn</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>This much is fine, but trying to add any kind of transitivity instance gives me errors I don't recognize from earlier development versions of Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}[</span><span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">][</span><span class=\"n\">C</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>results in an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">_root_.trans</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">Z</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"bp\">?</span><span class=\"n\">Y</span>\n  <span class=\"n\">C</span> <span class=\"bp\">?</span><span class=\"n\">Y</span> <span class=\"n\">Z</span>\n</code></pre></div>\n<p>The same instances are accepted by the last nightly of pre-release Lean 4 prior to the big typeclass changes.</p>\n<p>Wondering if this was related to Y,  I also tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">}[</span><span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">String</span><span class=\"o\">][</span><span class=\"n\">C</span> <span class=\"n\">String</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>which is accepted.</p>\n<p>I can't find any updates to the documentation for this error or written discussion of the change itself (though it's quite possible I've missed this somewhere, in which case a pointer would be quite appreciated). Is the intent to no longer support typeclass resolution where no fixed (optimal?) order is identifiable for trying to resolve typeclass parameters? Or is the change more subtle than that? In the case of my full development, no concretization of typeclass arguments like my accepted tweak above, even with reorganization of the typeclasses, is appropriate; many/most of the typeclass instances I'm using legitimately have and require parameters that do not appear in the goal instance signature, exemplified by the transitivity instance above, so I'm particularly keen to learn if such non-goal-directed variables are simply no longer supported in any form, or if there are conditions under which some versions of them might still work.</p>",
        "id": 397955783,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1697991804
    },
    {
        "content": "<p>Yes things have changed since then <a href=\"https://github.com/leanprover/lean4/pull/2174\">lean4#2174</a> was merged April 10th so for example.<br>\nI'd suggest looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=semiOutParam#doc\">docs#semiOutParam</a> and the core implementation of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Coe#doc\">docs#Coe</a> via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeHead#doc\">docs#CoeHead</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeTail#doc\">docs#CoeTail</a> to see whether your setup can be fixed using the <code>semiOutParam</code> decorator. In principle your trans could loop arbitrarily, so the fact that it didn't probably means there is a way to use semi-out params to fix things, maybe at the expense of needing some sort of head/tail classes like core</p>",
        "id": 397958110,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697992797
    },
    {
        "content": "<p>If you just want to bump the code without adapting to the new requirements (at least for the moment), you can just disable this check with an option (iirc <code>set_option synthInstance.checkSynthOrder false</code>).</p>",
        "id": 397961439,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697996517
    },
    {
        "content": "<p>Thanks both of you!</p>",
        "id": 397965025,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1698000877
    },
    {
        "content": "<p>The option certainly works for now.</p>",
        "id": 397965030,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1698000887
    },
    {
        "content": "<p>I'll take a careful look at semiOutParam, looking at the docs I think my intended use case is outside the intended range of things it supports, but I'll find out.</p>",
        "id": 397965221,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1698001090
    }
]