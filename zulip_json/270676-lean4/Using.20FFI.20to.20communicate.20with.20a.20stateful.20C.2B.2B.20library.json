[
    {
        "content": "<p>I am working on a project where I need to communicate with a C++ library that provides efficient implementation of some operations. One problem I am facing is that the library is stateful and I don't know how to capture that from the Lean side. For example, assuming we have the following API in the C++ side:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Foo</span>\n<span class=\"p\">{</span>\n<span class=\"w\"> </span><span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">Foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">changed</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">  </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">doSomething</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">changed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">isChanged</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">changed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\"> </span><span class=\"k\">private</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">changed</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>I would be tempted to have the following interface from the Lean side:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">opaque</span> <span class=\"n\">FooImpl</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyType.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">FooImpl.type</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">FooImpl.property</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"foo_mk\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Foo.mk</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"foo_doSomething\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Foo.doSomething</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"foo_isChanged\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Foo.isChanged</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f.doSomething</span>\n  <span class=\"n\">f.isChanged</span>\n</code></pre></div>\n<p>However, this breaks Lean's purity, since the Foo object is mutated by the <code>doSomething</code> function, but this is not reflected in the type. I am worried that can lead to inconsistencies and errors in the Lean code, so I tried to use monads to represent state. The idea is to use a type <code>FooM α</code> that represents a computation that can manipulate a <code>Foo</code> object and return a value of type <code>α</code>. Here is what I would like my interface to be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"foo_doSomething\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Foo.doSomething</span> <span class=\"o\">:</span> <span class=\"n\">FooM</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"foo_isChanged\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Foo.isChanged</span> <span class=\"o\">:</span> <span class=\"n\">FooM</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"foo_run\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Foo.run</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">FooM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">run</span> <span class=\"k\">do</span>\n    <span class=\"n\">doSomething</span>\n    <span class=\"n\">isChanged</span>\n</code></pre></div>\n<p>However, I am not sure if this is the right approach, or if it works as expected. I have two main questions:</p>\n<ul>\n<li>How can I implement the <code>FooM</code> monad and <code>run</code> function?</li>\n<li>How can I pass and return the Foo object between the two languages?</li>\n</ul>\n<p>I would appreciate any help or suggestion on how to use FFI with a stateful C++ library in Lean. Thank you for your time and attention.</p>\n<p>P.S. It's cheap to create a new instance of <code>Foo</code> in the example above, but it's expensive to do so in my application. So, I have to avoid that.</p>",
        "id": 408491610,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1702857799
    },
    {
        "content": "<p>How do other languages like Haskell deal with that?</p>",
        "id": 408517888,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702869834
    },
    {
        "content": "<p>In your example the function <code>doSomething</code> should return <code>Foo</code> then you are not breaking purity. To implement this correctly you need to know how Lean's memory management works and you can mutate only when you get a unique pointer to <code>Foo</code> otherwise you need to make a copy.</p>\n<p>In more complicated scenarios the monadic approach, as you proposed, is a better solution. For example, IO monad defines an auxiliary object <code>RealWorld</code> that represents \"the real world\" and you pass it along in the state monad.</p>\n<p>I have used this approach to communicate with Houdini(3d program like Blender), I created monad <a href=\"https://github.com/lecopivo/HouLean/blob/f2fd297da8ebcc51432baf592c5f74c9e4541d94/HouLean/Sop.lean#L13\"><code>Sop</code></a> with it's <a href=\"https://github.com/lecopivo/HouLean/blob/master/cpp/SopFunctions.cpp\">c++ implementation</a></p>",
        "id": 408571856,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1702892757
    },
    {
        "content": "<p>Also have a look at this <a href=\"https://github.com/leanprover/lean4/tree/master/tests/compiler/foreign\">example</a> which shows how to exchange class/struct between c++ and lean.</p>",
        "id": 408572747,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1702893076
    }
]