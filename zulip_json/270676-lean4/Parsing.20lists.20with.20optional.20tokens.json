[
    {
        "content": "<p>Dear All,</p>\n<p>I am porting <code>move_add</code> to Lean 4.  For this, I would like to pass to the tactic a list of <code>term</code>s, optionally preceded by a left arrow.  What is the syntax to achieve this?</p>\n<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">move_add</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n<span class=\"c1\">--&gt; I would like convert the above into `(a, false), (b, true), (c, false)`.</span>\n</code></pre></div>\n<p>I know how to <code>elabTerm</code> the <code>a, b, c</code>, if I do not put the optional left arrow, but I cannot do the whole parsing...</p>\n<p>Thanks!</p>",
        "id": 381925055,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691169272
    },
    {
        "content": "<p>I think that this is the <code>syntax</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"move_add\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"s2\">\"←\"</span><span class=\"bp\">?</span> <span class=\"n\">term</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>but I do not know how to \"catch\" it in the <code>elab_rules</code> command...</p>",
        "id": 381927971,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691169933
    },
    {
        "content": "<p>Well you can resuse the internals of rewrite a bit, seeing as its quite similar</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"move_add\"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">rws</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rwRuleSeq</span><span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">for</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"n\">rs.getElems</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n      <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">delab</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">r</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">none</span><span class=\"o\">),</span> <span class=\"n\">r</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">isNone</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">move_add</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 381930931,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691170551
    },
    {
        "content": "<p>Alex, thank you very much!  I'll try it as soon as I am back at my computer.</p>",
        "id": 381934385,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691171421
    },
    {
        "content": "<p>Alex, it works great!  Here is what I ended up using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"move_add\"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">rws</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rwRuleSeq</span><span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">pairs</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">rs.getElems.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">r</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"n\">none</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">isNone</span><span class=\"o\">)</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{pairs}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">move_add</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 381960263,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691177893
    }
]