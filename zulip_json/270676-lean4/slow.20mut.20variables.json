[
    {
        "content": "<p>I just found out that having multiple mutable variables impacts performance quite badly. </p>\n<p>I did a simple test loop with three different variants of mutable variables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">USize2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>where <code>USize2</code> is a specialized struct holding two <code>USize</code>.</p>\n<p>The times are <code>1197ms</code>, <code>438ms</code> and <code>137ms</code>. I'm surprised that the the variant 1 and 2 are so different as you are paying the price of generic product type. Using the specialized struct <code>USize2</code> makes it almost as fast as possible as equivalent c program takes <code>52ms</code>.</p>\n<p>So clearly if I want to get speed and have multiple mutable variables I should define a custom struct that holds the values instead of using generic <code>Prod</code> type. Is there anything else(hopefully less tedious) that I can do to make it fater?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">USize2</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"mi\">100000000</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n    <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">tmp</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{N}-th 'Fibonacci' was computed in {(← IO.monoMsNow) - start}ms\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">b</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n    <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{N}-th 'Fibonacci' was computed in {(← IO.monoMsNow) - start}ms\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s.2</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">USize2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">s'</span>\n    <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">⟩</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{N}-th Fibonacci was computed in {(← IO.monoMsNow) - start}ms\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s'.y</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n</div></div>",
        "id": 406327376,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701875857
    },
    {
        "content": "<blockquote>\n<p>So clearly if I want to get speed and have multiple mutable variables I should define a custom struct that holds the values instead of using generic Prod type. Is there anything else(hopefully less tedious) that I can do to make it fater?</p>\n</blockquote>\n<p>Yes, don't use for loops <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> Use tail recursion instead</p>",
        "id": 406329573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701876424
    },
    {
        "content": "<p>what do you get with this variation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">tailFib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">USize</span> <span class=\"bp\">→</span> <span class=\"n\">USize</span> <span class=\"bp\">→</span> <span class=\"n\">USize</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tailFib</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">tailFib</span> <span class=\"n\">N</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{N}-th 'Fibonacci' was computed in {(← IO.monoMsNow) - start}ms\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 406330354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701876630
    },
    {
        "content": "<p>C compiler optimization kicks in and I get <code>0ms</code> :)</p>",
        "id": 406331204,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701876850
    },
    {
        "content": "<p>actually I think it's moving the call past the monoMs</p>",
        "id": 406331281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701876879
    },
    {
        "content": "<p>(I had to change <code>Nat</code> to <code>USize</code> as do not want to test additiong on <code>Nat</code>)</p>",
        "id": 406331285,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701876880
    },
    {
        "content": "<p>because it's pure</p>",
        "id": 406331301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701876884
    },
    {
        "content": "<p>.. ahh right ... but c equivalent with <code>O2</code> and <code>O3</code> gives <code>0ms</code> too but the purity argument is more likely</p>",
        "id": 406331412,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701876926
    },
    {
        "content": "<p>That explains why  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.iterate</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">tmp</span><span class=\"o\">))</span> <span class=\"n\">N</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">USize</span><span class=\"o\">),(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">USize</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>also gives <code>0ms</code></p>",
        "id": 406331487,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701876950
    },
    {
        "content": "<p>with <code>@[noinline] def blackbox : α → IO α := pure</code> and <code>let b := tailFib (← blackbox N) 0 1</code> I get 87ms</p>",
        "id": 406331795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701877051
    },
    {
        "content": "<p>Oh yeah I think the specific optimization here is <code>extract_closed</code>: since <code>N</code> is a constant <code>tailFib N 0 1</code> is also a constant, so it is hoisted into a run-once computation at initialization time</p>",
        "id": 406332087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701877126
    },
    {
        "content": "<p>I just shoved it into <code>IO</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">tailFib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">USize</span> <span class=\"bp\">→</span> <span class=\"n\">USize</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">USize</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tailFib</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">s'''</span> <span class=\"bp\">←</span> <span class=\"n\">tailFib</span> <span class=\"n\">N</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>and I get <code>47ms</code>. Your variant with <code>blackbox</code> gives the same time.</p>",
        "id": 406332416,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701877209
    },
    {
        "content": "<p>I believe this loop has no allocations, which is difficult to achieve in lean code</p>",
        "id": 406332726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701877300
    },
    {
        "content": "<p>this is especially important because lean's allocator is not marked up as an allocator to LLVM, so it destroys all kinds of optimizations in C land</p>",
        "id": 406332914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701877349
    },
    {
        "content": "<p>The issue is that I'm usually doing iterations over some generic finite type <code>I</code> for which I have function <code>iterate {α} : (I → α → α) → α → α</code>. This means that I have to write curried specialization for every <code>α</code> that is of the form <code>_ × _</code>.</p>",
        "id": 406333851,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701877639
    },
    {
        "content": "<p>I think even if you have a tuple it will be faster to do tail recursion in this way</p>",
        "id": 406335041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701877995
    },
    {
        "content": "<p>it won't be as fast as uncurried though</p>",
        "id": 406335129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701878025
    }
]