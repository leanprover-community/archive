[
    {
        "content": "<p>The program below used to work in Lean v4.0.0-m5, but not in the latest build:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Convertible</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ratio</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"c1\">-- Reflexivity</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">ratio</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- Symmetry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">]:</span> <span class=\"n\">Convertible</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">ratio</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">sym.ratio</span>\n\n<span class=\"c1\">-- Transitivity</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">]:</span> <span class=\"n\">Convertible</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"n\">where</span>\n  <span class=\"n\">ratio</span> <span class=\"o\">:=</span> <span class=\"n\">c₁.ratio</span> <span class=\"bp\">*</span> <span class=\"n\">c₂.ratio</span>\n\n<span class=\"c1\">-- Base facts</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">unit</span> <span class=\"n\">where</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">ft</span> <span class=\"bp\">|</span> <span class=\"n\">inch</span> <span class=\"bp\">|</span> <span class=\"n\">hr</span> <span class=\"bp\">|</span> <span class=\"n\">min</span> <span class=\"bp\">|</span> <span class=\"n\">sec</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">unit.m</span> <span class=\"n\">unit.ft</span> <span class=\"n\">where</span> <span class=\"n\">ratio</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">28</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">unit.ft</span> <span class=\"n\">unit.inch</span> <span class=\"n\">where</span> <span class=\"n\">ratio</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">unit.hr</span> <span class=\"n\">unit.min</span> <span class=\"n\">where</span> <span class=\"n\">ratio</span> <span class=\"o\">:=</span> <span class=\"mi\">60</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">unit.min</span> <span class=\"n\">unit.sec</span> <span class=\"n\">where</span> <span class=\"n\">ratio</span> <span class=\"o\">:=</span> <span class=\"mi\">60</span>\n\n<span class=\"c1\">-- Solver</span>\n<span class=\"kd\">def</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Convertible</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">]:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">c.ratio</span>\n\n<span class=\"c1\">-- Examples</span>\n<span class=\"k\">#eval</span> <span class=\"n\">convert</span> <span class=\"mi\">2</span> <span class=\"n\">unit.m</span> <span class=\"n\">unit.inch</span> <span class=\"c1\">-- 78.72</span>\n<span class=\"k\">#eval</span> <span class=\"n\">convert</span> <span class=\"mi\">13</span> <span class=\"n\">unit.inch</span> <span class=\"n\">unit.m</span> <span class=\"c1\">-- 0.330285</span>\n<span class=\"c1\">-- #eval convert 13 unit.inch unit.hr -- \"failed to synthesize instance\"</span>\n</code></pre></div>\n<p>I thought it was cool to use typeclass resolution for compile-time logic programming at the time, and was amazed that the transitivity rule worked. With the latest build, is there anything I can do to make this program work again?</p>\n<p>Many thanks!</p>",
        "id": 386277994,
        "sender_full_name": "Phil Nguyen",
        "timestamp": 1692579619
    },
    {
        "content": "<p>I think the transitivity instance is probably a bad idea, and the newer version of Lean is better at telling you this.<br>\nYour <code>Convertible</code> class is somewhat similar to Lean's <code>Coe</code>, which has a much more <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#Important-typeclasses\">elaborate setup for handling transitivity</a> by chaining <code>CoeHead? CoeOut* Coe* CoeTail?</code> (if you look at the <a href=\"https://github.com/leanprover/lean4/blob/63d2bdd4908b4df7db381537af754a7319e334e4/src/Init/Coe.lean#L142\">source file</a>, you can see the relevant instances). I don't know why this works, but I'm guessing it could inform an approach towards fixing your issue.</p>",
        "id": 386326041,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1692604523
    },
    {
        "content": "<p>why should <code>inch -&gt; hr</code> work? I don't see any conversions between lengths and times in your code</p>",
        "id": 386442582,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692639055
    },
    {
        "content": "<p>I was also confused by this, but the error is on the transitivity instance.</p>",
        "id": 386442995,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692639214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/.22cannot.20find.20synthesization.20order.20for.20instance.22.20in.20new.20Lean/near/386442582\">said</a>:</p>\n<blockquote>\n<p>why should <code>inch -&gt; hr</code> work? I don't see any conversions between lengths and times in your code</p>\n</blockquote>\n<p>Sorry for the confusion. The commented out line isn't meant to work, but to demonstrate (elsewhere) that impossible conversions cause compile-time error. The error in this question comes from the \"transitivity\" instance.</p>",
        "id": 386475741,
        "sender_full_name": "Phil Nguyen",
        "timestamp": 1692652078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/.22cannot.20find.20synthesization.20order.20for.20instance.22.20in.20new.20Lean/near/386326041\">said</a>:</p>\n<blockquote>\n<p>I think the transitivity instance is probably a bad idea, and the newer version of Lean is better at telling you this.<br>\nYour <code>Convertible</code> class is somewhat similar to Lean's <code>Coe</code>, which has a much more <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#Important-typeclasses\">elaborate setup for handling transitivity</a> by chaining <code>CoeHead? CoeOut* Coe* CoeTail?</code> (if you look at the <a href=\"https://github.com/leanprover/lean4/blob/63d2bdd4908b4df7db381537af754a7319e334e4/src/Init/Coe.lean#L142\">source file</a>, you can see the relevant instances). I don't know why this works, but I'm guessing it could inform an approach towards fixing your issue.</p>\n</blockquote>\n<p>Thank you very much. I'll read more about <code>Coe</code>. I'm new ish to Lean.</p>",
        "id": 386475942,
        "sender_full_name": "Phil Nguyen",
        "timestamp": 1692652152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476925\">Phil Nguyen</span> has marked this topic as resolved.</p>",
        "id": 386475960,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692652167
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22cannot.20find.20synthesization.20order.20for.20instance.22.20in.20new.20.2E.2E.2E\">#lean4 &gt; ✔ \"cannot find synthesization order for instance\" in new ...</a> by <span class=\"user-mention silent\" data-user-id=\"476925\">Phil Nguyen</span>.</p>",
        "id": 386475988,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692652186
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22cannot.20find.20synthesization.20order.20for.20instance.22.20in.20new.20.2E.2E.2E\">#lean4 &gt; ✔ \"cannot find synthesization order for instance\" in new ...</a> by <span class=\"user-mention silent\" data-user-id=\"476925\">Phil Nguyen</span>.</p>",
        "id": 386475991,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692652188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476925\">Phil Nguyen</span> has marked this topic as unresolved.</p>",
        "id": 386476024,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692652202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476925\">Phil Nguyen</span> has marked this topic as resolved.</p>",
        "id": 386476082,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692652212
    }
]