[
    {
        "content": "<p>I'm trying to prove a statement like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">list_get_replicate</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>However it gives this error even just to state the theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>The equivalence of <code>n</code> and <code>List.length ...</code> is established by <code>List.length_replicate</code>. How can I use this theorem here?</p>",
        "id": 388226108,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1693445467
    },
    {
        "content": "<p>I would use the length instead of n. Is there a particular reason not to?</p>",
        "id": 388226213,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693445550
    },
    {
        "content": "<p>If you want to convert some <code>x : Fin (length …)</code> to <code>Fin n</code>, you could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs#Fin.cast</a></p>",
        "id": 388226281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693445613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Add.20parametric.20type.20to.20the.20statement.20being.20proven/near/388226213\">said</a>:</p>\n<blockquote>\n<p>I would use the length instead of n. Is there a particular reason not to?</p>\n</blockquote>\n<p>How would this be stated? The length of the list comes from <code>n</code></p>",
        "id": 388226520,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1693445771
    },
    {
        "content": "<p>Just add n to the context</p>",
        "id": 388226596,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693445829
    },
    {
        "content": "<p>e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">list_get_replicate</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">):</span> <span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 388226662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693445882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Add.20parametric.20type.20to.20the.20statement.20being.20proven/near/388226662\">said</a>:</p>\n<blockquote>\n<p>e.g. </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">list_get_replicate</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">):</span> <span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! Is this a common idiom?</p>",
        "id": 388226796,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1693445973
    },
    {
        "content": "<p>What idiom are you referring to?</p>",
        "id": 388226928,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693446061
    },
    {
        "content": "<p>In this case you could also use your original code, but replace <code>i</code> after the <code>:</code> with an appropriate <code>Fin.cast … i</code>. Either approach works, but it’s up to the author to build the relevant API for the approach they take</p>",
        "id": 388227087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693446170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Add.20parametric.20type.20to.20the.20statement.20being.20proven/near/388226928\">said</a>:</p>\n<blockquote>\n<p>What idiom are you referring to?</p>\n</blockquote>\n<p>In this case it is necessary to duplicate <code>List.replicate ...</code> twice to ensure that <code>i</code> conforms to <code>Fin</code> condition in the statement of the theorem. Is this commonly seen?</p>",
        "id": 388227088,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1693446170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Add.20parametric.20type.20to.20the.20statement.20being.20proven/near/388227087\">said</a>:</p>\n<blockquote>\n<p>In this case you could also use your original code, but replace <code>i</code> after the <code>:</code> with an appropriate <code>Fin.cast … i</code>. Either approach works, but it’s up to the author to build the relevant API for the approach they take</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 388227106,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1693446183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Add.20parametric.20type.20to.20the.20statement.20being.20proven/near/388227087\">said</a>:</p>\n<blockquote>\n<p>In this case you could also use your original code, but replace <code>i</code> after the <code>:</code> with an appropriate <code>Fin.cast … i</code>. Either approach works, but it’s up to the author to build the relevant API for the approach they take</p>\n</blockquote>\n<p>Are you sure its <code>Fin.cast</code>? Lean gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">Fin.cast'</span>\n</code></pre></div>",
        "id": 388227683,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1693446572
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs#Fin.cast</a></p>",
        "id": 388228041,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693446797
    },
    {
        "content": "<p>You might be missing the import <code>Std.Data.Fin.Basic</code></p>",
        "id": 388228067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693446812
    },
    {
        "content": "<p>BTW, it's usually better to provide <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> 's when asking such questions, which would make it obvious if you have some import missing, for example.</p>",
        "id": 388228163,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693446866
    }
]