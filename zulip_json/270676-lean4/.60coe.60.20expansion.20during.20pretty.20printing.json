[
    {
        "content": "<p>In the code below, at the final sorry, <code>x : ℤ</code> is expanded into the full definition rather than rendering as <code>↑x</code>.  Is there a way to avoid this pretty printing expansion?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.UInt</span>\n\n<span class=\"sd\">/-- 64-bit two's complement integers -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n\n<span class=\"sd\">/-- The `ℤ` that an `Int64` represents -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Int64</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.n.toNat</span> <span class=\"bp\">-</span> <span class=\"n\">bif</span> <span class=\"gr\">sorry</span> <span class=\"k\">then</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"sd\">/-- The `coe` instance gets expanded when pretty printing -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bad_pretty_print</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>  <span class=\"c1\">-- Hover over here</span>\n</code></pre></div>",
        "id": 399084524,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698529220
    },
    {
        "content": "<p>The state at that <code>sorry</code> prints as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Int64</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">UInt64.toNat</span> <span class=\"n\">x.n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">bif</span> <span class=\"n\">sorryAx</span> <span class=\"n\">Bool</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">64</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span>\n</code></pre></div>",
        "id": 399084542,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698529247
    },
    {
        "content": "<p>Create a <code>@[coe] def foo (x) := x.n.toNat...</code> and use that in the <code>Coe</code> instance</p>",
        "id": 399084622,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698529341
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 399084784,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698529532
    }
]