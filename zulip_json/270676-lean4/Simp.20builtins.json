[
    {
        "content": "<p>Is there a <code>simp</code> option which turns off the use of the <a href=\"https://github.com/semorrison/lean4/blob/f9da1d8b55ca6989297fb952985b7d8d6c77e14b/src/Lean/Elab/Tactic/Simp.lean#L206\"><code>simpOnlyBuiltins</code></a>?  That is, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">eq_self</span> <span class=\"c1\">-- ∀ {α : Sort u} (a : α), (a = a) = True</span>\n<span class=\"k\">#check</span> <span class=\"n\">iff_self</span> <span class=\"c1\">-- ∀ (p : Prop), (p ↔ p) = True</span>\n</code></pre></div>\n<p>If I understand correctly, these lemmas are pretty fundamental to <code>simp</code>'s operation as a finishing tactic, since they often constitute the final step in closing the goal.  But for the use case I have in mind I would only be using <code>simp</code> as a non-finishing tactic.</p>",
        "id": 356572946,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683510303
    },
    {
        "content": "<p>I found <a href=\"#narrow/stream/287929-mathlib4/topic/making.20a.20TacticM/near/322818507\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/making.20a.20TacticM/near/322818507</a>, in which Mario is invoking <code>simp</code> and adding the <code>simpOnlyBuiltins</code> by hand, so presumably you could omit them by that method! It is far from a porcelain option, however.</p>",
        "id": 356575745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683512057
    },
    {
        "content": "<p>May not be exactly what you are looking for, but this code may be relevant: <a href=\"https://github.com/leanprover-community/mathlib4/blob/acdc73ba2d14eb2ad72a801acfbd9f592e924e30/Mathlib/Lean/Meta/Simp.lean#LL174C1-L186C25\">https://github.com/leanprover-community/mathlib4/blob/acdc73ba2d14eb2ad72a801acfbd9f592e924e30/Mathlib/Lean/Meta/Simp.lean#LL174C1-L186C25</a></p>\n<p>This is an implementation for doing simplification when metaprogramming:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Construct a `SimpTheorems` from a list of names. (i.e. as with `simp only`). -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">simpTheoremsOfNames</span> <span class=\"o\">(</span><span class=\"n\">lemmas</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">SimpTheorems</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">lemmas.foldlM</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">addConst</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">simpOnlyBuiltins.foldlM</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">addConst</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">{})</span>\n\n<span class=\"sd\">/-- Simplify an expression using only a list of lemmas specified by name. -/</span>\n<span class=\"c1\">-- TODO We need to write a `mkSimpContext` in `MetaM`</span>\n<span class=\"c1\">-- that supports all the bells and whistles in `simp`.</span>\n<span class=\"c1\">-- It should generalize this, and another partial implementation in `Tactic.Simps.Basic`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">simpOnlyNames</span> <span class=\"o\">(</span><span class=\"n\">lemmas</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:</span> <span class=\"n\">Simp.Config</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">e</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">simpTheoremsOfNames</span> <span class=\"n\">lemmas</span><span class=\"o\">],</span> <span class=\"n\">congrTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpCongrTheorems</span><span class=\"o\">,</span>\n      <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"n\">config</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>You see where <code>simpOnlyBuiltins</code> is explicitly added.  If you rewrote this same code without those lemmas included, you would get what you want.</p>\n<p>You can also see a complete example of defining an elaborator that uses simpOnlyLemma: <a href=\"https://github.com/leanprover-community/mathlib4/blob/acdc73ba2d14eb2ad72a801acfbd9f592e924e30/Mathlib/Tactic/Reassoc.lean#L39\">https://github.com/leanprover-community/mathlib4/blob/acdc73ba2d14eb2ad72a801acfbd9f592e924e30/Mathlib/Tactic/Reassoc.lean#L39</a> if you need help wiring it up.</p>",
        "id": 356575760,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683512071
    },
    {
        "content": "<p>Aha, thank you both.  My planned use case is a wrapper-for-simp tactic, so it wouldn't matter too much if it's messy underneath.  I won't be able to try this out immediately but it looks doable.</p>",
        "id": 356576854,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683512730
    },
    {
        "content": "<p>In addition to <code>simpOnlyNames</code> and <code>simpType</code>, there's also <code>simpEq</code> for simplifying both sides of an equality separately. I thought I'd mention this in case turning off <code>eq_self</code> was to help keep simp from simplifying a proposition away from being an equality.</p>",
        "id": 356649571,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683539437
    }
]