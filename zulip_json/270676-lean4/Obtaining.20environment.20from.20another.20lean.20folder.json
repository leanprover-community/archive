[
    {
        "content": "<p>I'm trying to figure out how to obtain the environment of a lean file which is located in a separate lean folder.<br>\nFor now I would be happy with just the env I would get from the imports (i.e. without running the actual commands in the file). <br>\nTo test this out I made two lean project as follows:</p>\n<ol>\n<li><code>lake new test math</code></li>\n<li><code>lake new test mwe</code></li>\n</ol>\n<p>the file <code>test/Test.lean</code> just contained</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n</code></pre></div>\n<p>and I built <code>test</code> with <code>lake build</code>, as usual.</p>\n<p>The other folder has a file <code>mwe/Main.lean</code> with the following code: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">file</span> <span class=\"o\">:=</span> <span class=\"s2\">\"../test/Test.lean\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span> <span class=\"n\">Elab</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">contents</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">file</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">contents</span> <span class=\"n\">file</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">hdr</span><span class=\"o\">,</span> <span class=\"n\">stt</span><span class=\"o\">,</span> <span class=\"n\">msgs</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">ctx</span>\n  <span class=\"n\">Lean.initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"s2\">\"../test/build/lib\"</span><span class=\"o\">,</span> <span class=\"s2\">\"../test/lake-packages/mathlib/build/lib\"</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">processHeader</span> <span class=\"n\">hdr</span> <span class=\"o\">{}</span> <span class=\"n\">msgs</span> <span class=\"n\">ctx</span>\n    <span class=\"k\">match</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">Nat.two_lt_of_ne</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"fail\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"ok\"</span>\n</code></pre></div>\n<p>But I can't seem to get it to work (i.e. <code>main</code> prints \"fail\"). What am I missing? I thought it had something to do with the search path, hence the two lines trying to set it up.</p>",
        "id": 362049979,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685405127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Mathlib also has dependencies which you are not including in the search path, so that may be making the import fail.</p>",
        "id": 362050683,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685405685
    },
    {
        "content": "<p>Instead of manually supplying the search path yourself I would suggest just using the default (i.e., <code>Lean.initSearchPath (← Lean.findSysroot)</code>) and using Lake to filling the details. That is, run <code>lake env lean --run ../mwe/Main.lean</code> from <code>test</code> to have it properly configure the environment with <code>test</code>'s search paths.</p>",
        "id": 362051660,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685406560
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  that was indeed the issue.<br>\nThis works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">file</span> <span class=\"o\">:=</span> <span class=\"s2\">\"../test/Test.lean\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span> <span class=\"n\">Elab</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">contents</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">file</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">contents</span> <span class=\"n\">file</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">hdr</span><span class=\"o\">,</span> <span class=\"n\">stt</span><span class=\"o\">,</span> <span class=\"n\">msgs</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">ctx</span>\n  <span class=\"n\">Lean.initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span> <span class=\"s2\">\"../test/build/lib\"</span>\n    <span class=\"o\">,</span> <span class=\"s2\">\"../test/lake-packages/mathlib/build/lib\"</span>\n    <span class=\"o\">,</span> <span class=\"s2\">\"../test/lake-packages/Qq/build/lib\"</span>\n    <span class=\"o\">,</span> <span class=\"s2\">\"../test/lake-packages/aesop/build/lib\"</span>\n    <span class=\"o\">,</span> <span class=\"s2\">\"../test/lake-packages/std/build/lib\"</span>\n    <span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">processHeader</span> <span class=\"n\">hdr</span> <span class=\"o\">{}</span> <span class=\"n\">msgs</span> <span class=\"n\">ctx</span>\n    <span class=\"k\">match</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">Nat.two_lt_of_ne</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"fail\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"ok\"</span>\n</code></pre></div>\n<p>I got the search path locations using <code>lake print-paths ...</code> in the <code>test</code> folder.</p>",
        "id": 362054628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685409240
    },
    {
        "content": "<p>Is there some option to make <code>lake print-paths</code> give back absolute paths as opposed to relative ones?</p>",
        "id": 362054681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685409277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Obtaining.20environment.20from.20another.20lean.20folder/near/362054681\">said</a>:</p>\n<blockquote>\n<p>Is there some option to make <code>lake print-paths</code> give back absolute paths as opposed to relative ones?</p>\n</blockquote>\n<p>No. But you can covert them through some intermediary step (e.g. <code>readlink -m</code> on the command line or <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/System/IO.html#IO.FS.realPath\">IO.FS.realpath</a> in Lean).</p>",
        "id": 362055248,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685409852
    },
    {
        "content": "<p>Yes, of course. I was hoping there was some secret shortcut :)</p>",
        "id": 362055292,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685409910
    },
    {
        "content": "<p>Sadly, no. Lake always uses relative paths itself so it doesn't have any absolute paths to provide you with. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 362055504,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685410095
    }
]