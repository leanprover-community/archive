[
    {
        "content": "<p>Hi,<br>\nI have written some code that takes a lean file and compiles it and show any errors (I will do more manipulations later). It does work when I run it inside an editor with<code>#eval</code>, but if I try to compile and run the executable I got the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Init'</span>\n</code></pre></div>\n<p>Here is the code that I am trying to run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">sourceCode</span> <span class=\"n\">fileName</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">log</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.process</span> <span class=\"n\">sourceCode</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.getEnv</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">fileName</span>\n  <span class=\"n\">for</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">log.msgs</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"message: {← m.toString}\"</span>\n  <span class=\"k\">if</span> <span class=\"n\">log.hasErrors</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"log has errors\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">argv</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"bp\">←</span>\n    <span class=\"k\">match</span> <span class=\"n\">argv</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EStateM.throw</span> <span class=\"s2\">\"lean source file not provided\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">fileName</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"n\">sourceCode</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">fileName</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"source code = {sourceCode}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">Name.str</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"s2\">\"Init\"</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}]</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span> <span class=\"o\">:</span> <span class=\"n\">Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"n\">fileName</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">sourceCode</span> <span class=\"n\">fileName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toIO</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span> <span class=\"o\">[</span><span class=\"s2\">\"A.lean\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>A.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>Can anybody help me understand why I can't run it on a binary and to find a way around this problem?</p>",
        "id": 367268943,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1687047550
    },
    {
        "content": "<p>In short, to run Lean meta code from your own binary you need to a few things:</p>\n<ol>\n<li>Add <code>supportInterpreter := true</code> to the Lake <code>lean_exe</code> configuration of your binary.</li>\n<li>Call <code>Lean.initSearchPath</code>(from <code>Lean.Util.Path</code>) before importing modules.</li>\n<li>Invoke your executable via <code>lake exe myExe</code> or via <code>lake env path/to/my/exe</code> in project of modules you wish to import from your binary.</li>\n</ol>\n<p>Delving deeper, step (1) links your binary to compiled Lena meta code (which is not linked by default). Step (2) tells Lean where to search for import modules. Specifically, it tells Lean to learn module locations from the environment (i.e., through environment variables like <code>LEAN_PATH</code>) . Finally, step (3) has Lake provide project module locations to Lean by configuring the environment with appropriate paths for the project .</p>",
        "id": 367271452,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687048882
    },
    {
        "content": "<p>(I was going to link to <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20could.20not.20find.20native.20implementation/near/357799547\">this thread</a> but then Mac just posted this more comprehensive answer)</p>",
        "id": 367271599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687048947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes</span> has marked this topic as resolved.</p>",
        "id": 368033563,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687289159
    }
]