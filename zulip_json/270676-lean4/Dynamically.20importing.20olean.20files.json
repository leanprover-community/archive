[
    {
        "content": "<p>Hi, I have the following situation, I have a bunch of olean files that I pre-computed. Each of the oleans contains a structure (call it <code>A</code>) which has a bunch of fields, some of the fields contain data which describes the structure and some are boolean and numerical (Nat, Int), which describe the properties of the data and some are proofs that those fields indeed describe the correct things.</p>\n<p>Now I also have oleans, which have structures that are the \"skeleton\" versions of the above structure (call it <code>B</code>) in that they only contain the boolean and numerical fields, but not the data or the proofs.</p>\n<p>I want to do the following, in a proof I want to search for an <code>A</code> which satisfies a given boolean predicate <code>p</code> and add it to my hypothesis, or give an error if the search cannot find such an <code>A</code>. A straightforward approach would be to import all the oleans with <code>A</code>'s and put them all in a list and search the list. The problem is, there are many <code>A</code>'s and all-together the oleans are too big to import all of them. So my alternative would be to import all the <code>B</code>'s since they are much smaller as they don't contain all the data, run the search on a list of <code>B</code>'s and, if the search finds a suitable <code>B</code>, dynamically import the olean with the <code>A</code> whose skeleton this <code>B</code> is and then add the <code>A</code> to the list of hypothesis.</p>\n<p>My question is, can this be done and how would one go about doing this?</p>\n<p>I found the function <a href=\"https://github.com/leanprover/lean4/blob/742d053a97bdd109a41a921facd1cd6a55e89bc7/src/Lean/Environment.lean#L735-L795\">importModules</a>, but I'm not quite sure how to use it. My attempt was something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"import_graph_for_invariant\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">sysRoot</span> <span class=\"bp\">←</span> <span class=\"n\">findSysroot</span>\n    <span class=\"n\">initSearchPath</span> <span class=\"n\">my_path</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Data.A1</span> <span class=\"o\">:</span> <span class=\"n\">Import</span> <span class=\"o\">}]</span> <span class=\"o\">{}</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>But the <code>env</code> that the function returns is not an extension of the environment given by <code>IO.getEnv</code> as it only contains the import for <code>Data.A1</code>.  Also I'm not quite sure how to use <code>env</code> in this situation. And I got a bit stuck here.</p>",
        "id": 347172842,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1680706479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439334\">@Jure Taslak (Slovenia)</span>, did you see <a href=\"#narrow/stream/270676-lean4/topic/exporting.20and.20importing.20a.20.60DiscrTree.60/near/346709915\">Mario's code</a> for pickling and unpickling recently? I'm not sure exactly what you want, but it may be helpful.</p>",
        "id": 347293070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680750755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> That is very helpful, thank you. I can't however see how to use this in a theorem to unpickle my data structure there, since I can't have unsafe theorems.</p>",
        "id": 347326233,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1680767158
    },
    {
        "content": "<p>I don't think I understand what you're doing, but the unsafe modifier here is in no way increasing your difficulties relative to other ways to get things off the disk. You might enjoy <code>Std.Term.Unsafe</code>.</p>",
        "id": 347326584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680767271
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Load an object from disk. Better to use `withUnpickle`, which frees memory.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">unpickle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">CompactedRegion</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unsafe</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">region</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">readModuleData</span> <span class=\"n\">path</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">unsafeCast</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">region</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Load an object from disk and run some continuation on it, freeing memory afterwards. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">withUnpickle</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">IO</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">region</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">unpickle</span> <span class=\"n\">α</span> <span class=\"n\">path</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"n\">unsafe</span> <span class=\"n\">region.free</span>\n  <span class=\"n\">pure</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 347326803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680767336
    },
    {
        "content": "<p>I probably explained it badly, I want to read an olean from disk and use a term from this olean to fill a goal in a proof.<br>\nI suppose my confusion is in how unsafe works, I'll read up on it.</p>",
        "id": 347327959,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1680767711
    },
    {
        "content": "<p>You cannot dynamically add an import to the Environment, except by copying over all declarations manually</p>",
        "id": 347328376,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680767849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439334\">Jure Taslak (Slovenia)</span> <a href=\"#narrow/stream/270676-lean4/topic/Dynamically.20importing.20olean.20files/near/347172842\">said</a>:</p>\n<blockquote>\n<p>The problem is, there are many <code>A</code>'s and all-together the oleans are too big to import all of them</p>\n</blockquote>\n<p>Are you sure this is a problem in practice? The OS should take care of mapping and unmapping .olean pages into memroy as availably memory allows</p>",
        "id": 347329014,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680768042
    },
    {
        "content": "<p>In any case, this sounds like an interesting use case, I would love to hear more about what you are doing here</p>",
        "id": 347329512,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680768174
    },
    {
        "content": "<p>I actually haven't tried to import all of the oleans (I will try it later, have a meeting now), but there are about 20k of them, with a total size of ~35GB. They store finite graphs and some of their invariant. We want to use this to try to search for counterexamples for a given hypothesis about graphs.<br>\nSo we want to, given a hypothesis forall g : Graph, p g, search for a counterexample via the invariants, which are mostly numeric and boolean (at least the ones we implemented so far). But then to actually produce a proof we need the actual graph not just the invariants (i.e. also the edges).<br>\nPerhaps we can try to reduce the total size of the oleans by optimizing our representation, but it will be large in any case, that's why I though dynamically importing only the ones we need might be a solution.</p>",
        "id": 347330868,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1680768573
    },
    {
        "content": "<p>Cool application, that's probably a new world record for .olean sizes! And would be an interesting stress test for the .olean <code>mmap</code>ing indeed. In theory it should be perfectly lazy, slowing down considerably only when your actual working set, e.g. a single graph involved in a proof, doesn't fit into memory.</p>",
        "id": 347332525,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680769058
    },
    {
        "content": "<p>In the import phase, Lean only needs to access the <code>Declaration</code> objects of all imports, not their contents</p>",
        "id": 347332793,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680769119
    }
]