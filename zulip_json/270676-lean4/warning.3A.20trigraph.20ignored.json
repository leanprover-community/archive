[
    {
        "content": "<p>I got this funny error while compiling Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Component</span><span class=\"bp\">/</span><span class=\"n\">PenroseDiagram.c</span><span class=\"o\">:</span><span class=\"mi\">1465</span><span class=\"o\">:</span><span class=\"mi\">456698</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">trigraph</span> <span class=\"n\">ignored</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">Wtrigraphs</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This points into the middle of a very long minified javascript string in <code>_init_l_ProofWidgets_PenroseDiagram___closed__1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span><span class=\"n\">return</span> <span class=\"n\">r.setEdge</span><span class=\"o\">({</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Q</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">o</span><span class=\"o\">}),[</span><span class=\"n\">Q</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">]},</span><span class=\"n\">T</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">t.primary</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">for</span><span class=\"o\">(</span><span class=\"bp\">;!</span><span class=\"n\">o.isEmpty</span><span class=\"o\">()</span><span class=\"bp\">;</span><span class=\"o\">)</span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">o.dequeue</span><span class=\"o\">())</span><span class=\"bp\">;...</span>\n                                                   <span class=\"c1\">-- ^ here</span>\n</code></pre></div>\n<p>I don't really know what trigraph it's talking about there, but maybe long string literals are problematic for the C compiler?</p>",
        "id": 398892388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698410922
    },
    {
        "content": "<p>Why is this an error? Ignoring a trigraph should be OK, right? Processing it as a trigraph would be bad.</p>",
        "id": 398892737,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698411072
    },
    {
        "content": "<p>The file indeed contains <code>??(</code>, which should be processed as <code>[</code> if the compiler is being strict with trigraphs (but we don't want it to, so the warning tells us the compiler is doing what we want).</p>",
        "id": 398895064,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698411848
    },
    {
        "content": "<p>Assuming that this is a C toolchain invocation that is controlled by Lean, it seems safe to disable the warning (-Wno-trigraphs), though it could also be a good idea to add a test to Lean that it doesn't inadvertently enable trigraph processing.</p>",
        "id": 398995394,
        "sender_full_name": "Reid Barton",
        "timestamp": 1698458279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, if this is a C invocation being made by <code>lake</code>, could you please create an issue to track this?</p>",
        "id": 400463394,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699247411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"524339\">@Yicheng Qian</span> just made <a href=\"https://github.com/leanprover/lean4/issues/2829\">https://github.com/leanprover/lean4/issues/2829</a>.</p>",
        "id": 400465618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699249339
    },
    {
        "content": "<p>I investigated a bit, more details at the issue.</p>",
        "id": 400502204,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699266381
    }
]