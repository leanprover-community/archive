[
    {
        "content": "<p>I noticed, that one can do the following in the <code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getLeanToolchain</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">code</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"o\">⟨</span><span class=\"s2\">\"lean-toolchain\"</span><span class=\"o\">⟩</span>\n    <span class=\"n\">return</span> <span class=\"n\">code.replace</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"s2\">\"\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">replace</span> <span class=\"s2\">\"leanprover/lean4:\"</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">leanVersion</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">getLeanToolchain.run'</span> <span class=\"o\">()</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"bp\">@</span> <span class=\"n\">leanVersion</span>\n</code></pre></div>\n<p>With this, updating the <code>lean-toolchain</code> to the correct <code>v4.x.0</code>-version and calling <code>lake update</code> automatically fetches the correct mathlib version.</p>\n<p>How wrong is this? Or is this fine? Is there maybe even an easier way to do this?</p>",
        "id": 400913586,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699438772
    },
    {
        "content": "<p>Note that I only create the <code>v4.X.0</code> tags for Mathlib at the <em>first</em> commit where Mathlib moves to that version; it doesn't update after that.</p>",
        "id": 400923398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699442375
    },
    {
        "content": "<p>I would say this is a horrible hack, that we will regret later, but is at least as good as the alternatives available right now. :-)</p>",
        "id": 400923519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699442419
    },
    {
        "content": "<p>In Lean 3, we had <code>leanproject --no-lean-upgrade</code>, which effectively had this behavior. Is this something we want to restore?</p>",
        "id": 400925272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699443158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/read.20tool-chain.20inside.20lakefile/near/400923398\">said</a>:</p>\n<blockquote>\n<p>Note that I only create the <code>v4.X.0</code> tags for Mathlib at the <em>first</em> commit where Mathlib moves to that version; it doesn't update after that.</p>\n</blockquote>\n<p>That's correct, and honestly I think that's convenient. I mainly use these tags because I want a slower updating pace that does not involve searching and copying commit-hashes. If you were to update the <code>v4.X.0</code> tags automatically to the latest commit, I would just follow the frozen <code>v4.(X-1).0</code> tag instead and wait another month.</p>",
        "id": 400929575,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699444883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> some code golf: you can use <code>@ s!\"v{Lean.versionString}\"</code> for the same result. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 401035793,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699483555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/read.20tool-chain.20inside.20lakefile/near/401035793\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> some code golf: you can use <code>@ s!\"v{Lean.versionString}\"</code> for the same result. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>amazing, thx! Couldn't find that before.</p>",
        "id": 401173744,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699542035
    }
]