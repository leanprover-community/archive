[
    {
        "content": "<p>I'm trying to understand the following code:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/510bc47cc366e7d231c62c31f7ec1cbbacda9e6d/src/Init/Prelude.lean#L2528-L2531\">https://github.com/leanprover/lean4/blob/510bc47cc366e7d231c62c31f7ec1cbbacda9e6d/src/Init/Prelude.lean#L2528-L2531</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Access an element from an array, or panic if the index is out of bounds. -/</span>\n<span class=\"kd\">@[extern \"lean_array_get\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Array.get</span><span class=\"bp\">!</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Array.getD</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">default</span>\n</code></pre></div>\n<p>In <code>get!</code> for <code>List</code>, I can see the how the panic is happening clearly:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/510bc47cc366e7d231c62c31f7ec1cbbacda9e6d/src/Init/Data/List/BasicAux.lean#L17-L20\">https://github.com/leanprover/lean4/blob/510bc47cc366e7d231c62c31f7ec1cbbacda9e6d/src/Init/Data/List/BasicAux.lean#L17-L20</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">as</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>     <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"invalid index\"</span>\n</code></pre></div>\n<p>But how is a panic obtained for the <code>Array</code>? Will it not just return <code>default</code>?</p>",
        "id": 383994569,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691765463
    },
    {
        "content": "<p>The C implementation of \"lean_array_get\" does call \"lean_array_get_panic\" when the index is out of bounds. The reference implementation you see is compatible with that since <code>panic!</code> is basically a sugar-coated function that returns <code>default</code>.</p>",
        "id": 383997884,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691765987
    },
    {
        "content": "<p>This is the real code: <a href=\"https://github.com/leanprover/lean4/blob/510bc47cc366e7d231c62c31f7ec1cbbacda9e6d/src/include/lean/lean.h#L741\">https://github.com/leanprover/lean4/blob/510bc47cc366e7d231c62c31f7ec1cbbacda9e6d/src/include/lean/lean.h#L741</a></p>",
        "id": 383998924,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691766145
    }
]