[
    {
        "content": "<p>When I'm writing a type that does a simple guard check using a proof of a proposition as an argument, is there a way to make the proof argument implicit and provide a default tactic. </p>\n<p>Here is the example I'm working on. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Context</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">extend</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Context</span> <span class=\"n\">names</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">names.contains</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Context</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">::</span><span class=\"n\">names</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cat</span> <span class=\"o\">:=</span> <span class=\"n\">Context.extend</span> <span class=\"n\">Context.empty</span> <span class=\"s2\">\"cat\"</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catdog</span> <span class=\"o\">:=</span> <span class=\"n\">Context.extend</span> <span class=\"n\">cat</span>  <span class=\"s2\">\"dog\"</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catdogcat</span> <span class=\"o\">:=</span> <span class=\"n\">Context.extend</span> <span class=\"n\">catdog</span> <span class=\"s2\">\"cat\"</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Can't add cat again, the tactic will fail.</span>\n</code></pre></div>\n<p>This works fine, but I have to pass the  argument <code>(by decide)</code> explicitly every time I use Context.extend. I tried making the third argument implicit like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Context</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">extend</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Context</span> <span class=\"n\">names</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">names.contains</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Context</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">::</span><span class=\"n\">names</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">Context.extend</span> <span class=\"o\">[]</span> <span class=\"n\">Context.empty</span> <span class=\"s2\">\"cat\"</span> <span class=\"bp\">?</span><span class=\"n\">m.3624</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">List.contains</span> <span class=\"o\">[]</span> <span class=\"s2\">\"cat\"</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Since this is always a decidable problem is there a way to give a hint to the compiler to use <code>decide</code> to synthesize the implicit argument?</p>",
        "id": 400400340,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1699196111
    },
    {
        "content": "<p>You can add a default argument for the proof parameter of the <code>extend</code> constructor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Context</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">extend</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Context</span> <span class=\"n\">names</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">names.contains</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Context</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">::</span><span class=\"n\">names</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cat</span> <span class=\"o\">:=</span> <span class=\"n\">Context.extend</span> <span class=\"n\">Context.empty</span> <span class=\"s2\">\"cat\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catdog</span> <span class=\"o\">:=</span> <span class=\"n\">Context.extend</span> <span class=\"n\">cat</span>  <span class=\"s2\">\"dog\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catdogcat</span> <span class=\"o\">:=</span> <span class=\"n\">Context.extend</span> <span class=\"n\">catdog</span> <span class=\"s2\">\"cat\"</span>\n<span class=\"c1\">-- Can't add cat again, the tactic will fail.</span>\n</code></pre></div>",
        "id": 400402577,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699197876
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> I didn't know about default arguments in Lean!</p>",
        "id": 400406123,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1699201111
    },
    {
        "content": "<p>As a follow up to this.</p>\n<p>How do I define Repr. When I use the <code>deriving Repr</code> it fails, I guess because it can't print the proof term. How do I tell it to ignore the proof term when printing the Context term?</p>",
        "id": 400406238,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1699201221
    },
    {
        "content": "<p>right now you have to write <code>Repr</code> instances manually if <code>deriving Repr</code> fails</p>",
        "id": 400406369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699201353
    },
    {
        "content": "<p><code>instance (l) : Repr (Context l) := ...</code></p>",
        "id": 400406380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699201372
    },
    {
        "content": "<p>--</p>",
        "id": 400436081,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1699231584
    },
    {
        "content": "<p>I realized a simpler way to to the context would be like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span>  <span class=\"n\">Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">list</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">//</span> <span class=\"n\">list</span> <span class=\"bp\">=</span> <span class=\"n\">list.eraseDups</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>But then I don't know how to prove that if a list meets the property to be a context, then the tail of that list is also a Context. </p>\n<p>i.e., </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">):</span> <span class=\"n\">Context</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span>  <span class=\"o\">‚ü®</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">‚ü®</span> <span class=\"o\">[],</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">‚ü©</span>\n   <span class=\"bp\">|</span>  <span class=\"o\">‚ü®</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">‚ü®</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">‚ü©</span>\n</code></pre></div>\n<p>Clearly, I need to do something with <code>p</code> but I'm not sure what.</p>",
        "id": 400436320,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1699231720
    },
    {
        "content": "<p>The other thing I'm struggling with is how to write a fromList function. I want to take a list, apply eraseDups and then produce a Context. It seems obvious, but I can figure out how to prove that <code>list.eraseDups = list.eraseDups.eraseDups</code>.</p>",
        "id": 400436749,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1699231978
    },
    {
        "content": "<p>This might not be what you want, but if you're ok with using Lean's Std library you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Nodup#doc\">docs#List.Nodup</a>. Then you'll probably find the appropriate lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.nodup_cons#doc\">docs#List.nodup_cons</a>. And if you're ok with using Mathlib you could even go for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset#doc\">docs#Finset</a>.</p>",
        "id": 400514133,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699270956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span>  Thanks Marcus. As I'm still very new to using Lean, I haven't figured out how to import stuff from Mathlib. Do I need to create a project folder to do so? Up until now I've just been working in a single file using whatever is in Prelude.</p>",
        "id": 400559359,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1699285500
    },
    {
        "content": "<p>Yes, you need to create a project that depends on mathlib</p>",
        "id": 400560822,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699285945
    },
    {
        "content": "<p><code>lake init myproj math</code></p>",
        "id": 400561030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699286016
    }
]