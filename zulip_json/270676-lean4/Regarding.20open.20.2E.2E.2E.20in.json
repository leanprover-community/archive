[
    {
        "content": "<p>I would like to <code>open Nat</code> in a theorem I am writing, but it seems like <code>open ... in</code> does not work as I expected.  As a mwe, I want to remove the <code>Nat</code> prefix in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exampl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.zero_lt_of_ne_zero</span> <span class=\"n\">Nat.one_ne_zero</span>\n</code></pre></div>\n<p>If I preface with <code>open Nat in</code>, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">exampl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zero_lt_of_ne_zero</span> <span class=\"n\">one_ne_zero</span>\n\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">one_ne_zero'</span>\n</code></pre></div>\n<p>The first identifier is understood correctly as <code>Nat. zero_lt_of_ne_zero</code>, but the second one is not.  Why is this, and what is the right way to open namespaces in restricted contexts?</p>",
        "id": 384061000,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691778361
    },
    {
        "content": "<p>I suspect one_ne_zero is protected</p>",
        "id": 384061672,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691778540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Regarding.20open.20.2E.2E.2E.20in/near/384061672\">said</a>:</p>\n<blockquote>\n<p>I suspect one_ne_zero is protected</p>\n</blockquote>\n<p>Ooh, thanks Ruben!  I had forgotten about this possibility; I am sure that is why.</p>",
        "id": 384061964,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691778608
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">exampl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zero_lt_of_ne_zero</span> <span class=\"n\">one_ne_zero</span>\n</code></pre></div>",
        "id": 384085887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691785503
    },
    {
        "content": "<p>Thanks for letting me know about this functionality!</p>",
        "id": 384097400,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691789550
    }
]