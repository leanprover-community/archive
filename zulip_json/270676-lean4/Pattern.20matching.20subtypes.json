[
    {
        "content": "<p>I was trying to write a pattern match on a subtype structure and got a strange error. Here's an #MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">drop_false_head</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">Bool</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Vector.cons</span> <span class=\"n\">false</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">patterns</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">z</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">explicit</span> <span class=\"n\">pattern</span> <span class=\"kd\">variable</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">only</span> <span class=\"n\">occurs</span> <span class=\"k\">in</span> <span class=\"n\">positions</span> <span class=\"n\">that</span> <span class=\"n\">are</span> <span class=\"n\">inaccessible</span> <span class=\"n\">to</span> <span class=\"n\">pattern</span> <span class=\"n\">matching</span>\n  <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">::</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">z.1</span><span class=\"o\">),</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"bp\">↑</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Is there a way to get the pattern matcher to do this (there's an annotation that allows me to mark <code>Vector.cons</code> here to work as a constructor for pattern matching, right)? Or is this a fundamental limitation with how the pattern matcher gets delaborated on subtypes?</p>\n<p>(I'm not looking for a workaround here, for this example I can just pattern match the subtype with something like <code>  | ⟨true :: z,hcons⟩ =&gt; some ⟨z, by aesop⟩</code>, I'm curious about the pattern matching in general in this context)</p>",
        "id": 361033447,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1685014940
    },
    {
        "content": "<p>I guess the issue is that the <code>property := (_ : ...)</code> part is actually hiding a proof, and you can't pattern match proofs</p>",
        "id": 361049356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685018283
    },
    {
        "content": "<p>note that in your proposed alternative match, you have an additional binding <code>hcons</code> that doesn't exist in the original version</p>",
        "id": 361049618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685018339
    },
    {
        "content": "<p>On the other hand, we can write an alternative recursion principle that breaks a vector down into <code>nil</code> and <code>cons</code> cases, kind of like the computational analogue of <code>Vector.inductionOn</code>. Is there some way to instruct the equation compiler / pattern matcher to work with such an alternative recursion principle (akin to how <code>induction ... using ...</code> can be used to use an alternative induction principle)?</p>",
        "id": 366828321,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1686921576
    }
]