[
    {
        "content": "<p>I just finished reading <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">https://github.com/arthurpaulino/lean4-metaprogramming-book</a><br>\nMaybe I missed something, but I feel like I can now list the hypotheses, but I can't pattern match on them</p>\n<p>Here is the Lean code to list the hypotheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"list_hypothesis\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadLCtx.getLCtx</span>\n    <span class=\"n\">ctx.forM</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span><span class=\"o\">:</span> <span class=\"n\">Lean.LocalDecl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">declExpr</span> <span class=\"o\">:=</span> <span class=\"n\">decl.toExpr</span> <span class=\"c1\">-- Find the expression of the declaration.</span>\n      <span class=\"k\">let</span> <span class=\"n\">declName</span> <span class=\"o\">:=</span> <span class=\"n\">decl.userName</span> <span class=\"c1\">-- Find the name of the declaration.</span>\n      <span class=\"k\">let</span> <span class=\"n\">declType</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.inferType</span> <span class=\"n\">declExpr</span> <span class=\"c1\">-- Find the type.</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"+ local decl[name: {declName} | type: {declType}]\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">list_hypothesis</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I just want to do something simple, like I can do in Ltac, find an hypothesis that I have a theorem for and apply it automatically, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">goal</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span> <span class=\"bp\">|-</span> <span class=\"o\">[]</span> <span class=\"bp\">&lt;&gt;</span> <span class=\"bp\">?</span><span class=\"n\">X</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">Y</span> <span class=\"o\">::</span> <span class=\"bp\">?</span><span class=\"n\">YS</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">app_cons_not_nil</span>\n</code></pre></div>\n<p>How would one go about doing something like this in Lean4?</p>\n<p>Or how would one program the discriminate tactic?</p>",
        "id": 349096887,
        "sender_full_name": "awalterschulze",
        "timestamp": 1681389510
    },
    {
        "content": "<p>I think the <code>Qq</code> package allows for pattern matching on expressions (but I’m still a novice in this area).</p>",
        "id": 349097568,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681389684
    },
    {
        "content": "<p>Do you have a link?</p>",
        "id": 349097642,
        "sender_full_name": "awalterschulze",
        "timestamp": 1681389704
    },
    {
        "content": "<p><a href=\"https://github.com/gebner/quote4\">https://github.com/gebner/quote4</a></p>",
        "id": 349097826,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681389739
    },
    {
        "content": "<p>But it’s already imported into mathlib4 (or maybe std4?), so you probably already have it available in your project</p>",
        "id": 349098111,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681389793
    },
    {
        "content": "<p>I’m sure there are some examples of Qq being used in mathlib4 for such pattern matching. Hopefully someone who knows the internals of the tactic folder can point us to such an example.</p>",
        "id": 349098642,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681389909
    },
    {
        "content": "<p>This looks like it might be on the right track, thank you :)</p>",
        "id": 349100054,
        "sender_full_name": "awalterschulze",
        "timestamp": 1681390274
    },
    {
        "content": "<p>This example might be the closest to what I am looking for <a href=\"https://github.com/gebner/quote4/blob/master/examples/conjs.lean\">https://github.com/gebner/quote4/blob/master/examples/conjs.lean</a><br>\nAt least in terms of the pattern matching</p>\n<p>I also have to figure out what the meta programming command is to apply another tactic</p>",
        "id": 349101427,
        "sender_full_name": "awalterschulze",
        "timestamp": 1681390545
    },
    {
        "content": "<p>For the latter, i think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.runTactic#doc\">docs4#Lean.Elab.runTactic</a></p>",
        "id": 349101997,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681390672
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.evalTactic#doc\">docs4#Lean.Elab.Tactic.evalTactic</a></p>",
        "id": 349102407,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681390746
    },
    {
        "content": "<p>Yes, indeed <code>runTactic</code> and <code>evalTactic</code> are the ways to run a tactic given its code. <code>evalTactic</code> is in <code>TacticM</code> and simply runs and modifies the state. <code>runTactic</code> is in <code>MetaM</code>, runs on a metavariable and returns the remaining goals (and an updated Elaborator state).</p>\n<p>In practice to run say <code>apply</code> you can just run the function defining the tactic. Often there is a function at meta level that is lifted, and so you can run at meta level.</p>",
        "id": 349119208,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1681394502
    },
    {
        "content": "<p>That all seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_app_cons_not_nil</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">≠</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h'</span> <span class=\"bp\">;</span> <span class=\"n\">contradiction</span> <span class=\"o\">}</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"applyit\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">checkTypeQ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">levelOne</span><span class=\"o\">)</span> <span class=\"n\">goal</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">([]</span> <span class=\"bp\">≠</span> <span class=\"bp\">$</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"bp\">$</span><span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">ty</span> <span class=\"k\">then</span>\n      <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">list_app_cons_not_nil</span> <span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"o\">[]</span> <span class=\"bp\">≠</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">applyit</span>\n</code></pre></div>\n<p>Obviously there are still so many follow up questions, but I think this answers this question.<br>\nThank you so much for your help :D</p>",
        "id": 349125088,
        "sender_full_name": "awalterschulze",
        "timestamp": 1681395639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557483\">awalterschulze</span> has marked this topic as resolved.</p>",
        "id": 349125217,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681395666
    },
    {
        "content": "<p>For anyone looking for more examples, see <a href=\"https://github.com/katydid/proofs/commit/e0764aab867282c04f3b769b4197b224a1225b31#diff-ebf5b41bca7865cdfc1cd496cca58a801b060bcd615f0c1960b6edb2d6de9dcd\">https://github.com/katydid/proofs/commit/e0764aab867282c04f3b769b4197b224a1225b31#diff-ebf5b41bca7865cdfc1cd496cca58a801b060bcd615f0c1960b6edb2d6de9dcd</a></p>",
        "id": 349387918,
        "sender_full_name": "awalterschulze",
        "timestamp": 1681479885
    },
    {
        "content": "<p>I see <code>twitch stream 2023-04-13 start of meta programming</code> as the commit message. Are you streaming Lean 4? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 349393084,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681480931
    },
    {
        "content": "<p>Ah yes, we are streaming as we learn leanprover (lean4) over here <a href=\"https://www.twitch.tv/awalterschulze\">https://www.twitch.tv/awalterschulze</a></p>\n<p>The archive of streams is here <a href=\"https://www.youtube.com/playlist?list=PLYwF9EIrl42RFQgbmcR_LSCWRIx2WKbXs\">https://www.youtube.com/playlist?list=PLYwF9EIrl42RFQgbmcR_LSCWRIx2WKbXs</a><br>\nWe are still learning, so it can also be a good case study for where new users get stuck</p>\n<p>We'll probably continue to do some meta programming to create our new tactic for lists (baListic) next time, probably 11 May at 18:00 UK time<br>\nBut the announcements of new streams will be made here: <a href=\"https://www.meetup.com/london-tydd/\">https://www.meetup.com/london-tydd/</a></p>",
        "id": 352487693,
        "sender_full_name": "awalterschulze",
        "timestamp": 1682416590
    }
]