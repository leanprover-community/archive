[
    {
        "content": "<p>Can someone help with this error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- (kernel) invalid projection h.2</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">h.2</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 396687189,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697328489
    },
    {
        "content": "<p>I think I understand the reason behind this error. <code>p.2</code> usually means applying some function to <code>p</code> to extract the second value (e.g. <code>Prod.snd</code>), but there can't in general be such a function for <code>∃ x : α, p x</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extractSecond</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">p.2</span>\n<span class=\"c1\">-- `.2` really means applying the function `Prod.snd`</span>\n<span class=\"k\">#check</span> <span class=\"n\">Prod.snd</span> <span class=\"c1\">-- α × β → β</span>\n<span class=\"k\">#print</span> <span class=\"n\">extractSecond</span> <span class=\"c1\">-- fun {α} p =&gt; p.snd</span>\n\n<span class=\"c1\">-- The only way of extracting the second value from an `Exists` is by</span>\n<span class=\"c1\">-- supplying a function which will take it as an input.</span>\n<span class=\"k\">#check</span> <span class=\"n\">Exists.elim</span> <span class=\"c1\">-- (∃ x, p x) → (∀ x, p x → b) → b</span>\n\n<span class=\"c1\">-- There couldn't be a general `Exists.snd` function, because we don't know what type it should return.</span>\n<span class=\"kd\">def</span> <span class=\"n\">Exists.snd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"c1\">-- error: unknown identifier `x`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396689414,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697329977
    },
    {
        "content": "<p>Ah I think that makes sense</p>",
        "id": 396691240,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697331049
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 396691301,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697331094
    },
    {
        "content": "<p>So what I wrote (P \"not dependent on x\") is actually what you wrote, where P is, because x is in the local context? Will that be correct</p>",
        "id": 396691556,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697331214
    },
    {
        "content": "<p>I'm not sure I understand the question. Where is <code>x</code> is the local context?</p>",
        "id": 396692278,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697331610
    },
    {
        "content": "<p>If you're asking why it works with <code>let</code>, yeah, given <code>h : ∃ x, p x</code>, the <code>let ⟨x, h'⟩ := h</code> syntax puts <code>x</code> in the local context so <code>h' : p x</code> will be clearly well-typed</p>",
        "id": 396692419,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697331681
    },
    {
        "content": "<p>In your case you're right that <code>P</code> not does not depend on <code>x</code>. You could make an <code>Exists.snd</code> function which works for such non-dependent cases</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Note: `p` is `Prop`, not `α → Prop`</span>\n<span class=\"kd\">def</span> <span class=\"n\">Exists.snd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.elim</span> <span class=\"n\">h</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 396693006,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697331965
    },
    {
        "content": "<p>Any error with \"kernel\" in is normally considered a bug in the elaborator letting it get that far. I'd suggest opening a Lean 4 issue for this example</p>",
        "id": 396893869,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697459974
    },
    {
        "content": "<p>Ah okay :)</p>",
        "id": 396897694,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697461322
    },
    {
        "content": "<p>You can define an <code>Exists.snd</code> perfectly fine, just have it use <code>Exists.fst</code> to refer to the witness (i.e., <code>x</code>), reflecting the dependent nature. In fact, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Basic.html#Exists.snd\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Basic.html#Exists.snd</a> does exist in Mathlib</p>",
        "id": 397161108,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697566735
    },
    {
        "content": "<p>Looks like <code>Exists.snd</code> is only defined for <code>∃ x : b, p b</code> where <code>b : Prop</code></p>",
        "id": 397216050,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697597317
    },
    {
        "content": "<p>That’s because its type mentions <code>Exists.fst</code>, which can’t exist if <code>b</code> is not a proposition (you’d have to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.choose#doc\">docs#Classical.choose</a>). That’s probably also why the <code>.2</code> notation fails.</p>",
        "id": 397265169,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1697619816
    },
    {
        "content": "<p>Ah, apologies. I thought <code>Exists.fst</code> could be defined so long as it is marked noncomputable, but that turns out not to be true</p>",
        "id": 397287350,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697627153
    }
]