[
    {
        "content": "<p>The output of the following snippet </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">StateM</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Except.error</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Except.error</span> <span class=\"bp\">?</span><span class=\"n\">m.55</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Except</span> <span class=\"bp\">?</span><span class=\"n\">m.53</span> <span class=\"bp\">?</span><span class=\"n\">m.54</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.52</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">StateM</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"n\">Bool</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>The code is though correct and the placeholder is of type <code>String</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">StateM</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Except.error</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>This makes the strategy of putting <code>_</code>s in your code to fill gradually based on the expected types a bit less reliable,<br>\nbecause if, like me, you're not really accustomed to monads, it can trick you into thinking that your doing something wrong without understanding why, while you're actually on the right path.</p>\n<p>Why does this happen here? I assume it's some kind of inherent limitation of the way monad lifting works (which in general is very nice)?. Is there a different way I could've written the code so that <code>_</code> would have worked as I expected it to?</p>",
        "id": 340864581,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1678455713
    },
    {
        "content": "<p>I would argue you are still doing something wrong. The proper way to throw an exception in <code>ExceptT</code> is to use <code>throw _</code>, there is no such issue there</p>",
        "id": 340881628,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678459613
    },
    {
        "content": "<p>Ok, thanks, good to know then!</p>",
        "id": 340948689,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1678476662
    }
]