[
    {
        "content": "<p>Hi, i am curently reading the book <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/polymorphism.html\">https://leanprover.github.io/functional_programming_in_lean/type-classes/polymorphism.html</a>, and doing some exercise about recursive instance search.</p>\n<p>I am in trouble with building the instance OfNat Even. If i am right about the exercise, the goal is to provide a meaning to (n+2:Even) by knowing what is (n:Even). I could not figure out a way to have lean accept my code, and the compiler does not like to have something between instance and :. Could someone explain me what i missed? <br>\nThank you very much.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">times2</span><span class=\"o\">::</span>\n  <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.Add</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"bp\">→</span> <span class=\"n\">Even</span><span class=\"bp\">→</span> <span class=\"n\">Even</span>\n  <span class=\"bp\">|</span><span class=\"n\">times2</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">times2</span> <span class=\"n\">b</span><span class=\"bp\">=&gt;</span><span class=\"n\">times2</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span><span class=\"n\">Add</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span><span class=\"o\">:=</span><span class=\"n\">Even.Add</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span><span class=\"o\">:=</span> <span class=\"n\">Even.times2</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span><span class=\"o\">:=</span> <span class=\"n\">Even.Add</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Even.times2</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 346683017,
        "sender_full_name": "yannis monbru",
        "timestamp": 1680557649
    },
    {
        "content": "<p>You might want something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span><span class=\"o\">:=</span> <span class=\"n\">Even.Add</span> <span class=\"o\">(</span><span class=\"n\">Even.times2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Even.times2</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 346707847,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680570641
    },
    {
        "content": "<p><code>#check (2 : Even)</code> results in the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 346715124,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680574775
    },
    {
        "content": "<p>You can use <code>OfNat.ofNat</code> directly to do the conversion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.Add</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Even.times2</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 346725447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680581767
    },
    {
        "content": "<p>I think the only time <code>OfNat.ofNat</code> gets used implicitly is for natural number literals, which is why <code>(n : Even)</code> doesn't work.</p>",
        "id": 346725480,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680581787
    },
    {
        "content": "<p>Ok, thank you , now the code is accepted but i have another issue the test  #check (2:Even) still answer the same thing as below</p>",
        "id": 346742271,
        "sender_full_name": "yannis monbru",
        "timestamp": 1680589564
    },
    {
        "content": "<p>But then the first solution worked by removing the [OfNat Even n]. so i am not shure about what apened but the issue is solved. Thank you!</p>",
        "id": 346774322,
        "sender_full_name": "yannis monbru",
        "timestamp": 1680597849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432800\">yannis monbru</span> <a href=\"#narrow/stream/270676-lean4/topic/Exercise.20Functional.20Programing.20in.20Lean4/near/346774322\">said</a>:</p>\n<blockquote>\n<p>But then the first solution worked by removing the [OfNat Even n]. so i am not shure about what apened but the issue is solved. Thank you!</p>\n</blockquote>\n<p>When you remove the instance implicit, what are the outputs of the following <code>#check</code> commands?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 346777646,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680598661
    },
    {
        "content": "<p>Oh, i see , it type check corectly...<br>\nBut then how can i tell it to accpet #check (2:Even) with the solution of Kyle?</p>",
        "id": 347040903,
        "sender_full_name": "yannis monbru",
        "timestamp": 1680678654
    },
    {
        "content": "<p>I don't know. Can somebody help us?</p>",
        "id": 347157055,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680703585
    },
    {
        "content": "<p>Interestingly, I need to write <code>Nat.zero</code> in the base case to get it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.add</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times2</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">times2</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">times2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Even.add</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.times2</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"n\">times2</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is probably worth a note.</p>",
        "id": 347804828,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1680937938
    },
    {
        "content": "<p>Thank you for reading the book!</p>",
        "id": 347805040,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1680938022
    },
    {
        "content": "<p>That's funny. Thank you for the answer (and by the way for writing the book <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> )</p>",
        "id": 347916188,
        "sender_full_name": "yannis monbru",
        "timestamp": 1680986058
    }
]