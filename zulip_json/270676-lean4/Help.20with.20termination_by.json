[
    {
        "content": "<p>I have the following type of <code>Term</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to define and evaluation function on <code>Term</code>s in two steps.<br>\nFirst, I define a single evaluation step (which fails if we try to evaluate an <code>ite</code> with a number as condition):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval₁</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">cond</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pos</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">eval₁</span> <span class=\"n\">cond</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">cond'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ite</span> <span class=\"n\">cond'</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Second, I define a full evaluation by recursion on the single-step evaluation function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t.eval₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t'.eval</span>\n</code></pre></div>\n<p>For the <code>eval</code> function, Lean can't prove termination by itself.<br>\nI know that <code>termination_by</code> exists, but how could I use that (and possible <code>decreasing_by</code>) to show termination here?<br>\nDoes it somehow involve <code>SizeOf</code>?</p>",
        "id": 288403680,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656937870
    },
    {
        "content": "<p>You would use <code>termination_by eval t =&gt; t</code> in order to indicate to Lean that you wish to proof termination by showing that <code>t</code>'s size decreases every step, it will then tell you that it is missing  <code>sizeOf t' &lt; sizeOf t</code> in the ite case which you can give it by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t.eval₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ite</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">t'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">t'.eval</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">eval</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 288405439,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656938841
    },
    {
        "content": "<p>However you will fail to perform this proof since your function does not terminate, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">13</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">14</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which will endlessly loop. This will become evident in the proof when you arrive in the case where your input expression was a <code>ite</code> and the condition was a <code>nat</code>, after fully simplifying it presents you with <code>False</code> since you'd have to proof that <code>sizeOf t &lt; sizeOf t</code> in this special case.</p>",
        "id": 288405666,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656938953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20termination_by/near/288405666\">said</a>:</p>\n<blockquote>\n<p>However you will fail to perform this proof since your function does not terminate, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">13</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"mi\">14</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which will endlessly loop. This will become evident in the proof when you arrive in the case where your input expression was a <code>ite</code> and the condition was a <code>nat</code>, after fully simplifying it presents you with <code>False</code> since you'd have to proof that <code>sizeOf t &lt; sizeOf t</code> in this special case.</p>\n</blockquote>\n<p>Oh thanks! I was struggling with the proof right now <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 288406007,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656939160
    },
    {
        "content": "<p>You could go full C style here and say that a nat condition evals to true if it is not equal to 0 to avoid this^^</p>",
        "id": 288406223,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656939302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20termination_by/near/288406223\">said</a>:</p>\n<blockquote>\n<p>You could go full C style here and say that a nat condition evals to true if it is not equal to 0 to avoid this^^</p>\n</blockquote>\n<p>Haha, I've decided to go with this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval₁</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">cond</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pos</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ite</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">eval₁</span> <span class=\"n\">cond</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">cond'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ite</span> <span class=\"n\">cond'</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 288406284,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656939346
    },
    {
        "content": "<p>I am confused by the behavior in this example.  Any help would be appreciated. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsWellFounded</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wf</span> <span class=\"o\">[</span><span class=\"n\">IsWellFounded</span> <span class=\"n\">α</span> <span class=\"n\">r'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">IsWellFounded</span> <span class=\"n\">α</span> <span class=\"n\">r'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by'</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">wf</span> <span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">⟩</span>  <span class=\"c1\">-- unknown identifier 'r''</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">r'</span> <span class=\"c1\">-- α → α → Prop</span>\n</code></pre></div>",
        "id": 368637148,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687453434
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">IsWellFounded</span> <span class=\"n\">α</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- random extra line</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by'</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">wf</span> <span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">⟩</span> <span class=\"c1\">-- now works</span>\n</code></pre></div>\n<p>My guess is that in contrast to the usual situation people complain about with variables (they're dragged in when they're not supposed to be), by the time Lean is processing <code>termination_by'</code> it has decided that <code>r'</code> is definitely not used in the declaration so has removed it from the context?</p>",
        "id": 368638649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687453777
    },
    {
        "content": "<p>Right, it seems that lean chucks out everything not involved in the body of the definition before the ternimation_by'.</p>",
        "id": 368639225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687453904
    },
    {
        "content": "<p>Thanks. That makes sense. It is even more annoying when the instance has no explicit parameters.</p>",
        "id": 368639381,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687453931
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Blah</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wf</span> <span class=\"o\">[</span><span class=\"n\">Blah</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Blah</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- have : Blah α := inferInstance</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by'</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">wf</span> <span class=\"n\">r</span><span class=\"o\">⟩</span>  <span class=\"c1\">-- failed to synthesize instance Blah α</span>\n</code></pre></div>",
        "id": 368639592,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687453976
    },
    {
        "content": "<p>again, the instance is not part of the def</p>",
        "id": 368639693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687453996
    },
    {
        "content": "<p>so it's tossed</p>",
        "id": 368639753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687454007
    },
    {
        "content": "<p>Yes, right</p>",
        "id": 368640016,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687454057
    },
    {
        "content": "<p>Let me see if this \"fixes\" my original problem</p>",
        "id": 368640103,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687454079
    },
    {
        "content": "<p>Yes it does</p>",
        "id": 368640415,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687454154
    },
    {
        "content": "<p>One more question: is <code>termination_by'</code> the idiomatic way to use a custom <code>WellFoundedRelation</code> for termination?</p>",
        "id": 368642434,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687454584
    },
    {
        "content": "<p>I'd say the most idiomatic way is to add a type alias <code>MyAlias</code> for your relation together with a global <code>WellFoundedRelation MyAlias</code> instance.  Then you can do <code>termination_by _ =&gt; MyAlias.mk ...</code> to do recursion on that well-founded relation.</p>",
        "id": 368735035,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687487065
    },
    {
        "content": "<p>In many cases, you can also just write the termination measure directly instead of defining a custom relation.  You can even use <code>Ordinal</code> after <code>termination_by _ =&gt;</code>!</p>",
        "id": 368735115,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687487114
    },
    {
        "content": "<p>Do you mean <code>WellFoundedRelation MyAlias</code>? I don't think <code>WellFounded</code> is a class, at least not in core.</p>",
        "id": 368737006,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687488144
    },
    {
        "content": "<p>How does <code>Ordinal</code> work exactly?</p>",
        "id": 368737093,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687488233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Sorry, forgot to mention you above. ^</p>",
        "id": 368737470,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687488449
    },
    {
        "content": "<p>Sorry, I'm always getting confused by the naming.</p>",
        "id": 368740498,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687490302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  No worries, I also regularly get confused in the same way.</p>",
        "id": 368740962,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687490609
    },
    {
        "content": "<p><code>Ordinal</code> is \"just\" a very big well-order.  Every well-founded relation on a type in <code>Type u</code> maps into <code>Ordinal.{u}</code> in an order-preserving way.  So you could always replace your favorite well-founded relation <code>r : α → α → Prop</code> by a function <code>f : α → Ordinal</code>.</p>",
        "id": 368741067,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687490670
    },
    {
        "content": "<p>The point that I'm trying to get across is that <code>termination_by</code> doesn't restrict you to natural numbers, if you can use well-founded recursion then you can express it with <code>termination_by _ =&gt; someFunction a</code>.  And at least personally, I find termination measures much easier to read than well-founded relations that are constructed using a custom bespoke API.</p>",
        "id": 368741153,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687490741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  Yes, I see. I tried to do that on a project of mine yesterday but I could only make <code>termination_by'</code> work (with a lot of additional work explaining what that wellfounded relation was and why). It looks like I was missing some <code>WellFoundedRelation</code> instances to make <code>termination_by</code> work? I think I'm just a bit confused how I should be using this termination API.</p>",
        "id": 368742586,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687491667
    },
    {
        "content": "<p>The most common way is to just write <code>termination_by _ =&gt; value that gets smaller in recursive calls</code>.  For a lot of stuff this value can simply be a natural number.  You can also put a pair there, then you get the lexicographic order.</p>",
        "id": 368742983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687491915
    },
    {
        "content": "<p>But how is the relation inferred? In my use case, the default \"SizeOf\" is irrelevant.</p>",
        "id": 368743110,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687491999
    },
    {
        "content": "<p>We didn't have <code>termination_by</code> in Lean 3, so you won't find many examples in mathlib.  But from what I can tell, most uses of <code>termination_by'</code> would be much better served by <code>termination_by</code>.  Compare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by'</span> <span class=\"n\">invImage</span> <span class=\"n\">PSigma.fst</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">degree_lt_wf</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- vs.</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R.degree</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by'</span> <span class=\"n\">PSigma.lex</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">inferInstance</span><span class=\"o\">)</span>\n<span class=\"c1\">-- vs.</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 368743246,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687492083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20termination_by/near/368743110\">said</a>:</p>\n<blockquote>\n<p>But how is the relation inferred? In my use case, the default \"SizeOf\" is irrelevant.</p>\n</blockquote>\n<p>The relation is inferred using the <code>WellFoundedRelation (type of the termination_by value)</code> type class.  For many types (natural numbers, pairs, ordinals) this has a sensible value.  SizeOf is only used as a low-priority fallback instance.</p>",
        "id": 368743374,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687492180
    },
    {
        "content": "<p>Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Forest</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Forest</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">forest</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">relWF</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">forest.pred</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">forest.wf</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rank</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">_hint</span> <span class=\"o\">:</span> <span class=\"n\">forest.pred</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rank</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">termination_by'</span> <span class=\"n\">forest.relWF</span>\n</code></pre></div>\n<p>How can I use <code>termination_by</code> here?</p>",
        "id": 368743545,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687492271
    },
    {
        "content": "<p>You can use a type alias:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Forest</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Forest.Node</span> <span class=\"o\">(</span><span class=\"n\">_forest</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">forest</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">forest.Node</span> <span class=\"n\">where</span>\n  <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">forest.pred</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">forest.wf</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Forest.rank</span> <span class=\"o\">(</span><span class=\"n\">forest</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">_hint</span> <span class=\"o\">:</span> <span class=\"n\">forest.pred</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">forest.rank</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">forest.Node</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 368744368,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687492746
    },
    {
        "content": "<p>You might also want to look at the <code>WellFounded.rank</code> function.</p>",
        "id": 368744789,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687492946
    },
    {
        "content": "<p>Thanks for the wonderful hints!</p>",
        "id": 368746267,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687493864
    },
    {
        "content": "<p>I  also realized that I have been overusing <code>abbrev</code>!<br>\nThis is all very enlightening!</p>",
        "id": 368746456,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687493996
    },
    {
        "content": "<p>I found this thread very useful, thank you <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>!</p>\n<p>I thought I'd add a note in case it's useful for others: it also works with mutually recursive functions on mutually inductive types. In that case the <code>abbrev</code> should be a <code>_ ⊕ _</code> type and I have found it useful to define new cases for the <code>decreasing_trivial</code> tactic so that I don't have to write a <code>decreasing_by</code> clause for each mutually recursive function</p>\n<p>My new cases look like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">decreasing_trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">StructM.branch_tl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>StructM</code> is an inductive relation on the <code>_ ⊕ _</code> type and <code>branch_tl</code> is one of the constructors.</p>",
        "id": 373584318,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1688862937
    }
]