[
    {
        "content": "<p>Is there an easy way to turn an expression into a string while printing the user name of fvars/mvars?<br>\nI'm trying to debug a custom tactic, but printing expressions as <code>MessageData</code> always crashes the Lean server, presumably because there are too many expressions to print and <code>MessageData</code> is expensive. However, <code>Lean.Expr.dbgToString</code> prints fvars/mvars as <code>uniq...</code>, which makes them hard to read. Calling <code>MessageData.toString</code> on the <code>MessageData</code> gives the same result as <code>Lean.Expr.dbgToString</code>.</p>",
        "id": 394168582,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1696146295
    },
    {
        "content": "<p>Could you give an example of what you want?  Maybe simply modifying <code>inspect</code> in <a href=\"#narrow/stream/270676-lean4/topic/inspect.20expressions\">this thread</a> to print what you want for <code>fvars/mvars</code> would be enough?</p>",
        "id": 394169256,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696146743
    },
    {
        "content": "<p>lean 3 used to have a depth limit in the pretty printer, but I can't find that option in lean 4 or in the code</p>",
        "id": 394169579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696146961
    },
    {
        "content": "<p>you could hack something together where you depth-truncate the expr itself before printing it</p>",
        "id": 394169668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696147004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Expression.20to.20string/near/394169668\">said</a>:</p>\n<blockquote>\n<p>you could hack something together where you depth-truncate the expr itself before printing it</p>\n</blockquote>\n<p>What does \"depth-truncate\" expression mean? Also I think in my case, the problem is caused by there being too many expressions to print, not because individual expressions are too large.</p>",
        "id": 394174437,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1696149871
    },
    {
        "content": "<p>meaning replace all subexpressions at depth &gt; n with some nonsense like <code>.lit \"...\"</code></p>",
        "id": 394174820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696150115
    },
    {
        "content": "<p>it won't typecheck of course, but it might be well formed enough for the delaborator to accept it</p>",
        "id": 394174878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696150148
    },
    {
        "content": "<p>If you have too many expressions, have you considered... not printing so many expressions?</p>",
        "id": 394174938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696150193
    },
    {
        "content": "<p>I'm trying to debug the saturation procedure of duper and needs to print either the result of each inference step or the final set of clauses. For nontrivial examples both of them contains hundreds of expressions. If duper saturates on examples that are unsat, I think I have no choice but to print (all the inference steps/the final set of clauses) because I don't know which inference rule was buggy.</p>",
        "id": 394175464,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1696150456
    },
    {
        "content": "<p>what about using <code>f!</code> to turn it into a plain format?</p>",
        "id": 394176122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696150834
    },
    {
        "content": "<p>It works, but similar to the previous workaround, it does not print the username of fvars/mvars</p>",
        "id": 394190807,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1696156885
    },
    {
        "content": "<p>Oh, probably I can turn the <code>fvars/mvars</code> into <code>const</code> with their username.</p>",
        "id": 394190904,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1696156930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Expression.20to.20string/near/394174820\">said</a>:</p>\n<blockquote>\n<p>meaning replace all subexpressions at depth &gt; n with some nonsense like <code>.lit \"...\"</code></p>\n</blockquote>\n<p>Inspired by this.</p>",
        "id": 394190965,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1696156967
    }
]