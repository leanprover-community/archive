[
    {
        "content": "<p>I'm trying out yatima's quite nice port of megaparsec, and I've defined a very clean lexer from <code>String</code> to <code>Array Token</code>. But how do I parse over non-String types? The streaming stuff is very complicated and largely undocumented</p>",
        "id": 346699934,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680566068
    },
    {
        "content": "<p>(Also, the streaming abstraction does seem a bit odd... I get having the chunk type fixed (e.g. String for Char) but is there much reason to also fix the source type? Seems like an odd choice.)</p>",
        "id": 346700729,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680566573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"507516\">@cognivore</span> <span class=\"user-mention\" data-user-id=\"514707\">@Ilona Prikule</span>  ^</p>",
        "id": 346723740,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1680580861
    },
    {
        "content": "<p>Yeah, documentation of Straume is a bit lacking right now, I think that the worst thing about it is that it has <em>a lot of dead code</em> committed</p>",
        "id": 346819301,
        "sender_full_name": "cognivore_",
        "timestamp": 1680608172
    },
    {
        "content": "<p>But the things that are actually used such as <code>Aka</code>, <code>Iterable</code>, <code>Chunk</code>, ... <em>have</em> documentation. The only used thing that doesn't have documentation is <code>MonadEmit</code>. Nonetheless, thanks for the feedback, we'll remove dead code and make sure that every module is at least documented.</p>",
        "id": 346820197,
        "sender_full_name": "cognivore_",
        "timestamp": 1680608372
    },
    {
        "content": "<p>Regarding fixing the stream type, it's not quite fixed, at least not with outParam. </p>\n<p>This feature is also completely optional. If you don't care about streaming files straight into your parser, you can just separate reading from a file or a wire and parsing.</p>\n<p>If you care, however, the model we implement is buffered reading. To do this, you need to implement MonadEmit from Straume and mention buffer type and stream type in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">℘</mi></mrow><annotation encoding=\"application/x-tex\"> \\wp </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\">℘</span></span></span></span> argument of <code>ParsecT</code> / <code>Parsec</code>.</p>",
        "id": 346822639,
        "sender_full_name": "cognivore_",
        "timestamp": 1680608880
    },
    {
        "content": "<p>Now regarding your question. If you want to have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Array </mtext><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\text{Array} \\ \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">Array</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> to be Tokens, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> to be Token, then—sadly—you'll have to define your own MonadParsec instance. We currently didn't have a need for non-bijective relationships between Tokens and Token types, so we didn't implement an instance like that yet.</p>\n<p>An alternative will be for you to explicitly wrap your Array and your alphas into newtypes <code>ArrayOfTokens</code> and <code>TokenOfArray</code> correspondingly.</p>\n<p>Now you can define a bijective <code>Iterator</code>. Indeed, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>TokenOfArray </mtext><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\text{TokenOfArray} \\  \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">TokenOfArray</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>  can only be gotten out of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>ArrayOfTokens </mtext><mo stretchy=\"false\">(</mo><mtext>Array </mtext><mi>α</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{ArrayOfTokens} \\  (\\text{Array} \\  \\alpha) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">ArrayOfTokens</span></span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">Array</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span></span></span></span> and only out of it.</p>\n<p>If you pick this strategy, then you won't need to write your own <code>MonadParsec</code> with different constraints! It'll be enough for you to define <code>Iterable</code> like here: <a href=\"https://github.com/lurk-lab/straume/blob/main/Straume/Iterator.lean#L45\">https://github.com/lurk-lab/straume/blob/main/Straume/Iterator.lean#L45</a>.</p>\n<p>After you're done with this, your next step will be to implement <code>Straume</code>. Since you want to work with Arrays, you won't need the infinite capabilities. So just implement <code>take1</code> and <code>takeN</code> from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Array </mtext><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\text{Array} \\  \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">Array</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Array </mtext><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\text{Array} \\  \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">Array</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> in here: <a href=\"https://github.com/lurk-lab/straume/blob/main/Straume.lean#L32\">https://github.com/lurk-lab/straume/blob/main/Straume.lean#L32</a></p>\n<p>Use <code>Chunk</code> as <code>f</code>.</p>\n<p>Now you will have everything ready for <a href=\"https://github.com/lurk-lab/Megaparsec.lean/blob/main/Megaparsec/MonadParsec.lean#L138\"><code>theInstance</code></a> to just work <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> on your wrapper types.</p>",
        "id": 346835069,
        "sender_full_name": "cognivore_",
        "timestamp": 1680611471
    },
    {
        "content": "<p>Please note that most of the peculiarities in this design stem from the <a href=\"https://youtu.be/YKN3NLwW1MI?t=5997\">difference in typeclass treatment between Lean and Haskell</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"YKN3NLwW1MI\" href=\"https://youtu.be/YKN3NLwW1MI?t=5997\"><img src=\"https://uploads.zulipusercontent.net/589159405700e83032469003561c46509857511f/68747470733a2f2f692e7974696d672e636f6d2f76692f594b4e334e4c7757314d492f64656661756c742e6a7067\"></a></div>",
        "id": 346836877,
        "sender_full_name": "cognivore_",
        "timestamp": 1680611860
    },
    {
        "content": "<p>Note that we abuse type class features of Lean a lot both with the \"tag\" type class <code>Itearable.Bijection</code> and by using <code>@defaultInstance</code>.</p>\n<p>I hope that this helps! If you manage to make it work, send PRs, we'll gladly add ergonomic streaming of arrays (or one done via wrapper) to Megaparsec or Straume.</p>\n<p>P.S.</p>\n<p>We plan to do performance-related maintenance cycle for the libraries, because they currently <a href=\"http://\">choke on inputs that aren't even too large</a> so perhaps we'll add better support for finite streams such as arrays of things and lists of things if you won't manage to implement something you're happy enough to PR.</p>",
        "id": 346839886,
        "sender_full_name": "cognivore_",
        "timestamp": 1680612546
    },
    {
        "content": "<p>P.P.S. </p>\n<p>Feel free to ask follow-up questions on Lurk Lab / Yatima zulip: <a href=\"https://zulip.yatima.io/#narrow/stream/24-yatima-tools/topic/.5BMegaparsec.2Elean.5D.20chat\">https://zulip.yatima.io/#narrow/stream/24-yatima-tools/topic/.5BMegaparsec.2Elean.5D.20chat</a></p>\n<p>Me and <span class=\"user-mention\" data-user-id=\"514707\">@Ilona Prikule</span> are there 24/7, whereas here we need to defer to our amazing colleagues to scout for megaparsec questions :)</p>\n<p>We'll add the link to the README.</p>",
        "id": 346840177,
        "sender_full_name": "cognivore_",
        "timestamp": 1680612625
    },
    {
        "content": "<p>Thank you so much! I’ll hop on the Lurk zulip</p>",
        "id": 346894555,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680622386
    }
]