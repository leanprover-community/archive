[
    {
        "content": "<p>It's common to define a function out of <code>List X</code> by pattern matching </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- pseudocode</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">something</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">something</span> <span class=\"k\">else</span>\n</code></pre></div>\n<p>Is it possible to do something similar in a macro that takes <code>xs:term,*</code>? I tried playing around with the following, which doesn't quite work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"a[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]))</span>\n</code></pre></div>",
        "id": 353343537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682608036
    },
    {
        "content": "<p>I've found you usually need a 0, 1, and 2+ case due to commas to get these things to work</p>",
        "id": 353345318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682608241
    },
    {
        "content": "<p>Hmmm...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]))</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>still gives me an error on the <code>eval</code> line.</p>",
        "id": 353345776,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682608300
    },
    {
        "content": "<p>Oh, I just noticed, you're quoting <code> `(a[$xs:term,*])</code> in there. The value of a quote is a <code>Syntax</code> in a monad. You probably mean <code>a[$xs,*]</code> by itself.</p>",
        "id": 353346523,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682608386
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"a[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 353346743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682608413
    },
    {
        "content": "<p>This works, and you do need the length-1 case</p>",
        "id": 353346806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682608421
    },
    {
        "content": "<p>Oh of course. Thanks!</p>",
        "id": 353347039,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682608449
    },
    {
        "content": "<p>I should have caught that -- while I was playing around earlier, I had </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])))</span>\n</code></pre></div>\n<p>at some point, but forgot to get rid of the quotation :)</p>",
        "id": 353347989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682608573
    },
    {
        "content": "<p>If you want a non-recursive one, here's using <code>Array.foldrM</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"a[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TSyntax.raw</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"k\">do</span> <span class=\"n\">xs.foldrM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.nil</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 353350569,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682608899
    },
    {
        "content": "<p><code>$[$xs],*</code> gives you all the elements in the sequence without the commas.</p>",
        "id": 353350809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682608923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Basic.20question.20about.20recursive.20macros/near/353350809\">said</a>:</p>\n<blockquote>\n<p><code>$[$xs],*</code> gives you all the elements in the sequence without the commas.</p>\n</blockquote>\n<p>Oh, that's useful to know! I feel like we should have some cheatsheet for all these quotation tricks.</p>",
        "id": 353351304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682608982
    },
    {
        "content": "<p>The double backquote Syntax quotations are sort of like double backquote Name literals, where here they check that the names <code>List.nil</code> and <code>List.cons</code> are what you think they are. (They report a tooltip and everything.)</p>",
        "id": 353351345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682608987
    },
    {
        "content": "<p>Right, this is where I ended up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 353351544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682609012
    },
    {
        "content": "<p>I am surprised though that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.cns</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>doesn't register an error.</p>",
        "id": 353352071,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682609064
    },
    {
        "content": "<p>I suppose I don't really know what double backquote quotations do precisely...</p>",
        "id": 353352997,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682609162
    },
    {
        "content": "<p>OTOH, this does give an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Lst.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Is something going on with dot notation?</p>",
        "id": 353353602,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682609228
    },
    {
        "content": "<p>Yeah, I think so. I did a similar test and was going to mention it.</p>",
        "id": 353353794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682609252
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Are double syntax quotations supposed to register an error here? In particular, with the <code>List.cns</code> example a few messages up.)</p>",
        "id": 353354324,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682609308
    },
    {
        "content": "<p>In case it helps, this <em>does</em> result in an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">List</span> <span class=\"k\">in</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">cns</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 353361440,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682610129
    },
    {
        "content": "<p>Yes, this is <a href=\"https://github.com/Kha/lean4/blob/c8dfc9292b77623454b2b5792223e10a01794db7/src/Lean/Elab/Quotation/Precheck.lean#L88-L94\">https://github.com/Kha/lean4/blob/c8dfc9292b77623454b2b5792223e10a01794db7/src/Lean/Elab/Quotation/Precheck.lean#L88-L94</a></p>",
        "id": 353368181,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682610996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Basic.20question.20about.20recursive.20macros/near/353350809\">said</a>:</p>\n<blockquote>\n<p><code>$[$xs],*</code> gives you all the elements in the sequence without the commas.</p>\n</blockquote>\n<p>I usually prefer <code>$xs,*</code> and then <code>xs.getElems</code> for what it's worth</p>",
        "id": 353469437,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682625688
    }
]