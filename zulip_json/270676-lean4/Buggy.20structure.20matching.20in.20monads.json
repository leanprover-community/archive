[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">works</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">works</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c.2</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Two errors:</span>\n<span class=\"cm\">1. the `.match_1` (i.e. the `let (x, y) := ...`) is noncomputable</span>\n<span class=\"cm\">2. Well-foundedness is not proven automatically</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fails</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fails</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403060725,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700435569
    },
    {
        "content": "<p>The structure matching makes the code noncomputable and makes determining well-foundedness fail, which sounds buggy to me.</p>",
        "id": 403060818,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700435632
    },
    {
        "content": "<p>Please try to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (in particular, you have imports missing here, or need to replace ℕ with Nat, etc)</p>",
        "id": 403069473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700441333
    },
    {
        "content": "<p>I suspect this is a known issue, but I'm not finding an open issue. Let me ping <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, who has been working on recursion recently, and may know off-hand.</p>\n<p>It would be good to have an issue tracking this. It should include also the non-monadic code, to show that the issue is specific to the <code>do</code> notation.</p>",
        "id": 403070069,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700441589
    },
    {
        "content": "<p>I think also your <code>termination_by</code> and <code>decreasing_by</code> clauses should be removed from the example.</p>",
        "id": 403070107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700441607
    },
    {
        "content": "<p>Fixed both. I will wait for Joachim's response and one of us can open an issue then</p>",
        "id": 403070851,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700441970
    },
    {
        "content": "<p>I always forget that \\N is not in Lean haha</p>",
        "id": 403070885,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700441991
    },
    {
        "content": "<p>Here's a non-monadic example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">works_again</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">works_again</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403071245,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700442106
    },
    {
        "content": "<p>Marking it as <code>noncomputable</code> makes the well-foundness proof go through. Is that expected or strange?</p>\n<p>This is the supposedly non-computable definition, looks computable to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fails.match_1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">h_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Prod.casesOn</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_1</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">fails.match_1</span>\n</code></pre></div>\n<p>doesn't complain about non-computability.</p>\n<p>So maybe the problem is that these auxillary definitoins are not compiled early enough for something that’s happening in the well-foundedness proof? </p>\n<p>I haven’t seen an issue about this (but I don't know all the issues); feel free to report (ideally minimized to have no imports)</p>",
        "id": 403137119,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700475414
    }
]