[
    {
        "content": "<p>I'm mostly done porting Verbose Lean to Lean 4 and I would like to experiment with also changing the syntax to define exercises. I naively tried the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">explBinder</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">Lean.Parser.Term.explicitBinder</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TSyntax.Compat</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkExampleArgs</span> <span class=\"o\">(</span><span class=\"n\">objs</span> <span class=\"n\">hyps</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">`</span><span class=\"n\">explBinder</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n    <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.bracketedBinder</span> <span class=\"o\">:=</span>\n  <span class=\"n\">objs</span> <span class=\"bp\">++</span> <span class=\"n\">hyps</span>\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Exercise\"</span> <span class=\"n\">str</span> <span class=\"s2\">\"Given:\"</span> <span class=\"n\">objs</span><span class=\"o\">:</span><span class=\"n\">explBinder</span><span class=\"bp\">*</span> <span class=\"s2\">\"Assume:\"</span> <span class=\"n\">hyps</span><span class=\"o\">:</span><span class=\"n\">explBinder</span><span class=\"bp\">*</span> <span class=\"s2\">\"Conclusion:\"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkExampleArgs</span> <span class=\"n\">objs</span> <span class=\"n\">hyps</span><span class=\"o\">):</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true</span>\n\n<span class=\"n\">Exercise</span> <span class=\"s2\">\"Test\"</span>\n  <span class=\"n\">Given</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">Assume</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">Conclusion</span><span class=\"o\">:</span> <span class=\"n\">True</span>\n\n  <span class=\"n\">Proof</span><span class=\"o\">:</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>You can see from <code>open TSyntax.Compat in</code> that I forced Lean a bit, and of course it didn't like it. I'd be grateful if anyone could tell me how to fix this attempt.</p>",
        "id": 402796916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700263915
    },
    {
        "content": "<p>In case this isn't clear, in the failing example the command is meant to transcribe to <code>example (n : Nat) (hn : n = 0) : True := by trivial</code>.</p>",
        "id": 402797073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700263981
    },
    {
        "content": "<p>Why did you even define <code>explBinder</code> here, if it's just a wrapper around <code>bracketedBinder</code>? It works if you just remove that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Term</span> <span class=\"o\">(</span><span class=\"n\">bracketedBinder</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Exercise\"</span> <span class=\"n\">str</span>\n    <span class=\"s2\">\"Given:\"</span> <span class=\"n\">objs</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Assume:\"</span> <span class=\"n\">hyps</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Conclusion:\"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span>\n    <span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">objs</span> <span class=\"bp\">++</span> <span class=\"n\">hyps</span><span class=\"o\">):</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 402798312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700264739
    },
    {
        "content": "<p>I tried many variations, that's why.</p>",
        "id": 402798820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700265070
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 402798871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700265118
    },
    {
        "content": "<p>However I would also like to experiment with variations so I guess this baby version was too easy. Say for instance I want to allow </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Exercise</span> <span class=\"s2\">\"Test\"</span>\n  <span class=\"n\">Given</span><span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n    <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">Assume</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">Conclusion</span><span class=\"o\">:</span> <span class=\"n\">True</span>\n\n  <span class=\"n\">Proof</span><span class=\"o\">:</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>where each object is on its own line. Do you know how to do that?</p>",
        "id": 402799030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700265217
    }
]