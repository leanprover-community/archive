[
    {
        "content": "<p>I got annoyed writing mutual definitions for my nested inductive types, so I came up with this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Sexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Sexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">sexp</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Sexp</span> <span class=\"bp\">→</span> <span class=\"n\">Sexp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.subtypeSize</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"k\">calc</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">_</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_add_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">xs.subtypeSize.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n      <span class=\"k\">calc</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sexp.toString</span> <span class=\"o\">:</span> <span class=\"n\">Sexp</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">atom</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.quote</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sexp</span> <span class=\"n\">ss</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">strings</span> <span class=\"o\">:=</span> <span class=\"n\">ss.subtypeSize.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">ss</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">s.toString</span><span class=\"o\">)</span>\n  <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">String.intercalate</span> <span class=\"s2\">\",\"</span> <span class=\"n\">strings</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">toString</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>which, to my eye, reads wayyyyy better than copying the definition of map in here.</p>\n<p>this <code>subtypeSize</code> function can be derived from <code>pmap</code> and <code>map</code>. and in terms of overhead, hopefully <code>pmap</code> and runtime-idempotent <code>map</code> can eventually be stripped away by the compiler. thoughts?</p>",
        "id": 366109425,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686734935
    },
    {
        "content": "<p>(and, has this strategy for nested inductive definitions already been discussed somewhere?)</p>",
        "id": 366109590,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686734975
    },
    {
        "content": "<p>I also assume (?) that the nested inductive positivity requirement is related to having a <code>LawfulFunctor</code> instance -- is that true?</p>",
        "id": 366118596,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686736729
    },
    {
        "content": "<p>There are non-strictly-positive inductives which have a lawful functor instance. I think the general connection you are looking for is described in the QPF paper Jeremy, Simon and I wrote a while back - <a href=\"http://www.contrib.andrew.cmu.edu/~avigad/Papers/qpf.pdf\">http://www.contrib.andrew.cmu.edu/~avigad/Papers/qpf.pdf</a></p>",
        "id": 366245785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686761105
    },
    {
        "content": "<p>Is anyone working on this or planning to work on such a datatype package in the future?</p>",
        "id": 390802023,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1694638802
    },
    {
        "content": "<p>Qpfs are in mathlib (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Qpf#doc\">docs#Qpf</a>), but I don't think anyone is working on actually metaprogramming our way to nice <code>coinductive</code> and nested inductive types yet.</p>",
        "id": 390802445,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694639036
    },
    {
        "content": "<p>I'm genuinely curious because as an Isabelle user I find this semantic approach quite elegant. The metaprogramming that is necessary in Isabelle, though, not so much. I imagine the more powerful logic of Lean makes the implementation more pleasant but it's still a lot of work to make it user friendly, of course.</p>",
        "id": 390802547,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1694639079
    },
    {
        "content": "<p>That seems right. It's definitely doable, and not even <em>too</em> hard in Lean. But hard enough for me to not want to do it... I would definitely use it if someone implemented though :)</p>",
        "id": 390802659,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694639153
    },
    {
        "content": "<p>I think someone did start some metaprogramming, so maybe wait to see if Mario knows more about any partial work in that direction.</p>",
        "id": 390802853,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694639239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> wants to eventually make the existing mutual and nested inductives nicer for his PhD</p>",
        "id": 390803295,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694639448
    },
    {
        "content": "<p>Type theory or logic people might be especially interested in <a href=\"https://matryoshka-project.github.io/pubs/bindings.pdf\">Bindings as Bounded Natural Functors</a>, which is a way to bake binders into datatype definitions. A student that mainly Dmitriy and I supervised implemented this in Isabelle and is planning to use it to formalise type theory in Isabelle. Can QPFs support this as well?</p>",
        "id": 390803409,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1694639516
    },
    {
        "content": "<p>QPFs are very similar to BNFs, yes. I think the difference is that QPFs also support quotients, although it's been a while since I looked at this</p>",
        "id": 390803840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694639710
    },
    {
        "content": "<p>There's <a href=\"https://github.com/alexkeizer/QpfTypes\">https://github.com/alexkeizer/QpfTypes</a> by <span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span></p>",
        "id": 390805859,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694640815
    },
    {
        "content": "<p>Yes! It's still work-in-progress, and is a bit hard to work with since it depends on an outdated fork of Mathlib. If people are interested in it, I can put some effort into bringing that al up to date with the 4.0 release of Lean, and seeing if I can upstream the mathlib changes now that the port is over.</p>",
        "id": 390811415,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694643259
    },
    {
        "content": "<p>Also, feel free to ask me questions about it!</p>",
        "id": 390811500,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694643304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235927\">Lukas Stevens</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20nested.20inductive.20functions/near/390803409\">said</a>:</p>\n<blockquote>\n<p>Type theory or logic people might be especially interested in <a href=\"https://matryoshka-project.github.io/pubs/bindings.pdf\">Bindings as Bounded Natural Functors</a>, which is a way to bake binders into datatype definitions. A student that mainly Dmitriy and I supervised implemented this in Isabelle and is planning to use it to formalise type theory in Isabelle. Can QPFs support this as well?</p>\n</blockquote>\n<p>You mean Jan van Brügge, right? I've spoken to him a few times. We haven't really dug into all the details, but it seems that QPFs are indeed similar enough that it would work.</p>",
        "id": 390812128,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694643654
    },
    {
        "content": "<p>do you have a sense yet of the runtime cost of building &amp; matching <code>data</code>/<code>codata</code> compared to <code>inductive</code>s?</p>",
        "id": 390815215,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694645581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20nested.20inductive.20functions/near/390812128\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"235927\">Lukas Stevens</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20nested.20inductive.20functions/near/390803409\">said</a>:</p>\n<blockquote>\n<p>Type theory or logic people might be especially interested in <a href=\"https://matryoshka-project.github.io/pubs/bindings.pdf\">Bindings as Bounded Natural Functors</a>, which is a way to bake binders into datatype definitions. A student that mainly Dmitriy and I supervised implemented this in Isabelle and is planning to use it to formalise type theory in Isabelle. Can QPFs support this as well?</p>\n</blockquote>\n<p>You mean Jan van Brügge, right? I've spoken to him a few times. We haven't really dug into all the details, but it seems that QPFs are indeed similar enough that it would work.</p>\n</blockquote>\n<p>Yes that was Jan.</p>",
        "id": 390879454,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1694680079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20nested.20inductive.20functions/near/390815215\">said</a>:</p>\n<blockquote>\n<p>do you have a sense yet of the runtime cost of building &amp; matching <code>data</code>/<code>codata</code> compared to <code>inductive</code>s?</p>\n</blockquote>\n<p>Probably a bit worse. Especially <code>codata</code>'s runtime behaviour could be optimized quite a bit more.<br>\nFor <code>data</code> the biggest issue might be that data is stored in functions, which is probably not optimal either</p>",
        "id": 390906445,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694689807
    }
]