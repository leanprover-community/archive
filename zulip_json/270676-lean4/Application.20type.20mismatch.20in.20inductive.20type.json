[
    {
        "content": "<p>I came across an \"application type mismatch\" problem when I was trying to define an inductive type. I managed to reduce it to this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">WF.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ofApp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"o\">⟨</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>How can I fix this?</p>",
        "id": 378312084,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690248299
    },
    {
        "content": "<p><code>β</code> has type <code>Type u</code>, not <code>α</code>.</p>",
        "id": 378312735,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690248559
    },
    {
        "content": "<p>Where is the <code>β</code> that has type <code>α</code>?</p>",
        "id": 378313746,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690249045
    },
    {
        "content": "<p>it helps to show the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">WF.ofApp</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">fn</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 378313951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690249139
    },
    {
        "content": "<p>Yeah, I saw that. I was wondering what is <code>α✝</code>.</p>",
        "id": 378314024,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690249179
    },
    {
        "content": "<p>it appears that there is a second <code>α</code> in scope, at least somewhere internal to the inductive validity check</p>",
        "id": 378314155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690249230
    },
    {
        "content": "<p>If I change <code>(Type (u + 1)) </code>to <code>Prop</code>, the error disappears.</p>",
        "id": 378314205,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690249256
    },
    {
        "content": "<p>But <code>Type (u + 1)</code> should be a valid universe level for this inductive type.</p>",
        "id": 378314324,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690249309
    },
    {
        "content": "<p>Also this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">WF.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ofApp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fnarg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"o\">⟨</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">fnarg.1</span> <span class=\"n\">fnarg.2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 378314962,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690249514
    },
    {
        "content": "<p>minimized some more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">WF.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378315162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690249590
    },
    {
        "content": "<p>it does seem to be a bug</p>",
        "id": 378315196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690249606
    },
    {
        "content": "<p>it looks like the failure is somewhere in <code>mkInjectiveTheorems</code></p>",
        "id": 378316399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690250101
    },
    {
        "content": "<p>and indeed setting <code>set_option genInjectivity false in</code> makes the issue go away</p>",
        "id": 378316459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690250131
    },
    {
        "content": "<p>here's the lean equivalent of what <code>mkInjectiveTheorems</code> does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">genInjectivity</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">WF.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=</span> <span class=\"n\">WF.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α_1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α_1</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">WF.noConfusion</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">α_eq</span> <span class=\"n\">fn_eq</span> <span class=\"n\">arg_eq</span> <span class=\"bp\">↦</span> <span class=\"n\">α_eq</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">WF.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">fn</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">α_1</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 378317415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690250550
    },
    {
        "content": "<p>it is a fair point that it's not clear what the statement of the injectivity theorem for this inductive should be</p>",
        "id": 378317538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690250615
    },
    {
        "content": "<p>here's what it looks like for a very similar variation on the inductive type that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">genInjectivity</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">},</span> <span class=\"n\">WF.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">WF.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span> <span class=\"n\">x</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">fn</span> <span class=\"n\">fn_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">arg</span> <span class=\"n\">arg_1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a_1</span><span class=\"o\">}</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span>\n  <span class=\"n\">WF.noConfusion</span> <span class=\"n\">x_1</span> <span class=\"k\">fun</span> <span class=\"n\">α_eq</span> <span class=\"n\">fn_eq</span> <span class=\"n\">arg_eq</span> <span class=\"n\">x_eq</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">α_eq</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">fn_eq</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">arg_eq</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 378317736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690250711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Application.20type.20mismatch.20in.20inductive.20type/near/378317538\">said</a>:</p>\n<blockquote>\n<p>it is a fair point that it's not clear what the statement of the injectivity theorem for this inductive should be</p>\n</blockquote>\n<p>What about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span><span class=\"o\">},</span>\n    <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"n\">WF.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">WF.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">fn</span> <span class=\"n\">fn_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">arg</span> <span class=\"n\">arg_1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378323985,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690254105
    },
    {
        "content": "<p>I pushed a basic fix as <a href=\"https://github.com/leanprover/lean4/pull/2355\">lean4#2355</a>, which solves the issue by treating not only <code>fn</code> and <code>arg</code>, but also <code>α</code>, as fixed because they are required for the type of the equality to work out. In this case that means there is nothing to equate and so no theorem is generated, but you can add another argument and it will assert equality of those arguments</p>",
        "id": 378324650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690254476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"524339\">Yicheng Qian</span> <a href=\"#narrow/stream/270676-lean4/topic/Application.20type.20mismatch.20in.20inductive.20type/near/378323985\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Application.20type.20mismatch.20in.20inductive.20type/near/378317538\">said</a>:</p>\n<blockquote>\n<p>it is a fair point that it's not clear what the statement of the injectivity theorem for this inductive should be</p>\n</blockquote>\n<p>What about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span><span class=\"o\">},</span>\n    <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"n\">WF.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">WF.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">fn</span> <span class=\"n\">fn_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">arg</span> <span class=\"n\">arg_1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n</blockquote>\n<p>This theorem is (surprisingly) not true, as it relies on the injectivity of <code>WF</code> the type constructor itself, which is a non-theorem in lean's axiomatics</p>",
        "id": 378324835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690254584
    },
    {
        "content": "<p>What about this (fine-grained control which ensures that the arguments of <code>WF</code> are equal):<br>\n(I've renamed <code>WF</code> to <code>SigmaFn</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DepEq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Reflexivity of dependent equality. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DepEq</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">genInjectivity</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">SigmaFn.inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">DepEq</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">(</span><span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">arg</span> <span class=\"n\">arg_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">fn</span> <span class=\"n\">fn_1</span>\n</code></pre></div>",
        "id": 378337395,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690261261
    },
    {
        "content": "<p>Proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DepEq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Reflexivity of dependent equality. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DepEq</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">genInjectivity</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HEq.ofSigmaEq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Sigma.mk</span> <span class=\"n\">_</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Sigma.mk</span> <span class=\"n\">_</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">HEq.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DepEq.toSigmaEq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">DepEq</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sigma.mk</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">:=</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Sigma.mk</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">:=</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">SigmaFn.inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">DepEq</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">(</span><span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">arg</span> <span class=\"n\">arg_1</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">fn</span> <span class=\"n\">fn_1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">lh</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">rh</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">lreq</span> <span class=\"o\">:</span> <span class=\"n\">lh</span> <span class=\"bp\">=</span> <span class=\"n\">rh</span> <span class=\"o\">:=</span> <span class=\"n\">DepEq.toSigmaEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span>\n  <span class=\"k\">let</span> <span class=\"n\">rwFn₁</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">snd</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">arg</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">rwRes₁</span> <span class=\"o\">:</span> <span class=\"n\">rwFn₁</span> <span class=\"n\">lh</span> <span class=\"bp\">=</span> <span class=\"n\">rwFn₁</span> <span class=\"n\">rh</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lreq</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">argHeq</span> <span class=\"o\">:=</span> <span class=\"n\">HEq.ofSigmaEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rwRes₁</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">rwFn₂</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">snd</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">fn</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">rwRes₂</span> <span class=\"o\">:</span> <span class=\"n\">rwFn₂</span> <span class=\"n\">lh</span> <span class=\"bp\">=</span> <span class=\"n\">rwFn₂</span> <span class=\"n\">rh</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lreq</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">fnHeq</span> <span class=\"o\">:=</span> <span class=\"n\">HEq.ofSigmaEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rwRes₂</span><span class=\"bp\">;</span>\n  <span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">argHeq</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">argHeq</span> <span class=\"n\">fnHeq</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378337593,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690261341
    },
    {
        "content": "<p>If there are multiple arguments to the type constructor, we can bundle them by dependent pair.</p>",
        "id": 378338097,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690261524
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 378343943,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690263776
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 378343960,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690263783
    },
    {
        "content": "<p><code>DepEq</code> and <code>HEq</code> are probably not necessary. They can be modeled by <code>Sigma/PSigma</code> plus <code>Eq</code>.</p>",
        "id": 378345397,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690264342
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">SigmaFn.inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fn_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">arg_1</span> <span class=\"o\">:</span> <span class=\"n\">α_1</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">,</span> <span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">,</span> <span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α_1</span> <span class=\"bp\">∧</span> <span class=\"o\">(⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">arg</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">α_1</span><span class=\"o\">,</span> <span class=\"n\">arg_1</span><span class=\"o\">⟩</span> <span class=\"bp\">∧</span> <span class=\"o\">(⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">fn</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">α_1</span><span class=\"o\">,</span> <span class=\"n\">fn_1</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">lh</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">,</span> <span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">rh</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">,</span> <span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α_1</span> <span class=\"n\">fn_1</span> <span class=\"n\">arg_1</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">lreq</span> <span class=\"o\">:</span> <span class=\"n\">lh</span> <span class=\"bp\">=</span> <span class=\"n\">rh</span> <span class=\"o\">:=</span> <span class=\"n\">H</span>\n  <span class=\"k\">let</span> <span class=\"n\">rwFn₁</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">snd</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">arg</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">rwRes₁</span> <span class=\"o\">:</span> <span class=\"n\">rwFn₁</span> <span class=\"n\">lh</span> <span class=\"bp\">=</span> <span class=\"n\">rwFn₁</span> <span class=\"n\">rh</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lreq</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">rwFn₂</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">SigmaFn</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">snd</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">SigmaFn.mk</span> <span class=\"n\">α</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">fn</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">rwRes₂</span> <span class=\"o\">:</span> <span class=\"n\">rwFn₂</span> <span class=\"n\">lh</span> <span class=\"bp\">=</span> <span class=\"n\">rwFn₂</span> <span class=\"n\">rh</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lreq</span><span class=\"o\">]</span>\n  <span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">rwRes₁</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">rwRes₁</span> <span class=\"n\">rwRes₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378349845,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1690265903
    }
]