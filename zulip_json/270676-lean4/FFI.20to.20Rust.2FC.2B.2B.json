[
    {
        "content": "<p>I tried to build the Rust FFI template <a href=\"https://github.com/yatima-inc/FFI.lean\">in this repo.</a> It basicly compiles the Rust functions to a static c++ library and then uses functions from that in the lean code. But for some strange reason <code>lake build</code> fails on my machine. I get the following strange error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Compiling</span> <span class=\"n\">shim.cpp</span>\n<span class=\"n\">Creating</span> <span class=\"n\">libffi.a</span>\n<span class=\"n\">Linking</span> <span class=\"n\">libffi.so</span>\n<span class=\"n\">Building</span> <span class=\"n\">FFI</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tage</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-08/lib:./build/lib:./build/src /home/tage/.elan/toolchains/leanprover--lean4---nightly-2022-12-08/bin/lean ./lean/./FFI.lean -R ./lean/. -o ./build/lib/FFI.olean -i ./build/lib/FFI.ilean -c ./build/ir/FFI.c --load-dynlib=libffi.so</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">libffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">_ZNSt8ios_base4InitD1Ev</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tage</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-08/bin/lean` exited with code 134</span>\n</code></pre></div>\n<p>I think the point here is the undefined symbol <code>_ZNSt8ios_base4InitD1Ev</code>. After some googling it seems that it has something to do with the linking of libc++.so.</p>\n<p>So does anyone have any experience of linking c++ libraries and what might cause the error?</p>",
        "id": 318767057,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1672508752
    },
    {
        "content": "<p>Yeah, this is something we've been trying to do for a while. So far, the setup is flaky and doesn't work on all machines. There is a <code>nix</code> branch that seems to work though (I haven't tested it yet). This is highly experimental at this point, as you can see</p>",
        "id": 318768210,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672509577
    },
    {
        "content": "<p>Is there a reason you are going over C++ instead of just using the C FFI that we already have in Lean? In theory we could auto generate all of the Lean &lt;-&gt; C FFI &lt;-&gt; Rust glue code automatically just from the types that are in Lean without dealing with C++ at all.</p>",
        "id": 318772010,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672512343
    },
    {
        "content": "<p>Basically like <a href=\"https://github.com/rust-lang/rust-bindgen\">https://github.com/rust-lang/rust-bindgen</a> but for Lean instead (of course the tool would be written in Lean instead of Rust in order to access the <code>Environment</code>.</p>",
        "id": 318772267,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672512544
    },
    {
        "content": "<p>Do you mean parsing Rust code in Lean?</p>",
        "id": 318772916,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672512980
    },
    {
        "content": "<p>No. When you compile lean code and you tag a declaration with <code>@[export]</code> you can know the symbol name in advance, furthermore you can also deduce the C type of the function in advance based on our FFI. Since you can do this you can also automatically decude a Rust representation of any Lean type automatically (based on #[repr(C)], however many lean types will end up being lean_object*. For that you can define type aliases + wrapper functions to allocate and pattern match on stuff). So in theory I believe it should be possible to automatically generate a <code>.rs</code> file using a Lean program that reads some other Lean file and exposes all of the functions tagged with <code>export</code> in that Lean file to Rust + at least working representation of all Lean types defined in that file in Rust. I don't think that representation and the way you interact with it will necessarily end up being safe but it should in general be possible.</p>",
        "id": 318773514,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672513418
    },
    {
        "content": "<p>So basically writing a bindgen that generates a Rust C FFI layer for some arbitrary Lean file automatically should be perfectly possible.</p>",
        "id": 318773575,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672513448
    },
    {
        "content": "<p>Sorry, I still don't understand it. Suppose we have some huge Rust lib whose behavior we want to access from Lean. How would an automatically generated <code>.rs</code> file help us bridge the gap between Lean and Rust?</p>",
        "id": 318774255,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672513956
    },
    {
        "content": "<p>We want to use access Rust programs from Lean, not the other way around</p>",
        "id": 318774917,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672514477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/FFI.20to.20Rust.2FC.2B.2B/near/318774917\">said</a>:</p>\n<blockquote>\n<p>We want to use access Rust programs from Lean, not the other way around</p>\n</blockquote>\n<p>But surely you are passing Lean objects into those rust programs so you will still need the information about Lean exposed in Rust no? Exposing the Rust types to Lean is also possible via C FFI if you want to.</p>",
        "id": 318775332,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672514767
    },
    {
        "content": "<p>What I am confused about is, why are you taking the indirection over the C++ FFI with cxx when both Rust and Lean support C FII.</p>",
        "id": 318775599,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672514931
    },
    {
        "content": "<p>In my mind, it's the flow of data. Lean can use code that's written in C. So does Rust. But we are trying to use code that's written in Rust from Lean</p>",
        "id": 318776792,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672515911
    },
    {
        "content": "<p>The Lean objects that we want to pass are extremely simple, like unboxed unsigned integers and such. Writing the bindings is the easy part - we do it by hand.</p>",
        "id": 318776959,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672516030
    },
    {
        "content": "<p>But then why is C++ (rather than C) involved?</p>",
        "id": 318777105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672516145
    },
    {
        "content": "<p>Because that's what <a href=\"https://cxx.rs/\">https://cxx.rs/</a> provides</p>",
        "id": 318777236,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672516264
    },
    {
        "content": "<p>... is there <a href=\"https://c.rs/\">https://c.rs/</a> ?</p>",
        "id": 318777263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672516295
    },
    {
        "content": "<p>Unlucky.</p>",
        "id": 318777277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672516307
    },
    {
        "content": "<p>Avoiding C++ should make everything easier.</p>",
        "id": 318777298,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672516317
    },
    {
        "content": "<p>The C ABI is in general the normal way to do FFI; I imagine it must be supported natively by Rust</p>",
        "id": 318777380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672516375
    },
    {
        "content": "<p>It is, CXX does still use the C ABI under the hood it just hides stuff behind a C++ facade.</p>",
        "id": 318777413,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672516414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"544752\">@Tage Johansson</span> Okay it works now (thanks everyone!!)<br>\nThe misconception I had was that I didn't think we could call Rust code <em>from C</em>. I thought it was like Lean, which allows us to call C code from it.</p>\n<p>Here's the PR with the changes: <a href=\"https://github.com/yatima-inc/FFI.lean/pull/1\">https://github.com/yatima-inc/FFI.lean/pull/1</a><br>\nYou might as well just fetch the <code>c</code> branch</p>",
        "id": 318785395,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672523728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I tried that approach, but I still get the <code>undefined symbol</code> error above. The <code>--load-dynlib</code> doesn't include all the rust library dependencies. Also how this is added to the lean runtime command is rather undocumented. I also need some way of providing the libraries in topological order which is not the default case. How can I add more runtime dynlibs to the lean command invocation by lake?</p>",
        "id": 328254404,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676558428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> has marked this topic as unresolved.</p>",
        "id": 328254632,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676558476
    },
    {
        "content": "<p>I'm trying to link lean with an advanced rust application and using lean as the main entrypoint and executable.</p>",
        "id": 328254907,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676558535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Is it possible to disable the load dynlib feature in Lake? I don't think I will need this in the interpreter</p>",
        "id": 328270017,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676561996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> the repo had to undergo <a href=\"https://github.com/yatima-inc/RustFFI.lean/commit/2a397cbc0904e2d575862c4067b512b6cc6b65f8\">yet another change</a> in order to work when used as a dependency. This is the template: <a href=\"https://github.com/yatima-inc/RustFFI.lean\">https://github.com/yatima-inc/RustFFI.lean</a></p>",
        "id": 328307744,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1676572227
    },
    {
        "content": "<p>I based it on that repo, but it is a rust lib with no dependencies so not very representative. With dependencies you need to have all the dynlib dependencies topologically sorted or disable the --load-dynlib</p>",
        "id": 328326799,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676578161
    },
    {
        "content": "<p>I guess I could do something similar to copy out all those libraries too</p>",
        "id": 328327010,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676578235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/270676-lean4/topic/FFI.20to.20Rust.2FC.2B.2B/near/328270017\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> Is it possible to disable the load dynlib feature in Lake? I don't think I will need this in the interpreter</p>\n</blockquote>\n<p>Just turn off <code>precompileModules</code>? Oh, I guess you mean turning off loading external shared libraries during interpretation. Sadly, no that is not currently an option. It would be pretty easier to add though.</p>",
        "id": 328332133,
        "sender_full_name": "Mac Malone",
        "timestamp": 1676580284
    },
    {
        "content": "<p>One important design decision question, though, would be what should happen if a dependent package wants its dependencies dynlibs loaded but the dependency itself does not.</p>",
        "id": 328332354,
        "sender_full_name": "Mac Malone",
        "timestamp": 1676580367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> <br>\nWhy does the external shared library not properly declare its dependencies? At least on Unix, loading a correctly linked dynlib should automatically load its dependencies.</p>",
        "id": 328336035,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676581622
    },
    {
        "content": "<p>I suppose a simple workaround for avoiding the --load-dynlib though would be not to tell Lake about the library but add it manually to the linker flags</p>",
        "id": 328336262,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676581695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Yeah, that could be a nice feature.</p>",
        "id": 328338514,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676582535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> So that would mean using just <code>target</code> instead of <code>externLib</code>? <br>\nThe library declares some of it's dependencies which is shown by <code>ldd</code>, but not all apparently(?). I don't know why. It is built with rust and cargo to a static lib. Copied over to the build dir. How this interpreter dynamic loading is enabled is mysterious and it would be nice to have an option. <br>\nWould love for some more work on the FFI. Maybe someone will make a full rust FFI ABI interface?</p>",
        "id": 328339944,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676583035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I've tried handcrafting the link args, but I run into other problems:<br>\nUsing roughly <code>/home/anderscs/.elan/toolchains/leanprover--lean4---nightly-2023-02-06/bin/leanc -o ./build/bin/remodel ./build/ir/Main.o ./build/ir/Remodel.o -Lbuild/lib/ -Lrust/target/release/deps -lc -lc++ -lc++abi -lffi -lremodel_rust_ffi</code></p>\n<p>Which leads to some undefined references</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">pnajkjw1fz03z1x27ski1qbx9n3hd4df</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">//</span><span class=\"n\">libremodel_rust_ffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__cxx11</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">_M_replace</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">long</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">long</span><span class=\"o\">,</span> <span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">long</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">pnajkjw1fz03z1x27ski1qbx9n3hd4df</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">//</span><span class=\"n\">libremodel_rust_ffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__future_base</span><span class=\"o\">::</span><span class=\"n\">_Result_base</span><span class=\"o\">::</span><span class=\"n\">_Result_base</span><span class=\"o\">()</span><span class=\"bp\">'</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">pnajkjw1fz03z1x27ski1qbx9n3hd4df</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">//</span><span class=\"n\">libremodel_rust_ffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__throw_bad_cast</span><span class=\"o\">()</span><span class=\"bp\">'</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">pnajkjw1fz03z1x27ski1qbx9n3hd4df</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">//</span><span class=\"n\">libremodel_rust_ffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__cxx11</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"bp\">~</span><span class=\"n\">basic_string</span><span class=\"o\">()</span><span class=\"bp\">'</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">pnajkjw1fz03z1x27ski1qbx9n3hd4df</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">//</span><span class=\"n\">libremodel_rust_ffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">thread</span><span class=\"o\">::</span><span class=\"n\">detach</span><span class=\"o\">()</span><span class=\"bp\">'</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">pnajkjw1fz03z1x27ski1qbx9n3hd4df</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">//</span><span class=\"n\">libremodel_rust_ffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">thread</span><span class=\"o\">::</span><span class=\"n\">join</span><span class=\"o\">()</span><span class=\"bp\">'</span>\n</code></pre></div>\n<p>Why are these rust symbols not linked? I suppose these are from the rust std lib and intended to be loaded at runtime?</p>",
        "id": 328418473,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676625453
    },
    {
        "content": "<p>Ok, the answer is that I didn't link with <code>stdc++</code>and Idk why that is needed in a rust binary.</p>",
        "id": 328419035,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676625614
    },
    {
        "content": "<p>Reading between the lines, it seems like your Rust library has Rust dependencies, and maybe some parts of those are implemented in C++?</p>",
        "id": 328421562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676626374
    },
    {
        "content": "<p>Ok, it works now. <code>leanc -o ./build/bin/remodel ./build/ir/Main.o ./build/ir/Remodel.o -Lbuild/lib/ -lssl -lstdc++ -lffi -lremodel_rust_ffi</code><br>\nI think I can remove the <code>-lstdc++</code> too if I don't include the cxx rust dependency.</p>",
        "id": 328424269,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676627110
    },
    {
        "content": "<p>Rust shouldn't need stdc++ normally</p>",
        "id": 328424341,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676627133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  Follow up question: How do I add the targets to extraDepTargets without causing <code>unknown identifier '_package.name'</code></p>",
        "id": 328430757,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676628907
    },
    {
        "content": "<p>Oh, it was just adding strings not symbols</p>",
        "id": 328435404,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1676630310
    },
    {
        "content": "<p>What would be best practice for working with strings in a Rust to Lean and Lean to Rust context? Is it passing strings to <code>lean_mk_string_from_bytes(str, str_len)</code> based on the string in Rust? Just using <code>lean_mk_string(str)</code> on a null terminated C string borrowed from rust seems to cause segmentation fault.</p>",
        "id": 336481886,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1677245313
    },
    {
        "content": "<p>This causes a segmentation fault. Do I perhaps need to run <code>lean_inc(ns)</code>? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ?</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">rust_test</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">//char* namec = malloc();</span>\n<span class=\"w\">  </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_mk_string</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">name_l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_string_cstr</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 336491993,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1677247793
    },
    {
        "content": "<p>I don't see how that could fail if the string is indeed null-terminated. But really there's no reason not to use <code>lean_mk_string_from_bytes</code> if you want to avoid the extra conversion</p>",
        "id": 336505841,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677251006
    },
    {
        "content": "<p>Both of them cause segmentation fault apparently. Does lean_mk_string_from_bytes copy the string? Need to do more debugging next week.</p>",
        "id": 337899234,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1677278007
    },
    {
        "content": "<p>It does</p>",
        "id": 337960468,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677317332
    },
    {
        "content": "<p>It causes a segmentation fault and idk why.<br>\n Given this rust code calling from inside a tokio runtime:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"CString::new failed\"</span><span class=\"p\">);</span>\n<span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name_raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">into_raw</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rust_test</span><span class=\"p\">(</span><span class=\"n\">name_raw</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name_len</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// Take back ownership and drop</span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">CString</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">name_raw</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This causes a Segmentation fault in <code>0x000000000447258b in lean::utf8_strlen(char const*, unsigned long) ()</code></p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">rust_test</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">name_len</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_mk_string_from_bytes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name_len</span><span class=\"p\">);</span>\n<span class=\"c1\">//...</span>\n</code></pre></div>\n<p>I've also tried to use the rust <code>as_bytes</code> approach</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span>\n<span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rust_test</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But this also leads to segmentation fault. Can this be due to the pointer being freed before it is passed to C? I'm pretty stuck</p>",
        "id": 338604352,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1677595254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Do you have some hints?</p>",
        "id": 338608451,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1677596183
    },
    {
        "content": "<p>There is some way to find out the address of a segfault in gdb, you could check what the correlation to the pointer address in Rust is. Otherwise I can't say anything on these snippets.</p>",
        "id": 338630120,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677601251
    },
    {
        "content": "<p>gdb reports the segfault in <code>lean::utf8_strlen(char const*, unsigned long)</code>, but it seems to happen even when I set the size to 0 and the pointer should never be accessed.</p>",
        "id": 338759290,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1677655655
    },
    {
        "content": "<p>I guess my next step would be to break the error down into even smaller pieces.</p>",
        "id": 338759408,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1677655688
    }
]