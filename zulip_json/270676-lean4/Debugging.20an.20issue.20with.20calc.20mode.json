[
    {
        "content": "<p>I am having an issue with calc mode, which I hope the incredibly supportive Lean community can help me sort out.</p>\n<p>I want to use Lean to model a simple lambda calculus. I've already done this in Agda (see <a href=\"http://plfa.inf.ed.ac.uk\">plfa.inf.ed.ac.uk</a>). Relation (.~&gt;.) models a single reduction step, and relation (.~&gt;&gt;.) is its transitive closure.</p>\n<p>I declare the relation between (.~&gt;.) and (.~&gt;&gt;.) as follows.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">.~&gt;.</span>  <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;.</span>  <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">one_one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">.~&gt;.</span>  <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">one_many</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;.</span>  <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">many_one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">many_manyinstance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">.~&gt;.</span>  <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;.</span>  <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">one_one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">.~&gt;.</span>  <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">one_many</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;.</span>  <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">many_one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">.~&gt;&gt;.</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">many_many</span>\n</code></pre></div>\n<p>Further, I have  succeeded in using Lean to demonstrate individual reduction steps.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">~&gt;</span> <span class=\"o\">(</span><span class=\"bp\">ƛ</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)))</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span>\n    <span class=\"o\">:=</span> <span class=\"n\">xi_app_1</span> <span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"n\">Value.lambda</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">ƛ</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)))</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"n\">beta</span> <span class=\"n\">Value.zero</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">1</span>\n    <span class=\"o\">:=</span> <span class=\"n\">xi_app_2</span> <span class=\"n\">Value.lambda</span> <span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"n\">Value.zero</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">~&gt;</span> <span class=\"mi\">2</span>\n    <span class=\"o\">:=</span> <span class=\"n\">beta</span> <span class=\"o\">(</span><span class=\"n\">Value.succ</span> <span class=\"n\">Value.zero</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, if I try to combine them with <code>calc</code> then Lean complains.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">~&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">two_c</span> <span class=\"bp\">⬝</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">~&gt;</span> <span class=\"o\">(</span><span class=\"bp\">ƛ</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)))</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"n\">xi_app_1</span> <span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"n\">Value.lambda</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span><span class=\"o\">))</span>            <span class=\"o\">:=</span> <span class=\"n\">beta</span> <span class=\"n\">Value.zero</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">1</span>                       <span class=\"o\">:=</span> <span class=\"n\">xi_app_2</span> <span class=\"n\">Value.lambda</span> <span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"n\">Value.zero</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"mi\">2</span>                              <span class=\"o\">:=</span> <span class=\"n\">beta</span> <span class=\"o\">(</span><span class=\"n\">Value.succ</span> <span class=\"n\">Value.zero</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It complains about <code>beta Value.lambda</code> in the first line and <code>beta Value.zero</code> in the second line, even though exactly the same individual reductions are accepted in the examples above. The error messages complain that it is given one thing when it expects another, but the given and expected things are in fact definitionally equal.</p>\n<p>The full file from which the above is excerpted is at <a href=\"https://github.com/plfa/plfl/blob/main/src/Typesig.lean\">https://github.com/plfa/plfl/blob/main/src/Typesig.lean</a>.</p>\n<p>Any help would be greatly appreciated.</p>",
        "id": 403028276,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700411318
    },
    {
        "content": "<p>Replacing <code>two_c ⬝ suc_c ⬝ 0</code> by <code>two</code> in your <code>calc</code> example makes it compile, but Lean seems happy to accept</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">=</span> <span class=\"n\">two_c</span> <span class=\"bp\">⬝</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That's interesting.</p>",
        "id": 403033062,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700414332
    },
    {
        "content": "<p>Thanks, Mauricio. That is indeed interesting.</p>\n<p>On my machine, when I make the change you suggest it stops complaining about <code>beta Value.zero</code> but it still complains about <code>beta Value.lambda</code>.  (I'm running Lean4 v0.0.113 on Visual Studio 1.73.1 on a 2021 iMac.)</p>\n<p>Should I regard this as a bug in Lean? Will it go away? Is there a workaround in the meantime?</p>",
        "id": 403034127,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700414962
    },
    {
        "content": "<p>I would definitely consider updating to a modern Lean (it's on v4.3.something right now) to see if things work any better.</p>",
        "id": 403034297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700415045
    },
    {
        "content": "<p>v0.0.113 is the VS Code extension version, but you can get the lean version by typing <code>#eval Lean.versionString</code> on a new line in any open Lean file</p>",
        "id": 403034372,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700415095
    },
    {
        "content": "<p>I noticed the PLFL repository is not a Lake project, which is the preferred way of setting up projects these days. The reason I mention this here is because Lake projects contain a <code>lean-toolchain</code> file pinning the project to a particular Lean version, which is useful for reproducibility. Without that, you get whatever default version <code>elan</code> gives you (which you can see with <code>elan show</code>).</p>",
        "id": 403034656,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700415257
    },
    {
        "content": "<p>Lean version string tells me I am running \"4.0.0-nightly-2022-08-05\".</p>\n<p>I updated my Lean version earlier today by running <code>elan toolchain install stable</code> (which told me it fetched <code>Lean 4.2</code> despite the string above). What should I do to get a more up to date version running? Will Visual Studio immediately pick up on the update, or will I need to inform it somehow?</p>\n<p>Many thanks for your help!</p>",
        "id": 403034797,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700415356
    },
    {
        "content": "<p>Currently you're not using a project (which means imports probably don't work!), and if you want to keep it that way you can type <code>elan default stable</code>, after which VS Code will probably pick up the new version. </p>\n<p><code>lake new PLFL</code> is the command you'd use to create a new project, and then you can edit the <code>lean-toolchain</code> file to use a new version, which has the advantage of ensuring users of your project will also run your code with the same Lean version.</p>",
        "id": 403034965,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700415451
    },
    {
        "content": "<p>Running <code>elan show</code> gives me the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rambla</span><span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"k\">show</span>\n<span class=\"n\">installed</span> <span class=\"n\">toolchains</span>\n<span class=\"c1\">--------------------</span>\n\n<span class=\"n\">stable</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span>\n\n<span class=\"n\">active</span> <span class=\"n\">toolchain</span>\n<span class=\"c1\">----------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">fdaae2059410</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That suggests I'm running the nightly version, which should be more up to date than v4.3.3.something, so I don't know why it's numbered 4.0.0. Quite possibly I have this all wrong, in which case please let me know what I should do instead.</p>",
        "id": 403035163,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700415581
    },
    {
        "content": "<p>You're running _a_ nightly version, but it doesn't get updated automatically (<code>elan update nightly</code> does that)</p>",
        "id": 403035254,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700415630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> Thank you for the suggestion about <code>lake</code>.</p>",
        "id": 403035275,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700415640
    },
    {
        "content": "<p>Stable versions are quite fresh these days, so running on <code>nightly</code> is no longer as essential as it was a few months ago. You can switch your default channel to <code>stable</code> by running <code>elan default stable</code> if you prefer, but it's not too important.</p>",
        "id": 403035436,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700415756
    },
    {
        "content": "<p>I tried updating your repository to the newest Lean version and I found a funny calc behavior which may be the same one. The following code fails with \"type mismatch; <code>rfl</code> has type <code>3 + 9 = 3 + 9 : Prop</code> but is expected to have type <code>3 + 9 = 12 : Prop</code>\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But this one succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 403036368,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700416410
    },
    {
        "content": "<p><code>rfl</code> the tactic can be a little sophisticated. <code>rfl</code> the term just means <code>x=x</code>. Check their respective docstrings! Might be fun to think about why <code>by exact rfl</code> does work there, too.</p>",
        "id": 403036656,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700416648
    },
    {
        "content": "<p>Another calc-related funny thing from the repo:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">le</span> <span class=\"n\">m</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">le</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">le.step</span> <span class=\"o\">(</span><span class=\"n\">le.step</span> <span class=\"n\">le.refl</span><span class=\"o\">)</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">le.step</span> <span class=\"o\">(</span><span class=\"n\">le.step</span> <span class=\"n\">le.refl</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 403036813,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700416755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/270676-lean4/topic/Debugging.20an.20issue.20with.20calc.20mode/near/403036656\">said</a>:</p>\n<blockquote>\n<p><code>rfl</code> the tactic can be a little sophisticated. <code>rfl</code> the term just means <code>x=x</code>. Check their respective docstrings! Might be fun to think about why <code>by exact rfl</code> does work there, too.</p>\n</blockquote>\n<p>I don't think that's the issue. <code>example : 3 + 9 = 12 := rfl</code> outside <code>calc</code> works fine (as it should, since the two sides are defeq).</p>",
        "id": 403036918,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700416816
    },
    {
        "content": "<p>I'm sure someone will come here soon saying the <code>calc</code> tactic implementation is missing a <code>whnfR</code>, <code>instantiateMVars</code> or whatever</p>",
        "id": 403037027,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700416882
    },
    {
        "content": "<p>Thank you for the suggestions. I've updated to <code>stable-4.2.0</code>, but am still seeing the same issue. Interestingly, the update also broke my first single step reduction example, which worked previously. (Same thing happens if I switch to <code>nightly-4.4.0</code>.)</p>",
        "id": 403038054,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700417434
    },
    {
        "content": "<p>Whoops. Well, you can go back to the previous nightly with <code>elan default leanprover/lean4:nightly-2022-08-05</code>, but indeed I see the same error here now. I don't understand why my editor didn't show an error before.</p>",
        "id": 403038497,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700417703
    },
    {
        "content": "<p>I will submit a PR creating the project boilerplate in the hopes of avoiding these sorts of reproducibility issues in the future. No need to accept it if you don't feel like it fits the project.</p>",
        "id": 403038538,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700417733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> Thanks for the minimal example. How do I proceed to get this fixed? Is the first step just to wait and see if someone offers the answer you expect?</p>\n<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> Thank you!</p>",
        "id": 403038685,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700417831
    },
    {
        "content": "<ul>\n<li>Mauricio's example?</li>\n<li>I don't know, but maybe somebody who does will chime in?</li>\n</ul>",
        "id": 403039213,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700418139
    },
    {
        "content": "<p>I will file a bug</p>",
        "id": 403039498,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700418313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"505123\">Philip Wadler</span> <a href=\"#narrow/stream/270676-lean4/topic/Debugging.20an.20issue.20with.20calc.20mode/near/403038054\">said</a>:</p>\n<blockquote>\n<p>Thank you for the suggestions. I've updated to <code>stable-4.2.0</code>, but am still seeing the same issue. Interestingly, the update also broke my first single step reduction example, which worked previously. (Same thing happens if I switch to <code>nightly-4.4.0</code>.)</p>\n</blockquote>\n<p>Filed <a href=\"https://github.com/leanprover/lean4/pull/2913\">lean4#2913</a> for the minimized issue. You hit this issue in other PLFL files, but I don't think the minimized issue is the same as the <code>calc</code> problem you originally reported, since it occurs outside <code>calc</code> mode in the most recent Lean version.</p>\n<p>Would be good to understand why the single-step reduction example fails in the most recent Lean version (it seems like there are some metavars in the error output).</p>",
        "id": 403040665,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700418963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"505123\">@Philip Wadler</span> Weirdly I see the same issue in the single-step reduction example (<code>xi_app_1 (beta Value.lambda)</code>) in your file even using nightly-2022-08-05.</p>",
        "id": 403042570,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700420135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> Thanks for filing a bug report. Regarding the example failing under <code>nightly-2022-08-05</code> when it didn't earlier, I wonder if this is a heisenbug. That would explain why you didn't see an error at one point and did see one later. Anyhow, it certainly should work and the problem is not related to calc: is there another bug report to file here?</p>",
        "id": 403043555,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700420718
    },
    {
        "content": "<p>Most likely, but extracting a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> here will probably require more knowledge of the example than I have (I've read PLFA, but it's been a while!), and I guess will take longer too.</p>",
        "id": 403044540,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700421335
    },
    {
        "content": "<p>Indeed, extracting a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> will be difficult. (I'm pretty familiar with the problem, and I have no idea how to go about doing so.) Is it possible to just declare the current example an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I'm happy to remove extraneous code, although even after doing so it will be quite large.</p>",
        "id": 403045438,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700421931
    },
    {
        "content": "<p>Ah, wait, this is related to the problem in the other thread! <code>two_c</code> uses the <code># 0</code> notation which doesn't work.</p>",
        "id": 403045828,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700422174
    },
    {
        "content": "<p>So then this is just the <code>calc</code> problem, I think. Replacing <code>two_c ⬝ suc_c ⬝ 0</code> by <code>two</code> in the calc block (and <code># 0</code> by <code># Z</code> in the definition of <code>two_c</code>) makes it work.</p>",
        "id": 403045970,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700422247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Debugging.20an.20issue.20with.20calc.20mode/near/403036368\">said</a>:</p>\n<blockquote>\n<p>... But this one succeeds: ...</p>\n</blockquote>\n<p>If you look at the types, you can see for example <code>@Eq ?m.239 (3 + 9) 12</code>, indicating it hasn't decided on the types of the numerals yet. Numerals rely on a <code>@[default_instance]</code> to eventually get specialized to <code>Nat</code> if no better idea comes along first.</p>\n<p>Giving a type ascription lets it proceed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>When you did <code>by rfl</code>, what happened is that this allows the <code>rfl</code> to be deferred until later (<code>by exact rfl</code> works too for this -- there's nothing special about the <code>rfl</code> tactic in this case).</p>",
        "id": 403047005,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700423045
    },
    {
        "content": "<p>Is the other example in <a href=\"https://github.com/leanprover/lean4/pull/2913\">lean4#2913</a> (the <code>2 ≤ 4</code> one) also expected to fail? I can close the issue if so. The only reason I opened it was because it was a regression, but maybe it was never supposed to work in the first place.</p>",
        "id": 403047146,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700423188
    },
    {
        "content": "<p>I guess my question is: It works if I give a type ascription inside the <code>calc</code> mode, but not if I include a type ascription in the goal. Should <code>calc</code> be able to use the expected types to help figure out the types of the numerals inside it?</p>",
        "id": 403047285,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700423387
    },
    {
        "content": "<p>I think at least for <code>=</code>, the fact <code>calc</code> fails is consistent with this failing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span><span class=\"o\">)</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  type mismatch</span>\n<span class=\"cm\">    rfl</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    3 + 8 = 3 + 8 : Prop</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    3 + 8 = 12 : Prop</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 403047513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700423564
    },
    {
        "content": "<p>It's too bad you can't get it to succeed with <code>(rfl (α := Nat) : 3 + 8 = 12)</code>...</p>",
        "id": 403047563,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700423636
    },
    {
        "content": "<p>In your <code>example : 2 ≤ 4 := le.step (le.step le.refl)</code> example, this succeeds because default instances are chosen by the time the body is elaborated.</p>",
        "id": 403047660,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700423719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"505123\">@Philip Wadler</span> I'm not sure where you are right now with needing a workaround, but I suspect you can replace <code>:= ...</code> with <code>by exact ...</code> where you're having errors in <code>calc</code>.</p>",
        "id": 403047785,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700423852
    },
    {
        "content": "<p>Never mind, that doesn't work.</p>",
        "id": 403047904,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700423952
    },
    {
        "content": "<p>Anyway, here's a style you could try that helps keep different proofs in a <code>calc</code> block from interacting with each other:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">~&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">two_c</span> <span class=\"bp\">⬝</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">~&gt;</span> <span class=\"o\">(</span><span class=\"bp\">ƛ</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)))</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span><span class=\"o\">))</span>            <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">1</span>                       <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"mi\">2</span>                              <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">xi_app_1</span> <span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"n\">Value.lambda</span><span class=\"o\">)</span> <span class=\"c1\">-- error here</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">beta</span> <span class=\"n\">Value.zero</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">xi_app_2</span> <span class=\"n\">Value.lambda</span> <span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"n\">Value.zero</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">beta</span> <span class=\"o\">(</span><span class=\"n\">Value.succ</span> <span class=\"n\">Value.zero</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403048107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700424096
    },
    {
        "content": "<p>Aha, so this explains a lot. I had replaced <code># S Z</code> and <code># Z</code> by <code># 1</code> and <code># 0</code> where the original definitions did not report an error, so I thought it made no difference. But it _did_ make a difference further down, in the examples to test single reduction steps. This explains why the bug came and went, because I made those changes between when it worked and when it started to display the bug.</p>\n<p>Further, if I add a type ascription to the first line then <code>calc</code> now works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">~&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">two_c</span> <span class=\"bp\">⬝</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n      <span class=\"bp\">~&gt;</span> <span class=\"o\">(</span><span class=\"bp\">ƛ</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"bp\">#</span> <span class=\"n\">Z</span><span class=\"o\">)))</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"n\">xi_app_1</span> <span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"n\">Value.lambda</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">0</span><span class=\"o\">))</span>            <span class=\"o\">:=</span> <span class=\"n\">beta</span> <span class=\"n\">Value.zero</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">suc_c</span> <span class=\"bp\">⬝</span> <span class=\"mi\">1</span>                       <span class=\"o\">:=</span> <span class=\"n\">xi_app_2</span> <span class=\"n\">Value.lambda</span> <span class=\"o\">(</span><span class=\"n\">beta</span> <span class=\"n\">Value.zero</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">~&gt;</span> <span class=\"mi\">2</span>                              <span class=\"o\">:=</span> <span class=\"n\">beta</span> <span class=\"o\">(</span><span class=\"n\">Value.succ</span> <span class=\"n\">Value.zero</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That also explains why replacing <code>two_c  ⬝ suc_c ⬝ 0</code> by <code>two</code> makes <code>calc</code> work, because <code>two</code> is equal to the former but provides additional information about the type.</p>\n<p>So it works, and no need for a bug report. Yay!</p>\n<p>Of course it would be nice if the type information from the signature of the example could propagate into the calc, but I guess that's a deeper matter.</p>",
        "id": 403048316,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700424215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>     Adding a type ascription to the <code> 2 ≤ 4 </code> example fixes that problem as well.</p>\n<p>Thank you everyone for the help! The Lean community is fantastic.</p>",
        "id": 403048962,
        "sender_full_name": "Philip Wadler",
        "timestamp": 1700424768
    },
    {
        "content": "<p>I noticed that Leo added a workaround to the <code>show</code> tactic (<a href=\"https://github.com/leanprover/lean4/commit/474f1a4d39bac6310fbd47aa4545d6c15fb14d53\">https://github.com/leanprover/lean4/commit/474f1a4d39bac6310fbd47aa4545d6c15fb14d53</a>) a day after the original change (which was a fix for <a href=\"https://github.com/leanprover/lean4/pull/2011\">lean4#2011</a>). Hopefully the <code>calc</code> tactic can use a similar one to reduce the number of needed ascriptions.</p>",
        "id": 403050280,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700425947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> It's been pointed out to me that my arithmetic was bad, and that actually this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>That suggests to me that the <code>calc</code> equivalent should work too.</p>",
        "id": 403056874,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700432144
    }
]