[
    {
        "content": "<p>first some <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>: I want to write a macro that is called as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">getStatusCodes</span><span class=\"bp\">!</span> <span class=\"o\">[</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>because I assumed it would be easier to just use <code>term</code> parser instead of making a custom syntax for this. But I need the (evaluated) value within the macro implementation. Is there a function to run a <code>term</code> or elaborated <code>expr</code>?</p>\n<p>I see <code>#eval</code> just adds a new declaration to the environment, calls <code>evalConst</code>, and then resets the environment. Is there a function that already does this somewhere in core/std?</p>",
        "id": 390068858,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694298206
    },
    {
        "content": "<p>and if I should just make a custom syntax category, then I will do that :p</p>",
        "id": 390068932,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694298279
    },
    {
        "content": "<p>(this would also be nice to have as an abstraction so that the <code>evalConst</code> unsafeness can be hidden)</p>",
        "id": 390070719,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694300253
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Meta/Eval.html#Lean.Meta.evalExpr\">https://leanprover-community.github.io/mathlib4_docs/Lean/Meta/Eval.html#Lean.Meta.evalExpr</a> maybe?</p>",
        "id": 390075398,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694304606
    },
    {
        "content": "<p>ooh that does look like the right signature</p>",
        "id": 390075456,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694304658
    },
    {
        "content": "<p>don't love that it's unsafe<br>\nEDIT: termUnsafe saves the day :)</p>",
        "id": 390075460,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694304663
    }
]