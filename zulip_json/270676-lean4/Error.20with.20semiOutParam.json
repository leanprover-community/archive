[
    {
        "content": "<p>Hi, the following code should explain pretty well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyProp</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">MyProp</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Works -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">S</span> <span class=\"n\">ℚ</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Error: instance does not provide concrete values for (semi-)out-params -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ApparentlyICanNameThis</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">T</span> <span class=\"n\">ℚ</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ApparentlyICanNameThis</span>             <span class=\"c1\">-- Also exists</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">MyProp</span> <span class=\"n\">S</span>                            <span class=\"c1\">-- False</span>\n<span class=\"k\">#eval</span> <span class=\"n\">MyProp</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- Funny enough, this evaluates (to True)</span>\n</code></pre></div>\n<p>A few questions:</p>\n<ol>\n<li>Why does it error? (at ApparentlyICanNameThis)</li>\n<li>Why does it work?  (at ApparentlyICanNameThis)</li>\n<li>Why are the questions above contradictory?</li>\n<li>Is this (<code>ApparentlyICanNameThis</code> existing) a bug?</li>\n</ol>",
        "id": 396555803,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697222684
    },
    {
        "content": "<p>The semi-out-param error goes away if I change it to <code>CoeOut T ℚ</code>. I think this makes sense given <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#Important-typeclasses\">the explanation here in the <code>Coe</code> docs</a></p>",
        "id": 396557349,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697223499
    },
    {
        "content": "<p>I <em>think</em> that actually this behavior makes sense. a semi-out-param is an argument to the type class which should be solved for first (or, earlier than other things) during unification. It's basically a marker which says, \"hey, Lean, if you're stuck trying to unify the type, try unifying this thing first.\" That's good as long as there is some way to do it. For example, Mathlib uses this for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsROrC#doc\">docs#IsROrC</a> because there's only two (i.e., <code>ℝ</code> and <code>ℂ</code>) instances of that type, and so it should be easy for Lean to figure out which one it is. Now, if you <em>fix</em> <code>S : Finset ℚ</code>, and create the <code>Coe</code> instance, that's not a problem because you're essentially only adding the single type <code>S</code>(it gets coerced from <code>Finset</code> to a type) to the list of things Lean needs to look for. But in your <code>ApparentlyICanNameThis</code> declaration, you are adding <em>all</em> of <code>Finset Q</code> to the list of list of things Lean needs to try, which will make it a bad semi-out-param. Therefore, Lean errors (as it should because otherwise this is a massive footgun), but it doesn't actually prevent the instance being added to the environment.</p>",
        "id": 396557372,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697223512
    },
    {
        "content": "<p>The <code>CoeOut</code> direction should be fine.</p>",
        "id": 396557466,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697223566
    },
    {
        "content": "<p>After changing it to <code>CoeOut</code>, the remaining error is because <code>MyProp</code> explicitly requires <code>[Coe α ℚ]</code>, not <code>[CoeOut α ℚ]</code>. This can be fixed by changing the requirement. I don't know what would be suitable.. Maybe <code>[CoeHTCT α ℚ]</code>?</p>",
        "id": 396557781,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697223691
    },
    {
        "content": "<p>Why not make it <code>[CoeOut α ℚ]</code>? It's a bit hard to say because I'm not entirely sure what you're trying to do overall.</p>",
        "id": 396559063,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697224313
    },
    {
        "content": "<p>Sorry for the late reply. Thanks, CoeOut works, I will read the docs.</p>",
        "id": 396635851,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697277545
    },
    {
        "content": "<blockquote>\n<p>It's a bit hard to say because I'm not entirely sure what you're trying to do overall.</p>\n</blockquote>\n<p>I just want to express the instance / property \"\\alpha is a type that is Coe'able to \\Q\"</p>",
        "id": 396635885,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697277591
    },
    {
        "content": "<p>Do you want this coercion to have any particular properties?</p>",
        "id": 396636168,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697277781
    },
    {
        "content": "<p>Not right now, I just wanted my <code>MyProp</code> to pass type check, my focus was on the <code>Decidable</code> part (and making it computable) haha<br>\nBut I need more properties later I will ask again? :)</p>",
        "id": 396637371,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697278684
    },
    {
        "content": "<p>In particular, this works for my purpose!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.Additive.Behrend</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CoeOut</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">MyProp</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">MyProp</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ApparentlyICanNameThis</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CoeOut</span> <span class=\"n\">T</span> <span class=\"n\">ℚ</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"n\">ApparentlyICanNameThis</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">MyProp</span> <span class=\"n\">S</span>\n<span class=\"k\">#eval</span> <span class=\"n\">MyProp</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 396637413,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697278720
    }
]