[
    {
        "content": "<p>Hi, I am facing an issue using theorems about integer division from two different files. I think this has to do with syntax expansion for the divide operator and automatic typeclass inference. This is illustrated in the following, where the first two examples pass but the third doesn't.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HDiv.hDiv</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHDiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">myHDivInt</span> <span class=\"o\">:</span> <span class=\"n\">HDiv</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n  <span class=\"n\">hDiv</span> <span class=\"o\">:=</span> <span class=\"n\">Int.div</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">myHDivInt.hDiv</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HDiv.hDiv</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHDiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Any suggestions on what I should do?</p>",
        "id": 358554410,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1684178963
    },
    {
        "content": "<p>It seems that the division on the integers is defined using the <em>homogeneous</em> <code>Div</code> typeclass.  In your first and second examples, the <code>/</code> gets matched with the inhomogeneous division, while in the third one you explicitly try to match homogeneous and inhomogeneous divisions and Lean gets confused.</p>\n<p>I think...</p>",
        "id": 358557871,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684180113
    },
    {
        "content": "<p>If this is the case, the answer is probably to try to be careful when you use <code>/</code> since Lean may interpret it as (non-)homogeneous, as it sees fit...</p>",
        "id": 358558212,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684180212
    },
    {
        "content": "<p>Thanks. Using <code>/</code> conservatively is probably the right thing, but I am not sure if I'll be able to use some tactics like <code>ring</code> then. For reference, here's a small example of the kind of lemma I was trying to prove using lemmas currently in mathlib4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Floor</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_div_coprime_mul_neq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">n.coprime</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int_div_coprime_neq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">n.natAbs.coprime</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">mgt1</span> <span class=\"n\">ncprime</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Not.intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">contra</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Int.div</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat_div_coprime_mul_neq</span> <span class=\"n\">mgt1</span> <span class=\"n\">ncprime</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">contra</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.natAbs_mul</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_cast</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Int.div_def'</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>The last line there throws the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Int.div_def'</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">m</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HDiv.hDiv</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHDiv</span> <span class=\"n\">ℤ</span> <span class=\"n\">Int.instDivInt</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Int.div</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HDiv.hDiv</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHDiv</span> <span class=\"n\">ℤ</span> <span class=\"n\">Int.instDivInt_1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Int.div</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 358563427,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1684181945
    },
    {
        "content": "<p>It seems that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.instDivInt_1#doc\">docs4#Int.instDivInt_1</a> is a thing.  According to the docstrings, it should override <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.div#doc\">docs4#Int.div</a>, but it seems that there is some leakage in your example, maybe.</p>",
        "id": 358564189,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684182208
    },
    {
        "content": "<p>Ok, I think that this is related to <a href=\"#narrow/stream/287929-mathlib4/topic/.22.25.22.20vs.20.22Int.2Emod.22\">this discussion</a>.  These are some known issues about various ways of defining <code>Int.mod</code> and <code>Int.div</code> apparently.</p>",
        "id": 358564484,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684182308
    },
    {
        "content": "<p>Indeed, look:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Int.div</span>  <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Int.ediv</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"c1\">-- -1</span>\n</code></pre></div>\n<p>One rounds below, the other one aims towards <code>0</code>.</p>",
        "id": 358565020,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684182470
    },
    {
        "content": "<p>Thus, the two divisions carried by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.instDivInt#doc\">docs4#Int.instDivInt</a> and  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.instDivInt_1#doc\">docs4#Int.instDivInt_1</a> are not just not definitionally equal, they are genuinely <em>different</em>.</p>",
        "id": 358565205,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684182536
    },
    {
        "content": "<p>Yeah, you got side-tracked at <code>suffices h: n / m = Int.div n m</code>, that's not guaranteed (unless m \\mid n)</p>",
        "id": 358565531,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684182637
    },
    {
        "content": "<p>Thank you! That is really helpful. I was looking at the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Rat/Basic.html#Rat.floor\">Rat.floor</a>, and I thought that the <code>/</code> there referred to <code>Int.div</code> because of the <code>Div</code> instance in the standard library</p>",
        "id": 358566996,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1684183163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"244522\">Mayank Manjrekar</span> has marked this topic as resolved.</p>",
        "id": 358567143,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684183208
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Floor</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">int_div_coprime_neq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">n.natAbs.coprime</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">mgt1</span> <span class=\"n\">ncprime</span> <span class=\"n\">contra</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mgt1.ne'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ncprime.symm.eq_one_of_dvd</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.ofNat_dvd_left</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">contra</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Int.dvd_mul_left</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">m</span>\n</code></pre></div>\n</div></div>",
        "id": 358567492,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684183359
    },
    {
        "content": "<p>FWIW:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Floor</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_div_coprime_mul_neq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">n.coprime</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.coprime_iff_gcd_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hnm</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_dvd</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">this</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_gcd_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.dvd_mul_left</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 358568938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684183931
    }
]