[
    {
        "content": "<p>I am writing an elaborator that generates a bunch of syntax and feeds it to <code>elabCommand</code>.<br>\nI do trace all generated syntax. Nonetheless, whenever I inevitably mess something up, it is very hard to relate the error in my infoview to which piece of syntax actually causes that error.</p>\n<p>I tried to wrap <code>elabCommand</code> in a <code>try ... catch</code>, but it seems the errors aren't actually bubbled up; they're just logged. Does anybody have some tips for how to debug metaprograms? I saw some mention of hooking up gdb to lean. Is there an easy way to do that inside vscode, allowing me to set breakpoints in my Lean code, or am I doomed to finally learn to work with gdb's CLI?</p>",
        "id": 346944249,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1680634288
    },
    {
        "content": "<p>The better approach is to either use <code>%$tk</code> on tokens of your syntax to copy the positions to generated tokens (for a macro-like command) or to use <code>withRef tk</code> when calling elaborator functions (for an elab-like command) so that error messages that are reported end up on the correct spans.</p>",
        "id": 346945191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680634561
    },
    {
        "content": "<p>Although, the second paragraph seems to be going in a completely different direction here, it sounds like you don't just want to relate the error messages to syntax but to actually debug the program in GDB or something</p>",
        "id": 346945414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680634628
    },
    {
        "content": "<p>Sure, that works if there is an issue with the input syntax (and I do do that). My elaborator is quite complex, though, I meant when I make mistakes in my metaprogram and the syntax I generate is wrong.</p>",
        "id": 346945533,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1680634656
    },
    {
        "content": "<p>Most of the time when I want to debug metaprograms I use <code>println!</code> or <code>trace[Meta.debug]</code>, depending on the context</p>",
        "id": 346945570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680634665
    },
    {
        "content": "<p>My problem is that there are actually a few different places in my code (the elaborator is more than 500 SLOC), so it is difficult to figure out exactly which one is wrong.</p>",
        "id": 346945716,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1680634701
    },
    {
        "content": "<p>I would use targeted trace messages for that</p>",
        "id": 346945769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680634720
    },
    {
        "content": "<p>just put different print lines before each of the lines that could possibly go wrong and see what the last thing that is printed is</p>",
        "id": 346945937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680634770
    },
    {
        "content": "<p>Right, except that elabCommand just logs error, ignores them and chugs right through to the rest (that's presumably also why <code>try ... catch</code>ing doesn't work). So all syntax is traced, and I'm left with an info log that says <code>unknown identifier 'α'</code>. It would be nice to immediately see which invocation  of <code>elabCommand</code> caused that error</p>",
        "id": 346946301,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1680634854
    },
    {
        "content": "<p>Aha, but if I run the build on the command line, then I can see in-between which traces the error is logged! It's only when running from inside vscode when this information is lost (because errors are shown separately from traces). Thanks for pointing me in the right direction!</p>",
        "id": 346949261,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1680635840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/Debugging.20errors.20in.20generated.20syntax/near/346946301\">said</a>:</p>\n<blockquote>\n<p>Right, except that elabCommand just logs error, ignores them and chugs right through to the rest (that's presumably also why <code>try ... catch</code>ing doesn't work). So all syntax is traced, and I'm left with an info log that says <code>unknown identifier 'α'</code>. It would be nice to immediately see which invocation  of <code>elabCommand</code> caused that error</p>\n</blockquote>\n<p>The trace messages will be preserved even if the elabCommand causes an error</p>",
        "id": 346951157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680636460
    },
    {
        "content": "<p>Exactly, there doesn't seem to be a difference in the trace messages when elabCommand causes an error and when it doesn't.</p>",
        "id": 346951721,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1680636646
    }
]