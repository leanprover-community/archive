[
    {
        "content": "<p>I have a question about navigating in conv. Suppose your goal looks like <code>f a b c = ...</code>.<br>\nNow I use <code>conv</code> to zoom in on <code>a</code> and do some careful rewriting as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">lhs</span>\n   <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n   <span class=\"c1\">--- tactics to  modify a</span>\n</code></pre></div>\n<p>How do I zoom out of <code>a</code> so that I can do something with <code>b</code> for example.</p>",
        "id": 357898979,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683903390
    },
    {
        "content": "<p>I think you can use curly braces, so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 357902595,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683904001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/conv.20navigation.20.3A.20Zoom.20out/near/357902595\">said</a>:</p>\n<blockquote>\n<p>I think you can use curly braces, so</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I get spurious <code>no goals to be solved</code></p>",
        "id": 357904355,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683904295
    },
    {
        "content": "<p>Oh, I see, <code>conv</code> doesn't support this sort of thing as far as I can tell.</p>",
        "id": 357905247,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683904444
    },
    {
        "content": "<p>You can do <code>congr</code> (or equivalently <code>args</code>) instead of <code>arg 1</code> and then use <code>rfl</code> for each argument you don't want to handle</p>",
        "id": 357905389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683904473
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">args</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"n\">rfl</span> <span class=\"c1\">-- or { }</span>\n</code></pre></div>",
        "id": 357907167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683904764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/conv.20navigation.20.3A.20Zoom.20out/near/357907167\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">args</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"n\">rfl</span> <span class=\"c1\">-- or { }</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This works but only partially in my case. When I need to do something other than <code>rfl</code> in the end, I again get spurious <code>no goals to be solved</code> errors</p>",
        "id": 357908698,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683904955
    },
    {
        "content": "<p>Thanks for the <code>congr</code> and <code>args</code> suggestion. It helps to a certain extent</p>",
        "id": 357908851,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683904973
    },
    {
        "content": "<p>Although it might be a useful feature to be able to navigate one step higher in the expression tree</p>",
        "id": 357908980,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683904998
    },
    {
        "content": "<p>It seems like it might be useful, but I think that'd take redesigning <code>conv</code> mode. Right now you can't re-conv the result of a previous conv, and <code>arg 1</code> works by doing <code>congr</code> and then <code>rfl</code> on every goal but number 1.</p>",
        "id": 357909918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683905126
    },
    {
        "content": "<p>Another thing you could do is a sequence of <code>conv</code>s. There's a short form <code>enter [...]</code> for navigation. <code>enter [1, 1]</code> should get you to the LHS, arg 1, for example.</p>",
        "id": 357910142,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683905172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/conv.20navigation.20.3A.20Zoom.20out/near/357909918\">said</a>:</p>\n<blockquote>\n<p>It seems like it might be useful, but I think that'd take redesigning <code>conv</code> mode. Right now you can't re-conv the result of a previous conv, and <code>arg 1</code> works by doing <code>congr</code> and then <code>rfl</code> on every goal but number 1.</p>\n</blockquote>\n<p>Currently I am working around the issue by introducing  new conv blocks.</p>",
        "id": 357910212,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683905190
    },
    {
        "content": "<p>But then the question is, for every path from the top level expression to the leaf nodes, should users have to start a new conv.</p>",
        "id": 357910505,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683905244
    },
    {
        "content": "<p>Oh, you know what, it turns out you can do this using nested <code>conv</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">arg</span> <span class=\"mi\">2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 357911306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683905391
    },
    {
        "content": "<p>I didn't find the documentation particularly illuminating, but the implementation seemed promising as I was reading through the source trying to uncover Lean's secrets</p>",
        "id": 357912407,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683905590
    },
    {
        "content": "<p>Yes nesting conv blocks is the way to go, it works well. </p>\n<p>The only annoying thing I found is that sometimrs it feels a bit too verbose than a zoom out command would and nested blocks do not support <code>conv in &lt;pattern&gt; =&gt; ...</code> syntax.</p>",
        "id": 357915435,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683906125
    },
    {
        "content": "<p>It turns out <code>conv in &lt;pattern&gt; =&gt; ...</code> syntax is a synonym for <code>conv =&gt; pattern &lt;pattern&gt;; ...</code>. It shouldn't be hard to add nested <code>conv in</code> as additional syntax.</p>",
        "id": 357925584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683908168
    }
]