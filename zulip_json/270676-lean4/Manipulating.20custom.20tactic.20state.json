[
    {
        "content": "<p>Hi people, I am trying to create a machine interactable theorem proving environment. Ideally I want an interface where I can create a tactic state with a goal and execute tactics on it with backtracking enabled. I read in <code>Lean/Elab/Tactic/Basic.lean</code> that  there are these two types and this function</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>abbrev TacticM := ReaderT Context $ StateRefT State TermElabM\nabbrev Tactic  := Syntax â†’ TacticM Unit\n...\ndef run (mvarId : MVarId) (x : TacticM Unit) : TermElabM (List MVarId)\n</code></pre></div>\n<p>It seems like I can feed a tactic and a metavar into <code>run</code> and the tactic would manipulate the proof state. What I don't understand from this code is where can I provide the context? I have <code>Environment</code> objects and I would like to use them as the context.</p>",
        "id": 357171706,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683699233
    },
    {
        "content": "<p><code>TermElabM</code> is itself a monad, responsible for maintaining that context.</p>",
        "id": 357172127,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683699367
    },
    {
        "content": "<p>most of the context like the environment is hidden in the monad state of <code>TermElabM</code> here</p>",
        "id": 357172131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683699368
    },
    {
        "content": "<p>It's a bit hard to tell what you want to do: it sounds like Lean itself is the solution to the problem you've specified. :-)</p>",
        "id": 357172175,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683699389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Manipulating.20custom.20tactic.20state/near/357172175\">said</a>:</p>\n<blockquote>\n<p>It's a bit hard to tell what you want to do: it sounds like Lean itself is the solution to the problem you've specified. :-)</p>\n</blockquote>\n<p>I'm building a text based interface to run tactics on custom examples. Both the examples (theorem to be proven) and tactics will be fed in by text</p>",
        "id": 357172413,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683699459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Manipulating.20custom.20tactic.20state/near/357172131\">said</a>:</p>\n<blockquote>\n<p>most of the context like the environment is hidden in the monad state of <code>TermElabM</code> here</p>\n</blockquote>\n<p>What is <code>StateRefT</code>?</p>",
        "id": 357172574,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683699499
    },
    {
        "content": "<p>You should think of it as <code>StateT</code>, that is, it has a state value that is modified and passed out</p>",
        "id": 357172644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683699525
    },
    {
        "content": "<p>in lean <code>State</code> = read-write data</p>",
        "id": 357172698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683699550
    },
    {
        "content": "<p>and <code>Context</code> / <code>Reader</code> = read-only data</p>",
        "id": 357172728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683699562
    },
    {
        "content": "<p>How is <code>StateRefT</code> different from <code>StateT</code> and <code>State</code>?</p>",
        "id": 357172754,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683699572
    },
    {
        "content": "<p><code>StateRefT</code> implements the API of <code>StateT</code> but it uses mutable references behind the scenes to do it</p>",
        "id": 357172828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683699602
    },
    {
        "content": "<p>Thanks! That answers all of my questions</p>",
        "id": 357173413,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683699773
    }
]