[
    {
        "content": "<p>What is the name of the theorem for <code>(p → q) → ¬q → ¬p</code>?</p>",
        "id": 380156694,
        "sender_full_name": "Omnikar",
        "timestamp": 1690763471
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Function.mt</span>\n</code></pre></div>",
        "id": 380157933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690763914
    },
    {
        "content": "<p>What does mt stand for?</p>",
        "id": 380160374,
        "sender_full_name": "Omnikar",
        "timestamp": 1690764583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"547525\">@Omnikar</span> <a href=\"https://en.wikipedia.org/wiki/Modus_tollens\">modus tollens</a></p>",
        "id": 380161377,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690764867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Contrapositive.20theorem/near/380157933\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Function.mt</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Scott, I think you mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: Function.mt</span>\n</code></pre></div>",
        "id": 380170412,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690768629
    },
    {
        "content": "<p>Omnikar, <code>exact?</code> is a tactic that searches the library for the lemma that closes the goal.</p>",
        "id": 380170505,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690768684
    },
    {
        "content": "<p>Haha!!! I promise I tried that (aiming to post that was why I copied and pasted into a new window!) but mysteriously it didn't work for me. :-)</p>",
        "id": 380172562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690769747
    },
    {
        "content": "<p>I didn't try it, so maybe it wouldn't have worked for me either!</p>",
        "id": 380176263,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690771786
    },
    {
        "content": "<p>It doesn't work for me either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">`exact?` could not close the goal. Try `apply?` to see partial suggestions.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> can you do your black magic again?</p>",
        "id": 380353732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690811856
    },
    {
        "content": "<p>weird. If I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Tactic.librarySearch.lemmas</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>then I see both <code>mt</code> and <code>Function.mt</code> show up as candidates:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Tactic.librarySearch.lemmas</span><span class=\"o\">]</span> <span class=\"n\">Candidate</span> <span class=\"n\">library_search</span> <span class=\"n\">lemmas</span><span class=\"o\">:</span>\n    <span class=\"o\">[(</span><span class=\"n\">mt</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">asymm</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">irrefl</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">Iff.not</span><span class=\"o\">,</span> <span class=\"n\">mp</span><span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">Not.imp</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">Iff.not</span><span class=\"o\">,</span> <span class=\"n\">mpr</span><span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">asymm_of</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">not_congr</span><span class=\"o\">,</span> <span class=\"n\">mpr</span><span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">mp</span><span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">not_congr</span><span class=\"o\">,</span> <span class=\"n\">mp</span><span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">irrefl_of</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">Not.intro</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">Eq.mpr_not</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"n\">Function.mt</span><span class=\"o\">,</span> <span class=\"o\">),</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 380359662,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690812724
    },
    {
        "content": "<p>but for some reason neither is selected</p>",
        "id": 380359773,
        "sender_full_name": "David Renshaw",
        "timestamp": 1690812738
    }
]