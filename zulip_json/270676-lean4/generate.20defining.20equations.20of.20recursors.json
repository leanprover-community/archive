[
    {
        "content": "<p>Is there any (meta)code to generate the defining equations of recursors? So for example, for the <code>Nat</code> type, I'd like to generate the equations </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.rec</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">Nat.rec</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">Nat.rec</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Of course, all of these are provable by <code>rfl</code>, but the tactic I am working on cannot deal with definitional equality.</p>",
        "id": 327084702,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1676044060
    },
    {
        "content": "<p>Not that I know of. Should be fairly easy to write though. (There may be problems with nested and mutual types; I don't even know whether we generate proper recursors for these.) I can give it a shot if you want.</p>",
        "id": 327088195,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1676044975
    },
    {
        "content": "<p>Ok, thanks, I'll try to implement it myself.</p>",
        "id": 327096083,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1676047088
    }
]