[
    {
        "content": "<p>This code was produced from working Lean 3 code, but in Lean 4 theres an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.FieldDivision</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Sylow</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.OrderOfElement</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">vanishingPoly</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vanish_poly_for_subgroup_elem</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">vanishingPoly</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The issue is that it's not coercing the <code>g</code> to <code>k</code>. Can I do this somehow without having to write .val.val?</p>",
        "id": 368685200,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687465263
    },
    {
        "content": "<p><code>((g : k\\^x) : k)</code>?</p>",
        "id": 368685377,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687465320
    },
    {
        "content": "<p>Well yes, but without that either. It was one character before, can I just import something to get it to recognize it can coerce this?</p>",
        "id": 368685673,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687465401
    },
    {
        "content": "<p>Coercions have totally changed in lean 4. Maybe you can add the appropriate coercion? I would tell you what this is but I don't understand the new system.</p>",
        "id": 368698302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687469314
    }
]