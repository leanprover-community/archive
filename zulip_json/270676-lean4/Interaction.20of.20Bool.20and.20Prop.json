[
    {
        "content": "<p>In principle I understand the difference between Bool and Prop, but I'm still struggling to do fairly simple things with them. </p>\n<p>Like suppose I want to have an if then else block where the if checks a condition and then calls a function that requires a proof in the then block. How do I convert the boolean check to the necessary proof term?</p>\n<p>Here's an example. I've previously defined a custom null constructor. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getByIndex</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">If</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list.length</span> <span class=\"k\">then</span>  <span class=\"n\">list.get</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">null</span>\n</code></pre></div>\n<p>Of course this doesn't work because list.get requires and argument of type <code> Fin (List.length list)</code> which is a dependent pair where the second item in the pair is a proof that the nat in the first place is less than length. It seems like it should be possible to construct this here since I've done the check in the if, but I can't figure out the syntax.</p>\n<hr>\n<p>Update: thinking about it a bit more I solved my problem using a local definition with pattern matching to define a get function in the context of my definition. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"n\">instanciation</span><span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">get</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">El</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">list.get</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Option.none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nothing</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Option.some</span> <span class=\"n\">el</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">el</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">El</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">inst</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">El</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">connect</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span>  <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span>  <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">connect</span> <span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>It works! Not sure if there is a better way to do it.</p>",
        "id": 408757334,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1702958562
    },
    {
        "content": "<p>I think the syntax you’re looking for in the first part may be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list.length</span> <span class=\"k\">then</span>\n  <span class=\"n\">body1</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">body2</span>\n</code></pre></div>\n<p>There are many other cases of this sort of pattern (where we want a hypothesis in a context we’ve created) and “put <code>h : </code> before the appropriate part of the syntax” is usually the way to get it into the local context :) (other examples include <code>for</code> and <code>match</code>)</p>",
        "id": 408832117,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702972212
    },
    {
        "content": "<p>Thanks Thomas! That is great, so obvious in hindsight. </p>\n<p>Here is my example re-worked a bit. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getWithCustomNull</span> <span class=\"o\">(</span><span class=\"n\">null</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list.length</span> <span class=\"k\">then</span>\n  <span class=\"n\">list.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">null</span>\n</code></pre></div>\n<p>But it leads to another question. How does Lean know whether h exists? Does this only work for decidable propositions? Otherwise, you'd need to provide h as an argument to the function right?</p>",
        "id": 408979339,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703005222
    },
    {
        "content": "<p>Yes, <code>if p then x else y</code> needs <code>Decidable p</code> in general</p>",
        "id": 408980535,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703005587
    },
    {
        "content": "<p>The underlying functions for <code>if</code> notation are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite#doc\">docs#ite</a> for the non-dependent if-then-else and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dite#doc\">docs#dite</a> for the dependent if-then-else.</p>",
        "id": 408980652,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703005639
    },
    {
        "content": "<blockquote>\n<p>Otherwise, you'd need to provide h as an argument to the function right?</p>\n</blockquote>\n<p>If your function uses <code>if h : P then ... else ...</code> and <code>P</code> is not decidable apriori, then you usually add <code>[Decidable P]</code> to your function.</p>",
        "id": 408991699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703009800
    },
    {
        "content": "<p>(Unless you know that <code>P</code> is undecidable, in which case you should add <code>letI := Classical.dec P</code> to the definition instead)</p>",
        "id": 408991772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703009835
    },
    {
        "content": "<p>(that's assuming you're not writing programs you intend to execute -- it's good for math definitions)</p>",
        "id": 408992287,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703010018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346046\">@Avi Craimer</span> By the way, do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.getD#doc\">docs#List.getD</a> ? This appears to be the function you've written.</p>",
        "id": 408992383,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703010062
    }
]