[
    {
        "content": "<p>is there a quick way to resolve relative paths to absolute file paths in a way that also gets rid of <code>.</code> and <code>..</code> in the paths? I'm trying to get the <em>actual</em> parent of a file, e.g. the parent of <code>something/./file</code> should be <code>something</code>, not <code>something/.</code></p>",
        "id": 329357231,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677051547
    },
    {
        "content": "<p>Doesn't <code>FilePath.normalize</code> resolve that?</p>",
        "id": 329398579,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677064470
    },
    {
        "content": "<p>Do you want to resolve symlinks or not? Sometimes <code>foo/bar/../baz</code> can resolve to <code>definitely_not_foo/baz</code>.</p>",
        "id": 329402067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677065449
    },
    {
        "content": "<p>hm, weird</p>",
        "id": 329656755,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677141942
    },
    {
        "content": "<p>any symlink behavior would be fine</p>",
        "id": 329656771,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677141948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/relative.20filepath.20normalization/near/329398579\">said</a>:</p>\n<blockquote>\n<p>Doesn't <code>FilePath.normalize</code> resolve that?</p>\n</blockquote>\n<p>no, it only normalizes <code>parent//child</code> to <code>parent/child</code> :/</p>",
        "id": 329656883,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677141973
    },
    {
        "content": "<p>normally you would use something called <code>realpath</code> for this</p>",
        "id": 329657294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677142112
    },
    {
        "content": "<p>and oh hey look -&gt; <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.FS.realPath#doc\">docs4#IO.FS.realPath</a></p>",
        "id": 329657554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677142210
    },
    {
        "content": "<p>aha! that looks like exactly what I want, thanks mario</p>",
        "id": 329657698,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677142255
    },
    {
        "content": "<p>that will do what Eric says though, if <code>foo/bar</code> is a symlink to <code>definitely_not_foo/qux</code> then <code>foo/bar/../baz</code> resolves to <code>definitely_not_foo/baz</code></p>",
        "id": 329658074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677142339
    },
    {
        "content": "<p>filesystems are fun, you never know where you might end up</p>",
        "id": 329658216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677142373
    },
    {
        "content": "<p>I think that's the behavior I'd want anyways, so that is fine with me</p>",
        "id": 329658417,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677142437
    },
    {
        "content": "<p>(I'm traversing the files in the same directory as a given file, so symlink'd parents are ~irrelevant)</p>",
        "id": 329658591,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677142465
    },
    {
        "content": "<p>why would you need to use <code>..</code> for that?</p>",
        "id": 329658695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677142496
    },
    {
        "content": "<p>I'm not using <code>..</code> to get the parent -- rather, I might have the relative file <code>././.</code> in which case it is not straightforward to get the parent directory to traverse :P</p>",
        "id": 329668376,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677145067
    },
    {
        "content": "<p>I suspect it is good practice to just always call <code>realPath</code> at top-level so all filepaths provided on the command line are resolved early.</p>",
        "id": 329668640,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677145141
    },
    {
        "content": "<p>Normally <code>.</code> is not a file.</p>",
        "id": 329669888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677145488
    },
    {
        "content": "<p>err, sorry, <code>./././anActualFile</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 329670201,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677145575
    },
    {
        "content": "<p>somewhat relatedly -- is there a particular reason for what stuff ends up in <code>IO.FS</code> versus <code>System.FilePath</code>? both have IO functions that take a single filepath argument. I suspect it is arbitrary and just follows the file structure of where things are declared?</p>",
        "id": 329670570,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677145684
    },
    {
        "content": "<p>But if you have <code>./././anActualFile</code> then you can strip off the last component and use <code>././.</code> as the directory to read, no?</p>",
        "id": 329671073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677145858
    },
    {
        "content": "<p>I don't see why this actually requires anything like <code>realpath</code></p>",
        "id": 329671109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677145867
    },
    {
        "content": "<p>That is very true, and I don't remember why it was an issue. I should probably not be coding in the middle of the night like this.</p>",
        "id": 329671857,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146076
    },
    {
        "content": "<p>I guess the weirdness with parents only comes up if <code>p</code> is a directory, since then <code>p</code> could be <code>./.</code> and its path-parent <code>.</code> is not its filesystem parent <code>..</code></p>",
        "id": 329672023,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146129
    },
    {
        "content": "<p>Finding the sibling of a directory is necessarily \"get the parent and then get the other child\" though, so appending <code>../otherChild</code> looks like the most correct thing. After all, the root is a directory too, what is the sibling of <code>/</code>?</p>",
        "id": 329673525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677146527
    },
    {
        "content": "<p>Totally -- it is cleaner and probably more correct to just do <code>(file / \"..\").walkDir (fun p =&gt; ...)</code> instead of actually getting the parent. Thanks everyone!</p>",
        "id": 329674160,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146734
    },
    {
        "content": "<p>wait, that does not make sense</p>",
        "id": 329674254,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146760
    },
    {
        "content": "<p>because <code>file/..</code> does not exist</p>",
        "id": 329674328,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146769
    },
    {
        "content": "<p>ah, but there is the <code>withFile</code> function or whatever</p>",
        "id": 329674448,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146813
    },
    {
        "content": "<p>we are back on track everyone</p>",
        "id": 329674469,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146821
    },
    {
        "content": "<p><code>file.withFileName \"..\"</code> is quite an odd way to spell <code>file.parent</code></p>",
        "id": 329674755,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146905
    },
    {
        "content": "<p>and it does sort of beg the question whether <code>file.parent</code> should return <code>.</code>instead of <code>none</code> in the case a file doesn't have multiple components. but they are both useful functions, so it is whatever</p>",
        "id": 329675019,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677146987
    },
    {
        "content": "<p>Don't you want <code>file.withFileName \".\"</code>?</p>",
        "id": 329675464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677147108
    },
    {
        "content": "<p>yup... saving me from painful debugging later, thank you</p>",
        "id": 329676513,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677147383
    }
]