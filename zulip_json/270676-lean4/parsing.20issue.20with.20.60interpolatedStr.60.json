[
    {
        "content": "<p>The <code>interpolatedStr</code> parser does not seem to like a <code>many</code> parser coming directly before it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Parser</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Foo1\"</span> <span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">Foo1</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span><span class=\"s2\">{\"</span> <span class=\"c1\">-- works!</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Foo2\"</span> <span class=\"s2\">\"!\"</span><span class=\"bp\">*</span> <span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">Foo2</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span><span class=\"s2\">{\"</span> <span class=\"c1\">-- invalid escape sequence</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there any way to get around this? And what is causing this?</p>",
        "id": 342071603,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1678890092
    },
    {
        "content": "<p>Oh, that is an interesting issue. There is a common token parser that most parsers are based on, but <code>interpolatedStr</code> is not. So <code>\"!\"</code> tries to use this common token parser and check if the result is the token <code>!</code>, but the token parser fails because the input is not a valid (non-interpolated) string literal. And because the failure is not on the first character, we don't backtrack (I believe I changed this at some point because without it we get worse error messages at other points).</p>",
        "id": 342074944,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678890801
    },
    {
        "content": "<p>The simplest fix on Lean's side would probably be to finally implement <a href=\"https://github.com/leanprover/lean4/pull/407\">lean4#407</a></p>",
        "id": 342075132,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678890842
    },
    {
        "content": "<p>It looks a bit weird, but <code>atomic(\"!\")*</code> fixes this as well</p>",
        "id": 342075599,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678890956
    },
    {
        "content": "<p>I am not worried that <code>atomic</code> looks weird. I am very happy that it works! Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 342101542,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1678896215
    }
]