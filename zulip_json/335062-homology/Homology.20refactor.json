[
    {
        "content": "<p>I have been thinking about the homology refactor, basically how to import in mathlib3/4 some constructions done in the LTE. One of the constructions I introduced was that of \"short complexes\" in a category <code>C</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A short complex in a category `C` with zero morphisms is the datum</span>\n<span class=\"sd\">of two composable morphisms `f : X₁ ⟶ X₂` and `g : X₂ ⟶ X₃` such that</span>\n<span class=\"sd\">`f ≫ g = 0`. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">short_complex</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">X₁</span> <span class=\"n\">X₂</span> <span class=\"n\">X₃</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">X₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X₂</span> <span class=\"bp\">⟶</span> <span class=\"n\">X₃</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>All the API for homology should be adapted using <code>S : short_complex C</code> as an input, and then, when we want to apply this to homological complexes, we only have to consider complexes of the form <code>K.X (prev i) ⟶ K.X i ⟶ K.X (next i)</code>.</p>\n<p>Another innovation in the LTE was the <code>has_homology</code> structure. I introduced a more basic datum <code>homology_iso_datum</code>. Following both Adam's ideas and mine, I ended up defining a <code>left_homology_datum</code> for a short complex <code>S</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">left_homology_data</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">⟶</span> <span class=\"n\">S.X₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hi₀</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"n\">S.g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">kernel_fork.of_ι</span> <span class=\"n\">i</span> <span class=\"n\">hi₀</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hπ₀</span> <span class=\"o\">:</span> <span class=\"n\">hi.lift</span> <span class=\"o\">(</span><span class=\"n\">kernel_fork.of_ι</span> <span class=\"n\">_</span> <span class=\"n\">S.zero</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"o\">:</span> <span class=\"n\">is_colimit</span> <span class=\"o\">(</span><span class=\"n\">cokernel_cofork.of_π</span> <span class=\"n\">π</span> <span class=\"n\">hπ₀</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This basically consists of the datum of a kernel <code>K</code> of <code>S.X₂ ⟶ S.X₃</code> and a cokernel <code>H</code> of the induced map <code>S.X₁ ⟶ K</code>.</p>\n<p>Dually, a <code>right_homology_datum</code> can be defined as a similar datum using a cokernel <code>Q</code> of <code>S.X₁ ⟶ S.X₂</code> and a kernel <code>H</code> of the induced map <code>Q ⟶ S.X₃</code>.</p>\n<p>Then, in a similar spirit as the <code>homology_gadget</code> suggested by Adam at <a href=\"#narrow/stream/267928-condensed-mathematics/topic/homology.20refactor/near/290844887\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/homology.20refactor/near/290844887</a> (this is similar to the <code>has_homology</code> that is in the LTE), I define an <code>homology_data</code> for <code>S</code> as :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">homology_data</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">S.left_homology_data</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">S.right_homology_data</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">left.H</span> <span class=\"bp\">≅</span> <span class=\"n\">right.H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"n\">left.π</span> <span class=\"bp\">≫</span> <span class=\"n\">iso.hom</span> <span class=\"bp\">≫</span> <span class=\"n\">right.ι</span> <span class=\"bp\">=</span> <span class=\"n\">left.i</span> <span class=\"bp\">≫</span> <span class=\"n\">right.p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then, one may define <code>[has_homology S]</code> when there exists such an <code>homology data</code>, and define the homology of <code>S</code> as the <code>left.H</code> field of such a data. By construction, this notion of homology is self-dual. From that, one may define a good self-dual notion of (short) exact sequences, etc. Recently, I was able to get the snake lemma (in a slightly easier manner than in the LTE). I have developed these ideas in a (draft) branch<br>\n<a href=\"https://github.com/leanprover-community/mathlib/tree/homology_refactor\">https://github.com/leanprover-community/mathlib/tree/homology_refactor</a></p>\n<p>The relevant code is in <code>algebra/homology/short_complex/</code>. Apart from the proof that short complexes in abelian categories have homology data, most of this code is quite straightforward and very boring, and when I tried to use this <code>short_complex</code> API in order to redefine the homology of homological complexes, etc, the transition was quite easy, and many definitions became shorter. Besides the self-dual notions of homology and exactness we<br>\nget, this allows to define exact sequences without assuming <code>[has_images C] [has_kernels C]</code>: for example, split short exact sequences in preadditive categories (with a zero object) are exact with my definition, but it does not make sense with the current definition in mathlib.</p>\n<p>I would rather do this refactor before the actual port of <code>mathlib</code> to <code>mathlib4</code> is done, so that I guess the best would be to introduce this in <code>mathlib</code> first. Then, I would like to do this refactor (which would start with the introduction of tidied versions of some of the files in <code>algebra/homology/short_complex/</code>, as a sequence of small PRs, followed with a large PR when the notions of homology currently in mathlib are replaced by this API). Any comments?</p>",
        "id": 312613608,
        "sender_full_name": "Joël Riou",
        "timestamp": 1669637532
    },
    {
        "content": "<p>It's great that you could simplify the snake lemma! I think that's a good test case.</p>",
        "id": 312616376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669638502
    },
    {
        "content": "<p>About two weeks ago, the mathlib4 PR process started for this homology refactor (also towards derived categories; spectral sequences will soon follow...). Thanks very much <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> for the reviews! The list of the relevant PR appear at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4197\">!4#4197</a>. So far, I have PRed most of the \"left\" homology theory of short complexes <code>S</code> (i.e. we have two composable maps <code>f : X₁ ⟶ X₂</code> and <code>g : X₂ ⟶ X₃</code> such that <code>f ≫ g = 0</code>). I have defined <code>S.cycles</code> to be a kernel of <code>S.g</code> and <code>S.leftHomology</code> to be a cokernel of <code>S.toCycles : S.X₁ ⟶ S.cycles</code>. The file <code>LeftHomology.lean</code> will soon be finished (one more PR after <a href=\"https://github.com/leanprover-community/mathlib4/pull/4787\">!4#4787</a> is merged).</p>\n<p>Then, I will dualise this to get the \"right\" homology theory, which involves taking a cokernel of <code>S.f</code> and defining the \"right\" homology as a kernel. I am not completely sure about the names. Currently, I am using <code>S.cyclesCo</code> for a choice of a cokernel for <code>S.f : X₁ ⟶ X₂</code>.</p>\n<p>This notion is dual to that of <code>cycles</code> (there is an isomorphism <code>S.op.cyclesCo ≅ op S.cycles</code>). I chose not to use <code>cocycles</code> because this would be more confusing (in math terminology, \"cycles/cocycles\" nuance is only about whether the differentials decrease or raise the degrees).</p>\n<p>Does this name choice sound good enough?</p>\n<p>(The following diagram may help visualise this <a href=\"/user_uploads/3121/3PH1BDpr1QQ0KwzxbfWijoaA/homology-refactor.png\">homology-refactor.png</a>: <code>K</code> is <code>S.cycles</code>, <code>Q</code> is <code>S.cyclesCo</code> and <code>H</code> and <code>H'</code> the left and right homology.)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3PH1BDpr1QQ0KwzxbfWijoaA/homology-refactor.png\" title=\"homology-refactor.png\"><img src=\"/user_uploads/3121/3PH1BDpr1QQ0KwzxbfWijoaA/homology-refactor.png\"></a></div>",
        "id": 364210351,
        "sender_full_name": "Joël Riou",
        "timestamp": 1686128691
    },
    {
        "content": "<p>minor point: in your final sentence left/right homology occurs twice</p>",
        "id": 364211869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686129040
    },
    {
        "content": "<p>Thanks! I have just fixed the typos.</p>",
        "id": 364212409,
        "sender_full_name": "Joël Riou",
        "timestamp": 1686129185
    },
    {
        "content": "<p>I think the first <code>H</code> should be a <code>K</code></p>",
        "id": 364212895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686129300
    },
    {
        "content": "<p>What about <code>opcycles</code>? <code>coker_cycles</code>?</p>",
        "id": 364214968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686129818
    },
    {
        "content": "<p><code>opcycles</code> seems good to me!</p>",
        "id": 364217785,
        "sender_full_name": "Joël Riou",
        "timestamp": 1686130504
    },
    {
        "content": "<p><code>popcycles</code>, <code>popsicles</code>?</p>",
        "id": 364236916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686134787
    },
    {
        "content": "<p>On my draft branch <code>jriou_localization</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/4197\">#4197</a>), in the files which are using homology (like group cohomology), I have managed to replace the current homology API by the new API which I have been developing. I had to refactor part of the API for projective/injective resolutions and left/right derived functors. Currently, the PRs I have done on the new homology API mainly consist of the addition of new files in <code>Mathlib.Algebra.Homology.ShortComplex</code> because so far this is about the homology of short complexes (i.e. two composable maps whose composition is zero). Eventually, the homology of <code>HomologicalComplex</code> shall use this new API. In order to keep the PR process into a sequence of reasonably long PRs, I think that there will be a need for a transitory situation where both API exists for the homology of homological complexes. Then, the overall plan would be as follows :</p>\n<ul>\n<li>continue developing <code>Mathlib.Algebra.Homology.ShortComplex</code></li>\n<li>when it is complete, do a PR which basically just renames <code>HomologicalComplex.homology</code> as <code>HomologicalComplex.homology'</code> (and similarly for other notions for which there could be a name clash, e.g. <code>QuasiIso</code>)</li>\n<li>develop the new API as <code>HomologicalComplex.homology</code></li>\n<li>refactor step-by-step parts of <code>mathlib4</code> which are using <code>homology'</code> in order to use <code>homology</code> (this might be slightly longer PRs, because for example group cohomology depends on Ext groups, which also depends on left derived functors)</li>\n<li>remove the old <code>HomologicalComplex.homology'</code> API when it is no longer used</li>\n</ul>\n<p>Does this seem ok?</p>",
        "id": 384208971,
        "sender_full_name": "Joël Riou",
        "timestamp": 1691834184
    },
    {
        "content": "<p>If you have already done all the work of refactoring the APIs, we could even consider merging a monster PR that switches over the APIs.<br>\nBut it would be nice if that is the only thing that the PR does...</p>",
        "id": 384211176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691834685
    },
    {
        "content": "<p>But having two APIs coexist for a while might also be nice for projects depending on the old API. (Not sure how many such projects exist...)</p>",
        "id": 384211356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691834726
    },
    {
        "content": "<p>I think it will be both easier to review, and easier to understand the history, if we have an intermediate period with both APIs. Usually we would want to avoid this duplication, but I think we are sufficiently confident that this refactor is going to work that we can go ahead.</p>",
        "id": 384385832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691895642
    }
]