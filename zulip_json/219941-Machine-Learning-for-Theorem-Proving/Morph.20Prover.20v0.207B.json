[
    {
        "content": "<p><a href=\"/user_uploads/3121/yVPiZKwwkNvXdIiKxuG80KCD/morph-prover-visual.gif\">morph-prover-visual.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yVPiZKwwkNvXdIiKxuG80KCD/morph-prover-visual.gif\" title=\"morph-prover-visual.gif\"><img src=\"/user_uploads/3121/yVPiZKwwkNvXdIiKxuG80KCD/morph-prover-visual.gif\"></a></div><p>Hello everyone! On behalf of the entire team at Morph Labs, I am excited to announce Morph Prover v0 7B, the first open-source model trained as a conversational assistant for Lean users. In a few days, we will make the model weights available and share more details in a blog post.</p>\n<p>Morph Prover v0 7B is a chat fine-tune of Mistral which achieves a new state of the art in autoformalization on ProofNet while remaining as strong as the original Mistral model on benchmarks like AGIEval and MMLU. This model was trained in collaboration with Nous Research and the Safe and Trustworthy AI (STAIR) Research group at Stanford led by professor Sanmi Koyejo, with major contributions by <span class=\"user-mention\" data-user-id=\"246156\">@Brando Miranda</span> and help from Peter Holderrieth and Jin Peng Zhou.</p>\n<p>This will be an early research release. While this is the best open-source model for Lean we have seen, it is not completely trained and still makes mistakes like hallucinating lemmas and confusing Lean 3 and Lean 4 syntax. We hope to improve it with your feedback and we will be open-sourcing the model weights in the hope that it stimulates further work on conversational assistants for autoformalization in Lean.</p>\n<p>While it will be possible to run the model at 20 tokens / s on an M2 Macbook using GGML, we will also host the model for interactive use. Please sign up <a href=\"https://forms.gle/vr28p6dQCJuRVLAE6\">here</a> for an invite link and we'll let you know as soon as it's available.</p>",
        "id": 396548904,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697219232
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/xkfwsMvUXpC5CFcDllgiFf09/603BCA73-B8E3-42F4-9A4F-C522E8D56838.jpg\">603BCA73-B8E3-42F4-9A4F-C522E8D56838.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xkfwsMvUXpC5CFcDllgiFf09/603BCA73-B8E3-42F4-9A4F-C522E8D56838.jpg\" title=\"603BCA73-B8E3-42F4-9A4F-C522E8D56838.jpg\"><img src=\"/user_uploads/3121/xkfwsMvUXpC5CFcDllgiFf09/603BCA73-B8E3-42F4-9A4F-C522E8D56838.jpg\"></a></div>",
        "id": 396549338,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697219458
    },
    {
        "content": "<p>It's excited to finally see an open LLM based code assistant for Lean proof assistant <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 396549604,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697219599
    },
    {
        "content": "<p>fixed! google forms always gets me with that one</p>",
        "id": 396552488,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697221039
    },
    {
        "content": "<p>I wonder why it would confuse with Lean 3 and Lean 4 syntax. As Lean 3 is obsolete, and the mathlib fully ported to Lean 4, moving forward it's most valueable to be Lean 4 only. </p>\n<p>For GPT-4, it's trained in a way that hasn't paid attention to the subtlety, and it manages to do OK. For an open LLM with total control to the data curation, if your target is to be Lean 4 only, you can be quite sure that little Lean 3 corpus has sneaked into the dataset.</p>\n<p>Although, incompatible syntax or API between \"minor\" versions is inevitable, and can be mitigated by agent-style multi-round interactions, and LLMs can handle Lean feedback pretty well with a StackOverflow style Zulip corpus, with careful labeling the discussion to be about Lean 3 or Lean 4, which would greatly benefit from the efforts of moderator to move the topic to the right stream to avoid confusions for humans.</p>",
        "id": 396614513,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697259780
    },
    {
        "content": "<p>This is a fine tune, so there's no direct control on the dataset.</p>",
        "id": 396618082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697262539
    },
    {
        "content": "<p>yep this can be smoothed out with further data engineering --- currently the base model has seen Lean 3 and we finetuned on mathlib3 github and zulip data in addition to mathlib4 without carefully disambiguating. we'll fix in a subsequent release.</p>",
        "id": 396620525,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697264342
    },
    {
        "content": "<p>Ah, I see. This is a recurring issue. The foundation model contains general knowledge of a certain domain, when fine-tuning on the high-quality dataset of that domain, it's difficult to make it properly prune (e.g. <a href=\"https://arxiv.org/abs/2210.07229\">MEMIT</a> &amp; <a href=\"https://arxiv.org/abs/2304.00740\">REMEDI</a> ) all prior knowledge of the domain, and start the finetune from a clean slate (for the domain).</p>",
        "id": 396621225,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697264949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> <br>\nExcited to see more open source models being developed. Lean 3 and 4 programs share some similar syntax, so the model's confusion is understandable (I often got confused too).   </p>\n<p>I look forward to test Morph Prover and learn more about the model (I've already filled out the interest form).</p>",
        "id": 396633360,
        "sender_full_name": "Min-Hsien Weng",
        "timestamp": 1697275421
    },
    {
        "content": "<p>Particularly, I'm looking forward to running CORPRA on Morph Prover, the chemistry could be quite something. Open LLM can easily pretend to be a GPT API, with 20 tokens / s times less than 60 inferences, it seems to be a reasonable time to figure a proof out (compared to human), and one can expect a helpful explanation even when it fails to complete the proof with such an assistant style model.</p>",
        "id": 396639532,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697280327
    },
    {
        "content": "<p>Blog post with samples from the model: <a href=\"https://morph.so/blog/the-personal-ai-proof-engineer\">https://morph.so/blog/the-personal-ai-proof-engineer</a></p>\n<p>Model weights are available now, free hosted version for interactive use coming very soon.</p>\n<p>Here is a little Python project for spinning the model up locally. It should work out of the box at 20 tok / s on an M2 Macbook and much slower on CPU.</p>\n<p><a href=\"https://github.com/morph-labs/morph-prover-cli/\">https://github.com/morph-labs/morph-prover-cli/</a></p>\n<p>HuggingFace weights: <a href=\"https://huggingface.co/morph-labs/morph-prover-v0-7b\">https://huggingface.co/morph-labs/morph-prover-v0-7b</a><br>\nGGUF binaries: <a href=\"https://huggingface.co/morph-labs/morph-prover-v0-7b-gguf\">https://huggingface.co/morph-labs/morph-prover-v0-7b-gguf</a></p>",
        "id": 397196422,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697585651
    },
    {
        "content": "<p>In some of the blog post examples the prose talks about Lean 4 but the code (e.g. the imports and the indentation) is Lean 3.  It seems that all ML models at this moment in time have this problem ... do you have any ideas for solving it?</p>",
        "id": 397197092,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697586090
    },
    {
        "content": "<p>yes, the idea is to teach the model to identify Lean 3 and Lean 4 and then to \"just ask\" for Lean 4, and this can be done by synthesizing training examples where the user and the model talk about Lean 3 and Lean 4 versions of a proof. Over a few hundred to a few thousand training examples it should learn to disambiguate and start to use e.g. camelCase when asked for Lean 4.</p>",
        "id": 397199105,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697587381
    },
    {
        "content": "<p>Thanks for explaining.  Sorry I don't know the terminology -- you're saying that by recording the interactions of users with the chatbot you expect (within the first thousand few interactions) to get a supplementary dataset that will clarify this point for the model?</p>",
        "id": 397199376,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697587560
    },
    {
        "content": "<p>Oh ... by \"synthesizing\" do you mean that you will autogenerate (e.g. with mathport) some \"fake\" user interactions with the chatbot in which the chatbot provides a translation from Lean 3 to Lean 4, and then you will train the model on that?</p>",
        "id": 397200517,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697588194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Morph.20Prover.20v0.207B/near/397200517\">said</a>:</p>\n<blockquote>\n<p>Oh ... by \"synthesizing\" do you mean that you will autogenerate (e.g. with mathport) some \"fake\" user interactions with the chatbot in which the chatbot provides a translation from Lean 3 to Lean 4, and then you will train the model on that?</p>\n</blockquote>\n<p>yes exactly! the chatbot doesn't need to provide the translation, it just needs to trained on some data where it articulates its knowledge about the difference between Lean 3 and Lean 4 with source code for both visible in the training data</p>",
        "id": 397204448,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697590370
    },
    {
        "content": "<p>Experiences so far:</p>\n<ul>\n<li>it doesn't know when to stop, and seems to answer multiple times. The answers very often have <code>[INST]</code> and <code>[/INST]</code> in them.</li>\n<li>the cli doesn't seem to allow multi-line inputs, making it hard to evaluate!</li>\n</ul>",
        "id": 397212268,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697594900
    },
    {
        "content": "<p>thanks for the feedback, i pushed a couple formatting fixes. this version of the model wasn't trained on very long conversations so it tends to derail as the conversations get longer. we'll improve it in future iterations!</p>\n<p>we'll be hosting the model as a Discord bot very soon where multiline formatting with code blocks will be much nicer.</p>",
        "id": 397224090,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697601474
    },
    {
        "content": "<p>What does tok/sec mean?</p>",
        "id": 397235218,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697607814
    },
    {
        "content": "<p>\"tokens per second\"</p>",
        "id": 397235542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697607989
    },
    {
        "content": "<p>Each token is usually a few characters. (The details can be different for every model; it's standard to customize your choice of tokens for your application.)</p>",
        "id": 397235613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697608031
    },
    {
        "content": "<p>It's a measure of how fast the model produces text.</p>",
        "id": 397235628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697608043
    },
    {
        "content": "<p>The morph model was plenty fast on my computer!</p>",
        "id": 397235658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697608066
    },
    {
        "content": "<p>But you also have a plenty fast computer <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 397240466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697610706
    },
    {
        "content": "<p>Tested with some simple cases with Morph Prover v0 7B (q8_0 gguf with unmodified Alpaca prompt template):</p>\n<h2>Case 1. Morph Prover doesn't succeed at first, but can be prompted to succeed, works well with natural language and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> proofs with <code>sorry</code></h2>\n<p><a href=\"/user_uploads/3121/AMwyPukU49TpYP5FzABS6Raw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AMwyPukU49TpYP5FzABS6Raw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AMwyPukU49TpYP5FzABS6Raw/image.png\"></a></div><h2>Case 2. Morph Prover struggles to get a correct lemma name</h2>\n<p><a href=\"/user_uploads/3121/0mAI66Abj0xiCOXU96XDeHTb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0mAI66Abj0xiCOXU96XDeHTb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0mAI66Abj0xiCOXU96XDeHTb/image.png\"></a></div><h2>Case 3. Morph Prover confuses about Lean 3 and Lean 4</h2>\n<p><a href=\"/user_uploads/3121/Zg7Z6kXHUk-CptXWmmUH_uEZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Zg7Z6kXHUk-CptXWmmUH_uEZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Zg7Z6kXHUk-CptXWmmUH_uEZ/image.png\"></a></div><h2>Case 4. Morph Prover explains proofs with lots of lemmas and notations well</h2>\n<p><a href=\"/user_uploads/3121/FbPnMgtz7uWpxd_PDeTUX_uE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FbPnMgtz7uWpxd_PDeTUX_uE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/FbPnMgtz7uWpxd_PDeTUX_uE/image.png\"></a></div>",
        "id": 397260375,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697617996
    },
    {
        "content": "<p>hey all, the hosted version of morph prover is now ready for experimental use as a Discord bot. we've got around a dozen folks so far testing it out in a private channel - RSVP here and we'll send you an invite link!</p>\n<p><a href=\"https://forms.gle/vr28p6dQCJuRVLAE6\">https://forms.gle/vr28p6dQCJuRVLAE6</a></p>",
        "id": 397432164,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697693638
    },
    {
        "content": "<p>have you considered a Zulip bot instead/in addition?</p>",
        "id": 397432327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697693718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116045\">Jesse Michael Han</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Morph.20Prover.20v0.207B/near/397432164\">said</a>:</p>\n<blockquote>\n<p>hey all, the hosted version of morph prover is now ready for experimental use as a Discord bot. we've got around a dozen folks so far testing it out in a private channel - RSVP here and we'll send you an invite link!</p>\n<p><a href=\"https://forms.gle/vr28p6dQCJuRVLAE6\">https://forms.gle/vr28p6dQCJuRVLAE6</a></p>\n</blockquote>\n<p>Which discord server? Are you saying the server is private, or that it's a private channel on some public server?</p>",
        "id": 397432792,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697693964
    },
    {
        "content": "<p>private channel on the Morph Discord:</p>\n<p><a href=\"https://discord.gg/wa5sgWMfqv\">https://discord.gg/wa5sgWMfqv</a></p>",
        "id": 397433673,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697694561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Morph.20Prover.20v0.207B/near/397432327\">said</a>:</p>\n<blockquote>\n<p>have you considered a Zulip bot instead/in addition?</p>\n</blockquote>\n<p>working on it and will roll it out as soon as the infra is a bit more stable <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 397433836,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697694653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Morph.20Prover.20v0.207B/near/397260375\">said</a>:</p>\n<blockquote>\n<p>Tested with some simple cases with Morph Prover v0 7B (q8_0 gguf with unmodified Alpaca prompt template)</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/-n61P5L2PS9s5pm_YQLVKl5y/image.png\">image.png</a> <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-n61P5L2PS9s5pm_YQLVKl5y/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-n61P5L2PS9s5pm_YQLVKl5y/image.png\"></a></div><p><a href=\"https://github.com/leanprover-community/mathlib4/blob/29fc60fc4b560bab33577a74af62a32c5e415c4e/Mathlib/Tactic/SolveByElim.lean#L494-L495\">apply_rules</a> does exist in Lean 4.</p>\n<p>The linear map explanation isn't super clear; I'd expect it to spell out the type after applying each operation.</p>",
        "id": 397446364,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1697700922
    },
    {
        "content": "<p>I was impressed by the explanations of Lean Code (<em>informalization</em>). A couple of examples:</p>\n<p><strong>Prompt:</strong> Describe the following Lean 4 inductive type, including its purpose.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DiaphontineSolution</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">solution</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">DiaphontineSolution</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"bp\">|</span> <span class=\"n\">unsolvable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">DiaphontineSolution</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p><strong>Answer:</strong><br>\nThis Lean 4 inductive type is called DiaphontineSolution. It represents the solutions to a Diophantine equation of the form ax + by = c, where a, b, and c are integers. The purpose of this type is to classify all possible solutions to such equations into two categories: solution and unsolvable.</p>\n<p>The solution constructor takes a pair of integers (x, y) and a proof that the equation ax + by = c holds for those values. This represents the case where there exists a solution to the Diophantine equation.</p>\n<p>The unsolvable constructor takes a proof that there is no solution to the Diophantine equation. It states that for any pair of integers (x, y), the equation ax + by = c does not hold. This represents the case where there are no solutions to the Diophantine equation.</p>\n<p>In summary, the DiaphontineSolution type allows us to reason about the existence and non-existence of solutions to a Diophantine equation, providing a way to classify them into two categories.</p>",
        "id": 397447154,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697701112
    },
    {
        "content": "<p><strong>Prompt:</strong> Add a documentation string describing the following Lean 4 function, INCLUDING how it differs from Nat.sub:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">minus</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hyp</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">pf</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">minus</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">pf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><strong>Answer:</strong></p>\n<p>The function minus is a modified version of the Nat.sub function in Lean 4. It takes two natural numbers m and n, along with a proof hyp that n is less than or equal to m. The function returns the difference between m and n, but with some additional constraints.</p>\n<p>The main difference between minus and Nat.sub is that minus requires a proof that n is less than or equal to m. This ensures that the subtraction operation is well-defined, as it prevents negative results when n is greater than m. In contrast, Nat.sub does not require such a proof and allows for subtraction of any two natural numbers.</p>\n<p>Here's a documentation string for the minus function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Modified Subtraction Function for Natural Numbers</span>\n\n<span class=\"cm\">The `minus` function is a modified version of the `Nat.sub` function in Lean 4. It takes two natural numbers `m` and `n`, along with a proof `hyp` that `n` is less than or equal to `m`. The function returns the difference between `m` and `n`, but with some additional constraints.</span>\n\n<span class=\"cm\">The main difference between `minus` and `Nat.sub` is that `minus` requires a proof that `n` is less than or equal to `m`. This ensures that the subtraction operation is well-defined, as it prevents negative results when `n` is greater than `m`. In contrast, `Nat.sub` does not require such a proof and allows for subtraction of any two natural numbers.</span>\n\n<span class=\"cm\">## Usage</span>\n\n<span class=\"cm\">The `minus` function can be used in the following way:</span>\n<span class=\"cm\">lean</span>\n<span class=\"cm\">def minus (m n : ℕ)(hyp : n ≤ m)</span>\n<span class=\"cm\">: ℕ :=</span>\n<span class=\"cm\">  match m, n, hyp with</span>\n<span class=\"cm\">  | m, 0,  =&gt; m</span>\n<span class=\"cm\">  | 0,  +1, pf =&gt; nomatch pf</span>\n<span class=\"cm\">  | m + 1, n + 1 , pf =&gt;</span>\n<span class=\"cm\">    minus m n (le_of_succ_le_succ pf)</span>\n<span class=\"cm\">## Examples</span>\n\n<span class=\"cm\">Here are some examples of how to use the `minus` function:</span>\n<span class=\"cm\">lean</span>\n<span class=\"cm\">example : minus 5 2 (nat.zerole ) = 3 := rfl</span>\n<span class=\"cm\">example : minus 10 7 (nat.zerole ) = 3 := rfl</span>\n<span class=\"cm\">example : minus 7 10 (nat.zerole ) = 0 := rfl</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 397447617,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697701235
    },
    {
        "content": "<p>The examples at the end are wrong though.</p>",
        "id": 397447688,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697701251
    },
    {
        "content": "<p>For comparison, here is the <strong>ChatGPT response</strong> (also excellent):</p>\n<p>The <code>DiophantineSolution</code> inductive type is a construct used in Lean 4, a theorem prover and formal proof development system, to represent Diophantine equations and their solutions. Diophantine equations are mathematical equations in which the variables are restricted to integer values, and the goal is to find integer solutions for those variables. This type is used for expressing and working with these kinds of equations in a formalized manner.</p>\n<p>The <code>DiophantineSolution</code> inductive type is defined with three integer parameters <code>a</code>, <code>b</code>, and <code>c</code>, which represent the coefficients of the Diophantine equation <code>a * x + b * y = c</code>. Here's a breakdown of the two constructors for this inductive type:</p>\n<ol>\n<li>\n<p><code>solution</code> Constructor:</p>\n<ul>\n<li>This constructor represents the case when there exists a solution to the Diophantine equation.</li>\n<li>It takes two additional integer parameters <code>x</code> and <code>y</code> that represent the values of the variables in the equation.</li>\n<li>The condition <code>(a * x + b * y = c)</code> specifies that this constructor can only be used when the equation is satisfied with the provided values of <code>x</code> and <code>y</code>.</li>\n</ul>\n</li>\n<li>\n<p><code>unsolvable</code> Constructor:</p>\n<ul>\n<li>This constructor represents the case when there are no integer solutions to the Diophantine equation.</li>\n<li>It does not require any additional parameters.</li>\n<li>The condition <code>¬ (a * x + b * y = c)</code> states that for all integer values of <code>x</code> and <code>y</code>, the equation cannot be satisfied.</li>\n</ul>\n</li>\n</ol>\n<p>The purpose of this <code>DiophantineSolution</code> inductive type is to provide a formal and expressive way to represent Diophantine equations and their solutions or lack thereof within the Lean 4 proof assistant. By using this inductive type, mathematicians and researchers can reason about and prove properties related to Diophantine equations in a structured and rigorous manner. It can be particularly useful in areas of mathematics and computer science where integer solutions to equations are of interest, such as number theory or cryptography.</p>",
        "id": 397448117,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697701411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Morph.20Prover.20v0.207B/near/397446364\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/29fc60fc4b560bab33577a74af62a32c5e415c4e/Mathlib/Tactic/SolveByElim.lean#L494-L495\">apply_rules</a> does exist in Lean 4.<br>\n</p>\n</blockquote>\n<p>Yes, but when I say it doesn't exist, the true issue is I didn't import anything, it's expected to tell me what I need to import (this is where assistants shine in many debugging scenarios), but instead, Morph Prover replied with extra explanation that \"there is no built-in tactic <code>apply_rules</code>\" which is correct for raw Lean 4 but less helpful. The next suggestion has commas, which is Lean 3.</p>",
        "id": 397458838,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697705150
    },
    {
        "content": "<p>Is this working for anyone else? I keep getting <code>Error - Expecting value: line 1 column 1 (char 0)</code>.</p>",
        "id": 397490183,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697716785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Morph.20Prover.20v0.207B/near/397490183\">said</a>:</p>\n<blockquote>\n<p>Is this working for anyone else? I keep getting <code>Error - Expecting value: line 1 column 1 (char 0)</code>.</p>\n</blockquote>\n<p>network issue, fixed!</p>",
        "id": 397503137,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1697721352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398520553\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398494358\">said</a>:</p>\n<blockquote>\n<p>We really should make <code>AddMonoidAlgebra</code> the one field structure and <code>Polynomial</code> an <code>abbrev</code>.</p>\n</blockquote>\n<p>I'd be inclined to prioritize this refactor, but maybe others have different opinions</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> Do you think you can make the Morph Prover submit commits to fix CI errors once we change the definition and open a WIP pull request? It would be nice if a pipeline is set up for Prover to learn from feedback gathered from comments to its own commits. There are many desired refactors like this (<a href=\"https://github.com/leanprover-community/mathlib/pulls?q=refactor+is%3Apr+is%3Aopen+status%3Afailure+\">abandoned mathlib3 PRs</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6791\">an example of mathlib4 PR</a>) but it's unrewarding and often time-consuming for humans to do. I think this task is in line with Morph's goal of solving programming. It would be nice if Prover can ask for help when we're awake and diligently fix errors (or fill sorries?) when we're asleep. (Update: there is also now a <a href=\"#narrow/stream/287929-mathlib4/topic/small.20TODOs\">list of small TODOs</a>.)</p>\n<p>Prover can also check for performance degradation (or improvement) using <code>!bench</code> and use the metrics as reward signals. Currently (according to my impression) it's really hard for humans to predict what the effect of a refactor (or introduction of instances/typeclasses) might have to all the different files in mathlib, and reinforcement learning might work better here.</p>\n<p>Another possible use case of Prover is to split big files (see <a href=\"#narrow/stream/287929-mathlib4/topic/Splitting.20Topology.2FConnected.2Elean.3F\">thread</a>). I guess we should have some tooling to verify the declaration names aren't changed and the arguments are the same up to permutation though.</p>\n<p>I've also thought about asking Prover to review PRs, which is a great way to interact and learn. However, at Prover's current knowledge/skill level (having tested on Discord myself) I think we'd need to use another repo that mirrors mathlib4 PRs to avoid polluting mathlib4 PRs proper. People interested in training Prover can watch the repo and comment to tell Prover whether its ideas are good or bad. The <del>mathlib reviewer <a href=\"#narrow/stream/252551-graph-theory/topic/connectivity/near/307903177\">welcome message</a></del> <a href=\"https://leanprover-community.github.io/contribute/pr-review.html\">PR review guide</a> probably makes a good prompt for generating reviews.</p>",
        "id": 398564304,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698270056
    }
]