[
    {
        "content": "<p>Does anyone have working code interacting with Lean 4 server with JSON only? Ideally from Python, with some way of discovering what features are supported by the server. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 367207966,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1687017804
    },
    {
        "content": "<p><a href=\"https://github.com/zhangir-azerbayev/repl\">https://github.com/zhangir-azerbayev/repl</a> probably? from <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/REPL.20for.20Lean.204/near/347235630\">this thread</a><br>\nFor more features maybe take a look at <a href=\"https://github.com/leanprover/vscode-lean4\">https://github.com/leanprover/vscode-lean4</a></p>",
        "id": 367256263,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1687039072
    },
    {
        "content": "<p>In another thread (I’d have to look it up), someone suggested just finding a Python client for LSP servers in general.  That would help with implementation (assuming such clients exist), but not discoverability.</p>",
        "id": 367277954,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687052198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284997\">@Zhangir Azerbayev</span>, it would be nice to merge your <a href=\"https://github.com/leanprover-community/repl/pull/5\">PR</a> for the python wrapper for the REPL back into the main repository. Are you still interested in doing that? There are some questions on your PR still from a while back.</p>",
        "id": 367285109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687056711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/server.20api/near/367285109\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284997\">Zhangir Azerbayev</span>, it would be nice to merge your <a href=\"https://github.com/leanprover-community/repl/pull/5\">PR</a> for the python wrapper for the REPL back into the main repository. Are you still interested in doing that? There are some questions on your PR still from a while back.</p>\n</blockquote>\n<p>My bad, I had completely forgotten about this PR. I'll start implementing your suggestions right now.</p>",
        "id": 367417997,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1687104442
    },
    {
        "content": "<p>Does the REPL use the LSP server?</p>",
        "id": 367447803,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687115684
    },
    {
        "content": "<p>As far as I understand it uses essentially <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.IO.processCommands#doc\">docs4#Lean.Elab.IO.processCommands</a> directly</p>",
        "id": 367448055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687115798
    },
    {
        "content": "<p>Also, while we do have a client for the Lean 3 server, I don't know if it was a good idea.  It isn't up-to-date with all the server features.  For example, it doesn't handle widgets if I recall.  Really the main advantage of that project is that is serves as an example of how to interact with Lean 3 via the language server, and a bad one at that since there is only or two examples.  (I can trash talk it since I wrote a large amount of the code on top of a proof of concept by Patrick who again was just using it as an example of how to talk to the server from Python.  I planned to add better documentation and examples, but never got around to it.)</p>",
        "id": 367448744,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687116154
    },
    {
        "content": "<p>For Lean 4, I think a more useful thing would be good documentation for the Lean LSP server.  (However, sometimes one wants more specialty use cases like a machine learning REPL and then it might make sense to build those out into tools for end users.)</p>",
        "id": 367448794,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687116193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/server.20api/near/367277954\">said</a>:</p>\n<blockquote>\n<p>In another thread (I’d have to look it up), someone suggested just finding a Python client for LSP servers in general.  That would help with implementation (assuming such clients exist), but not discoverability.</p>\n</blockquote>\n<p>Thanks! Yes, I think this is what I actually want. Leo pointed me to <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Server/FileWorker/RequestHandling.lean#L610-L622\">https://github.com/leanprover/lean4/blob/master/src/Lean/Server/FileWorker/RequestHandling.lean#L610-L622</a> for the API, with only the last two being Lean specific. I guess it is easy to just write/find a generic LSP client.</p>",
        "id": 367659492,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1687184660
    },
    {
        "content": "<p>I've used the server side pieces of <code>pygls</code> (a Python LSP implementation) pretty successfully.-- it does have a client as well (which I don't recall ever using). It uses <code>asyncio</code> unfortunately but otherwise is pretty reasonable (especially if you don't have strong opinions about Async IO Python frameworks). But I suspect it'd still be nice to have a thin layer on top of it, because even though LSP is standardized you still have to know a bit about which methods to call and what to send them, etc. -- it's slightly too low level for \"hey send over this lean code and get back some state\" I think.</p>",
        "id": 367680682,
        "sender_full_name": "Julian Berman",
        "timestamp": 1687188661
    },
    {
        "content": "<p><a href=\"https://pypi.org/project/sansio-lsp-client/\">https://pypi.org/project/sansio-lsp-client/</a> is a better design probably, but seemed abandoned -- I made a note to some day poke at it, but not sure if it functions at this point.</p>",
        "id": 367680831,
        "sender_full_name": "Julian Berman",
        "timestamp": 1687188695
    }
]