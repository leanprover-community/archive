[
    {
        "content": "<p>Hi everyone,</p>\n<p>We're excited to release LeanDojo: open-source tools, benchmarks, and models for learning-based theorem proving in Lean. It provides robust and well-documented tools for data extraction and interacting with Lean programmatically (supporting both Lean 3 and Lean 4). We use LeanDojo to construct benchmarks from mathlib and develop LLM-based provers augmented with retrieval for premise selection.</p>\n<p>We open-source everything. To our knowledge, this is the first set of open-source LLM-based theorem provers. Our model is relatively inexpensive and needs only one GPU week of training. It does not rely on any proprietary assets. You are welcome to check it out.</p>\n<ul>\n<li>Project: <a href=\"https://leandojo.org/\">leandojo.org</a></li>\n<li><a href=\"https://arxiv.org/abs/2306.15626\">Paper</a></li>\n<li><a href=\"https://github.com/lean-dojo\">Code</a></li>\n<li>Datasets: <a href=\"https://zenodo.org/record/8016386\">Lean 3</a>, <a href=\"https://zenodo.org/record/8040110\">Lean 4</a> </li>\n<li><a href=\"https://github.com/lean-dojo/LeanDojoChatGPT\">ChatGPT plugin</a></li>\n<li>Tweets: <a href=\"https://twitter.com/KaiyuYang4/status/1673882824158613504\">https://twitter.com/KaiyuYang4/status/1673882824158613504</a>. Retweeting is appreciated!</li>\n</ul>",
        "id": 370258997,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687920818
    },
    {
        "content": "<p>Looks fun!</p>\n<p>The paper link at <a href=\"https://github.com/lean-dojo/LeanDojoChatGPT\">https://github.com/lean-dojo/LeanDojoChatGPT</a> needs updating.</p>",
        "id": 370269065,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687925384
    },
    {
        "content": "<p>Am I right in understanding that your ChatGPT plugin doesn't actually connect with reprover in any way? That is, the plugin just gives GPT access to lean?</p>",
        "id": 370269394,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687925557
    },
    {
        "content": "<p>Your paper says:</p>\n<blockquote>\n<p>To mitigate this issue, besides the random split, we create a challenging data split named<br>\nnovel_premises. It requires testing proofs to use at least one premise that has never been used in<br>\ntraining. For example, the last two theorems in Fig. 3 both use the premise conj_mul. If one theorem<br>\nis in the training set of the novel_premises split, the other one must also be in training.</p>\n</blockquote>\n<p>I'm concerned this will bias <code>novel_premises</code> away from \"hard\" theorems (which will tend to involve premises mentioned elsewhere, by virtue of being interesting) and towards \"leaf\" theorems (i.e. theorems about things that aren't otherwise of much interest, hence have \"novel\" premises). I haven't actually looked at the data split, however, so this may be a misguided worry?</p>",
        "id": 370270071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687925939
    },
    {
        "content": "<p>I successfully ran your premise retrieval demo from <a href=\"https://github.com/lean-dojo/ReProver#premise-retriever\">https://github.com/lean-dojo/ReProver#premise-retriever</a>, but I'm a bit confused how I'm meant to use this in practice. That example has 8 hardcoded premises, and then selects 2 after being shown a goal. What is the intended model when I only have a goal (i.e. and implicitly the entire library to choose from)?</p>",
        "id": 370272709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687927334
    },
    {
        "content": "<p>Thanks for sharing <span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> ! Two issues I think I should point out:</p>\n<ol>\n<li>\n<p>Mathlib has preferred citation entries which you can find at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/CITATION.md\">https://github.com/leanprover-community/mathlib/blob/master/CITATION.md</a></p>\n</li>\n<li>\n<p>In your tweet you claim ReProver to be \"the first LLM-based prover augmented with retrieval for premise selection\", but the <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/New.20paper.3A.20Magnushammer\">Magnushammer paper</a> (which you did cite), even though being focused on premise selection, does integrate with the LLM-based Thor to achieve better performance.</p>\n</li>\n</ol>",
        "id": 370273128,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1687927580
    },
    {
        "content": "<blockquote>\n<p>What is the intended model when I only have a goal (i.e. and implicitly the entire library to choose from)?</p>\n</blockquote>\n<p>I think this use case is <a href=\"https://github.com/lean-dojo/ReProver#tactic-generator\">https://github.com/lean-dojo/ReProver#tactic-generator</a> which uses the tacgen model. <a href=\"https://github.com/lean-dojo/ReProver#retrieval-augmented-tactic-generator\">Combining both</a> requires the retriever-tacgen model.</p>",
        "id": 370274007,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1687927990
    },
    {
        "content": "<p>No, I'm not asking how to generate a candidate tactic. I just want some proposals of relevant premises.</p>",
        "id": 370275478,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687928561
    },
    {
        "content": "<p>I think this is a fundamental missing component in the Lean tactic ecosystem, and much higher priority than anything LLM driven. I think we're still at the point where it is premature to be expecting much from LLMs in theorem proving. But good premise selection + old fashioned automation (<code>solve_by_elim</code>, <code>exact?</code>, <code>rewrite_search</code>, hammers, etc, etc.) have lots of mileage.</p>",
        "id": 370276107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687928722
    },
    {
        "content": "<p>Oh I see. <a href=\"https://github.com/lean-dojo/ReProver/blob/main/images/ReProver.jpg\">The picture</a> says \"all accessible premises in the math library\" \"33K on average\" (probably depends on import)?</p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/lean-dojo/ReProver/blob/main/images/ReProver.jpg\" title=\"The picture\"><img src=\"https://uploads.zulipusercontent.net/8434be87137c80e72a7822ca19ce0136d821342b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6c65616e2d646f6a6f2f526550726f7665722f6d61696e2f696d616765732f526550726f7665722e6a7067\"></a></div><p>The premises in the premise retriever example doesn't contain the full signature but appears to be the plain text appearing in the Lean files. Passing in strings in real time is definitely not efficient, and we should utilize pre-computed embeddings: <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>'s <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/GPT.20frontend.20for.20mathlib4/near/364134014\">mathlib4 embeddings</a> apparently use full signatures, but I'm not sure about <span class=\"user-mention\" data-user-id=\"284997\">@Zhangir Azerbayev</span>'s <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Semantic.20Search.20for.20Mathematics/near/319598614\">mathlib3 embeddings</a>.</p>",
        "id": 370283895,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1687930791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Thanks for pointing them out. We will use mathlib's preferred citation in the next revision (probably in August so that we can incorporate reviewers' comments since the paper is under review at NeurIPS Datasets and Benchmarks Track).</p>\n<p>The second point is also valid. Our method emphasizes more on augmenting the LLMs with retrieval, i.e., the LLM takes retrieved premises as part of its input. In Magnushammer, they are separate. The LLM decides whether to call hammer, Magnushammer performs retrieval, and the retrieved premises are combined with a symbolic prover (some heuristic tactic templates), not the LLM. Nevertheless, the statement \"first LLM-based prover augmented with retrieval\" can be misleading, and we will rephrase it in the next revision.</p>",
        "id": 370448802,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687961985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Thank you for your comments!</p>\n<p>You're right, the ChatGPT plugin is not connected to ReProver in any way. We simply wrap LeanDojo's interface (for initializing the proof search and running tactics) as APIs for ChatGPT to call.</p>\n<p>Regarding the \"novel_premises\" split, it doesn't prevent a testing theorem (say, A) from using a premise that has been used in other theorems (B, C, D). It just requires B, C, and D to be also in the testing set. I don't have the knowledge to comment on whether the testing theorems in \"novel_premises\" are difficult <strong>mathematically</strong>. However, from our empirical results, they do seem to be more difficult for our model (and for our baselines, including tidy and GPT-4).</p>\n<p>The code demo in <a href=\"https://github.com/lean-dojo/ReProver#using-trained-models-on-hugging-face\">https://github.com/lean-dojo/ReProver#using-trained-models-on-hugging-face</a> tries to separate the model from our infrastructure for training and inference. In our setup, <a href=\"https://github.com/lean-dojo/LeanDojo\">LeanDojo</a> performs program analysis on a Lean repo, extracting information such as the dependency DAG between files, what constants are defined in each file, and where they are defined (row/column numbers). This information is saved into a static dataset (LeanDojo Benchmark) that the machine learning model can access. This infrastructure is still optimized for machine learning use cases, rather than interactive use cases in VSCode. The point of separating the model from the infrastructure is that you could use metaprogramming to build your own infrastructure (e.g., for extracting premises in VSCode) and use our models.</p>",
        "id": 370453837,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687962733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>  Yes, the number of accessible premises depends on imports. \"Premises\" in LeanDojo are basically \"constants\" in Lean's terminology. In each theorem, we can access constants defined earlier in the same file, or imported (directly or indirectly) from other files. 33K is the average of all theorems in LeanDojo Benchmark.</p>",
        "id": 370454697,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687962885
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/WQ_-YWN2kg7J4IaNzHhi1GZw/Screenshot-2023-06-28-at-10.50.42-AM.png\">Screenshot-2023-06-28-at-10.50.42-AM.png</a><br>\nFigure B from the arxiv paper looks like it is experiencing some problems rendering unicode.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WQ_-YWN2kg7J4IaNzHhi1GZw/Screenshot-2023-06-28-at-10.50.42-AM.png\" title=\"Screenshot-2023-06-28-at-10.50.42-AM.png\"><img src=\"/user_uploads/3121/WQ_-YWN2kg7J4IaNzHhi1GZw/Screenshot-2023-06-28-at-10.50.42-AM.png\"></a></div>",
        "id": 370460707,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687963900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> Thanks for noting that! These Unicodes can be rendered properly on OverLeaf using XeLaTex, but arXiv only supports pdfLaTex. That's super annoying..</p>",
        "id": 370462760,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687964225
    },
    {
        "content": "<p>arXiv moves <em>very</em> slowly but <a href=\"https://blog.arxiv.org/2023/05/12/tex-live-2023-upgrade-to-occur-may-22nd-2023/\">it moves</a>. Supporting any modern compiler is still listed as <code>Not in the short-term of “this year”</code>.</p>",
        "id": 370473196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687965904
    },
    {
        "content": "<p>So there is hope in the long run, but don't hold your breath.</p>",
        "id": 370473337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687965924
    },
    {
        "content": "<p>I think you have the option to upload a PDF without TeX source, but am not sure about whether you can add a PDF to your TeX submission. <a href=\"https://info.arxiv.org/help/submit_pdf.html\">This page</a> says:</p>\n<blockquote>\n<p>a PDF file created from a TeX/LaTeX file will typically be rejected, with exceptions granted on a case-by-case basis. There are good reasons why arXiv insists on TeX/LaTeX source if it is available. arXiv produces PDF automatically from all TeX submitted source.</p>\n</blockquote>\n<p>I think a display issue should warrant an exception.</p>\n<p>arXiv is also <a href=\"https://info.arxiv.org/hiring/\">hiring TeX experts</a>:</p>\n<blockquote>\n<p>TeX/LaTeX rationalization – arXiv accepts the bulk of its content in TeX format. We have TeX or LaTeX source for 90% of our articles. However, compiling all the TeX source we have into viewable papers (in PDF and increasingly also in HTML) can be difficult. We maintain a principle that we can rebuild any TeX submission accepted in the last 32 years. Preserving this capability, while being able to accept submissions that depend on the latest and greatest versions of TeX or LaTeX has become increasingly challenging. It is not unusual for a new release of TeX Live to include changes that cause older papers to no longer build properly. We have an opening for a TeX/LaTeX expert to rationalize our TeX pipeline. This task may include getting deeply involved in the TeX community and contributing to projects that support arXiv's goals.</p>\n</blockquote>",
        "id": 370483122,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1687967440
    },
    {
        "content": "<p>Thanks for the pointers! We'll probably just do the easiest thing: use an image for the figure in the next revision.</p>",
        "id": 370485106,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687967764
    },
    {
        "content": "<blockquote>\n<p>we create a challenging data split named novel_premises. It requires testing proofs to use at least one premise that has never been used in training.</p>\n</blockquote>\n<blockquote>\n<p>I'm concerned this will bias novel_premises away from \"hard\" theorems (which will tend to involve premises mentioned elsewhere, by virtue of being interesting) </p>\n</blockquote>\n<p>I feel you can simply require that for any testing proof A and any training proof B, the premises used in A aren't a subset of the premises used in B. It's still an interesting testing sample if it requires combining techniques from two proofs the model trained on. Shouldn't be too hard to generate such a split?</p>",
        "id": 370505948,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1687971438
    },
    {
        "content": "<p>Re pdfs in ArXiv: it is possible to edit the pdf to make ArXiv believe that it was not produced from a TeX source and hence accept it, but it's not trivial (some methods on the internet apparently don't work any more)</p>",
        "id": 370542893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687978428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Yep, it shouldn't be hard to create such splits by adapting our <a href=\"https://github.com/lean-dojo/LeanDojo/blob/main/scripts/generate-benchmark-lean3.ipynb\">data-generation script</a>  (at least for Lean 3, since the premise extraction for Lean 4 is still ongoing work) . We also considered other splits, e.g., training on old theorems and testing on new theorems (theorem dates can be determined from Git history, and <a href=\"https://leandojo.readthedocs.io/en/latest/traced_data.html#lean_dojo.data_extraction.traced_data.TracedTheorem.get_creation_date\">LeanDojo already supports that</a>). I guess that doesn't make sense for mathlib 4, since most theorems are exported from mathlib 3?</p>",
        "id": 370554956,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1687981004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> interesting work.  I look forward to diving deeper into it.  Since your work uses publicly available pre-training data, it would be interesting and important to look into how much data contamination is in your pre-training data.  You may be surprised (as I was in the PACT paper) that it could be quite significant.</p>",
        "id": 370683896,
        "sender_full_name": "Jason Rute",
        "timestamp": 1688027666
    },
    {
        "content": "<p>Also as for if this is the “the first LLM-based prover that is augmented with retrieval for selecting premises from a vast math library”, probably depends whether this AITP abstract on <a href=\"http://aitp-conference.org/2021/abstract/paper_18.pdf\">Retrieval-Augmented Proof Step Synthesis</a> by <span class=\"user-mention\" data-user-id=\"239426\">@Christian Szegedy</span> <span class=\"user-mention\" data-user-id=\"217806\">@Markus Rabe</span> and <span class=\"user-mention\" data-user-id=\"366719\">@Henryk Michalewski</span> counts. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 370687782,
        "sender_full_name": "Jason Rute",
        "timestamp": 1688028412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> Thanks for your comments!</p>\n<p>Our model is built upon the ByT5 model, which was pretrained on the <a href=\"https://huggingface.co/datasets/mc4\">mC4</a> dataset (details in Sec 3.1 of <a href=\"https://arxiv.org/abs/2010.11934\">the mT5 paper</a>). The dataset was relatively old (constructed in 2020) and was designed to include 108 different natural languages (not code). Therefore, we believe the risk of data contamination is smaller compared to prior works such as PACT and HyperTree Proof Search. It would be helpful to download the mC4 dataset and check how much Lean is included. Currently, we don't have the disk for doing that since the dataset is massive, but we'll try to look into it. Thank you for the suggestion!</p>\n<p>Regarding Christian et al. 2021, we were aware of this work (and another relevant work <a href=\"http://aitp-conference.org/2022/abstract/AITP_2022_paper_32.pdf\">Tworkowski et al. 2022</a>) when writing our paper. However, we found it difficult to discuss them or let them influence the claims we made. They were intended to be non-archival extended abstracts (as AITP requires), instead of complete research papers. We were unable to find enough details in the papers (regarding experimental setup, datasets, evaluation protocol, etc.) for us to comfortably discuss them and compare with our work in a fair manner.</p>",
        "id": 370787249,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1688045977
    },
    {
        "content": "<p>Surely they can still be mentioned, even if with that caveat? I have to admit the \"not enough detail\" for \"us to be comfortable\" line reads as a bit self-serving to me! Don't get me wrong, I like this work (and wish it had some more usable products...), but given the prevailing skepticism amongst mathematicians of ML papers claiming to make progress in doing maths, I think erring on the side of even-handedness helps overall.</p>",
        "id": 370942641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688079163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> </p>\n<p>I agree they <strong>can</strong> be mentioned, and we'll probably do that in the next revision. However, I'd suggest focusing the discussion on facts rather than motives that are unfalsifiable. For those who are curious, I recommend reading the two extended abstracts that are being discussed. It's important to recognize that different fields have different norms concerning the discussion of work in progress. For instance, mathematics often has lengthy publication cycles, and it's not unusual for drafts to be shared and circulated for an extended period before final publication. This practice might not be as prevalent in AI.</p>\n<p>Regarding \"more usable products,\" if you are referring to proof automation tools integrated with the Lean user's workflow, such as in VSCode, we currently have a student working on running our models in Lean locally, for example, as tactics. I find this type of work challenging not technically but because the priorities in different communities are not always aligned. Jeremy and others had interesting discussions about this on the 2nd day of the AI to Assist Mathematical Reasoning workshop.</p>",
        "id": 371176799,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1688134063
    },
    {
        "content": "<p>Some contexts: I say that (regarding integrating LLMs with Lean locally) because I tried to sell this idea as a potential project to several students interested in AI/ML + theorem proving, from undergrads to Ph.D. students. It turned out only the most junior student (<span class=\"user-mention\" data-user-id=\"601076\">@Peiyang Song</span> ) was interested (who is still entering research and is very open-minded).</p>",
        "id": 371203987,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1688138393
    },
    {
        "content": "<p>This looks really great!</p>\n<p>I tried following the instructions in the \"Getting Started\" section of the docs (<a href=\"https://leandojo.readthedocs.io/en/latest/getting-started.html\">https://leandojo.readthedocs.io/en/latest/getting-started.html</a>). After installing when I ran the basic example code I ran into an error with pydantic. I think they upgraded to version 2.0 just today, and when I downgraded to pydantic 1.10.10 and retried the error went away so I'm guessing the package version isn't correctly delimited. Afterwards when I tried to trace the example file I ran into a rather verbose error that had to do with being unable to read/pickle  some 'lxml.etree._ListErrorLog' object. I can dump the error message as a text file or image if you're interested, wasn't able to find a way around that one.</p>\n<p>Also, I'm not sure if this is the correct thread to discuss technical issues with the package, so please let me know if I should DM this type of thing or post it somewhere else. Thanks again for the hard work from you and your colleagues.</p>",
        "id": 371341328,
        "sender_full_name": "Andreas Gittis",
        "timestamp": 1688175765
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"622464\">@Andreas Gittis</span>, could you please open an issue in our repo? Thanks!</p>",
        "id": 371357835,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1688185145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Releasing.20LeanDojo/near/370453837\">said</a>:</p>\n<blockquote>\n<p>Regarding the \"novel_premises\" split, it doesn't prevent a testing theorem (say, A) from using a premise that has been used in other theorems (B, C, D). It just requires B, C, and D to be also in the testing set. I don't have the knowledge to comment on whether the testing theorems in \"novel_premises\" are difficult <strong>mathematically</strong>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> To continue the discussion of your \"novel premises\" split.  From your comment here, it seems like the \"novel premises\" constraint would encourage clustering of subject matter, so that whole groups of related theorems are enforced to lie only in training or only in test.  Do you agree?</p>\n<p>Data point: I looked at the test set and it seems to contain material from 449 files in mathlib, out of the ~3000 files in total.  And there was some evidence of \"super-clustering\" beyond this, e.g. none of the <code>analysis.normed_space.*</code> folder gets included and basically all of the <code>analysis.convex.*</code> folder gets included:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>   2 src/analysis/convex/basic.lean\n  10 src/analysis/convex/between.lean\n   1 src/analysis/convex/body.lean\n   1 src/analysis/convex/caratheodory.lean\n   3 src/analysis/convex/combination.lean\n   1 src/analysis/convex/contractible.lean\n   1 src/analysis/convex/extrema.lean\n   3 src/analysis/convex/extreme.lean\n   2 src/analysis/convex/function.lean\n   8 src/analysis/convex/gauge.lean\n   3 src/analysis/convex/hull.lean\n   3 src/analysis/convex/independent.lean\n   3 src/analysis/convex/integral.lean\n   5 src/analysis/convex/intrinsic.lean\n   2 src/analysis/convex/krein_milman.lean\n   1 src/analysis/convex/measure.lean\n  17 src/analysis/convex/side.lean\n   2 src/analysis/convex/slope.lean\n   1 src/analysis/convex/star.lean\n   1 src/analysis/convex/stone_separation.lean\n   1 src/analysis/convex/strict.lean\n   1 src/analysis/convex/strict_convex_between.lean\n   6 src/analysis/convex/strict_convex_space.lean\n   4 src/analysis/convex/topology.lean\n   1 src/analysis/convex/uniform.lean\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/eimglUNzhvbgHyhQ1K5tEGav/test_files_sorted.txt\">test_files_sorted.txt</a></p>",
        "id": 374468374,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689126450
    },
    {
        "content": "<p>I guess the argument here would be that the benchmark is testing how useful a system could be expected to be on a <strong>new</strong> theory, where it has not previously seen the mathematical subject matter.</p>",
        "id": 374468586,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689126562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I think you're correct. The \"novel_premises\" split may indeed have the effect of encouraging clustering. We also find other side effects, e.g., theorems with easy proofs consisting of a single tactic w/o premise (<code>simp</code>, <code>norm_num</code>, <code>ring</code>, etc.) can only go to training.</p>\n<p>Also, I think it might be helpful to create an additional split that explicitly tests how the model generalizes to different topics. Some benchmarks (e.g., CoqGym) even split the theorems by projects, which might be a bit too challenging for current models, in my opinion.</p>",
        "id": 374470947,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1689127930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Releasing.20LeanDojo/near/374470947\">said</a>:</p>\n<blockquote>\n<p>other side effects, e.g., theorems with easy proofs consisting of a single tactic w/o premise (<code>simp</code>, <code>norm_num</code>, <code>ring</code>, etc.) can only go to training.</p>\n</blockquote>\n<p>That's interesting.  Can you say more about why these can't go in test?  Since such proofs contain no lemmas, I would have thought there was no constraint on their presence in the test set.</p>",
        "id": 374471938,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689128510
    },
    {
        "content": "<p>My understanding is that to be in the test set the theorem has to explicitly call a premise not used in any training theorem.  So proofs which use powerful tactics but don’t explicitly call premises are excluded from testing.  I think this is a big reason why this split is so much harder.</p>",
        "id": 374472314,
        "sender_full_name": "Jason Rute",
        "timestamp": 1689128752
    },
    {
        "content": "<p>Even proofs like <code>simp</code> which use premises but don’t explicitly name them wouldn’t count in this split.</p>",
        "id": 374472498,
        "sender_full_name": "Jason Rute",
        "timestamp": 1689128871
    },
    {
        "content": "<p>Are premises required to be theorems, i.e. of type <code>Prop</code>?  If premises can have any type (including <code>Type</code>), I guess you'd have the problem that every theorem mentioning the real numbers has to fall on one side of the dichotomy.</p>",
        "id": 374477132,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689131347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  Not necessarily. \"Premises\" in LeanDojo are basically \"constants\" in Lean's terminology. They can be theorems, definitions, inductive definitions, etc. </p>\n<p>I didn't understand \"every theorem mentioning the real numbers has to fall on one side of the dichotomy\". Could you elaborate a <br>\nbit?</p>",
        "id": 374478748,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1689132199
    },
    {
        "content": "<p>The real numbers, <code>ℝ</code>, are defined at this line in mathlib:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/4e24c4bfcff371c71f7ba22050308aa17815626c/src/data/real/basic.lean#L30\">https://github.com/leanprover-community/mathlib/blob/4e24c4bfcff371c71f7ba22050308aa17815626c/src/data/real/basic.lean#L30</a><br>\nThey are a structure, which I would assume is a \"constant\".  So will that mean that all the theorems for which the token <code>ℝ</code> appears in the proof (for instance in a <code>have</code>-statement or a cast) get grouped together, either (1) all in training or (2) all in test?</p>",
        "id": 374479156,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689132444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Nope, for a theorem to be in testing, its human-written proof must use <strong>at least one premise</strong> that is never used by any training proof. We don't require all premises it uses to be not in training. So ℝ can definitely be used both in training and in testing.  This is the script for generating the dataset: <a href=\"https://github.com/lean-dojo/LeanDojo/blob/main/scripts/generate-benchmark-lean3.ipynb\">https://github.com/lean-dojo/LeanDojo/blob/main/scripts/generate-benchmark-lean3.ipynb</a></p>",
        "id": 374480534,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1689133242
    },
    {
        "content": "<p>Ah, indeed this is the point I missed!</p>",
        "id": 374480838,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689133397
    },
    {
        "content": "<p>It would be interesting to build a full list of the \"force-their-descendants-into-test\" premises.  I'd be curious to see whether they are all theorems, or whether some of them are definitions or structures.</p>\n<p>I understand there's some randomness here.</p>",
        "id": 374482557,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689134215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Releasing.20LeanDojo/near/374480534\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> Nope, for a theorem to be in testing, its human-written proof must use <strong>at least one premise</strong> that is never used by any training proof. </p>\n</blockquote>\n<p>Thanks for the clarification. I understand the complexity of data split, particular for mathematical texts. <br>\nIn some cases, the proof of a theorem may rely on existing lemmas that have been solved in the previous proof step. Such a case would be counted as testing, as this lemma would never appear before. </p>\n<p>Please correct me if my understanding is wrong. Thank you.</p>",
        "id": 382498093,
        "sender_full_name": "Min-Hsien Weng",
        "timestamp": 1691385844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638383\">@Min-Hsien Weng</span>  Yes, if this lemma is not used by another theorem later.</p>",
        "id": 382656544,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1691419308
    },
    {
        "content": "<p>Hi,</p>\n<p>We just released a new version of LeanDojo: <a href=\"https://github.com/lean-dojo/LeanDojo/releases/tag/v1.2.0\">https://github.com/lean-dojo/LeanDojo/releases/tag/v1.2.0</a>. Two major updates:</p>\n<ul>\n<li>Thanks to <span class=\"user-mention\" data-user-id=\"601076\">@Peiyang Song</span> . Now, LeanDojo fully supports Lean 4 (previously in alpha stage). The new version can extract premises from Lean 4 repos. I.e., for each constant identifier used in tactics, LeanDojo finds out its full name and locates its definition (The previous version can do this only for Lean 3).  </li>\n<li>The new version can interact with Lean 4 programmatically through not only tactics but also commands, e.g., <code>def x:= 1</code> or <code>#eval x</code>. See the end of <a href=\"https://github.com/lean-dojo/LeanDojo/blob/main/scripts/demo-lean4.ipynb\">this demo</a> for examples.</li>\n</ul>",
        "id": 384590946,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1691964416
    },
    {
        "content": "<p>Great project! I am playing around with Lean Dojo + Reprover. I was wondering if there is an easy way to load all of Mathlib as potential premises (for Lean 3)?</p>",
        "id": 385277765,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1692129451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"572379\">@Lev Stambler</span> Just create a new GitHub repo and have a new file that imports everything in mathlib? <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/mk_all.sh\">mk_all.sh</a> might be helpful.</p>",
        "id": 385324708,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1692152889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Releasing.20LeanDojo/near/385324708\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"572379\">Lev Stambler</span> Just create a new GitHub repo and have a new file that imports everything in mathlib? <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/mk_all.sh\">mk_all.sh</a> might be helpful.</p>\n</blockquote>\n<p>Fantastic thank you!</p>",
        "id": 385456494,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1692190594
    },
    {
        "content": "<p>I am playing around with ReProver and am noticing that sometimes, ReProver will get stuck in a sort of loop.</p>\n<p>In my case, I am trying to prove the lemma in the example repo:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"n\">add_comm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">hello_world</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Occasionally, the model suggests <code>rw [add_comm]</code> on a loop or <code>rw [add_assoc]</code> on a loop. Has anyone seen anything similar and have any suggestions?</p>",
        "id": 385480125,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1692197277
    },
    {
        "content": "<p>Are you running the model from Python to generate a single tactic for the current proof state? If so, that's kind of an expected behavior. When evaluating the model, we plug the tactic generator into some search algorithm (e.g., best-first search), and the model generates multiple tactic suggestions for each proof state. This way we can get rid of loops.</p>",
        "id": 385483714,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1692198392
    },
    {
        "content": "<p>A few papers take the whole partial proof into account which would also help avoid loops (at least in theory since the model would learn that one never uses <code>rw [add_comm]</code> twice in a row), but that is still pretty rare to see.</p>",
        "id": 385486454,
        "sender_full_name": "Jason Rute",
        "timestamp": 1692199237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Releasing.20LeanDojo/near/385483714\">said</a>:</p>\n<blockquote>\n<p>Are you running the model from Python to generate a single tactic for the current proof state? If so, that's kind of an expected behavior. When evaluating the model, we plug the tactic generator into some search algorithm (e.g., best-first search), and the model generates multiple tactic suggestions for each proof state. This way we can get rid of loops.</p>\n</blockquote>\n<p>Oh I see. I was using beam-search but with a small beam size (4). The paper specifies 64. Thank you!</p>",
        "id": 385492017,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1692200980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Releasing.20LeanDojo/near/385483714\">said</a>:</p>\n<blockquote>\n<p>Are you running the model from Python to generate a single tactic for the current proof state? If so, that's kind of an expected behavior. When evaluating the model, we plug the tactic generator into some search algorithm (e.g., best-first search), and the model generates multiple tactic suggestions for each proof state. This way we can get rid of loops.</p>\n</blockquote>\n<p>I wonder if  the tactic generated by Reprover would be a single tactic or a combination of tactics for a proof goal? </p>\n<p>In the example of <a href=\"https://github.com/lean-dojo/ReProver\">Reprover</a>, it seems that some tactic candidates may contain multiple tactics <code>rw [nat.gcd, nat.gcd_self_right]</code>. It makes great sense for rewrite tactics as it can reduce the length of proofs but the intermediate goal between these two tactics may be hidden.</p>\n<p>However, using a single tactic will likely increase the length of proofs when the proof itself is large and complex.</p>",
        "id": 385570944,
        "sender_full_name": "Min-Hsien Weng",
        "timestamp": 1692234137
    },
    {
        "content": "<p>I don't think there is a clear boundary between a single tactic and a compound tactic made of tactic combinators such as <code>&lt;;&gt;</code>.  Also, we don't hard-code the model to choose between them. Instead, what the model generates is only determined by the training data. In our dataset (LeanDojo Benchmark), <code>rw [nat.gcd, nat.gcd_self_right]</code> is treated as a single tactic, but <code>X &lt;;&gt; Y</code> consists of two tactics.</p>",
        "id": 385585981,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1692242007
    },
    {
        "content": "<p>That makes more sense. So the tactics generated by the model could be single/compound, depending on the context (proof goal). <br>\nThanks for the clarification <span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span>. I have a better understanding of the model.</p>",
        "id": 385592764,
        "sender_full_name": "Min-Hsien Weng",
        "timestamp": 1692245954
    },
    {
        "content": "<p>Hello there, I have this repository (this is a minimal worked example) that I am trying to run LeanDojo on - <a href=\"https://github.com/rah4927/lean-dojo-mew\">https://github.com/rah4927/lean-dojo-mew</a> </p>\n<p>I installed LeanDojo fine and can get it to run on simple examples. But on this repository, when I run the following piece of code: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"n\">os.environ</span><span class=\"o\">[</span><span class=\"bp\">'</span><span class=\"n\">CONTAINER'</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">native'</span>\n\n<span class=\"k\">from</span> <span class=\"n\">lean_dojo</span> <span class=\"kn\">import</span> <span class=\"bp\">*</span>\n<span class=\"n\">repo</span> <span class=\"bp\">=</span> <span class=\"n\">LeanGitRepo</span><span class=\"o\">(</span><span class=\"s2\">\"https://github.com/rah4927/lean-dojo-mew\"</span><span class=\"o\">,</span> <span class=\"s2\">\"c9e978ef8b2ea42fd6576de6c92e845d38854b65\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"bp\">=</span> <span class=\"n\">Theorem</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">,</span> <span class=\"s2\">\"lean4/MiniF2F/Example.lean\"</span><span class=\"o\">,</span> <span class=\"s2\">\"amc12a_2019_p21\"</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">Dojo</span><span class=\"o\">(</span><span class=\"kd\">theorem</span><span class=\"o\">)</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">dojo</span><span class=\"o\">,</span> <span class=\"n\">init_state</span><span class=\"o\">):</span>\n  <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">init_state</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get the following error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">18</span> <span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">03</span><span class=\"bp\">.</span><span class=\"mi\">420</span> <span class=\"bp\">|</span> <span class=\"n\">WARNING</span>  <span class=\"bp\">|</span> <span class=\"n\">lean_dojo.interaction.dojo</span><span class=\"o\">:</span><span class=\"n\">__post_init__</span><span class=\"o\">:</span><span class=\"mi\">171</span> <span class=\"bp\">-</span> <span class=\"n\">Using</span> <span class=\"n\">Lean</span> <span class=\"mi\">4</span> <span class=\"n\">without</span> <span class=\"n\">a</span> <span class=\"n\">hard</span> <span class=\"n\">timeout</span> <span class=\"n\">may</span> <span class=\"n\">lead</span> <span class=\"n\">to</span> <span class=\"n\">problems</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"n\">tactic</span> <span class=\"n\">hangs</span> <span class=\"n\">indefinitely.</span>\n<span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">18</span> <span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">03</span><span class=\"bp\">.</span><span class=\"mi\">996</span> <span class=\"bp\">|</span> <span class=\"n\">INFO</span>     <span class=\"bp\">|</span> <span class=\"n\">lean_dojo.data_extraction.trace</span><span class=\"o\">:</span><span class=\"n\">get_traced_repo_path</span><span class=\"o\">:</span><span class=\"mi\">132</span> <span class=\"bp\">-</span> <span class=\"n\">Tracing</span> <span class=\"n\">LeanGitRepo</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"bp\">='</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">rah4927</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">mew'</span><span class=\"o\">,</span> <span class=\"n\">commit</span><span class=\"bp\">='</span><span class=\"n\">c9e978ef8b2ea42fd6576de6c92e845d38854b65'</span><span class=\"o\">)</span>\n<span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">18</span> <span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">157</span> <span class=\"bp\">|</span> <span class=\"n\">INFO</span>     <span class=\"bp\">|</span> <span class=\"n\">__main__</span><span class=\"o\">:</span><span class=\"n\">main</span><span class=\"o\">:</span><span class=\"mi\">102</span> <span class=\"bp\">-</span> <span class=\"n\">Building</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">mew</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">quote4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">JLimperg</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">mhuisi</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">cli.git</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">EdAyers</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">MiniF2F.lean</span>\n<span class=\"n\">Traceback</span> <span class=\"o\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"o\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/private/var/folders/q5/p2f1mhz563l8_98p40ssf48h0000gq/T/tmpt6l3shge/workspace/build_lean4_repo.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">149</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"bp\">&lt;</span><span class=\"n\">module</span><span class=\"bp\">&gt;</span>\n    <span class=\"n\">main</span><span class=\"o\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/private/var/folders/q5/p2f1mhz563l8_98p40ssf48h0000gq/T/tmpt6l3shge/workspace/build_lean4_repo.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">128</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">main</span>\n    <span class=\"kd\">run_cmd</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"s2\">\"lake build\"</span><span class=\"o\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/private/var/folders/q5/p2f1mhz563l8_98p40ssf48h0000gq/T/tmpt6l3shge/workspace/build_lean4_repo.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">28</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"kd\">run_cmd</span>\n    <span class=\"n\">res</span> <span class=\"bp\">=</span> <span class=\"n\">subprocess.run</span><span class=\"o\">(</span><span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"n\">shell</span><span class=\"bp\">=</span><span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"bp\">=</span><span class=\"n\">capture_output</span><span class=\"o\">,</span> <span class=\"n\">check</span><span class=\"bp\">=</span><span class=\"n\">True</span><span class=\"o\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/usr/local/Cellar/python@3.10/3.10.12_1/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">526</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">run</span>\n    <span class=\"n\">raise</span> <span class=\"n\">CalledProcessError</span><span class=\"o\">(</span><span class=\"n\">retcode</span><span class=\"o\">,</span> <span class=\"n\">process.args</span><span class=\"o\">,</span>\n<span class=\"n\">subprocess.CalledProcessError</span><span class=\"o\">:</span> <span class=\"n\">Command</span> <span class=\"bp\">'</span><span class=\"n\">lake</span> <span class=\"n\">build'</span> <span class=\"n\">returned</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">zero</span> <span class=\"n\">exit</span> <span class=\"n\">status</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n\n<span class=\"c1\">---------------------------------------------------------------------------</span>\n<span class=\"n\">CalledProcessError</span>                        <span class=\"n\">Traceback</span> <span class=\"o\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"o\">)</span>\n<span class=\"n\">Cell</span> <span class=\"n\">In</span><span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">],</span> <span class=\"n\">line</span> <span class=\"mi\">1</span>\n<span class=\"c1\">----&gt; 1 with Dojo(theorem) as (dojo, init_state):</span>\n      <span class=\"mi\">2</span>   <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">init_state</span><span class=\"o\">)</span>\n      <span class=\"mi\">3</span>   <span class=\"bp\">#</span> <span class=\"n\">result</span> <span class=\"bp\">=</span> <span class=\"n\">dojo.run_tac</span><span class=\"o\">(</span><span class=\"n\">init_state</span><span class=\"o\">,</span> <span class=\"s2\">\"rw [add_assoc, add_comm b, ←add_assoc]\"</span><span class=\"o\">)</span>\n      <span class=\"mi\">4</span>   <span class=\"bp\">#</span> <span class=\"n\">assert</span> <span class=\"n\">isinstance</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">ProofFinished</span><span class=\"o\">)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">interaction</span><span class=\"bp\">/</span><span class=\"n\">dojo.py</span><span class=\"o\">:</span><span class=\"mi\">302</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">Dojo.__enter__</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span>\n    <span class=\"mi\">300</span> <span class=\"n\">os.chdir</span><span class=\"o\">(</span><span class=\"n\">self.origin_dir</span><span class=\"o\">)</span>\n    <span class=\"mi\">301</span> <span class=\"n\">shutil.rmtree</span><span class=\"o\">(</span><span class=\"n\">self.tmp_dir</span><span class=\"o\">)</span>\n<span class=\"c1\">--&gt; 302 raise ex</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">interaction</span><span class=\"bp\">/</span><span class=\"n\">dojo.py</span><span class=\"o\">:</span><span class=\"mi\">207</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">Dojo.__enter__</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span>\n    <span class=\"mi\">205</span> <span class=\"k\">if</span> <span class=\"n\">repo.is_lean4</span><span class=\"o\">:</span>\n    <span class=\"mi\">206</span>     <span class=\"n\">raise</span> <span class=\"n\">NotImplementedError</span><span class=\"o\">(</span><span class=\"s2\">\"InteractingLean 4 is not supported yet.\"</span><span class=\"o\">)</span>\n<span class=\"c1\">--&gt; 207 traced_repo_path = get_traced_repo_path(repo)</span>\n    <span class=\"mi\">209</span> <span class=\"bp\">#</span> <span class=\"n\">Copy</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">cd</span><span class=\"bp\">`</span> <span class=\"n\">into</span> <span class=\"n\">the</span> <span class=\"n\">repo.</span>\n    <span class=\"mi\">210</span> <span class=\"n\">shutil.copytree</span><span class=\"o\">(</span>\n    <span class=\"mi\">211</span>     <span class=\"n\">traced_repo_path</span><span class=\"o\">,</span>\n    <span class=\"mi\">212</span>     <span class=\"n\">repo.name</span><span class=\"o\">,</span>\n    <span class=\"mi\">213</span>     <span class=\"n\">ignore</span><span class=\"bp\">=</span><span class=\"n\">ignore_patterns</span><span class=\"o\">(</span><span class=\"s2\">\"*.dep_paths\"</span><span class=\"o\">,</span> <span class=\"s2\">\"*.ast.json\"</span><span class=\"o\">,</span> <span class=\"s2\">\"*.trace.xml\"</span><span class=\"o\">),</span>\n    <span class=\"mi\">214</span> <span class=\"o\">)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">data_extraction</span><span class=\"bp\">/</span><span class=\"n\">trace.py</span><span class=\"o\">:</span><span class=\"mi\">135</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">get_traced_repo_path</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">)</span>\n    <span class=\"mi\">133</span> <span class=\"k\">with</span> <span class=\"n\">working_directory</span><span class=\"o\">()</span> <span class=\"n\">as</span> <span class=\"n\">tmp_dir</span><span class=\"o\">:</span>\n    <span class=\"mi\">134</span>     <span class=\"n\">logger.debug</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"s2\">\"Working in the temporary directory {tmp_dir}\"</span><span class=\"o\">)</span>\n<span class=\"c1\">--&gt; 135     _trace(repo)</span>\n    <span class=\"mi\">136</span>     <span class=\"n\">traced_repo</span> <span class=\"bp\">=</span> <span class=\"n\">TracedRepo.from_traced_files</span><span class=\"o\">(</span><span class=\"n\">tmp_dir</span> <span class=\"bp\">/</span> <span class=\"n\">repo.name</span><span class=\"o\">)</span>\n    <span class=\"mi\">137</span>     <span class=\"n\">traced_repo.save_to_disk</span><span class=\"o\">()</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">data_extraction</span><span class=\"bp\">/</span><span class=\"n\">trace.py</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">_trace</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">)</span>\n     <span class=\"mi\">64</span> <span class=\"k\">else</span><span class=\"o\">:</span>\n     <span class=\"mi\">65</span>     <span class=\"n\">assert</span> <span class=\"n\">repo.uses_lean4</span>\n<span class=\"c1\">---&gt; 66     _trace_lean4(repo)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">data_extraction</span><span class=\"bp\">/</span><span class=\"n\">trace.py</span><span class=\"o\">:</span><span class=\"mi\">105</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">_trace_lean4</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">)</span>\n     <span class=\"mi\">99</span> <span class=\"n\">container</span> <span class=\"bp\">=</span> <span class=\"n\">get_container</span><span class=\"o\">()</span>\n    <span class=\"mi\">100</span> <span class=\"n\">mts</span> <span class=\"bp\">=</span> <span class=\"o\">{</span>\n    <span class=\"mi\">101</span>     <span class=\"n\">Path.cwd</span><span class=\"o\">()</span> <span class=\"bp\">/</span> <span class=\"n\">repo.name</span><span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"s2\">\"/workspace/{repo.name}\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">102</span>     <span class=\"n\">LEAN4_BUILD_SCRIPT_PATH</span><span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"s2\">\"/workspace/{LEAN4_BUILD_SCRIPT_PATH.name}\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">103</span>     <span class=\"n\">LEAN4_DATA_EXTRACTOR_PATH</span><span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"s2\">\"/workspace/{repo.name}/{LEAN4_DATA_EXTRACTOR_PATH.name}\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">104</span> <span class=\"o\">}</span>\n<span class=\"c1\">--&gt; 105 container.run(</span>\n    <span class=\"mi\">106</span>     <span class=\"n\">f</span><span class=\"s2\">\"python3 build_lean4_repo.py {repo.name}\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">107</span>     <span class=\"n\">create_mounts</span><span class=\"o\">(</span><span class=\"n\">mts</span><span class=\"o\">),</span>\n    <span class=\"mi\">108</span>     <span class=\"o\">{</span><span class=\"s2\">\"NUM_PROCS\"</span><span class=\"o\">:</span> <span class=\"n\">NUM_PROCS</span><span class=\"o\">},</span>\n    <span class=\"mi\">109</span>     <span class=\"n\">as_current_user</span><span class=\"bp\">=</span><span class=\"n\">True</span><span class=\"o\">,</span>\n    <span class=\"mi\">110</span>     <span class=\"n\">work_dir</span><span class=\"bp\">=</span><span class=\"s2\">\"/workspace\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">111</span> <span class=\"o\">)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">container.py</span><span class=\"o\">:</span><span class=\"mi\">193</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">NativeContainer.run</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">,</span> <span class=\"n\">command</span><span class=\"o\">,</span> <span class=\"n\">mounts</span><span class=\"o\">,</span> <span class=\"n\">envs</span><span class=\"o\">,</span> <span class=\"n\">as_current_user</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">,</span> <span class=\"n\">cpu_limit</span><span class=\"o\">,</span> <span class=\"n\">memory_limit</span><span class=\"o\">,</span> <span class=\"n\">work_dir</span><span class=\"o\">)</span>\n    <span class=\"mi\">190</span>         <span class=\"n\">work_dir</span> <span class=\"bp\">=</span> <span class=\"n\">Path.cwd</span><span class=\"o\">()</span> <span class=\"bp\">/</span> <span class=\"n\">work_dir.relative_to</span><span class=\"o\">(</span><span class=\"n\">work_dir.root</span><span class=\"o\">)</span>\n    <span class=\"mi\">192</span> <span class=\"k\">with</span> <span class=\"n\">working_directory</span><span class=\"o\">(</span><span class=\"n\">work_dir</span><span class=\"o\">):</span>\n<span class=\"c1\">--&gt; 193     execute(cmd, capture_output=capture_output)</span>\n    <span class=\"mi\">195</span> <span class=\"n\">self._unmount_files</span><span class=\"o\">(</span><span class=\"n\">mounts</span><span class=\"o\">)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">utils.py</span><span class=\"o\">:</span><span class=\"mi\">116</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">)</span>\n    <span class=\"mi\">114</span>         <span class=\"n\">logger.info</span><span class=\"o\">(</span><span class=\"n\">ex.stdout.decode</span><span class=\"o\">())</span>\n    <span class=\"mi\">115</span>         <span class=\"n\">logger.error</span><span class=\"o\">(</span><span class=\"n\">ex.stderr.decode</span><span class=\"o\">())</span>\n<span class=\"c1\">--&gt; 116     raise ex</span>\n    <span class=\"mi\">117</span> <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">capture_output</span><span class=\"o\">:</span>\n    <span class=\"mi\">118</span>     <span class=\"n\">return</span> <span class=\"n\">None</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">utils.py</span><span class=\"o\">:</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">)</span>\n    <span class=\"mi\">101</span> <span class=\"s2\">\"\"\"Execute the shell command ``cmd`` and optionally return its output.</span>\n<span class=\"s2\">    102</span>\n<span class=\"s2\">    103 Args:</span>\n<span class=\"s2\">   (...)</span>\n<span class=\"s2\">    108     Optional[Tuple[str, str]]: The command's output, including stdout and stderr (None if ``capture_output == False``).</span>\n<span class=\"s2\">    109 \"\"\"</span>\n    <span class=\"mi\">110</span> <span class=\"n\">try</span><span class=\"o\">:</span>\n<span class=\"c1\">--&gt; 111     res = subprocess.run(cmd, shell=True, capture_output=capture_output, check=True)</span>\n    <span class=\"mi\">112</span> <span class=\"n\">except</span> <span class=\"n\">subprocess.CalledProcessError</span> <span class=\"n\">as</span> <span class=\"n\">ex</span><span class=\"o\">:</span>\n    <span class=\"mi\">113</span>     <span class=\"k\">if</span> <span class=\"n\">capture_output</span><span class=\"o\">:</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">python</span><span class=\"bp\">@</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">10</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">12</span><span class=\"n\">_1</span><span class=\"bp\">/</span><span class=\"n\">Frameworks</span><span class=\"bp\">/</span><span class=\"n\">Python.framework</span><span class=\"bp\">/</span><span class=\"n\">Versions</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">10</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">subprocess.py</span><span class=\"o\">:</span><span class=\"mi\">526</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">,</span> <span class=\"n\">timeout</span><span class=\"o\">,</span> <span class=\"n\">check</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"n\">popenargs</span><span class=\"o\">,</span> <span class=\"bp\">**</span><span class=\"n\">kwargs</span><span class=\"o\">)</span>\n    <span class=\"mi\">524</span>     <span class=\"n\">retcode</span> <span class=\"bp\">=</span> <span class=\"n\">process.poll</span><span class=\"o\">()</span>\n    <span class=\"mi\">525</span>     <span class=\"k\">if</span> <span class=\"n\">check</span> <span class=\"n\">and</span> <span class=\"n\">retcode</span><span class=\"o\">:</span>\n<span class=\"c1\">--&gt; 526         raise CalledProcessError(retcode, process.args,</span>\n    <span class=\"mi\">527</span>                                  <span class=\"n\">output</span><span class=\"bp\">=</span><span class=\"n\">stdout</span><span class=\"o\">,</span> <span class=\"n\">stderr</span><span class=\"bp\">=</span><span class=\"n\">stderr</span><span class=\"o\">)</span>\n    <span class=\"mi\">528</span> <span class=\"n\">return</span> <span class=\"n\">CompletedProcess</span><span class=\"o\">(</span><span class=\"n\">process.args</span><span class=\"o\">,</span> <span class=\"n\">retcode</span><span class=\"o\">,</span> <span class=\"n\">stdout</span><span class=\"o\">,</span> <span class=\"n\">stderr</span><span class=\"o\">)</span>\n\n<span class=\"n\">CalledProcessError</span><span class=\"o\">:</span> <span class=\"n\">Command</span> <span class=\"bp\">'</span><span class=\"n\">NUM_PROCS</span><span class=\"bp\">=</span><span class=\"mi\">12</span> <span class=\"n\">python3</span> <span class=\"n\">build_lean4_repo.py</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">mew'</span> <span class=\"n\">returned</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">zero</span> <span class=\"n\">exit</span> <span class=\"n\">status</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>It appears to be a problem with lean build, however locally I have built and used this project just fine. Wondering if there is anything that I am missing. Some help would be appreciated! Also, really cool tool!</p>",
        "id": 385815108,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1692332201
    },
    {
        "content": "<p>The pertinent part of the error is surely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">MiniF2F.lean</span>\n</code></pre></div>",
        "id": 385815358,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692332331
    },
    {
        "content": "<p>Ah I forgot that file while trying to construct a minimal worked example. Let me update that, sorry about that</p>",
        "id": 385816046,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1692332653
    },
    {
        "content": "<p>Ah, never mind, seems like my gitignore was preventing this file from being pushed to the repository, which created this error. Thanks!</p>",
        "id": 385817115,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1692333075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"565199\">@Rahul Saha</span>  I'm glad the problem has been resolved. I also noted that you're using an old version of LeanDojo. It would be great to upgrade to the latest version since we fixed a few minor bugs recently.</p>",
        "id": 385935754,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1692370587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> Hi, thank you for your input. I just installed lean-dojo from PyPI again, and ran into the following error. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">22</span> <span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">32</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">453</span> <span class=\"bp\">|</span> <span class=\"n\">WARNING</span>  <span class=\"bp\">|</span> <span class=\"n\">lean_dojo.interaction.dojo</span><span class=\"o\">:</span><span class=\"n\">__init__</span><span class=\"o\">:</span><span class=\"mi\">172</span> <span class=\"bp\">-</span> <span class=\"n\">Using</span> <span class=\"n\">Lean</span> <span class=\"mi\">4</span> <span class=\"n\">without</span> <span class=\"n\">a</span> <span class=\"n\">hard</span> <span class=\"n\">timeout</span> <span class=\"n\">may</span> <span class=\"n\">hang</span> <span class=\"n\">indefinitely.</span>\n<span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">22</span> <span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">32</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">751</span> <span class=\"bp\">|</span> <span class=\"n\">INFO</span>     <span class=\"bp\">|</span> <span class=\"n\">lean_dojo.data_extraction.trace</span><span class=\"o\">:</span><span class=\"n\">get_traced_repo_path</span><span class=\"o\">:</span><span class=\"mi\">131</span> <span class=\"bp\">-</span> <span class=\"n\">Tracing</span> <span class=\"n\">LeanGitRepo</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"bp\">='</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">rah4927</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">mew'</span><span class=\"o\">,</span> <span class=\"n\">commit</span><span class=\"bp\">='</span><span class=\"mi\">3940892546</span><span class=\"n\">b1371385b34871d73015b9ae50b77a'</span><span class=\"o\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"o\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"o\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"build_lean4_repo.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"bp\">&lt;</span><span class=\"n\">module</span><span class=\"bp\">&gt;</span>\n    <span class=\"k\">from</span> <span class=\"n\">loguru</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n<span class=\"n\">ModuleNotFoundError</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">loguru'</span>\n<span class=\"c1\">---------------------------------------------------------------------------</span>\n<span class=\"n\">CalledProcessError</span>                        <span class=\"n\">Traceback</span> <span class=\"o\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"o\">)</span>\n<span class=\"n\">Cell</span> <span class=\"n\">In</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">],</span> <span class=\"n\">line</span> <span class=\"mi\">1</span>\n<span class=\"c1\">----&gt; 1 with Dojo(theorem) as (dojo, init_state):</span>\n      <span class=\"mi\">2</span>   <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">init_state</span><span class=\"o\">)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">interaction</span><span class=\"bp\">/</span><span class=\"n\">dojo.py</span><span class=\"o\">:</span><span class=\"mi\">283</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">Dojo.__enter__</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span>\n    <span class=\"mi\">281</span> <span class=\"n\">os.chdir</span><span class=\"o\">(</span><span class=\"n\">self.origin_dir</span><span class=\"o\">)</span>\n    <span class=\"mi\">282</span> <span class=\"n\">shutil.rmtree</span><span class=\"o\">(</span><span class=\"n\">self.tmp_dir</span><span class=\"o\">)</span>\n<span class=\"c1\">--&gt; 283 raise ex</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">interaction</span><span class=\"bp\">/</span><span class=\"n\">dojo.py</span><span class=\"o\">:</span><span class=\"mi\">203</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">Dojo.__enter__</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span>\n    <span class=\"mi\">200</span> <span class=\"n\">os.chdir</span><span class=\"o\">(</span><span class=\"n\">self.tmp_dir</span><span class=\"o\">)</span>\n    <span class=\"mi\">202</span> <span class=\"bp\">#</span> <span class=\"n\">Copy</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">cd</span><span class=\"bp\">`</span> <span class=\"n\">into</span> <span class=\"n\">the</span> <span class=\"n\">repo.</span>\n<span class=\"c1\">--&gt; 203 traced_repo_path = get_traced_repo_path(self.repo)</span>\n    <span class=\"mi\">204</span> <span class=\"n\">shutil.copytree</span><span class=\"o\">(</span>\n    <span class=\"mi\">205</span>     <span class=\"n\">traced_repo_path</span><span class=\"o\">,</span>\n    <span class=\"mi\">206</span>     <span class=\"n\">self.repo.name</span><span class=\"o\">,</span>\n    <span class=\"mi\">207</span>     <span class=\"n\">ignore</span><span class=\"bp\">=</span><span class=\"n\">ignore_patterns</span><span class=\"o\">(</span><span class=\"s2\">\"*.dep_paths\"</span><span class=\"o\">,</span> <span class=\"s2\">\"*.ast.json\"</span><span class=\"o\">,</span> <span class=\"s2\">\"*.trace.xml\"</span><span class=\"o\">),</span>\n    <span class=\"mi\">208</span> <span class=\"o\">)</span>\n    <span class=\"mi\">209</span> <span class=\"n\">os.chdir</span><span class=\"o\">(</span><span class=\"n\">self.repo.name</span><span class=\"o\">)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">data_extraction</span><span class=\"bp\">/</span><span class=\"n\">trace.py</span><span class=\"o\">:</span><span class=\"mi\">134</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">get_traced_repo_path</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">)</span>\n    <span class=\"mi\">132</span> <span class=\"k\">with</span> <span class=\"n\">working_directory</span><span class=\"o\">()</span> <span class=\"n\">as</span> <span class=\"n\">tmp_dir</span><span class=\"o\">:</span>\n    <span class=\"mi\">133</span>     <span class=\"n\">logger.debug</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"s2\">\"Working in the temporary directory {tmp_dir}\"</span><span class=\"o\">)</span>\n<span class=\"c1\">--&gt; 134     _trace(repo)</span>\n    <span class=\"mi\">135</span>     <span class=\"n\">traced_repo</span> <span class=\"bp\">=</span> <span class=\"n\">TracedRepo.from_traced_files</span><span class=\"o\">(</span><span class=\"n\">tmp_dir</span> <span class=\"bp\">/</span> <span class=\"n\">repo.name</span><span class=\"o\">)</span>\n    <span class=\"mi\">136</span>     <span class=\"n\">traced_repo.save_to_disk</span><span class=\"o\">()</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">data_extraction</span><span class=\"bp\">/</span><span class=\"n\">trace.py</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">_trace</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">)</span>\n     <span class=\"mi\">64</span> <span class=\"k\">else</span><span class=\"o\">:</span>\n     <span class=\"mi\">65</span>     <span class=\"n\">assert</span> <span class=\"n\">repo.uses_lean4</span>\n<span class=\"c1\">---&gt; 66     _trace_lean4(repo)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">data_extraction</span><span class=\"bp\">/</span><span class=\"n\">trace.py</span><span class=\"o\">:</span><span class=\"mi\">104</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">_trace_lean4</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">)</span>\n     <span class=\"mi\">98</span> <span class=\"n\">container</span> <span class=\"bp\">=</span> <span class=\"n\">get_container</span><span class=\"o\">()</span>\n     <span class=\"mi\">99</span> <span class=\"n\">mts</span> <span class=\"bp\">=</span> <span class=\"o\">{</span>\n    <span class=\"mi\">100</span>     <span class=\"n\">Path.cwd</span><span class=\"o\">()</span> <span class=\"bp\">/</span> <span class=\"n\">repo.name</span><span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"s2\">\"/workspace/{repo.name}\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">101</span>     <span class=\"n\">LEAN4_BUILD_SCRIPT_PATH</span><span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"s2\">\"/workspace/{LEAN4_BUILD_SCRIPT_PATH.name}\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">102</span>     <span class=\"n\">LEAN4_DATA_EXTRACTOR_PATH</span><span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"s2\">\"/workspace/{repo.name}/{LEAN4_DATA_EXTRACTOR_PATH.name}\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">103</span> <span class=\"o\">}</span>\n<span class=\"c1\">--&gt; 104 container.run(</span>\n    <span class=\"mi\">105</span>     <span class=\"n\">f</span><span class=\"s2\">\"python3 build_lean4_repo.py {repo.name}\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">106</span>     <span class=\"n\">create_mounts</span><span class=\"o\">(</span><span class=\"n\">mts</span><span class=\"o\">),</span>\n    <span class=\"mi\">107</span>     <span class=\"o\">{</span><span class=\"s2\">\"NUM_PROCS\"</span><span class=\"o\">:</span> <span class=\"n\">NUM_PROCS</span><span class=\"o\">},</span>\n    <span class=\"mi\">108</span>     <span class=\"n\">as_current_user</span><span class=\"bp\">=</span><span class=\"n\">True</span><span class=\"o\">,</span>\n    <span class=\"mi\">109</span>     <span class=\"n\">work_dir</span><span class=\"bp\">=</span><span class=\"s2\">\"/workspace\"</span><span class=\"o\">,</span>\n    <span class=\"mi\">110</span> <span class=\"o\">)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">container.py</span><span class=\"o\">:</span><span class=\"mi\">193</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">NativeContainer.run</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">,</span> <span class=\"n\">command</span><span class=\"o\">,</span> <span class=\"n\">mounts</span><span class=\"o\">,</span> <span class=\"n\">envs</span><span class=\"o\">,</span> <span class=\"n\">as_current_user</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">,</span> <span class=\"n\">cpu_limit</span><span class=\"o\">,</span> <span class=\"n\">memory_limit</span><span class=\"o\">,</span> <span class=\"n\">work_dir</span><span class=\"o\">)</span>\n    <span class=\"mi\">190</span>         <span class=\"n\">work_dir</span> <span class=\"bp\">=</span> <span class=\"n\">Path.cwd</span><span class=\"o\">()</span> <span class=\"bp\">/</span> <span class=\"n\">work_dir.relative_to</span><span class=\"o\">(</span><span class=\"n\">work_dir.root</span><span class=\"o\">)</span>\n    <span class=\"mi\">192</span> <span class=\"k\">with</span> <span class=\"n\">working_directory</span><span class=\"o\">(</span><span class=\"n\">work_dir</span><span class=\"o\">):</span>\n<span class=\"c1\">--&gt; 193     execute(cmd, capture_output=capture_output)</span>\n    <span class=\"mi\">195</span> <span class=\"n\">self._unmount_files</span><span class=\"o\">(</span><span class=\"n\">mounts</span><span class=\"o\">)</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">utils.py</span><span class=\"o\">:</span><span class=\"mi\">116</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">)</span>\n    <span class=\"mi\">114</span>         <span class=\"n\">logger.info</span><span class=\"o\">(</span><span class=\"n\">ex.stdout.decode</span><span class=\"o\">())</span>\n    <span class=\"mi\">115</span>         <span class=\"n\">logger.error</span><span class=\"o\">(</span><span class=\"n\">ex.stderr.decode</span><span class=\"o\">())</span>\n<span class=\"c1\">--&gt; 116     raise ex</span>\n    <span class=\"mi\">117</span> <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">capture_output</span><span class=\"o\">:</span>\n    <span class=\"mi\">118</span>     <span class=\"n\">return</span> <span class=\"n\">None</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">benchmark</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lean_dojo</span><span class=\"bp\">/</span><span class=\"n\">utils.py</span><span class=\"o\">:</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">)</span>\n    <span class=\"mi\">101</span> <span class=\"s2\">\"\"\"Execute the shell command ``cmd`` and optionally return its output.</span>\n<span class=\"s2\">    102</span>\n<span class=\"s2\">    103 Args:</span>\n<span class=\"s2\">   (...)</span>\n<span class=\"s2\">    108     Optional[Tuple[str, str]]: The command's output, including stdout and stderr (None if ``capture_output == False``).</span>\n<span class=\"s2\">    109 \"\"\"</span>\n    <span class=\"mi\">110</span> <span class=\"n\">try</span><span class=\"o\">:</span>\n<span class=\"c1\">--&gt; 111     res = subprocess.run(cmd, shell=True, capture_output=capture_output, check=True)</span>\n    <span class=\"mi\">112</span> <span class=\"n\">except</span> <span class=\"n\">subprocess.CalledProcessError</span> <span class=\"n\">as</span> <span class=\"n\">ex</span><span class=\"o\">:</span>\n    <span class=\"mi\">113</span>     <span class=\"k\">if</span> <span class=\"n\">capture_output</span><span class=\"o\">:</span>\n\n<span class=\"n\">File</span> <span class=\"bp\">~/.</span><span class=\"n\">pyenv</span><span class=\"bp\">/</span><span class=\"n\">versions</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">16</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.9</span><span class=\"bp\">/</span><span class=\"n\">subprocess.py</span><span class=\"o\">:</span><span class=\"mi\">528</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">run</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">,</span> <span class=\"n\">timeout</span><span class=\"o\">,</span> <span class=\"n\">check</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"n\">popenargs</span><span class=\"o\">,</span> <span class=\"bp\">**</span><span class=\"n\">kwargs</span><span class=\"o\">)</span>\n    <span class=\"mi\">526</span>     <span class=\"n\">retcode</span> <span class=\"bp\">=</span> <span class=\"n\">process.poll</span><span class=\"o\">()</span>\n    <span class=\"mi\">527</span>     <span class=\"k\">if</span> <span class=\"n\">check</span> <span class=\"n\">and</span> <span class=\"n\">retcode</span><span class=\"o\">:</span>\n<span class=\"c1\">--&gt; 528         raise CalledProcessError(retcode, process.args,</span>\n    <span class=\"mi\">529</span>                                  <span class=\"n\">output</span><span class=\"bp\">=</span><span class=\"n\">stdout</span><span class=\"o\">,</span> <span class=\"n\">stderr</span><span class=\"bp\">=</span><span class=\"n\">stderr</span><span class=\"o\">)</span>\n    <span class=\"mi\">530</span> <span class=\"n\">return</span> <span class=\"n\">CompletedProcess</span><span class=\"o\">(</span><span class=\"n\">process.args</span><span class=\"o\">,</span> <span class=\"n\">retcode</span><span class=\"o\">,</span> <span class=\"n\">stdout</span><span class=\"o\">,</span> <span class=\"n\">stderr</span><span class=\"o\">)</span>\n\n<span class=\"n\">CalledProcessError</span><span class=\"o\">:</span> <span class=\"n\">Command</span> <span class=\"bp\">'</span><span class=\"n\">NUM_PROCS</span><span class=\"bp\">=</span><span class=\"mi\">32</span> <span class=\"n\">python3</span> <span class=\"n\">build_lean4_repo.py</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">-</span><span class=\"n\">mew'</span> <span class=\"n\">returned</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">zero</span> <span class=\"n\">exit</span> <span class=\"n\">status</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>The error in question seems to be that there is no module named loguru. However, I installed loguru in my environment and even ran <code>from loguru import logger</code> in my notebook to make sure that it imports correctly. Wondering if this is an issue introduced in the latest version? Below is the code that I ran: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"n\">os.environ</span><span class=\"o\">[</span><span class=\"bp\">'</span><span class=\"n\">CONTAINER'</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">native'</span>\n\n<span class=\"k\">from</span> <span class=\"n\">lean_dojo</span> <span class=\"kn\">import</span> <span class=\"bp\">*</span>\n<span class=\"n\">repo</span> <span class=\"bp\">=</span> <span class=\"n\">LeanGitRepo</span><span class=\"o\">(</span><span class=\"s2\">\"https://github.com/rah4927/lean-dojo-mew\"</span><span class=\"o\">,</span> <span class=\"s2\">\"12fec4d9f39ac9a41c6c1f058efab3ec41c028af\"</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"bp\">=</span> <span class=\"n\">Theorem</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">,</span> <span class=\"s2\">\"MiniF2F/Example.lean\"</span><span class=\"o\">,</span> <span class=\"s2\">\"amc12a_2019_p21\"</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">Dojo</span><span class=\"o\">(</span><span class=\"kd\">theorem</span><span class=\"o\">)</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">dojo</span><span class=\"o\">,</span> <span class=\"n\">init_state</span><span class=\"o\">):</span>\n  <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">init_state</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>EDIT: The following piece of code seems to work just fine: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repo</span> <span class=\"bp\">=</span> <span class=\"n\">LeanGitRepo</span><span class=\"o\">(</span><span class=\"s2\">\"https://github.com/yangky11/lean4-example\"</span><span class=\"o\">,</span> <span class=\"s2\">\"7d711f6da4584ecb7d4f057715e1f72ba175c910\"</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"bp\">=</span> <span class=\"n\">Theorem</span><span class=\"o\">(</span><span class=\"n\">repo</span><span class=\"o\">,</span> <span class=\"s2\">\"Lean4Example.lean\"</span><span class=\"o\">,</span> <span class=\"s2\">\"hello_world\"</span><span class=\"o\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Dojo</span><span class=\"o\">(</span><span class=\"kd\">theorem</span><span class=\"o\">)</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">dojo</span><span class=\"o\">,</span> <span class=\"n\">init_state</span><span class=\"o\">):</span>\n  <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">init_state</span><span class=\"o\">)</span>\n  <span class=\"n\">result</span> <span class=\"bp\">=</span> <span class=\"n\">dojo.run_tac</span><span class=\"o\">(</span><span class=\"n\">init_state</span><span class=\"o\">,</span> <span class=\"s2\">\"rw [add_assoc, add_comm b, ←add_assoc]\"</span><span class=\"o\">)</span>\n  <span class=\"n\">assert</span> <span class=\"n\">isinstance</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">ProofFinished</span><span class=\"o\">)</span>\n  <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which makes me think the issue is somewhere in the repository, but I am not sure where it could be, since lean works fine in that project locally.</p>",
        "id": 386672695,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1692729603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"565199\">@Rahul Saha</span>  Can you quickly try if <code>python3 -c \"import loguru\"</code> works? The second example works probably because the repo is downloaded from the <a href=\"https://leandojo.readthedocs.io/en/latest/user-guide.html#caching\">remote cache</a> instead of built locally. Setting <code>VERBOSE=1</code> gives you additional information. Instead of posting it here, can you open an issue on GitHub following <a href=\"https://github.com/lean-dojo/LeanDojo#questions-and-bugs\">https://github.com/lean-dojo/LeanDojo#questions-and-bugs</a>? It will instruct you to run in the debug mode and add more information I need to figure out what's going on.</p>",
        "id": 386684021,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1692734488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span>  yes, python3 -c \"import loguru\" works fine. I have created an issue here - <a href=\"https://github.com/lean-dojo/LeanDojo/issues/41\">https://github.com/lean-dojo/LeanDojo/issues/41</a>, thank you!</p>",
        "id": 386686990,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1692735788
    },
    {
        "content": "<p>Hello, I am trying to clone a fork of math-lib (Lean 3) and trace it. I am finding though that <code>trace</code> returns an error saying that the mount path does not exist:</p>\n<p><code>docker: Error response from daemon: invalid mount config for type \"bind\": bind source path does not exist: /tmp/tmplknmfziv/mathlib-clustering.\nSee 'docker run --help'.</code></p>",
        "id": 386926131,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1692813680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"572379\">@Lev Stambler</span>  Instead of posting it here, can you open an issue on GitHub following <a href=\"https://github.com/lean-dojo/LeanDojo#questions-and-bugs\">https://github.com/lean-dojo/LeanDojo#questions-and-bugs</a>? It will instruct you to run in the debug mode and add more information I need to figure out what's going on.</p>",
        "id": 386932743,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1692816560
    }
]