[
    {
        "content": "<p>Hi all,</p>\n<p>We're excited to release <a href=\"https://github.com/lean-dojo/LeanInfer\">LeanInfer (https://github.com/lean-dojo/LeanInfer)</a>: a tool for running the inference of neural networks in Lean. It is under development and currently provides a tactic for suggesting proof steps. </p>\n<p><a href=\"/user_uploads/3121/qC_97VFehLJ07Olthw1Yephd/LeanInfer.png\">LeanInfer.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qC_97VFehLJ07Olthw1Yephd/LeanInfer.png\" title=\"LeanInfer.png\"><img src=\"/user_uploads/3121/qC_97VFehLJ07Olthw1Yephd/LeanInfer.png\"></a></div><p>The frontend of our tactic suggestion tool is based on <a href=\"https://github.com/wellecks/llmstep\">llmstep</a> (thanks!). However, instead of having Lean make requests to a model running in Python, we turn the model into a shared library and run it directly through Lean's FFI. We use the tactic generator (w/o retrieval) in LeanDojo. The model is relatively small (299M parameters) and has no problem running on my old MacBook 2020 with 16GB memory and no GPU.</p>\n<p><a href=\"https://github.com/yangky11/lean4-example/tree/LeanInfer-demo\">Here</a> is an example of how you can use LeanInfer in your project. You're welcome to check it out! Feel free to let us know if you encounter any glitches in installation (likely due to FFI), and we are happy to help.</p>\n<p>This is a joint effort with Anima and <span class=\"user-mention\" data-user-id=\"601076\">@Peiyang Song</span>, with the majority of technical work attributed to Peiyang.</p>",
        "id": 390051184,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694279738
    },
    {
        "content": "<p>Is there any prospect of simplifying the installation process? Step 3 is pretty dire.</p>",
        "id": 390109531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694328605
    },
    {
        "content": "<p>e.g. could you provide ONNX automatically, using the same cloud build mechanism that ProofWidgets uses?</p>",
        "id": 390109588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694328661
    },
    {
        "content": "<p>Even step 2 I'd hope could be done from inside Lean (e.g. the first time you run <code>suggest_tactics</code>, if it can't find the model it recommends running some command which will do it for you).</p>",
        "id": 390109646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694328718
    },
    {
        "content": "<p>Maybe a more concrete suggestion: could you create a branch of Mathlib, so that running LeanInfer is a matter of:</p>\n<ul>\n<li>checking out the branch</li>\n<li>run some script (e.g. that downloads requirements)</li>\n<li>open VSCode?</li>\n</ul>\n<p>If this is not possible, what is missing that we could provide in Lean / Lake / the VSCode extension that would make it possible?</p>",
        "id": 390111611,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694330004
    },
    {
        "content": "<p>(I appreciate that your instructions differ for different operating systems, but e.g. ProofWidgets copes with this: when I run <code>lake build</code> in a fresh clone of Mathlib you see <code>Downloading proofwidgets/v0.0.13/macOS-64.tar.gz</code>.)</p>",
        "id": 390111710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694330081
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ,</p>\n<p>Thank you for the suggestions! I totally agree this is the way to go. I wasn't aware of the cloud build mechanism and just took a look. From my understanding, we can compile LeanInfer's C++ code into static libraries for different platforms and release them on GitHub. When the user runs <code>lake build</code> in a project depending on LeanInfer, all libraries will be downloaded instead of built locally. The user does not need to compile anything locally (no need to set environment variables). Also, the user doesn't have to install ONNX Runtime since it is included in LeanInfer's static libraries. Is that correct?</p>\n<p>Following this idea, I created an <code>improve-installation</code> branch in <a href=\"https://github.com/lean-dojo/LeanInfer/tree/improve-installation\">LeanInfer</a> and released it as <a href=\"https://github.com/lean-dojo/LeanInfer/releases/tag/v0.0.3\">v0.0.3</a>. I also created an <code>improve-installation</code> branch in <a href=\"https://github.com/yangky11/lean4-example/tree/improve-installation\">lean4-example</a>, which depends on v0.0.3 of LeanInfer. However, when running <code>lake build</code>, I see the following error. Looks like it still tries to compile <code>ffi.o</code> even if it's available in the release.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"n\">kaiyuy</span><span class=\"bp\">@</span><span class=\"n\">Kaiyus</span><span class=\"bp\">-</span><span class=\"n\">MacBook</span><span class=\"bp\">-</span><span class=\"n\">Pro</span> <span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"kd\">example</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">v0.0.3</span><span class=\"bp\">/</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">93</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">99</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">99</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Command</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">99</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.Unreachable</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">102</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.TagAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">105</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.RCases</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">112</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Util.TermUnsafe</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">ffi.cpp</span>\n<span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.TagAttribute</span>\n<span class=\"n\">Unpacking</span> <span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">v0.0.3</span><span class=\"bp\">/</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Unreachable</span>\n<span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Command</span>\n<span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.ByCases</span>\n<span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.SeqFocus</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Name</span>\n<span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Parser</span>\n<span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Meta.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">11</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Tactic</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ffi.o</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">ffi.cpp</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span> <span class=\"bp\">-</span><span class=\"n\">std</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">++</span><span class=\"mi\">11</span> <span class=\"bp\">-</span><span class=\"n\">stdlib</span><span class=\"bp\">=</span><span class=\"n\">libc</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">O3</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">kaiyuy</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.0.0/include</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">ffi.cpp</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">fatal</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">onnxruntime_cxx_api.h'</span> <span class=\"n\">file</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">onnxruntime_cxx_api.h</span><span class=\"bp\">&gt;</span>\n         <span class=\"bp\">^~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"mi\">1</span> <span class=\"n\">error</span> <span class=\"n\">generated.</span>\n</code></pre></div>\n<p>Note that the error is not deterministic. If I run <code>lake clean &amp;&amp; lake build</code> multiple times in lean4-example, sometimes the error becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"n\">kaiyuy</span><span class=\"bp\">@</span><span class=\"n\">Kaiyus</span><span class=\"bp\">-</span><span class=\"n\">MacBook</span><span class=\"bp\">-</span><span class=\"n\">Pro</span> <span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"kd\">example</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">clean</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">v0.0.3</span><span class=\"bp\">/</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">36</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">45</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Command</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">63</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.RCases</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">84</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.Unreachable</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">87</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Util.TermUnsafe</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">87</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.TagAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.ByCases</span>\n<span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.SeqFocus</span>\n<span class=\"n\">Unpacking</span> <span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">v0.0.3</span><span class=\"bp\">/</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Name</span>\n<span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Parser</span>\n<span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Meta.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Tactic</span>\n<span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.NameMapAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.List.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.TagAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">11</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Unreachable</span>\n<span class=\"o\">[</span><span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Name</span>\n<span class=\"o\">[</span><span class=\"mi\">13</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Parser</span>\n<span class=\"o\">[</span><span class=\"mi\">14</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Command</span>\n<span class=\"o\">[</span><span class=\"mi\">15</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Tactic</span>\n<span class=\"o\">[</span><span class=\"mi\">16</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Util.TermUnsafe</span>\n<span class=\"o\">[</span><span class=\"mi\">17</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.SeqFocus</span>\n<span class=\"o\">[</span><span class=\"mi\">18</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.NameMapAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">19</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.ByCases</span>\n<span class=\"o\">[</span><span class=\"mi\">20</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n<span class=\"o\">[</span><span class=\"mi\">21</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">libleanffi.dylib</span>\n<span class=\"o\">[</span><span class=\"mi\">22</span><span class=\"bp\">/</span><span class=\"mi\">197</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.TagAttribute</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">kaiyuy</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.0.0/bin/leanc -shared -o ./lake-packages/LeanInfer/build/lib/libleanffi.dylib -Wl,-force_load,./lake-packages/LeanInfer/build/lib/libleanffi.a -lonnxruntime -lstdc++</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">library</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"bp\">-</span><span class=\"n\">lonnxruntime</span>\n<span class=\"n\">clang</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">kaiyuy</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.0.0/bin/leanc` exited with code 1</span>\n</code></pre></div>\n<p>Regarding <a href=\"https://github.com/leanprover/lake/blob/a2ced44b7e5e30c2a6b84b420e1bbdd8d6d8e079/Lake/Config/Package.lean#L37\">how lake selects the file to download based on the platform</a>, it doesn't distinguish between x64 and arm64? The macOS release was built on my Intel x64 Mac. I'm not sure if it will work for a newer Mac.</p>",
        "id": 390214783,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694395496
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span>  Thanks for creating LeanInfer and the work on installation improvements!</p>\n<p>I've tried out lean4-example in Github Codespace, I got the following issues:</p>\n<ol>\n<li><code>lake build</code> fails to compile C++ with Clang++, resolved by removing all <code>-stdlib=libc++</code>from the lakefile of LeanInfer</li>\n</ol>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean4-example<span class=\"w\"> </span><span class=\"o\">(</span>improve-installation<span class=\"o\">)</span><span class=\"w\"> </span>$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\n<span class=\"o\">[</span><span class=\"m\">23</span>/197<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>ffi.cpp\nerror:<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>clang++<span class=\"w\"> </span>-c<span class=\"w\"> </span>-o<span class=\"w\"> </span>./lake-packages/LeanInfer/build/ffi.o<span class=\"w\"> </span>./lake-packages/LeanInfer/ffi.cpp<span class=\"w\"> </span>-fPIC<span class=\"w\"> </span>-std<span class=\"o\">=</span>c++11<span class=\"w\"> </span>-stdlib<span class=\"o\">=</span>libc++<span class=\"w\"> </span>-O3<span class=\"w\"> </span>-I<span class=\"w\"> </span>/home/codespace/.elan/toolchains/leanprover--lean4---v4.0.0/include\nerror:<span class=\"w\"> </span>stderr:\nIn<span class=\"w\"> </span>file<span class=\"w\"> </span>included<span class=\"w\"> </span>from<span class=\"w\"> </span>./lake-packages/LeanInfer/ffi.cpp:1:\n/home/codespace/.elan/toolchains/leanprover--lean4---v4.0.0/include/lean/lean.h:14:10:<span class=\"w\"> </span>fatal<span class=\"w\"> </span>error:<span class=\"w\"> </span><span class=\"s1\">'atomic'</span><span class=\"w\"> </span>file<span class=\"w\"> </span>not<span class=\"w\"> </span>found\n<span class=\"c1\">#include &lt;atomic&gt;</span>\n<span class=\"w\">         </span>^~~~~~~~\n<span class=\"m\">1</span><span class=\"w\"> </span>error<span class=\"w\"> </span>generated.\nerror:<span class=\"w\"> </span>external<span class=\"w\"> </span><span class=\"nb\">command</span><span class=\"w\"> </span><span class=\"sb\">`</span>clang++<span class=\"sb\">`</span><span class=\"w\"> </span>exited<span class=\"w\"> </span>with<span class=\"w\"> </span>code<span class=\"w\"> </span><span class=\"m\">1</span>\n</code></pre></div>\n<p>I ran <code>bash -c \"$(wget -O - https://apt.llvm.org/llvm.sh)\"</code> from <a href=\"https://apt.llvm.org/\">https://apt.llvm.org/</a> to fix it, no change.<br>\nThen I test the <code>clang++</code> command with extra options <code> -E -x c++ -v </code> at the end, it showed the following search path:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>ignoring<span class=\"w\"> </span>nonexistent<span class=\"w\"> </span>directory<span class=\"w\"> </span><span class=\"s2\">\"/include\"</span>\n<span class=\"c1\">#include \"...\" search starts here:</span>\n<span class=\"c1\">#include &lt;...&gt; search starts here:</span>\n<span class=\"w\"> </span>/home/codespace/.elan/toolchains/leanprover--lean4---v4.0.0/include\n<span class=\"w\"> </span>/usr/local/include\n<span class=\"w\"> </span>/usr/lib/llvm-10/lib/clang/10.0.0/include\n<span class=\"w\"> </span>/usr/include/x86_64-linux-gnu\n<span class=\"w\"> </span>/usr/include\nEnd<span class=\"w\"> </span>of<span class=\"w\"> </span>search<span class=\"w\"> </span>list.\n</code></pre></div>\n<p>which is shorter than a raw <code>clang++  -E -x c++ - -v &lt; /dev/null 2&gt;&amp;1</code> which shows</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>ignoring<span class=\"w\"> </span>nonexistent<span class=\"w\"> </span>directory<span class=\"w\"> </span><span class=\"s2\">\"/include\"</span>\nignoring<span class=\"w\"> </span>duplicate<span class=\"w\"> </span>directory<span class=\"w\"> </span><span class=\"s2\">\"/usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/x86_64-linux-gnu/c++/9\"</span>\n<span class=\"c1\">#include \"...\" search starts here:</span>\n<span class=\"c1\">#include &lt;...&gt; search starts here:</span>\n<span class=\"w\"> </span>/usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9\n<span class=\"w\"> </span>/usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/x86_64-linux-gnu/c++/9\n<span class=\"w\"> </span>/usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/backward\n<span class=\"w\"> </span>/usr/local/include\n<span class=\"w\"> </span>/usr/lib/llvm-10/lib/clang/10.0.0/include\n<span class=\"w\"> </span>/usr/include/x86_64-linux-gnu\n<span class=\"w\"> </span>/usr/include\nEnd<span class=\"w\"> </span>of<span class=\"w\"> </span>search<span class=\"w\"> </span>list.\n</code></pre></div>\n<p>Clearly Clang++ stop looking for the GNU C++ headers if  <code>-stdlib=libc++</code> is present. If Github Codespace misses it I guess it would be missed in the environments of many end-users.</p>\n</div></div>\n<ol start=\"2\">\n<li>After resolved issue 1,  I end up having the same issue <code>fatal error: 'onnxruntime_cxx_api.h' file not found</code>, resolved by </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span> <span class=\"n\">cd</span> <span class=\"bp\">/</span><span class=\"n\">workspace</span><span class=\"bp\">/</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">wget</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">microsoft</span><span class=\"bp\">/</span><span class=\"n\">onnxruntime</span><span class=\"bp\">/</span><span class=\"n\">releases</span><span class=\"bp\">/</span><span class=\"n\">download</span><span class=\"bp\">/</span><span class=\"n\">v1.15.1</span><span class=\"bp\">/</span><span class=\"n\">onnxruntime</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">x64</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">tgz</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">tar</span> <span class=\"n\">xzvf</span>  <span class=\"n\">onnxruntime</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">x64</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">tgz</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then add <code>\"-I\", \"/workspaces/onnxruntime-linux-x64-1.15.1/include\"</code> to <code>flags</code> in LeanInfer lakefile</p>\n<ol start=\"3\">\n<li>Run <code>lake build</code> after step 2, I have the same linker error <code>libc++abi: terminating due to uncaught exception of type lean::exception: error loading library, libonnxruntime.so.1.15.1: cannot open shared object file: No such file or directory</code>, I tried to fix it by adding <code>\"-L\", \"/workspace/onnxruntime-linux-x64-1.15.1/lib/\"</code> to <code>moreLinkArgs</code> then</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">workspaces</span><span class=\"bp\">/</span><span class=\"n\">onnxruntime</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">x64</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>But the build hangs indefinitely, and it's not using much CPU. So far I'm stuck here.</p>\n<p>So the answer to the question</p>\n<blockquote>\n<p>The user does not need to compile anything locally (no need to set environment variables). Also, the user doesn't have to install ONNX Runtime since it is included in LeanInfer's static libraries. Is that correct?</p>\n</blockquote>\n<p>is currently no. In my test, \"When the user runs lake build in a project depending on LeanInfer, all libraries will be downloaded instead of built locally. \" is not happening, the end user would still have to recompile like you did.</p>",
        "id": 390303744,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694436697
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> , the <code>improve-installation</code> branch is not ready yet. Could you please try out the <code>main</code> branch? Do you see the same error messages?</p>",
        "id": 390305738,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694437316
    },
    {
        "content": "<blockquote>\n<p>is currently no. In my test, \"When the user runs lake build in a project depending on LeanInfer, all libraries will be downloaded instead of built locally. \" is not happening, the end user would still have to recompile like you did.</p>\n</blockquote>\n<p>With the cloud build mechanism, the user shouldn't need to compile anything? I'm wondering why it still tries to compile the library when the library can simply be downloaded.</p>",
        "id": 390306270,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694437493
    },
    {
        "content": "<p>I suspect for questions about the interaction of cloud build and FFI --- which presumably have never been asked before! --- we may need to see if <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> can answer.</p>\n<p>(They don't usually read this stream, but I'll spam them now. :-)</p>",
        "id": 390307733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694437951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/390305738\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> , the <code>improve-installation</code> branch is not ready yet. Could you please try out the <code>main</code> branch? Do you see the same error messages?</p>\n</blockquote>\n<p>I tried <code>main</code> (it deletes the old LeanInfer and rebuilds), and the same 3 issues happens.</p>",
        "id": 390308768,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694438264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/390306270\">said</a>:</p>\n<blockquote>\n<p>With the cloud build mechanism, the user shouldn't need to compile anything? I'm wondering why it still tries to compile the library when the library can simply be downloaded.</p>\n</blockquote>\n<p>From the source of both lakefiles in LeanInfer and lean4-example, I see no code handling uploading the built binary, or downloading the built binary for the end user. How did you implement it?</p>",
        "id": 390309334,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694438433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> Could you please open an issue in LeanInfer? Thanks! </p>\n<p>I uploaded the built binaries manually when creating the release. As for the cloud build, it is handled by lake. With <code>preferReleaseBuild </code> in lakefile.lean, lake will download from the package's GitHub releases when running <code>lake build</code>.</p>",
        "id": 390309990,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694438649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/390309990\">said</a>:</p>\n<blockquote>\n<p>I uploaded the built binaries manually when creating the release. As for the cloud build, it is handled by lake. With <code>preferReleaseBuild </code> in lakefile.lean, lake will download from the package's GitHub releases when running <code>lake build</code>.</p>\n</blockquote>\n<p>In that case, I read the code in lake, it turns out to only fetch the cloud release when running <code>lake build :release</code> in LeanInfer.</p>\n<p>When I run it, it successfully skips building from scratch, printed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"o\">:</span><span class=\"n\">release</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">v0.0.3</span><span class=\"bp\">/</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">Unpacking</span> <span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">v0.0.3</span><span class=\"bp\">/</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n</code></pre></div>\n<p>But if I run <code>lake build</code> for lean4-example, it still compiles <code>ffi.cpp</code>, ignoring everything upacked (<code>ffi.o</code>, <code>libLeanInfer-Basic-1.so</code>, <code>libLeanInfer-Frontend-1.so</code>, <code>libleanffi.so</code> etc.)</p>\n<p>I've opened an issue about Codespace build only: <a href=\"https://github.com/lean-dojo/LeanInfer/pull/3\">lean-dojo/LeanInfer#3</a></p>",
        "id": 390312944,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694439657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/390312944\">said</a>:</p>\n<blockquote>\n<p>it turns out to only fetch the cloud release when running <code>lake build :release</code> in LeanInfer.</p>\n</blockquote>\n<p>With <code>preferReleaseBuild</code> set, it should download it by default as part of a normally <code>lake build</code> (without needing to specify <code>lake build :release</code>)</p>",
        "id": 390339234,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694446694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/390312944\">said</a>:</p>\n<blockquote>\n<p>But if I run <code>lake build</code> for lean4-example, it still compiles <code>ffi.cpp</code>, ignoring everything upacked (<code>ffi.o</code>, <code>libLeanInfer-Basic-1.so</code>, <code>libLeanInfer-Frontend-1.so</code>, <code>libleanffi.so</code> etc.)</p>\n</blockquote>\n<p>The problem here is likely that lean4-example does not depend on the <code>improve-installation</code> branch of LeanInfer where <code>preferReleaseBuild</code> is set to  true.</p>",
        "id": 390340235,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694447032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>  Thanks for opening the issue. It has been resolved in <a href=\"https://github.com/lean-dojo/LeanInfer/issues/3\">https://github.com/lean-dojo/LeanInfer/issues/3</a>. The problem was related to the conflicts between LLVM+Clang vs. GCC.</p>",
        "id": 390340407,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694447079
    },
    {
        "content": "<p>Yes, I understand the expected behavior, but for LeanInfer and lean4-example of it, <code>lake build :release</code> indeed triggered a different behavior, without <code>:release</code> it just builds from scratch.</p>\n<p>I see nothing done different from the lake doc or the Proof Widget project in LeanInfer @ <code>v0.0.3</code> where the <code>improve-installation</code> of LeanInfer is released there.</p>",
        "id": 390340578,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694447138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> The LeanInfer version of lean4-example is <code>5c75218</code> which does not use <code>preferReleaseBuild</code> and that is why it does not work there (or at least part of the reason). For LeanInfer itself, you are correct, you do need to use <code>lake build :release</code> to download the cloud build.</p>",
        "id": 390341026,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694447297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> </p>\n<blockquote>\n<p>The problem here is likely that lean4-example does not depend on the improve-installation branch of LeanInfer where preferReleaseBuild is set to true.</p>\n</blockquote>\n<p>I was using the <code>improve-installation</code> branch of lean4-example. It depends on <a href=\"mailto:LeanInfer@v0.0.3\">LeanInfer@v0.0.3</a> (<a href=\"https://github.com/yangky11/lean4-example/blob/e4242fb448ca07d1abcb022e7ea848a4a68cd52b/lakefile.lean#L17\">lakefile here</a>). And <a href=\"https://github.com/lean-dojo/LeanInfer/releases/tag/v0.0.3\">v0.0.3</a> is the latest commit (<code>5782a422a8d11650640324eb4e68fa2c298e9736</code>) of LeanInfer's <code>improve-installation</code> branch.</p>",
        "id": 390341393,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694447419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> Ah, sorry, I did not notice there was another branch of <code>lean4-example</code>.</p>",
        "id": 390341572,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694447484
    },
    {
        "content": "<p>Sorry for the confusion. Basically we're trying to improve the installation, and this WIP is named <code>improve-installation</code> branch in both repos.</p>",
        "id": 390341735,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694447536
    },
    {
        "content": "<blockquote>\n<p>default as part of a normally lake build (with needing to specify lake build :release)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Did you actually mean \"without needing to\"?</p>",
        "id": 390342058,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694447644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> Ah, I figured out the problem here. LeanInfer's <code>extern_lib</code> does not depend on the release facet, so it begins building without waiting for the download to complete.</p>",
        "id": 390343973,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694448213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/390341026\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> The LeanInfer version of lean4-example is <code>5c75218</code> which does not use <code>preferReleaseBuild</code> and that is why it does not work there (or at least part of the reason). For LeanInfer itself, you are correct, you do need to use <code>lake build :release</code> to download the cloud build.</p>\n</blockquote>\n<p>I tried adding <code>preferReleaseBuild</code> to the lakefile of the example, but it still rebuild from scratch. Then I checked Mathlib4 which is using ProofWidget, and it has set no such flag, so I thought this flag is not needed for the end user lean project that's using LeanInfer.</p>",
        "id": 390343977,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694448214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> You are correct .<code>lean4-example</code> does not need <code>preferReleaseBuild</code> (since we do not need cloud releases of <code>lean4-example</code> itself).</p>",
        "id": 390344203,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694448271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Oh, I see, that makes sense.  Would it be possible for you to open a PR to (the <code>improve-installation</code> branch of) LeanInfer to fix this? Thanks!</p>",
        "id": 390344435,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694448324
    },
    {
        "content": "<p>It's strange that even when I manually made the binaries downloaded via <code>lake build :release</code>, lake still doesn't recognize them.</p>",
        "id": 390346378,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694448913
    },
    {
        "content": "<p>How to depend on the release facet? Found no doc about it, and the <code>extern_lib</code> source has no arguments for that too. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 390346817,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694449055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/390346378\">said</a>:</p>\n<blockquote>\n<p>It's strange that even when I manually made the binaries downloaded via <code>lake build :release</code>, lake still doesn't recognize them.</p>\n</blockquote>\n<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  That is because there is a second problem: the dependency trace of <code>ffi.o</code> includes the hash of the <code>-Ilean/include</code> directory which is system-dependent. That also needs to be fixed. Working on a PR now.</p>",
        "id": 390350225,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694450378
    },
    {
        "content": "<p><a href=\"https://github.com/lean-dojo/LeanInfer/pull/4\">lean-dojo/LeanInfer#4</a></p>",
        "id": 390353760,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694451756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span></p>",
        "id": 390356165,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694452659
    },
    {
        "content": "<p>I'll take a look asap. Thanks!</p>",
        "id": 390356316,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694452717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  This PR works great! Now it no longer tries to re-compile the C++ library. But we got another error during linking. I put the details in the PR.</p>",
        "id": 390388407,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694466595
    },
    {
        "content": "<p>We have made the installation process substantially simpler and more robust. Here are steps to see a working example in GitHub Codespace:</p>\n<ol>\n<li>Launch a GitHub Codespace on the <code>LeanInfer-demo</code> branch of <a href=\"https://github.com/yangky11/lean4-example/tree/LeanInfer-demo\">lean4-example</a>.</li>\n<li>Install elan: <code>curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh</code></li>\n<li>Download the model and build the project: <code>git lfs install &amp;&amp; git clone https://huggingface.co/kaiyuy/onnx-leandojo-lean4-tacgen-byt5-small &amp;&amp; lake build</code></li>\n<li>Install the lean4 VSCode extension and open Lean4Example.lean</li>\n</ol>\n<p>We handle most dependencies in LeanInfer's lakefile, so the user doesn't have to install anything other than elan. And they do not have to compile the FFI part locally (fewer nasty compilation errors).  This wouldn't be possible without the help of <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> !</p>\n<p>We also plan to get rid of the model downloading when building the project. I'll work on that when I get a chance.</p>",
        "id": 390964910,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694704923
    },
    {
        "content": "<p>Here is a more technical note of what we did. It might be useful for other projects involving FFI + external dependencies + cloud release + cross-platform:</p>\n<h3>Challenge 1: Dependency Hell</h3>\n<p>LeanInfer's C++ code depends on an external library called ONNX Runtime, whose platform-specific binaries can be downloaded <a href=\"https://github.com/microsoft/onnxruntime/releases\">here</a>. Furthermore, somehow LeanInfer can only be compiled by LLVM (with Clang, libc++, libc++abi, and libunwind) but not GCC. This has caused a lot of hassles during compilation. The LLVM installation on many Linux systems is incomplete. For example, if you use <a href=\"https://apt.llvm.org/\">LLVM's official installation script</a>, by default, it does not install libunwind. You may get a compilation error that libunwind cannot be found. Or worse, the compiler may link to a non-LLVM version of libunwind, leading to mysterious errors down the road.  </p>\n<p>Our solution is to locate the correct <code>libonnxruntime.so</code>, <code>libc++.so</code>, <code>libc++abi.so</code>, and <code>libunwind.so</code>, pack them into <code>build/lib/</code>, and release them using lake's cloud release mechanism. We only do this for Linux, since the compilation toolchain on macOS is based on LLVM.</p>\n<h3>Challenge 2: Supporting Different Platforms</h3>\n<p>We want to support 4 platforms:<br>\n<code>linux-x86_64</code><br>\n<code>macOS-x86_64</code><br>\n<code>macOS-arm64</code><br>\n<code>linux-arm64</code> (relatively rare but possible, e.g., Linux Docker container running on <code>macOS-arm64</code>)<br>\nlake's cloud release mechanism does not directly support distinguishing <code>x86_64</code> and <code>arm64</code>. The binary libraries in the cloud release are platform-dependent and wouldn't work on a different platform.  However, we managed to set <code>preferReleaseBuild </code> and <code>buildArchive ?</code> in a platform-dependent way to make sure the correct version of the binary is downloaded.</p>",
        "id": 390973902,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694707377
    },
    {
        "content": "<p>This went well for mathlib-free projects, thanks for the exploration of such a solution that also applies to other FFI projects!</p>\n<p>Does this work with Mathlib4? My attempt:</p>\n<ol>\n<li>start with the LeanInfer example that already works.</li>\n<li>added <code>require mathlib from git \"https://github.com/leanprover-community/mathlib4\"</code> to lakefile</li>\n<li>run <code>lake update</code> &amp; <code>lake exe cache get</code>  -&gt; cache complains a million times of: <code>Warning: lake-packages/std/Std/Data/Sum/Basic.lean not found. Skipping all files that depend on it</code></li>\n<li>import any Mathlib stuff that already works in a non-LeanInfer project</li>\n<li>run <code>lake build</code></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/././</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Sum</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n</code></pre></div>\n<p>I think this is because Mathlib also depends on Std and I recall a warning about don't require Std ourselves, but I don't know if this would cause troubles if I depend on Std via LeanInfer.</p>",
        "id": 391349363,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694853356
    },
    {
        "content": "<p>Ah, it works, as long as I require Mathlib first, then LeanInfer ( I also removed explicitly requiring aesop).</p>\n<p>The cache is downloaded and unpacked, but the whole Mathlib is compiled again: <a href=\"/user_uploads/3121/mAQoiSGZPRyPrJwg5_PoCLL5/lake.log\">lake.log</a></p>\n<p>Anyway, it works smoothly ever since.</p>\n<p>Here's a great case to close the goal:</p>\n<p><a href=\"/user_uploads/3121/z9h23YOnKij4tQAj1TC4Xcvk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/z9h23YOnKij4tQAj1TC4Xcvk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/z9h23YOnKij4tQAj1TC4Xcvk/image.png\"></a></div><p>Unfortunately, the result is very volatile, if I delete the line and re-enter <code>suggest_tactics</code>, it mostly suggests other unhelpful tactics that makes no use of Filter-related info, one of them looks like this:</p>\n<p><a href=\"/user_uploads/3121/VndKTpm2ml6V3uBj-VDF9e-b/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VndKTpm2ml6V3uBj-VDF9e-b/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/VndKTpm2ml6V3uBj-VDF9e-b/image.png\"></a></div><p>Also, if I only just move cursor elsewhere and back, the suggestion mostly stay the same (maybe this is by design), I'll have to do some retyping like remove and type the trailing \"s\" to trigger a refresh of suggestions. After the first time LeanInfer gives me the great result, I tried a few dozen times to get the same suggestion back.</p>\n<p>Maybe it's an interesting case to investigate, here's the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">LeanInfer</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Filter.ext_iff₁</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">suggest_tactics</span>\n</code></pre></div>",
        "id": 391351708,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694854817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>  the problem you encountered might be related to the version of std4. I got a similar error when trying to add LeanInfer as a dependency of mathlib4 and run <code>lake update &amp;&amp; lake build</code>. The problem was resolved after I switched to <code>lake update LeanInfer &amp;&amp; lake build</code>. It looks like mathlib4 may break if you update some of its dependencies.</p>",
        "id": 391387304,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694876440
    },
    {
        "content": "<p>A very useful general tip is to never ever run <code>lake update</code> without argument.</p>",
        "id": 391387520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694876497
    },
    {
        "content": "<p>Regarding the quality of the tactic suggestions, for now, we expect them to lag behind the version in LeanDojo (although they use the same model). In LeanDojo, we use beam search to generate 64 tactics, and the hyperparameters (e.g., length penalty in beam search) are well-tuned. Currently, LeanInfer uses multinomial sampling (since it's way easier to implement than beam search), and the hyperparameters are quite arbitrary. Here is a nice <a href=\"https://huggingface.co/blog/how-to-generate\">blog</a> explaining different algorithms for generation. We plan to add beam search to LeanInfer by implementing the algorithm directly in Lean, though our first priority right now is to support premise selection similar to <a href=\"https://github.com/BartoszPiotrowski/lean-premise-selection\">lean-premise-selection</a>.</p>\n<p>Yes, moving the cursor around wouldn't trigger a regeneration. <code>suggest_tactics</code> is just like other tactics. It is re-run only when you make changes to the file that have an effect on it.</p>",
        "id": 391388562,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694876968
    },
    {
        "content": "<p>Thanks, I'm aware the issue of <code>lake update</code> and mathlib, but note that in my experimenting case (starting with a working LeanInfer &amp; Mathlib-free project, then add Mathlib), <code>lake update</code> or <code>lake update mathlib</code> is required (or the manifest is missing mathlib). So the cause is actually the order of <code>require</code>:  one can't require Mathlib after a Lean library that also uses std4, and this is also how I solved it.</p>\n<p>The unresolved issue is, even after the reordering, mathlib cache seems to be ineffective and lake rebuilt it.</p>",
        "id": 391392314,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694878886
    },
    {
        "content": "<p>Looking forward to the Lean implemented beam search (or at least top-k would already be better).</p>\n<p>Now the suggestion varies from making no progress, some progress(blue) and closing the goal( <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> ) so I need to trigger it repeatedly. And I found it's more convenient to apply a suggestion then undo to trigger a new round of suggestion.</p>",
        "id": 391392747,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694879174
    },
    {
        "content": "<p>Presumably the premise-selection-guided suggestions would also be better, even with greedy search algorithm with multinomial sampling.</p>\n<p>One observation of a series of different suggestions given is that they somehow guess the likely tactics first, then their parameters (e.g. premises). Algorithmically, It first give very random tactics (due to temperature 1.0), then greedily find premises that fit the tactics but match the goal less.</p>",
        "id": 391396192,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694880406
    },
    {
        "content": "<p>I'm wondering how the version of <code>std4</code> is determined if lakefile.lean contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span>\n<span class=\"n\">require</span> <span class=\"n\">LeanInfer</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/lean-dojo/LeanInfer.git\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"v0.0.6\"</span>\n</code></pre></div>\n<p>And will it be any different if the order of <code>mathlib4</code> and <code>LeanInfer</code> is switched? <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 391399740,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694883004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> In that order, the version of Std from mathlib will picked. In the reverse order, the version of Std from LeanInfer will be picked. Every dependency of a package is resolved in order, then each dependency's depedencies are resolved recursively in order. For example, given the tree:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span>\n  <span class=\"n\">AA</span>\n     <span class=\"n\">AAA</span>\n     <span class=\"n\">AAB</span>\n  <span class=\"n\">AB</span>\n     <span class=\"n\">ABA</span>\n     <span class=\"n\">ABB</span>\n<span class=\"n\">B</span>\n  <span class=\"n\">BA</span>\n     <span class=\"n\">BAA</span>\n     <span class=\"n\">BAB</span>\n  <span class=\"n\">BB</span>\n     <span class=\"n\">BBA</span>\n     <span class=\"n\">BBB</span>\n</code></pre></div>\n<p>The resolution, in order, is A,. B, AA, AB, AAA, AAB, ABA, ABB, BA, BB, BAA, BAB, BBA, BBB.</p>",
        "id": 391404479,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694886596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I see. Thanks for the explanation! Since mathlib4 is less permissive in the versions of its dependencies, we should probably require mathlib4 first before requiring other packages?</p>",
        "id": 391404992,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694886969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> Yes, though, the problem appears to be that LeanInfer is using some newer features of Std not present in mathlbi's current version (namely, Std.Data.Sum.Basic).</p>",
        "id": 391405188,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694887111
    },
    {
        "content": "<p>I just made a sample project with LeanInfer and Mathlib as dependencies. For me it seems to work quite well:</p>\n<p>You just need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4_with_LeanInfer.git</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">cd</span> <span class=\"n\">mathlib4_with_LeanInfer</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">git</span> <span class=\"n\">submodule</span> <span class=\"n\">init</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">git</span> <span class=\"n\">submodule</span> <span class=\"n\">update</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>and then open <code>Mathlib4WithLeanInfer.lean</code>, in which:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">suggest_tactics</span>\n</code></pre></div>\n<p>displays:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span>\n  <span class=\"bp\">•</span> <span class=\"bp\">🎉</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Filter.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]</span>\n  <span class=\"bp\">•</span> <span class=\"n\">constructor</span>\n  <span class=\"bp\">•</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">ext_iff</span><span class=\"o\">]</span>\n  <span class=\"bp\">•</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Filter.Eventually</span><span class=\"o\">,</span> <span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">exists_imp</span><span class=\"o\">]</span>\n  <span class=\"bp\">•</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">compl_compl</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">]</span>\n  <span class=\"bp\">•</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Filter.mem_iff</span><span class=\"o\">,</span> <span class=\"n\">image_iff_bex</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span>\n  <span class=\"bp\">•</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_iff</span><span class=\"o\">,</span> <span class=\"n\">forall_congr'</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">]</span>\n  <span class=\"bp\">•</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">filter_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">,</span> <span class=\"n\">Iff.comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 391464001,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694932924
    },
    {
        "content": "<p><del>Unfortunately <code>lake exe cache get</code> seems to download an unusable cache (presumably the \"two different projects both depend on Std\" problem?), so the <code>lake build</code> step is still slow.</del></p>",
        "id": 391464041,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694932960
    },
    {
        "content": "<p>I don't see any reason why the cache shouldn't work</p>",
        "id": 391465280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694934196
    },
    {
        "content": "<p>I followed <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s steps, and <code>lake exe cache get</code>seemed to work well? It didn't recompile any file from mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"n\">kaiyuy</span><span class=\"bp\">@</span><span class=\"n\">Kaiyus</span><span class=\"bp\">-</span><span class=\"n\">MacBook</span><span class=\"bp\">-</span><span class=\"n\">Pro</span> <span class=\"n\">mathlib4_with_LeanInfer</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">dojo</span><span class=\"bp\">/</span><span class=\"n\">LeanInfer.git</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">LeanInfer</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">quote4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">JLimperg</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">mhuisi</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">cli.git</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">EdAyers</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Downloading</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.15</span><span class=\"bp\">/</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Unpacking</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.15</span><span class=\"bp\">/</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">85</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">85</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">85</span><span class=\"bp\">/</span><span class=\"mi\">85</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3764</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">13073</span> <span class=\"n\">ms</span>\n<span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"n\">kaiyuy</span><span class=\"bp\">@</span><span class=\"n\">Kaiyus</span><span class=\"bp\">-</span><span class=\"n\">MacBook</span><span class=\"bp\">-</span><span class=\"n\">Pro</span> <span class=\"n\">mathlib4_with_LeanInfer</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">v0.0.6</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">187</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">187</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.TagAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">187</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Command</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">187</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Unreachable</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">187</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">187</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Util.TermUnsafe</span>\n<span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">245</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.RCases</span>\n<span class=\"o\">[</span><span class=\"mi\">15</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.ByCases</span>\n<span class=\"o\">[</span><span class=\"mi\">16</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.SeqFocus</span>\n<span class=\"o\">[</span><span class=\"mi\">17</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Name</span>\n<span class=\"o\">[</span><span class=\"mi\">21</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.TagAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">22</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Parser</span>\n<span class=\"o\">[</span><span class=\"mi\">28</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Tactic</span>\n<span class=\"o\">[</span><span class=\"mi\">28</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Meta.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">33</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.NameMapAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">34</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.List.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">35</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Ord</span>\n<span class=\"o\">[</span><span class=\"mi\">36</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Classes.Dvd</span>\n<span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Control.ForInStep.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">38</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Util.ExtendedBinder</span>\n<span class=\"o\">[</span><span class=\"mi\">39</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Option.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">40</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.HaveI</span>\n<span class=\"o\">[</span><span class=\"mi\">106</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Meta.Expr</span>\n<span class=\"o\">[</span><span class=\"mi\">107</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.PersistentHashMap</span>\n<span class=\"o\">[</span><span class=\"mi\">108</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Classes.BEq</span>\n<span class=\"o\">[</span><span class=\"mi\">109</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Meta.LCtx</span>\n<span class=\"n\">Unpacking</span> <span class=\"n\">LeanInfer</span><span class=\"bp\">/</span><span class=\"n\">v0.0.6</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"o\">[</span><span class=\"mi\">112</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.Unreachable</span>\n<span class=\"o\">[</span><span class=\"mi\">112</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">112</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Name</span>\n<span class=\"o\">[</span><span class=\"mi\">115</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Command</span>\n<span class=\"o\">[</span><span class=\"mi\">116</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Util.TermUnsafe</span>\n<span class=\"o\">[</span><span class=\"mi\">117</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Parser</span>\n<span class=\"o\">[</span><span class=\"mi\">117</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.AttributeExtra</span>\n<span class=\"o\">[</span><span class=\"mi\">119</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Tactic</span>\n<span class=\"o\">[</span><span class=\"mi\">120</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.SeqFocus</span>\n<span class=\"o\">[</span><span class=\"mi\">120</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.GuardExpr</span>\n<span class=\"o\">[</span><span class=\"mi\">121</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.NoMatch</span>\n<span class=\"o\">[</span><span class=\"mi\">121</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Format</span>\n<span class=\"o\">[</span><span class=\"mi\">122</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.NameMapAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">133</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.List.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">133</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.ByCases</span>\n<span class=\"o\">[</span><span class=\"mi\">133</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Ord</span>\n<span class=\"o\">[</span><span class=\"mi\">133</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Char</span>\n<span class=\"o\">[</span><span class=\"mi\">133</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Option.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">134</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Classes.Dvd</span>\n<span class=\"o\">[</span><span class=\"mi\">136</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Control.ForInStep.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">136</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n<span class=\"o\">[</span><span class=\"mi\">137</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Meta.Expr</span>\n<span class=\"o\">[</span><span class=\"mi\">137</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Classes.BEq</span>\n<span class=\"o\">[</span><span class=\"mi\">142</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Meta.LCtx</span>\n<span class=\"o\">[</span><span class=\"mi\">149</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Linter.UnreachableTactic</span>\n<span class=\"o\">[</span><span class=\"mi\">152</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.PersistentHashMap</span>\n<span class=\"o\">[</span><span class=\"mi\">158</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.HaveI</span>\n<span class=\"o\">[</span><span class=\"mi\">162</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.AttributeExtra</span>\n<span class=\"o\">[</span><span class=\"mi\">164</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Lint.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">164</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Format</span>\n<span class=\"o\">[</span><span class=\"mi\">164</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Nat.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">164</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Control.ForInStep.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">165</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Classes.SetNotation</span>\n<span class=\"o\">[</span><span class=\"mi\">185</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Util.ExtendedBinder</span>\n<span class=\"o\">[</span><span class=\"mi\">193</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.NoMatch</span>\n<span class=\"o\">[</span><span class=\"mi\">193</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Control.ForInStep.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">195</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Nat.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">200</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Linter.UnnecessarySeqFocus</span>\n<span class=\"o\">[</span><span class=\"mi\">200</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Simpa</span>\n<span class=\"o\">[</span><span class=\"mi\">202</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Array.Init.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">203</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.TryThis</span>\n<span class=\"o\">[</span><span class=\"mi\">212</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Meta.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">213</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.Lint.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">215</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Array.Init.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">217</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">libleanffi.dylib</span>\n<span class=\"o\">[</span><span class=\"mi\">220</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Linter.UnreachableTactic</span>\n<span class=\"o\">[</span><span class=\"mi\">226</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.GuardExpr</span>\n<span class=\"o\">[</span><span class=\"mi\">231</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Linter</span>\n<span class=\"o\">[</span><span class=\"mi\">231</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Classes.SetNotation</span>\n<span class=\"o\">[</span><span class=\"mi\">233</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.SimpTrace</span>\n<span class=\"o\">[</span><span class=\"mi\">233</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.ShowTerm</span>\n<span class=\"o\">[</span><span class=\"mi\">238</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Array.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">249</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Lint.Misc</span>\n<span class=\"o\">[</span><span class=\"mi\">257</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">258</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Array.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">262</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Linter.UnnecessarySeqFocus</span>\n<span class=\"o\">[</span><span class=\"mi\">264</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Logic</span>\n<span class=\"o\">[</span><span class=\"mi\">267</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.TryThis</span>\n<span class=\"o\">[</span><span class=\"mi\">274</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Linter</span>\n<span class=\"o\">[</span><span class=\"mi\">274</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Classes.LawfulMonad</span>\n<span class=\"o\">[</span><span class=\"mi\">274</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Nat.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">278</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.ShowTerm</span>\n<span class=\"o\">[</span><span class=\"mi\">284</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Option.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">284</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">286</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">294</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">294</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Array.Merge</span>\n<span class=\"o\">[</span><span class=\"mi\">308</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Meta.DiscrTree</span>\n<span class=\"o\">[</span><span class=\"mi\">315</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.Simpa</span>\n<span class=\"o\">[</span><span class=\"mi\">319</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Ext.Attr</span>\n<span class=\"o\">[</span><span class=\"mi\">326</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Ext</span>\n<span class=\"o\">[</span><span class=\"mi\">327</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Option.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">329</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.SimpTrace</span>\n<span class=\"o\">[</span><span class=\"mi\">340</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">342</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.List.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">352</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Array.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">356</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Array.Match</span>\n<span class=\"o\">[</span><span class=\"mi\">364</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.String.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">367</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.Lint.Misc</span>\n<span class=\"o\">[</span><span class=\"mi\">368</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">LeanInfer.Frontend</span>\n<span class=\"o\">[</span><span class=\"mi\">374</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Logic</span>\n<span class=\"o\">[</span><span class=\"mi\">377</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Nat.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">377</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Classes.LawfulMonad</span>\n<span class=\"o\">[</span><span class=\"mi\">384</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">388</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Option.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">388</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">392</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Array.Merge</span>\n<span class=\"o\">[</span><span class=\"mi\">519</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Lean.Meta.DiscrTree</span>\n<span class=\"o\">[</span><span class=\"mi\">763</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.RCases</span>\n<span class=\"o\">[</span><span class=\"mi\">764</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Char</span>\n<span class=\"o\">[</span><span class=\"mi\">764</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.Ext.Attr</span>\n<span class=\"o\">[</span><span class=\"mi\">766</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Tactic.Ext</span>\n<span class=\"o\">[</span><span class=\"mi\">766</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Option.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">769</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">770</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.List.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">771</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Array.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">774</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.Array.Match</span>\n<span class=\"o\">[</span><span class=\"mi\">775</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Std.Data.String.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">776</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">LeanInfer.Frontend</span>\n<span class=\"o\">[</span><span class=\"mi\">777</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">LeanInfer.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">779</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">LeanInfer.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">780</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">LeanInfer</span>\n<span class=\"o\">[</span><span class=\"mi\">782</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">LeanInfer</span>\n<span class=\"o\">[</span><span class=\"mi\">783</span><span class=\"bp\">/</span><span class=\"mi\">784</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib4WithLeanInfer</span>\n</code></pre></div>",
        "id": 391495540,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694953486
    },
    {
        "content": "<p>Can confirm, works for me too!</p>",
        "id": 391496012,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694953808
    },
    {
        "content": "<p>Now that it is a one-liner to install I hope many people will try it out.</p>",
        "id": 391496064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694953849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span>, I think the obvious final step would be to remove the need to manually download.</p>\n<p>Instead, the first time running <code>suggest_tactics</code>, fail with an error, and a suggestion to run the <code>#download_lean_infer_model</code> command</p>",
        "id": 391496150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694953917
    },
    {
        "content": "<p>It's sort of already doing that. If it cannot find the model, it produces a warning and ask the user to download the model.<br>\n<a href=\"/user_uploads/3121/R7MP35HyUdxVtPU6adFp-9Gp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/R7MP35HyUdxVtPU6adFp-9Gp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/R7MP35HyUdxVtPU6adFp-9Gp/image.png\"></a></div>",
        "id": 391496297,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694954007
    },
    {
        "content": "<p>Oh, I missed that!</p>",
        "id": 391496368,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694954042
    },
    {
        "content": "<p>Can we just change it to: \"Cannot find the generator model. If you would like to download it to this project, run <code>suggest_tactics!</code>\"?</p>",
        "id": 391496453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694954084
    },
    {
        "content": "<p>(I guess it would be better to download it somewhere central, e.g. <code>~/.models/</code>?)</p>",
        "id": 391496481,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694954103
    },
    {
        "content": "<p>IIRC <code>git lfs</code> requires an additional install on some operating systems (e.g. it did for me on Nixos). Maybe it’s worthwhile to add something to those instruction along those lines, in case some users get confused by the suggested command failing?</p>",
        "id": 391515342,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694960549
    },
    {
        "content": "<p>I just released <a href=\"https://github.com/lean-dojo/LeanInfer/releases/tag/v0.0.7\">v0.0.7</a> incorporating these suggestions from <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>. </p>\n<p>Since downloading the model may take a few minutes, it would be great to show something so that the user knows it's downloading. I tried to add a <code>LogInfo</code> before downloading, but the message appears only after the downloading finishes, presumably because the message is not flushed. I see this is an existing issue without a good solution: <a href=\"#narrow/stream/113488-general/topic/Implementing.20find_theorems/near/378461661\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Implementing.20find_theorems/near/378461661</a>. For now, I just give the user heads-up in <code>suggest_tactics</code>'s warning message: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Cannot</span> <span class=\"n\">find</span> <span class=\"n\">the</span> <span class=\"n\">generator</span> <span class=\"n\">model.</span> <span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">would</span> <span class=\"n\">like</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">it</span> <span class=\"n\">to</span> <span class=\"n\">this</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">run</span> <span class=\"bp\">`</span><span class=\"n\">suggest_tactics</span><span class=\"bp\">!`</span> <span class=\"n\">and</span> <span class=\"n\">wait</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">few</span> <span class=\"n\">minutes.</span>\n</code></pre></div>",
        "id": 391569438,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1694983156
    },
    {
        "content": "<p>The solution here is widgets. It's slightly painful overhead to implement something if it is only needed for the downloading step.</p>\n<p>(e.g. consider Sagredo, which gives progressive updates from GPT)</p>\n<p>It would be nice to implement a widget that just executes an external shell command and streams the output back to the infoview.</p>",
        "id": 391582377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694989984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/391569438\">said</a>:</p>\n<blockquote>\n<p>I just released <a href=\"https://github.com/lean-dojo/LeanInfer/releases/tag/v0.0.7\">v0.0.7</a> incorporating these suggestions from <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> and <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>. </p>\n</blockquote>\n<p>The new release [v0.0.7] works. Here is my experiment with LeanInfer v.0.0.7 and the example code.<br>\n(1) Followed the instructions and the installation worked well.<br>\n(2) Opened the example code <strong>Lean4Example.lean</strong> with VS Code.<br>\n(2.1) Added the code <code>import LeanInfer</code>. This started the building process and showed a successful message.<br>\n(2.2) Added the code <code>suggest_tactic</code>.  I saw the following warning message:  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Cannot</span> <span class=\"n\">find</span> <span class=\"n\">the</span> <span class=\"n\">generator</span> <span class=\"n\">model.</span> <span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">would</span> <span class=\"n\">like</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">it</span> <span class=\"n\">to</span> <span class=\"n\">this</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">run</span> <span class=\"bp\">`</span><span class=\"n\">suggest_tactics</span><span class=\"bp\">!`</span> <span class=\"n\">and</span> <span class=\"n\">wait</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">few</span> <span class=\"n\">minutes.</span>\n</code></pre></div>\n<p>After waiting some time, the LeanInfer model was downloaded successfully to the folder <code>~/.cache/lean_infer</code>. <br>\n(3)  VS Code asked me to restart the LEAN server. I tried to restart it, but the LeanInfo window didn't show up properly.  <br>\n(4) So I restarted VS Code and opened the example code <code>Lean4Example.lean</code> again. <br>\n(5) VS Code displayed a list of suggested tactics. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p>I am using Ubuntu 20.04 on Windows for Linux, with an Intel i5 CPU and 16 GB of memory.<br>\nA minor technical glitch with Lean Infoview is that it sometimes asks to restart the LEAN server when I make changes to Lean example code. However, once the server is up, Lean Infoview works well.</p>",
        "id": 391597062,
        "sender_full_name": "Min-Hsien Weng",
        "timestamp": 1695000132
    },
    {
        "content": "<p>I guess a minor quibble: the help text without a model says \"to download it to this project\", but <code>suggest_tactic!</code> downloads to <code>~/.cache/</code>.</p>",
        "id": 391597891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695000560
    },
    {
        "content": "<p><a href=\"https://github.com/lean-dojo/LeanInfer/blob/main/lakefile.lean\">The lakefile of LeanInfer</a> has quite some code to handle <strong>Challenge 1: Dependency Hell</strong> and <strong>Challenge 2: Supporting Different Platforms</strong>. </p>\n<p>Two questions naturally arise:</p>\n<ol>\n<li>\n<p>Could these code be moved into a separate lean file, e.g. <code>lakefile_helper.lean</code> so the lakefile remain concise? Is this practice supported by lake (both technically and idiomatically)?</p>\n</li>\n<li>\n<p>Could some of them be added to vanilla lake and made declarative?</p>\n</li>\n</ol>",
        "id": 391839373,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695105214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span></p>\n<ol>\n<li>No, Lake does not currently support this (technically). It will be a while before this feature is possible.</li>\n<li>\n<p>Parts of it, yes, I do hope to add to Lake, but a lot is specific to LeanInfer. Components that have been or are hoped to be added:</p>\n<ul>\n<li>Architecture distinguishing in cloud releases (<a href=\"https://github.com/leanprover/lake/pull/173\">lake#173</a>)</li>\n<li><code>afterReleaseSync/Async</code> (already done in <a href=\"https://github.com/leanprover/lean4/pull/2521\">lean4#2521</a>; will be in Lean v4.1.0)</li>\n<li>Better shared external library &amp; C++ standard library support</li>\n</ul>\n</li>\n</ol>",
        "id": 392162196,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695230315
    },
    {
        "content": "<p>Thanks, after struggling for my experimental C++ FFI project trying to figure out what can be simplified in the lakefile, I've realized every line is helpful <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>  </p>\n<p>I will open a separate topic later about what I found (and still can't solve), really looking forward to better shared external library &amp; C++ standard library support in lake as well as other handy utilities for cloud release etc., and LeanInfer is an excellent milestone in the journey.</p>",
        "id": 392229569,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695260277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/392229569\">said</a>:</p>\n<blockquote>\n<p>Thanks, after struggling for my experimental C++ FFI project trying to figure out what can be simplified in the lakefile.</p>\n</blockquote>\n<p>If you have the time, please make issues for any missing features or bugs you have found along the way (that do not already have issues for them)!</p>",
        "id": 392238203,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695267644
    },
    {
        "content": "<p>This looks very exciting but I have naive questions. For concreteness, suppose I have fine-tuned a CodeT5 model in pytorch using huggingface trainer. Can I export to ONNX and run this from within Lean using LeanInfer? If not yet then in the foreseeable future?</p>",
        "id": 393397223,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1695793452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> It shouldn't be difficult to <a href=\"https://huggingface.co/docs/transformers/serialization\">convert the model from Hugging Face to ONNX</a>. However, tokenization might be a problem. The current model used by LeanInfer is from LeanDojo. It is based on ByT5, which does not need tokenization. For CodeT5, however, you would need to run the tokenizer in C++.  What tokenizer does CodeT5 use? Is there a way to call it in C++?</p>",
        "id": 393399775,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1695794776
    },
    {
        "content": "<p>Thanks. The way I use tokenizers for codet5 and many other models is the transformers command <br>\n<code>tokenizer = AutoTokenizer.from_pretrained(\"Salesforce/codet5-large\")</code></p>\n<p>I don't know what tokenizer is actually used. It would be ideal if the <code>AutoTokenizer.from_pretrained</code>is available so a lot of models can be used.</p>",
        "id": 393402616,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1695796078
    },
    {
        "content": "<p>It seems that the tokenizer can be exported to ONNX together with the trick in <a href=\"https://huggingface.co/blog/convert-transformers-to-onnx#4-how-can-i-convert-a-transformers-model-bert-to-onnx\">Convert Transformers to ONNX with Hugging Face Optimum</a> and maybe run via <a href=\"https://github.com/microsoft/onnxruntime-extensions\">onnxruntime-extensions</a> as ONNX doesn't define string related operators so it can't run tokenizers natively. But it also seems to be a long shot.</p>\n<p>I wonder why didn't LeanInfer choose <a href=\"https://github.com/ggerganov/llama.cpp\">llama.cpp</a> as its runtime, it actively supports many models out-of-box. And there's even a Lean binding <a href=\"https://github.com/bollu/llama.lean\">llama.lean</a> (last updated May, so it needs some polish).</p>",
        "id": 393418123,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695801709
    },
    {
        "content": "<p>Previously I thought finetuning LeanDojo based on Code Llama (particularly Phind-CodeLlama which achieves 73.8% pass@1 on HumanEval) or Star Coder series (particularly StarChat-Beta ) then run its quantized model with llama.cpp via Lean binding is the most natural way to go. But don't know if anyone is working towards this direction, and if not, I'm interested in the rationale.</p>\n<p>Lately I came across <a href=\"https://github.com/semorrison/lean-training-data\">lean-training-data</a> which seems to be a great addition to LeanDojo's data extraction tool. One could imagine more ways to curate the dataset from there.</p>",
        "id": 393421723,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695802873
    },
    {
        "content": "<p>(Aside, yes, sorry, I never wrote an announcement about the availability of <code>lean-training-data</code>, and I'm about to be offline for a few days. I can answer any questions about it next week.)</p>",
        "id": 393422010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695802963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> I wasn't aware of the possibility of converting a Hugging Face tokenizer to ONNX. I'll take a look. Thanks! Also, many tokenizers are based on tokenization libraries in C++, e.g., <a href=\"https://github.com/google/sentencepiece\">sentencepiece</a>. In principle, it's possible to use them in LeanInfer.</p>\n<p>However, currently, we don't see empirical evidence that larger models, such as LLaMA or StarCoder, are significantly better than the existing model LeanDojo uses (based on google/byt5-small).  We performed some preliminary experiments, but the results were inconclusive. I don't think we should integrate bigger and slower models into Lean (e.g., via LeanInfer) before validating their effectiveness in a more machine learning setting (e.g., LeanDojo).</p>",
        "id": 393550693,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1695840107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> It would be great if LeanInfer could be made a single interface for integrating a variety of models into Lean. I have no idea how much effort this is (and this is outside my competence) so I cannot tell if it is worth it in that sense. But in planning AI experiments it would be nice to know that if a model works well it can be practically used in Lean.</p>",
        "id": 393623424,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1695880647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/393550693\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> I wasn't aware of the possibility of converting a Hugging Face tokenizer to ONNX. I'll take a look. Thanks! Also, many tokenizers are based on tokenization libraries in C++, e.g., <a href=\"https://github.com/google/sentencepiece\">sentencepiece</a>. In principle, it's possible to use them in LeanInfer.</p>\n</blockquote>\n<p>Yes, indeed, many tokenizers are based on tokenization libraries in C++, and I've checked the source in llama.cpp, particularly <a href=\"https://github.com/ggerganov/llama.cpp/blob/master/examples/gptneox-wip/falcon-main.cpp\">how it handles Falcon tokenizer</a> by parsing vocab, and hyperparams of the tokenizer, then reuse a handful of common tokenize functions, it seems that all these can be extracted as a C++ library to handle the tokenization on a per-model basis. The porting time is equivalent or less than training on a new model anyway. So very feasible.</p>",
        "id": 393624926,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695881307
    },
    {
        "content": "<p>In the long term, we do want LeanInfer to support different models. I don't think there is any fundamental obstacle, though it will need some engineering effort.  Currently, it's of relatively low priority on LeanInfer's TODO list, as we plan to have some major improvements and new features coming next month. Nevertheless, we welcome collaboration if anyone wants to work in this direction.</p>",
        "id": 393626183,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1695881791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/393550693\">said</a>:</p>\n<blockquote>\n<p>However, currently, we don't see empirical evidence that larger models, such as LLaMA or StarCoder, are significantly better than the existing model LeanDojo uses (based on google/byt5-small).  We performed some preliminary experiments, but the results were inconclusive. I don't think we should integrate bigger and slower models into Lean (e.g., via LeanInfer) before validating their effectiveness in a more machine learning setting (e.g., LeanDojo).</p>\n</blockquote>\n<p>Observing no significant performance boost on larger models in simple setting like predicting premises and tactics solely based on local goals is somewhat expected, as this is effectively a simple recommendation algorithm, plus a little microscale organization about how to call the tactics with parameters, small models are sufficient in this case.</p>\n<p>Large models might be more expected to perform better when it can make use of informal Math corpus and its corresponding formal forms, the extra context when choosing a premise or a tactic instead of only local goals, and when it's expected to generate a full working proof and its informal walkthrough, given it can interact with Lean multiple rounds to adjust. So in retrospect, I'm actually expecting quite different things for the use of larger models.</p>",
        "id": 393626782,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695882078
    },
    {
        "content": "<p>At the moment it doesn't seem trivial to incorporate LeanInfer in regular mathlib development. You need to work on a branch in which you add a new dependency to mathlib, and then remove that dependency when you PR. But if the PR needs more refactoring, you maybe want to add the dep again, etc...<br>\nIs there a way that we can make this work more smoothly?</p>",
        "id": 393719185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695908005
    },
    {
        "content": "<p>and I assume adding the dep also invalidates the cache...</p>",
        "id": 393719562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695908068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> that's one of the main reasons I wanted something like I described here:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/Combining.20Envs/near/390758391\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Combining.20Envs/near/390758391</a></p>",
        "id": 393730391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695910108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/393626782\">said</a>:</p>\n<blockquote>\n<p>Large models might be more expected to perform better when it can make use of informal Math corpus and its corresponding formal forms, the extra context when choosing a premise or a tactic instead of only local goals, and when it's expected to generate a full working proof and its inform walkthrough, given it can interact with Lean multiple rounds to adjust. So in retrospect, I'm actually expecting quite different things for the use of larger models.</p>\n</blockquote>\n<p>Large language models have become more capable and continue to improve rapidly. I think we could use LLM to do something different, e.g. to rewrite or simplify proofs to make them more concise and readable, or to translate proofs into natural languages for better understanding, or even to explain difficult proofs to people and answer their questions. Interactive LLM systems would open up new possibilities for humans and machines to work together.</p>",
        "id": 393816601,
        "sender_full_name": "Min-Hsien Weng",
        "timestamp": 1695941834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/LeanInfer.3A.20Neural.20Network.20Inference.20in.20Lean.204/near/393719562\">said</a>:</p>\n<blockquote>\n<p>and I assume adding the dep also invalidates the cache...</p>\n</blockquote>\n<p>In the long run there are some ideas for this (i.e. <code>import for meta</code>).</p>\n<p>But in the meantime, I think we should strongly consider simply adding LeanInfer as a mathlib dependency. It would put an already useful tool into users hands, and give the LeanInfer authors much more feedback.</p>\n<p>My understanding is that the LeanInfer authors are very open to working with generic frameworks, and understand that Mathlib would not want to commit to being tied to LeanInfer in particular. (Of course, as LeanInfer will only be used while writing proofs, there won't be any ongoing dependency.)</p>",
        "id": 394403644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696246882
    },
    {
        "content": "<p>It's worth noticing that LeanInfer is not building on <a href=\"https://reservoir.lean-lang.org/packages/lean--dojo-LeanInfer\">reservoir</a>. The build process has been quite streamlined as an FFI project, so it's very possible to build with minor tweaks.</p>\n<p>Can't see the log details, but reservoir seems to be using <a href=\"https://github.com/leanprover/reservoir/blob/master/build.sh\">this script</a> to build it.</p>",
        "id": 396639977,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697280653
    },
    {
        "content": "<p>The error may be related to the C++ compiler toolchain used for building the project. Is there a way to access the error log or troubleshoot?</p>",
        "id": 396670955,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1697309317
    },
    {
        "content": "<p>I just realized the log is <a href=\"https://github.com/leanprover/reservoir/actions/runs/6503977219/job/17665301079#step:5:29\">here</a></p>",
        "id": 396700869,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697336582
    },
    {
        "content": "<p>I see segfaults in the log, so maybe it's related to <a href=\"https://github.com/leanprover/lean4/issues/2632\">this issue</a>. We can wait for this issue to be fixed and check later.</p>",
        "id": 396702079,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1697337358
    }
]