[
    {
        "content": "<p>Hello everyone! I am a new member here and in the Lean world in general. My name is Vir, a first-year at NYU Abu Dhabi. As part of a research project, my team is looking into the possibility of building a program, similar to GPT-f, but instead of finding better proofs, it's aimed at educating undergraduates in proofs. The way we wish to go about it is that the user enters the proof steps step-by-step, and our GPT-integrated program will translate it to Lean3 code, so that users don't have to learn the language and instead can understand everything through natural language. </p>\n<p>The issue I have now is that the dataset I'm looking for should mostly pertain to Propositional Logic, as we want to carry-out very limited testing to begin with. I want to build a dataset that has step-by-step natural language proofs followed by Lean3 proofs preferably only including propositional logic proofs. However, I am unable to find any such dataset. </p>\n<p>Is there a way to get only logic-based data from mathlib? Or maybe even how to find a decent amount of examples to build my own. Any suggestions and tips for the same would be greatly appreciated.</p>",
        "id": 375163061,
        "sender_full_name": "Vir Malhotra",
        "timestamp": 1689322353
    },
    {
        "content": "<p>Two resources that might be relevant to your interests: </p>\n<p><a href=\"https://djvelleman.github.io/HTPIwL/\">Dan Velleman's \"How to Prove it with Lean\"</a></p>\n<p><a href=\"https://youtu.be/tp_h3vzkObo\">Patrick Massot's IPAM talk</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"tp_h3vzkObo\" href=\"https://youtu.be/tp_h3vzkObo\"><img src=\"https://uploads.zulipusercontent.net/4446eceb03ccc3e7f0e817586d5c605657835fd3/68747470733a2f2f692e7974696d672e636f6d2f76692f74705f6833767a6b4f626f2f64656661756c742e6a7067\"></a></div><p>If you're interested only in propositional logic, I'm sure you could generate statements procedurally.</p>",
        "id": 375356153,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1689359893
    },
    {
        "content": "<p>I think you'll have the problem here that pure logic deductions are actually conventionally expressed symbolically, rather than in natural language. So there may not be much training data available for natural language logic reasoning.</p>",
        "id": 375357012,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689360149
    },
    {
        "content": "<p>Have you considered using a different \"toy model\"?</p>",
        "id": 375357078,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689360174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284997\">Zhangir Azerbayev</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Assistance.20for.20GPT-Based.20Lean.20research.20project/near/375356153\">said</a>:</p>\n<blockquote>\n<p>Two resources that might be relevant to your interests: </p>\n<p><a href=\"https://djvelleman.github.io/HTPIwL/\">Dan Velleman's \"How to Prove it with Lean\"</a></p>\n<p><a href=\"https://youtu.be/tp_h3vzkObo\">Patrick Massot's IPAM talk</a></p>\n<p>If you're interested only in propositional logic, I'm sure you could generate statements procedurally.</p>\n</blockquote>\n<p>Thank you!<br>\nYeah the only problem is that generating enough for a dataset on my own might be tough because we have a limited summer time span at the moment.</p>",
        "id": 375385356,
        "sender_full_name": "Vir Malhotra",
        "timestamp": 1689367496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Assistance.20for.20GPT-Based.20Lean.20research.20project/near/375357012\">said</a>:</p>\n<blockquote>\n<p>I think you'll have the problem here that pure logic deductions are actually conventionally expressed symbolically, rather than in natural language. So there may not be much training data available for natural language logic reasoning.</p>\n</blockquote>\n<p>That makes sense. The thing is the issue isn't particularly with natural language, as I can always get GPT to translate code into natural language and it does that pretty well. The issue is finding a lean dataset specifically for a single 'toy model' as I'm not sure how to do so. All the existing datasets are huge and diverse and might not be what we're looking for rn.</p>",
        "id": 375385659,
        "sender_full_name": "Vir Malhotra",
        "timestamp": 1689367599
    },
    {
        "content": "<p>I'll look into basing it on other topics though, thank you.</p>",
        "id": 375385755,
        "sender_full_name": "Vir Malhotra",
        "timestamp": 1689367629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284997\">Zhangir Azerbayev</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Assistance.20for.20GPT-Based.20Lean.20research.20project/near/375356153\">said</a>:</p>\n<blockquote>\n<p>Two resources that might be relevant to your interests: </p>\n<p><a href=\"https://djvelleman.github.io/HTPIwL/\">Dan Velleman's \"How to Prove it with Lean\"</a></p>\n<p><a href=\"https://youtu.be/tp_h3vzkObo\">Patrick Massot's IPAM talk</a></p>\n<p>If you're interested only in propositional logic, I'm sure you could generate statements procedurally.</p>\n</blockquote>\n<p>Just curious is Prof Massot's tool publicly available? The example he showed is quite interesting.</p>",
        "id": 375673142,
        "sender_full_name": "yufeng shen",
        "timestamp": 1689483803
    },
    {
        "content": "<p>It's not publicly available yet, but you can see a second talk by <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> with more details at <a href=\"https://www.msri.org/summer_schools/1021/schedules/33480\">https://www.msri.org/summer_schools/1021/schedules/33480</a></p>",
        "id": 375673251,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1689483868
    }
]