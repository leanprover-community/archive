[
    {
        "content": "<p>Mathlib has a lot of manual review in addition to automation like linters. This is essential for growing a math library aimed at users and has to limit the amount of code that gets in. <strong>For increasing the amount of training data in Lean, maybe there could be a different repository that grows much faster?</strong> One that's not meant for reading by humans but just as a dataset?</p>\n<p>For example,  it might have CC license and PR policy \"auto-merge everything if CI passes\". One could then add some more automation for de-duplicating things, sorting results by topic, auto-formatting, etc.</p>\n<p>Looking even further, one could also auto-webcrawl and pull in code snippets from Zulip (or elsewhere) when they contain an appropriate copyright/consent comment, and users on Zulip might get some option to \"allow harvesting all their code snippets on Zulip\". (I'm not sure if Zulip already assumes this consent, or if current AIs are trained on code from Zulip assuming no consent is necessary, not a lawyer, not legal advice, etc...)</p>",
        "id": 405726142,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701656523
    },
    {
        "content": "<p>There was <a href=\"https://github.com/leanprover-community/mathzoo\">mathzoo</a> but it didn't gain much traction. I guess everyone is free to scrape public Lean repos on GitHub, and <a href=\"https://arxiv.org/abs/2308.07124\">OctoPack</a> contains a decent amount of Lean data. <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Morph.20Prover.20v0.207B/\">Morph Prover</a> already trains on Zulip data (see <a href=\"https://morph.so/blog/the-personal-ai-proof-engineer/\">blog post</a>).</p>",
        "id": 405729669,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701658105
    },
    {
        "content": "<p>I hadn't heard of Mathzoo, thanks for pointing it out!. However, it currently doesn't seem to have CI and still feels like it's \"aimed at humans\", by asking for README's and explicitly encouraging to add statements as <code>axiom</code>s. I'm actually surprised it doesn't have CI. Is it due to cost? Or just nobody set one up yet? Figuring out a good way that \"anyone can easily set up CI for a project that depends on just Mathlib\" is a good thing in any case, isn't it?</p>",
        "id": 405730562,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701658505
    },
    {
        "content": "<p>I'm sure it's because no one set one up yet</p>",
        "id": 405743538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701664518
    },
    {
        "content": "<p>Re: \"aimed at humans\", who do you expect to put content in the repo?</p>",
        "id": 405743555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701664539
    },
    {
        "content": "<p>I also don't really understand your point. It doesn't ask for a readme but it does ask for some provenance information regarding the problem, which I think is a reasonable ask for any dataset</p>",
        "id": 405743659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701664632
    },
    {
        "content": "<p>AFAICT the only READMEs in mathzoo are for entire formalization collections, not for individual files</p>",
        "id": 405743762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701664710
    },
    {
        "content": "<p>As for adding statements as <code>axiom</code>, this is important to be able to make claims that follow from complex facts whose proof is out of scope for the problem in question. Without this you would only be able to talk about things near the foundations</p>",
        "id": 405743847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701664779
    },
    {
        "content": "<p>As far as adding other datasets like Zulip, I think that would be fine although you will have difficulty making most of it compile, many posts are context dependent (so getting imports right will be difficult) and it is normal to post things that don't compile here (because most MWEs have errors in them, that's the point). Regarding general web crawl, that sounds like a major legal issue, but all the cool kids are doing it anyway... I'd advise against it.</p>",
        "id": 405744322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701665163
    },
    {
        "content": "<p>I guess a serious obstacle to having CI on mathzoo might actually be the difficulty of incompatible Mathlib and Lean versions used in different gems?</p>",
        "id": 405744879,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701665588
    },
    {
        "content": "<p>well, the fact that it's in lean 3 is the main obstacle</p>",
        "id": 405745008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701665664
    },
    {
        "content": "<p>The situation with multiple lean versions is acknowledged in the README, I think the idea is to run multiple lean versions to compile them</p>",
        "id": 405745047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701665700
    },
    {
        "content": "<p>certainly that is another confounding factor when scraping zulip, posts almost never come with a <code>lean-toolchain</code></p>",
        "id": 405745095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701665744
    },
    {
        "content": "<p>As an aside, how hard is it to set up CI for a Lean4 project? I just tried (blind copy-paste) the script from <a href=\"https://leanprover-community.github.io/ci.html\">community docs</a> and got an error: </p>\n<blockquote>\n<p>error: toolchain 'leanprover/lean4:v4.3.0' does not have the binary <code>/github/home/.elan/toolchains/leanprover--lean4---v4.3.0/bin/leanpkg</code></p>\n</blockquote>",
        "id": 405745181,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701665782
    },
    {
        "content": "<p>That's <a href=\"https://github.com/leanprover/lean4/pull/2872\">lean4#2872</a></p>",
        "id": 405795755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701686323
    },
    {
        "content": "<p>Does that mean that there are no instructions on that website on how to set up CI for Lean4 projects? Are there instructions elsewhere?</p>",
        "id": 405806885,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701690396
    },
    {
        "content": "<p>There are no instructions for setting up CI for lean 4 projects on the community website that I'm aware of. Copying the CI used by some existing lean 4 project, such as <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/.github/workflows/push.yml\">https://github.com/leanprover-community/flt-regular/blob/master/.github/workflows/push.yml</a> seems a good way to start</p>",
        "id": 405829738,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701698315
    },
    {
        "content": "<p>You probably want to delete all steps relating to docs and blueprint to start</p>",
        "id": 405829788,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701698336
    },
    {
        "content": "<p>IMHO having more Lean code with lower quality threshold is not going to help training. Selected and (semi-auto-)annotated Lean data with higher quality is what's really helpful here.</p>",
        "id": 405832602,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701699099
    },
    {
        "content": "<p>Compared to what I'm generally seeing people train/finetune LLMs on, \"code that compiles\" seems like a very high quality threshold</p>",
        "id": 405833017,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701699223
    },
    {
        "content": "<p>Not exactly in the area of ITP. To name a few quality-related directions:</p>\n<ol>\n<li>Mathlib is mostly lack of comments to its informal counterparts, it's an obstacle for informal-to-formal tasks or vice versa;</li>\n<li>Zulip <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> months ago (or any code without code review) might be already non-idiomatic code, which could create more frustration for newcomers using the AI for self-teaching; </li>\n<li>Mathlib proofs might be highly golfed, it's hard for LLMs to reason literally based on such highly compressed information;</li>\n<li>Extracting goals from Lean code is existing work, but trying different combinations of tactics using RL and produce more variants of the same proof (and their tactic states) for LLM to truly make use of what ITP can teach about the internals of a proof is not seen yet.</li>\n</ol>",
        "id": 405838314,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701700725
    },
    {
        "content": "<p>Also, the work to make sure a bunch of Lean code to compile is actually non-trivial effort as there are many subtleties involved in non-trivial proofs that depends on the moving parts of Lean/Std/Mathlib, much more than just setting up a CI.</p>\n<p>Instead of trying to create a hub to host these code while there is little to no incentive for humans to contribute, if you are simply looking for more Lean data outside Mathlib, you might just start with the emerging repos marked with <code>lean4</code> or using <code>lean</code> language, which is more decentralized and guaranteed to thrive.</p>",
        "id": 405838323,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701700727
    },
    {
        "content": "<p>Particularly, <a href=\"https://reservoir.lean-lang.org/\">reservoir</a> will set up CI for all such Lean 4 projects and check if they pass for the latest Lean version. People will also be encouraged to keep it green as there would be benefits like easier package discovery, built binary cache, hosted doc-gen4 documents etc.</p>",
        "id": 405839796,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701701115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Utensil's message above made me check the current state of reservoir and I was very surprised to see Mathematics in Lean with a big red cross suggesting it is currently broken. Following <a href=\"https://reservoir.lean-lang.org/packages/leanprover--community-mathematics_in_lean\">the link</a> suggests reservoir complains MIL doesn't build with v4.4.0-rc1, which completely expected for a project whose current toolchain is leanprover/lean4:v4.2.0-rc4. I understand you wish to indicate which repo tracks monthly Lean releases, but I think this big red cross is a bit too much and doesn't convey the relevant message.</p>",
        "id": 405841232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701701546
    },
    {
        "content": "<p>More generally the landing page of reservoir is <em>full</em> of those red crosses and I think this is both unfair and very bad to communicate what is going on with Lean.</p>",
        "id": 405841471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701701616
    },
    {
        "content": "<p>Yes, this is a known issue, it's terrible PR to have all those red crosses</p>",
        "id": 405842461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701701917
    },
    {
        "content": "<p>Meanwhilst:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mil</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"n\">update</span> <span class=\"n\">mathlib</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">leanOptions'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">field</span> <span class=\"n\">of</span> <span class=\"kd\">structure</span> <span class=\"bp\">'</span><span class=\"n\">Lake.PackageConfig'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"n\">repository</span> <span class=\"bp\">'./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib'</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"bp\">'</span><span class=\"mi\">19096</span><span class=\"n\">ec3fc6f290dc088f7f3ffd6318d4a0bd93d'</span>\n<span class=\"bp\">=&gt;</span> <span class=\"n\">Operation</span> <span class=\"n\">failed.</span> <span class=\"n\">Exit</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">git</span> <span class=\"n\">fetch</span> <span class=\"n\">origin</span>    <span class=\"bp\">#</span> <span class=\"k\">in</span> <span class=\"n\">directory</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">impossible</span> <span class=\"n\">d'acc</span><span class=\"bp\">é</span><span class=\"n\">der</span> <span class=\"bp\">à</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/'</span> <span class=\"o\">:</span> <span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">connect</span> <span class=\"n\">to</span> <span class=\"n\">github.com</span> <span class=\"n\">port</span> <span class=\"mi\">443</span> <span class=\"n\">after</span> <span class=\"mi\">130579</span> <span class=\"n\">ms</span><span class=\"o\">:</span> <span class=\"n\">Connexion</span> <span class=\"n\">termin</span><span class=\"bp\">é</span><span class=\"n\">e</span> <span class=\"n\">par</span> <span class=\"n\">expiration</span> <span class=\"n\">du</span> <span class=\"n\">d</span><span class=\"bp\">é</span><span class=\"n\">lai</span> <span class=\"n\">d'attente</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">git</span><span class=\"bp\">`</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">code</span> <span class=\"mi\">128</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span><span class=\"o\">,</span> <span class=\"n\">falling</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">plain</span> <span class=\"bp\">`</span><span class=\"n\">lean</span> <span class=\"c1\">--server`</span>\n</code></pre></div>\n<p>TL;DR: reservoir <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>  lake <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span></p>",
        "id": 405842972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701702046
    },
    {
        "content": "<p>Instead of showing whether the package builds with the latest lean, why not show the latest lean version that can build the package?</p>",
        "id": 405843094,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1701702073
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Invalid.20lake.20configuration/near/405630149\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Invalid.20lake.20configuration/near/405630149</a></p>",
        "id": 405843206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701702098
    },
    {
        "content": "<p>reservoir aims to keep the builds up-to-date, but maybe for the current status, it should compile with the declared toolchain, and if the declared toolchain compiles but not the latest toolchain, it's better to be a green <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>  with an <span aria-label=\"info\" class=\"emoji emoji-2139\" role=\"img\" title=\"info\">:info:</span> to indicate it's better to be upgraded.</p>",
        "id": 405843447,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701702145
    },
    {
        "content": "<p>Of course, this is what the Lean 3 analogue of that page did.</p>",
        "id": 405843863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701702258
    },
    {
        "content": "<p>is there a lean 3 analogue of reservoir?</p>",
        "id": 405844167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701702352
    },
    {
        "content": "<p>There was a web page on the community website which listed projects together with information about the latest compatible version of Lean.</p>",
        "id": 405844424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701702424
    },
    {
        "content": "<p>As far as I can tell this is strictly more than the current state of reservoir.</p>",
        "id": 405844491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701702442
    },
    {
        "content": "<p>is that still available somewhere?</p>",
        "id": 405844511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701702448
    },
    {
        "content": "<p>Sure: <a href=\"https://leanprover-community.github.io/lean3/lean_projects.html\">https://leanprover-community.github.io/lean3/lean_projects.html</a></p>",
        "id": 405844686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701702491
    },
    {
        "content": "<p>reservoir is meant to do much more in the long run. I think the main issue here is that the current state is public. It should be hidden somewhere until it improves to minimally usable version.</p>",
        "id": 405844942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701702577
    },
    {
        "content": "<p>There was some discussion a few months ago about how to show this kind of information on the reservoir website (the front page / browsing page and also the project pages). We talked about having a dropdown to select your current version or force the latest version. A matrix would work too but it's difficult to scale</p>",
        "id": 405845523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701702738
    },
    {
        "content": "<p>I think Mac is aware that the current display is suboptimal, and last I heard he was working on it this week, so if you have concrete suggestions regarding the site design you should suggest them</p>",
        "id": 405845763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701702795
    },
    {
        "content": "<p><a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Making.20more.20training.20data/near/405843447\">https://leanprover.zulipchat.com/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Making.20more.20training.20data/near/405843447</a> is clearly strictly better than the current state.</p>",
        "id": 405847557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701703256
    },
    {
        "content": "<p>There should probably be an issue for this</p>",
        "id": 405847874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701703342
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/reservoir/pull/2\">leanprover/reservoir#2</a></p>",
        "id": 405850572,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701704132
    },
    {
        "content": "<p>Sorry, in retrospect, the issue title was written like a PR title.</p>",
        "id": 405851400,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701704351
    },
    {
        "content": "<p>As Mario said, I am working on Reservoir until the start of my Christmas vacation. Thus, please feel free to send me feature requests or report any issues )GitHub is best, but I am happy to discuss on Zulip as well)!</p>",
        "id": 405861977,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701706744
    },
    {
        "content": "<blockquote>\n<p>We talked about having a dropdown to select your current version or force the latest version. A matrix would work too but it's difficult to scale</p>\n</blockquote>\n<p>Could be a list with just two columns (the project name and latest compatible Lean version), ranked by the Lean version, which probably encourages the repo authors to keep up to date.</p>",
        "id": 405879375,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701711177
    }
]