[
    {
        "content": "<p>Hello everyone,</p>\n<p>I'm new here, and I've been going through several theorem proving studies, such as GPT-F, Curriculum Learning, Hyper Tree Search, Autoformalization, Thor, DSP, and MiniF2F. These works use either Isabelle or Lean.</p>\n<p>Understanding both Lean and Isabelle appears to be a steep task, and I believe focusing on one initially would be a better approach. Even though this group is Lean-oriented, I'd appreciate your advice on whether to begin with Lean or Isabelle. Here are some aspects I'm contemplating:</p>\n<p>1  Community support and activity: I anticipate I'll have many questions as a beginner. While I don't have much exposure to the Isabelle community, this Lean group is quite active and supportive.<br>\n2  Compatibility of the tool with LLM for theorem proving.<br>\n3  Ease of learning the tool.<br>\n4  Future development of the tool: I'm interested in a tool with an expanding, well-maintained community.</p>",
        "id": 358050882,
        "sender_full_name": "Dongwei Jiang",
        "timestamp": 1683963465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"616750\">@Dongwei Jiang</span> Welcome! Maybe this talk by Jason will help you get a bit of an overview <a href=\"https://www.youtube.com/watch?v=P5ew0BrRm_I&amp;pp=ygUKamFzb24gcnV0ZQ%3D%3D\">https://www.youtube.com/watch?v=P5ew0BrRm_I&amp;pp=ygUKamFzb24gcnV0ZQ%3D%3D</a> ?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"P5ew0BrRm_I\" href=\"https://www.youtube.com/watch?v=P5ew0BrRm_I&amp;pp=ygUKamFzb24gcnV0ZQ%3D%3D\"><img src=\"https://uploads.zulipusercontent.net/d8345cc9eb01cf374bb8439e8efa5e8f497cea84/68747470733a2f2f692e7974696d672e636f6d2f76692f50356577304272526d5f492f64656661756c742e6a7067\"></a></div>",
        "id": 358051791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683963869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20or.20Isabelle.3A.20Which.20Theorem.20Proving.20Tool.20for.20LLM.3F/near/358051791\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"616750\">Dongwei Jiang</span> Welcome! Maybe this talk by Jason will help you get a bit of an overview <a href=\"https://www.youtube.com/watch?v=P5ew0BrRm_I&amp;pp=ygUKamFzb24gcnV0ZQ%3D%3D\">https://www.youtube.com/watch?v=P5ew0BrRm_I&amp;pp=ygUKamFzb24gcnV0ZQ%3D%3D</a> ?</p>\n</blockquote>\n<p>Hi Johan, thanks for pointing me to this video, it's very informative and interesting :)  One of my main impression after watching the video is it's hard to compare results in different systems, and there are lots of factors that make fairly comparing the results in the same system very difficult...</p>\n<p>However, I'm still seeking advice regarding the choice of ATP to use alongside LLM.  Any additional advice would be appreciated</p>",
        "id": 358125918,
        "sender_full_name": "Dongwei Jiang",
        "timestamp": 1683990799
    },
    {
        "content": "<p>Here are my general thoughts.  Ideally we would have good and interchangeable interfaces for all the major ITPs, including Lean, Isabelle, and Coq.  But, it rarely works that well.  Here are some things to think about:</p>\n<ol>\n<li>Library size.  Coq has the largest amount of code, but it is also spread across numerous projects on different versions of Coq, and using different tactic languages.  Isabelle/HOL AFP is probably the largest unified library.  I think Lean's mathlib will soon (in &lt; 2 years) be larger, and it is growing quite rapidly (well, before the port).</li>\n<li>Tools.  All the papers you mentioned for Isabelle use tools developed by <span class=\"user-mention\" data-user-id=\"258175\">@Albert Jiang</span> and he would be a great person to talk to.  Having this set of tooling has made it easy for other folks (mostly Google, but also Meta and some academic groups) to try new ideas, and compare results in a sort of standard way.  Since Albert is also on all these papers, I don't know if they tools are easy to use without his assistance.  Lean has an assorted collection of tools for both Lean 3 and Lean 4.  Honestly, I think a lot of researchers have been waiting for Lean 4 before they do too much work in Lean, but at the same time Lean 4's meta-programming will make it easy to build new tools and customize existing ones.  Indeed, a number of researchers have already gotten started on this.  Coq also has some tools, including the CoqGym project and SerAPI (which is more low level but powerful).  A lot of papers have been written using and extending models based on the CoqGym interface for a lot of papers.</li>\n<li>LLM support.  The world of AI is moving quickly.  Previous papers were all about predicting the next tactic.  While GPT-f and Hyper Tree Proof Search do use (medium size) LLMs, they still do the next tactic thing.  The more recent papers have played around with completely different paradigms like predicting whole proofs or proof sketches in one go with very large language models that can't easily be fine tuned.  Or just predicting premises instead of tactics like in MagnusHammer.  Or focusing on other tasks like Auto-formalization.  So it is not even clear how useful the existing tools will be in that new paradigm.  It may be better to just know how to work with Lean/Coq/Isabelle meta-programmatically to quickly apply new ideas.  Indeed one of the newest Isabelle papers, Baldur, uses the Minerva LLM to generate whole proofs, and I'm not even sure if they use Albert's tooling.  They might just make their own.  (I should really check on this.  Do you know <span class=\"user-mention\" data-user-id=\"258175\">@Albert Jiang</span>?)</li>\n<li>Meta-programming.  If the existing tools don't work for you, then Meta-programming is the best bet.  Isabelle and Coq do meta-programming in OCaml (although with Coq you can get pretty far with the SerAPI interface and tools built on top of it).  Lean has it's own (lean based) metaprogramming language that people really like.  I think the best symbiosis is to get a metaprogramming expert to help you with your work (even if it is just helping you get started with existing tools).</li>\n<li>Community support.  I think Isabelle, Coq, and Lean all have people actively working on theorem proving and tools.  I think the Lean work is more behind, but also more in the open, with Zulip's streams like this one.  But other work is happening behind the scenes in all three.</li>\n<li>Benchmarks.  It is hard to build a new tool and benchmark, because you can't compare to existing work.  So your 40% and their 60% aren't comparable at all.  This is one of the largest problems in this field.  For Isabelle, there are two good benchmarks.  One is MiniF2F and the other is testing on a held-out part of the Isabelle AFP using the same setup as in the other papers.  (Again, this is where it helps to plug into existing tooling.)  There is also a Mini-F2F benchmark for Lean and that is what a lot of Lean papers use.  While one can test on Lean's mathlib, that is hard, since mathlib changes so much and so fast.  For Coq, there is no MiniF2F benchmark and I doubt there will be anytime soon.  But one can still test on library theorems, either new projects not used for training, or held out theorems/files not seen during training.  Also, given LLMs ability to memory the whole internet, data contamination is becoming a major problem and we don't have a good solution for it (or even a clear sense of how much it matters for our benchmarks).</li>\n</ol>",
        "id": 358126983,
        "sender_full_name": "Jason Rute",
        "timestamp": 1683991244
    },
    {
        "content": "<p>Dongwei and I had some brief email exchanges. Would be great to talk after Neurips!</p>\n<ol>\n<li>It’s not easy to use Isabelle tooling at the moment without my assistance at the moment. I wrote PISA right before my PhD starts and never had the time to maintain it afterwards - three year PhD programmes don’t reward software maintenance. But! Wenda Li and I have an intern now working on making it accessible and RL friendly. So it might change quickly.</li>\n<li>I’m &gt;99% sure that Baldur uses my Isabelle tooling, with modifications for Google’s infra.</li>\n</ol>",
        "id": 358128893,
        "sender_full_name": "Albert Jiang",
        "timestamp": 1683991913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20or.20Isabelle.3A.20Which.20Theorem.20Proving.20Tool.20for.20LLM.3F/near/358126983\">said</a>:</p>\n<blockquote>\n<ol>\n<li>Library size.  Coq has the largest amount of code, but it is also spread across numerous projects on different versions of Coq, and using different tactic languages.  Isabelle/HOL AFP is probably the largest unified library.  I think Lean's mathlib will soon (in &lt; 2 years) be larger, and it is growing quite rapidly (well, before the port).</li>\n</ol>\n</blockquote>\n<p>Some statistics on the Isabelle side: the standard library has about .4M LoC, the AFP has 3.8M LoC, and the seL4 project has 1.5M LoC. Admittedly, proofs in Isabelle are a combination of logic, algorithm/program verification and math.</p>",
        "id": 358152376,
        "sender_full_name": "Wenda Li",
        "timestamp": 1684002871
    },
    {
        "content": "<p>Yeah, I should be more careful with my words.  On second thought, as I look at the statistics closer, I’m not sure my 2 year prediction will hold. Isabelle and Coq will probably be larger sources of theorem proving data than Lean for a while now if one goes just by numbers theorems, proof state-tactic pairs, or lines of code.</p>",
        "id": 358172164,
        "sender_full_name": "Jason Rute",
        "timestamp": 1684016373
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>, Thanks for your detailed an informative answer! Your insights on the library size, LLM support, meta-programming, and community support were truly helpful and eye-opening. As for the tools, I've been experimenting with Albert's Isabelle repo and Jesse's Lean repo. They're admittedly challenging, but I'm optimistic about their future improvements.</p>\n<p>And from your answer, it seems like there is a near tie between Isabelle and Lean. It looks like I'll need to dive into the code and explore more, especially on the meta-programming aspect, to make a decision...</p>\n<p>Also <span class=\"user-mention\" data-user-id=\"258175\">@Albert Jiang</span> , Thank you so much for your project! I've been following your suggestion and I'm current in the process of building AFP (the current ATP version is 2023 and I think it's already taking more than 150 hours...)</p>",
        "id": 358210691,
        "sender_full_name": "Dongwei Jiang",
        "timestamp": 1684047781
    },
    {
        "content": "<p>Has anyone looked into fine tuning an open LLM with something like Lora? It could be interesting to retrain the encoder to handle more Lean friendly tokens.</p>",
        "id": 358562995,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1684181786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572379\">Lev Stambler</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20or.20Isabelle.3A.20Which.20Theorem.20Proving.20Tool.20for.20LLM.3F/near/358562995\">said</a>:</p>\n<blockquote>\n<p>Has anyone looked into fine tuning an open LLM with something like Lora? It could be interesting to retrain the encoder to handle more Lean friendly tokens.</p>\n</blockquote>\n<p>I think currently the question is less how to finetune language models and more how to put them into an interesting proving loop</p>",
        "id": 358566027,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1684182805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572379\">Lev Stambler</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20or.20Isabelle.3A.20Which.20Theorem.20Proving.20Tool.20for.20LLM.3F/near/358562995\">said</a>:</p>\n<blockquote>\n<p>Has anyone looked into fine tuning an open LLM with something like Lora? It could be interesting to retrain the encoder to handle more Lean friendly tokens.</p>\n</blockquote>\n<p>I know it's a bit off the topic,  but I'm currently working on fine-tuning LLAMA using <a href=\"https://github.com/tloen/alpaca-lora\">alpaca-lora</a> on Lean data from PACT paper.  I'll be sure to provide more updates once I make some significant progress.</p>",
        "id": 359917249,
        "sender_full_name": "Dongwei Jiang",
        "timestamp": 1684596914
    }
]