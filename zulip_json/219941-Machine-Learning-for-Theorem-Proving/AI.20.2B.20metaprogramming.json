[
    {
        "content": "<p>Let me know if there's already discussion on this, I'm new to the Lean community. (Hi!)</p>\n<p>How do folks expect Lean's metaprogramming capabilities will be pros and cons to automation? For instance, I expect this extra power to help integrate automation capabilities into the heart of Lean's capabilities, but to hinder the ability for LLMs to reason about Lean code that involves custom tactics/syntax/etc. What are some concrete pros and cons? And are there changes to Lean's metaprogramming capabilities that could make Lean more accessible to automation?</p>\n<p>FYI <span class=\"user-mention\" data-user-id=\"587286\">@Nada Amin</span>, whose question I'm paraphrasing here.</p>",
        "id": 398759788,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1698351068
    },
    {
        "content": "<p>When using reinforcement learning or similar techniques, I expect \"cheat detection\" to play a big role. D. J. Bernstein's recent <a href=\"https://cr.yp.to/papers/pwccp-20230909.pdf\">paper, pdf</a> also mentions this (chapter 4).</p>\n<p>I write \"cheat detection\" instead of \"soundness\" because it's not only about the underlying type theory or the kernel but about \"actually not being able to prove <code>False</code> against the checker that gives feedback to the language model\". </p>\n<p>Assuming that progress in machine learning will continue and absent massive capital that cound influence the direction there, I expect to see significant progress in the near future by using and building upon existing models and making sure the checker faced by any training routine isn't cheated. </p>\n<p>Metaprogramming certainly should make this easier and potentially increase both the ability of humans to help models be effective by manually \"providing tools that directly address systems' weaknesses\" as well as perhaps allowing models to bootstrap themselves. It also of course enables effective use of these tools by humans.</p>\n<p>I don't expect metaprogramming or the use of tactics to significantly hinder progress or be hard to deal with. It reduces the necessary context length and actually makes proofs easier to understand \"heuristically\". I expect this to be true both for humans and for language models. The ability to use tactics makes proving things easier, which is also true for both humans and language models.</p>",
        "id": 398774502,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698358056
    },
    {
        "content": "<p>It is an interesting question.  I think in many ways I hold out more hope than I used to.  With LLMs and other foundation models, they are really flexible and have a better chance of learning from new code than more rigid methods.  Maybe in the near future LLMs (or other models) will be able to, say, read the code of a new tactic.  But if not, hopefully, they will (through long contexts, retrieval, and other methods) be able to see how new definitions, new tactics, new code, etc are used and documented.  This will let them adapt.  Further, methods like reinforcement learning and continual fine-tuning are also options to keep a model up-to-date with new information.</p>",
        "id": 398789202,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698366915
    },
    {
        "content": "<p>Also, even if a model can't use a new tactic, is it necessary for it to do so?  A new tactic may only be a convenience?</p>",
        "id": 398789214,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698366923
    },
    {
        "content": "<p>Also, speaking of new tactics, what if a model could write its own tactics.  Say it finds a pattern in proofs, and then uses Lean's metaprogramming to write a custom tactic.  This would really be the holy grail of machine learning, i.e. machine learning methods that learn fast, simple, and explainable algorithms.   We are nowhere near that, as far as I can see, but it is still a goal to keep in mind.</p>",
        "id": 398789220,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698366929
    },
    {
        "content": "<p>I should also caution that AI ≠ LLMs.  I would even say AI ≠ neural networks.  LLMs are great.  They are powerful, and most importantly, they have hit this point where there is a critical mass of tools and practitioners to make them easy to use.  However, it is not at all clear that LLMs are state-of-the-art in ITP-based theorem proving, including Lean, Coq, Isabelle, and HOL Light.  The problem is that non-LLM approaches and LLM approaches have not been properly compared against each other.  Case in point, the main non-LLM AI tools are in HOL Light and Coq (including the HOList framework, ProverBot9001, and the various CoqGym solvers) and the main LLM tools are in Isabelle and Lean.  This makes it really difficult to compare.  Also, LLM tools require a lot more resources.  The LLM results in papers wouldn't be nearly as good on a laptop, and if run on a server they would be prohibitively expensive when doing full-scale proof search.  While the non-LLM solvers often are benchmarked on a CPU.</p>",
        "id": 398789233,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698366936
    },
    {
        "content": "<p>Finally, non-LLM tools (or even LLM tools with custom architectures) have an ability that off-the-shelf LLM tools don't have, which is to interact with different forms of data, like the underlying tree structure of the prof terms or all the theorems in the environment.  This is where Lean's metaprogramming will shine, in that tools (both LLMs and non-LLMs) can be hooked up not only to the user-facing Lean code but also to the full internals of Lean.  The sky is the limit to what creative people can do with that.  So I think in the end metaprogramming is a win since it lets us quickly build tools to interact with AI agents.</p>",
        "id": 398789253,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698366943
    },
    {
        "content": "<p>As for what is needed, I'm at this stage now where I don't think it needs to be determined in advance.  As people build things they will get to a block in the road.  When working on PACT one block was that we didn't have a nice way inside the tactic monad to run tactic commands provided as text, like \"simp [nat.foo_bar]\".  Ed Ayers stepped in and modified Lean 3 (community edition) at the time.  Now with Lean 4, I keep hearing stories of the developers rapidly improving Lean for power users with special needs, and it is clear the developers support AI.  <em>If you (try to) build it, they will come (help you implement the tools you need).</em></p>",
        "id": 398790210,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698367383
    },
    {
        "content": "<p>Clear gains from MetaProgramming is the ease of integration and of data extraction. For example it is efficient to filter outputs to only ones that elaborate (i.e., compile). Also it is easy to extract various kinds of data. For instance, by default Lean suppresses the types of many variables, but we can write custom code to output these.</p>",
        "id": 398801179,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1698372779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"662442\">@Daniel Windham</span> On later thought I do think my first response might have been a bit flippant.  As I think about it more having a more expressive metaprogramming language can present challenges, and it is possible we are already seeing those challenges in Lean 4.  A large many approaches so far in this space have been along the lines of tactic predictor plus tree search.  This works ok, but only if the tactics are relatively atomic as they often are in Lean 3.  But already in Lean 4, we see tactics like the new <code>induction ... with</code> tactic which can turn a long and complicated induction proof into a one-tactic proof where that one tactic is large and composed of multiple tactics inside.  For example, a theorem in Lean core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">div_le_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongInductionOn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ind</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- Note: manual split to avoid Classical.em which is not yet defined</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">hKN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"n\">hSub</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sub_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">hK</span> <span class=\"n\">hKN</span><span class=\"o\">)</span> <span class=\"n\">hK</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">hSub</span>\n      <span class=\"n\">exact</span> <span class=\"n\">succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">this</span> <span class=\"n\">hSub</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now, <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> once pointed out that this can be decomposed into separate tactics using something like <code>induction n using Nat.strongInductionOn with  | ind n ih =&gt; ?_</code> but of course that would lead to messier final output.  I don't know how <span class=\"user-mention\" data-user-id=\"409334\">@Sean Welleck</span> or <span class=\"user-mention\" data-user-id=\"584504\">@Kaiyu Yang</span> have handled this with Lean 4 so far.  It might so far be less of an issue since Mathlib is largely a port of Lean 3 code.</p>",
        "id": 399081056,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698525544
    },
    {
        "content": "<p>But even in Lean 3 it wasn't uncommon to see long <code>calc</code> tactics, tactic combinators like <code>try</code> and <code>repeat</code> and <code>;</code> and term proofs inside tactic proofs inside term proofs.  Proofs are much more messy than the simple model of a linear proof that these tree search methods often suppose.  And even if you can always fall back to thinking of a complicated nested tactic as one tactic, it doesn't give the model much opportunity to backtrack.  Of course, this is actually the issue with code generation as well which doesn't have this convenient notion of a tactic or a proof state.  So I think we will see more mergers of ideas in code generation and proof generation.  I mean, only half of what Lean users do is proof writing anyway.   A lot of it is structuring the overall code including definitions, lemmas, and writing/using APIs.</p>",
        "id": 399081061,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698525552
    },
    {
        "content": "<p>As for what is needed in metaprogramming I think it is two things.  I don't know if they are already in Lean.  One, we need the ability to store additional meta information alongside declarations in the environment.  For example, lots of machine learning algorithms assign vector embeddings to theorems for the purpose of premise and argument selection.  To make this practical, one needs to be able to calculate these embeddings on the fly and store them.  It isn't obvious even where or how they should be stored, but it might make sense to put them in the Lean environment.  And even if not, if there was a standard mechanism, it would help make this sort of research (which I think is largely academic) practical.</p>",
        "id": 399081067,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698525559
    },
    {
        "content": "<p>Second, I think we need ways to simultaneously interact with the code of a file as well as the Lean internals (like the proof state, but also other things in the environment that the user doesn't typically see).  I think this is already largely possible through the new language server, but it would be good to have more examples for researchers.</p>",
        "id": 399081070,
        "sender_full_name": "Jason Rute",
        "timestamp": 1698525562
    }
]