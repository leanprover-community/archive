[
    {
        "content": "<p>I'm having trouble getting well-founded induction (with <code>decreasing_by</code>) working with <code>ENat</code>. Here is a MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ENat.Basic</span>\n\n<span class=\"c1\">-- this easy lemma is provable by well-founded induction</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">wf1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">WellFounded.induction</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"n\">IsWellFounded.wf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">h'</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">((</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">hpos</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_pos</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hPt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hpos</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hPt</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">_</span> <span class=\"n\">ht</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Same lemma statement; this time, we try to prove it by invoking itself on a smaller value.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">wf2</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">((</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_pos</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hPt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"c1\">-- (`ht : t &lt; n`) is in context, so we should be able to invoke wf2 on `t`</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hPt</span> <span class=\"o\">(</span><span class=\"n\">wf2</span> <span class=\"n\">P</span> <span class=\"n\">h0</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- doesn't work - so explicitly give `termination_by` and `decreasing_by`</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"c1\">-- goal should simplify to `t &lt; n`, but instead simplifies to `False` ??</span>\n</code></pre></div>\n<p>It seems that the well-founded relation is unfolding to something trivial rather than <code>&lt;</code> as it should; but I don't understand why.</p>",
        "id": 374255499,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689079931
    },
    {
        "content": "<p>The issue is that the well-founded relation that's inferred by <code>termination_by</code> is the wrong one, autogenerated using <code>SizeOf</code>. Using the correct measure solves the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ENat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.WithTop</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">wf2</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">((</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_pos</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hPt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hPt</span> <span class=\"o\">(</span><span class=\"n\">wf2</span> <span class=\"n\">P</span> <span class=\"n\">h0</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by'</span> <span class=\"n\">instWellFoundedRelationWithTopNat</span>\n<span class=\"n\">decreasing_by</span> <span class=\"o\">{</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ht</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 374278660,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689084204
    },
    {
        "content": "<p>Thank you! I didn't know about <code>termination_by'</code>; are there docs for the primed version anywhere?</p>",
        "id": 374308929,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689089590
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20termination_by/near/368743246\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Help.20with.20termination_by/near/368743246</a> (and continuing discussion) is relevant.</p>",
        "id": 374310929,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689089870
    },
    {
        "content": "<p>You should add a <code>WellFoundedRelation ENat</code> instance, then this will work as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ENat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.WithTop</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">ENat</span> <span class=\"n\">where</span>\n  <span class=\"n\">rel</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">IsWellFounded.wf</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wf2</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">((</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_or_pos</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_ht</span><span class=\"o\">,</span> <span class=\"n\">hPt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hPt</span> <span class=\"o\">(</span><span class=\"n\">wf2</span> <span class=\"n\">P</span> <span class=\"n\">h0</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 374333512,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689094406
    }
]