[
    {
        "content": "<p>I am in tactic mode, and I have a value defined via <code>let</code>, which appears in my hypothesis list as <code>g': Polynomial (ZMod q) := p % vanishingPoly G</code>. Now I have <code>g'</code> in my goal and I want to see it as the value it's defined as again. How do I do this?</p>",
        "id": 371329981,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688170486
    },
    {
        "content": "<p>You can use <code>change</code> to do it explicitly, or you can just imagine that it's being translated into its def and things might work fine anyway.</p>",
        "id": 371330206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688170593
    },
    {
        "content": "<p>The <code>change</code> documentation looks like</p>\n<p>change tgt' will change the goal from tgt to tgt', assuming these are definitionally equal.<br>\nchange t' at h will change hypothesis h : t to have type t', assuming assuming t and t' are definitionally equal</p>",
        "id": 371330342,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688170668
    },
    {
        "content": "<p>Do I have to rewrite out the whole goal? Why isn't there just a simple tactic where I can say <code>unlet g'</code> and be done?</p>",
        "id": 371330526,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688170735
    },
    {
        "content": "<p>You need to use <code>set</code> if you want that.</p>",
        "id": 371330601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688170774
    },
    {
        "content": "<p>You <code>set g := blah with hg</code> and now you can just <code>rw [hg]</code></p>",
        "id": 371330635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688170792
    },
    {
        "content": "<p>You don't have to rewrite the entire goal, you can just use <code>_</code>s liberally. But <code>set</code> is easier.</p>",
        "id": 371330744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688170826
    },
    {
        "content": "<p><del>Wait, so then what is the difference between set and let and why would I ever use let in tactic mode?</del></p>",
        "id": 371330757,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688170835
    },
    {
        "content": "<p>Actually strike the cross out, I'm definitely confused about why you would use let in tactic mode. Is there ever a reason?</p>",
        "id": 371331261,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688171072
    },
    {
        "content": "<p>Is it that let is not actually a tactic, but a lean built-in that somehow seems like a tactic and has tactic documentation?</p>",
        "id": 371333488,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688172100
    },
    {
        "content": "<p><code>let</code> is both a built-in and a tactic. The tactic <code>let</code> is essentially just a wrapper around the <code>let</code> built-in that lets you use it in tactic mode (kind of like how <code>have</code> is both a command and a tactic).<br>\n<code>let</code> is very similar to <code>have</code> in tactic mode, with the main difference that <code>let</code> remembers what the term is defined as. If you do <code>let x := 2</code> then <code>x</code> is now definitionally equal to <code>2</code> so you can prove that <code>x = 2</code> with just <code>rfl</code>. This is not the case when you use <code>have</code>, because if you did <code>have x := 2</code> then there's no way to prove that <code>x = 2</code>.</p>",
        "id": 371334004,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688172320
    },
    {
        "content": "<p><code>set</code> is very similar to <code>let</code>, but if you do <code>set x := some_expression</code> then it will look at all your hypotheses and replace all instances of <code>some_expression</code> with <code>x</code>. Essentially you can use set as a replacement for <code>generalize</code>. As Kevin Buzzard mentioned, another helpful thing about <code>set</code> is that if you do <code>set g := blah with hg</code> then it will also give you a proof that <code>g = blah</code></p>",
        "id": 371334477,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688172518
    },
    {
        "content": "<p>Thanks Niels, one more question: I see that there is a <code>set!</code> tactic that does not replace the expression. Does this mean that <code>set!</code> behaves identically to <code>let</code>?</p>",
        "id": 371335570,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688172974
    },
    {
        "content": "<p>I actually don't know. The only difference I can see between <code>set!</code> and <code>let</code> is that <code>set!</code> lets you do <code>set! x := 2 with hx</code> to automatically prove that <code>x = 2</code>. I think this is basically just the same thing as <code>let x := 2, have hx : x = 2 := rfl</code> but there might be some other difference I'm not aware of.</p>",
        "id": 371335994,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688173171
    },
    {
        "content": "<p>Ok, thanks for the explanation and thanks to Kevin for solving my issue, you all have been a great help.</p>",
        "id": 371336121,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688173221
    },
    {
        "content": "<p>Generally I like to use <code>let</code> to introduce new terms that represent data, and <code>have</code> to introduce new terms that represent proofs. And then I work with <code>let</code> statements by using <code>change</code> quite often. I only started learning lean last year, and when I did I had a lot of trouble with this same thing.</p>",
        "id": 371336335,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688173333
    },
    {
        "content": "<p>My top-level issue is that I have <code>change g' with p % vanishingPoly G</code> in my ported code, and I'm getting the error \"tactic 'Lean.Parser.Tactic.changeWith' has not been implemented\"</p>",
        "id": 371337293,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688173756
    },
    {
        "content": "<p>I don't have much experience with lean 4 but from reading the lean 3 documentation it seems that if your goal is something like <code>f g' = something</code> then <code>change g' with p % vanishingPoly G</code> is just a shorter way to accomplish <code>change f (p % vanishingPoly G) = something</code>. Basically you just write <code>change ...</code> where the <code>...</code> is what you want your goal to become. Do you have a minimum working example?</p>",
        "id": 371338489,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688174319
    },
    {
        "content": "<p>What I think the <code>change g' with (p % vanishingPoly G)</code> command does is just replace all instances of <code>g'</code> with <code>(p % vanishingPoly G)</code> in the goal (I didn't actually know this existed) but if you can't use that you should just write out <code>change ...</code> where <code>...</code> is what the goal would look like if you were to just replace all instances of <code>g'</code> with <code>(p % vanishpingPoly G)</code>. You could also consider asking about this in the #lean4 stream.</p>",
        "id": 371339683,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688174904
    },
    {
        "content": "<p>Sorry, actually I'm mistaken, the <code>change with</code> issue can be ameliorated by just commenting out the tactic. My issue now is that when I switch let to set to try to fix another part of the code, another part of the code starts timing out at <code>isDefEq</code>, but indeed this seems like a problem for the lean4 stream.</p>",
        "id": 371340152,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688175147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> I couldn't find anything in Lean 4 or mathlib that lets you substitute let bindings, but it's possible to write this <code>unfold_let</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"sd\">/-- Unfold all the fvars from `fvars` in `e` that are local declarations. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">unfoldFVars</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fvars</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">FVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">node</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fvarId</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">fvars.contains</span> <span class=\"n\">fvarId</span> <span class=\"k\">then</span>\n        <span class=\"o\">(</span><span class=\"n\">TransformStep.continue</span> <span class=\"bp\">Â·</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">fvarId.getValue</span><span class=\"bp\">?</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">Option.mapM</span> <span class=\"n\">instantiateMVars</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">pure</span> <span class=\"n\">TransformStep.continue</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">TransformStep.continue</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">`unfold_let x y z at loc` unfolds the local declarations `x`, `y`, and `z` at the given</span>\n<span class=\"sd\">location.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"unfold_let\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">Parser.Tactic.location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">unfold_let</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">fvarIds</span> <span class=\"bp\">â</span> <span class=\"n\">getFVarIds</span> <span class=\"n\">hs</span>\n    <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">â</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">â</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n        <span class=\"n\">mvarId.changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">â</span> <span class=\"n\">unfoldFVars</span> <span class=\"n\">ty</span> <span class=\"n\">fvarIds</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">â</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">â</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">)</span>\n        <span class=\"n\">mvarId.change</span> <span class=\"o\">(</span><span class=\"bp\">â</span> <span class=\"n\">unfoldFVars</span> <span class=\"n\">ty</span> <span class=\"n\">fvarIds</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unfold_let failed\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  x: Nat := 1</span>\n<span class=\"cm\">  y: Nat := 2</span>\n<span class=\"cm\">  â¢ x + y = y + x</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">unfold_let</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- â¢ 1 + y = y + 1</span>\n</code></pre></div>",
        "id": 371599924,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688259270
    },
    {
        "content": "<p>Unless there's some other way to substitute this that I'm missing, I can try contributing this to mathlib</p>",
        "id": 371600091,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688259348
    },
    {
        "content": "<p>I'll mention that <code>dsimp only</code> will substitute everything defined with <code>let</code> indiscriminately</p>",
        "id": 371601054,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688259816
    },
    {
        "content": "<p>This is helpful to know, there was a <code>simp only [g']</code> in the ported code which was not working, but <code>dsimp only</code> seems to make this part work.</p>",
        "id": 371739746,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688307575
    },
    {
        "content": "<p>This has made it into <a href=\"https://github.com/leanprover-community/mathlib4/pull/5717\">#5717</a>, among a few other tactics (<span class=\"user-mention\" data-user-id=\"571451\">@Jeremy Salwen</span> it also has <code>eta_reduce</code>)</p>",
        "id": 372430696,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688514822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20unwrap.20a.20let.20expression/near/372430696\">said</a>:</p>\n<blockquote>\n<p>This has made it into <a href=\"https://github.com/leanprover-community/mathlib4/pull/5717\">#5717</a>, among a few other tactics (<span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> it also has <code>eta_reduce</code>)</p>\n</blockquote>\n<p>Would an eta for structures tactic belong here as well?</p>",
        "id": 372640315,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688572360
    }
]