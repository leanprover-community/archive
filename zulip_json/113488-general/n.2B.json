[
    {
        "content": "<p>Is it possible to have suffix notation <code>n+</code> for <code>Nat.succ n</code>, like we have <code>-n</code> for integers?</p>",
        "id": 381647782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691113724
    },
    {
        "content": "<p>I've heard it's big in computer science</p>",
        "id": 381647846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691113763
    },
    {
        "content": "<p>Really?</p>",
        "id": 381647967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691113805
    },
    {
        "content": "<p>What is <code>-n</code> supposed to be?</p>",
        "id": 381648004,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691113824
    },
    {
        "content": "<p>or is it <code>a++</code>? <code>-n</code> is <code>neg n</code>, right?</p>",
        "id": 381648077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691113863
    },
    {
        "content": "<p>Oh ok yeah <code>n++</code> is a thing.</p>",
        "id": 381648264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691113948
    },
    {
        "content": "<p>it's suffix notation for <code>succ</code>, right?</p>",
        "id": 381648307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691113971
    },
    {
        "content": "<p>Yeah I would hope that -n is neg n,</p>",
        "id": 381648308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691113972
    },
    {
        "content": "<p>And now how do you name <code>a + d+ = (a + d)+</code>? :-/</p>",
        "id": 381648578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691114095
    },
    {
        "content": "<p>wait maybe this doesn't fly for some reason I don't understand.</p>",
        "id": 381648661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691114135
    },
    {
        "content": "<p><code>add_succ_eq_add_succ'</code> is not a good look</p>",
        "id": 381648786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691114185
    },
    {
        "content": "<p>It would be notation for succ, so it should follow the standard naming convention as if it was just the function being applied</p>",
        "id": 381648924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691114269
    },
    {
        "content": "<p>Maybe prefix <code>++a</code> notation is less confusing for beginners.</p>",
        "id": 381651860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691115529
    },
    {
        "content": "<p>Oh I'm wrong, <code>a + d+ = (a + d)+ is just called </code>add_plus`</p>",
        "id": 381652165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691115667
    },
    {
        "content": "<p>it's fine. I'm wondering whether I could change the name of the constructor to <code>plus</code> and try this <code>n+</code> or <code>+n</code> notation to see if it's easier or harder.</p>",
        "id": 381652418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691115776
    },
    {
        "content": "<p>FWIW, I do think it would be nice to have some programmy notations like <code>n++</code>, <code>n += 37</code>,etc. (especially if/when they make sense in a do block)</p>",
        "id": 381653027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691116006
    },
    {
        "content": "<p>These notations traditionally increment n, so I think using them for succ would be confusing</p>",
        "id": 381664585,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691122286
    },
    {
        "content": "<p>Notations I have seen for the successor function include: <code>n'</code>, <code>S(n)</code> or <code>S n</code>, <code>suc n</code>, <code>succ n</code>, <code>n+1</code>. <code>n+</code> is a new one to me</p>",
        "id": 381666743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691123677
    },
    {
        "content": "<p>Oh maybe if <code>n++</code> and <code>++n</code> are misleading then <code>n+</code> might be worth experimenting with? Like A+ is better than an A. Or do people think this is crazy? I know <code>succ</code> is traditional but I've never liked it; it gets giggles in schoolrooms and so when I'm building the naturals from scratch in front of an audience I always use <code>S</code> now. Yesterday when experimenting with new NNG worlds I found myself writing <code>succ this</code> which I didn't think was a good look, this was what sent me off on this postfix idea.</p>",
        "id": 381754192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691141374
    },
    {
        "content": "<p>There is also <code>n⁺</code> to just mention another existing unicode character.</p>",
        "id": 381755653,
        "sender_full_name": "Julian Berman",
        "timestamp": 1691141595
    },
    {
        "content": "<p>I think we might already use that notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PosPart#doc\">docs#PosPart</a></p>",
        "id": 381757047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691141790
    },
    {
        "content": "<p><code>n⁺¹</code> seems slightly less crazy than <code>n+</code>, which makes <code>n.succ.succ.succ</code> <code>n⁺¹⁺¹⁺¹</code></p>",
        "id": 381757472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691141860
    },
    {
        "content": "<p>Of course this is still crazy, because <code>(1⁺¹⁻¹ : Rat)</code> is now 0.5 if we're not careful</p>",
        "id": 381757897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691141929
    },
    {
        "content": "<p>How about spelling out <code>successor</code>, and encapsulating all the <code>successor n</code> theorems as <code>n+1</code> theorems as soon as addition is defined, so that about 0% of users ever have to see the <code>successor</code> notation?</p>",
        "id": 381758547,
        "sender_full_name": "D. J. Bernstein",
        "timestamp": 1691142025
    },
    {
        "content": "<p>One place the name is really hard to avoid is <code>induction n with | succ n := sorry</code></p>",
        "id": 381766559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143314
    },
    {
        "content": "<p>I don't think notation is legal there</p>",
        "id": 381766586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143321
    },
    {
        "content": "<p>Oh, and of course in all the theorem names!</p>",
        "id": 381766765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143337
    },
    {
        "content": "<p>In Lean3 we could do <code>(n+1) := ...</code> - does this not work in Lean4?</p>",
        "id": 381766854,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691143351
    },
    {
        "content": "<p>For <code>match</code>, yes; but the <code>with </code>clause on <code>induction</code> and <code>cases</code> matches goal names not expressions</p>",
        "id": 381767490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143461
    },
    {
        "content": "<p>In NNG we have the option to hack the induction tactic so that it gives <code>n + 1</code> as the successor case; it's already hacked so that it gives <code>0</code> rather than <code>MyNat.zero</code> as the base case.</p>",
        "id": 381782141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691145745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/n.2B/near/381755653\">said</a>:</p>\n<blockquote>\n<p>There is also <code>n⁺</code> to just mention another existing unicode character.</p>\n</blockquote>\n<p>This one is also used (in the context of <code>Cardinal</code>) for <code>Order.succ</code> in the literature, and also for other sorts of set-theoretical successors.</p>",
        "id": 381803211,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1691149131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/n.2B/near/381782141\">said</a>:</p>\n<blockquote>\n<p>In NNG we have the option to hack the induction tactic so that it gives <code>n + 1</code> as the successor case; it's already hacked so that it gives <code>0</code> rather than <code>MyNat.zero</code> as the base case.</p>\n</blockquote>\n<p>Sure, but separate to changing what the goal state displays, we'd also need to change the syntax of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 381803581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691149192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/n.2B/near/381757472\">said</a>:</p>\n<blockquote>\n<p><code>n⁺¹</code> seems slightly less crazy than <code>n+</code>, which makes <code>n.succ.succ.succ</code> <code>n⁺¹⁺¹⁺¹</code></p>\n</blockquote>\n<p>And I've also seen things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>κ</mi><mrow><mo>+</mo><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\kappa^{+n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span> in the same context.</p>",
        "id": 381804296,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1691149302
    },
    {
        "content": "<p>In NNG I'm not going to use the pipe syntax at all. We're going to run <code>induction n with d hd</code> like in NNG3 and then have two goals, the first one of which is displayed and the second one of which is suppressed, and I'm not even going to ask the user to indent. I know that this is bad coding practice but I'm not teaching coding, I'm teaching proofs.</p>",
        "id": 381833860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691153674
    },
    {
        "content": "<p>For the constructor, I would be happy to switch to <code>S</code> or <code>successor</code>. But this would require a change to core...</p>",
        "id": 381924754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691169195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/n.2B/near/381664585\">said</a>:</p>\n<blockquote>\n<p>These notations traditionally increment n, so I think using them for succ would be confusing</p>\n</blockquote>\n<p>It wouldn't be confusing if we could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">30</span>\n  <span class=\"n\">n</span><span class=\"bp\">++</span>\n  <span class=\"n\">n</span> <span class=\"bp\">+=</span> <span class=\"mi\">6</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 381928062,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691169954
    },
    {
        "content": "<p><code>+=</code> feels like slightly strange notation when assignment is <code>:=</code> not <code>=</code></p>",
        "id": 381929599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691170251
    },
    {
        "content": "<p>All of humanity can be divided neatly into two classes: those who prefer <code>+:=</code> and those who prefer <code>:+=</code>.</p>",
        "id": 381935813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691171781
    },
    {
        "content": "<p><code>+:=</code> might conflict with the proposed <code>n+</code> notation, depending on how the left side of <code>:=</code> is parsed. For this matter, <code>n += 6</code> might be interpreted as a proposition.</p>",
        "id": 381943510,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691173538
    },
    {
        "content": "<p>In my opinion, this <code>n+</code> idea is <em>incredibly</em> confusing. It just makes things look like they would be syntactically invalid. And regarding newcomers / students, I find that they already have a hard enough time distinguishing syntactically valid expressions from invalid ones, so there's no point adding to the confusion.</p>",
        "id": 381946645,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691174231
    },
    {
        "content": "<p>But <code>-x - -x</code> makes sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"c1\">-- -x - -x : ℤ</span>\n</code></pre></div>\n<p>and it kind of looks confusing until you start thinking about it, and the + version is no different in terms of notation.</p>",
        "id": 381971538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691181540
    },
    {
        "content": "<p>And in paper maths we get sign errors all the time! Imagine if we now get sign errors about + too...</p>",
        "id": 381975422,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691182959
    },
    {
        "content": "<p>I think that both prefix and suffix <code>+</code> should be valid syntax just to prove how arbitrary it is.</p>",
        "id": 381977444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691183610
    },
    {
        "content": "<p>Unary prefix <code>+</code> is valid in some languages as a \"do nothing\" operator (maybe used to emphasize something is positive or maybe to validate that a certain type is numeric in a macro. I think in C it can do coercions). But I don't think unary suffix <code>+</code> or <code>-</code> are valid in any language I'm aware of.</p>",
        "id": 381997489,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691194215
    },
    {
        "content": "<p>What would <code>n-</code> mean?</p>",
        "id": 381997726,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691194348
    },
    {
        "content": "<p>How would <code>x+ -x</code> be interpreted?</p>",
        "id": 382004246,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1691196992
    },
    {
        "content": "<p>A superscript looks fine. Allowing suffixes will lead to weird stuff like <code>3+ + 4</code> being valid (and <code>8</code>).</p>",
        "id": 382007231,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1691198207
    },
    {
        "content": "<p>I'd vote for <code>n⁺</code> if need be. I am completely fine with status quo.</p>",
        "id": 382062128,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1691222865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/113488-general/topic/n.2B/near/381997489\">said</a>:</p>\n<blockquote>\n<p>Unary prefix <code>+</code> is valid in some languages as a \"do nothing\" operator (maybe used to emphasize something is positive or maybe to validate that a certain type is numeric in a macro. I think in C it can do coercions). But I don't think unary suffix <code>+</code> or <code>-</code> are valid in any language I'm aware of.</p>\n</blockquote>\n<p>In some silly languages it's even valid as a \"do <em>something</em>\" operator:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"err\">⊙</span>  <span class=\"n\">ptpython3</span>                                                                                                                                                                                                                                          <span class=\"n\">julian</span><span class=\"nd\">@Airm</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__pos__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"mi\">37</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">+</span><span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"mi\">37</span>\n</code></pre></div>",
        "id": 382065108,
        "sender_full_name": "Julian Berman",
        "timestamp": 1691223752
    },
    {
        "content": "<p>I mean it can be a valid \"do something\" operator in Lean as well, as well as in many other languages with operator overloading. But it doesn't do anything in math, I think.</p>",
        "id": 382204719,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691259357
    }
]