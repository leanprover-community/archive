[
    {
        "content": "<p>JetBrains Research is going to give a seminar about Arend this April 30. <a href=\"http://math.andrej.com/2020/04/28/every-theorem-prover/\" title=\"http://math.andrej.com/2020/04/28/every-theorem-prover/\">http://math.andrej.com/2020/04/28/every-theorem-prover/</a></p>",
        "id": 195491821,
        "sender_full_name": "Nam",
        "timestamp": 1588034818
    },
    {
        "content": "<p>Thanks. I've been curious about Arend for a while, but haven't looked into it in detail yet.</p>",
        "id": 195493906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588037483
    },
    {
        "content": "<p>Looks neat but wish it had unicode</p>",
        "id": 195498632,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588044941
    },
    {
        "content": "<p>they have an unusual solution to the \"to bundle or not to bundle\" problem: <a href=\"https://arend-lang.github.io/about/arend-features#anonymous-extensions\" title=\"https://arend-lang.github.io/about/arend-features#anonymous-extensions\">anonymous extensions</a></p>",
        "id": 195500655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588048244
    },
    {
        "content": "<p>Which I think looks really cool!</p>",
        "id": 195501283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588049123
    },
    {
        "content": "<p>they also have eta for structures which might be part of why this works</p>",
        "id": 195501361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588049222
    },
    {
        "content": "<p>I have a vague recollection of seeing a system which treated lambda and Pi as the same thing</p>",
        "id": 195501425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588049338
    },
    {
        "content": "<p>\"The logic of Arend is intuitionistic. This means that the law of excluded middle, the double negation elimination, and other classically valid principles are not provable in Arend.\"   So one cannot use classical reasoning in Arend like you can in Lean?</p>",
        "id": 195501957,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588050322
    },
    {
        "content": "<p>You can probably use classical reasoning in Arend the same as in lean, that is, you define it as an axiom and use it</p>",
        "id": 195502103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588051338
    },
    {
        "content": "<p>That said, Arend is clearly intended for HoTT applications so it's probably not suitable as a direct alternative to lean</p>",
        "id": 195502136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588051374
    },
    {
        "content": "<p>There was some confusion about time zones. New word from Andrej: the talk starts at 18:00 CEST (UTC+2). The linked announcement is already updated.</p>",
        "id": 195583022,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588088583
    },
    {
        "content": "<p>A reminder for anyone interested, this starts in a few minutes. I'm watching the beginning at least.</p>",
        "id": 195860534,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588262224
    },
    {
        "content": "<p>Anyone who attended the seminar want to share their impression of Arend?</p>",
        "id": 195875973,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588268821
    },
    {
        "content": "<p>No trusted core took me by surprise</p>",
        "id": 195876700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269159
    },
    {
        "content": "<p>from the theory side, there are a lot of features that are simply baked into the \"kernel\" when there is a reasonable argument that they could be formalized in principle, like subtyping on structures and cumulative universes, universes of h-levels, and omission of constructors for truncated pattern matching</p>",
        "id": 195877007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269302
    },
    {
        "content": "<p>I liked the fact that it doesn't make you prove cases in a higher inductive type which are \"obviously true because you're truncated already\"</p>",
        "id": 195877057,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269329
    },
    {
        "content": "<p>^^</p>",
        "id": 195877059,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269332
    },
    {
        "content": "<p>it's a cool feature, but not one I'm comfortable just assuming as axiomatic unless I have to</p>",
        "id": 195877154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269365
    },
    {
        "content": "<p>In lean of course we have things like <code>trunc.rec_on_subsingleton</code> for this</p>",
        "id": 195877213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269395
    },
    {
        "content": "<p>Pattern matching on equalities and having it unfold behind the scenes into <code>J</code> is neat, too - pretty sure Agda can't do that</p>",
        "id": 195877317,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269450
    },
    {
        "content": "<p>It doesn't unfold behind the scenes to J</p>",
        "id": 195877357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269467
    },
    {
        "content": "<p>it's axiomatic</p>",
        "id": 195877450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269490
    },
    {
        "content": "<p>Oh, fair enough :P</p>",
        "id": 195877480,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269502
    },
    {
        "content": "<p>I think Agda does have something to do with pattern matching on equality, indeed I thought that was how they did all their indexed inductive stuff</p>",
        "id": 195877591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269557
    },
    {
        "content": "<p>(I also think that at least one soundness bug came from pattern matching on rfl, so I'm not thrilled to know it's baked in to Arend)</p>",
        "id": 195877666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588269598
    },
    {
        "content": "<p>I was remembering <a href=\"https://github.com/agda/agda/issues/3551\" title=\"https://github.com/agda/agda/issues/3551\">https://github.com/agda/agda/issues/3551</a></p>",
        "id": 195878162,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588269827
    },
    {
        "content": "<p>I think that regular Agda has pattern matching on rfl, but the <code>--without-K</code> extension disables it, and Cubical Agda needs that for consistency and haven't yet built a replacement that doesn't assume K</p>",
        "id": 195879185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270282
    },
    {
        "content": "<p>since it's a long-standing feature request I suspect it's not trivial to do safely, and Arend's \"let's just do it anyway\" approach makes me apprehensive</p>",
        "id": 195879470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270406
    },
    {
        "content": "<p>Really, I think Arend is competing with (cubical) Agda more than Coq/Lean</p>",
        "id": 195879744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588270525
    },
    {
        "content": "<p>Some of the non-HoTT-related features also look quite attractive though, particularly the <code>Monoid Nat 0</code> stuff (I don't remember whether there was a name for this, but I guess we could call it some kind of auto-unbundling)</p>",
        "id": 195881357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588271189
    },
    {
        "content": "<p>that's the anonymous extensions I linked above</p>",
        "id": 195881411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271222
    },
    {
        "content": "<p>not having a kernel really helps here - doing this in lean would be a nightmare</p>",
        "id": 195881472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271257
    },
    {
        "content": "<p>I recall <span class=\"user-mention\" data-user-id=\"115334\">@Thales</span> trying to implement something like this for his lean frontend, I forget what it was called</p>",
        "id": 195881820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271398
    },
    {
        "content": "<p>I think keeping track of all the anonymous semi-structures is hard because you either have to pre-implement all 2^N of them or you generate them on the fly and have double import problems when they get autogenerated twice</p>",
        "id": 195882117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271502
    },
    {
        "content": "<p>But it does underscore the point that bundling is only a problem because of the architecture of lean. If you build your system a different way it becomes a non-issue</p>",
        "id": 195882437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/seminars/near/195879185\" title=\"#narrow/stream/113488-general/topic/seminars/near/195879185\">said</a>:</p>\n<blockquote>\n<p>I think that regular Agda has pattern matching on rfl, but the <code>--without-K</code> extension disables it, and Cubical Agda needs that for consistency and haven't yet built a replacement that doesn't assume K</p>\n</blockquote>\n<p>Agda with <code>--without-K</code> has pattern matching on equalities, only with some mild additional restrictions compared to <code>--with-K</code>. Agda with <code>--cubical</code>, as far as I understand, has no pattern matching on path types. I don't know whether they have it for the separate 'cubical identity type', but they'd prefer you don't use that anyway.</p>",
        "id": 195888315,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588274343
    }
]