[
    {
        "content": "<p>When a notation is introduced using the keyword <code>let</code>, the defining equation does <em>not</em> appear in the context. <br>\nI am also unable to get it from the local context when writing tactics. For instance, for the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span><span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>after the <code>let</code>expression, the proof state contains two local constants <code>x</code>and <code>y</code>, but the equation <code>y=x</code>is somehow hidden...<br>\nWhen I analyze the <code>expr</code> coding for <code>y</code>, I would expect to find an <code>elet</code> term in the def of <code>expr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> An explicit let binding. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">elet</span>       <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assignment</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n</code></pre></div>\n<p>but this is not the case, I see no difference between <code>x</code>and <code>y</code>, they are both analyzed as <code>local_const</code>.</p>\n<p>So my question is: how can I recover the hidden defining equation when writing tactics?</p>",
        "id": 345374274,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1680090319
    },
    {
        "content": "<p>it's not an equation, it is a special kind of variable declaration in the context (which is shown like <code>y : X := x</code> instead of just <code>y : X</code>)</p>",
        "id": 345375594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680090647
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.local_def_value\">docs#tactic.local_def_value</a> will tell you the value of a let-bound variable in the context</p>",
        "id": 345375971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680090738
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 345395971,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1680095322
    }
]