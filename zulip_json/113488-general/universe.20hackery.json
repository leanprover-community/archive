[
    {
        "content": "<p>(From user <code>BeLazy</code> on the Discord, thought it might amuse, this is Lean 4):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"kt\">Type</span> <span class=\"mi\">37</span> <span class=\"c1\">-- maximum universe level offset threshold (32) has been reached,</span>\n<span class=\"k\">#check</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"mi\">32</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- `Type 37 : Type 38`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lift100.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">):=</span>  <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">32</span><span class=\"bp\">+</span><span class=\"mi\">32</span><span class=\"bp\">+</span><span class=\"mi\">32</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lift1000</span> <span class=\"o\">:=</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>\n  <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Lift1000</span> <span class=\"kt\">Type</span>\n<span class=\"c1\">-- Lift1000 Type : Type 1001</span>\n</code></pre></div>",
        "id": 355376853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683106872
    },
    {
        "content": "<p>Will it overflow?</p>",
        "id": 355379537,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683107361
    },
    {
        "content": "<p>I guess by defining <code>Lift10000</code>, etc. you can get the universe levels exponentially high but maybe Lean will also take exponentially long to type check them</p>",
        "id": 355379790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683107415
    },
    {
        "content": "<p>This crashes on my PC:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lift100.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">):=</span>  <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">32</span><span class=\"bp\">+</span><span class=\"mi\">32</span><span class=\"bp\">+</span><span class=\"mi\">32</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lift1000</span> <span class=\"o\">:=</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift100</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift100</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lift10000</span> <span class=\"o\">:=</span> <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift1000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift1000</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lift100000</span> <span class=\"o\">:=</span> <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span>  <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift10000</span> <span class=\"bp\">∘</span> <span class=\"n\">Lift10000</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lift1000000</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">Lift100000</span>\n</code></pre></div>",
        "id": 355381066,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683107725
    },
    {
        "content": "<p>The crash is likely due to the fact that such universes are encoded as unary successors, and don't get the same kind of low-level implementation/optimisation that <code>Nat</code>s and <code>Int</code>s do.</p>",
        "id": 355381361,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683107803
    },
    {
        "content": "<p>I encountered similar issues when implementing our universe system for <a href=\"https://gitlab.crans.org/loutr/proost/-/compare/main...95-replace-succ-with-an-add-constructor-on-level\">Proost</a>, the solution we landed on was to replace the <code>succ : Level → Level</code> constructor to a <code>plus : Level → Nat → Level</code> constructor. This would be both more efficient in memory and should give a faster type-checking algorithm, at least if the one currently implemented in Lean 4 still resembles the one described in <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's thesis.</p>",
        "id": 355384774,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683108643
    },
    {
        "content": "<p>I think lean itself does this</p>",
        "id": 355385048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683108700
    },
    {
        "content": "<p>There is a hard coded limit on universe level sizes, I thought it was much less than 100000 though</p>",
        "id": 355385389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683108771
    },
    {
        "content": "<p>it has a snarky message about misusing universes</p>",
        "id": 355385449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683108788
    },
    {
        "content": "<p>ah right, <code>#check Type 64</code> shows this</p>",
        "id": 355385602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683108836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/universe.20hackery/near/355385048\">said</a>:</p>\n<blockquote>\n<p>I think lean itself does this</p>\n</blockquote>\n<p>perhaps the \"low-level\" implementation of levels do, but in the Lean code at least, Levels are encoded as such:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Level</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>   <span class=\"o\">:</span> <span class=\"n\">Level</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span>   <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Level</span>\n  <span class=\"bp\">|</span> <span class=\"n\">max</span>    <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Level</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imax</span>   <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Level</span>\n  <span class=\"bp\">|</span> <span class=\"n\">param</span>  <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Level</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mvar</span>   <span class=\"o\">:</span> <span class=\"n\">LMVarId</span> <span class=\"bp\">→</span> <span class=\"n\">Level</span>\n</code></pre></div>",
        "id": 355385685,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683108847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/universe.20hackery/near/355385602\">said</a>:</p>\n<blockquote>\n<p>ah right, <code>#check Type 64</code> shows this</p>\n</blockquote>\n<p>It can be circumvented by adding things together.<code>#check Type (32+32)</code> doesn't raise any issue</p>",
        "id": 355386053,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683108932
    },
    {
        "content": "<p>there is another limit beyond this, I forget where it is</p>",
        "id": 355386127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683108955
    },
    {
        "content": "<p>I'm thinking of the <code>to_offset()</code> function in <code>level.cpp</code> BTW, the syntax uses naive succ but it is converted to a (level, offset) pair for normalization</p>",
        "id": 355386354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109004
    },
    {
        "content": "<p>and BTW <code>to_offset</code> uses an <code>unsigned</code> with no overflow checks so if you can make it to 2^32 without a crash you might get a soundness bug out of it</p>",
        "id": 355386835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109086
    },
    {
        "content": "<p>oooooh, OMW to do so then</p>",
        "id": 355386939,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683109104
    },
    {
        "content": "<p>it's probably not possible without overflowing the stack, because you will have to create a very deep <code>Level</code> term</p>",
        "id": 355387259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109163
    },
    {
        "content": "<p>lean seems to stack overflow before that though, yeah</p>",
        "id": 355387324,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683109175
    },
    {
        "content": "<p>maybe if you raise the stack limit...?</p>",
        "id": 355387538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109209
    },
    {
        "content": "<p>I don't know what functions are going to get hit hardest</p>",
        "id": 355387622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109230
    },
    {
        "content": "<p>you will need (2^32 * stack frame of recursive function) bytes of memory, which is a lot but might be feasible</p>",
        "id": 355388069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109305
    },
    {
        "content": "<p>I fear that the lift composition trick up here might give the elaboration a hard time unifying that many universes, so simply doing <code>Type 32 +........ +32</code> might be wiser here. Do you know of any easy way to raise the stack limit ?</p>",
        "id": 355388356,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683109358
    },
    {
        "content": "<p>Use <code>addDecl</code> and just hand the level directly to the kernel</p>",
        "id": 355388484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109384
    },
    {
        "content": "<p>aha, here's the hidden limit: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Level.lean#L46\">https://github.com/leanprover/lean4/blob/master/src/Lean/Level.lean#L46</a></p>",
        "id": 355389137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109538
    },
    {
        "content": "<p>Even just using <code>Level.succ</code> enough times should trigger that</p>",
        "id": 355389956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109702
    },
    {
        "content": "<p>So the error would be raised as soon as the computed field would get computed first. This seems hard to avoid</p>",
        "id": 355390875,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683109848
    },
    {
        "content": "<p>yeah I would say that this is not a soundness bug</p>",
        "id": 355391395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683109963
    },
    {
        "content": "<p>although it still seems difficult to hit this using user code, since all the elaboration tricks overflow</p>",
        "id": 355391685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110031
    },
    {
        "content": "<p>Wouldn't the <code>kdef</code> trick still work here to send all that to the kernel without checking any of this during elaboration ?</p>",
        "id": 355391899,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683110070
    },
    {
        "content": "<p>No, because you would need to construct a <code>Level</code> to pass to the kernel and you can't even do that</p>",
        "id": 355392016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110097
    },
    {
        "content": "<p>basically, there is a bounds check, it is just not in the kernel but in the level constructor</p>",
        "id": 355392143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110129
    },
    {
        "content": "<p>(which is part of the kernel in a sense)</p>",
        "id": 355392206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110147
    },
    {
        "content": "<p>Aren't computed fields lazily computed ? As long as no function calling for <code>Level.data</code> is used to generate the kdef, why wouldn't this work ?</p>",
        "id": 355392356,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683110182
    },
    {
        "content": "<p>no</p>",
        "id": 355392374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110187
    },
    {
        "content": "<p>oh, my bad then</p>",
        "id": 355392414,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683110197
    },
    {
        "content": "<p>computed fields are extra fields stored with the data and eagerly computed on each constructor application</p>",
        "id": 355392507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110222
    },
    {
        "content": "<p>before computed fields all these constructors had an additional argument for the data field and you had to use smart constructors to build the values</p>",
        "id": 355392704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110280
    },
    {
        "content": "<p>My belief was that, while stored with the data, they were still computed \"on demand\", similar to doing <code>OnceCell</code> headers in Rust</p>",
        "id": 355392799,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683110295
    },
    {
        "content": "<p>but this is also sketchy since you could just not use the smart constructor</p>",
        "id": 355392800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110295
    },
    {
        "content": "<p>it's closer to e.g. the <code>len</code> field on a <code>HashMap</code></p>",
        "id": 355392872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110314
    },
    {
        "content": "<p>The more you know ! Thanks for the insight :)</p>",
        "id": 355392974,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683110349
    },
    {
        "content": "<p>the fix for that is to add an equality hypothesis BTW, but lean core doesn't use a lot of dependent types</p>",
        "id": 355393080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683110376
    }
]