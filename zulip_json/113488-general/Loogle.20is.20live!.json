[
    {
        "content": "<p>It seems it’s faster to create a web interface around a new Lean command than get the corresponding PR in…</p>\n<p>Anyways, here it is: <a href=\"https://loogle.lean-fro.org/\">https://loogle.lean-fro.org/</a></p>\n<p>Remember to parenthesize if you are searching for expressions, else it turns into multiple patterns. And let me know if it fails to find something that you think it should find.</p>",
        "id": 387306914,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692980614
    },
    {
        "content": "<p>Behind this URL is a Hetzner vhost with a nixos system with a ngingx reverse proxy (for SSL) in front of a <a href=\"https://github.com/nomeata/loogle/blob/master/server.py\">small python HTTP server</a> that then used stdin/stdout to talk to the <a href=\"https://github.com/nomeata/loogle/blob/master/Loogle.lean\"><code>loogle</code> CLI</a> (which you could also use locally); the last bit is <a href=\"https://github.com/nomeata/loogle/blob/master/loogle_seccomp.c\">locked down using SECCOMP</a>. This is mostly a proof of concept setup, with the following limitations:</p>\n<ul>\n<li>It’s single-threaded (because python), which is actually a nice way to do rate limiting.</li>\n<li>It’s not automatically deployed yet, and happens to reflect whatever mathlib commit I am pinning. In particular, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6363\">mathlib4#6363</a> ought to be merged before I can track master.</li>\n<li>This shouldn’t be the final hostname for this service.  <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </li>\n<li>Maybe this should be integrated into the docs page.</li>\n<li>Maybe this should also be available as a zulip bot (to answer “Is there code for X”-requests conveniently and while showing them how to find on their own).  <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </li>\n<li>If the <code>loogle</code> process dies and needs to be restarted, it is rebuilding the index for ~2 mins. This should maybe happen at buildtime already, and pickled into the program or loaded from file. <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </li>\n<li>The web UI could probably be nicer.</li>\n</ul>\n<p>Contributions welcome at <a href=\"https://github.com/nomeata/loogle\">https://github.com/nomeata/loogle</a> – I’m keen on having this service, not so much running it ;-)</p>",
        "id": 387306925,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692980620
    },
    {
        "content": "<p><a href=\"https://loogle.nomeata.de/?q=%28Real.sqrt+%28%3Fa+*+%3Fb%29%29\">https://loogle.nomeata.de/?q=%28Real.sqrt+%28%3Fa+*+%3Fb%29%29</a> fails</p>",
        "id": 387345688,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1692998687
    },
    {
        "content": "<p>As well as <a href=\"https://loogle.nomeata.de/?q=%28Real.sin+%28_+%2B+2*Real.pi%29%29\">https://loogle.nomeata.de/?q=%28Real.sin+%28_+%2B+2*Real.pi%29%29</a> (one of the examples)</p>",
        "id": 387345782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1692998756
    },
    {
        "content": "<p>Heh, looks like the heartbeats aren't reset between queries? Will investigate tomorrow.</p>",
        "id": 387347193,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692999672
    },
    {
        "content": "<p>The second example (\"two\") also fails, with error \"No constant in search pattern\"</p>",
        "id": 387356457,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1693006670
    },
    {
        "content": "<p>Congrats on the launch!</p>",
        "id": 387368945,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1693013850
    },
    {
        "content": "<p>Ok, now every query gets their own budget of <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"drum\" class=\"emoji emoji-1f941\" role=\"img\" title=\"drum\">:drum:</span>, and the docs explain that pure substring searches are not supported yet (I’m waiting for <a href=\"https://github.com/leanprover/std4/pull/178\">https://github.com/leanprover/std4/pull/178</a> to see if that KMP matcher makes linear substrings matches fast enough without a dedicated index).</p>\n<p>And I should really precompute the index and <code>pickle</code> it out, so that restarting the service doesn’t take several minutes … done</p>",
        "id": 387407729,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693042195
    },
    {
        "content": "<p>Just moved it to  <a href=\"https://loogle.lean-fro.org/\">https://loogle.lean-fro.org/</a> which has a higher chance of being a permanently available address, even if I run away screaming at some point.</p>",
        "id": 387431669,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693060676
    },
    {
        "content": "<p>ping: <a href=\"http://loogle.lean-fro.org\">loogle.lean-fro.org</a>: Name or service not known</p>",
        "id": 387431868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693060813
    },
    {
        "content": "<p>Does it mean we should wait for DNS cache to propagate?</p>",
        "id": 387431898,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693060836
    },
    {
        "content": "<p>Ah, I made a mistake, one moment. But yes, DNS related, so may take a few minutes for the fix to propagate.</p>",
        "id": 387431948,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693060890
    },
    {
        "content": "<p>It might be worth documenting how to run this locally so people are able to use it without access to the internet</p>",
        "id": 387436150,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693063914
    },
    {
        "content": "<p>Sure! What would you expect beyond what’s in <a href=\"https://github.com/nomeata/loogle/#readme\">https://github.com/nomeata/loogle/#readme</a>, in particular</p>\n<blockquote>\n<p>You can run this server locally as well, either using <code>./server.py</code> if you<br>\nbuilt <code>loogle</code> via <code>lake</code>, or using <code>nix run ./#loogle_server</code> if you use nix.</p>\n</blockquote>",
        "id": 387436272,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693063987
    },
    {
        "content": "<p>Oh that's already there <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 387436408,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693064105
    },
    {
        "content": "<p>Not that I'm requesting this feature, it's just a suggestion: allow the user to point to an already existing mathlib folder, with cache files and stuff so it's not necessary to download cache and extract it again (duplicating file storage consumption)</p>",
        "id": 387436641,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693064273
    },
    {
        "content": "<p>Also supported: You can pass different search paths to <code>loogle</code>. So you can run it on any <code>.olean</code> you might have around (I believe).<br>\n(Ok, this is only exposed with the CLI, not the web interface yet) :-)</p>",
        "id": 387436759,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693064371
    },
    {
        "content": "<p>A small suggestion: when linking search results to the docs, would it be possible to link directly to the declaration instead of using the <code>find/?pattern...</code>. The <code>find</code> is super useful for the Zulip linkifer, but it does take an extra second or two, and I figure you probably already have access to the file the decl lives in.</p>",
        "id": 387439327,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693066197
    },
    {
        "content": "<p>And a possible bug: searching for <code>(star ?a * ?a = ?a * star _)</code> returns <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=star_comm_self%27#doc\">docs#star_comm_self'</a>, but searching for <code>(star ?a * ?a = ?a * star ?a)</code> yields no results.</p>",
        "id": 387439678,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693066432
    },
    {
        "content": "<p>Will investigate both, thanks.</p>",
        "id": 387439898,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693066578
    },
    {
        "content": "<p>The latter might require help from someone who actually knows how lean works :-D, as I would <del>expect</del> hope that the current code handles this correctly</p>",
        "id": 387440252,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693066853
    },
    {
        "content": "<p>Quite curious. It works no matter which <code>?a</code> I replace. It also works with <code>(star ?b * ?b = ?a * star ?a)</code>…</p>",
        "id": 387440554,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693067100
    },
    {
        "content": "<p>And for those who don’t want to leave Zulip:</p>",
        "id": 387544988,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693155220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Real.sin (_ + 2*Real.pi))</p>",
        "id": 387544994,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693155224
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sin_add_two_pi#doc\">docs#Real.sin_add_two_pi</a></p>",
        "id": 387544996,
        "sender_full_name": "loogle",
        "timestamp": 1693155225
    },
    {
        "content": "<p>(You can also use private messages.)</p>",
        "id": 387545020,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693155239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ((?a -&gt; ?b) -&gt; ?f ?a -&gt; ?f ?b)</p>",
        "id": 387545811,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693155895
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> Cannot search: No constants in search pattern.</p>",
        "id": 387545812,
        "sender_full_name": "loogle",
        "timestamp": 1693155896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> is this supposed to work? A similar thing on hoogle would find fmap right?</p>",
        "id": 387545857,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693155936
    },
    {
        "content": "<p>That’s not supposed to work, loogle only supports queries that involve at least one constant (so that the index can be used and it doesn’t have to do a linear search), and the function arrow doesn't count.</p>",
        "id": 387546290,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693156380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  ((?a -&gt; ?b) -&gt; List ?a -&gt; List ?b)</p>",
        "id": 387546414,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693156534
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 387546418,
        "sender_full_name": "loogle",
        "timestamp": 1693156538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> how about this? ^^</p>",
        "id": 387546427,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693156554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- ((?a -&gt; ?b) -&gt; List ?a -&gt; List ?b)</p>",
        "id": 387546505,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693156624
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map#doc\">docs#List.map</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mapAsyncChunked#doc\">docs#List.mapAsyncChunked</a>, (<a href=\"https://loogle.lean-fro.org/q?=%7C-%20%28%28%3Fa%20-%3E%20%3Fb%29%20-%3E%20List%20%3Fa%20-%3E%20List%20%3Fb%29\">and 2 more</a>)</p>",
        "id": 387546507,
        "sender_full_name": "loogle",
        "timestamp": 1693156625
    },
    {
        "content": "<p>Ok, this looks like a bug, it should work without <code>|-</code> in this case too. Thanks!</p>",
        "id": 387546537,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693156658
    },
    {
        "content": "<p>Let me just remark how phenomenally cool this is.</p>",
        "id": 387546727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693156866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- ([Functor ?f] -&gt; (?a -&gt; ?b) -&gt; ?f ?a -&gt; ?f ?b)</p>",
        "id": 387546860,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693157036
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 387546863,
        "sender_full_name": "loogle",
        "timestamp": 1693157037
    },
    {
        "content": "<p>Can we maybe get this to work as well?</p>",
        "id": 387546908,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693157055
    },
    {
        "content": "<p>Oh, the latest fixes re metavariables to #find didn't make it to the online site yet.  Wait for a few hours (building mathlib…) before checking stuff with metavariables</p>",
        "id": 387546957,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693157107
    },
    {
        "content": "<p>I'll be back then^^</p>",
        "id": 387546979,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693157139
    },
    {
        "content": "<p>Also, I am still very much a stumbling beginner when it comes to lean metaprogramming, so most of you are probably in better position to improve matters! (Loogle just wraps #find, so any improvement to that will help.)</p>",
        "id": 387548453,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693158540
    },
    {
        "content": "<p>Maybe it's best to match function types (or foralls) up to reordering of hypothesis always, not just with |-.</p>",
        "id": 387548552,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693158615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387546727\">said</a>:</p>\n<blockquote>\n<p>Let me just remark how phenomenally cool this is.</p>\n</blockquote>\n<p>I feel replaced <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 387549134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693159265
    },
    {
        "content": "<p>I remember Zagier once saying the same thing when OEIS went online.</p>",
        "id": 387549478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693159613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387549134\">said</a>:</p>\n<blockquote>\n<p>I feel replaced <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>\n</blockquote>\n<p>Far from it, I am sure. I looked at the recent Is there code for X threads, and only the majority could be resolved directly using <code>#find</code>.  So you'll remain at least as phenomenally cool!</p>",
        "id": 387549852,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693159979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387549478\">said</a>:</p>\n<blockquote>\n<p>I remember Zagier once saying the same thing when OEIS went online.</p>\n</blockquote>\n<p>for the uninitiated: who is that? I presume they know number series?</p>",
        "id": 387550632,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693160732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> small suggestion/thought.  The links could mention if it is for Std, Mathlib, Init, etc.  Not a game changer but adds another layer of information when doing a broad search using the site.</p>",
        "id": 387551230,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1693161294
    },
    {
        "content": "<p>Right, it was already requested that the links go right to the right module, and when I implement that I thought I'd also show the module name after the name (maybe smaller or slightly grey).</p>",
        "id": 387551333,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693161397
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Don_Zagier\">Don Zagier</a> is an excellent puzzle-solver and a former child prodigy, who is very good at e.g. identifying integer sequences, but is less good than a large database of such sequences.</p>",
        "id": 387551377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693161461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> you might be aware of this already but the bot link for the \"(and # more)\" gives Not Found.  Not sure you were planning on this being served properly or not but thought I would mention it in case.</p>",
        "id": 387552865,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1693162905
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 387558143,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693168286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- ((?a -&gt; ?b) -&gt; List ?a -&gt; List ?b)</p>",
        "id": 387558151,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693168302
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map#doc\">docs#List.map</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mapAsyncChunked#doc\">docs#List.mapAsyncChunked</a>, <a href=\"https://loogle.lean-fro.org/?q=%7C-%20%28%28%3Fa%20-%3E%20%3Fb%29%20-%3E%20List%20%3Fa%20-%3E%20List%20%3Fb%29\">and 10 more</a></p>",
        "id": 387558153,
        "sender_full_name": "loogle",
        "timestamp": 1693168306
    },
    {
        "content": "<p>Fixed, thanks!</p>",
        "id": 387558157,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693168315
    },
    {
        "content": "<blockquote>\n<p>I'll be back then^^</p>\n</blockquote>\n<p>The metavariable fix is now live, but it still doesn’t find <code>Functor.map</code> using various patterns. If someone  feels like investigating, checkout <a href=\"https://github.com/leanprover-community/mathlib4/pull/6363\">mathlib4#6363</a> and add tricky queries to <code>test/Find.lean</code>, and then see if they can be made to work.</p>",
        "id": 387558439,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693168622
    },
    {
        "content": "<p>Omg this is awesome</p>",
        "id": 387562884,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693173582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ((?a -&gt; ?b) -&gt; List ?a -&gt; List ?b)</p>",
        "id": 387563875,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1693174579
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 387563877,
        "sender_full_name": "loogle",
        "timestamp": 1693174582
    },
    {
        "content": "<p>Looks like it still needs the <code>|-</code></p>",
        "id": 387563895,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1693174612
    },
    {
        "content": "<p>So... the <code>loogle</code> name is cute (and the tool amazing), but perhaps if could just be <code>#find</code>, even in its web and bot incarnations? :-)</p>",
        "id": 387586234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693190583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Fin _ ≃ Option _</p>",
        "id": 387588507,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693191990
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:6: expected end of input</p>",
        "id": 387588508,
        "sender_full_name": "loogle",
        "timestamp": 1693191992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Fin _) ≃ (Option (Fin _))</p>",
        "id": 387588580,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693192051
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:8: expected end of input</p>",
        "id": 387588581,
        "sender_full_name": "loogle",
        "timestamp": 1693192052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ((Fin _) ≃ (Option (Fin _)))<br>\nPerhaps if I surround the whole thing in parens?</p>",
        "id": 387588671,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693192098
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finSuccEquiv#doc\">docs#finSuccEquiv</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finSuccEquiv%27#doc\">docs#finSuccEquiv'</a>, <a href=\"https://loogle.lean-fro.org/?q=%28%28Fin%20_%29%20%E2%89%83%20%28Option%20%28Fin%20_%29%29%29%0APerhaps%20if%20I%20surround%20the%20whole%20thing%20in%20parens%3F\">and 13 more</a></p>",
        "id": 387588676,
        "sender_full_name": "loogle",
        "timestamp": 1693192099
    },
    {
        "content": "<p>(The \"13 more\" link gives 502 bad gateway)</p>",
        "id": 387588747,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693192152
    },
    {
        "content": "<p>(does everything you pass to it have to be surrounded by parentheses?)</p>",
        "id": 387589400,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693192587
    },
    {
        "content": "<p>it appears that a query consists of several kinds of things separated by spaces, and one of those things is a pattern (parsed at max prec)</p>",
        "id": 387589575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693192707
    },
    {
        "content": "<p>I think it would be better to use commas or something as a separator</p>",
        "id": 387589605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693192726
    },
    {
        "content": "<p>The syntax currently optimizes for “give me all things mentioning the following constants”, e.g.</p>",
        "id": 387610687,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693205898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Real.sin Real.cos</p>",
        "id": 387610706,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693205912
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sin_add_two_pi#doc\">docs#Real.sin_add_two_pi</a></p>",
        "id": 387610709,
        "sender_full_name": "loogle",
        "timestamp": 1693205913
    },
    {
        "content": "<p>If you want queries to be separated by commas, the above query would be understood as <code>sin</code> applied to <code>cos</code>…<br>\nAnd if you think of @loogle (or <code>#find</code>) as a function, isn’t it natural to parenthesize all its non-atomic arguments?<br>\nBut happy to bow to popular vote here, it’s just syntax :-)</p>",
        "id": 387611199,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693206135
    },
    {
        "content": "<p>I think that most tactics do not use \"function-inspired syntax\"</p>",
        "id": 387612773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693206945
    },
    {
        "content": "<p>e.g. <code>use</code> takes a comma separated list, and <code>exact</code> takes a min-prec term because max-prec would be annoying</p>",
        "id": 387612889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207001
    },
    {
        "content": "<p>Right, and <code>rw</code> requires <code>[ ]</code> (why is that by the way). Looks like we haven’t covered the design space completely :D</p>",
        "id": 387612993,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693207070
    },
    {
        "content": "<p>even most term elaborators do not use function-style precedence, e.g. <code>dbg_trace</code>, <code>assert!</code>, <code>return</code></p>",
        "id": 387612999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207073
    },
    {
        "content": "<p>What is \"max-prec term\" please?</p>",
        "id": 387613004,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693207075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Real.sin Real.cos)<br>\nAt least this gives a decent error message instead of just not finding anything</p>",
        "id": 387613069,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693207091
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> application type mismatch<br>\n  Real.sin Real.cos<br>\nargument<br>\n  Real.cos<br>\nhas type<br>\n  ℝ → ℝ : Type<br>\nbut is expected to have type<br>\n  ℝ : Type</p>",
        "id": 387613072,
        "sender_full_name": "loogle",
        "timestamp": 1693207092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> a term parsed at maximum precedence, meaning it must be surrounded in parentheses if it is not atomic</p>",
        "id": 387613095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207105
    },
    {
        "content": "<p>the arguments to a regular function are normally parsed at max prec</p>",
        "id": 387613117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207121
    },
    {
        "content": "<p>but e.g. <code>return</code> and <code>exact</code> take a low precedence term which is why <code>return f x</code> is interpreted as <code>return (f x)</code> rather than <code>(return f) x</code></p>",
        "id": 387613189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207161
    },
    {
        "content": "<p>Yeah, I remember <code>exact</code> in Coq was very annoying.</p>",
        "id": 387613223,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693207180
    },
    {
        "content": "<p>Right, but these take _one_ term, then it’s easy to go for min prec.</p>",
        "id": 387613324,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693207210
    },
    {
        "content": "<p>that's why I gave <code>use</code> as an example</p>",
        "id": 387613350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207230
    },
    {
        "content": "<p><code>cases</code> and <code>rcases</code> also take min-prec lists</p>",
        "id": 387613402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207260
    },
    {
        "content": "<p>Yeah, maybe commas are fine then. Tangentially: Why does <code>rw</code> not take a comma separated list? I found the <code>[…]</code> often annoying, especially when rewriting with just one lemma.</p>",
        "id": 387613562,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693207330
    },
    {
        "content": "<p>in lean 3 the <code>[]</code> were optional if there is only one term; it couldn't take multiple because the comma would conflict</p>",
        "id": 387613707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207401
    },
    {
        "content": "<p>in lean 4 the syntax was made more regular, but indeed I think there isn't much need for the brackets</p>",
        "id": 387613761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207433
    },
    {
        "content": "<p>it might block out some syntax options though for <code>simp</code></p>",
        "id": 387613824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207445
    },
    {
        "content": "<p>Lean 3's <code>rw foo at bar</code> is my most missed feature in Lean 4.</p>",
        "id": 387613870,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693207475
    },
    {
        "content": "<p>it might read a bit ambiguously when you have <code>at h</code></p>",
        "id": 387613874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207478
    },
    {
        "content": "<p>also, mathlib is ported now, that would be a <em>massive</em> change at this point</p>",
        "id": 387613977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207544
    },
    {
        "content": "<p>probably should have brought that up 9 months ago :)</p>",
        "id": 387614006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207560
    },
    {
        "content": "<p>So back to <code>#find</code>: Comma separated it is then, or are there dissenting opinions?</p>",
        "id": 387614134,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693207626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387588747\">said</a>:</p>\n<blockquote>\n<p>(The \"13 more\" link gives 502 bad gateway)</p>\n</blockquote>\n<p>Looks like the whole message is being sent to the <code>#find</code> command, even though it seemed to work anyway</p>",
        "id": 387614528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693207842
    },
    {
        "content": "<p>Stupid question: in the Documentation, point 3 says that \"The pattern can also be non-linear, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What is the meaning of \"linear\" here?</p>",
        "id": 387618912,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1693209833
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/35891663/what-are-nonlinear-patterns\">https://stackoverflow.com/questions/35891663/what-are-nonlinear-patterns</a></p>",
        "id": 387619322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693209996
    },
    {
        "content": "<blockquote>\n<p>Looks like the whole message is being sent to the #find command, even though it seemed to work anyway</p>\n</blockquote>\n<p>I just fixed a bug there, should work now.</p>",
        "id": 387619996,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693210297
    },
    {
        "content": "<p>The <code>#find</code> PR now uses commas. I agree it's nicer. The loogle service will catch up eventually.</p>",
        "id": 387640265,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693218698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, I'm not sure whether we should merge the PR yet; it seems like we're still shaking out. If you think it's better to have it in though, just say so and I'll prioritize it.</p>",
        "id": 387643677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693220204
    },
    {
        "content": "<p>I doubt we'll find all infelicities of the pattern matcher without giving it into the hands of the users. OTOH, we can test it using loogle, so merging isn't urgent.</p>\n<p>I guess I'd be grateful to know if it could be merged as is, i.e. have it reviewed. We can then still let it sit and ripe a bit if that's desirable. In any case I'm waiting for the next std4 bump.</p>",
        "id": 387644159,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693220423
    },
    {
        "content": "<p>The KMP bump is with bors now, and I left some minor comments on the #find PR. I'll delegate now, as I think it's good enough, and clearly we will iterate further on this.</p>",
        "id": 387645734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693221128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387545020\">said</a>:</p>\n<blockquote>\n<p>(You can also use private messages.)</p>\n</blockquote>\n<p>I tried this out messaging myself, but I was not able to work.  I copied the example<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Real.sin Real.cos)<br>\nin a message to myself, but got no reply, not even an error message.</p>",
        "id": 387649001,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693222517
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:1: expected term</p>",
        "id": 387649006,
        "sender_full_name": "loogle",
        "timestamp": 1693222519
    },
    {
        "content": "<p>you have to PM the loogle bot itself</p>",
        "id": 387649053,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693222537
    },
    {
        "content": "<p>Isn't that what <code>@loogle</code> does there?</p>",
        "id": 387649150,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693222570
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/A62oZA-9HQHHs0C3KHKK3_Rm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/A62oZA-9HQHHs0C3KHKK3_Rm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/A62oZA-9HQHHs0C3KHKK3_Rm/image.png\"></a></div>",
        "id": 387649154,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693222571
    },
    {
        "content": "<p>no that's just tagging it</p>",
        "id": 387649176,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693222580
    },
    {
        "content": "<p>it doesn't work in PMs I don't think</p>",
        "id": 387649185,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693222585
    },
    {
        "content": "<p>I feel like I am about to learn something new... how do I PM the bot?</p>",
        "id": 387649301,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693222635
    },
    {
        "content": "<p>(Also, at least on this stream I got a reply from <code>loogle</code>.)</p>",
        "id": 387649508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693222711
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/_uOC77bR69gR2eAB6CHgkvjw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_uOC77bR69gR2eAB6CHgkvjw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_uOC77bR69gR2eAB6CHgkvjw/image.png\"></a></div>",
        "id": 387649824,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693222843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, if in this stream you find a place where loogle has replied, and click on its name, a pop-up appears, in which you can select \"view direct messages\". That will take you to your own private conversation with loogle.</p>",
        "id": 387649839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693222851
    },
    {
        "content": "<p>Scott, Eric, thanks!  I have now started a conversation with <code>loogle</code>!  <span aria-label=\"robot\" class=\"emoji emoji-1f916\" role=\"img\" title=\"robot\">:robot:</span><br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> AlgebraicGeometry.Scheme</p>",
        "id": 387650167,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693222997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> AlgebraicGeometry.Scheme</p>",
        "id": 387650369,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693223092
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicGeometry.IsAffine#doc\">docs#AlgebraicGeometry.IsAffine</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicGeometry.IsAffineOpen#doc\">docs#AlgebraicGeometry.IsAffineOpen</a>, <a href=\"https://loogle.lean-fro.org/?q=AlgebraicGeometry.Scheme\">and 198 more</a></p>",
        "id": 387650372,
        "sender_full_name": "loogle",
        "timestamp": 1693223092
    },
    {
        "content": "<p>Ok, I got it now!  Sorry about being so slow in figuring out how this works!</p>",
        "id": 387650454,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693223126
    },
    {
        "content": "<p>I can confirm that @loogle replies to my PMs and provides useful answers!</p>",
        "id": 387651471,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693223513
    },
    {
        "content": "<p>I feel like we should all agree to do our loogling in public somewhere, just so everyone can see how awesome it is, rather than hiding away in DMs. :-)</p>",
        "id": 387656298,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693225013
    },
    {
        "content": "<p>Public queries are also didactic. People learn just by looking at them (and their result)</p>",
        "id": 387657362,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693225315
    },
    {
        "content": "<p>Sure, but I'm preparing a talk and might be loogling around quite a bit...</p>",
        "id": 387657429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693225325
    },
    {
        "content": "<p>Maybe we could have a <code>loogle</code> stream of conscience?</p>",
        "id": 387657552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693225369
    },
    {
        "content": "<p>I'd suggest a <code>loogle</code> thread in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a>, since it's querying about mathlib code</p>",
        "id": 387658249,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693225597
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> seems more appropriate</p>",
        "id": 387658352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693225637
    },
    {
        "content": "<p>we just need a bot which reads each new topic on the stream and asks chatgpt to construct a loogle query</p>",
        "id": 387658656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693225743
    },
    {
        "content": "<p>Just in case you're not joking (I'm worse than computers at noticing these things <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>), I doubt chatgpt knows about loogle syntax <span aria-label=\"robot\" class=\"emoji emoji-1f916\" role=\"img\" title=\"robot\">:robot:</span></p>",
        "id": 387659131,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693225908
    },
    {
        "content": "<p>well you would explain the syntax in the prompt</p>",
        "id": 387659237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693225934
    },
    {
        "content": "<p>it's a half joke, I think it would probably work fairly well</p>",
        "id": 387659312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693225966
    },
    {
        "content": "<p>The gray area of half jokes!<br>\nI think that would be at the very least entertaining to watch. The bot can simply not post if loogle returns \"invalid syntax\"</p>",
        "id": 387660010,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1693226221
    },
    {
        "content": "<p>Will you design a ChatGPT pre-prompt for loogling?</p>",
        "id": 387660261,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693226308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387657429\">said</a>:</p>\n<blockquote>\n<p>Sure, but I'm preparing a talk and might be loogling around quite a bit...</p>\n</blockquote>\n<p>In that case, maybe using <a href=\"https://loogle.lean-fro.org/\">https://loogle.lean-fro.org/</a> is more ergonomic?</p>",
        "id": 387666252,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693228363
    },
    {
        "content": "<p>Ah, yes!  Joachim, you come bearing lots of gifts!</p>",
        "id": 387668314,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693229053
    },
    {
        "content": "<p>Very very minor website UI feedback -- not having really read the page carefully, I just tried copying the first example that caught my eye, which happened to be <code>#find Real.sin \"two\"</code>, which I pasted in the box and clicked the green button, to be presented with error output saying <code>&lt;input&gt;:1:0: expected end of input</code>.</p>\n<p>Obviously when that failed I saw that the \"Try these\" examples at the top do not have <code>#find </code> in them so I figured out that clearly the <code>#find </code> bit isn't meant to go in the box, but perhaps it's worth making the examples at the bottom have the <code>#find </code> part shown in a way that won't be copied to the clipboard when selected. E.g. in Python land we have <a href=\"https://sphinx-extensions.readthedocs.io/en/latest/sphinx-prompt.html#example\">https://sphinx-extensions.readthedocs.io/en/latest/sphinx-prompt.html#example</a> for this sort of thing (not exactly the same, for when you have something like a prompt but don't want it to be selectable -- obviously it's just doing some HTML/CSS/JS underlying thing to make that actually happen which I don't know what specifically but could be used). Or you could I guess just trim off a possible <code>#find </code> from the input and ignore it for lazy people like me who don't read, or have a <code>#find </code> shown in front of the box so it's clear that the input is adding that for you. Or...</p>",
        "id": 387678974,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693232438
    },
    {
        "content": "<p>The text is copied from the <code>#find</code> docstring, and I'm too lazy to change it every time (at least while it keeps changing a lot). But trimming <code>#find</code> is a good idea, will do that.</p>",
        "id": 387679290,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693232540
    },
    {
        "content": "<p>Done</p>",
        "id": 387685415,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693234295
    },
    {
        "content": "<p>Loogle now expects comma-separated queries.</p>",
        "id": 387738209,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693249249
    },
    {
        "content": "<p>I tried searching for doc#Pi.mul_apply with <code>(_ * _) _</code> which does not work with message<code>Cannot search: No constants in search pattern.</code>. So I tried <code>HMul.hMul _ _ _</code> but that produces an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.2793799</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m.2793800</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.2793797</span>\n</code></pre></div>",
        "id": 387770711,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1693263770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (HMul.hMul _ _ _)</p>",
        "id": 387771137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693264003
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.2794101</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m.2794102</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.2794099</span>\n</code></pre></div>",
        "id": 387771138,
        "sender_full_name": "loogle",
        "timestamp": 1693264004
    },
    {
        "content": "<p>wait a minute, mul doesn't have that many arguments</p>",
        "id": 387771176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693264029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (HMul.hMul _ _)</p>",
        "id": 387771193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693264036
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 387771215,
        "sender_full_name": "loogle",
        "timestamp": 1693264057
    },
    {
        "content": "<p>I suspect there were too many results</p>",
        "id": 387771562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693264246
    },
    {
        "content": "<p>I think it should truncate after, say, 500 results, as after that you have to start searching the search results</p>",
        "id": 387771734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693264360
    },
    {
        "content": "<p>Oh, I realize I misinterpreted <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> 's query, the overapplication of mul is the point</p>",
        "id": 387772218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693264688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> HMul.hMul (γ := ∀ (_ : (_ : Type _)), (_ : Type _)) _ _ _</p>",
        "id": 387772234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693264702
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inner_matrix_col_col#doc\">docs#inner_matrix_col_col</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inner_matrix_row_row#doc\">docs#inner_matrix_row_row</a>, <a href=\"https://loogle.lean-fro.org/?q=HMul.hMul%20%28%CE%B3%20%3A%3D%20%E2%88%80%20%28_%20%3A%20%28_%20%3A%20Type%20_%29%29%2C%20%28_%20%3A%20Type%20_%29%29%20_%20_%20_\">and 57 more</a></p>",
        "id": 387772237,
        "sender_full_name": "loogle",
        "timestamp": 1693264705
    },
    {
        "content": "<p><a href=\"https://loogle.lean-fro.org/?q=%28_+*+_%29\">https://loogle.lean-fro.org/?q=%28_+*+_%29</a> works just about reasonably fast,  but seems to just miss zulip's bot timeout.</p>",
        "id": 387822702,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693293811
    },
    {
        "content": "<p>@loogle (Nat -&gt; ZMod _)</p>",
        "id": 387896464,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693320026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat -&gt; ZMod _</p>",
        "id": 387896559,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693320054
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 387896563,
        "sender_full_name": "loogle",
        "timestamp": 1693320055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat |- ZMod _</p>",
        "id": 387896876,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693320127
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:4: expected end of input</p>",
        "id": 387896880,
        "sender_full_name": "loogle",
        "timestamp": 1693320128
    },
    {
        "content": "<p>@loogle System.FilePath |- IO Bool</p>",
        "id": 387897748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693320377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> System.FilePath |- IO Bool</p>",
        "id": 387897885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693320419
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:16: expected end of input</p>",
        "id": 387897887,
        "sender_full_name": "loogle",
        "timestamp": 1693320420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> System.FilePath |- (IO Bool)</p>",
        "id": 387898294,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693320536
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:16: expected end of input</p>",
        "id": 387898300,
        "sender_full_name": "loogle",
        "timestamp": 1693320537
    },
    {
        "content": "<p>Is it the dependent type that's causing issues?</p>",
        "id": 387898396,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693320561
    },
    {
        "content": "<p>I <em>think</em> it's suppose to be:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> System.FilePath, ⊢ IO Bool</p>",
        "id": 387899473,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693320849
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:23: expected end of input</p>",
        "id": 387899476,
        "sender_full_name": "loogle",
        "timestamp": 1693320850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> System.FilePath, ⊢ IO Bool</p>",
        "id": 387899531,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693320869
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 387899534,
        "sender_full_name": "loogle",
        "timestamp": 1693320869
    },
    {
        "content": "<p>hmmm... ok</p>",
        "id": 387899659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693320910
    },
    {
        "content": "<p>It was recently changed so that it takes a comma separated list of arguments.</p>",
        "id": 387899756,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693320951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Nat, |- ZMod _</p>",
        "id": 387899843,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693320968
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LucasLehmer.lucasLehmerResidue#doc\">docs#LucasLehmer.lucasLehmerResidue</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LucasLehmer.sZMod#doc\">docs#LucasLehmer.sZMod</a>, <a href=\"https://loogle.lean-fro.org/?q=%20Nat%2C%20%7C-%20ZMod%20_\">and 2 more</a></p>",
        "id": 387899849,
        "sender_full_name": "loogle",
        "timestamp": 1693320969
    },
    {
        "content": "<p>I would have expected something like <code>Nat.cast</code> to show up, but maybe it doesn't, because <code>Nat.cast</code> has a more general type? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast#doc\">docs#Nat.cast</a></p>",
        "id": 387900476,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693321177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387899756\">said</a>:</p>\n<blockquote>\n<p>It was recently changed so that it takes a comma separated list of arguments.</p>\n</blockquote>\n<p>I see, but presumably it should be considered a (minor) bug that a comma is required for the last element of the list!</p>",
        "id": 387900960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693321308
    },
    {
        "content": "<p>why?</p>",
        "id": 387901255,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693321388
    },
    {
        "content": "<p>We don’t write <code>[a, b, c,]</code>…</p>",
        "id": 387901371,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693321417
    },
    {
        "content": "<p>Okay, but I didn't write <code>System.Path, ⊢ IO Bool,</code> ...., so?</p>",
        "id": 387901512,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693321451
    },
    {
        "content": "<p>Oh I’m talking about the stuff before the turnstile</p>",
        "id": 387901566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693321467
    },
    {
        "content": "<p>Right, but it's all one list. And the \"stuff before the turnstile\" doesn't all have to appear before the turnstile.</p>",
        "id": 387901733,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693321520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⊢ IO Bool, System.FilePath</p>",
        "id": 387901873,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693321561
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 387901880,
        "sender_full_name": "loogle",
        "timestamp": 1693321562
    },
    {
        "content": "<p>also that <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 387901966,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693321574
    },
    {
        "content": "<p>The turnstile could be considered a separator</p>",
        "id": 387902001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693321583
    },
    {
        "content": "<p>I'm not sure how things would parse with that anymore. What does <code>a, b ⊢ c, d</code> mean?</p>",
        "id": 387902206,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693321635
    },
    {
        "content": "<p>I’m claiming that it should be equivalent to <code>a, b, |- c, d</code>, whatever that’s supposed to mean</p>",
        "id": 387902410,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693321684
    },
    {
        "content": "<p>Using the turnstile as an alternative separator seems to make parsing ripe for misinterpretation (by humans), but that's just my opinion.</p>",
        "id": 387902604,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693321738
    },
    {
        "content": "<p>The syntax isn't great: the turnstile is a marker to use the different interpretation for the type (with -&gt;) afterwards</p>",
        "id": 387906553,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693322881
    },
    {
        "content": "<p>Open for suggestions for better syntax. Or maybe it should just for simplicity always match function types up to order of premises, anywhere in the definition's type. Then we wouldn't need the extra syntax</p>",
        "id": 387906850,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693322963
    },
    {
        "content": "<p>Here's an option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The turnstyle for conclusion patterns, unicode or ascii allowed -/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">turnstyle</span> <span class=\"o\">:=</span> <span class=\"n\">patternIgnore</span><span class=\"o\">(</span><span class=\"s2\">\"⊢ \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"|- \"</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `#find` patterns -/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">find_patterns</span> <span class=\"o\">:=</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">turnstyle</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>Then you could write <code>a, b |- c</code> or <code>a, b</code>. It seems clearer to require that the conclusion come at the end than to allow it to appear anywhere, though maybe there's sub subtlety I'm missing.</p>\n<p>Could you say a little bit about why <code>find_patterns</code> is a syntax category in the PR? I don't really understand \"so that it can be used by external tools\".</p>",
        "id": 387909390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693323693
    },
    {
        "content": "<p>Right now the commas separate independent filters or predicates. “patterns” in the name above is misleading: filters can be </p>\n<ul>\n<li>names of constants</li>\n<li>substrings of definition names</li>\n<li>term patterns matching anywhere</li>\n<li>term patterns matching on the top level up order .</li>\n</ul>\n<p>I'd prefer to keep this top-level “list of filters”, also to extend it easily later by new filters (e.g. “in library std4” or other stuff).</p>\n<p>So within commas we can have a term patterns. The meaning of this term patterns can vary along two axes:</p>\n<ul>\n<li>whether it should match the whole definition type, or anywhere therin</li>\n<li>whether a function type patterns should match as is (defEq) or up to reordering or extra assumptions<br>\nThe current implementation defaults to “defEq anywhere ”, prefixing the pattern with a turnstile changes both axes “up to reordering, only top-level”.</li>\n</ul>\n<p>I am inclined to always match up to reordering, and always anywhere. No need to learn about turnstile or other special syntax etc..</p>\n<p>This is the most permissive, and will give you the results. As long as there are only few cases where you really need to narrow it down in the search, this seems the best option, and  seems to match what users so far seem to expect</p>",
        "id": 387912354,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693324652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat, ZMod _</p>",
        "id": 387912905,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693324818
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Gamma0Map#doc\">docs#Gamma0Map</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Gamma0_det#doc\">docs#Gamma0_det</a>, <a href=\"https://loogle.lean-fro.org/?q=Nat%2C%20ZMod%20_\">and 198 more</a></p>",
        "id": 387912909,
        "sender_full_name": "loogle",
        "timestamp": 1693324819
    },
    {
        "content": "<p>Is there a way to further refine a search by excluding declarations that match something?  I'm thinking of <code>grep -v</code>.</p>",
        "id": 387957058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693339717
    },
    {
        "content": "<p>Not yet. I wonder how often that will be useful, compared to refining the search with other constants that must be mentioned and with definition name substrings</p>",
        "id": 387959601,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693340579
    },
    {
        "content": "<p>OTOH its not hard to implement, so if there is intuitive syntax for it (I guess a prefix modifiers before the filter in the comma separated list), and the request comes more often, we can certainly do it.</p>",
        "id": 387959856,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693340662
    },
    {
        "content": "<p>A prefix, like <code>-</code>?</p>",
        "id": 387960723,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693340971
    },
    {
        "content": "<p>Sure, as long as it’s unlikely to clash with something you’d start a term with. (You can still parenthesize the term if needed, I think)<br>\nBut let’s hold off until it itches a bit more often, ok?</p>",
        "id": 387961233,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693341170
    },
    {
        "content": "<p>For an example, I'm looking at the output of Michael's query <code>Nat, ZMod _</code> and I would expect to find a few hits where the only types appearing at <code>Nat</code> and <code>ZMod</code>, and after that, widening the search to including more type.  So, maybe, simply sorting by \"optimality\" might be enough.</p>",
        "id": 387961412,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693341226
    },
    {
        "content": "<p>Sure, I'm not in a hurry to have this feature!</p>",
        "id": 387961531,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693341255
    },
    {
        "content": "<p>Hmm, “only these types” is an interesting concept! Although that can maybe be solved by better sorting. Once I figure out I’d like to sort things early that are defined earlier in the dependency tree (so more likely more fundamental). But sorting by “fewer mentioned constants” is also a neat idea</p>",
        "id": 387962091,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693341393
    },
    {
        "content": "<p>One  issue with the query <code>Nat, ZMod _</code> is that it matches every use of <code>ZMod _</code>, because the argument of <code>ZMod _</code> is always a <code>Nat</code></p>",
        "id": 387962525,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693341513
    },
    {
        "content": "<p>Earlier in the import sense is a good concept, I agree, but I think that if you asked a human to mention a result involving a Nat and ZMod, they would not begin by talking about Gamma0.</p>",
        "id": 387962560,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693341528
    },
    {
        "content": "<p>That’s what I am saying … the code doesn’t do this earlier-import-logic yet :-)</p>",
        "id": 387962806,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693341615
    },
    {
        "content": "<p><code>ZMod</code> is probably too generic, I agree, and I am not exactly sure how to describe the results that I would prefer to find.</p>",
        "id": 387962840,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693341625
    },
    {
        "content": "<p>I'll try to find a better (algorithmic) description of an ordering on declarations that might fit better what I would expect.</p>",
        "id": 387963049,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693341700
    },
    {
        "content": "<p>Maybe simply sorting by number of distinct constants appearing in the declaration?  <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 387963379,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693341810
    },
    {
        "content": "<p>That would certainly move basic stuff to the top!</p>",
        "id": 387963959,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693341997
    },
    {
        "content": "<p>Anyway, alphabetical is a good option as well, since you might know how the name starts and \"clever sorting\" breaks this.  I guess just having the option to choose in each situation would be good.  But already having <em>one</em> option is great!</p>",
        "id": 387964370,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693342134
    },
    {
        "content": "<p>If you know how the name starts (or ends), add it to the filter!</p>",
        "id": 387964538,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693342183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  _ + _, \"comm\"</p>",
        "id": 387964651,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693342204
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CHSH_inequality_of_comm#doc\">docs#CHSH_inequality_of_comm</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_add_add_comm#doc\">docs#add_add_add_comm</a>, <a href=\"https://loogle.lean-fro.org/?q=%20_%20%2B%20_%2C%20%22comm%22\">and 109 more</a></p>",
        "id": 387964659,
        "sender_full_name": "loogle",
        "timestamp": 1693342205
    },
    {
        "content": "<p>So, add_comm is high up!  However, the actual \"I'm feeling lucky\" result I would not have guessed... ever!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 387965255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693342338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> _ * _, \"comm\"</p>",
        "id": 387965583,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693342432
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CHSH_inequality_of_comm#doc\">docs#CHSH_inequality_of_comm</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=card_comm_eq_card_conjClasses_mul_card#doc\">docs#card_comm_eq_card_conjClasses_mul_card</a>, <a href=\"https://loogle.lean-fro.org/?q=_%20%2A%20_%2C%20%22comm%22\">and 198 more</a></p>",
        "id": 387965586,
        "sender_full_name": "loogle",
        "timestamp": 1693342433
    },
    {
        "content": "<p>It seems that the <code>add</code> hits were high because of alphabetical order.</p>",
        "id": 387965791,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693342479
    },
    {
        "content": "<p>We could run pagerank on the graph of declarations and their bodies to get relevancy results :D</p>",
        "id": 387965810,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693342483
    },
    {
        "content": "<p>Is that an option?</p>",
        "id": 387966059,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693342541
    },
    {
        "content": "<p>in principle sure. I guess it would drastically increase build times of the index since you need to traverse every expression though. It might also favor type class instances a lot since they appear quite often so you'd have to be at least a bit clever about it.</p>",
        "id": 387966248,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693342588
    },
    {
        "content": "<p>Anyway, I agree with what was said: let's play a bit with this tool, before planning an improvement!</p>",
        "id": 387966516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693342680
    },
    {
        "content": "<p>At least for loogle the index is precomputed, so it wouldn’t be too bad. For <code>#find</code> (without some global cache) it might be less attracktive…</p>",
        "id": 387966575,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693342688
    },
    {
        "content": "<p>Yeah, first someone™ ought to track down the known bugs… (<a href=\"#narrow/stream/270676-lean4/topic/meta.20variable.20confusion/near/387836968\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/meta.20variable.20confusion/near/387836968</a>)</p>",
        "id": 387966705,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693342730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387965810\">said</a>:</p>\n<blockquote>\n<p>We could run pagerank on the graph of declarations and their bodies to get relevancy results :D</p>\n</blockquote>\n<p>I've thought about this too, but an unfortunate property of declarations is that they form a DAG, so pagerank will very <em>very</em> heavily weight axioms, constructors, and recursors!</p>\n<p>I wonder if making the edges bidirectional would give anything sensible.</p>",
        "id": 387972599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693344869
    },
    {
        "content": "<p>Just deployed a new version of loogle:</p>\n<ul>\n<li>Fixed a bug, so now <code>List.map</code> is found.</li>\n<li>As part of the bug fix, <code>a → b → c</code> patterns are now always matched up to reordering of parameters/premises, with <code>|-</code> or without (the <code>|-</code> now just says that the pattern has to match the definition’s type at the root, not just anywhere within.</li>\n<li>Someone asked for the links to point directly to the right module, this should now happen. Also, <a href=\"https://loogle.lean-fro.org/\">https://loogle.lean-fro.org/</a> shows the defining module next to the results.</li>\n<li>Results are now sorted by the dependency order of their defining module, to bring the most basic lemmas to the top</li>\n</ul>",
        "id": 388763541,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693706403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (?a -&gt; ?b) -&gt; List ?a -&gt; List ?b</p>",
        "id": 388763587,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693706412
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/List/Basic.html#List.map\">List.map</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/List/Basic.html#List.mapTR\">List.mapTR</a>, and <a href=\"https://loogle.lean-fro.org/?q=%28%3Fa%20-%3E%20%3Fb%29%20-%3E%20List%20%3Fa%20-%3E%20List%20%3Fb\">12 more</a></p>",
        "id": 388763601,
        "sender_full_name": "loogle",
        "timestamp": 1693706416
    },
    {
        "content": "<p>New feature: You can now run queries that contain <em>only</em> lemma name fragments:</p>",
        "id": 392723940,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695489748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"sin\", \"convex\"</p>",
        "id": 392723945,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695489753
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Convex/Basic.html#convex_singleton\">convex_singleton</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Convex/Basic.html#Set.Subsingleton.convex\">Set.Subsingleton.convex</a>, and <a href=\"https://loogle.lean-fro.org/?q=%22sin%22%2C%20%22convex%22\">7 more</a></p>",
        "id": 392723946,
        "sender_full_name": "loogle",
        "timestamp": 1695489754
    },
    {
        "content": "<p>Notably, mathlib doesn't seem to have convexity results about the restriction of <code>Real.sin</code> to a suitable interval <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span></p>",
        "id": 392725074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695490846
    },
    {
        "content": "<p>That should be obvious from the second derivative result</p>",
        "id": 392725395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695491179
    },
    {
        "content": "<p>New feature: <a href=\"https://loogle.lean-fro.org/\">https://loogle.lean-fro.org/</a> shows the 10 most recent queries. This is mostly because I am curious how loogle is being used. Don’t search for your credit card number!</p>\n<p>(I removed that feature again due to healthy paranoia; better stateless than sorry.)</p>",
        "id": 393323882,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695760319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> writes</p>\n<blockquote>\n<p>(@Joachim Breitner, it seems you can't say anything to loogle before the mention? Could that be fixed?)</p>\n</blockquote>\n<p>Sure thing, fixed. I hope <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"agrees\"</p>",
        "id": 393429695,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695805257
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.extend_agrees\">CategoryTheory.Presieve.extend_agrees</a></p>",
        "id": 393429699,
        "sender_full_name": "loogle",
        "timestamp": 1695805258
    },
    {
        "content": "<p>New feature: If you pass a name (like <code>sin</code>) where you so far need to qualify it (<code>Real.sin</code>), it <a href=\"https://loogle.lean-fro.org/?q=sin\">now prints</a>:</p>\n<blockquote>\n<p>unknown identifier sin, using Float.sin instead. (Other candiates: Complex.sin, Real.sin, Real.Angle.sin, Measurable.sin, ContDiff.sin, ContDiffAt.sin, ContDiffOn.sin, ContDiffWithinAt.sin, Differentiable.sin, DifferentiableAt.sin, DifferentiableOn.sin, DifferentiableWithinAt.sin, HasDerivAt.sin, HasDerivWithinAt.sin, HasFDerivAt.sin, HasFDerivWithinAt.sin, HasStrictDerivAt.sin, HasStrictFDerivAt.sin and PowerSeries.sin)<br>\nFound 0 definitions mentioning Float.sin. </p>\n</blockquote>\n<p>Probably needs refinement.<br>\nThe list can get rather long (e.g.  with <a href=\"https://loogle.lean-fro.org/?q=Name\">https://loogle.lean-fro.org/?q=Name</a>), and the bot wouldn’t even tell you which constant it picked:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> sin</p>\n<p>(And I know about the candiates typo…)</p>",
        "id": 395293666,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696609491
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 395293671,
        "sender_full_name": "loogle",
        "timestamp": 1696609491
    },
    {
        "content": "<p>Here is a possible refinement: Instead of blindly picking _one_ possible name, and running the query, <code>#find</code> now gives the error message as usual, but also prints a list of possible <code>#find</code> queries that have a higher chance of succeeding. This is how it looks like in VSCode:</p>\n<p><a href=\"/user_uploads/3121/9U8G53TtD0VKHEHVUKR3w_2a/sin.png\">sin.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9U8G53TtD0VKHEHVUKR3w_2a/sin.png\" title=\"sin.png\"><img src=\"/user_uploads/3121/9U8G53TtD0VKHEHVUKR3w_2a/sin.png\"></a></div><p>It’s clickable in the InfoView, just like the usual <code>try</code> features, and will be prettier once we have <code>tryThese</code> (<a href=\"https://github.com/leanprover/std4/pull/215\">std4#215</a>).<br>\nI’ll now make the web view show these hints as clickable hints as well.<br>\nAnd not sure what the chat bot should do… maybe give the first two suggestions, as links to the website.</p>",
        "id": 395669562,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696848220
    },
    {
        "content": "<p>Now also <a href=\"https://loogle.lean-fro.org/?q=sin\">on the website</a>:</p>\n<p><a href=\"/user_uploads/3121/cO8Z-Ff07oslODl0B0Um1119/sin.png\">sin.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cO8Z-Ff07oslODl0B0Um1119/sin.png\" title=\"sin.png\"><img src=\"/user_uploads/3121/cO8Z-Ff07oslODl0B0Um1119/sin.png\"></a></div><p>and in the bot:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Name, String</p>",
        "id": 395686269,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696853970
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'Name'<br>\nDid you mean <a href=\"https://loogle.lean-fro.org/?q=Lean.Name%2C%20String\">Lean.Name, String</a> or <a href=\"https://loogle.lean-fro.org/?q=Name%2C%20String\">something else</a>?</p>",
        "id": 395686272,
        "sender_full_name": "loogle",
        "timestamp": 1696853971
    },
    {
        "content": "<p>Ok, I found a way to generate these suggestions even when the unresolved identifier occurs somewhere in a term pattern:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> replicate (_ + _) _<br>\nThe implementation is a bit hacky (it runs the term elaborator, catches the exception, takes the <code>SourceInfo</code> from the exception, looks in the <code>Syntax</code> to see if there is an <code>ident</code> there, generates the list of possible <code>Names</code>, changes the <code>Syntax</code> and pretty-prints it), but whatever works. Maybe users will get so used to have sensible replacement suggestions when using underqualified name that eventually the elaborator supports this natively :-)</p>",
        "id": 395725787,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696866100
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'replicate'<br>\nDid you mean <a href=\"https://loogle.lean-fro.org/?q=List.replicate%20%28_%20%2B%20_%29%20_\">List.replicate (_ + _) _</a> or <a href=\"https://loogle.lean-fro.org/?q=replicate%20%28_%20%2B%20_%29%20_\">something else</a>?</p>",
        "id": 395725795,
        "sender_full_name": "loogle",
        "timestamp": 1696866102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> , small bug report: <br>\n<a href=\"/user_uploads/3121/aU96cqI7N5fQ9TbCSjCyZDvy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aU96cqI7N5fQ9TbCSjCyZDvy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/aU96cqI7N5fQ9TbCSjCyZDvy/image.png\"></a></div><p>Firefox offers to translate Loogle! Maybe a better offer than german to english is lean to maths ;b</p>",
        "id": 396075354,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697026214
    },
    {
        "content": "<p><span aria-label=\"printer\" class=\"emoji emoji-1f5a8\" role=\"img\" title=\"printer\">:printer:</span> &amp; <span aria-label=\"spaghetti\" class=\"emoji emoji-1f35d\" role=\"img\" title=\"spaghetti\">:spaghetti:</span>, thanks for reporting!<br>\nShould be fixed now.</p>",
        "id": 396150051,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697051157
    },
    {
        "content": "<p>Loogle now lives at <a href=\"https://loogle.lean-lang.org/\">https://loogle.lean-lang.org/</a>. The old URLs will forward (for now).</p>",
        "id": 396313709,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697124695
    },
    {
        "content": "<p>Since the “Try these” support for multiple suggestions hit <code>mathlib</code> I was inspired to make loogle suggest even more possible fixes. When you now do a search that looks like you are searching for an identifier, but that identifier doesn't exist, it will suggest putting quotes around it, so that you search for names (in addition to suggesting possible qualified names):<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Name</p>",
        "id": 398349489,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698176238
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'Name'<br>\nDid you mean <a href=\"https://loogle.lean-lang.org/?q=%22Name%22\">\"Name\"</a> or <a href=\"https://loogle.lean-lang.org/?q=Name\">something else</a>?</p>",
        "id": 398349493,
        "sender_full_name": "loogle",
        "timestamp": 1698176239
    },
    {
        "content": "<p>And now showing the first two suggestions in the bot reponse, for 100% more suggestions<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> name</p>",
        "id": 398353122,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698177842
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'name'<br>\nDid you mean <a href=\"https://loogle.lean-lang.org/?q=%22name%22\"><code>\"name\"</code></a>, <a href=\"https://loogle.lean-lang.org/?q=Lean.Name\"><code>Lean.Name</code></a>, or <a href=\"https://loogle.lean-lang.org/?q=name\">something else</a>?</p>",
        "id": 398353128,
        "sender_full_name": "loogle",
        "timestamp": 1698177842
    },
    {
        "content": "<p>The <a href=\"https://loogle.lean-lang.org/?q=Real.sin%2C%20tsum\">Loogle website</a> now displays types for all hits (the zulip bot and the CLI don’t, and the JSON API includes types and docstrings).</p>",
        "id": 398532350,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698254960
    },
    {
        "content": "<p>Finally found the bug that prevented queries with placeholders in the conclusion:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  List ?a -&gt; Fin _ -&gt; ?a</p>",
        "id": 398955347,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698434078
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#List.get\">List.get</a></p>",
        "id": 398955351,
        "sender_full_name": "loogle",
        "timestamp": 1698434080
    },
    {
        "content": "<p>6 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Loogle.20and.20iff_of_eq\">#general &gt; Loogle and iff_of_eq</a> by <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>.</p>",
        "id": 399695342,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698833805
    },
    {
        "content": "<p>More lean news:<br>\nI added a shortcut to my browser that <code>l &lt;query&gt;</code> sends that query to loogle. With this, I  found Loogle to be useful even for searching for things that I know of, because of the convenient link to the docs and the type information.  So I made two further tweaks:</p>\n<p>When searching for a plain identifier, it will include that identifier in the result list:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Real.sin</p>\n<p>Furthermore, there is a “I’m feeling lucky” mode where loogle will send you directly to the docs of the first hit. You can use that mode with the <code>#lucky</code> button, or by adding <code>&amp;lucky=yes</code> to the URL.</p>\n<p>I have added a browser shortcut for that as well, so I can now enter <code>ll Real.sin</code> to the search bar, and a moment later I see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sin#doc\">docs#Real.sin</a>. And it works with partial queries as well (<code>ll \"Name\"</code> sends me to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Name#doc\">docs#Lean.Name</a>).</p>",
        "id": 400152498,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699024259
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Complex/Exponential.html#Real.sin\">Real.sin</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Complex/Exponential.html#Complex.ofReal_sin\">Complex.ofReal_sin</a>, and <a href=\"https://loogle.lean-lang.org/?q=Real.sin\">228 more</a></p>",
        "id": 400152514,
        "sender_full_name": "loogle",
        "timestamp": 1699024261
    },
    {
        "content": "<p>Could we add loogle to duckduckgo? :)</p>",
        "id": 400153395,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699024545
    },
    {
        "content": "<p>Sure, just do it :-) <span aria-label=\"duck\" class=\"emoji emoji-1f986\" role=\"img\" title=\"duck\">:duck:</span></p>",
        "id": 400153517,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699024573
    },
    {
        "content": "<p>I've submitted :) not sure if they encourage many/few people to suggest it!</p>",
        "id": 400156092,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699025360
    }
]