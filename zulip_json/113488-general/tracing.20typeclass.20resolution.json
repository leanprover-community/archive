[
    {
        "content": "<p>A MWE using mathlib3 :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.filtered_colimit_commutes_finite_limit</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_filtered</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fin_category</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">colimit_limit_to_limit_colimit_cone_iso'</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">тед</span> <span class=\"n\">K</span> <span class=\"bp\">тед</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">colimit_limit_to_limit_colimit_cone</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">colimit_limit_to_limit_colimit_cone</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">colimit_limit_to_limit_colimit_cone</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- START HERE</span>\n    <span class=\"c1\">-- apply is_iso.comp_is_iso, -- goals accomplished</span>\n    <span class=\"c1\">-- refine @is_iso.comp_is_iso _ _ _ _ _ _ _ _ _, -- goals accomplished</span>\n    <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">},</span> <span class=\"c1\">-- exact is_iso.comp_is_iso</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cones.cone_iso_of_hom_iso</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory.limits</span>\n</code></pre></div>\n<p>I was interested in seeing explicitly how typeclass inference solved this goal (whilst debugging during a port). <code>show_term</code> only told me it was <code>comp_is_iso</code> of some more instances, but I couldn't figure out how to explicitly capture the instances as goals in tactic mode again. How can I do this?</p>",
        "id": 352540796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682430040
    },
    {
        "content": "<p>I don't know of an automatic way, but one trick to prevent <code>refine</code> from filling in instances is to replace <code>_</code> with <code>(id _)</code>.</p>",
        "id": 352583584,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1682439318
    },
    {
        "content": "<p>There's also (_ : _) which does the same.</p>",
        "id": 352584579,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682439577
    }
]