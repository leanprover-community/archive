[
    {
        "content": "<p>What is the least painful way to show in Lean 4 that a structure whose components are <code>Fintype</code> is itself <code>Fintype</code>? A concrete example of interest:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">fst</span>\n</code></pre></div>",
        "id": 349042060,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681375909
    },
    {
        "content": "<p>Once <a href=\"https://github.com/leanprover-community/mathlib4/pull/3198\">mathlib4#3198</a> is merged, the answer will be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">fst</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Fintype</span>\n</code></pre></div>\n<p>That PR is fairly self-contained if you want to use it locally. It depends on some mathlib <code>Fintype</code> instances that are already in <code>Mathlib.Data.Fintype</code>.</p>",
        "id": 349043634,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681376199
    },
    {
        "content": "<p>Here's essentially what the derive handler is doing in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Sigma</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">fst</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Cow.proxyEquiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">fst</span> <span class=\"bp\">≃</span> <span class=\"n\">Cow</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">z.1</span><span class=\"o\">,</span> <span class=\"n\">z.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">c.fst</span><span class=\"o\">,</span> <span class=\"n\">c.snd</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Cow</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofEquiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Cow.proxyEquiv</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 349045085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681376480
    },
    {
        "content": "<p>Thanks. I spent some time looking for <code>Fintype.ofEquiv</code> but didn't find it.</p>",
        "id": 349046658,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681376758
    },
    {
        "content": "<p><code>library_search</code> ought to have been able to find it if you set things up in the right generality first</p>",
        "id": 349055974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681378721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What are you imagining would be the setup?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Sigma</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- suggestion: refine { elems := ?_ (id (Equiv.symm f)), complete := (_ : ∀ (x : β), x ∈ ?_) }</span>\n</code></pre></div>",
        "id": 349057319,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681379109
    },
    {
        "content": "<p>Yeah, I was hoping that would work...</p>",
        "id": 349057380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681379130
    },
    {
        "content": "<p>It doesn't work in Lean 3 either :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 349058054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681379303
    },
    {
        "content": "<p>Noted the <code>library_search</code> failure at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3426\">!4#3426</a>.</p>",
        "id": 349211882,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681419954
    }
]