[
    {
        "content": "<p>I'm trying to convert a set inside a fintype to a finset, but <code>set.to_finset</code> does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">s.to_finset</span>  <span class=\"c1\">--lean does not accept that</span>\n</code></pre></div>\n<p>What is the right way to do that?</p>",
        "id": 381510880,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1691073866
    },
    {
        "content": "<p>The error message you get is not \"Lean does not accept that\", right?</p>",
        "id": 381511962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691074076
    },
    {
        "content": "<p>The error message is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 381512252,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1691074128
    },
    {
        "content": "<p>Does <code>[decidable_pred (\\mem s)]</code> fix it?</p>",
        "id": 381513171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691074316
    },
    {
        "content": "<p>It does, thanks</p>",
        "id": 381514397,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1691074524
    },
    {
        "content": "<p>The explanation is that the algorithm is to iterate all of <code>ι</code> and keep the ones that are in <code>s</code>; but that means you need a way to test if they're in <code>s</code>!</p>",
        "id": 381518541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691075276
    },
    {
        "content": "<p>One way to debug this kind of question is to <code>Open Classical</code>, see if that fixes it, and then use <code>#synth</code> to find out what it found and then deduce why it didn't find it before</p>",
        "id": 381539236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691078850
    },
    {
        "content": "<p>Or in the old-fashioned, less-uppercase Lean 3 way: <code>open_locale classical</code> :)</p>",
        "id": 381757105,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691141804
    }
]