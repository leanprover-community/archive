[
    {
        "content": "<p>I hit the following when preparing examples for a lecture:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If I hover the mouse over <code>by_contra</code>, a box comes up saying \"Alias of <code>by_contradiction</code>\". But if I change <code>by_contra</code> into <code>by_contradiction</code>, it gives an <code>unknown tactic</code> error! Presumably I've done something silly here, but can someone tell me exactly what?</p>",
        "id": 393109396,
        "sender_full_name": "David Loeffler",
        "timestamp": 1695675402
    },
    {
        "content": "<p>No, I bet that the docstring for <code>by_contra</code> was just copied from mathlib3.</p>",
        "id": 393110217,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695675677
    },
    {
        "content": "<p>oh wait, I think this might be a bug.</p>",
        "id": 393110747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695675856
    },
    {
        "content": "<p>we have a term <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=by_contra#doc\">docs#by_contra</a> which is an alias of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=by_contradiction#doc\">docs#by_contradiction</a> (a term) which is an alias of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable.byContradiction#doc\">docs#Decidable.byContradiction</a></p>",
        "id": 393110797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695675875
    },
    {
        "content": "<p>we also have a tactic <code>by_contra</code> whose docstring is much longer. For some reason, it seems that the alias docstring is what shows up here.</p>",
        "id": 393110970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695675937
    },
    {
        "content": "<p>Let me try to minimize.</p>",
        "id": 393110982,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695675940
    },
    {
        "content": "<p>Aha, I hadn't spotted that <code>by_contra</code> is both a term and a tactic. (I was puzzled because I grepped for \"by_contradiction\" in the library and found lots of examples, but they were all terms.)</p>",
        "id": 393111598,
        "sender_full_name": "David Loeffler",
        "timestamp": 1695676155
    },
    {
        "content": "<p>Here is a minimized example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Alias</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"n\">alias</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">foo'</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 393111970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695676305
    },
    {
        "content": "<p>I'm not sure whether this is a bug in the <code>alias</code> command, or somewhere else...</p>",
        "id": 393112157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695676368
    },
    {
        "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> since it looks like he wrote the alias command in Std.</p>",
        "id": 393112343,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695676451
    },
    {
        "content": "<p>I don't think this is really to do with alias, other than the fact that alias adds a docstring by default. In the following snippet the tactic foo gets the hover of the term foo</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"sd\">/--blah-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 393124002,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695681683
    },
    {
        "content": "<p>Though interestingly if the tactic <code>foo</code> is given a docstring of its own that does show up</p>",
        "id": 393124597,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695682016
    },
    {
        "content": "<p>And very interestingly the hover of <code>by_contra h</code> is different to <code>by_contra</code></p>",
        "id": 393125133,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695682238
    },
    {
        "content": "<p>What’s strange is that the <code>by_contra</code> tactic does seem to have a docstring.</p>",
        "id": 393131085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695685789
    },
    {
        "content": "<p>Maybe it is just an issue with <code>Syntax</code>: for hovering purposes, terms seem to have priority over Syntax.  Here is a further example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--foo syntax-/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">foo</span>  <span class=\"c1\">-- hover shows `foo syntax`</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/--blah-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">foo</span>  <span class=\"c1\">-- hover shows `blah`</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">tacticFoo</span>  <span class=\"c1\">-- hover shows `foo syntax`</span>\n</code></pre></div>",
        "id": 393159402,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695702554
    },
    {
        "content": "<p>this is really weird, I tried to replicate the issue in the <code>hover.lean</code> test and it fails (which is to say it shows the tactic in both cases)</p>",
        "id": 393161344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695704046
    },
    {
        "content": "<p>and then if I copy the test verbatim to mathlib (even without importing anything from mathlib) the bug returns</p>",
        "id": 393161366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695704074
    },
    {
        "content": "<p>maybe the bug was recently fixed on accident?</p>",
        "id": 393161494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695704175
    },
    {
        "content": "<p>Mario, where is the <code>hover.lean</code> test?</p>",
        "id": 393162359,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695704858
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/interactive/hover.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/interactive/hover.lean</a></p>",
        "id": 393162694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695705113
    },
    {
        "content": "<p>Also, the hovers over the <em>tactics</em> <code>by_contra h</code> and <code>by_contra</code> do not match, within mathlib, with or without the <em>term</em> <code>by_contra</code> in the enviroment.</p>",
        "id": 393164332,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695706372
    },
    {
        "content": "<p>that's because they are different tactics, IIRC</p>",
        "id": 393170508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695709954
    },
    {
        "content": "<p>hm, strangely go-to-def also fails on <code>by_contra</code> in <code>example : True := by by_contra; sorry</code></p>",
        "id": 393170716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710054
    },
    {
        "content": "<p>oh, the issue was that I put the test in a namespace</p>",
        "id": 393171336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710384
    },
    {
        "content": "<p>This is what I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>  <span class=\"c1\">-- hover: `by_contra` docs</span>\n  <span class=\"n\">by_contra</span>    <span class=\"c1\">-- hover: `A placeholder term, to be synthesized by unification.`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I also think that <code>by_contra</code> is implemented at the same time as <code>by_contra h</code>, though.</p>",
        "id": 393171556,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695710503
    },
    {
        "content": "<p>oh, that makes sense</p>",
        "id": 393171580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710520
    },
    {
        "content": "<p>I think the generated <code>_</code> takes its position from the <code>by_contra</code> token</p>",
        "id": 393171645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710539
    },
    {
        "content": "<p>Hmm:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>  <span class=\"c1\">-- hover: `by_contra` docs</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">_</span>  <span class=\"c1\">-- hover: `by_contra` docs</span>\n  <span class=\"n\">by_contra</span>    <span class=\"c1\">-- hover: `A placeholder term, to be synthesized by unification.`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 393171693,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695710567
    },
    {
        "content": "<p>and the hover for that is blocking go-to-def and stuff for the <code>by_contra</code> tactic</p>",
        "id": 393171703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710575
    },
    {
        "content": "<p>Ah, the hover for the place-holder takes over when the place-holder is implicit!  I get it now, I think.</p>",
        "id": 393171760,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695710608
    },
    {
        "content": "<p>I'm replicating the term/tactic hover confusion in hover.lean now, I will try to track the issue down</p>",
        "id": 393171885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710660
    },
    {
        "content": "<p>Thanks, Mario!  I am curious to know what causes it.</p>",
        "id": 393171934,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695710687
    },
    {
        "content": "<p>oh, this already looks suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"c1\">-- try to find parser docstring from syntax tree</span>\n      <span class=\"k\">let</span> <span class=\"n\">stack</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">snap.stx.findStack</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">getRange</span><span class=\"bp\">?.</span><span class=\"n\">any</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">contains</span> <span class=\"n\">hoverPos</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">stxDoc</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">stack</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">stack</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">stack.findSomeM</span><span class=\"bp\">?</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"n\">snap.env</span> <span class=\"n\">stx.getKind</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"o\">,</span> <span class=\"n\">stx.getRange</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 393172058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710762
    },
    {
        "content": "<p>Btw, the implementation of the <code>by_contra</code> tactic does contain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unhygienic.run</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">%$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"c1\">-- HACK: hover fails without Unhygienic here</span>\n</code></pre></div>\n<p>so something is at play here, besides the \"precedence of doc-string\".</p>",
        "id": 393172114,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695710785
    },
    {
        "content": "<p>because <code>stx.getKind</code> returns the atom's string literal when called on an atom, so if that happens to be a declaration in the environment with a doc string...</p>",
        "id": 393172152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710806
    },
    {
        "content": "<p>in fact the same thing seems like it would also happen for local variables, based on this code</p>",
        "id": 393172251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710867
    },
    {
        "content": "<p>oh wait no, those use <code>identKind</code></p>",
        "id": 393172384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710928
    },
    {
        "content": "<p>although it does mean that if you define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- ident! -/</span> <span class=\"kd\">def</span> <span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>then you get <code>ident!</code> as the doc string on every identifier</p>",
        "id": 393172492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695710992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/by_contradiction.20not.20found.3F/near/393172492\">said</a>:</p>\n<blockquote>\n<p>although it does mean that if you define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- ident! -/</span> <span class=\"kd\">def</span> <span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>then you get <code>ident!</code> as the doc string on every identifier</p>\n</blockquote>\n<p>It may not be entirely undesirable to have a doc-string when hovering over an identifier (or any other piece of syntax) that informs you of what it is.</p>\n<p>Is it possible to have \"scoped hovers\"?</p>",
        "id": 393174564,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695711941
    },
    {
        "content": "<p>(fixed in <a href=\"https://github.com/leanprover/lean4/pull/2586\">lean4#2586</a>)</p>",
        "id": 393176109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695712669
    },
    {
        "content": "<blockquote>\n<p>It may not be entirely undesirable to have a doc-string when hovering over an identifier (or any other piece of syntax) that informs you of what it is.</p>\n</blockquote>\n<p>There is already a docstring when hovering over any piece of syntax, that is exactly what we have been seeing here</p>",
        "id": 393176204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695712711
    },
    {
        "content": "<p>identifiers are in a slightly different category though, the same mechanism doesn't work for them because they aren't considered <code>.node</code>s</p>",
        "id": 393176323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695712780
    },
    {
        "content": "<p>besides this, I think a hover on all identifiers wouldn't be that great, it's about as useful as the underscore hover that shows up everywhere</p>",
        "id": 393176422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695712821
    },
    {
        "content": "<p>there is much more useful information we should be showing</p>",
        "id": 393176452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695712837
    },
    {
        "content": "<p>Oh this is great that this issue has been isolated and is being worked on. I've known for a while that there's something weird going on here but always assumed it was my own lack of understanding.</p>",
        "id": 393178868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695713880
    },
    {
        "content": "<p>Splendid – thanks Mario and everyone else who contributed to fixing this so quickly!</p>",
        "id": 393189469,
        "sender_full_name": "David Loeffler",
        "timestamp": 1695718142
    }
]