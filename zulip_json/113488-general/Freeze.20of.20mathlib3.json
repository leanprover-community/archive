[
    {
        "content": "<p>Creating a thread for questions about the <a href=\"#narrow/stream/113486-announce/topic/Freeze.20of.20mathlib.203/near/368643609\">freeze</a> of <code>mathlib3</code>.</p>",
        "id": 368643919,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687454908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113486-announce/topic/Freeze.20of.20mathlib.203/near/368643609\">said</a>:</p>\n<blockquote>\n<p>Dear <code>mathlib</code> users,</p>\n<p>As more than 90% of <code>mathlib</code> is already ported to Lean 4, we (the maintainers) made the following decisions about freezing mathlib 3.</p>\n<ul>\n<li>We encourage the authors to move the development to <code>mathlib4</code> as soon as relevant parts of the library is ported. While we are not going to accept \"refactors\" for now, new features are accepted. You may want to use <a href=\"https://github.com/leanprover-community/mathport/blob/master/Oneshot/README.md\">oneshot mathport</a> to port your existing lean 3 file to lean 4.</li>\n<li>Mathlib 3 PRs that have been marked <code>awaiting-review</code> and have a greenlight from the CI by the end of July 14 <a href=\"https://time.is/Anywhere_on_Earth\">AOE</a> <time datetime=\"2023-07-15T12:00:00Z\">2023-07-15T00:00:00-12:00</time>  will be considered individually, and we will decide if it shall go through the same \"review; merge; forward-port\" process that we use  now. Meeting the deadline is a necessary but not a sufficient condition to have your PR merged into <code>mathlib</code> 3. E.g., if you're adding a new file, then we will probably ask you to port it yourself and PR to <code>mathlib</code> 4 so that we review it once instead of twice.</li>\n<li>All other mathlib 3 PRs will be marked with a new label <code>too-late</code> and will not be reviewed. We will not close them because authors may use them, e.g., as a reminders to forward-port them and reopen in <code>mathlib4</code> repo.</li>\n<li>We still intend to support everyone who is moving code from Lean 3 to Lean 4, and can provide advice on using <code>mathport</code> on individual files and separate projects. This announcement is not the end of that process: simply the end of merging new content to mathlib3.</li>\n</ul>\n<p>Yours,<br>\nMaintainers team</p>\n</blockquote>",
        "id": 368644790,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687455100
    },
    {
        "content": "<p>I have <a href=\"https://github.com/leanprover-community/mathlib/pull/17972\">!3#17972</a> on the waiting list. I didn't have time to prepare the ported version, but when I finally tried to use <code>mathport</code> it seemed as one of my imports did not exist in <code>mathlib4</code>, at least not with corresponding capitalized name (the original one is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/induction.lean\">here</a>).</p>\n<p>I need this for <code>induction'</code>. Where is this located? Thanks in advance!</p>",
        "id": 368666404,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1687460302
    },
    {
        "content": "<p><code>import Mathlib.Tactic</code> will give you <code>induction'</code> and then you can just right click on it to find where it actually is.</p>",
        "id": 368667285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687460495
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17973\">!3#17973</a> is on the waiting list, and I'd rather just move it to mathlib4.<br>\nHowever, this PR uses some clever <code>conv</code> tricks.  In particular, it uses <code>for</code> patterns  in <code>conv</code> that seem to work differently than with <code>pattern</code>.<br>\nIn lean3, <code>for</code> will return to the top level expression after executing a conv mode command on each matched expression. However, <code>pattern</code> seems to leave <code>conv</code> in a subexpression after the matches are executed.</p>\n<p>Is there any good documentation on lean4 conv mode, or docs on how to move from lean3 to lean4 conv? Most examples that I found in mathlib just abandoned <code>pattern</code>, or only use it once.</p>",
        "id": 373330717,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688764809
    },
    {
        "content": "<p>FWIW I reviewed <a href=\"https://github.com/leanprover-community/mathlib/pull/17973\">!3#17973</a> . I think the <code>conv</code> questions you raise here are great.</p>",
        "id": 373350510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688774290
    },
    {
        "content": "<p>since I'm planning on closing this PR in favor of a mathlib4 one, I'll be responding to these comments on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5766\">!4#5766</a></p>",
        "id": 373353400,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688775891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382349\">Calvin Lee</span> <a href=\"#narrow/stream/113488-general/topic/Freeze.20of.20mathlib3/near/373330717\">said</a>:</p>\n<blockquote>\n<p>In lean3, <code>for</code> will return to the top level expression after executing a conv mode command on each matched expression.</p>\n</blockquote>\n<p>Is this what you're looking for? You can use a sub-<code>conv</code> to temporarily focus on a goal, navigate (using <code>pattern</code> for example), do transformations, and then after the sub-<code>conv</code> you have the transformed version of the goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pattern</span> <span class=\"n\">t</span>\n    <span class=\"c1\">-- do transformations</span>\n    <span class=\"bp\">...</span>\n  <span class=\"c1\">-- now we're back but with a transformed goal</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(Linking to your other thread for anyone who might come across this message, here's a rough guide to everything you can do with Lean 4 <code>conv</code> mode: <a href=\"#narrow/stream/270676-lean4/topic/conv.20documentation/near/373668019\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/conv.20documentation/near/373668019</a>)</p>",
        "id": 373671682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688900131
    },
    {
        "content": "<p>indeed<br>\nthis is the commit that fixed everything <a href=\"https://github.com/leanprover-community/mathlib4/pull/5766/commits/6d8d90501764606634fb73514e67049562048ea3\">https://github.com/leanprover-community/mathlib4/pull/5766/commits/6d8d90501764606634fb73514e67049562048ea3</a></p>",
        "id": 373773458,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688932823
    },
    {
        "content": "<p>This was probably not intentional, but here's a fun fact: The mathlib 3 cutoff date is 15th July 2023 (almost everywhere I guess), which is exactly 10 years after Leo's <a href=\"https://github.com/leanprover/lean4/commit/4f5cafdebfa02c041f4dcd8c2ebe3e463bf32343\">first Lean commit</a> on <code>Mon Jul 15 18:43:32 2013 -0700</code>.</p>",
        "id": 375366711,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1689362554
    },
    {
        "content": "<p>coincidence?!?!!!</p>",
        "id": 375370737,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689363536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/113488-general/topic/Freeze.20of.20mathlib3/near/368666404\">said</a>:</p>\n<blockquote>\n<p>I have <a href=\"https://github.com/leanprover-community/mathlib/pull/17972\">!3#17972</a> on the waiting list. I didn't have time to prepare the ported version, but when I finally tried to use <code>mathport</code> it seemed as one of my imports did not exist in <code>mathlib4</code>, at least not with corresponding capitalized name (the original one is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/induction.lean\">here</a>).</p>\n<p>I need this for <code>induction'</code>. Where is this located? Thanks in advance!</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"327749\">@Pedro Sánchez Terraf</span>, what is the status here? Should we try to review the mathlib3 PR, or can that be closed and you'll open a new Mathlib4 PR to replace it?</p>",
        "id": 378342289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690263105
    },
    {
        "content": "<p>I think it is better to close it, since it sightly modifies other files.<br>\nThanks for asking.</p>\n<p>PST.-</p>\n<p>—sent from mobile</p>\n<p>El mar, 25 de jul de 2023, 02:33, Zulip notifications &lt;<a href=\"mailto:noreply@zulip.com\">noreply@zulip.com</a>&gt;<br>\nescribió:</p>",
        "id": 378402889,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1690278187
    },
    {
        "content": "<p>Thanks, I've closed it.</p>",
        "id": 378403869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690278378
    }
]