[
    {
        "content": "<p>I am redesigning the levels of the natural number game in preparation for a formal launch in October. One comment I had about the original version (from Scott) was that I do not do a good job at all of teaching <code>simp</code>. The reason for this is clear -- in 2018 I didn't have a clue what <code>simp</code> did -- I was still in the mindset where I optimistically hoped that it \"proved all simple things\".</p>\n<p>But things move on and in NNG4 I will explain how to use the simplifier to prove things such as <code>a+b+c+d+e=e+d+c+b+a</code>. One thing I noticed during my preparation of this stuff was that whilst <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_zero#doc\">docs#Nat.add_zero</a> was completely unsurprisingly tagged <code>simp</code>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_succ#doc\">docs#Nat.add_succ</a> was not. Is there a reason for this? Is this related to the reason we have <code>norm_cast</code> and <code>push_cast</code>: it may not be a good idea to train the simplifier to push <code>succ</code> in any particular direction, and it would be better to have bespoke tactics which move it? In NNG itself I think that it would save a lot of time if it were <code>simp</code> in the sense that the simplifier would then do more automatically.</p>",
        "id": 383940405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691756824
    },
    {
        "content": "<p>For <code>Nat.add_succ : n + Nat.succ m = Nat.succ (n + m)</code>, the questions is whether it's more useful to have <code>+</code> on the outside or <code>succ</code> on the outside, and it's easiest to be neutral and not choose</p>",
        "id": 383944152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691757397
    },
    {
        "content": "<p>I think the natural number game is kind of a niche case. When proving things about your definitions you often want to unfold them, but not after you've already proved your basic lemmas. I don't see any reason why one should be preferred, and I think too many simp lemmas can lead to other simp lemmas not triggering (I think it is useful to not have <code>add_assoc</code> and <code>add_comm</code> as <code>simp</code> lemmas for this reason, but I don't know of a concrete reason why.</p>",
        "id": 383945666,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691757645
    },
    {
        "content": "<p>For NNG it's unambiguously true that you want to pull succs out, and once you have developed enough machinery you then banish <code>succ</code> completely (for example the function is not taught to undergraduates, it being a special case of addition).</p>",
        "id": 383946193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691757741
    },
    {
        "content": "<p>It's difficult to banish succ because the induction tactic still makes goals involving <code>succ</code>.</p>",
        "id": 383947211,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691757925
    },
    {
        "content": "<p>I think that's the only barrier to banishing succ which is something I wholeheartedly support.</p>",
        "id": 383947370,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691757956
    },
    {
        "content": "<p>I think this might be an argument for <code>local attribute [simp] Nat.add_succ</code> within NNG</p>",
        "id": 383948020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691758072
    },
    {
        "content": "<p>Or perhaps a <code>nng_simps</code> simp set like we have for <code>mlfd_simps</code></p>",
        "id": 383948130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691758086
    },
    {
        "content": "<p>I agree that would make the nng easier, but I don't know if that's a good thing  pedagogically.</p>",
        "id": 383948308,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691758128
    },
    {
        "content": "<p>Yes! I don't teach <code>simp</code> too early, because then every early level is <code>induction &lt;;&gt; simp [IH]</code></p>",
        "id": 383958717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691759869
    }
]