[
    {
        "content": "<p>When I try to define the function </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span>   <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prod.lex</span> <span class=\"n\">has_lt.lt</span> <span class=\"n\">has_lt.lt</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n    <span class=\"n\">prod.lex.left</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Lean (3) asks me to provide a term of type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">prod.lex</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_lt.lt</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_lt.lt</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"n\">k</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk</span> <span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"bp\">.</span><span class=\"n\">nat.has_add</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>even though h has type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">prod.lex</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_lt.lt</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_lt.lt</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"n\">k</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I really don't get the problem. How would I even provide a term of this type?</p>",
        "id": 356991081,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1683640137
    },
    {
        "content": "<p>This is indeed very confusing, it looks like something in the default decreasing tactic is failing in a bad way before it tries assumption at all, so even though your term should work its not even tried. I'm not sure if we should expect this to work as is, but fortunately the fix in this example is simple, just tell lean not to be clever, and only try assumption!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span>   <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prod.lex</span> <span class=\"n\">has_lt.lt</span> <span class=\"n\">has_lt.lt</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n    <span class=\"n\">prod.lex.left</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]}</span>\n</code></pre></div>",
        "id": 357008330,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683643540
    },
    {
        "content": "<p>Perfect, thank you!</p>",
        "id": 357071658,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1683656936
    }
]