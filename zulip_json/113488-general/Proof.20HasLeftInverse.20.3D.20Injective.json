[
    {
        "content": "<p>I want to proof </p>\n<blockquote>\n<p>A function f with nonempty domain is injective if and only if it has a left inverse.</p>\n</blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Inverse_function#Left_inverses\">https://en.wikipedia.org/wiki/Inverse_function#Left_inverses</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h_nonempty</span><span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.HasLeftInverse</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Function.HasLeftInverse.injective</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">h1</span><span class=\"bp\">;</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"gr\">sorry</span> <span class=\"k\">else</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It throws a error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>typeclass instance problem is stuck, it is often due to metavariables\n  Decidable (?m.110 ∈ Set.range ?m.35769)Lean 4\n</code></pre></div>\n<p>What can I do to fix it?</p>",
        "id": 375795113,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1689523539
    },
    {
        "content": "<p>Add <code>classical</code> to the proof</p>",
        "id": 375795324,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689523601
    },
    {
        "content": "<p>You don't need any of the <code>;</code>s there either</p>",
        "id": 375795689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689523730
    },
    {
        "content": "<p>I also don't know how to proof it.</p>",
        "id": 375796185,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1689523875
    },
    {
        "content": "<p><del>If you want to cheat... <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.HasLeftInverse.injective#doc\">docs#Function.HasLeftInverse.injective</a></del> Oh, that's the half you already found!</p>",
        "id": 375799909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689525202
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.invFun#doc\">docs#Function.invFun</a> is probably what you want to use</p>",
        "id": 375799995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689525239
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective.hasLeftInverse#doc\">docs#Function.Injective.hasLeftInverse</a></p>",
        "id": 375800209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689525304
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.injective_iff_hasLeftInverse#doc\">docs#Function.injective_iff_hasLeftInverse</a> is almost exactly your statement</p>",
        "id": 375800254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689525333
    }
]