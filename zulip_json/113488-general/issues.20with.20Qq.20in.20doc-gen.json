[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> it seems like doc-gen has quite some trouble with <code>Qq</code>. Probably you already know this, and maybe it's a hard problem, but in case you don't, see for example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Qq.checkTypeQ#doc\">docs#Qq.checkTypeQ</a></p>",
        "id": 387905884,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693322716
    },
    {
        "content": "<p>I wasnt aware no, ill take a look when I'm home thanks!</p>",
        "id": 387916682,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693326117
    },
    {
        "content": "<p>Oh that does look bad yes</p>",
        "id": 387959273,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693340479
    },
    {
        "content": "<p>Does QQ have any sort of delaborator that doc-gen misses out on here? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> if it doesn't there isn't really much I can do about it.</p>",
        "id": 387959368,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693340510
    },
    {
        "content": "<p>It does seem to be missing <code>Q(...)</code> notation. Here's how that declaration pretty prints from within Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Qq.checkTypeQ</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"bp\">;</span>\n    <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">Lean.MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">«$</span><span class=\"n\">ty</span><span class=\"bp\">»</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 387959747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693340630
    },
    {
        "content": "<p>versus in doc-gen:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Qq.checkTypeQ</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">Qq.Quoted</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.sort</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Lean.MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Qq.Quoted</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 387959869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693340666
    },
    {
        "content": "<p>Aha! I think I have a clue. when I <code>#print</code> from within the file MetaM.lean in QQ itself I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Qq.checkTypeQ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"n\">Expr</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span>\n        <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"bp\">;</span>\n        <span class=\"n\">Quoted</span> <span class=\"o\">(</span><span class=\"n\">Expr.sort</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n      <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Quoted</span> <span class=\"n\">ty</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and doc-gen does very much work from a perspective of analyzing one olean/module at a time to benefit from more fine grained parallelism. Since the delaborators are defined in a file separate from the syntax the delaboration is not available here. So you want to import the delaborator in all the files that it doesn't import to enable pretty printing I guess?</p>",
        "id": 387961653,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693341295
    },
    {
        "content": "<p>I think the quickest fix is to import <code>Qq.Delab</code> from <code>Qq.MetaM</code>.  I've pushed that change just now, and it should hit doc-gen once mathlib upgrades.</p>",
        "id": 387974856,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1693345843
    },
    {
        "content": "<p>Mathlib upgrade: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6857\">#6857</a></p>",
        "id": 387987633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693351558
    }
]