[
    {
        "content": "<p>Hi there,</p>\n<p>I'm doing a project on topos theory and proof-assistants, and I would like to write some proofs about intuitionistic type theory as presented in Lambek and Scott \"Introduction to Higher Order Logic\", specifically I'm proving that its associated category is a topos. The sequent-tree-proofs are laborious to organise and write out by hand. Would Lean be an appropriate tool for this?</p>\n<p>I essentially want to define Term's inductively, and then create and work with sequents of the form \"p |--_X q\", where |--_X is entailment with a subscript set X of variables, and p,q are Terms with free variables all in X. I am imagining then implementing the rules of deduction as axioms like this, \"axiom rule : A -&gt; B\" where A and B are entailment expressions as before.</p>\n<p>I am unsure how I should marry Lean's existing type theory with the one I'm modelling. Should I endeavour to completely separate them? For example, one rule is \"(r|--_X p &amp; q) iff (r|--_X p) and (r|--_X q)\", in which case I imagine I should write my own conjuction for the use of \"&amp;\" and use the existing \"and\" and \"iff\" in Lean's library.</p>",
        "id": 194032029,
        "sender_full_name": "Billy Price",
        "timestamp": 1586958244
    },
    {
        "content": "<p>This sounds like approximately the right approach except that, instead of using <code>axiom</code>, make \"p |--_X q\" an inductive Prop with the rules of deduction as constructors.</p>",
        "id": 194032856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586958561
    },
    {
        "content": "<p>Or maybe a type rather than a prop depending on what you want to do with it</p>",
        "id": 194033438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586958781
    },
    {
        "content": "<p><a href=\"https://flypitch.github.io/\" title=\"https://flypitch.github.io/\">https://flypitch.github.io/</a> is probably useful as an example of embedding other theories into Lean.</p>",
        "id": 194034004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959011
    },
    {
        "content": "<p>Something like this? I'm still new to lean and I'm 100% certain this is wrong.<br>\n\"inductive entails (X : set) (p : Term) (q: Term)<br>\n| self_entail : entails X p p<br>\n\"</p>",
        "id": 194034049,
        "sender_full_name": "Billy Price",
        "timestamp": 1586959044
    },
    {
        "content": "<p><code> ```lean </code> at the top of your code and <code> ``` </code> at the bottom to quote it with syntax highlighting</p>",
        "id": 194034200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586959094
    },
    {
        "content": "<p>On top of Flypitch, there is also <a href=\"https://softwarefoundations.cis.upenn.edu/plf-current/Types.html#lab174\" title=\"https://softwarefoundations.cis.upenn.edu/plf-current/Types.html#lab174\">https://softwarefoundations.cis.upenn.edu/plf-current/Types.html#lab174</a>, which shows something related but not quite (also it's in Coq, so you have to translate syntax)</p>",
        "id": 194034396,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586959194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Intuitionistic.20Type.20Theory.20Proofs/near/194034004\" title=\"#narrow/stream/113488-general/topic/Intuitionistic.20Type.20Theory.20Proofs/near/194034004\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://flypitch.github.io/\" title=\"https://flypitch.github.io/\">https://flypitch.github.io/</a> is probably useful as an example of embedding other theories into Lean.</p>\n</blockquote>\n<p>Is their use of the unicode \\entails a defined notation or is that already part of lean?</p>",
        "id": 194034894,
        "sender_full_name": "Billy Price",
        "timestamp": 1586959394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span></p>",
        "id": 194036131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959876
    },
    {
        "content": "<p>we define our own notion of provability for first-order logic, see fol.lean in the Flypitch repo</p>",
        "id": 194066828,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1586972658
    },
    {
        "content": "<p>Provability is defined in the repository:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">formula</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">axm</span>     <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">impI</span>    <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"n\">formula</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">impE</span>    <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⟹</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">falsumE</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"n\">formula</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"err\">∼</span><span class=\"n\">A</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"err\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">allI</span>    <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">lift_formula1</span> <span class=\"err\">&#39;&#39;</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">allE₂</span>   <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">ref</span>     <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"err\">≃</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">subst₂</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">≃</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span><span class=\"o\">]))</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span><span class=\"o\">])</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L816\" title=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L816\">https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L816</a></p>\n<p>This is all done on top of our internal definition of formula of first-order logic.<br>\nHere <code> prf Γ A</code> stands for <code>Γ ⊢ A</code>. So for example <code>impE</code> states that if <code>Γ ⊢ A ⟹ B</code> and <code>Γ ⊢ A</code> then <code>Γ ⊢ B</code>. Some of the other rules are a bit more tricky to decipher, this is because we're using de Bruijn indices for formulas. More details can be found in the two papers we wrote about it: <a href=\"https://flypitch.github.io/papers/\" title=\"https://flypitch.github.io/papers/\">https://flypitch.github.io/papers/</a></p>",
        "id": 194259192,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1587014541
    }
]