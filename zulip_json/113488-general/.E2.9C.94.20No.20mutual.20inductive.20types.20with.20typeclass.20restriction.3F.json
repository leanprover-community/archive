[
    {
        "content": "<p>Here's a MWE. I can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">X.le</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">smth</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">X.lt</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt₁</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but not (say)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">op</span>   <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Y.le</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">smth</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Y.lt</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt₁</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Monoid.op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I know <code>lt₁</code> is not correct)</p>\n<p>it gives me the following error on Lean 4 (commit 345aa6f835aa):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">mutually</span> <span class=\"kd\">inductive</span> <span class=\"n\">types</span><span class=\"o\">,</span> <span class=\"kd\">parameter</span> <span class=\"n\">name</span> <span class=\"n\">mismatch</span> <span class=\"bp\">'</span><span class=\"n\">inst._</span><span class=\"bp\">@.</span><span class=\"n\">zp._hyg.450'</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">inst._</span><span class=\"bp\">@.</span><span class=\"n\">zp._hyg.439'</span>\n</code></pre></div>\n<p>Am I doing something wrong or is this a bug?</p>",
        "id": 325471485,
        "sender_full_name": "bruno cuconato",
        "timestamp": 1675363562
    },
    {
        "content": "<p>Should it be <code>Monoid.op y z</code>?</p>",
        "id": 325473139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675364008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/No.20mutual.20inductive.20types.20with.20typeclass.20restriction.3F/near/325473139\">said</a>:</p>\n<blockquote>\n<p>Should it be <code>Monoid.op y z</code>?</p>\n</blockquote>\n<p>Yes, thank you! </p>\n<p>(The problem persists, of course…)</p>",
        "id": 325477468,
        "sender_full_name": "bruno cuconato",
        "timestamp": 1675365248
    },
    {
        "content": "<p>That looks like a bug, but here's a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">op</span>   <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Y.le</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">smth</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Y.lt</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt₁</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Monoid.op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325506652,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675375562
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ! That does work around the problem, I appreciate it. Should I file an issue on github?</p>",
        "id": 325521525,
        "sender_full_name": "bruno cuconato",
        "timestamp": 1675382507
    },
    {
        "content": "<p>Please do.</p>",
        "id": 325522524,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675383068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"550232\">bruno cuconato</span> has marked this topic as resolved.</p>",
        "id": 325734230,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675462900
    }
]