[
    {
        "content": "<p>i don't understand how le_min works at that place </p>\n<p>example : min a b = min b a := by<br>\n  apply le_antisymm<br>\n  · show min a b ≤ min b a<br>\n<strong>apply le_min</strong>                     --what happens here<br>\n    · apply min_le_right<br>\n    apply min_le_left<br>\n  · show min b a ≤ min a b<br>\n    apply le_min<br>\n    · apply min_le_right<br>\n    apply min_le_left</p>\n<p>at that place we go from  the goal<br>\nmin a b ≤ min b a<br>\nto the goal <br>\nmin a b ≤ b</p>",
        "id": 398778354,
        "sender_full_name": "Leni Greco",
        "timestamp": 1698360431
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 398780600,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698361690
    },
    {
        "content": "<p><code>le_min</code> has type <code>x ≤ a → x ≤ b → x ≤ min a b</code>. So applying it to a goal <code>?_ ≤ min b a</code> creates two goals: <code>?_ ≤ b</code> and <code>?_ ≤ a</code>. (<code>?_</code> is <code>min a b</code> in your case)</p>",
        "id": 398780797,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698361814
    },
    {
        "content": "<p>thanks</p>",
        "id": 398783463,
        "sender_full_name": "Leni Greco",
        "timestamp": 1698363563
    }
]