[
    {
        "content": "<p>It's unfortunate that <code>(⋂ i, s i) = { x | ∀ i, x ∈ s i}</code> is not true by definition - it is actually equal to the unpleasant <code>{x | ∀ t, t ∈ set.range s → x ∈ t}</code>.</p>\n<p>Is it worth trying to change this?</p>",
        "id": 271348545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644441346
    },
    {
        "content": "<p>That makes me definitionally unhappy.</p>",
        "id": 271348722,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644441423
    },
    {
        "content": "<p>oh yeah I think I've been caught out by this before--is there a reason we couldn't change the <code>complete_lattice</code> instance or whatever to use the right-hand side of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_Inter\">docs#set.mem_Inter</a> as the definition?</p>",
        "id": 271354554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644444466
    },
    {
        "content": "<p>Yes, we get caught up in universe problems if we try to replace the <code>Inf</code> field of <code>complete_lattice</code> with <code>infi</code></p>",
        "id": 271354755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444542
    },
    {
        "content": "<p>ah</p>",
        "id": 271354826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644444571
    },
    {
        "content": "<p>We could treat set as a special case since it has special notation anyway, but that's probably stillnot worth it</p>",
        "id": 271354961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444618
    },
    {
        "content": "<p>There might be a middle ground where we have a <code>has_lawful_infi.{u} α</code> typeclass that provides infi in a particular universe and proves it's consistent with Inf</p>",
        "id": 271355086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444689
    },
    {
        "content": "<p>And then if we end up in a universe mess somewhere we can just conjure an instance built from the Inf.</p>",
        "id": 271355195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444741
    },
    {
        "content": "<p>But you could also argue that tweaking definitional equality isn't worth that trouble</p>",
        "id": 271355330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644444809
    },
    {
        "content": "<p>Wait no I don't understand now--<code>set.Inter</code> is a standalone top-level definition so we could just change it, right?</p>",
        "id": 271355525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644444901
    },
    {
        "content": "<p>I see what I said above was wrong but it's a slightly different thing.</p>",
        "id": 271355561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644444920
    },
    {
        "content": "<p>Yes, we could change <code>set.Inter</code> but then <code>⨅</code> and <code>⋂</code> would no longer be two notations for the same thing</p>",
        "id": 271356955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644445602
    },
    {
        "content": "<p>Which is useful because it encourages us to generalize set lemmas to lattices</p>",
        "id": 271356999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644445633
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/elements.20of.20an.20action.20which.20fix.20a.20set\">#Is there code for X? &gt; elements of an action which fix a set</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span></p>",
        "id": 271404360,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644484547
    }
]