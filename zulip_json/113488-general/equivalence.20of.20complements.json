[
    {
        "content": "<p>The following definition works but it is slow.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e₀</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e₀</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.1.subtype_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">not_congr</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subtype.coe_mk</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">subtype.coe_prop</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">he</span> <span class=\"o\">(</span><span class=\"n\">e₀.symm</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩),</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e₀.apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e.injective</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">subtype.coe_prop</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">set.of_eq</span> <span class=\"bp\">$</span> <span class=\"n\">union_compl_self</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span>\n      <span class=\"o\">(</span><span class=\"n\">equiv.set.union</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">and_imp.2</span> <span class=\"n\">absurd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">e₀.sum_congr</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span>\n      <span class=\"o\">(</span><span class=\"n\">equiv.set.union</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">and_imp.2</span> <span class=\"n\">absurd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">set.of_eq</span> <span class=\"bp\">$</span> <span class=\"n\">union_compl_self</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">union_apply_left</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">}⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">union_apply_left</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">he</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">union_apply_right</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subtype_congr</span><span class=\"o\">]</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">subtype_congr</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">union_apply_right</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213128903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602580430
    },
    {
        "content": "<p>Any ideas how I can make it faster?</p>",
        "id": 213129027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602580482
    },
    {
        "content": "<p>I didn't measure parse time but Emacs shows they busy indicator  for a few seconds.</p>",
        "id": 213129082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602580522
    },
    {
        "content": "<p>What commit are you on? This doesn't quite work for me, looks like <code>set</code> namespacing maybe? <code>open set</code> doesn't quite fix it.</p>",
        "id": 213129425,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1602580721
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">set.sum_compl_symm_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">equiv.set.sum_compl</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inl</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">set.sum_compl_symm_apply_of_mem</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">set.sum_compl_symm_apply_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">equiv.set.sum_compl</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">sum.inr</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">set.sum_compl_symm_apply_of_not_mem</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">subtype_congr_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">e.subtype_congr</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e₀</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e₀</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">subtype_congr</span> <span class=\"n\">e</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">not_congr</span> <span class=\"bp\">$</span> <span class=\"n\">iff.intro</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subtype.coe_mk</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">e.prop</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">e₀</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_fn_coe_base</span><span class=\"o\">]</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">e₀.symm</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n                  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.prop</span> <span class=\"o\">(</span><span class=\"n\">e₀.symm</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩)],</span>\n                        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">]</span> <span class=\"o\">})</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e₀.symm</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e₁</span><span class=\"o\">,</span>\n    <span class=\"n\">subtype.mk</span>\n      <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">s</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set.sum_compl</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">t</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.sum_congr</span> <span class=\"n\">e₀</span> <span class=\"n\">e₁</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">set.sum_compl</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum.map_inl</span><span class=\"o\">,</span> <span class=\"n\">trans_apply</span><span class=\"o\">,</span> <span class=\"n\">sum_congr_apply</span><span class=\"o\">,</span>\n        <span class=\"n\">set.sum_compl_apply_inl</span><span class=\"o\">,</span> <span class=\"n\">set.sum_compl_symm_apply</span><span class=\"o\">]),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.sum_compl_symm_apply_of_mem</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">e.prop</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n          <span class=\"n\">sum.map_inl</span><span class=\"o\">,</span> <span class=\"n\">sum_congr_apply</span><span class=\"o\">,</span> <span class=\"n\">trans_apply</span><span class=\"o\">,</span>\n          <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">set.sum_compl_apply_inl</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.sum_compl_symm_apply_of_not_mem</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">sum.map_inr</span><span class=\"o\">,</span>\n          <span class=\"n\">subtype_congr_apply</span><span class=\"o\">,</span> <span class=\"n\">set.sum_compl_apply_inr</span><span class=\"o\">,</span> <span class=\"n\">trans_apply</span><span class=\"o\">,</span>\n          <span class=\"n\">sum_congr_apply</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum.map_inr</span><span class=\"o\">,</span> <span class=\"n\">subtype_congr_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">set.sum_compl_apply_inr</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">sum_congr_apply</span><span class=\"o\">,</span> <span class=\"n\">equiv.coe_trans</span><span class=\"o\">,</span>\n    <span class=\"n\">subtype.coe_eta</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">set.sum_compl_symm_apply_compl</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213152080,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602595054
    },
    {
        "content": "<p>In the process of doing this I noticed a duplicate definition. <code>equiv.sum_compl</code> and <code>equiv.set.sum_compl</code></p>",
        "id": 213152157,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602595083
    },
    {
        "content": "<p>Sorry, I've asked a question and fell asleep. Indeed, I forgot that I've added a couple of <code>simp</code> lemmas to make it compile.</p>",
        "id": 213162740,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602599350
    }
]