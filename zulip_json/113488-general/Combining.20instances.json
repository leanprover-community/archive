[
    {
        "content": "<p>Suppose I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isPrefixSublist</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">t</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isPrefixSublist</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"c1\">-- failed to synthesize Decidable (isPrefixSublist [1, 3] [1, 3, 1, 3, 4])</span>\n</code></pre></div>\n<p>In general, a sublist is not necessarily  a prefix of a list but every prefix is a sublist of a list.  </p>\n<p>Now, both prefix and sublist have Decidable instance definitions and I am wondering if there is a simpler way to combine this in some manner rather than having to define an entierly new Decidable instance that combines them for the definition given above?</p>",
        "id": 390077537,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694306021
    },
    {
        "content": "<p>I think using abbrev instead of def would work.</p>",
        "id": 390077996,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1694306294
    },
    {
        "content": "<p>Ah, indeed it does.  Thanks. Will go and read up on <code>abbrev</code></p>",
        "id": 390083086,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694309133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> Did you find where to read up on that? I've been struggling to find documentation on the <em>exact</em> behaviour of these keywords.</p>",
        "id": 390343842,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694448175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638715\">@ab</span> The best documentation I found, which doesn't really go into the inner workings of <em>why</em> <code>abbrev</code> works here and its differences with <code>def</code>, was in the lean 4 functional programming manual. Hence my understanding of this is still lacking as I haven't taken the time to try and dig through the code.</p>",
        "id": 390345422,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694448604
    },
    {
        "content": "<p><code>abbrev</code> makes a definition \"reducible\" (vs the default \"semireducible\"), which means that various processes in Lean are willing to unfold it automatically, for example typeclass inference or <code>simp</code>.</p>",
        "id": 390346866,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694449064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/113488-general/topic/Combining.20instances/near/390345422\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> The best documentation I found, which doesn't really go into the inner workings of <em>why</em> <code>abbrev</code> works here and its differences with <code>def</code>, was in the lean 4 functional programming manual. Hence my understanding of this is still lacking as I haven't taken the time to try and dig through the code.</p>\n</blockquote>\n<p><code>abbrev something := something else</code> is equivalent to <code>@[reducible] def something := something else</code>.</p>",
        "id": 390346887,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694449071
    },
    {
        "content": "<p>You usually want to have some control over whether certain definitions unfold or not when you apply certain tactics.</p>",
        "id": 390347130,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1694449152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> By the way, here's how I'd probably set this up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isPrefixSublist</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">isPrefixSublist</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isPrefixSublist</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"c1\">-- true</span>\n</code></pre></div>\n<p>This <code>inferInstanceAs</code> is convenient for unfolding definitions. I'm using a trick that <code>_ ∧ _</code> causes Lean to unfold <code>isPrefixSublist</code>, and then typeclass search can find the decidable instances for everything involved.</p>",
        "id": 390348472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694449658
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>  and <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> </p>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> are there any advantages of doing it the way you showed versus just using <code>abbrev</code> or just two different ways to do the same thing?  Curious if there are any pros/cons for the different approaches.</p>",
        "id": 390349517,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694450057
    },
    {
        "content": "<p>I think a good rule of thumb is that in an <code>abbrev</code> each argument should appear at most once in the body. There are some exceptions I believe like type arguments or instance arguments. The problem is that <code>abbrev</code> can cause exponential blowup if you're not paying attention. For example if you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">ohno</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>then <code>ohno (ohno (ohno (onno n)))</code> is already 256 copies of <code>n</code> added together.</p>",
        "id": 390350062,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694450286
    },
    {
        "content": "<p>If you define your own instance with a plain <code>def</code> then you don't have to worry about this (but you did need to spend a little of your own time to define an instance).</p>",
        "id": 390350230,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694450379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> understood.  Thanks for the clarification and example.</p>",
        "id": 390350408,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694450442
    }
]