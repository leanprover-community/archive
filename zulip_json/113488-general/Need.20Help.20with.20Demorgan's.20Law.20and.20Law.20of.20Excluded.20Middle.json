[
    {
        "content": "<p>example (A B : Prop) : ¬(A ∧ B) → ¬A ∨ ¬B :=<br>\nλ nab =&gt;<br>\n  let proof_of_aornota := em A<br>\n  let proof_of_bornotb := em B</p>\n<p>match proof_of_aornota, proof_of_bornotb with<br>\n  | Or.inl pa, Or.inl pb =&gt; _<br>\n  | Or.inl pa, Or.inr nb =&gt; _<br>\n  | Or.inr na, Or.inl pb =&gt; _<br>\n  | Or.inr na, Or.inr nb =&gt; _ </p>\n<p>I am stuck on this problem.</p>",
        "id": 400864328,
        "sender_full_name": "Kevin Ikeland",
        "timestamp": 1699415362
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 400864365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415385
    },
    {
        "content": "<p>what is the trouble?</p>",
        "id": 400864430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415407
    },
    {
        "content": "<p>I do not know how to complete the proof.</p>",
        "id": 400864487,
        "sender_full_name": "Kevin Ikeland",
        "timestamp": 1699415446
    },
    {
        "content": "<p>in three of the cases, you have either not-A or not-B, and can apply <code>Or.inl</code> or <code>Or.inr</code> to the hypothesis to fill in the blank</p>",
        "id": 400864561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415503
    },
    {
        "content": "<p>example (A B : Prop) : ¬(A ∧ B) → ¬A ∨ ¬B :=<br>\nλ nab =&gt;<br>\n  let proof_of_aornota := em A<br>\n  let proof_of_bornotb := em B</p>\n<p>match proof_of_aornota, proof_of_bornotb with<br>\n  | Or.inl pa, Or.inl pb =&gt; _<br>\n  | Or.inl pa, Or.inr nb =&gt; Or.inr nb<br>\n  | Or.inr na, Or.inl pb =&gt; Or.inl na<br>\n  | Or.inr na, Or.inr nb =&gt; Or.inl na Like this? But what should i do for the first case?</p>",
        "id": 400864953,
        "sender_full_name": "Kevin Ikeland",
        "timestamp": 1699415740
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> = use triple backticks around your code to format it as code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">like</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 400865522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415995
    },
    {
        "content": "<p>for the first case, you have A and B, and not (A and B), so you get a contradiction</p>",
        "id": 400865760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416059
    },
    {
        "content": "<ul>\n<li><code>And.intro</code> makes a proof of <code>A /\\ B</code> from <code>A</code> and <code>B</code></li>\n<li><code>False.elim</code> makes a proof of any proposition given a proof of <code>False</code></li>\n<li>a negation like <code>¬(A ∧ B)</code> is really just syntax for <code>(A ∧ B) -&gt; False</code></li>\n</ul>",
        "id": 400866160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416153
    },
    {
        "content": "<p>Is it possible to do it without using And.intro? This is the complete code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">nab</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">proof_of_aornota</span> <span class=\"o\">:=</span> <span class=\"n\">em</span> <span class=\"n\">A</span>\n  <span class=\"k\">let</span> <span class=\"n\">proof_of_bornotb</span> <span class=\"o\">:=</span> <span class=\"n\">em</span> <span class=\"n\">B</span>\n\n  <span class=\"k\">match</span> <span class=\"n\">proof_of_aornota</span><span class=\"o\">,</span> <span class=\"n\">proof_of_bornotb</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">pb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">nb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">nb</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">na</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">pb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">na</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">na</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">nb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">na</span>\n</code></pre></div>",
        "id": 400867078,
        "sender_full_name": "Kevin Ikeland",
        "timestamp": 1699416693
    },
    {
        "content": "<p>it's the right tool for the job, I'm not sure why you don't want to use it</p>",
        "id": 400913435,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699438697
    },
    {
        "content": "<p>Also, do you really want to avoid tactic mode ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">em</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">em</span> <span class=\"n\">B</span> <span class=\"k\">with</span> <span class=\"o\">⟨(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"bp\">|</span> <span class=\"n\">h4</span><span class=\"o\">)⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n  <span class=\"bp\">·</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>is pretty readable</p>",
        "id": 400915776,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699439534
    },
    {
        "content": "<p>You can avoid the various <code>;</code> and <code>&lt;;&gt;</code> if you want, it just becomes longer.</p>",
        "id": 400915812,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699439555
    },
    {
        "content": "<p>Of course in tactic mode one can cheat and just use <code>tauto</code>, but I understand it's not very good for learning.</p>",
        "id": 400915898,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699439605
    },
    {
        "content": "<p>Can someone show me what a finished code using And.intro and False.elim looks like?</p>",
        "id": 400998556,
        "sender_full_name": "Kevin Ikeland",
        "timestamp": 1699467107
    },
    {
        "content": "<p>Have you tried using them one at a time?</p>",
        "id": 400998721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699467175
    },
    {
        "content": "<p>Do you know know how to iteratively replace <code>_</code>s in a term mode proof?</p>",
        "id": 400998759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699467194
    },
    {
        "content": "<p>No, I do not. I was told it was possible to prove this using  a few nested binary case analyses.</p>",
        "id": 400999072,
        "sender_full_name": "Kevin Ikeland",
        "timestamp": 1699467321
    },
    {
        "content": "<p>Sorry, I am kind of new to lean.</p>",
        "id": 400999102,
        "sender_full_name": "Kevin Ikeland",
        "timestamp": 1699467338
    },
    {
        "content": "<p>The intent of my question was really \"do you know how to have Lean help you with the proof as you write it\". Doing this in term mode is less taught than tactic mode; so if you haven't already been taught how to do it, you will have an easier time using tactics</p>",
        "id": 401012035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699472683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Need.20Help.20with.20Demorgan's.20Law.20and.20Law.20of.20Excluded.20Middle/near/400998759\">said</a>:</p>\n<blockquote>\n<p>Do you know know how to iteratively replace <code>_</code>s in a term mode proof?</p>\n</blockquote>\n<p>The answer to this is:</p>\n<ul>\n<li>put your cursor at the <code>_</code> with a red underline, and see what your goal is in the info view</li>\n<li>Pick a declaration or local hypothesis to apply, in this case <code>False.elim</code>, and write it</li>\n<li>Add suitably many underscores (here, 1), until the red underline is no longer under <code>False.elim</code></li>\n<li>Repeat until you have no <code>_</code>s left</li>\n</ul>",
        "id": 401012194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699472762
    },
    {
        "content": "<p>Tactic mode essentially plays this game in a more ergonomic way, at the expense of slighly more verbosity</p>",
        "id": 401012441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699472878
    }
]