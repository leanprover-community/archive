[
    {
        "content": "<p>I wrote a program that should solve AoC2023 Day 1, but it is way too slow. Any suggestions on how to optimise part 2? I don't even know what's slow about this. It took 16 seconds to run on <code>twovgtprdzcjjzkq3ffsbcblnpq</code> and there are 1000 lines in the input file, and I would like to get it to under a minute :) Is it because I am using recursive definitions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">String</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseDigit</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"sc\">'0'</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"sc\">'9'</span> <span class=\"k\">then</span> <span class=\"n\">c.val.toNat</span> <span class=\"bp\">-</span> <span class=\"mi\">0x30</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseNatAux</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">parseNatAux</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"n\">parseDigit</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseNat</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">parseNatAux</span> <span class=\"o\">(</span><span class=\"n\">s.toList.reverse</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getInput</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dir</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;cwd&gt;\"</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span><span class=\"n\">IO.FS.lines</span> <span class=\"o\">(</span><span class=\"n\">dir</span> <span class=\"bp\">++</span> <span class=\"s2\">\"/in\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">words</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n  <span class=\"s2\">\"zero\"</span><span class=\"o\">,</span> <span class=\"s2\">\"one\"</span><span class=\"o\">,</span> <span class=\"s2\">\"two\"</span><span class=\"o\">,</span> <span class=\"s2\">\"three\"</span><span class=\"o\">,</span> <span class=\"s2\">\"four\"</span><span class=\"o\">,</span> <span class=\"s2\">\"five\"</span><span class=\"o\">,</span> <span class=\"s2\">\"six\"</span><span class=\"o\">,</span> <span class=\"s2\">\"seven\"</span><span class=\"o\">,</span> <span class=\"s2\">\"eight\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nine\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"0\"</span><span class=\"o\">,</span> <span class=\"s2\">\"1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"2\"</span><span class=\"o\">,</span> <span class=\"s2\">\"3\"</span><span class=\"o\">,</span> <span class=\"s2\">\"4\"</span><span class=\"o\">,</span> <span class=\"s2\">\"5\"</span><span class=\"o\">,</span> <span class=\"s2\">\"6\"</span><span class=\"o\">,</span> <span class=\"s2\">\"7\"</span><span class=\"o\">,</span> <span class=\"s2\">\"8\"</span><span class=\"o\">,</span> <span class=\"s2\">\"9\"</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.getSuffix</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[]]</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">getSuffix</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">String.getSuffix</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.getSuffix</span> <span class=\"n\">s.toList</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">List.asString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.enumerate</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">l.length</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.IsPrefix'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">List.IsPrefix'</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">String.IsPrefix'</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">d1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">d2</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.IsPrefix'</span> <span class=\"n\">d1</span> <span class=\"n\">d2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">List.IsPrefix'</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"n\">hs</span> <span class=\"n\">generalizing</span> <span class=\"n\">t</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">induction'</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"n\">_</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">IsPrefix'</span><span class=\"o\">,</span> <span class=\"n\">List.IsPrefix'</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">decidableTrue</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">decidableTrue</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">decidableFalse</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">And.decidable</span> <span class=\"o\">(</span><span class=\"n\">dq</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">IsPrefix'</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">IsPrefix'</span> <span class=\"bp\">;</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">part1</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">line</span> <span class=\"k\">in</span> <span class=\"bp\">←</span><span class=\"n\">getInput</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">chars</span> <span class=\"o\">:=</span> <span class=\"n\">line.toList.filter</span> <span class=\"n\">Char.isDigit</span>\n    <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">chars.head</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">chars.getLast</span><span class=\"bp\">!</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">asString</span>\n    <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res</span> <span class=\"bp\">+</span> <span class=\"n\">parseNat</span> <span class=\"n\">val</span>\n  <span class=\"n\">return</span> <span class=\"n\">res</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">part2</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">getInput</span>\n  <span class=\"k\">let</span> <span class=\"n\">words'</span> <span class=\"o\">:=</span> <span class=\"n\">List.enumerate</span> <span class=\"n\">words</span>\n  <span class=\"n\">for</span> <span class=\"n\">line</span> <span class=\"k\">in</span> <span class=\"n\">input.toList.take</span> <span class=\"mi\">1</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lineSuffix'</span> <span class=\"o\">:=</span> <span class=\"n\">List.enumerate</span> <span class=\"o\">(</span><span class=\"n\">getSuffix</span> <span class=\"n\">line</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">tmp</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">suf</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">lineSuffix'</span> <span class=\"k\">do</span>\n      <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">words'</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">num.IsPrefix'</span> <span class=\"n\">suf</span> <span class=\"k\">then</span>\n          <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">tmp</span>\n    <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res</span> <span class=\"bp\">+</span> <span class=\"n\">tmp.getLast</span><span class=\"bp\">!.</span><span class=\"n\">snd</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"n\">tmp.head</span><span class=\"bp\">!.</span><span class=\"n\">snd</span>\n  <span class=\"n\">return</span> <span class=\"n\">res</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> #eval part1 -/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">part2</span>\n<span class=\"c\">/-</span><span class=\"cm\"> #print part2 -/</span>\n</code></pre></div>",
        "id": 405339942,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1701429276
    },
    {
        "content": "<p>Also if any of these are in Lean / Mathlib already that will be nice. In particular, <code>String.IsSuffix</code> exists but they write it with an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exists</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∃</span></span></span></span> which isn't decidable.</p>",
        "id": 405340118,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1701429344
    },
    {
        "content": "<p>I wonder if we should have a separate stream for AoC, if only to avoid spoilers.</p>",
        "id": 405340324,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701429434
    },
    {
        "content": "<p>Compiling it to C will likely make it faster</p>",
        "id": 405340362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701429457
    },
    {
        "content": "<p>I have waited 6 hours before posting, but if creating a new thread is possible that'll be great too :)</p>",
        "id": 405340367,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1701429459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code.202023/near/405340362\">said</a>:</p>\n<blockquote>\n<p>Compiling it to C will likely make it faster</p>\n</blockquote>\n<p>How can I do that?</p>",
        "id": 405340561,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1701429545
    },
    {
        "content": "<p>You should be able to add it as an <code>exe</code> in the lakefile</p>",
        "id": 405348674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701432408
    },
    {
        "content": "<p>Gareth, I did not look carefully at your code, but</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.isPrefixOf#doc\">docs#String.isPrefixOf</a> exists and is likely more optimised than yours;</li>\n<li>I reversed the strings and used the same function twice (and reversed the English words, of course!) -- not sure about the net effect of reversal vs scanning from the back.</li>\n</ul>\n<p>And this is the running time of my solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"n\">Advents</span><span class=\"bp\">/</span><span class=\"n\">day01.lean</span>\n\n<span class=\"o\">[</span><span class=\"n\">Part</span> <span class=\"mi\">1</span> <span class=\"n\">answer</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">Part</span> <span class=\"mi\">2</span> <span class=\"n\">answer</span><span class=\"o\">]</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">725</span><span class=\"n\">s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">635</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">090</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 405358703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701435795
    },
    {
        "content": "<p>(My project only depend on <code>Std</code>, in case it matters.)</p>",
        "id": 405358892,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701435853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code.202023/near/405340324\">said</a>:</p>\n<blockquote>\n<p>I wonder if we should have a separate stream for AoC, if only to avoid spoilers.</p>\n</blockquote>\n<p>I like the idea of a new thread: waiting some time may not be enough, due to timezones/other commitments that someone might have!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 405359059,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701435913
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Header</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Gareth, I think that your input data not will contain either <code>\"zero\"</code> or <code>\"0\"</code> as a substring, so you can ditch those.</p>\n<p>I doubt that this will improve substantially the running time, though!</p>\n</div></div>",
        "id": 405360608,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701436439
    },
    {
        "content": "<p>Thanks for the comments, I rewrote it based on your code and Arthur's (from another server) and got it down to 225ms :)</p>",
        "id": 405370454,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1701439429
    },
    {
        "content": "<p>there is also a simpler solution just by pattern matching</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>pattern-matching</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">processStringLastHelper</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨[]⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"wrong {s}\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'0'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'1'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'2'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'3'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'4'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'5'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'6'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">6</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'7'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">7</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'8'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">8</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'9'</span><span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">9</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'o'</span> <span class=\"o\">::</span> <span class=\"sc\">'r'</span> <span class=\"o\">::</span> <span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"sc\">'z'</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"sc\">'n'</span> <span class=\"o\">::</span> <span class=\"sc\">'o'</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'o'</span> <span class=\"o\">::</span> <span class=\"sc\">'w'</span> <span class=\"o\">::</span> <span class=\"sc\">'t'</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"sc\">'r'</span> <span class=\"o\">::</span> <span class=\"sc\">'h'</span> <span class=\"o\">::</span> <span class=\"sc\">'t'</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'r'</span> <span class=\"o\">::</span> <span class=\"sc\">'u'</span> <span class=\"o\">::</span> <span class=\"sc\">'o'</span> <span class=\"o\">::</span> <span class=\"sc\">'f'</span>  <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"sc\">'v'</span> <span class=\"o\">::</span> <span class=\"sc\">'i'</span> <span class=\"o\">::</span> <span class=\"sc\">'f'</span>  <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'x'</span> <span class=\"o\">::</span> <span class=\"sc\">'i'</span> <span class=\"o\">::</span> <span class=\"sc\">'s'</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">6</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'n'</span> <span class=\"o\">::</span> <span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"sc\">'v'</span> <span class=\"o\">::</span> <span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"sc\">'s'</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">7</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'t'</span> <span class=\"o\">::</span> <span class=\"sc\">'h'</span> <span class=\"o\">::</span> <span class=\"sc\">'g'</span> <span class=\"o\">::</span> <span class=\"sc\">'i'</span> <span class=\"o\">::</span> <span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">8</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"sc\">'e'</span> <span class=\"o\">::</span> <span class=\"sc\">'n'</span> <span class=\"o\">::</span> <span class=\"sc\">'i'</span> <span class=\"o\">::</span> <span class=\"sc\">'n'</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">9</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">processStringLastHelper</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">rest</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">processStringLast</span> <span class=\"o\">:=</span> <span class=\"n\">processStringLastHelper</span> <span class=\"bp\">∘</span> <span class=\"bp\">.</span><span class=\"n\">reverse</span>\n</code></pre></div>\n</div></div>",
        "id": 405538910,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1701526826
    },
    {
        "content": "<p>I had a question, while I was trying to run day1 I ran into a type inference problem<br>\nSo my day1.lean file looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isDigit</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Char.isDigit</span> <span class=\"n\">ch</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CharToNat</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Char.toNat</span> <span class=\"n\">ch</span> <span class=\"bp\">-</span> <span class=\"n\">Char.toNat</span> <span class=\"sc\">' '</span> <span class=\"bp\">-</span> <span class=\"mi\">16</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filterNumbers</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">String.toList</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.filter</span> <span class=\"n\">isDigit</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"n\">CharToNat</span>\n</code></pre></div>\n<p>but when I try to print the list (my Main.lean)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aoc2023</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">numbers</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.map</span> <span class=\"n\">filterNumbers</span> <span class=\"o\">[</span><span class=\"s2\">\"1abc2\"</span><span class=\"o\">,</span> <span class=\"s2\">\"pqr3stu8vwx\"</span><span class=\"o\">,</span> <span class=\"s2\">\"a1b2c3d4e5f\"</span><span class=\"o\">,</span> <span class=\"s2\">\"treb7uchet\"</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">List.head</span> <span class=\"n\">numbers</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n</code></pre></div>\n<p>The type infered for <code>filterNumbers</code> is <code>String -&gt; String</code> instead of <code>String -&gt; List Nat</code></p>\n<p>What am I doing wrong?</p>",
        "id": 405979188,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701755348
    },
    {
        "content": "<p>Where are you seeing <code>String -&gt; String</code>?</p>\n<p>I'm seeing that <code>filterNumbers</code> is <code>String -&gt; List Nat</code> and <code>numbers</code> is <code>List (List Nat)</code></p>",
        "id": 405979599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701755627
    },
    {
        "content": "<p>Maybe you're looking for <code>List.head!</code> instead of <code>List.head</code>?</p>\n<p>This fixes the type error: <code>let n := List.map List.head! numbers</code></p>",
        "id": 405979732,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701755729
    },
    {
        "content": "<p>so <code>lake build</code> gives the following error</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\nBuilding<span class=\"w\"> </span>Main\nerror:<span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"nv\">LEAN_PATH</span><span class=\"o\">=</span>./build/lib<span class=\"w\"> </span><span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>./build/lib<span class=\"w\"> </span>/home/sk/.elan/toolchains/leanprover--lean4---nightly-2022-10-18/bin/lean<span class=\"w\"> </span>./././Main.lean<span class=\"w\"> </span>-R<span class=\"w\"> </span>././.<span class=\"w\"> </span>-o<span class=\"w\"> </span>./build/lib/Main.olean<span class=\"w\"> </span>-i<span class=\"w\"> </span>./build/lib/Main.ilean<span class=\"w\"> </span>-c<span class=\"w\"> </span>./build/ir/Main.c\nerror:<span class=\"w\"> </span>stdout:\n./././Main.lean:8:13:<span class=\"w\"> </span>error:<span class=\"w\"> </span>typeclass<span class=\"w\"> </span>instance<span class=\"w\"> </span>problem<span class=\"w\"> </span>is<span class=\"w\"> </span>stuck,<span class=\"w\"> </span>it<span class=\"w\"> </span>is<span class=\"w\"> </span>often<span class=\"w\"> </span>due<span class=\"w\"> </span>to<span class=\"w\"> </span>metavariables\n<span class=\"w\">  </span>ToString<span class=\"w\"> </span><span class=\"o\">(</span>List<span class=\"w\"> </span>?m.64<span class=\"o\">)</span>\nerror:<span class=\"w\"> </span>external<span class=\"w\"> </span><span class=\"nb\">command</span><span class=\"w\"> </span><span class=\"sb\">`</span>/home/sk/.elan/toolchains/leanprover--lean4---nightly-2022-10-18/bin/lean<span class=\"sb\">`</span><span class=\"w\"> </span>exited<span class=\"w\"> </span>with<span class=\"w\"> </span>code<span class=\"w\"> </span><span class=\"m\">1</span>\n</code></pre></div>\n<p>but the lsp is showing the type signature in <code>numbers</code> as <code>String -&gt; String</code> I cannot screenshot it because as soon as I try to screenshot it vanishes</p>",
        "id": 405979881,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701755836
    },
    {
        "content": "<p>I'll try <code>List.head!</code></p>",
        "id": 405979897,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701755850
    },
    {
        "content": "<p>The lsp shows a problem even though the <code>lake build</code> commands compiles it without any issues<br>\n<a href=\"/user_uploads/3121/7WVarSBnj-DiUdTiSeNtL9Ng/Screenshot-from-2023-12-05-11-28-24.png\">Screenshot-from-2023-12-05-11-28-24.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7WVarSBnj-DiUdTiSeNtL9Ng/Screenshot-from-2023-12-05-11-28-24.png\" title=\"Screenshot-from-2023-12-05-11-28-24.png\"><img src=\"/user_uploads/3121/7WVarSBnj-DiUdTiSeNtL9Ng/Screenshot-from-2023-12-05-11-28-24.png\"></a></div>",
        "id": 405980037,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701755942
    },
    {
        "content": "<p>I'm not sure how that can be -- have you pasted exactly the code you have?</p>",
        "id": 405980083,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701755981
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\nBuilding<span class=\"w\"> </span>Main\nCompiling<span class=\"w\"> </span>Main\nLinking<span class=\"w\"> </span>aoc_2023\n\naoc_2023_lean<span class=\"w\"> </span>on<span class=\"w\"> </span><span class=\"w\"> </span>main<span class=\"w\"> </span><span class=\"o\">[</span>?<span class=\"o\">]</span><span class=\"w\"> </span>on<span class=\"w\"> </span>☁<span class=\"w\">  </span><span class=\"o\">(</span>ap-southeast-2<span class=\"o\">)</span>\n❯<span class=\"w\"> </span>./build/bin/aoc_2023\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">7</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405980085,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701755984
    },
    {
        "content": "<p>Have you tried restarting the lsp or just reopening the file</p>",
        "id": 405980213,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1701756026
    },
    {
        "content": "<p>I'm trying to keep it all in a structure<br>\n<a href=\"/user_uploads/3121/7c_Nvhied1NawFvbNigOaNj1/Screenshot-from-2023-12-05-11-30-08.png\">Screenshot-from-2023-12-05-11-30-08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7c_Nvhied1NawFvbNigOaNj1/Screenshot-from-2023-12-05-11-30-08.png\" title=\"Screenshot-from-2023-12-05-11-30-08.png\"><img src=\"/user_uploads/3121/7c_Nvhied1NawFvbNigOaNj1/Screenshot-from-2023-12-05-11-30-08.png\"></a></div>",
        "id": 405980322,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701756053
    },
    {
        "content": "<p>I'll try restarting the lsp</p>\n<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code.202023/near/405980213\">said</a>:</p>\n<blockquote>\n<p>Have you tried restarting the lsp or just reopening the file</p>\n</blockquote>",
        "id": 405980462,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701756091
    },
    {
        "content": "<p>Yeah restarting the lsp fixed it, sorry</p>",
        "id": 405980592,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701756127
    },
    {
        "content": "<p>A useful command is \"restart file\" too. It reloads all the dependencies of a file. Maybe you had an older version of <code>filterNumbers</code> still loaded in <code>Main.lean</code>?</p>",
        "id": 405980836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701756207
    },
    {
        "content": "<p>(on Mac, the keybinding is Cmd-shift-x)</p>",
        "id": 405980931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701756237
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 406019066,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701770549
    },
    {
        "content": "<p>is there a way to convert <code>List (IO Nat) -&gt; IO Unit</code>?<br>\nright now I have the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aoc2023</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNumbers</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.map</span> <span class=\"n\">filterNumbers</span> <span class=\"n\">lst</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">lst</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">List.isEmpty</span> <span class=\"n\">lst</span><span class=\"o\">))</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">lst</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.head</span><span class=\"bp\">!</span> <span class=\"n\">lst</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"n\">List.getLast</span><span class=\"bp\">!</span> <span class=\"n\">lst</span><span class=\"o\">)</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fileToNumbers</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">String.splitOn</span> <span class=\"n\">input</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">getNumbers</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">paths</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n <span class=\"s2\">\"/home/sk/aoc_2023_lean/Aoc2023/input_day1_part1.txt\"</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">fileToNumbers</span> <span class=\"n\">paths</span>\n</code></pre></div>\n<p>and I want to print <code>result</code></p>",
        "id": 406033067,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701774556
    },
    {
        "content": "<p>maybe use <code>List.mapM</code> instead to get a <code>List Nat</code> and then print that instead?</p>",
        "id": 406033488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701774685
    },
    {
        "content": "<p>oh is there a <code>List.mapM</code> I didn't know, thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> !</p>",
        "id": 406033680,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701774738
    },
    {
        "content": "<p>Hi I was having some issues with pattern matching <code>Substring</code> but the my question is tangential to that error.<br>\nThe following error message states</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\nBuilding<span class=\"w\"> </span>Aoc2023.Day1\nerror:<span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"nv\">LEAN_PATH</span><span class=\"o\">=</span>./build/lib<span class=\"w\"> </span><span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>./build/lib<span class=\"w\"> </span>/home/sk/.elan/toolchains/leanprover--lean4---nightly-2022-10-18/bin/lean<span class=\"w\"> </span>./././Aoc2023/Day1.lean<span class=\"w\"> </span>-R<span class=\"w\"> </span>././.<span class=\"w\"> </span>-o<span class=\"w\"> </span>./build/lib/Aoc2023/Day1.olean<span class=\"w\"> </span>-i<span class=\"w\"> </span>./build/lib/Aoc2023/Day1.ilean<span class=\"w\"> </span>-c<span class=\"w\"> </span>./build/ir/Aoc2023/Day1.c\nerror:<span class=\"w\"> </span>stdout:\n./././Aoc2023/Day1.lean:42:2:<span class=\"w\"> </span>error:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>compile<span class=\"w\"> </span>pattern<span class=\"w\"> </span>matching,<span class=\"w\"> </span>stuck<span class=\"w\"> </span>at\n<span class=\"w\">  </span>remaining<span class=\"w\"> </span>variables:<span class=\"w\"> </span><span class=\"o\">[</span>x✝:<span class=\"o\">(</span>String<span class=\"o\">)]</span>\n<span class=\"w\">  </span>alternatives:\n<span class=\"w\">    </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"p\">|</span>-<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"one\"</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span>h_1<span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"w\">    </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"p\">|</span>-<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"two\"</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span>h_2<span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"w\">    </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"p\">|</span>-<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"six\"</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span>h_3<span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"w\">  </span>examples:_\n</code></pre></div>\n<p>I want to know what <code>[] |- [\"one\"] =&gt; h_1()</code> means</p>",
        "id": 406316095,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701872474
    },
    {
        "content": "<p>and the other pattern matches that are also mentioned</p>",
        "id": 406316162,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1701872495
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Advent.20of.20Code.3F\">#general &gt; Advent of Code?</a> by <span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar 🦀 (he/him)</span>.</p>",
        "id": 406489272,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701936384
    }
]