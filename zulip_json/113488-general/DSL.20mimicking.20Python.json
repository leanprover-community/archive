[
    {
        "content": "<p>Hi all. In theory, I am curious to what extent can the Lean4 DSL-definition system implement the Python syntax? To put this in context, I wonder if it is possible to introduce Python syntax (as a DSL inside Lean) that is backed by a system of monads, say. Thank you!</p>",
        "id": 342679970,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1679094153
    },
    {
        "content": "<p>Do you mean to program in Lean 4 writing things as you would do in Python? Or do you mean to elaborate you DSL to a custom <code>PythonAST</code> inductive?</p>",
        "id": 342693227,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679102434
    },
    {
        "content": "<blockquote>\n<p>that is backed by a system of monads</p>\n</blockquote>\n<p>I don't understand what that means. Are you referring to an implementation of an evaluation routine for a <code>inductive PythonAST</code>?</p>",
        "id": 342693363,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679102534
    },
    {
        "content": "<p>Something like <code>def PythonAST.eval : PythonAST -&gt; PythonM Value</code>?</p>\n<p>Or do you want</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">sum_numbers</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>to be translated to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_numbers</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>?</p>",
        "id": 342693431,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679102605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"295150\">Petar Maymounkov</span> <a href=\"#narrow/stream/113488-general/topic/DSL.20mimicking.20Python/near/342679970\">said</a>:</p>\n<blockquote>\n<p>In theory, I am curious to what extent can the Lean4 DSL-definition system implement the Python syntax?</p>\n</blockquote>\n<p>I'm not terribly familiar with what the gruesome parts of the Python grammar are (whitespace sensitivity is one of them I assume, which we should have roughly covered), but I would say you can already get very close in current Lean 4 except for the lexical grammar, which currently cannot be customized apart from adding keywords. So you will not be able to replicate Python comment syntax, explicit line continuations, or the exact definition of Python identifiers such as it differs from Lean's, for example.</p>",
        "id": 342731596,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679128399
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>. This answers my question regarding the power of the grammar. <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Broadly I was curious whether both alternatives are possible. I imagine producing an AST is a given.  </p>\n<p>To be precise, my main question centered around the expressivity of the DSL grammar mechanics, as in how close can you make the DSL look like Python. </p>\n<p>For the second part (producing a monad), I wasn’t expecting an answer since this is probably has a trickier question at its core, which is can Python imperative semantics be converted into monads.</p>",
        "id": 342820837,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1679161920
    }
]