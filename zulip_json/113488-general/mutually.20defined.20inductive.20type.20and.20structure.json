[
    {
        "content": "<p>Is there a way to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n    <span class=\"kd\">inductive</span> <span class=\"n\">t1</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">C1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n\n    <span class=\"kd\">structure</span> <span class=\"n\">t2</span> <span class=\"n\">where</span>\n    <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">t1</span>\n    <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>where you have a structure and an inductive type mutually defined? I think currently you can only use a <code>mutual</code> block for multiple <code>def</code>s or <code>inductive</code> types</p>",
        "id": 376474206,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689714527
    },
    {
        "content": "<p>Structures are just inductive types with one constructor and which are not recursive. So there is no point in putting them in a mutual block, as the only time you need a mutual block is when both types are recursive, I think?</p>",
        "id": 376480115,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1689716901
    },
    {
        "content": "<p>yeah, I agree -- however there's no other way to use <code>t2</code> in the definition of <code>t1</code> and vice versa without defining them in a mutual block as far as I'm aware, and I'm not sure what the syntax for the same would be if not <code>mutual</code></p>",
        "id": 376480600,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689717101
    },
    {
        "content": "<p>I guess when I said <code>mutually defined</code> i didn't necessarily mean mutual induction or recursion, but more so the general sense of defining types in terms of one another. The closest thing I could find was a <code>mutual .. end</code> block but it's possible something else exists for this purpose</p>",
        "id": 376481004,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689717321
    },
    {
        "content": "<p>Structure are supposed to be non-recursive, and rely on this property for important things like eta-expansion. In your example above, <code>t2</code> is recursive, and wouldn't be accepted as a structure even if it was \"inlined\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">t2</span> <span class=\"n\">where</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">t2</span> <span class=\"c1\">--unknown identifier 't2'</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 376493526,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689722829
    },
    {
        "content": "<p>That makes sense, thanks!</p>",
        "id": 376842668,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689826590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span>  It is worth noting that you can essentially  achieve your original example with a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">t2_</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">t1</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">t1</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t2_</span> <span class=\"n\">t1</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">t2_</span> <span class=\"n\">t1</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">t1.C2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C2_</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 377194144,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689923156
    }
]