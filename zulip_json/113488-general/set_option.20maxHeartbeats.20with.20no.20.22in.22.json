[
    {
        "content": "<p>Am I right in thinking that <a href=\"https://github.com/leanprover-community/mathlib4/blob/c84172212bad5a41d3f0a6cee27c049e0484c04a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L345\">this line</a> <code>set_option maxHeartbeats 800000</code> (perhaps inadvertently) sets the max heartbeats to 800000 for the rest of the entire file, because of the lack of <code>in</code>? This is not the first time I have seen this happen either. I'm currently trying to fix raised maxHeartbeats issues and this is an extra piece of noise which I've only just realised is happening.</p>\n<p>If I'm right, am I also right in thinking that someone who knows a bit about shell scripting or something could search mathlib for all the times that this is occurring and then fix them (if this is indeed something we think is worth fixing?)</p>",
        "id": 379400058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690531842
    },
    {
        "content": "<p>I am not sure about the Lean question, but this is where these heartbeats appear unleashed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">regex</span><span class=\"o\">:</span> <span class=\"s2\">\"maxHeartbeats [0-9]*$\"</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Monoidal</span><span class=\"bp\">/</span><span class=\"n\">Braided.lean</span><span class=\"o\">:</span><span class=\"mi\">479</span><span class=\"o\">:</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">400000</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">FieldTheory</span><span class=\"bp\">/</span><span class=\"n\">Adjoin.lean</span><span class=\"o\">:</span><span class=\"mi\">1212</span><span class=\"o\">:</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">30000</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">FieldTheory</span><span class=\"bp\">/</span><span class=\"n\">IsAlgClosed</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">302</span><span class=\"o\">:</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">800000</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">FieldTheory</span><span class=\"bp\">/</span><span class=\"n\">IsAlgClosed</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">303</span><span class=\"o\">:</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">400000</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RepresentationTheory</span><span class=\"bp\">/</span><span class=\"n\">GroupCohomology</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">202</span><span class=\"o\">:</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">6400000</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RepresentationTheory</span><span class=\"bp\">/</span><span class=\"n\">GroupCohomology</span><span class=\"bp\">/</span><span class=\"n\">Resolution.lean</span><span class=\"o\">:</span><span class=\"mi\">345</span><span class=\"o\">:</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">800000</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">MetricSpace</span><span class=\"bp\">/</span><span class=\"n\">GromovHausdorff.lean</span><span class=\"o\">:</span><span class=\"mi\">415</span><span class=\"o\">:</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">300000</span>\n</code></pre></div>",
        "id": 379401047,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690531987
    },
    {
        "content": "<p>Thank you Damiano!</p>",
        "id": 379403457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690532326
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6206\">#6206</a></p>",
        "id": 379403606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690532349
    },
    {
        "content": "<p>Let's see what happens!</p>",
        "id": 379403652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690532355
    },
    {
        "content": "<p>Thank you even more!</p>",
        "id": 379403815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690532381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/set_option.20maxHeartbeats.20with.20no.20.22in.22/near/379403652\">said</a>:</p>\n<blockquote>\n<p>Let's see what happens!</p>\n</blockquote>\n<p>Yes -- the build might fail because declarations below the targetted ones might also need raised heartbeats (if my understanding of all this is correct).</p>",
        "id": 379404102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690532418
    },
    {
        "content": "<p>I would agree with your interpretation.</p>",
        "id": 379404268,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690532446
    },
    {
        "content": "<p>Indeed, here is the first timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Monoidal</span><span class=\"bp\">/</span><span class=\"n\">Braided.lean</span><span class=\"o\">:</span><span class=\"mi\">662</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379407159,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690532931
    },
    {
        "content": "<p>There are indeed errors, but we surely want <code>in</code> everywhere.</p>",
        "id": 379407601,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690533019
    },
    {
        "content": "<p>I was going to add the heartbeats, but I must have broken something about my lean configuration.  I'm fixing it now, but if someone else wants to add the first missing heartbeat, feel free to do so!</p>",
        "id": 379409143,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690533350
    },
    {
        "content": "<p>Ok, my issue was that I ran out of memory.  <code>Braided</code> only required raising more heartbeat limit, at least on my computer.</p>",
        "id": 379411640,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690533866
    },
    {
        "content": "<p>You can use <code>count_heartbeats in</code> to find the official number which is supposed to be there! It should be a power of two multiplied by the default amount (this convention helps a lot when doing the kind of debugging that I'm doing)</p>",
        "id": 379413505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690534223
    },
    {
        "content": "<p>I did that for the first timeout, I am now checking the remaining files: the only files that my computer did not check yet are <code>RepThy.GpCoho.{ Basic + Resol }</code>.</p>",
        "id": 379414407,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690534397
    },
    {
        "content": "<p>The PR has no timeouts on my computer!  The conclusion seems to be that the missing <code>in</code>s only shielded <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.associator_monoidal#doc\">docs#CategoryTheory.associator_monoidal</a> either consciously or not!</p>",
        "id": 379419036,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690535267
    },
    {
        "content": "<p>And the PR is now building the <code>library_search</code> cache (that maybe should be renamed to <code>exact?</code> also for CI?)!</p>",
        "id": 379420250,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690535483
    },
    {
        "content": "<p>The PR got merged: all the declarations that need to raise the <code>maxHeartbeats</code> should be doing this encased in their own <code>set_option [synthInstance.]maxHeartbeats xxx in</code> section.</p>",
        "id": 379444425,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690539762
    },
    {
        "content": "<p>I wonder if it would be better/possible/desirable to have</p>\n<ul>\n<li><code>set_option [synthInstance.]maxHeartbeats xxx</code> mean the same as <code>set_option [synthInstance.]maxHeartbeats xxx in</code> and</li>\n<li><code>set_option [synthInstance.]maxHeartbeats xxx all</code> mean the current interpretation without the <code>in</code>.</li>\n</ul>",
        "id": 379447354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690540179
    },
    {
        "content": "<p>I think we should have this instead:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379180750\">said</a>:</p>\n<blockquote>\n<p>Should we have a <code>bump_heartbeats N in foo</code> command that means something like \"<code>count_heartbeats</code>, but error if the result differs from <code>N</code> by more than 20%\"?</p>\n</blockquote>",
        "id": 379448186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690540279
    },
    {
        "content": "<p>Then we just ban <code>set_option</code> entirely</p>",
        "id": 379448267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690540293
    },
    {
        "content": "<p>Ah, I had forgotten about your suggestion!  I like yours better than mine!</p>",
        "id": 379449209,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690540431
    },
    {
        "content": "<p>While my use case is not common, I do set very large heartbeats for files because I am running programs non-interactively. There are likely to be other such uses (for example running in the background in a <code>Task</code> even when working interactively).</p>\n<p>I feel limiting capabilities is not a good thing - one can switch penalties by requiring <code>set_option maxHeartbeats xxx henceforth</code> with <code>in</code> being the default option.</p>",
        "id": 379491537,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690548166
    },
    {
        "content": "<p>Of course one can have a linter in mathib to enforce whatever is the consensus of the mathlib community.</p>",
        "id": 379491910,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690548240
    },
    {
        "content": "<p>I think the idea would be to ban it in mathlib, not globally, and only in the final PR'd code</p>",
        "id": 379494857,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690548713
    }
]