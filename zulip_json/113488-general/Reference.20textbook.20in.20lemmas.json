[
    {
        "content": "<p>There's a handful of lemmas in mathlib that are direct translations of textbook lemmas. Should we have a <code>@[textbook the_textbook_it_comes_from]</code> attribute to mark them as such and collect them somewhere on the website?</p>",
        "id": 357055134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683652893
    },
    {
        "content": "<p>Or should we do the reverse using the design of<code>undergrad.yml</code>, and reference textbook lemmas from a yaml file (per textbook?)</p>",
        "id": 357055534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683652983
    },
    {
        "content": "<p>Could also do, but the problem is that those tend to fall behind mathlib.</p>",
        "id": 357055692,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683653020
    },
    {
        "content": "<p><code>undergrad.yml</code> isn't allowed to fall out of sync</p>",
        "id": 357055769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683653039
    },
    {
        "content": "<p>CI fails if the lemmas it refers to disappear</p>",
        "id": 357055832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683653048
    },
    {
        "content": "<p>Mostly, the information isn't there in the file when you read it</p>",
        "id": 357055853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683653056
    },
    {
        "content": "<p>Well, the information in the textbook isn't there in the lean file either</p>",
        "id": 357055902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683653070
    },
    {
        "content": "<p>Okay, let me finish my sentence and then you can speak again</p>",
        "id": 357055975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683653092
    },
    {
        "content": "<p>Whichever way we pick, that would have the advantage of uncluttering docstrings (which could do without that information) and (in the attribute version) uniformly mark such textbook lemmas within the files. Further, it would be a way to link back and forth in a textbook translation, or even generate the textbook translation from more mathlib-style files.</p>",
        "id": 357056623,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683653249
    },
    {
        "content": "<p>I guess Eric's solution has the advantage of reusing existing parts.</p>",
        "id": 357057082,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683653358
    },
    {
        "content": "<p>The yaml file could be replaced with a dsl of some kind in lean4, that repeated the statements</p>",
        "id": 357057206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683653392
    },
    {
        "content": "<p>The problem I see with this yaml approach is that the information disappears from the file in question. Maybe we can solve that by having doc-gen generate a link back to the yamls a file belongs to?</p>",
        "id": 357058105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683653616
    },
    {
        "content": "<p>I think it's ok for the information to be missing from the source, but doc-gen should certainly show these cross-links</p>",
        "id": 357058420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683653673
    },
    {
        "content": "<p>(I think doc-gen4 struggles to show attributes a lot of the time anyway)</p>",
        "id": 357058517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683653697
    },
    {
        "content": "<p>Do we have any sort of way to create special markdown link extensions? Like \"This lemma is [rudin1953 Theorem 2.2].\", and then there'd be a reference link in the docstring, and the references page could have backlinks.</p>",
        "id": 357058979,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683653827
    },
    {
        "content": "<p>Yes, but:</p>\n<ul>\n<li>Doing it in mathlib3 likely involves switching to a more sane markdown package in doc-gen. I made a start on this a while back, but...</li>\n<li>Doing it in mathlib4 requires modifying the markdown parser written in Lean, which is unrelated to any work spent above.</li>\n</ul>",
        "id": 357060369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683654116
    },
    {
        "content": "<p>Don't we actually already have something that's very close to this in the form of library notes?</p>",
        "id": 357060703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683654189
    },
    {
        "content": "<p>Using a loose interpretation of the word \"textbook\", another answer is to just create third-party projects like <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook\">https://github.com/eric-wieser/lean-matrix-cookbook</a> that contain the statement of every lemma in the textbook, and try to prove it with as short a lean expression as possible. Then a custom webpage could present this in a useful way</p>",
        "id": 357060749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683654201
    },
    {
        "content": "<p>This also captures things like \"this is a generalization of [textbook result], by showing precisely what the special case looks like\"</p>",
        "id": 357060866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683654239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Reference.20textbook.20in.20lemmas/near/357060703\">said</a>:</p>\n<blockquote>\n<p>Don't we actually already have something that's very close to this in the form of library notes?</p>\n</blockquote>\n<p>I think there's very little value to building new features into doc-gen3. I don't think doc-gen4 supports library notes yet, but I haven't checked recently</p>",
        "id": 357061004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683654272
    },
    {
        "content": "<p>I think my point here is that we can record that a given lemma is a textbook lemma by representing it in the docstring, and a technical implementation for indexing is more of a nice touch than a must-have.</p>",
        "id": 357061621,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683654417
    },
    {
        "content": "<p>One of goals is to <em>remove</em> that information from the docstring and get it somewhere else, because it's unhelpful when you try to use a lemma.</p>",
        "id": 357061808,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683654467
    },
    {
        "content": "<p>I think I'd prefer the attribute to yaml files; I get that docgen can parse it, but if you're trying to understand the proof you're likely in source view, and being told \"oh this is in Washington\" would be really nice</p>",
        "id": 357061924,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1683654488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Reference.20textbook.20in.20lemmas/near/357061808\">said</a>:</p>\n<blockquote>\n<p>because it's unhelpful when you try to use a lemma.</p>\n</blockquote>\n<p>How do you mean? Are you saying it actively impedes using a lemma somehow if it's mentioned in the last line of a docstring?</p>",
        "id": 357062222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683654565
    },
    {
        "content": "<p>I guess I like uniformity <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 357062413,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683654618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Reference.20textbook.20in.20lemmas/near/357060749\">said</a>:</p>\n<blockquote>\n<p>Using a loose interpretation of the word \"textbook\", another answer is to just create third-party projects like <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook\">https://github.com/eric-wieser/lean-matrix-cookbook</a> that contain the statement of every lemma in the textbook, and try to prove it with as short a lean expression as possible. Then a custom webpage could present this in a useful way</p>\n</blockquote>\n<p>The thing is that those third-party projects have less visibility than if they were hosted on mathlib. It would be great if we could have all the textbook formalisations gathered somewhere on the mathlib website, and possibly even have them be parts of mathlib.</p>",
        "id": 357062645,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683654670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Reference.20textbook.20in.20lemmas/near/357062222\">said</a>:</p>\n<blockquote>\n<p>How do you mean? Are you saying it actively impedes using a lemma somehow if it's mentioned in the last line of a docstring?</p>\n</blockquote>\n<p>Nice idea, keeping “formalizer's hints” at the top, and further info (like references) at the bottom.</p>",
        "id": 357063046,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1683654752
    },
    {
        "content": "<p>In some IDE frontends, there's a distinction also between the short form of a docstring and the long form. The short form is what you see if you mouse over an identifier. For example, the Qt C++ documentation style has a <code>\\brief</code> command for the short form (<a href=\"https://doc.qt.io/qt-6/qtwritingstyle-cpp.html\">link</a>). Just bringing this up since it's something worth thinking about if the complaint is long docstrings.</p>",
        "id": 357064039,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683655012
    },
    {
        "content": "<p>One downside of an attribute might be that it makes it harder to generate the 'book-to-mathlib' list in the correct order.</p>",
        "id": 357116608,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1683673519
    },
    {
        "content": "<p>My preference would be to encourage more of these \"links\", and to have them be as close to the source code as possible. They are very helpful to readers!</p>",
        "id": 357118038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683674228
    },
    {
        "content": "<p>Another downside of the attribute is that if a lemma is removed there's not obvious obligation to find something else to move the attribute to; whereas if there's a yaml file (or DSL) then you have to think of something else to fill the gap</p>",
        "id": 357118496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683674453
    },
    {
        "content": "<p>I assume that whatever reason we chose for avoiding an attribute-based approach in <code>undergrad.yml</code> can be applied to the case of textbooks too</p>",
        "id": 357118572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683674510
    },
    {
        "content": "<p>Is there a possibility to have not a yaml file but a lean file for each book and all the references for a particular lemma is then displayed in the info-view? (maybe this is Eric's dsl idea?)</p>",
        "id": 357118575,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1683674511
    },
    {
        "content": "<p>I don't really know where the info view would show this stuff, since it shows tactic state not lemma information</p>",
        "id": 357118679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683674562
    },
    {
        "content": "<p>But yes, I'm imagining that a textbook is going to have results which are either:</p>\n<ul>\n<li>Exactly the version in mathlib</li>\n<li>A trivial specialization of a result in mathlib</li>\n<li>A consequence of a short series of lemmas in mathlib</li>\n</ul>\n<p>The attribute approach doesn't distinguish the top two cases and can't handle the third</p>",
        "id": 357118918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683674693
    },
    {
        "content": "<p>A <code>.lean</code> file could have markers for each of these cases (or deduce them from the proof syntax), and show them appropriately</p>",
        "id": 357118977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683674722
    },
    {
        "content": "<p>Both approaches aren't mutually exclusive, right?</p>",
        "id": 357119116,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683674795
    },
    {
        "content": "<p>But would you really want a yaml file listing every lemma of a bunch of randomly chosen textbooks? The idea of the undergrad file is to track progress with the slightly vague goal of formalizing an undergraduate curriculum. When formalizing textbook lemmas the goal is most often not for completeness (as everyone here knows formalization dictates that things be set up in a very different way to a textbook presentation), but rather to provide cross references with the informal literature. Personally I'm a fan of doing this in docstrings (maybe with some fixed syntax so the relevant info can be extracted if needed).</p>",
        "id": 357119119,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683674798
    },
    {
        "content": "<p>I want the attribute in the case where we are formalising some lemmas from a specific chapter of some textbook among other mathlib theory files. yaml files or recap lean files are instead perfect when you're exhaustively formalising a textbook.</p>",
        "id": 357119299,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683674902
    }
]