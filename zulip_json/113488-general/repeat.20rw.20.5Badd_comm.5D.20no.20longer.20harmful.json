[
    {
        "content": "<p>Ha! I just wrote a short paragraph in NNG4 warning users about the dangers of <code>repeat rw [add_comm]</code> because it can lead to loops (and this was a common question in NNG3 -- \"why did lean hang after I put it into an infinite loop?\"). I then tested it on an example and it didn't hang! And indeed this is also true in core Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- you can do it as long as you like. But</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- doesn't hang Lean</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this a bug? ;-) The tactic is not doing what its docstring says it will do, as far as I can see.</p>",
        "id": 393206974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695724940
    },
    {
        "content": "<p>probably because it does it 100000 times and then stops</p>",
        "id": 393207452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695725151
    },
    {
        "content": "<p>does it actually typecheck if you fill in the sorry?</p>",
        "id": 393207533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695725169
    },
    {
        "content": "<p>actually it seems to stop far short of that, you can see by putting your cursor in the <code>repeat</code> that it runs around 124 times</p>",
        "id": 393207870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695725307
    },
    {
        "content": "<p>It appears to be limited by <code>maxRecDepth</code>, it produces <code>n</code> goals if the rec depth is set to <code>4*n+16</code></p>",
        "id": 393208405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695725538
    },
    {
        "content": "<p>Also, closing the goal does not seem a problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- you can do it as long as you like. But</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- appears to work</span>\n</code></pre></div>",
        "id": 393208507,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695725592
    },
    {
        "content": "<p>and the reason is because the implementation of <code>repeat</code> is non-tail-recursive so it fails with a recursion overflow fairly quickly</p>",
        "id": 393208533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695725605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"repeat \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">repeat</span> <span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"bp\">$</span><span class=\"n\">seq</span> <span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 393208588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695725634
    },
    {
        "content": "<p><code>repeat'</code> is an elab and able to handle much larger recursions</p>",
        "id": 393208735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695725685
    },
    {
        "content": "<p>Oh I see, so it really does fail and then stop!</p>",
        "id": 393210022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695726200
    }
]