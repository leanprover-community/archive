[
    {
        "content": "<p>I'm trying formalising a statement of the following kind: Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> be a property of groups, that is satisfied by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>, and satisfies some inheritance properties (which I'll simplify for the sake of this question). Then, certain groups have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>.</p>\n<p>In order to set this up, I'd like to capture the notion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> in a structure. I've been trying to write the following, but I am not sure if it's the best way to do it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.TypeTags</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">GroupPropertyP</span> <span class=\"n\">where</span>\n  <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"n\">Group</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">PropInt</span><span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">Multiplicative.group</span>\n  <span class=\"n\">InheritanceProperty</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hG</span><span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">Subgroup.Normal</span> <span class=\"n\">N</span> <span class=\"bp\">→</span>  <span class=\"n\">toProp</span> <span class=\"n\">G</span> <span class=\"n\">hG</span>\n</code></pre></div>\n<p>Does anyone have suggestions on how to do this?</p>",
        "id": 393883681,
        "sender_full_name": "Matthias U",
        "timestamp": 1695975905
    },
    {
        "content": "<p>You could make <code>toProp</code> an input to the structure rather than a field, and then it would be a Prop-valued structure. My instinct is that you'll be unlikely to be proving theorems of the form \"If this property of groups satisfies my axioms, then this other property does too\", but will be rather proving theorems of the form \"If G and H are related in this way, and if G has property P and if property P satisfies my axioms, then H has property P\". You could even make the structure a class if you did it that way, and make your theorems be instances, so that the typeclass inference system would find them automatically.</p>",
        "id": 393884683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695976266
    },
    {
        "content": "<p>Maybe you could have a look at something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.PropertyIsLocal#doc\">docs#RingHom.PropertyIsLocal</a> ?</p>",
        "id": 393884782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695976301
    },
    {
        "content": "<p>For example we don't define a structure <code>CompactSpace</code> with a field <code>X : TopologicalSpace</code>, we have <code>CompactSpace X</code>. </p>\n<p>Note that in Yael's example, the property itself is also an input to the structure, not a field of the structure. And the structure is prop-valued.</p>",
        "id": 393885025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695976379
    },
    {
        "content": "<p>Note you can make your current definition easier to use by using <code>[]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">GroupPropertyP</span> <span class=\"n\">where</span>\n  <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">CheapRebuildingInt</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"n\">InheritanceProperty</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup.Normal</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">toProp</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>then Lean fills the <code>Group G</code> automatically for you.</p>",
        "id": 393891289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695978545
    },
    {
        "content": "<p>Thanks! I adopted <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  / <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> 's solution.</p>",
        "id": 393897031,
        "sender_full_name": "Matthias U",
        "timestamp": 1695980497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409809\">Matthias U</span> has marked this topic as resolved.</p>",
        "id": 393897046,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695980503
    }
]