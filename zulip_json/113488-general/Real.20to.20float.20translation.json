[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/113488-general/topic/NSF.20CAREER/near/354733939\">said</a>:</p>\n<blockquote>\n<p>We've done something like that here: <a href=\"https://github.com/verified-optimization/CvxLean/blob/main/CvxLean/Tactic/Solver/Float/RealToFloat.lean\">https://github.com/verified-optimization/CvxLean/blob/main/CvxLean/Tactic/Solver/Float/RealToFloat.lean</a> (cc <span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span>  <span class=\"user-mention silent\" data-user-id=\"132858\">Ramon Fernández Mir</span> )</p>\n<p>The mechanism allows us to register various expressions about the reals and their corresponding expression on floats, so that we can convert a complex real expression into an expression on floats and then evaluate it.</p>\n</blockquote>\n<p>I do not want to pollute the <code>NSF CAREER</code> thread as discussion about floats tend to spiral out of control.</p>\n<p>Cool approach! I'm wondering how scalable approach this is i.e. you do not have to manually reimplement whole library with <code>addRealToFloat</code> commands.</p>\n<p>It seems to work nice for a simple functions like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rsquare</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n</code></pre></div>\n<p>You can automatically generate commands</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rsquare.float_impl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n<span class=\"n\">addRealToFloat</span> <span class=\"n\">rsquare</span> <span class=\"o\">:=</span> <span class=\"n\">rsquare.float_impl</span>\n</code></pre></div>\n<p>However, you get into trouble with polymorphic functions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span>\n</code></pre></div>\n<p>You would have to generate infinite number of new declarations</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square.float</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">Float</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"n\">addRealToFloat</span> <span class=\"bp\">@</span><span class=\"n\">square</span> <span class=\"n\">Real</span> <span class=\"o\">:=</span> <span class=\"n\">square.float</span>\n<span class=\"kd\">def</span> <span class=\"n\">square.prod_float_float</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Float</span><span class=\"bp\">×</span><span class=\"n\">Float</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">×</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"n\">addRealToFloat</span> <span class=\"bp\">@</span><span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">Real</span><span class=\"bp\">×</span><span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">square.prod_float_float</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>It looks like that doing this automatically comes to implementing custom monomorphization compilation pass. This seems hard/lots of work. Any thought on this? Is there an existing monomorphization framework in Lean core  that could be reused for this?</p>",
        "id": 354760321,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682894224
    },
    {
        "content": "<p>I don't quite understand what you mean. The definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span>\n</code></pre></div>\n<p>does not depend on anything Real- or Float-specific. So I think it's enough to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">addRealToFloat</span> <span class=\"bp\">@</span><span class=\"n\">instMulFloat</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">instMulReal</span>\n</code></pre></div>\n<p>The constant <code>square</code> itself does not need to be replaced to make it work.</p>",
        "id": 354818149,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1682930383
    },
    {
        "content": "<p>Ahh sorry most likely I completely misunderstood how the whole thing works, I should actually run your code and play around with it first.</p>",
        "id": 354837579,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682936725
    }
]