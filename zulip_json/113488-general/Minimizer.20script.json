[
    {
        "content": "<p>I wrote a semi-automatic <a href=\"https://github.com/leanprover-community/mathlib4/blob/minimizer-script/scripts/minimizer.py\">minimization script</a> for creating a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> from a test case. This script is inspired by <a href=\"https://github.com/JasonGross/coq-tools\"><code>coq-bug-minimizer</code></a>.</p>\n<p>Basic usage is to create a file, say <code>testcase.lean</code>, that exhibits some error, for example a timeout. Run <code>./scripts/minimizer testcase.lean</code> and it will automatically create and update a more minimal <code>testcase.min.1.lean</code> which exhibits the same error¹. The file is updated as more minimization passes succeed. When no more minimization applies and the script stops, or you are tired of waiting and you kill the script, you can edit <code>testcase.min.1.lean</code> manually, and restart the script on your edited output by running <code>./scripts/minimizer testcase.min.1.lean</code>. The script produces <code>testcase.min.2.lean</code> etc.</p>\n<p>The architecture applies a sequence of minimization passes repeatedly, stopping when no more pass has made progress. The passes can do basically anything with the source, and make progress when the new file is different but exhibits the same error. I've implemented a few naïve textual replacements like substituting everything that comes after a <code>:=</code> with <code>sorry</code>. Since only a subset of those changes will actually work, the script includes a framework that bisects the set of changes to find exactly what can be done. That also means very brute-force changes like deleting declarations can be done in a pass.</p>\n<p>Current transformations are:</p>\n<ul>\n<li>stripping out comments</li>\n<li>deleting <code>#align</code> and #align_import`</li>\n<li>deleting declarations</li>\n<li>replacing everything after <code>:=</code> with <code>sorry</code></li>\n<li>deleting imports</li>\n<li>replacing imports with the contents of those files</li>\n</ul>\n<p>¹Currently, the script checks that the Lean compiler's stdout is the same on the minimized file and the original, ignoring filenames, line numbers and <code>sorry</code>.</p>",
        "id": 396109852,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697036833
    },
    {
        "content": "<p>Things are still very naïve and unoptimized, but it should be enough to get your code going.</p>",
        "id": 396110921,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697037181
    },
    {
        "content": "<p>This is amazing. A potential very useful transformation is replacing a structure field definition with <code>sorry</code>.</p>",
        "id": 396133760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697044193
    },
    {
        "content": "<p>An unfortunately non-local transformation that is often essential for good minimisation is to remove a structure field entirely (which then requires removing it from all constructors, too). I guess this can be converted into a sequence of local transformations by allowing adding a default value of <code>sorry</code>?</p>",
        "id": 396134199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697044368
    },
    {
        "content": "<p>In case it's interesting, or even better perhaps useful, <a href=\"https://github.com/DRMacIver/structureshrink\">https://github.com/DRMacIver/structureshrink</a> is a cool thing. Not sure if what the minimization script is doing can be coerced to run within it, but it implements a concrete shrinking algorithm.</p>",
        "id": 396136983,
        "sender_full_name": "Julian Berman",
        "timestamp": 1697045488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Minimizer.20script/near/396134199\">said</a>:</p>\n<blockquote>\n<p>An unfortunately non-local transformation that is often essential for good minimisation is to remove a structure field entirely (which then requires removing it from all constructors, too). I guess this can be converted into a sequence of local transformations by allowing adding a default value of <code>sorry</code>?</p>\n</blockquote>\n<p>That's an interesting idea! But I suspect that the local transformation wouldn't work in case someone calls the constructor directly or uses anonymous structure notation. On the other hand, there's nothing in the setup that prohibits calling Lean during a pass, so we could try to use that as feedback for how to fix a broken build.</p>",
        "id": 396139779,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697046737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Minimizer.20script/near/396136983\">said</a>:</p>\n<blockquote>\n<p>In case it's interesting, or even better perhaps useful, <a href=\"https://github.com/DRMacIver/structureshrink\">https://github.com/DRMacIver/structureshrink</a> is a cool thing. Not sure if what the minimization script is doing can be coerced to run within it, but it implements a concrete shrinking algorithm.</p>\n</blockquote>\n<p>That's an interesting algorithm! I don't think we want to interface with structureshrink directly, since the notion of minimal is quite different (in particular, we want our file to grow when we inline imports).</p>",
        "id": 396140397,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697047048
    },
    {
        "content": "<p>Something I've found essential in minimization previously is to be able to run the sources against two versions of Lean, preserving that it works in one, and errors with a specified error message in the other.</p>",
        "id": 396206024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697081457
    },
    {
        "content": "<p>I have left the script run on the field structure for <code>DirectLimit</code> for a night. Its progress is... not so impressive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DirectSum.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.DFinsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.FreeCommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Quotient</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">u₁</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">General</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">dec_ι</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DFinsupp.module</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">IsCentralScalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">IsCentralScalar</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_apply</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lmk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">i.val</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lof</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DFinsupp.lsingle</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lof_eq_of</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">single_eq_lof</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DFinsupp.single</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mk_smul</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">M</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">mk</span> <span class=\"n\">M</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">of_smul</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">of</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">support_smul</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">⊆</span> <span class=\"n\">v.support</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toModule</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">DFinsupp.lsum</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">φ</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_toModule_eq_coe_toAddMonoid</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">toModule</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">N</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">toAddMonoid</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAddMonoidHom</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">N</span> <span class=\"n\">φ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toModule_lof</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">toModule</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">N</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">toModule.unique</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ψ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">toModule</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">ψ.comp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ψ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ψ'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">linearMap_ext</span> <span class=\"o\">⦃</span><span class=\"n\">ψ</span> <span class=\"n\">ψ'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">⦄</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ψ.comp</span> <span class=\"o\">(</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ψ'.comp</span> <span class=\"o\">(</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ψ</span> <span class=\"bp\">=</span> <span class=\"n\">ψ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lsetToSet</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span> <span class=\"n\">apply</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">linearEquivFunOnFintype</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">DFinsupp.equivFunOnFintype</span> <span class=\"k\">with</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n      <span class=\"n\">ext</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">RingHom.id_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">DFinsupp.coe_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">linearEquivFunOnFintype_lof</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">linearEquivFunOnFintype</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">linearEquivFunOnFintype_symm_single</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">linearEquivFunOnFintype</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">linearEquivFunOnFintype_symm_coe</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">linearEquivFunOnFintype</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">lid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">DirectSum.id</span> <span class=\"n\">M</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">toModule</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">LinearMap.id</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">component</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ext_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lof_apply</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">component.of</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">Eq.recOn</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CongrLeft</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lequivCongrLeft</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">h.symm</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lequivCongrLeft_apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lequivCongrLeft</span> <span class=\"n\">R</span> <span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h.symm</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CongrLeft</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Sigma</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigmaLcurry</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"n\">i.1</span> <span class=\"n\">i.2</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">sigmaLuncurry</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"n\">i.1</span> <span class=\"n\">i.2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Sigma</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lequivProdDirectSum</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">α</span> <span class=\"n\">none</span> <span class=\"bp\">×</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">addEquivProdDirectSum</span> <span class=\"k\">with</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">DFinsupp.equivProdDFinsupp_smul</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">General</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Semiring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">dec_ι</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coeLinearMap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toModule</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coeLinearMap_of</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DirectSum.coeLinearMap</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsInternal.submodule_iSup_eq_top</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsInternal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">iSup</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsInternal.submodule_independent</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsInternal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice.Independent</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">IsInternal.collectedBasis</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsInternal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">repr</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">LinearEquiv.ofBijective</span> <span class=\"o\">(</span><span class=\"n\">DirectSum.coeLinearMap</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">≪≫ₗ</span>\n        <span class=\"n\">DFinsupp.mapRange.linearEquiv</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span> <span class=\"bp\">≪≫ₗ</span>\n      <span class=\"o\">(</span><span class=\"n\">sigmaFinsuppLequivDFinsupp</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsInternal.collectedBasis_mem</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsInternal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h.collectedBasis</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">a.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsInternal.isCompl</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">IsInternal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsCompl</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Semiring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">dec_ι</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isInternal_submodule_of_independent_of_iSup_eq_top</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice.Independent</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">iSup</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsInternal</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isInternal_submodule_iff_independent_and_iSup_eq_top</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsInternal</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">CompleteLattice.Independent</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">iSup</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsInternal.addSubgroup_independent</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsInternal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice.Independent</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CompleteLattice.independent_of_dfinsupp_sumAddHom_injective'</span> <span class=\"n\">_</span> <span class=\"n\">h.injective</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ring</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">dec_ι</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DirectedSystem</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_self'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">map_map'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"n\">hjk</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">hjk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hij</span> <span class=\"n\">hjk</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"n\">nonrec</span> <span class=\"kd\">theorem</span> <span class=\"n\">DirectedSystem.map_map</span> <span class=\"o\">[</span><span class=\"n\">DirectedSystem</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"n\">hjk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">hjk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hij</span> <span class=\"n\">hjk</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DirectLimit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum</span> <span class=\"n\">ι</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span>\n    <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">|</span>\n        <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n          <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">G</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">})</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DirectLimit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">addCommGroup</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">DirectLimit</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.addCommGroup</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">module</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">DirectLimit</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.module</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">DirectLimit</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mkQ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">G</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DirectLimit</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddCommGroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DirectLimit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→+</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→+</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→+</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FreeCommRing</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DirectLimit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FreeCommRing</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n    <span class=\"n\">Ideal.span</span>\n      <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">|</span>\n        <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">of</span> <span class=\"o\">(⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">of</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n          <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">of</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n            <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">of</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"bp\">+</span> <span class=\"n\">of</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n              <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">of</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">of</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DirectLimit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">commRing</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">DirectLimit</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Ideal.Quotient.commRing</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DirectLimit</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Field</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→+*</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DirectLimit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nontrivial</span> <span class=\"o\">[</span><span class=\"n\">DirectedSystem</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nontrivial</span> <span class=\"o\">(</span><span class=\"n\">Ring.DirectLimit</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_inv</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ring.DirectLimit</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ring.DirectLimit</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ring.DirectLimit</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">DirectLimit.exists_inv</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ring.DirectLimit</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">inv</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">field</span> <span class=\"o\">[</span><span class=\"n\">DirectedSystem</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">Ring.DirectLimit</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Ring.DirectLimit.commRing</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">DirectLimit.nontrivial</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span>\n    <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DirectLimit.mul_inv_cancel</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span>\n    <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 396240860,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697099694
    },
    {
        "content": "<p>is it still converging?</p>",
        "id": 396260398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697106643
    },
    {
        "content": "<p>One thing you could do to speed it up, assuming that your edits are quick and don't require lean information but the checking time is long, is to perform many steps in one go, and bisect if you overshoot. This is a good option for edits you don't think are likely to fail (like inlining) and less good for cases where most edits will fail (like deleting declarations, if the input is already mostly tree-shaken)</p>",
        "id": 396260968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697106890
    },
    {
        "content": "<p>In fact, the modifications I made last night already do this :D</p>\n<p>I think the real issue is that changes that have been rejected in previous passes are retried in the next pass, when we should really only focus on the parts of the file that changed.</p>",
        "id": 396276719,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697113172
    }
]