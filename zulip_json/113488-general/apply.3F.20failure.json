[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> my students found a very surprising <code>apply?</code> failure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hv.of_le</span> <span class=\"n\">le_top</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- apply?</span>\n</code></pre></div>\n<p>Trying <code>apply?</code> in the first proof return a lot of junk not including the relevant lemma. We really need suggestions that include the head symbol of the goal to appear first. In the second more concrete version it simply times out.</p>",
        "id": 406809713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702057538
    },
    {
        "content": "<p>I was wondering about better orderings for <code>apply?</code> suggestions. Every lemma that <code>apply?</code> tries comes with a discrimination tree, right? I think the size of this discrimination tree (number of nodes / number of non-* nodes, something like that) would be a reasonably good measure to how useful a lemma is: it means that you choose lemmas first that are more specific to the particular goal you're currently proving.</p>",
        "id": 406819865,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702061629
    },
    {
        "content": "<p>In the example I gave there is really no challenge at all: the goal is <code>ContDiff ...</code> and the relevant lemma has conclusion <code>ContDiff ...</code>.</p>",
        "id": 406822039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702062421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/apply.3F.20failure/near/406819865\">said</a>:</p>\n<blockquote>\n<p>I was wondering about better orderings for <code>apply?</code> suggestions. Every lemma that <code>apply?</code> tries comes with a discrimination tree, right? I think the size of this discrimination tree (number of nodes / number of non-* nodes, something like that) would be a reasonably good measure to how useful a lemma is: it means that you choose lemmas first that are more specific to the particular goal you're currently proving.</p>\n</blockquote>\n<p>Yes, this would be a nice. I haven't done this so far because it is slightly annoying to actually discover the indexing keys for the returned lemmas from a <code>DiscrTree</code>! We would need some additional plumbing to retrieve these as part of the lookup.</p>\n<p>I agree they could be used to give much nicer results.</p>",
        "id": 407342099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702339990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, for me the second example returns quite quickly, maybe you could double check this with current <code>master</code>. (I did fix a problem in <code>exact?</code> mid last week.)</p>",
        "id": 407342274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702340071
    },
    {
        "content": "<p>What lemma are you hoping to see at the top of the list in the second example?</p>",
        "id": 407342299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702340087
    },
    {
        "content": "<p>For the first example, <code>of_le</code> is returned as the 14th result. Not ideal, but at least it is still there.</p>\n<p>The reason <code>apply?</code> does not use <code>of_le</code> to close the goal is because of the side condition <code>1 ≤ ⊤</code> generated after using the hypothesis <code>hv</code>. Although this can be discharged by the <strong>tactic</strong> <code>trivial</code>, <code>solve_by_elim</code> only tries the <strong>term</strong> <code>trivial</code>, which can't solve this.</p>\n<p>We could boost the power of the <code>solve_by_elim</code> discharger for <code>apply?</code> by allowing it to in turn call <code>trivial</code>, ... but this is scope creep, and does come with a (maybe small?) performance cost.</p>",
        "id": 407342890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702340434
    },
    {
        "content": "<p>I confirm the problem no longer occurs on master. However The suggestion is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">ContDiff.of_le</span> <span class=\"bp\">?</span><span class=\"n\">h</span> <span class=\"bp\">?</span><span class=\"n\">hmn</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"n\">v</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">n</span>\n</code></pre></div>\n<p>instead of <code>refine ContDiff.of_le hv ?hmn</code>. Do you understand why?</p>",
        "id": 407353545,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702345735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644660\">@Robert Trosten</span> This is the apply bug from last week. Things would get better if you update the dependencies of your project.</p>",
        "id": 407353608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702345781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/apply.3F.20failure/near/407353545\">said</a>:</p>\n<blockquote>\n<p>I confirm the problem no longer occurs on master. However The suggestion is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">ContDiff.of_le</span> <span class=\"bp\">?</span><span class=\"n\">h</span> <span class=\"bp\">?</span><span class=\"n\">hmn</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"n\">v</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">n</span>\n</code></pre></div>\n<p>instead of <code>refine ContDiff.of_le hv ?hmn</code>. Do you understand why?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, it does this because it is not certain that using <code>hv</code> is a good idea. In particular, <code>hv</code> assigns the value of some other metavariable (the <code>ℕ∞</code> goal), but then we can't automatically close the remaining goal which depends on that, namely <code>1 ≤ ?n</code>.</p>\n<p>It we made the discharging process more powerful by allowing it to use the <code>trivial</code> tactic in addition to the <code>trivial</code> term, this would be resolved, because <code>by trivial : 1 ≤ ⊤</code> does actually work.</p>",
        "id": 407583605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702420444
    },
    {
        "content": "<p>Alternatively, we could just make the <code>exact?</code> discharger much more aggressive about using local hypotheses, even when it is not \"sure\" they are correct.</p>",
        "id": 407583661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702420477
    },
    {
        "content": "<p>I think it makes sense to be more aggressive because you can always delete <code>hv</code> from the suggestion if you don't like it (although it requires paying more attention to the suggestion).</p>",
        "id": 407583984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702420650
    },
    {
        "content": "<p>Okay. This is one of those \"sounds easy, but actually annoying\" changes. Not right now, but request heard! :-)</p>",
        "id": 407589529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702423626
    },
    {
        "content": "<p>This is really not crucial. The crucial thing was to get any output at all, and it now works.</p>",
        "id": 407589581,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702423672
    }
]