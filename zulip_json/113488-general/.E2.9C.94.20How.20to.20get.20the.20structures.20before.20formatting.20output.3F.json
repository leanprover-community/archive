[
    {
        "content": "<p>Is there a c++ api documentation of lean3? I'm going to use lean3 as a library to develop a game. I want to get the c++ structures before lean's formatting output, and know the meaning of the structures.</p>",
        "id": 390091966,
        "sender_full_name": "ZYR",
        "timestamp": 1694315686
    },
    {
        "content": "<p>You really should be using Lean 4 for any new projects. Lean 3 is now obsolete and not maintained.</p>",
        "id": 390092701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694316268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20get.20the.20structures.20before.20formatting.20output.3F/near/390092701\">said</a>:</p>\n<blockquote>\n<p>You really should be using Lean 4 for any new projects. Lean 3 is now obsolete and not maintained.</p>\n</blockquote>\n<p>Compared to Lean 4, I am more familiar with Lean 3 and have not yet used Lean 4. However, if Lean 4 has a more comprehensive C++ API documentation, I can use Lean 4 instead.</p>",
        "id": 390093406,
        "sender_full_name": "ZYR",
        "timestamp": 1694316774
    },
    {
        "content": "<p>The FFI supports links with compiled C code pretty easily. Be warned that linking C++ might be painful. I know that <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> was able to do it successfully though.</p>",
        "id": 390093934,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694317176
    },
    {
        "content": "<p>Currently setting up c++ ffi with lake does not work very well/I didn't have success with it. But everything works fine if you set up your own build for the c++ code and just tell lean to link the resulting library.</p>\n<p>I would also strongly recommend using Lean 4. However, I can't help with the question as I do not understand it. What c++ structures? What formatting output and how does it connect to c++ structures?</p>",
        "id": 390094758,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1694317852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20get.20the.20structures.20before.20formatting.20output.3F/near/390094758\">said</a>:</p>\n<blockquote>\n<p>Currently setting up c++ ffi with lake does not work very well/I didn't have success with it. But everything works fine if you set up your own build for the c++ code and just tell lean to link the resulting library.</p>\n<p>I would also strongly recommend using Lean 4. However, I can't help with the question as I do not understand it. What c++ structures? What formatting output and how does it connect to c++ structures?</p>\n</blockquote>\n<p>Given an input file test.lean, lean will output a string which is what I mean by \"formatting output\". In order to generate this string, there must be some data structures that hold information such as \"syntax errors\" and \"goal hint\", I would like to obtain these data structures.</p>",
        "id": 390099595,
        "sender_full_name": "ZYR",
        "timestamp": 1694321637
    },
    {
        "content": "<p>The structures containing information about syntax errors, or the info trees containing goals, are all <strong>Lean</strong> structures, not c++ structures. You will have a much better time writing the glue code that interacts with these in Lean, rather than in c++.</p>\n<p>You can look at e.g. <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a> for a very simple REPL that shows error messages from Lean code. There are other examples of custom frontends available if you say a bit more about what you want to do.</p>",
        "id": 390110938,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694329543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20get.20the.20structures.20before.20formatting.20output.3F/near/390110938\">said</a>:</p>\n<blockquote>\n<p>The structures containing information about syntax errors, or the info trees containing goals, are all <strong>Lean</strong> structures, not c++ structures. You will have a much better time writing the glue code that interacts with these in Lean, rather than in c++.</p>\n<p>You can look at e.g. <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a> for a very simple REPL that shows error messages from Lean code. There are other examples of custom frontends available if you say a bit more about what you want to do.</p>\n</blockquote>\n<p>I see, thank you.  I took a look at the source code of vscode-lean, and now I know how it works with lean server. I think I should refer to vscode-lean to communicate with the lean-server, this should allow me to obtain the data I want in json format. Is there any documentation for the communication protocol?</p>",
        "id": 390150088,
        "sender_full_name": "ZYR",
        "timestamp": 1694355130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648307\">ZYR</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20get.20the.20structures.20before.20formatting.20output.3F/near/390150088\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20get.20the.20structures.20before.20formatting.20output.3F/near/390110938\">said</a>:</p>\n<blockquote>\n<p>The structures containing information about syntax errors, or the info trees containing goals, are all <strong>Lean</strong> structures, not c++ structures. You will have a much better time writing the glue code that interacts with these in Lean, rather than in c++.</p>\n<p>You can look at e.g. <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a> for a very simple REPL that shows error messages from Lean code. There are other examples of custom frontends available if you say a bit more about what you want to do.</p>\n</blockquote>\n<p>I see, thank you.  I took a look at the source code of vscode-lean, and now I know how it works with lean server. I think I should refer to vscode-lean to communicate with the lean-server, this should allow me to obtain the data I want in json format. Is there any documentation for the communication protocol?</p>\n</blockquote>\n<p>For Lean 4, it is the same <a href=\"https://microsoft.github.io/language-server-protocol/\">LSP</a> (<em>Language</em> Server Protocol) that many other programming languages use as well with <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Data/Lsp/Extra.lean\">some additional extensions</a>. For Lean 3, it's a custom format that is also called LSP (<em>Lean</em> Server Protocol), but entirely separate, and <a href=\"https://github.com/leanprover/lean/issues/1996\">I don't think there's any documentation for it</a>.</p>\n<p>Note that vscode-lean is for Lean 3, where <a href=\"https://github.com/leanprover-community/lean/blob/master/src/shell/server.cpp\">the server code was indeed written in C++</a>. vscode-lean4 is the corresponding extension for Lean 4.</p>",
        "id": 390245041,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1694413977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648307\">ZYR</span> has marked this topic as resolved.</p>",
        "id": 390304610,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694436955
    }
]