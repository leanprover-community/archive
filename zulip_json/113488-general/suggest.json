[
    {
        "content": "<p>These lemmas seem to always drift to the top of <code>suggest</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">eq_comm</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">eq_of_heq</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">heq_iff_eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>That's probably because the don't need anything (hypothesis-wise), but they also accomplish \"nothing\" (goal-wise).<br>\nCould <code>suggest</code> have a \"blacklist\" of lemmas that it will only suggest if they actually close the goal?</p>",
        "id": 196286414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671549
    },
    {
        "content": "<p>good luck closing a goal with <code>eq.symm</code> :-) Actually, I guess <code>eq.symm zero_add</code> might solve something, but would <code>suggest</code> spot this?</p>",
        "id": 196287863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588672562
    },
    {
        "content": "<p>If you have assumption <code>h : x = y</code>, and goal <code>y = x</code>, then <code>suggest</code> should reply <code>exact eq.symm h</code>.</p>",
        "id": 196288237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588672887
    },
    {
        "content": "<p>But if you don't have such a hypothesis, it should not reply <code>refine eq.symm _</code></p>",
        "id": 196288266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588672906
    }
]