[
    {
        "content": "<p>I'm having problems proving equality of somewhat simple structures without heq rearing its ugly head. To encapsulate some of them in a concrete question, how do I prove the following? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">T.t</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">T.f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">shift_inj</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">shift</span> <span class=\"n\">T₁</span> <span class=\"bp\">=</span> <span class=\"n\">shift</span> <span class=\"n\">T₂</span> <span class=\"bp\">→</span> <span class=\"n\">T₁</span> <span class=\"bp\">=</span> <span class=\"n\">T₂</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217501642,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1605964885
    },
    {
        "content": "<p>The standard answer is to try to avoid type equality. </p>\n<p>A better option is to define morphisms for your structure, and construct isomorphisms instead of equalities.</p>",
        "id": 217502177,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605965968
    },
    {
        "content": "<p>In this particular case, you can probably use <code>subst</code> to prove your lemma</p>",
        "id": 217502247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605966098
    },
    {
        "content": "<p>[not recommended]</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">T.t</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">T.f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">shift_inj</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">shift</span> <span class=\"n\">T₁</span> <span class=\"bp\">=</span> <span class=\"n\">shift</span> <span class=\"n\">T₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T₁</span> <span class=\"bp\">=</span> <span class=\"n\">T₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">T₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">T₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">T₁_t</span> <span class=\"bp\">=</span> <span class=\"n\">T₂_t</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">test.t</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"o\">⟨</span><span class=\"n\">T₁_t</span><span class=\"o\">,</span> <span class=\"n\">T₁_f</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"o\">⟨</span><span class=\"n\">T₁_t</span><span class=\"o\">,</span> <span class=\"n\">T₂_f</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">eq_of_heq</span> <span class=\"bp\">$</span> <span class=\"n\">congr_arg_heq</span> <span class=\"n\">test.f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217504071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605969066
    },
    {
        "content": "<p>Thanks! I take it from your answers that there is no idiomatic way to do such a thing. </p>\n<p>I've certainly tried to avoid type equality - where I am is the result of a lot of agonising. This is part of a setting where 'equal' and 'isomorphic' are different, and being unable to <code>rw</code> with equal objects will be a serious problem for even the simplest things. My hope is that this ugliness will be confined to the proofs in an API.</p>",
        "id": 217504277,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1605969365
    },
    {
        "content": "<p>what is the context?</p>",
        "id": 217504302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605969456
    },
    {
        "content": "<p>If you don't bundle the type <code>t</code> then it's perfectly nice and easy to speak about equality of the associated <code>f</code></p>",
        "id": 217504306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605969469
    },
    {
        "content": "<p>The context is matroids. A matroid is a finite set E bundled with some extra structure, and a matroid M has minors, which are structures on subsets of E. </p>\n<p>Two minors are equal if they are propeq structures on propeq subsets of E.  </p>\n<p>Two minors on different subsets F,F' of E might be isomorphic, while not being equal, if there is a structure-preserving bijection between F and F'. </p>\n<p>Both isomorphism and equality are important concepts, but they aren't the same.</p>",
        "id": 217504541,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1605969927
    },
    {
        "content": "<p>And the bundled type is the <code>subtype</code> of the subset of E?</p>",
        "id": 217504651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605970086
    },
    {
        "content": "<p>If so this isn't going to work because you can't prove that different subsets of E yield unequal types</p>",
        "id": 217504657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605970108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Equality.20of.20structures.20with.20types.20in.20fields/near/217504657\">said</a>:</p>\n<blockquote>\n<p>If so this isn't going to work because you can't prove that different subsets of E yield unequal types</p>\n</blockquote>\n<p>I'm not very sure about that</p>",
        "id": 217504788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605970384
    },
    {
        "content": "<p>edit: never mind</p>",
        "id": 217504795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605970402
    },
    {
        "content": "<p>We're implementing this differently, using a bespoke boolean algebra type that suits the structure. I don't know if the same issue holds there - I will need to discuss this with my coauthors. </p>\n<p>In any case, I don't think one can argue that what I want is mathematically unnatural. If there is a better way to implement it I'd be happy to know it.</p>",
        "id": 217504803,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1605970419
    },
    {
        "content": "<p>It's unnatural to record a subset of E as a type</p>",
        "id": 217504848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605970486
    },
    {
        "content": "<p>because that \"forgets the embedding into E\"</p>",
        "id": 217504856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605970497
    },
    {
        "content": "<p>you can record it as a <code>set E</code>, or as a type with an injection to E (in which case isomorphism of the type+injection is what you call \"equality\")</p>",
        "id": 217504865,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605970521
    },
    {
        "content": "<p>We are using a type with injection. </p>\n<p>If we use isomorphism to encode mathematical equality, then I anticipate very simple things (if a complicated theorem statement applies to one minor N, it applies to a minor N' with N = N') being unwieldy. </p>\n<p>Also, how does one implement isomorphism in the mathematical sense, if isomorphism in lean is a stronger notion that corresponds to mathematical equality ? </p>\n<p>(I'm certainly not arguing that my implementation is natural, by the way - just that what I want out of 'equal' is).</p>",
        "id": 217504990,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1605970798
    },
    {
        "content": "<p>I think you found that things became even more unwieldy when you tried to use equality of types <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 217505041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605970839
    },
    {
        "content": "<p>There's isomorphism over E as well as isomorphism over an isomorphism of E.</p>",
        "id": 217505055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605970876
    },
    {
        "content": "<p>Hard to argue with that. Again, I'm (perhaps naively) hoping to hide this in an API and leave a reasonable user-facing interface.</p>",
        "id": 217505070,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1605970920
    },
    {
        "content": "<p>IMO the natural thing to do is to mimic the way, e.g., groups and bundled subgroups are defined in mathlib. This should certainly work for the mathematical definition of matroids that I know...</p>",
        "id": 217505264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605971208
    },
    {
        "content": "<p>Oh sorry, I see it's more complicated since there is some localization going on when defining a \"minor\" of a matroid. But it can still be done using some inductive type, I guess.</p>",
        "id": 217505669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605971899
    },
    {
        "content": "<p>Assuming that what you want to express is indeed mathematically reasonable, then it isn't equality of types.</p>",
        "id": 217505766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605972063
    },
    {
        "content": "<p>\"Two subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> are equal if they have the same elements\" and \"two subobjects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>↪</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">f : A \\hookrightarrow E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><mi>B</mi><mo>↪</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">g : B \\hookrightarrow E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> are 'equal' if they have the same image / (equivalently) there is an isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">i : A \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> which commutes with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>\" are reasonable. \"Two subobjects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>↪</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">f : A \\hookrightarrow E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><mi>B</mi><mo>↪</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">g : B \\hookrightarrow E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> are equal if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A = B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f = g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>\" is not.</p>",
        "id": 217505850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605972225
    },
    {
        "content": "<p>In particular, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A = B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> will frequently be independent of Lean.</p>",
        "id": 217505968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605972445
    },
    {
        "content": "<p>What we've learned from the category library is that usually the best way to deal with an equality of objects (containing types) is to turn it into an isomorphism</p>",
        "id": 217506023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605972580
    },
    {
        "content": "<p>Just to give some idea of what lean can't do, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}=\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> can neither be proved nor disproved in Lean. Equality of types is a strange thing in dependent type theory. The moment a subobject turns into a type of its own, the naive idea of equality becomes much more intractable.</p>",
        "id": 217506719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605973741
    },
    {
        "content": "<p>But we can prove that they are not isomorphic as semirings (or ordered sets or whatever structure we care about), right?</p>",
        "id": 217507158,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605974458
    },
    {
        "content": "<p>Isomorphism is not a problem</p>",
        "id": 217507230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605974531
    },
    {
        "content": "<p>The problem is if two structures are isomorphic, but not obviously equal--then whether they are actually equal will be undecidable</p>",
        "id": 217507239,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605974562
    },
    {
        "content": "<p>But it is something we usually don't care that much doing mathematics, right? Like if its true that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>=</mo><mi>exp</mi><mo>⁡</mo><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><mi mathvariant=\"bold\">C</mi><mo>→</mo><mi mathvariant=\"bold\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\pi = \\exp \\colon \\mathbf{C} \\to \\mathbf{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8805499999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">exp</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">C</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">C</span></span></span></span></span> in usual set theory? I mean, both objects are sets, so the statement is meaningful (but false I think...). I apologize if what I am sating is nonsense, I have a very naive understanding of foundations.</p>",
        "id": 217507527,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605975067
    },
    {
        "content": "<p>This is type theory but it's the same sort of thing, yes. There are \"weird\" questions which don't make any mathematical sense but which you happen to be able to ask anyway. You could imagine that there could in theory be a way of setting up mathematics in set theory such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>=</mo><mi>exp</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\pi=\\exp</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mop\">exp</span></span></span></span> as sets. Similarly there is a way of setting up maths in type theory such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}=\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> as types, but that one would only discover this by \"unfolding too much\".</p>",
        "id": 217508055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605975924
    },
    {
        "content": "<p>I think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo mathvariant=\"normal\">≠</mo><mi>exp</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\pi\\ne\\exp</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mop\">exp</span></span></span></span> because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mi>π</mi><mo stretchy=\"false\">}</mo><mo>∈</mo><mo stretchy=\"false\">(</mo><mi>π</mi><mo separator=\"true\">,</mo><msup><mi>e</mi><mi>π</mi></msup><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>exp</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\pi\\in\\{\\pi\\}\\in(\\pi,e^\\pi)\\in\\exp</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mop\">exp</span></span></span></span></p>",
        "id": 217524422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606001322
    },
    {
        "content": "<p>oh, unless <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\pi\\in\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo>=</mo><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}=\\mathbb{R}\\times\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77222em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>, but in that case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mi mathvariant=\"double-struck\">R</mi></msub><mo>∈</mo><mo stretchy=\"false\">{</mo><msub><mi>π</mi><mi mathvariant=\"double-struck\">R</mi></msub><mo stretchy=\"false\">}</mo><mo>∈</mo><mo stretchy=\"false\">(</mo><msub><mi>π</mi><mi mathvariant=\"double-struck\">R</mi></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi_\\mathbb{R}\\in\\{\\pi_\\mathbb{R}\\}\\in(\\pi_\\mathbb{R},0)=\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33222299999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33222299999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33222299999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> and the rest is as before</p>",
        "id": 217524546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606001539
    },
    {
        "content": "<p>Except that a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f \\colon X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is more than a subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊂</mo><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">S \\subset X \\times Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> such that blah blah I think: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> must \"know\" its codomain, and if I just give you <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo></mrow></mrow><annotation encoding=\"application/x-tex\">S = {(0,1), (1,2), \\ldots}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></span> how can you know whether I am talking about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><mi mathvariant=\"bold\">N</mi><mo>→</mo><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">f \\colon \\mathbf{N} \\to \\mathbf{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><mi mathvariant=\"bold\">N</mi><mo>→</mo><msup><mi mathvariant=\"bold\">N</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">f \\colon \\mathbf{N} \\to \\mathbf{N}^+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>? So probably <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is the inclusion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>↪</mo><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">S \\hookrightarrow X \\times Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>.</p>",
        "id": 217544342,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606039824
    },
    {
        "content": "<p>OK, time to find something more interesting for a Sunday morning...</p>",
        "id": 217544352,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606039853
    },
    {
        "content": "<p>Nice proof BTW!</p>",
        "id": 217544549,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606040175
    },
    {
        "content": "<p>Yeah, get back to commutative algebra :-)</p>",
        "id": 217545627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606042018
    },
    {
        "content": "<p>Can anyone help with this sorry I need to fill in? How do I split the structure and then apply equalities?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Person</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alice</span> <span class=\"o\">:</span> <span class=\"n\">Person</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Ali\"</span> <span class=\"bp\">++</span> <span class=\"s2\">\"ce\"</span><span class=\"o\">,</span>\n  <span class=\"n\">age</span> <span class=\"o\">:=</span> <span class=\"mi\">30</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alice₂</span> <span class=\"o\">:</span> <span class=\"n\">Person</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Alice\"</span><span class=\"o\">,</span>\n  <span class=\"n\">age</span> <span class=\"o\">:=</span> <span class=\"mi\">29</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">alice_eq_alice₂</span> <span class=\"o\">:</span> <span class=\"n\">alice</span> <span class=\"bp\">=</span> <span class=\"n\">alice₂</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 362040045,
        "sender_full_name": "Dean Young",
        "timestamp": 1685398694
    },
    {
        "content": "<p>I am in lean 4.</p>",
        "id": 362040134,
        "sender_full_name": "Dean Young",
        "timestamp": 1685398737
    },
    {
        "content": "<p>Does <code>rfl</code> work?</p>",
        "id": 362040156,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685398747
    },
    {
        "content": "<p>More generally, you can tag your structure with <code>@[ext]</code>.</p>",
        "id": 362040197,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685398778
    },
    {
        "content": "<p>This will generate a lemma <code>p.name = q.name -&gt; p.age = q.age -&gt; p = q</code></p>",
        "id": 362040235,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685398801
    },
    {
        "content": "<p>I need the generality since this isn't a complete example. Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">reflexivity</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">p</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">symmetry</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">p</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">transitivity</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">extensionality</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">p</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">equal_arguments</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equal_functions</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">congrFun</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n\n\n<span class=\"c1\">-- A category C consists of:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u₀</span><span class=\"o\">,</span><span class=\"n\">v₀</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₀</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">→</span> <span class=\"n\">Obj</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v₀</span>\n  <span class=\"n\">Idn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"n\">Cmp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span>\n  <span class=\"n\">Id₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Idn</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">Id₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Cmp</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">Idn</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">Ass</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">W</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">Cmp</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cmp</span> <span class=\"n\">W</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">Cmp</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n\n<span class=\"c1\">-- Notation for the identity map which infers the category:</span>\n<span class=\"kd\">def</span> <span class=\"n\">identity_map</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C.Idn</span> <span class=\"n\">X</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙_(\"</span> <span class=\"n\">C</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">identity_map</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Idn</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C.Idn</span> <span class=\"n\">X</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙\"</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Idn</span> <span class=\"n\">X</span>\n\n<span class=\"c1\">-- Notation for composition which infers the category and objects:</span>\n<span class=\"kd\">def</span> <span class=\"n\">composition</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">C.Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"kd\">notation</span> <span class=\"n\">g</span> <span class=\"s2\">\"∘_(\"</span> <span class=\"n\">C</span> <span class=\"s2\">\")\"</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">composition</span> <span class=\"n\">C</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Cmp</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">C.Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"kd\">notation</span> <span class=\"n\">g</span> <span class=\"s2\">\"∘\"</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Cmp</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n\n<span class=\"c1\">-- obtaining a morphism from an equality</span>\n<span class=\"kd\">def</span> <span class=\"n\">Map</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">subst</span> <span class=\"n\">p</span>\n<span class=\"n\">exact</span> <span class=\"n\">C.Idn</span> <span class=\"n\">X</span>\n\n\n<span class=\"c1\">-- definition of an isomorphism from X to Y</span>\n<span class=\"kd\">structure</span> <span class=\"n\">isomorphism</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Fst</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n  <span class=\"n\">Snd</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">X</span>\n  <span class=\"n\">Id₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C.Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">Fst</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C.Idn</span> <span class=\"n\">X</span>\n  <span class=\"n\">Id₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C.Cmp</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Snd</span> <span class=\"n\">Fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C.Idn</span> <span class=\"n\">Y</span>\n\n\n<span class=\"c1\">-- notation for isomorphisms from X to Y (≅)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">X</span> <span class=\"s2\">\"≅_(\"</span> <span class=\"n\">C</span> <span class=\"s2\">\")\"</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isomorphism</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n\n<span class=\"c1\">-- defining the inverse of an isomorphism between objects X and Y</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">Fst</span> <span class=\"o\">:=</span> <span class=\"n\">f.Snd</span><span class=\"o\">,</span> <span class=\"n\">Snd</span> <span class=\"o\">:=</span> <span class=\"n\">f.Fst</span><span class=\"o\">,</span> <span class=\"n\">Id₁</span> <span class=\"o\">:=</span> <span class=\"n\">f.Id₂</span><span class=\"o\">,</span> <span class=\"n\">Id₂</span> <span class=\"o\">:=</span> <span class=\"n\">f.Id₁</span><span class=\"o\">}</span>\n\n\n<span class=\"c1\">-- notation for inverse : isos from X to Y to isos from Y to X</span>\n<span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inverse</span> <span class=\"n\">f</span>\n\n\n<span class=\"c1\">-- definition of a functor</span>\n<span class=\"kd\">structure</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">),</span><span class=\"n\">D.Obj</span>\n   <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"n\">D.Hom</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n   <span class=\"n\">Idn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">),</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">C.Idn</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">D.Idn</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n   <span class=\"n\">Cmp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n   <span class=\"n\">D.Cmp</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">C.Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- definition of the identity functor on objects</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatIdnObj</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"n\">X</span>\n\n<span class=\"c1\">-- definition of the identity functor on morphisms</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatIdnMor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"n\">f</span>\n\n<span class=\"c1\">-- proving the identity law for the identity functor</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatIdnIdn</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">C.Idn</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- proving the compositionality law for the identity functor</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatIdnCmp</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">C.Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- defining the identity functor</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatIdn</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"n\">CatIdnObj</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"n\">CatIdnMor</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Idn</span> <span class=\"o\">:=</span> <span class=\"n\">CatIdnIdn</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Cmp</span> <span class=\"o\">:=</span> <span class=\"n\">CatIdnCmp</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n\n<span class=\"c1\">-- defining the composition G ∘_(Cat) F on objects</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatCmpObj</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"o\">(</span><span class=\"n\">G.Obj</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- defining the composition G ∘_(Cat) F on morphisms</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatCmpHom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"o\">(</span><span class=\"n\">G.Hom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- proving the identity law for the composition G ∘_(Cat) F</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatCmpIdn</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"n\">G.Hom</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F.Idn</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G.Idn</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- proving the compositionality law for the composition G ∘_(Cat) F</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatCmpCmp</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C.Obj</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"k\">fun</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span>\n<span class=\"o\">((</span><span class=\"n\">Eq.trans</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">G.Cmp</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"n\">G.Hom</span>  <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.Obj</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F.Cmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)))</span>\n\n<span class=\"c1\">-- defining the composition in the category Cat</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatCmp</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"n\">CatCmpObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"n\">CatCmpHom</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span><span class=\"n\">Idn</span> <span class=\"o\">:=</span> <span class=\"n\">CatCmpIdn</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Cmp</span> <span class=\"o\">:=</span> <span class=\"n\">CatCmpCmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n\n<span class=\"c1\">-- proving Cat.Id₁</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatId₁</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">CatCmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">CatIdn</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">F</span>\n\n<span class=\"c1\">-- Proof of Cat.Id₂</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatId₂</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">CatCmp</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CatIdn</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">F</span>\n\n<span class=\"c1\">-- Proof of Cat.Ass</span>\n<span class=\"kd\">def</span> <span class=\"n\">CatAss</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">CatCmp</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">CatCmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">CatCmp</span> <span class=\"n\">B</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">CatCmp</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">CatCmp</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">CatCmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n\n\n<span class=\"c1\">-- The category of categories</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cat</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"o\">,</span> <span class=\"n\">Idn</span> <span class=\"o\">:=</span> <span class=\"n\">CatIdn</span><span class=\"o\">,</span> <span class=\"n\">Cmp</span> <span class=\"o\">:=</span> <span class=\"n\">CatCmp</span><span class=\"o\">,</span> <span class=\"n\">Id₁</span><span class=\"o\">:=</span> <span class=\"n\">CatId₁</span><span class=\"o\">,</span> <span class=\"n\">Id₂</span><span class=\"o\">:=</span> <span class=\"n\">CatId₂</span><span class=\"o\">,</span> <span class=\"n\">Ass</span> <span class=\"o\">:=</span> <span class=\"n\">CatAss</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">SetObj</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SetHom</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SetIdn</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">SetHom</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">SetCmp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">SetHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">SetHom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SetHom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">SetId₁</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">SetHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">SetCmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">SetIdn</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SetId₂</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">SetHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">SetCmp</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">SetIdn</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SetAss</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">SetObj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">SetHom</span> <span class=\"n\">W</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">SetHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">SetHom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">SetCmp</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">SetCmp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">SetCmp</span> <span class=\"n\">W</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">SetCmp</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"n\">SetObj</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"n\">SetHom</span><span class=\"o\">,</span> <span class=\"n\">Idn</span> <span class=\"o\">:=</span> <span class=\"n\">SetIdn</span><span class=\"o\">,</span> <span class=\"n\">Cmp</span> <span class=\"o\">:=</span> <span class=\"n\">SetCmp</span><span class=\"o\">,</span> <span class=\"n\">Id₁</span> <span class=\"o\">:=</span> <span class=\"n\">SetId₁</span><span class=\"o\">,</span> <span class=\"n\">Id₂</span> <span class=\"o\">:=</span> <span class=\"n\">SetId₂</span><span class=\"o\">,</span> <span class=\"n\">Ass</span> <span class=\"o\">:=</span> <span class=\"n\">SetAss</span><span class=\"o\">}</span>\n\n\n<span class=\"c1\">--  defining the functor Opp : Cat.{u,v} →_(Cat) Cat.{u,v} on objects (ᵒᵖ)</span>\n<span class=\"kd\">def</span> <span class=\"n\">OppObj</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Obj</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"n\">C.Obj</span><span class=\"o\">,</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">Idn</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C.Idn</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">Cmp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C.Cmp</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">Id₁</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C.Id₂</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">Id₂</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C.Id₁</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">Ass</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">C.Ass</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">W</span> <span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"kd\">notation</span> <span class=\"n\">C</span> <span class=\"s2\">\"ᵒᵖ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OppObj</span> <span class=\"n\">C</span>\n\n\n<span class=\"c1\">-- defining ᵒᵖ on functors</span>\n<span class=\"kd\">def</span> <span class=\"n\">OppHom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Cat.Hom</span> <span class=\"o\">(</span><span class=\"n\">OppObj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OppObj</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.Obj</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.Hom</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">Idn</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.Idn</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">Cmp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.Cmp</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"c1\">-- proving the identity law for the functor Opp : Cat →_(Cat) Cat</span>\n<span class=\"kd\">def</span> <span class=\"n\">OppIdn</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">OppHom</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Cat.Idn</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Cat.Idn</span> <span class=\"o\">(</span><span class=\"n\">OppObj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- proving the compositionality law for the functor Opp : Cat →_(Cat) Cat</span>\n<span class=\"kd\">def</span> <span class=\"n\">OppCmp</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Cat.Hom</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Cat.Cmp</span> <span class=\"o\">(</span><span class=\"n\">OppObj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OppObj</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OppObj</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OppHom</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OppHom</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">OppHom</span> <span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Cat.Cmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">):=</span> <span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">OppHom</span> <span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Cat.Cmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">))</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Opp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Cat.Hom</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:=</span> <span class=\"n\">OppObj</span><span class=\"o\">,</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"n\">OppHom</span><span class=\"o\">,</span>\n  <span class=\"n\">Idn</span> <span class=\"o\">:=</span> <span class=\"n\">OppIdn</span><span class=\"o\">,</span>\n  <span class=\"n\">Cmp</span> <span class=\"o\">:=</span> <span class=\"n\">OppCmp</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"c1\">-- Opp is an involution</span>\n<span class=\"kd\">def</span> <span class=\"n\">OppInv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Cat.Cmp</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">Opp</span> <span class=\"n\">Opp</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Cat.Idn</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">Cat.Idn</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}))</span>\n\n\n<span class=\"c1\">-- defining the objects of the PrdCatObj C D</span>\n<span class=\"kd\">def</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">D.Obj</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">C.Obj</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- defining the morphisms of PrdCatObj C D</span>\n<span class=\"kd\">def</span> <span class=\"n\">PrdCatObjHom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">D.Hom</span> <span class=\"n\">X.1</span> <span class=\"n\">Y.1</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">C.Hom</span> <span class=\"n\">X.2</span> <span class=\"n\">Y.2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- defining the identity functor on an object in C × D</span>\n<span class=\"kd\">def</span> <span class=\"n\">PrdCatObjIdn</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">D.Idn</span> <span class=\"n\">X.1</span><span class=\"o\">),(</span><span class=\"n\">C.Idn</span> <span class=\"n\">X.2</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- defining the composition on morphisms in C × D</span>\n<span class=\"kd\">def</span> <span class=\"n\">PrdCatObjCmp</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjHom</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjHom</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjHom</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">D.Cmp</span> <span class=\"n\">X.1</span> <span class=\"n\">Y.1</span> <span class=\"n\">Z.1</span> <span class=\"n\">f.1</span> <span class=\"n\">g.1</span><span class=\"o\">,</span> <span class=\"n\">C.Cmp</span> <span class=\"n\">X.2</span> <span class=\"n\">Y.2</span> <span class=\"n\">Z.2</span> <span class=\"n\">f.2</span> <span class=\"n\">g.2</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- proving the first identity law for morphisms in C ×_Cat D</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">PrdCatObjId₁</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjObj</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PrdCatObjHom</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">PrdCatObjCmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">PrdCatObjIdn</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">match</span> <span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">f2</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">f1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.1</span>\n<span class=\"bp\">|</span> <span class=\"n\">f2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.2</span>\n<span class=\"n\">cases</span> <span class=\"n\">PrdCatObjCmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">PrdCatObjIdn</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">C.Id₂</span> <span class=\"n\">X.2</span> <span class=\"n\">Y.2</span> <span class=\"n\">f.2</span><span class=\"o\">)]</span>\n<span class=\"c1\">--rw [Eq.symm (D.Id₂ X.1 Y.1 f.1)]</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 362044664,
        "sender_full_name": "Dean Young",
        "timestamp": 1685401307
    },
    {
        "content": "<p>that @[ext] is perfect but I can't quite see how to use it... what does the lemma get named and where do you put the @[ext]...</p>",
        "id": 362044855,
        "sender_full_name": "Dean Young",
        "timestamp": 1685401388
    },
    {
        "content": "<p>on the structure(s)</p>",
        "id": 362045037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685401479
    },
    {
        "content": "<p>the lemma is named <code>MyStruct.ext</code></p>",
        "id": 362045056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685401490
    },
    {
        "content": "<p>so, right before structure keyword?</p>",
        "id": 362045215,
        "sender_full_name": "Dean Young",
        "timestamp": 1685401575
    },
    {
        "content": "<p>wow this is perfect thanks</p>",
        "id": 362045225,
        "sender_full_name": "Dean Young",
        "timestamp": 1685401581
    },
    {
        "content": "<p>I get unknown attribute [ext] in lean 4.</p>",
        "id": 362045341,
        "sender_full_name": "Dean Young",
        "timestamp": 1685401657
    },
    {
        "content": "<p><code>import Std</code></p>",
        "id": 362046009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685402066
    },
    {
        "content": "<p>If you have mathlib4 loaded up, you can find a file that uses <code>@[ext]</code>, and in VS Code right click it and do \"go to definition\" to see what you might need to import.</p>",
        "id": 362046011,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685402068
    },
    {
        "content": "<blockquote>\n<p>I need the generality since this isn't a complete example.</p>\n</blockquote>\n<p>I'm pretty sure this no longer counts as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>!</p>",
        "id": 362047554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685403150
    }
]