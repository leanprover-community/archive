[
    {
        "content": "<p>I was looking for a topic related to writing code looking/idiomatic code in lean4, is it ok if I create a new one?</p>\n<p>The following code is for AoC Day1 I wasn't sure if I should put in <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Advent.20of.20Code.3F</a> if it is I'll close this topic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dedup</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">acc</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">acc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">hd</span> <span class=\"bp\">==</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">acc</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">acc</span>\n  <span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"n\">lst</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.reverse</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CharToString</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">String.str</span> <span class=\"s2\">\"\"</span> <span class=\"n\">ch</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">removeEmptyStrings</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">!=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"n\">lst</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitAtDigitsHelper</span>\n  <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">,</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">state</span>\n  <span class=\"k\">if</span> <span class=\"n\">Char.isDigit</span> <span class=\"n\">ch</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- if character digit found change word to empty string</span>\n    <span class=\"c1\">-- append character as a string to the list</span>\n    <span class=\"c1\">-- append it before the word that is generated</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">List.append</span> <span class=\"n\">lst</span> <span class=\"o\">[</span> <span class=\"n\">word</span><span class=\"o\">,</span> <span class=\"n\">CharToString</span> <span class=\"n\">ch</span> <span class=\"o\">])</span>\n  <span class=\"k\">else</span>\n    <span class=\"c1\">-- if character not a digit keep appending character to the word</span>\n    <span class=\"o\">(</span><span class=\"n\">String.append</span> <span class=\"n\">word</span> <span class=\"o\">(</span><span class=\"n\">CharToString</span> <span class=\"n\">ch</span><span class=\"o\">),</span> <span class=\"n\">lst</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitAtDigits</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">initState</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"o\">[])</span>\n  <span class=\"n\">String.foldl</span> <span class=\"n\">splitAtDigitsHelper</span> <span class=\"n\">initState</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.append</span> <span class=\"n\">lst</span> <span class=\"o\">[</span><span class=\"n\">first</span><span class=\"o\">]</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">removeEmptyStrings</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isStringDigit</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">String.toNat</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filterListStringDigit</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.filter</span> <span class=\"n\">isStringDigit</span> <span class=\"n\">lst</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eliminateAllExceptFirstLast</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">List.head</span><span class=\"bp\">?</span> <span class=\"n\">lst</span>\n  <span class=\"k\">let</span> <span class=\"n\">last</span> <span class=\"o\">:=</span> <span class=\"n\">List.getLast</span><span class=\"bp\">?</span> <span class=\"n\">lst</span>\n  <span class=\"k\">match</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">last</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">last</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">last</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ListToNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">StringToNat</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">String.toNat</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n  <span class=\"k\">match</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ListToNat</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">StringToNat</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"n\">tl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNumbers</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">splitAtDigits</span> <span class=\"n\">s</span> <span class=\"bp\">|&gt;</span>\n   <span class=\"n\">filterListStringDigit</span> <span class=\"bp\">|&gt;</span>\n   <span class=\"n\">eliminateAllExceptFirstLast</span> <span class=\"bp\">|&gt;</span>\n   <span class=\"o\">(</span><span class=\"n\">ListToNat</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">lst</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSum</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">lst</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">WordToNumber</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"one\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"1\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"two\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"2\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"three\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"3\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"four\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"4\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"five\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"5\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"six\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"6\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"seven\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"7\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"eight\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"8\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"nine\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"9\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">firstPass</span> <span class=\"o\">(</span><span class=\"n\">listOfList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">WordToNumber</span><span class=\"o\">)</span> <span class=\"n\">listOfList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substringExtract</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finish</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"n\">String.Pos.mk</span> <span class=\"n\">start</span>\n  <span class=\"k\">let</span> <span class=\"n\">finish</span> <span class=\"o\">:=</span> <span class=\"n\">String.Pos.mk</span> <span class=\"n\">finish</span>\n  <span class=\"k\">let</span> <span class=\"n\">substring</span> <span class=\"o\">:=</span> <span class=\"n\">String.toSubstring</span> <span class=\"n\">s</span>\n  <span class=\"n\">Substring.extract</span> <span class=\"n\">substring</span> <span class=\"n\">start</span> <span class=\"n\">finish</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">Substring.toString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getRest</span> <span class=\"o\">(</span><span class=\"n\">at_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">at_</span> <span class=\"o\">:=</span> <span class=\"n\">String.Pos.mk</span> <span class=\"n\">at_</span>\n  <span class=\"k\">let</span> <span class=\"n\">last</span> <span class=\"o\">:=</span> <span class=\"n\">String.Pos.mk</span> <span class=\"o\">(</span><span class=\"n\">String.length</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">substring</span> <span class=\"o\">:=</span> <span class=\"n\">String.toSubstring</span> <span class=\"n\">s</span>\n  <span class=\"n\">Substring.extract</span> <span class=\"n\">substring</span> <span class=\"n\">at_</span> <span class=\"n\">last</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">Substring.toString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getWord</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">startIndex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">endIndex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">substringExtract</span> <span class=\"n\">startIndex</span> <span class=\"n\">endIndex</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNDigitWord</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">getWord</span> <span class=\"n\">s</span> <span class=\"n\">index</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">WordToNumber</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNDigitIndexedWords</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">String.length</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">index</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">,</span> <span class=\"n\">getNDigitWord</span> <span class=\"n\">s</span> <span class=\"n\">index</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isStringDigit</span> <span class=\"n\">word</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get3DigitIndexWords</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">getNDigitIndexedWords</span> <span class=\"n\">s</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get4DigitIndexWords</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">getNDigitIndexedWords</span> <span class=\"n\">s</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get5DigitIndexWords</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">getNDigitIndexedWords</span> <span class=\"n\">s</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">concatDigitsInOrder</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">indexedThreeDigitWords</span> <span class=\"o\">:=</span> <span class=\"n\">get3DigitIndexWords</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">indexedFourDigitWords</span> <span class=\"o\">:=</span> <span class=\"n\">get4DigitIndexWords</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">indexedFiveDigitWords</span> <span class=\"o\">:=</span> <span class=\"n\">get5DigitIndexWords</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">indexedDigitWords</span> <span class=\"o\">:=</span> <span class=\"n\">indexedThreeDigitWords</span> <span class=\"bp\">++</span> <span class=\"n\">indexedFourDigitWords</span> <span class=\"bp\">++</span> <span class=\"n\">indexedFiveDigitWords</span>\n\n  <span class=\"n\">List.toArray</span> <span class=\"n\">indexedDigitWords</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">flip</span> <span class=\"n\">Array.qsort</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">Array.toList</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"n\">Prod.snd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getFirstAndLastOfList</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">List.head</span><span class=\"bp\">?</span> <span class=\"n\">lst</span><span class=\"o\">,</span> <span class=\"n\">List.getLast</span><span class=\"bp\">?</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">secondPass</span> <span class=\"o\">(</span><span class=\"n\">listOfList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"n\">acc</span> <span class=\"n\">digit</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">isStringDigit</span> <span class=\"n\">digit</span> <span class=\"k\">then</span>\n      <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">digit</span><span class=\"o\">]</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"n\">concatDigitsInOrder</span> <span class=\"n\">digit</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">dedup</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">String.toNat</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">second</span> <span class=\"o\">:=</span> <span class=\"n\">String.toNat</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n    <span class=\"k\">match</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">second</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n\n  <span class=\"n\">listOfList</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.filterMap</span> <span class=\"n\">getFirstAndLastOfList</span><span class=\"bp\">?</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.foldl</span> <span class=\"n\">sum</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">day1Part1Fn</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">String.splitOn</span> <span class=\"n\">input</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">getNumbers</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">toSum</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">day1Part2Fn</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"n\">String.splitOn</span> <span class=\"n\">input</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"n\">splitAtDigits</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">firstPass</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">secondPass</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">pure</span>\n</code></pre></div>",
        "id": 407434519,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702374095
    },
    {
        "content": "<p>Some suggestions:</p>\n<ul>\n<li>You can use dot notation much more aggressively. For example, <code>List.filter ... lst</code> can be written as <code>lst.filter ...</code>, and similar throughout.</li>\n<li><code>ListToNat</code> and <code>WordToNumber</code> should be <code>listToNat</code> and <code>wordToNumber</code>. Only types are capitalised.</li>\n<li>Chains of list transformations, e.g. in <code>secondPass</code>, are not as efficient in Lean as they are in Haskell because Lean doesn't optimise away the intermediate lists. Also, arrays are just generally faster in most cases. Probably doesn't matter for this problem, but something to keep in mind.</li>\n</ul>",
        "id": 407452907,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702379981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/Code.20Reviews/near/407452907\">said</a>:</p>\n<blockquote>\n<p>Some suggestions:</p>\n<ul>\n<li>You can use dot notation much more aggressively. For example, <code>List.filter ... lst</code> can be written as <code>lst.filter ...</code>, and similar throughout.</li>\n<li><code>ListToNat</code> and <code>WordToNumber</code> should be <code>listToNat</code> and <code>wordToNumber</code>. Only types are capitalised.</li>\n<li>Chains of list transformations, e.g. in <code>secondPass</code>, are not as efficient in Lean as they are in Haskell because Lean doesn't optimise away the intermediate lists. Also, arrays are just generally faster in most cases. Probably doesn't matter for this problem, but something to keep in mind.</li>\n</ul>\n</blockquote>\n<p>Thanks! I forgot that I've skipped on camel case in those 2 functions</p>\n<p>What is the best alternative for writing chain transformations in Lean? Any specifc style that you can suggest?</p>",
        "id": 407457745,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702381735
    },
    {
        "content": "<p><code>firstPass</code> and <code>List.map splitAtDigits</code> could be fused I think.<br>\n<code>...  |&gt;.map (g ∘ f)</code> instead of <code>... |&gt;.map f |&gt;.map g</code></p>",
        "id": 407458304,
        "sender_full_name": "ohhaimark",
        "timestamp": 1702381924
    },
    {
        "content": "<p>Makes sense, to avoid list unboxing 2 times right?</p>\n<p>Thanks for the suggestion :D</p>\n<p><span class=\"user-mention silent\" data-user-id=\"244748\">ohhaimark</span> <a href=\"#narrow/stream/113488-general/topic/Code.20Reviews/near/407458304\">said</a>:</p>\n<blockquote>\n<p><code>firstPass</code> and <code>List.map splitAtDigits</code> could be fused I think.<br>\n<code>...  |&gt;.map (g ∘ f)</code> instead of <code>... |&gt;.map f |&gt;.map g</code></p>\n</blockquote>",
        "id": 407459037,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702382209
    },
    {
        "content": "<p>Yeah, hand-fusing the transformations basically. It's ugly but more efficient. You could also explore the monadic <code>for</code> loops (which can be used in pure code with <code>Id.run do</code>, where <code>Id</code> is the identity monad). They let you write your folds like in C, which is arguably more natural for complicated folds.</p>",
        "id": 407463324,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702383738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557243\">@Shubham Kumar 🦀 (he/him)</span> Is <code>dedup</code> just supposed to remove consecutive duplicates, or all duplicates? I noticed <code>#eval dedup [1,2,3,1]</code> returns <code>[1,2,3,1]</code></p>",
        "id": 407522191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702400478
    },
    {
        "content": "<p>Made some changes and added comments where I did.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>comments</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Remove consecutive deuplicates. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">dedup</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">x'</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">x'</span> <span class=\"k\">then</span> <span class=\"n\">dedup</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">dedup</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">dedup</span> <span class=\"n\">xs</span>\n\n<span class=\"sd\">/-- Remove all duplicates. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">dedup'</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">dedup'</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">!=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">dedup</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"c1\">-- [1, 2, 3, 1]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">dedup'</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"c1\">-- [1, 2, 3]</span>\n\n<span class=\"c1\">-- Use toString</span>\n<span class=\"kd\">def</span> <span class=\"n\">CharToString</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"n\">ch</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">removeEmptyStrings</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lst.filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">!=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"c1\">-- dot notation, can use `(· != \"\")` for the `fun`.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitAtDigitsHelper</span> <span class=\"c1\">-- style, four spaces for arguments so you can tell where the function body starts</span>\n    <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">,</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">state</span>\n  <span class=\"k\">if</span> <span class=\"n\">ch.isDigit</span> <span class=\"k\">then</span> <span class=\"c1\">-- dot notation</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">lst</span> <span class=\"bp\">++</span> <span class=\"o\">[</span> <span class=\"n\">word</span><span class=\"o\">,</span> <span class=\"n\">toString</span> <span class=\"n\">ch</span> <span class=\"o\">])</span> <span class=\"c1\">-- `++` for `List.append</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{word}{ch}\"</span><span class=\"o\">,</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"c1\">-- use `s!\"\"` strings for convenience, but could use `++`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitAtDigits</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">initState</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"o\">[])</span>\n  <span class=\"n\">String.foldl</span> <span class=\"n\">splitAtDigitsHelper</span> <span class=\"n\">initState</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">lst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lst</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">first</span><span class=\"o\">]</span> <span class=\"c1\">-- `++`</span>\n  <span class=\"bp\">|&gt;</span> <span class=\"n\">removeEmptyStrings</span>\n\n<span class=\"c1\">-- I see a lot of appending to the end of a `List`. This is not an efficient way to manipulate.</span>\n<span class=\"c1\">-- lists. Either work in reverse (append to the front) or work with `Array`, where so</span>\n<span class=\"c1\">-- long as you have a single reference to the array it's efficient to push to the end.</span>\n\n<span class=\"c1\">-- Dot notation, removed match. We don't really need it, since we could write `(·.toNat?.isSome)`</span>\n<span class=\"c1\">-- for this function.</span>\n<span class=\"kd\">def</span> <span class=\"n\">isStringDigit</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">s.toNat</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filterListStringDigit</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lst.filter</span> <span class=\"n\">isStringDigit</span> <span class=\"c1\">-- dot notation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eliminateAllExceptFirstLast</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- No need for `let` variables. Saves confusion with `first`/`last` having different meanings</span>\n  <span class=\"c1\">-- throughout the function.</span>\n  <span class=\"k\">match</span> <span class=\"n\">lst.head</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lst.getLast</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">last</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">last</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"c1\">-- Swap argument order, make accumulator variable default to 0.</span>\n<span class=\"c1\">-- Another common pattern is to define an aux function that takes this second argument.</span>\n<span class=\"kd\">def</span> <span class=\"n\">ListToNat</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">StringToNat</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s.toNat</span><span class=\"bp\">?.</span><span class=\"n\">getD</span> <span class=\"mi\">0</span> <span class=\"c1\">-- `getD` rather than `match`</span>\n\n  <span class=\"k\">match</span> <span class=\"n\">lst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ListToNat</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">StringToNat</span> <span class=\"n\">hd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNumbers</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- dot notation saves some parentheses</span>\n  <span class=\"n\">lst.map</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">splitAtDigits</span> <span class=\"n\">s</span> <span class=\"bp\">|&gt;</span>\n   <span class=\"n\">filterListStringDigit</span> <span class=\"bp\">|&gt;</span>\n   <span class=\"n\">eliminateAllExceptFirstLast</span> <span class=\"bp\">|&gt;</span>\n   <span class=\"n\">ListToNat</span> <span class=\"c1\">-- here we can use default variable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSum</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- I like using `(init := ...)` for clarity</span>\n  <span class=\"n\">lst.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"c1\">-- rather than `fun`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">WordToNumber</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"one\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"1\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"two\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"2\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"three\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"3\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"four\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"4\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"five\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"5\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"six\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"6\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"seven\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"7\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"eight\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"8\"</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"nine\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"9\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">firstPass</span> <span class=\"o\">(</span><span class=\"n\">listOfList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">listOfList.map</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">WordToNumber</span><span class=\"o\">)</span> <span class=\"c1\">-- dot notation</span>\n\n<span class=\"c1\">-- No need to go through `Substring`. `String.extract` already does the same logic.</span>\n<span class=\"c1\">-- Also, using byte indices `start`/`finish` is suspicious design-wise, if this weren't just for AoC</span>\n<span class=\"kd\">def</span> <span class=\"n\">substringExtract</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finish</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">s.extract</span> <span class=\"o\">⟨</span><span class=\"n\">start</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">finish</span><span class=\"o\">⟩</span> <span class=\"c1\">-- angle brackets for `String.Pos.mk`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getRest</span> <span class=\"o\">(</span><span class=\"n\">at_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- String.length is not the last position. This is giving the number of UTF-8 characters,</span>\n  <span class=\"c1\">-- not the number of bytes. Use `String.endPos`</span>\n  <span class=\"n\">s.extract</span> <span class=\"o\">⟨</span><span class=\"n\">at_</span><span class=\"o\">⟩</span> <span class=\"n\">s.endPos</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getWord</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">startIndex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">endIndex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">substringExtract</span> <span class=\"n\">startIndex</span> <span class=\"n\">endIndex</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNDigitWord</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">getWord</span> <span class=\"n\">s</span> <span class=\"n\">index</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">WordToNumber</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNDigitIndexedWords</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">String.length</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">index</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">,</span> <span class=\"n\">getNDigitWord</span> <span class=\"n\">s</span> <span class=\"n\">index</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"c1\">-- `|&gt;.map` does dot notation</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isStringDigit</span> <span class=\"n\">word</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Why define these? You don't seem to be gaining anything by specializing the function</span>\n<span class=\"c1\">-- def get3DigitIndexWords (s : String) : List (Nat × String) :=</span>\n<span class=\"c1\">--   getNDigitIndexedWords s 3</span>\n\n<span class=\"c1\">-- def get4DigitIndexWords (s : String) : List (Nat × String) :=</span>\n<span class=\"c1\">--   getNDigitIndexedWords s 4</span>\n\n<span class=\"c1\">-- def get5DigitIndexWords (s : String) : List (Nat × String) :=</span>\n<span class=\"c1\">--   getNDigitIndexedWords s 5</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">concatDigitsInOrder</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- I don't see a point in having the intermediate `lets` you had, since their names sort</span>\n  <span class=\"c1\">-- of are their expressions.</span>\n  <span class=\"k\">let</span> <span class=\"n\">indexedDigitWords</span> <span class=\"o\">:=</span> <span class=\"n\">getNDigitIndexedWords</span> <span class=\"n\">s</span> <span class=\"mi\">3</span> <span class=\"bp\">++</span> <span class=\"n\">getNDigitIndexedWords</span> <span class=\"n\">s</span> <span class=\"mi\">4</span> <span class=\"bp\">++</span> <span class=\"n\">getNDigitIndexedWords</span> <span class=\"n\">s</span> <span class=\"mi\">5</span>\n\n  <span class=\"c1\">-- Going back and forth between List and Array costs time and memory.</span>\n  <span class=\"c1\">-- It would likely be better to stick with Array the whole time if possible.</span>\n  <span class=\"n\">List.toArray</span> <span class=\"n\">indexedDigitWords</span>\n  <span class=\"c1\">--|&gt; (Array.qsort · (fun (a, _) (b, _) =&gt; a &lt; b)) -- One option rather than `flip`</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">qsort</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- A nicer option I think</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span> <span class=\"c1\">-- dot notation</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">Prod.snd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getFirstAndLastOfList</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- The `match` was fine, but this is a perfect place too for Applicative functors</span>\n  <span class=\"n\">Prod.mk</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">List.head</span><span class=\"bp\">?</span> <span class=\"n\">lst</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">List.getLast</span><span class=\"bp\">?</span> <span class=\"n\">lst</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">secondPass</span> <span class=\"o\">(</span><span class=\"n\">listOfList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"n\">acc</span> <span class=\"n\">digit</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">isStringDigit</span> <span class=\"n\">digit</span> <span class=\"k\">then</span>\n      <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">digit</span><span class=\"o\">]</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"n\">concatDigitsInOrder</span> <span class=\"n\">digit</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">dedup</span>\n      <span class=\"c1\">-- Do you mean `dedup` to apply to the whole experssion or just what comes after `++`?</span>\n      <span class=\"c1\">-- Right now it's the whole `acc ++ ...`</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">String.toNat</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">second</span> <span class=\"o\">:=</span> <span class=\"n\">String.toNat</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- getD can simplify this from the `match`</span>\n    <span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">first.getD</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">second.getD</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n  <span class=\"n\">listOfList</span> <span class=\"c1\">-- Dot notations</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">filterMap</span> <span class=\"n\">getFirstAndLastOfList</span><span class=\"bp\">?</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">foldl</span> <span class=\"n\">sum</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">day1Part1Fn</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"c1\">-- `return` saves parentheses</span>\n  <span class=\"c1\">-- can use dot notation</span>\n  <span class=\"n\">return</span> <span class=\"n\">input.splitOn</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">getNumbers</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">toSum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">day1Part2Fn</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"c1\">-- I think it's clearer with `return` up front rather than `|&gt; pure` at the end</span>\n  <span class=\"n\">return</span> <span class=\"n\">input.splitOn</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"n\">splitAtDigits</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"n\">firstPass</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"n\">secondPass</span>\n</code></pre></div>\n</div></div>",
        "id": 407528049,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702402484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Code.20Reviews/near/407522191\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar 🦀 (he/him)</span> Is <code>dedup</code> just supposed to remove consecutive duplicates, or all duplicates? I noticed <code>#eval dedup [1,2,3,1]</code> returns <code>[1,2,3,1]</code></p>\n</blockquote>\n<p>no I think you caught an error in my logic, I wanted to remove all the duplicates.<br>\nAlso thanks for the detailed review for the next problem I'll try to include all of them <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 407662884,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702453757
    },
    {
        "content": "<p>Is there a better way by using dot notation to write the following function?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">toBlank</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">str.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ch</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">ch</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 408341700,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702731158
    },
    {
        "content": "<p>Also is there a way to use filterMap on Strings, using Substring or String.Iterator? Because essentially I want to filterMap a string but strings are immutable (I'm guessing) so changing in size would not work with the constraint that length remains constant (again guessing)</p>",
        "id": 408343203,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702732334
    },
    {
        "content": "<p>Not dot notation but you can save your fingers some typing with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">toBlank</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">str.map</span> <span class=\"o\">(</span>\n      <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 408343496,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702732586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Code.20Reviews/near/408343496\">said</a>:</p>\n<blockquote>\n<p>Not dot notation but you can save your fingers some typing with</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">toBlank</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">str.map</span> <span class=\"o\">(</span>\n      <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n    <span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 408343531,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702732629
    },
    {
        "content": "<p>Did you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">toBlank</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">str.map</span> <span class=\"o\">(</span>\n      <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ch</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n<p>Also maybe these ugly parentheses aren't needed, didn't check.</p>",
        "id": 408343637,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702732706
    },
    {
        "content": "<p>You can use dot notation as such</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">toBlank</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ch</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n</code></pre></div>",
        "id": 408343656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702732728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Code.20Reviews/near/408343656\">said</a>:</p>\n<blockquote>\n<p>You can use dot notation as such</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">toBlank</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ch</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> !</p>",
        "id": 408343784,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702732835
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I am getting an error  if I constraint the output type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">String.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">58</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">32</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">44</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">32</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">59</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">32</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ch</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">Lean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 408344074,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702733083
    },
    {
        "content": "<p>Ah sorry, it should of course be <code>String → String</code>, not <code>String</code>.</p>",
        "id": 408344106,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702733112
    },
    {
        "content": "<p>Yeah that makes sense! sorry my mistake <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 408344132,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702733140
    },
    {
        "content": "<p>So either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">toBlank</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ch</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">toBlank</span> <span class=\"o\">:=</span> <span class=\"n\">String.map</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ch</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n</code></pre></div>",
        "id": 408344140,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702733147
    },
    {
        "content": "<p>so I had a question I was trying to use dot notation for the following function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">filterNoise</span> <span class=\"n\">lst</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">filterChars</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ch</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">ch</span>\n  <span class=\"k\">let</span> <span class=\"n\">filterString</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">charList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n      <span class=\"n\">str.toList</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">filterMap</span> <span class=\"n\">filterChars</span>\n    <span class=\"n\">charList.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"n\">String.push</span>\n\n<span class=\"c1\">-- instead of using lst.map filterString</span>\n  <span class=\"n\">List.map</span> <span class=\"n\">filterString</span> <span class=\"n\">lst</span>\n</code></pre></div>\n<p>But using <code>lst.map filterString</code> results in the following error</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>invalid<span class=\"w\"> </span>field<span class=\"w\"> </span>notation,<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>form<span class=\"w\"> </span><span class=\"o\">(</span>C<span class=\"w\"> </span>...<span class=\"o\">)</span><span class=\"w\"> </span>where<span class=\"w\"> </span>C<span class=\"w\"> </span>is<span class=\"w\"> </span>a<span class=\"w\"> </span>constant\n<span class=\"w\">  </span>lst\nhas<span class=\"w\"> </span><span class=\"nb\">type</span>\n<span class=\"w\">  </span>?m.6<span class=\"w\"> </span>Lean<span class=\"w\"> </span><span class=\"m\">4</span>\n</code></pre></div>",
        "id": 408347325,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702735628
    },
    {
        "content": "<p>why is that? Semantically they should be the same right?</p>",
        "id": 408347345,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702735649
    },
    {
        "content": "<p>This just tells you that Lean doesn't know what the type of <code>lst</code> is, hence it can't look up any dot notation!</p>",
        "id": 408347468,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702735749
    },
    {
        "content": "<p><code>def filterNoise (lst : List _) :=</code> should work.</p>",
        "id": 408347486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702735770
    },
    {
        "content": "<p>ah ok, I didn't understand the error. Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> again <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 408347505,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702735790
    }
]