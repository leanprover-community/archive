[
    {
        "content": "<p>Is there a command to repeatedly try a set of tactics until none of them make progress or all of the goals are finished? For example, could I prove the following with a tactic after <code>induction P</code> that repeatedly trys each of <code>simp</code> and <code>tauto</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">variable_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">occurs_in</span> <span class=\"n\">v</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">P.var_set</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">formula.true_</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">formula.pred_</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"n\">args</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">formula.eq_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">occurs_in</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">formula.var_set</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">formula.not_</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">P_ih</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">formula.imp_</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">P_ih</span> <span class=\"n\">Q_ih</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">occurs_in</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">formula.var_set</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_union</span><span class=\"o\">],</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">formula.forall_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">P</span> <span class=\"n\">P_ih</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">occurs_in</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">formula.var_set</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_union</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">],</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 338221802,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677459473
    },
    {
        "content": "<p>I tried it with the <code>any_goals</code> tactic, but I couldn't figure how to make it try all of a set of tactics.</p>",
        "id": 338222059,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677459638
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tidy\">tactic#tidy</a> does some version of this</p>",
        "id": 338223141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677460558
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 338224419,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677461697
    },
    {
        "content": "<p>Is there a way to <code>dunfold</code> all of the definitions without giving the name of each definition to unfold?</p>",
        "id": 338242791,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677476555
    },
    {
        "content": "<p>Or maybe, why does the <code>any_goals</code> here change each case to <code>anonymous</code>? Is there a way to avoid that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">P</span> <span class=\"n\">generalizing</span> <span class=\"n\">binders</span><span class=\"o\">,</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">fast_admits_aux</span><span class=\"o\">,</span> <span class=\"n\">dunfold</span> <span class=\"n\">admits_alt</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 338243720,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677477194
    },
    {
        "content": "<p>Is there a way to apply a set of tactics to each of a named list of induction cases, and that leaves the remaining cases named?</p>",
        "id": 339445668,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677878393
    },
    {
        "content": "<p>That is, some way to take care of a bunch of cases that are all handled the same way, and then handle the remaining separately.</p>",
        "id": 339446017,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677878523
    },
    {
        "content": "<p>yes, you can use <code>case [foo, bar] { all_goals {tac } }</code></p>",
        "id": 339459565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677884180
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#case\">tactic#case</a></p>",
        "id": 339459589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677884201
    },
    {
        "content": "<p>Nice! Thank you!</p>",
        "id": 339460914,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677884855
    }
]