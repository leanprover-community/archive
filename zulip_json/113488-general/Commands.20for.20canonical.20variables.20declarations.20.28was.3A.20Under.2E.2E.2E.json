[
    {
        "content": "<p>Would it be possible to make a command to do the canonical <code>variables</code> incantation for you for various objects?</p>\n<p>For example, maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n<span class=\"n\">declare</span> <span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>would do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I am imagining that this wouldn't be worked out automatically, but rather it would be hard-coded. Maybe another command <code>def_declare</code> could create entries in its database, allowing these definitions to be put near relevant classes.  Perhaps as a bonus it could add <code>{A : Type*}</code> and so on if these variables aren't already present.</p>\n<p>An unsophisticated implementation could be that <code>declare</code> is a parameterized <code>open_locale</code>, doing textual substitution of the arguments.</p>\n<p>If this is possible, would it be a good idea?  I like how it's not particularly magical (and you can verify its effects with <code>#where</code> and such) and how it doesn't abuse the language (anything nonstandard is localized to the <code>declare</code> line).</p>",
        "id": 260869839,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636495985
    },
    {
        "content": "<p>This is definitely doable (with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lean.parser.emit_code_here\">docs#lean.parser.emit_code_here</a>) and would make a nice little project! Working out which classes are needed from e.g. <code>algebra R A</code> should be doable too, at least if all the types involved appear in the target type class.</p>",
        "id": 260870689,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1636496409
    },
    {
        "content": "<p>I have a patch for Lean lying around somewhere that allows you to write <code>[ring R] [[algebra R A]] [[module R M]]</code>, and adds all the missing typeclass dependencies, e.g. <code>[ring R] [semiring A] [algebra R A] [add_comm_monoid M] [module R M]</code>. However, adding more locals broke the elaborator terribly and I couldn't figure out a good way to proceed.</p>",
        "id": 260870698,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636496412
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/commit/d17c9e0c67573a35b8319da15b816409e92c160e\">https://github.com/leanprover-community/lean/commit/d17c9e0c67573a35b8319da15b816409e92c160e</a></p>",
        "id": 260871369,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636496765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Having <code>[[...]]</code> notation for auto-inserting all missing dependencies in binders would be great, too, if that could work, though it doesn't solve <code>vector_space</code>, I think.  There could be an attribute for classes (<code>abbreviation_class</code>?) that directs this feature to try to eliminate the class completely. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[abbreviation_class]</span>\n<span class=\"kd\">def</span> <span class=\"n\">vector_space</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>could define how <code>`[[vector_space K V]]</code> is replaced, though this might be confusing if you forget the double square brackets.</p>",
        "id": 260871644,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636496940
    },
    {
        "content": "<p>Also as you can see, where in mathlib we would know to use <code>[add_comm_group M]</code> when <code>R</code> is a ring, the fancy brackets only insert <code>add_comm_monoid</code>.</p>",
        "id": 260871783,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636497004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list.20.28algebras.29/near/260871644\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> Having <code>[[...]]</code> notation for auto-inserting all missing dependencies in binders would be great, too, if that could work, though it doesn't solve <code>vector_space</code>, I think.  There could be an attribute for classes (<code>abbreviation_class</code>?) that directs this feature to try to eliminate the class completely. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[abbreviation_class]</span>\n<span class=\"kd\">def</span> <span class=\"n\">vector_space</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>could define how <code>`[[vector_space K V]]</code> is replaced, though this might be confusing if you forget the double square brackets.</p>\n</blockquote>\n<p>Good idea to control the dependencies through an attribute. Maybe we could also setup something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[dependency (field K) (add_comm_group V)]</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">vector_space</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n<span class=\"c1\">-- Don't specialize the typeclass arguments themselves!</span>\n</code></pre></div>",
        "id": 260872328,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636497320
    },
    {
        "content": "<p>this would be super cool!</p>",
        "id": 260872508,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636497405
    },
    {
        "content": "<p>I assume this is then meant for teaching and not mathlib?</p>",
        "id": 260872569,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1636497443
    },
    {
        "content": "<p>I feel like it could be huge for mathlib if you could type more maths-friendly things far more often instead of the typeclass hell you see in things like the statement of FTC</p>",
        "id": 260872667,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636497485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list.20.28algebras.29/near/260870698\">said</a>:</p>\n<blockquote>\n<p>I have a patch for Lean lying around somewhere that allows you to write <code>[ring R] [[algebra R A]] [[module R M]]</code>, and adds all the missing typeclass dependencies, e.g. <code>[ring R] [semiring A] [algebra R A] [add_comm_monoid M] [module R M]</code>. However, adding more locals broke the elaborator terribly and I couldn't figure out a good way to proceed.</p>\n</blockquote>\n<p>Looking at it again, the precise diagnosis involves <a href=\"https://github.com/leanprover-community/lean/blob/implicit-dep-binder/src/frontends/lean/definition_cmds.cpp#L796\">lines 796-801 of <code>definition_cmds.cpp</code></a>:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">recover_from_errors</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">m_error_recovery</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">elaborator</span><span class=\"w\"> </span><span class=\"nf\">elab</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">get_options</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">resolve_decl_name</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">metavar_context</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">local_context</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">recover_from_errors</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"o\">&lt;</span><span class=\"n\">expr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">new_params</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">elaborate_params</span><span class=\"p\">(</span><span class=\"n\">elab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_params</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">elab</span><span class=\"p\">.</span><span class=\"n\">freeze_local_instances</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">replace_params</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In <code>elaborate_params</code> I added the code to add dependencies for instance arguments, however <code>replace_params</code> can't tell at which points new params were inserted, so it (correctly) trips an error. So a solution would probably start with passing a list of added/deleted indices to <code>replace_params</code>.</p>",
        "id": 260873351,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636497850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list.20.28algebras.29/near/260872667\">said</a>:</p>\n<blockquote>\n<p>I feel like it could be huge for mathlib if you could type more maths-friendly things far more often instead of the typeclass hell you see in things like the statement of FTC</p>\n</blockquote>\n<p>Yeah but also the modularity is crucial. During the convexity refacotr, I literally turned a single concrete type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> into around 15 shades of spaces.</p>",
        "id": 260873723,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1636498080
    },
    {
        "content": "<p>In support of modularity, it can protect code from changes to the algebra hierarchy, since things about a <code>vector_space</code> don't care too much about exactly which intermediate algebraic objects you also need to include.  (And there are in fact theorems about vector spaces, I believe. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 260874193,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636498369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list.20.28algebras.29/near/260873351\">said</a>:</p>\n<blockquote>\n<p>So a solution would probably start with passing a list of added/deleted indices to <code>replace_params</code>.</p>\n</blockquote>\n<p>This seems to work, almost! Now the only issue is that we detect the list of missing instances by checking which errors result from elaborating the implicit+deps binder, but the errors seem to bubble up to the surface too(?)</p>",
        "id": 260878777,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636501136
    },
    {
        "content": "<p>Now we ignore the \"missing instance\" errors. What do you all think, is this addition PR-worthy? <a href=\"https://github.com/leanprover-community/lean/compare/implicit-dep-binder\">https://github.com/leanprover-community/lean/compare/implicit-dep-binder</a></p>",
        "id": 260883160,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636503773
    },
    {
        "content": "<p>What do the lean4 people think of this in lean4? Not sure who to @</p>",
        "id": 260883609,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636504041
    },
    {
        "content": "<p>Shall we move everything from <a href=\"#narrow/stream/113488-general/topic/Undergraduate.20math.20list.20.28algebras.29/near/260869839\">Kyle's message</a> onwards to its own thread?</p>",
        "id": 260886880,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636506577
    },
    {
        "content": "<p>I have a prototype here: <a href=\"https://github.com/leanprover-community/mathlib/issues/10254\">#10254</a> <a href=\"https://github.com/leanprover-community/mathlib/blob/kmill_tactic_declare/src/tactic/declare.lean\">https://github.com/leanprover-community/mathlib/blob/kmill_tactic_declare/src/tactic/declare.lean</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">def_declare</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"s2\">\"variables [semiring %(A)] [algebra %(R) %(A)]\"</span>\n<span class=\"n\">def_declare</span> <span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"s2\">\"variables [add_comm_group %(V)] [module %(K) %(V)]\"</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"n\">declare</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"n\">declare</span> <span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">Î±</span>\n\n<span class=\"bp\">#</span><span class=\"n\">where</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">variables {F : Type u_1} {W : Type u_2} {Î± : Type u_3} [field F] [add_comm_group W] [module F W] [semiring Î±] [algebra F Î±]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 260890212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636509562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">def_declare</span> <span class=\"n\">rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"s2\">\"variables [add_comm_monoid %(V)] [module %(k) %(V)]</span>\n<span class=\"s2\">  [distrib_mul_action %(G) %(V)] [smul_comm_class %(k) %(G) %(V)]\"</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"n\">declare</span> <span class=\"n\">rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span>\n</code></pre></div>",
        "id": 260896896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636511040
    },
    {
        "content": "<p>I think at this point I would encourage \"please don't bother doing such things in Lean 3\" :-)</p>",
        "id": 260905669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636511259
    },
    {
        "content": "<p>If <code>declare? vector_space K V</code> would emit a <code>Try this:</code> line, that would be really nice. Especially if <code>declare</code> will use TC inference to only add missing types and instances.</p>",
        "id": 260944965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636518990
    },
    {
        "content": "<p>Then there is nothing magical, but still a convenience booster. Might still be worth doing in Lean 3?</p>",
        "id": 260944989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636519039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Commands.20for.20canonical.20variables.20declarations.20.28was.3A.20Under.2E.2E.2E/near/260944965\">said</a>:</p>\n<blockquote>\n<p>If <code>declare? vector_space K V</code> would emit a <code>Try this:</code> line, that would be really nice.</p>\n</blockquote>\n<p>Except for the <code>Try this:</code>, this is what it prints out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare</span><span class=\"bp\">?</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">W</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">variables [add_comm_group W] [module F W]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(It doesn't do any inference though since it's just a dumb text substitution mechanism.)</p>",
        "id": 260945639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636519913
    },
    {
        "content": "<p>Cool. If you just prepend <code>Try this: </code> to that message, then VScode magic will take care of the \"auto-replace\" this line.</p>",
        "id": 260945820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636520142
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"n\">declare</span><span class=\"bp\">?</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">W</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Try this: variables [add_comm_group W] [module F W]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 260945945,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636520285
    },
    {
        "content": "<p>/me thinks: PR! PR! PR!</p>",
        "id": 260945990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636520364
    },
    {
        "content": "<p>The <code>?</code> version is okay.</p>",
        "id": 260946844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636521270
    },
    {
        "content": "<p>It would be nice to avoid adding more work for mathport at this point. But the <code>?</code> sounds great.</p>",
        "id": 260958272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636532881
    },
    {
        "content": "<p>For now, I think it would be fair to have <code>declare</code> be in the same category as a non-terminal <code>simp</code>, in that, while library code shouldn't use it (at least until we better understand its properties), it would be helpful during development.</p>\n<p>Doing this using a text-based macro system definitely makes me shudder (and I'm sure it will be better in Lean 4), but it demonstrates that some approximation of the ideal can work right now.  The implementation is also rather simple, which has its benefits.  (It's so simple that it also allows you to devise some truly horrible <code>def_declare</code>s, but I've restrained myself from sharing them because I don't want anyone to get the wrong idea...)</p>\n<p>Before actually trying to PR it, I'd like to make it be somewhat more sophisticated.  It looks like it's not very hard to make it be aware of the current variables (with <code>get_variables</code>, like what <code>#where</code> uses) and have it not duplicate things.  It also seems very possible to have it do something like what Anne's patch does and make <code>declare</code> work for pre-existing typeclasses (and recursively), and then have <code>def_declare</code> be replaced by just class definitions, possibly with a special attribute to help <code>declare</code> out (that means they'd appear in the documentation and be searchable without further work).</p>",
        "id": 261035353,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636569654
    }
]