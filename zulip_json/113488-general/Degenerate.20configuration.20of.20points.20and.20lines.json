[
    {
        "content": "<p>In mathlib, a <a href=\"https://leanprover-community.github.io/mathlib_docs/combinatorics/configuration.html#configuration.nondegenerate\">nondegenerate  configuration</a> seems to allow for a single line and a single point not on the line (or any line).  True? I'm worried that I'm missing something since that seems even more degenerate than what <code>nondegenerate</code> is meant to rule out. (I'm aware that the description says it's meant to \"exclude certain degenerate configurations.\")</p>",
        "id": 326033381,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1675650020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 326033385,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675650033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as unresolved.</p>",
        "id": 326033387,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675650036
    },
    {
        "content": "<p>Oh good catch. I wrote that definition because it was enough for the theorems that I was planning on proving, and it never caused any problems. But I didn't realize that it allowed for that rather degenerate configuration. If it's causing problems then perhaps it should be changed.</p>",
        "id": 326194469,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1675703597
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> . I'm in the process of proving that for a nondegenerate configuration satisfying the first two projective plane axioms, the 3rd projective plane axiom is equivalent to there being 4 points no 3 of which are colinear, a commonly used and useful alternative axiom. To do so, I want to prove a lemma saying that if three points are non-colinear, then any two of them are not equal. But with this degenerate configuration possible, they could all be equal and non-colinear. Thoughts?</p>",
        "id": 326438183,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1675797229
    },
    {
        "content": "<p>Would dropping the <code>≠</code> hypothesis from the first two projective plane axioms help?</p>",
        "id": 326454270,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1675802663
    },
    {
        "content": "<p>Yeah that would do it. Thanks. Any idea when the change will be reflected in mathlib?</p>",
        "id": 326497423,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1675825967
    },
    {
        "content": "<p>Well, someone would have to write a PR :D<br>\nYou could (it could be a fun little contribution to mathlib), or I could when I have time</p>",
        "id": 326512108,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1675837191
    },
    {
        "content": "<p>I'll try to do it. I've never made a pull request so this would a useful learning experience for me.</p>",
        "id": 326599264,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1675866014
    },
    {
        "content": "<p>Why doesn't the <code>projective_plane</code> class  extend <code>has_points</code> and <code>has_lines</code>? Seems like it ought to and then the  <code>≠</code> should be dropped from those. Thoughts?</p>",
        "id": 327060493,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676038134
    },
    {
        "content": "<p>Note that for that to be valid you need <code>set_option old_structure_cmd true</code>, but that's a totally reasonable addition</p>",
        "id": 327062695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676038700
    },
    {
        "content": "<p>I tried it out, but it caused problems with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/configuration.projective_plane.configuration.dual.projective_plane\">docs#configuration.projective_plane.configuration.dual.projective_plane</a></p>",
        "id": 327111689,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676051408
    },
    {
        "content": "<p>What were the problems?</p>",
        "id": 327129096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676056816
    },
    {
        "content": "<p>When it sees</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">projective_plane</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mk_line</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">definition</span><span class=\"o\">),</span> <span class=\"n\">mk_line_ax</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">proof</span><span class=\"o\">),</span> <span class=\"n\">and</span> <span class=\"n\">so</span> <span class=\"n\">on</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>it complains that <code>projective_plane</code> is not a structure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">structure</span> <span class=\"n\">value</span> <span class=\"o\">{</span><span class=\"bp\">...</span><span class=\"o\">},</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">known</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">structure</span>\n  <span class=\"n\">projective_plane</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 327133568,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676058482
    },
    {
        "content": "<p>Can you push your attempt to a branch?</p>",
        "id": 327137442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676059745
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/compare/config_old_structure_cmd\">https://github.com/leanprover-community/mathlib/compare/config_old_structure_cmd</a></p>",
        "id": 327161865,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676069846
    },
    {
        "content": "<p>So I got it to work with <code>⟨ ⟩</code> notation, but it would be nice if there was a way to use <code>{ }</code> notation.</p>",
        "id": 327161926,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676069879
    },
    {
        "content": "<p>Which use of <code>⟨ ⟩</code> are you referring to?</p>",
        "id": 327328560,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676169324
    },
    {
        "content": "<p>This use: <code>⟨_, @mk_line_ax P L _ _, _, @mk_point_ax P L _ _, by</code></p>",
        "id": 327331377,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676172476
    },
    {
        "content": "<p>Mind explaining or pointing me to an explanation of the difference? I've used <code>⟨ ⟩</code> but never <code>{ }</code> (in that context).</p>",
        "id": 327338454,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676179209
    },
    {
        "content": "<p><code>{ field1 := value, field2 := value2 }</code> can be used to construct an element of a <code>structure</code></p>",
        "id": 327338505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676179277
    },
    {
        "content": "<p>it's basically equivalent to <code>⟨value1, value2⟩</code></p>",
        "id": 327338526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676179310
    },
    {
        "content": "<p>Is that explained anywhere in the docs?</p>",
        "id": 327339016,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676179912
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/lean4/doc/struct.html\">https://leanprover.github.io/lean4/doc/struct.html</a></p>",
        "id": 327339196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676180079
    },
    {
        "content": "<p>Need I worry when consulting that manual (for other things) that it's for Lean 4 and I'm using Lean 3?</p>",
        "id": 327340441,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676181259
    },
    {
        "content": "<p>meh, it's close enough</p>",
        "id": 327340639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676181531
    },
    {
        "content": "<p>Does <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> section 9 or so have anything? That's lean 3</p>",
        "id": 327355226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676193196
    },
    {
        "content": "<p>Yes, it does. Section 9.2. It shows the use of <code>{ }</code> but not <code>⟨ ⟩</code>. Thanks.</p>",
        "id": 327423544,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676228056
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>, do you think there's hope that <code>projective_plane</code> will be made to extend <code>has_points</code> and <code>has_lines</code>?</p>",
        "id": 327464626,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676262809
    },
    {
        "content": "<p>Anything I can do to help?</p>",
        "id": 327464635,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676262823
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18436\">#18436</a></p>",
        "id": 327465038,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676263296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span> It's merged.</p>",
        "id": 327672441,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676334466
    },
    {
        "content": "<p>Above it was suggested that the <code>≠</code> hypothesis be dropped from the first two projective plane axioms help. I'd like to do this (because I need it and to make a contribution to mathlib). Does doing so require dropping the <code>≠</code> and then going to all the pages that are \"Imported by\" <code>combinatorics.configuration</code> and refactoring so they work without the <code>≠</code>? Anything else?</p>",
        "id": 328840367,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676827546
    },
    {
        "content": "<p>The way to make this type of change is usually:</p>\n<ul>\n<li>Make the change  in the file(s) where it's obvious</li>\n<li>Make the PR, tag it \"awaiting-CI\"</li>\n<li>Let github's CI tell you what needs fixing downstream</li>\n<li>If it's in lots of places, wait for feedback on whether it's a good idea before spending too much time on fixing downstream things</li>\n</ul>",
        "id": 328842098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676828335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> why did you put the ≠ hypotheses in <code>mk_point</code>, <code>mk_point_ax</code> etc.  in the first place?</p>",
        "id": 329039461,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676916068
    },
    {
        "content": "<p>Here's where I did it: <a href=\"https://github.com/leanprover-community/mathlib/pull/11065\">#11065</a><br>\nSeems like I was arguing that the <code>≠</code> definition is more general, and more natural (there is a unique line through two distinct points but being forced to choose a line through each point is less natural)</p>",
        "id": 329041717,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676916817
    },
    {
        "content": "<p>Another option would be to add an extra condition to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/configuration.nondegenerate\">docs#configuration.nondegenerate</a></p>",
        "id": 329042888,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676917224
    },
    {
        "content": "<p>Why do you say \"being forced\"? Doesn't the definition <em>allow</em> (as opposed to force) one to get a line through a point if needed/desired?</p>",
        "id": 329046686,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676918519
    },
    {
        "content": "<p>Someone had to make the projective plane in the first place</p>",
        "id": 329047925,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676918963
    },
    {
        "content": "<p>Why do you want to remove the <code>≠</code> hypotheses?</p>",
        "id": 329047956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676918975
    },
    {
        "content": "<p>Because it allows for the degenerate configuration of a single point and a single line not on it. I want a lemma that says that if two points are noncolinear, then they're not equal. As is, if the two points are actually the same, they could still be noncolinear.</p>",
        "id": 329063058,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676925337
    },
    {
        "content": "<p>I think you could achieve this without adding \"garbage\" data to the structure, e.g., require that some point is on some line.</p>",
        "id": 329065469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676926505
    },
    {
        "content": "<p>Do you really want to say that a projective plane consists of (among other things) a <strong>choice</strong> of a line through each point?</p>",
        "id": 329065710,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676926603
    },
    {
        "content": "<p>I see your point now. Less is more! Any idea(s), then, for how to achieve that noncollinear points are not equal?</p>",
        "id": 329074987,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676931701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, would you consider \"every line has at least one point on it and at least one point off it\" as garbage?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">exists_point</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">exists_line</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 329075441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676931939
    },
    {
        "content": "<p>Eric's suggestion seems reasonable to me, although it would make things the definition slightly more clunky. Another option would be to just define colinear as \"if p≠q then there is a line through p and q\" which nicely matches the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/configuration.has_lines\">docs#configuration.has_lines</a>.</p>",
        "id": 329083314,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676937613
    },
    {
        "content": "<p>Agreed that it feels pretty clunky</p>",
        "id": 329083427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676937685
    },
    {
        "content": "<p>The language being used here is confusing me. In math if we talk about whether two points are collinear, we obviously aren't talking about the case where the \"two points\" are the same. Except whoops, we wouldn't be talking about whether \"two points are collinear\" in the first place because <em>any</em> two points are collinear.</p>\n<p>The actual issue is: we want to know that every point is contained in some line. Right?</p>",
        "id": 329113358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676961296
    },
    {
        "content": "<blockquote>\n<p>would you consider \"every line has at least one point on it and at least one point off it\" as garbage?</p>\n</blockquote>\n<p>Any proposition is non-garbage.</p>",
        "id": 329114867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676962178
    },
    {
        "content": "<p>I assume we also want the converse, that every line has at least one point</p>",
        "id": 329152166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676975157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Degenerate.20configuration.20of.20points.20and.20lines/near/329113358\">said</a>:</p>\n<blockquote>\n<p>The language being used here is confusing me. In math if we talk about whether two points are collinear, we obviously aren't talking about the case where the \"two points\" are the same. Except whoops, we wouldn't be talking about whether \"two points are collinear\" in the first place because <em>any</em> two points are collinear.</p>\n<p>The actual issue is: we want to know that every point is contained in some line. Right?</p>\n</blockquote>\n<p>You're right. I actually meant to say that if three  points are noncollinear, then no two of them are equal.  Sorry about that.</p>",
        "id": 329187566,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676985468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span> You're assuming <code>has_points</code> and <code>has_lines</code>, right? So if you also assume <code>[nontrivial P]</code> and <code>[nontrivial L]</code> then you should be able to  deduce that there is a point on each line and a line through each point. But it might be a good idea to change <code>nondegenerate</code> as Eric suggested.</p>",
        "id": 329226767,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1676994959
    }
]