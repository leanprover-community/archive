[
    {
        "content": "<p>Just noting that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=div_pow#doc\">docs#div_pow</a> is simp while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_pow#doc\">docs#mul_pow</a> isn't. Whichever one we prefer, we should make the same decision for both.</p>",
        "id": 374229198,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689074667
    },
    {
        "content": "<p>According to Kyle's affine rule, they should not be simp since the RHS has more occurrences of the free <code>n</code> than the LHS.</p>",
        "id": 374229456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689074720
    },
    {
        "content": "<p>I'm sure this isn't my rule, but generally you don't want simp lemmas that distribute because they can lead to exponential blowup. If you make sure general simp lemmas are \"affine\" (the logic version, not the algebra one) then you avoid this blowup.</p>",
        "id": 374247519,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689078328
    },
    {
        "content": "<p><code>div_pow</code> seems suspect as a simp lemma: <code>(a / b) ^ n = a ^ n / b ^ n</code></p>",
        "id": 374247857,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689078393
    },
    {
        "content": "<p>But we do have <code>map_add : f (x + y) = f x + f y</code> as a simp lemma, right? This goes against the \"affine rule\"...</p>",
        "id": 374248267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689078469
    },
    {
        "content": "<p>But it does match closely with my intuitive was of \"solving a problem by simplifying\".</p>",
        "id": 374248464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689078504
    },
    {
        "content": "<p>Yeah, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_add#doc\">docs#map_add</a> is suspect too. I think it's usually harmless because most of the time <code>f</code> is close to being a constant, or at least it's not very complex.</p>",
        "id": 374248765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689078567
    },
    {
        "content": "<p>Imagine though that <code>f</code> stands for some complicated expression and you try to do <code>simp</code> to <code>f (x + y + z + w)</code>. You'd get a goal that has four copies of this complicated expression, which is likely not simpler than what you started with. Maybe if you're lucky <code>f x</code>, <code>f y</code>, etc. reduce in some nice way, but you can't count on that.</p>",
        "id": 374249740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689078772
    },
    {
        "content": "<p>I'd be in favor of having a simp set for applying distribution lemmas (<code>@[simp_distrib]</code> or something?). There's a lot more we could be doing with curated simp sets that aren't good global simp lemmas.</p>",
        "id": 374250373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689078893
    },
    {
        "content": "<p>It would also be interesting to test my intuition: what happens if we flip <code>map_add</code> and <code>map_mul</code> (and similar lemmas) around. Generally speaking, will mathlib as a whole become longer or shorter after such a refactor?</p>",
        "id": 374254154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689079683
    },
    {
        "content": "<p>Maybe one reason that is in favour of the current setup: if you have <code>hx : x \\in ker f</code>, then <code>simp [hx]</code> can make progress in the current setup, whereas it seems to get more complicated in the reverse scenario.</p>",
        "id": 374254727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689079800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Should.20div_pow.20be.20simp/near/374254154\">said</a>:</p>\n<blockquote>\n<p>It would also be interesting to test my intuition: what happens if we flip <code>map_add</code> and <code>map_mul</code> (and similar lemmas) around. Generally speaking, will mathlib as a whole become longer or shorter after such a refactor?</p>\n</blockquote>\n<p>I think it just won't compile. Eg simp currently can prove <code>f (x + 1) = f x + 1</code> when <code>f</code> is a <code>ring_hom</code>, but with your change it wouldn't.</p>",
        "id": 374255204,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689079888
    },
    {
        "content": "<p>[sorry, german train caused this post to have a delay] Of course, if you have <code>h : x + y \\in ker f</code> then the reverse scenario would be better, but that just seems less likely to happen in practice, I think. (Yes, even more appeal to intuition.)</p>",
        "id": 374256095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689080035
    },
    {
        "content": "<p>If we have a <code>simp_distrib</code> simp set, then <code>simp [simp_distrib]</code> would prove this.</p>\n<p>There could also be <code>f (x + 1) = f x + 1</code> and <code>f (1 + x) = 1 + f x</code> simp lemmas without falling afoul of the affine rule</p>",
        "id": 374256110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689080037
    },
    {
        "content": "<p>That doesn't scale very well for things like <code>f (x + 1 + x)</code> which works just fine with the current set</p>",
        "id": 374375382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689105832
    },
    {
        "content": "<p>What would you want that to simplify to? <code>f x + 1 + f x</code>?</p>\n<p>Is that simpler? If <code>f</code> takes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> Exprs and <code>x</code> takes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> Exprs, then <code>f (x + 1 + x)</code> has on the order of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>+</mo><mn>2</mn><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f+2x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span></span></span></span> Exprs and <code>f x + 1 + f x</code> has on the order of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>f</mi><mo>+</mo><mn>2</mn><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">2f + 2x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span></span></span></span>, so your term has gotten bigger by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> Exprs.</p>",
        "id": 374376715,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689106216
    },
    {
        "content": "<p>It also scales perfectly well if you have an additional simp set that you invoke explicitly, like <code>simp [simp_distrib]</code>. (Because you just apply distribution, not because you have multitudinous <code> ... + 1 + ...</code> lemmas of course.)</p>",
        "id": 374376949,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689106307
    },
    {
        "content": "<p>I'm thinking about things like the tensor product where once you distribute everything you end up with terms like <code>f (a ⊗ b)</code> which almost always simplifies</p>",
        "id": 374387258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689109793
    },
    {
        "content": "<p>I'd be somewhat more in favor of distrib being enabled by default but being able to use <code>simp [-distrib]</code> or similar to opt out</p>",
        "id": 374387433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689109855
    }
]