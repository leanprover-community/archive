[
    {
        "content": "<blockquote>\n<p>If, on average, I have to wait 10 seconds after writing every line of proof,</p>\n</blockquote>\n<p>If my students are waiting 10 seconds after writing every line of proof, I tell them that they're probably doing it wrong. There is a possibility that you're doing it right, but the common errors I see with my students which cause this are: (1) writing one 100 line long proof instead of ten 10 line long proofs (i.e. not refactoring out as much as possible) (2) using expensive tactics early on in a proof rather than to finish it (common culprits are <code>finish</code>, and non-terminal <code>simp</code>s which should be squeezed).</p>",
        "id": 339547694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677933462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Computer.20power/near/339547694\">said</a>:</p>\n<blockquote>\n<p>(1) writing one 100 line long proof instead of ten 10 line long proofs (i.e. not refactoring out as much as possible)<br>\n(2) using expensive tactics early on in a proof rather than to finish it (common culprits are <code>finish</code>, and non-terminal <code>simp</code>s which should be squeezed).</p>\n</blockquote>\n<p>I'm guilty of (1) but I definitely avoid (2).</p>",
        "id": 339548131,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677933620
    },
    {
        "content": "<p>In Lean 4 I think there's some kind of way of freezing state in the middle of a proof and always starting there (the way the Coq people work). If you insist on writing long proofs and you're using Lean 4 then you might want to figure out how to do this.</p>",
        "id": 339548340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677933703
    },
    {
        "content": "<p>I haven't needed to write long proofs in Lean 4 yet, but I wrote a lot of long proofs in Lean 3.</p>",
        "id": 339548488,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677933746
    },
    {
        "content": "<p>For me, the price of refactoring is sometimes too high. Especially when the statement itself takes like 4 lines to write.</p>",
        "id": 339548586,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677933800
    },
    {
        "content": "<p>You can obtain a big boost by sorrying intermediate statements in long proof. Say you have a proof with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span>\n    <span class=\"n\">a</span> <span class=\"n\">pretty</span> <span class=\"n\">complicated</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"mi\">20</span> <span class=\"n\">lines</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"bp\">=</span> <span class=\"n\">tue</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span>\n     <span class=\"n\">another</span> <span class=\"n\">long</span> <span class=\"n\">proof</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and you feel that you editor is not really responsive when proving <code>C</code>. Change for the time being your proof to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">{</span> <span class=\"bp\">...</span>\n    <span class=\"n\">a</span> <span class=\"n\">pretty</span> <span class=\"n\">complicated</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"mi\">20</span> <span class=\"n\">lines</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"bp\">=</span> <span class=\"n\">tue</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">{</span> <span class=\"bp\">...</span>\n     <span class=\"n\">another</span> <span class=\"n\">long</span> <span class=\"n\">proof</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and when you're done with your proof, remove the <code>sorry</code>.</p>",
        "id": 339550263,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1677934464
    },
    {
        "content": "<blockquote>\n<p>Are you suggesting that I cannot get significantly better performance than I currently have?</p>\n</blockquote>\n<p>If you're writing 100 line proofs in Lean 3 then yes I'm suggesting that.</p>",
        "id": 339552171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677935144
    },
    {
        "content": "<p>I believe the best approach is to:<br>\n(1) refactor everything that can be refactored easily;<br>\n(2) when waiting too long, sorry the parts that can be sorried easily;<br>\n(3) have a strong computer that makes the remaining situations less painful.</p>\n<p>I don't think I can do any of the above so well (to such extend) that it would suffice on its own.</p>",
        "id": 339558992,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677937731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339547694\">said</a>:</p>\n<blockquote>\n<p>one 100 line long proof</p>\n</blockquote>\n<p>In extreme cases, my proof can have 666 lines!<br>\n<a href=\"https://github.com/madvorak/grammars/blob/163b666befa19092a0f44527e95aabf25aba289f/src/classes/unrestricted/closure_properties/star.lean#L2267\">https://github.com/madvorak/grammars/blob/163b666befa19092a0f44527e95aabf25aba289f/src/classes/unrestricted/closure_properties/star.lean#L2267</a></p>",
        "id": 339559424,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677937904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339552171\">said</a>:</p>\n<blockquote>\n<p>If you're writing 100 line proofs in Lean 3 then yes I'm suggesting that.</p>\n</blockquote>\n<p>I want to point out that keeping long proofs (mostly in computer science theory) without refactoring them into many small proofs is not always a symptom of laziness. Sometimes I end up deciding between three options, all of which are bad:<br>\n(a) keeping one very long proof<br>\n(b) repeating long-to-state assumptions over and over again, in order to have many small proofs<br>\n(c) creating a lot of ad-hoc definitions that I have to <code>unfold</code> later</p>",
        "id": 339560686,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677938346
    },
    {
        "content": "<blockquote>\n<p>repeating long-to-state assumptions over and over again</p>\n</blockquote>\n<p>can you not use <code>variables</code> and <code>include</code> for those?</p>",
        "id": 339657836,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1678004189
    },
    {
        "content": "<p>666 lines feels awfully long</p>",
        "id": 339667462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678010065
    },
    {
        "content": "<p>I feel like long proofs are maybe a sign of not enough laziness</p>",
        "id": 339668192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678010484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339657836\">said</a>:</p>\n<blockquote>\n<p>can you not use <code>variables</code> and <code>include</code> for those?</p>\n</blockquote>\n<p>Good idea! I will try to refactor that very long proof using <code>variables</code> and <code>include</code> as an exercise. I am not going to keep it in my \"production code\" because <code>include</code> goes against my coding standards, but it might be interesting to see whether my proof becomes more readable.</p>",
        "id": 339670093,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678011448
    },
    {
        "content": "<p>That seems like a pretty arbitrary standard to hold</p>",
        "id": 339673845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678013368
    },
    {
        "content": "<p>If you dislike the action at a distance, you could use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">include</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>That way the scope of the <code>include</code> is just one lemma</p>",
        "id": 339673979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678013436
    },
    {
        "content": "<p>But also <code>#lint</code> will tell you if you included things you didn't need anyway</p>",
        "id": 339674018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678013458
    },
    {
        "content": "<p>We talked about it before. I don't want to have <code>variables (stuff)</code> because then I don't see everything that has to be explicitly passed to a lemma in its declaration.</p>",
        "id": 339674195,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678013560
    },
    {
        "content": "<p>I allow myself only <code>variables {stuff}</code> and <code>variables [stuff]</code> for this reason.</p>",
        "id": 339674279,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678013609
    },
    {
        "content": "<p>It will show up with the full info in docs or when hovering over the lemma in another proof, so it still seems quite a lot of extra work to only make things more explicit when looking at the source as a text file.</p>",
        "id": 339712200,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678030252
    },
    {
        "content": "<p>Frankly, a 666-line proof is likely much more of an impediment to text readability (assuming you care about that in the first place) than use of <code>variables</code></p>",
        "id": 339712786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678030537
    },
    {
        "content": "<p>I can point you to how to set up a docs webpage for your own repo if you're interested in that</p>",
        "id": 339712913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678030587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339712200\">said</a>:</p>\n<blockquote>\n<p>It will show up with the full info in docs or when hovering over the lemma in another proof, so it still seems quite a lot of extra work to only make things more explicit when looking at the source as a text file.</p>\n</blockquote>\n<p>I always look at the source code. These auto-generated docs (if we are talking about the docs pages we usually refer to here) are hard for me to understand.</p>",
        "id": 339714024,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678031197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339712786\">said</a>:</p>\n<blockquote>\n<p>Frankly, a 666-line proof is likely much more of an impediment to text readability (assuming you care about that in the first place) than use of <code>variables</code></p>\n</blockquote>\n<p>I care a lot about the readability on the outside.</p>",
        "id": 339714149,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678031263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339712913\">said</a>:</p>\n<blockquote>\n<p>I can point you to how to set up a docs webpage for your own repo if you're interested in that</p>\n</blockquote>\n<p>OK, I'll give it a try! Maybe it's time to change my working habits...</p>",
        "id": 339714544,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678031406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339714024\">said</a>:</p>\n<blockquote>\n<p>These auto-generated docs (if we are talking about the docs pages we usually refer to here) are hard for me to understand.</p>\n</blockquote>\n<p>This surprises me: the doc page is just the source code with the <code>variables</code> inlined and proof removed!</p>",
        "id": 339717863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678032909
    },
    {
        "content": "<p>Isn't that what you mean by \"the outside\"?</p>",
        "id": 339717898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678032938
    },
    {
        "content": "<p>I think Martin's mainly expressing a preference. I myself don't really like reading types in the generated docs either -- most times I find something relevant in the docs and then type it into my editor and use the mouseover to study it.</p>",
        "id": 339720285,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678034175
    },
    {
        "content": "<p>Regarding <code>variables</code>, I usually use them for implicit variables, and maybe have one or two explicit variables if I'm defining definitions/lemmas meant to be used with dot notation.</p>\n<p>If there are complicated hypotheses that occur repeatedly, that for me is a signal that I need to rethink what I'm doing.</p>",
        "id": 339720470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678034290
    },
    {
        "content": "<p>There's that joke about how mathematicians go to great lengths to be lazy (which I think Reid was referring to), but it's a lot of work to be lazy -- you have to come up with a whole theory so that what you want to say takes little effort.</p>",
        "id": 339720936,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678034582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339720285\">said</a>:</p>\n<blockquote>\n<p>I myself don't really like reading types in the generated docs either -- most times I find something relevant in the docs and then type it into my editor and use the mouseover to study it.</p>\n</blockquote>\n<p>I often use the docs over vscode due to them not having as much <code>[_inst_n : _]</code> clutter. Is there something you can pinpoint your dislike of reading types on, that could be changed for the better?</p>",
        "id": 339722402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678035458
    },
    {
        "content": "<p>Maybe it's two things, all the colors from the links make it visually busy, and the fact it's the \"wrong\" font (there's nothing actually wrong with it, it's just not the one in my editor).</p>",
        "id": 339722877,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678035722
    },
    {
        "content": "<p>Would there be a way to highlight the parentheses? Given what I know about the pretty printer, I don't  think it would be straightforward, but it could help with scanning the type to know where each argument starts and ends.</p>",
        "id": 339723582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678036135
    },
    {
        "content": "<p>I do like how the implicit arguments are in gray in the docs, and how the types are laid out with indentation.</p>",
        "id": 339723707,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678036215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339720470\">said</a>:</p>\n<blockquote>\n<p>Regarding <code>variables</code>, I usually use them for implicit variables, and maybe have one or two explicit variables if I'm defining definitions/lemmas meant to be used with dot notation.</p>\n</blockquote>\n<p>How can they be two?</p>",
        "id": 339741924,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678048021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339720470\">said</a>:</p>\n<blockquote>\n<p>If there are complicated hypotheses that occur repeatedly, that for me is a signal that I need to rethink what I'm doing.</p>\n</blockquote>\n<p>In computer science, you often have complicated invariants to describe what an arbitrary moment during your computation looks like.<br>\nThere is not always an opportunity to rethink that (I mean, you can rethink whatever you want to rethink, but there might be nothing to gain from rethinking it). Sometimes you can choose a different algorithm to solve the problem. Sometimes you can simplify the invariant. However, in most remaining cases, you just have to prove that every operation preserves the invariant. That takes time (and lines) to do.</p>\n<p>For this reason, I don't think that repeating complicated hypotheses is immediately a code smell.</p>",
        "id": 339742453,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678048427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339722877\">said</a>:</p>\n<blockquote>\n<p>Maybe it's two things, all the colors from the links make it visually busy, and the fact it's the \"wrong\" font (there's nothing actually wrong with it, it's just not the one in my editor).</p>\n</blockquote>\n<p>This is probably my problem as well. Thank you for putting your finger on it!</p>\n<p>Even if I can parse the docs, it feels a bit \"unreal\". So I rather open the Lean code. If I see the same thing written in Lean, it feels more real/believable and makes me confident that I can refer to it from my code. This is clearly an irrational feeling. Nevertheless, it makes me uncomfortable to the extend that I prefer to read the Lean code even if it means much more scrolling than getting the same info from the docs.</p>",
        "id": 339742966,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678048728
    },
    {
        "content": "<p>Perhaps you're already aware of this, but; the feeling of unrealness reduces slightly if you use the dark-mode docs (assuming you use the dark vscode theme)</p>",
        "id": 339746986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678052051
    },
    {
        "content": "<p>I had no idea I can change color of the docs page!</p>",
        "id": 339815857,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678094995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339720936\">said</a>:</p>\n<blockquote>\n<p>There's that joke about how mathematicians go to great lengths to be lazy (which I think Reid was referring to), but it's a lot of work to be lazy -- you have to come up with a whole theory so that what you want to say takes little effort.</p>\n</blockquote>\n<p>On the same note: <a href=\"https://www.techinasia.com/talk/3-great-virtues-of-a-programmer-laziness-impatience-and-hubris\">https://www.techinasia.com/talk/3-great-virtues-of-a-programmer-laziness-impatience-and-hubris</a></p>",
        "id": 339816793,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678095263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20how.20to.20speed.20up.20elaboration/near/339815857\">said</a>:</p>\n<blockquote>\n<p>I had no idea I can change color of the docs page!</p>\n</blockquote>\n<p>For anytime else reading; the option is at the bottom of the left sidebar</p>",
        "id": 339895659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678115793
    }
]