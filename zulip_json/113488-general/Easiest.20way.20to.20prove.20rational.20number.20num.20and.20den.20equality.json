[
    {
        "content": "<p>I had a lot of trouble proving </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">q_num_den</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">448</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">81</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r.num</span> <span class=\"bp\">=</span> <span class=\"mi\">448</span> <span class=\"bp\">∧</span> <span class=\"n\">r.den</span> <span class=\"bp\">=</span> <span class=\"mi\">81</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I ended up having to cast 448 and 81 to \\Q, then use Rat.num_div_eq_of_coprime and Rat.num_den_eq_of_coprime, which involved further cassting 448 and 81 to Int's and then proving that the NatAbs of those ints was coprime, etc.  It involved quite a lot of manual casting for what is clearly a rather simple problem.  I'm wondering if there is an easier way.</p>",
        "id": 400020136,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1698959658
    },
    {
        "content": "<p>I'm not happy with it, but here's what I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">q_num_den</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">448</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">81</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r.num</span> <span class=\"bp\">=</span> <span class=\"mi\">448</span> <span class=\"bp\">∧</span> <span class=\"n\">r.den</span> <span class=\"bp\">=</span> <span class=\"mi\">81</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">448</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">81</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Rat.cast_inj</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ (448 / 81).num = 448 ∧ (448 / 81).den = 81</span>\n  <span class=\"c1\">-- norm_num seems like it should work here</span>\n  <span class=\"c1\">-- but we can abuse definitional equality:</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 400021990,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698960643
    },
    {
        "content": "<p>Better than mine!</p>",
        "id": 400023528,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1698961570
    }
]