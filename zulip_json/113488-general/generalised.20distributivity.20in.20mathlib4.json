[
    {
        "content": "<p>I've been skimming through the sources for mathlib4. There seem to be an absolute ton of theorems of the form: <code>G (F x y) ↔ F (G x) (G y)</code> for some function-like things F and G. I get that there's a usability/maintainability/readability win in writing these out long-hand a lot of the time. However, is there a concept in the library of this relation between an F and G? Is there anything to be gained by treating this in the abstract rather than in all the individual special cases?</p>\n<p>The types are obvious while we're using just the one, as in <code>G: a→a</code> and <code>F: a×a→a</code>, but otherwise I guess you need some typeclass trickery to summon the F, G that work where the LHS uses <code>F: a×a→b</code>, <code>G: b→d</code> and the RHS uses <code>G: a→c</code>, <code>F: c×c→d</code>. Distributive arrows? I'm guessing there's some monad/category thingies that do this? Perhaps it isn't a useful abstraction for authoring or tactically applying theorems.</p>",
        "id": 391011429,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694722367
    },
    {
        "content": "<p>Can you list some of the lemmas you're thinking of? It might help to have a few specific examples of the abstraction.</p>",
        "id": 391016286,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694724603
    },
    {
        "content": "<p>Not OP but:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=apply_ite#doc\">docs#apply_ite</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidHom#doc\">docs#AddMonoidHom</a> (the <code>map_add'</code> condition)</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=himp_inf_distrib#doc\">docs#himp_inf_distrib</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=min_mul_distrib%27#doc\">docs#min_mul_distrib'</a></li>\n</ul>\n<p>Really, most theorems with <code>distrib</code> in their name.</p>",
        "id": 391019197,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694726115
    },
    {
        "content": "<p>The main thing I think about with distrib lemmas is that they are usually not <code>simp</code> lemmas, but that I bet sometimes there are <code>simp</code> calls that would close with particular <code>distrib</code> lemmas added to the simp set. OTOH, if we add <code>@[simp]</code> to these willy nilly, <code>simp</code> it  would make a lot of other simp calls more complicated.</p>",
        "id": 391019975,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694726500
    },
    {
        "content": "<p>My hope would be that a smarter search method like <code>rw_search</code> or <code>aesop</code> would be able to identify this kind of thing and make a good choice for how far to simplify.</p>",
        "id": 391020274,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694726641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/generalised.20distributivity.20in.20mathlib4/near/391019975\">said</a>:</p>\n<blockquote>\n<p>The main thing I think about with distrib lemmas is that they are usually not <code>simp</code> lemmas, but that I bet sometimes there are <code>simp</code> calls that would close with particular <code>distrib</code> lemmas added to the simp set. OTOH, if we add <code>@[simp]</code> to these willy nilly, <code>simp</code> it  would make a lot of other simp calls more complicated.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> has a rule for which distributivity lemmas are fine to be tagged by simp: If the RHS contains no more occurrence of a free variable than the LHS, then it's a good simp lemma (or at least not obviously a bad one).</p>",
        "id": 391091106,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694759640
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.replicate_add#doc\">docs#List.replicate_add</a> another example</p>",
        "id": 392501742,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695383509
    },
    {
        "content": "<p>This is a case where I'd actually like the symm of the lemma to be <code>@[simp]</code> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , what are the criteria for <em>that</em>?</p>",
        "id": 392505947,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695385116
    },
    {
        "content": "<p>(That is, if the <em>are</em> multiple occurences in the RHS, when should we <code>symm</code> the lemma and <code>simp</code> tag it?)</p>",
        "id": 392506358,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695385300
    },
    {
        "content": "<p>None that I can think of. If you add <code>replicate a m ++ replicate a n = replicate a (m + n)</code>  as a simp lemma then you also need to add <code>replicate a n ++ [a] = replicate a (n + 1)</code>, <code>[a] ++ replicate a n = replicate a (1 + n)</code>, etc... The problem with making a reverse distributivity lemma <code>simp</code> is that you also need to add a lemma for each possible simplification of each summand, in order to preserve confluence.</p>",
        "id": 392506587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695385404
    },
    {
        "content": "<p>If you really want it to be simp, I'd suggest tagging it simp locally to the file, or putting it in a custom simp set.</p>",
        "id": 392506708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695385445
    },
    {
        "content": "<p>Ok, I won't tag it then</p>",
        "id": 392507223,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695385654
    },
    {
        "content": "<p>Just to note that <a href=\"https://github.com/leanprover-community/mathlib4/pull/7323\">#7323</a> is related to this comment about <code>replicate_add</code></p>",
        "id": 393569739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695848408
    }
]