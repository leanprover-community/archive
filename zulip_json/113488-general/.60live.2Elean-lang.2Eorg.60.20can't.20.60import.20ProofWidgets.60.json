[
    {
        "content": "<p><a href=\"https://live.lean-lang.org/#code=import%20ProofWidgets%0A\">https://live.lean-lang.org/#code=import%20ProofWidgets%0A</a></p>\n<p>gives the error message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">read</span> <span class=\"n\">file</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets.olean'</span><span class=\"o\">,</span> <span class=\"n\">invalid</span> <span class=\"n\">header</span>\n</code></pre></div>\n<p>(I'm not actually sure who to ping about this.)</p>",
        "id": 406353536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701883914
    },
    {
        "content": "<p>I noticed this too. For some reason, importing individual files like <code>import ProofWidgets.Data.Html</code> still works.</p>",
        "id": 406356003,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701884901
    },
    {
        "content": "<p>Does it work for you locally? It really shouldn't because proofwidgets is still on v4.3.0-rc2</p>",
        "id": 406356010,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701884902
    },
    {
        "content": "<p>It does on 4.3.0</p>",
        "id": 406356926,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701885232
    },
    {
        "content": "<p><code>v4.3.0</code> and <code>v4.3.0-rc2</code> are the exact same git hash (this probably should be avoided in future).</p>",
        "id": 406433236,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701916584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> But I think there is also a Lake bug involved here. While compiling a dependency against a different Lean version has a chance of succeeding, using a binary release from a different Lean version is always wrong (and rejected by Lean now). We should probably fall back to building from source in that case, perhaps with a warning.</p>",
        "id": 406525359,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701949470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Lake should already always rebuild if the <code>githash</code> changes -- so it should mirror olean comaptibility.</p>",
        "id": 406597759,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701973368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Oh my bad I see what's going on now - the <code>lake update &amp;&amp; lake build</code> we do periodically on the server does not rebuild ProofWidgets.olean because it is not depended on by Mathlib.lean and neither does the sandboxed file worker trying to import it because the filesystem is read-only to it (and because of this does not use Lake at all). So we load the outdated .oleans from the release instead.</p>",
        "id": 406599378,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701973980
    },
    {
        "content": "<p>We could extend the <code>lake build</code> invocation to explicitly build proofwidgets but also it would probably be good to bump the Lean version of proofwidgets even if there is no code breakage /cc <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 406599998,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701974234
    },
    {
        "content": "<p>A simple solution for this particular case is to just <code>import ProofWidgets</code> in file on the  server that's used to build the project: <a href=\"https://github.com/leanprover-community/lean4web/commit/201d3595aa4f9dfe4d76e62a52f96a9900eeeb47\">fix commit 201d359</a></p>\n<p>Working Proofwidgets: <a href=\"https://lean.math.hhu.de/#code=import%20ProofWidgets%0A%0Aopen%20scoped%20ProofWidgets.Jsx%20--%20%E2%9F%B5%20remember%20this!%0A%0Adef%20x%20%3A%3D%20%3Cb%3EYou%20can%20use%20HTML%20in%20lean!%20%7B.text%20%3C%7C%20toString%20%3C%7C%204%20%2B%205%7D%20%3Chr%2F%3E%20%3C%2Fb%3E%0A%0A--%20Put%20your%20cursor%20over%20this%0A%23html%20x%0A%0Atheorem%20ghjk%20%3A%20True%20%3A%3D%20by%0A%20%20--%20Put%20your%20cursor%20over%20any%20of%20the%20%60html!%60%20lines%0A%20%20html!%20%3Cb%3EWhat%2C%20HTML%20in%20Lean%3F!%20%3C%2Fb%3E%0A%20%20html!%20%3Ci%3EAnd%20another!%3C%2Fi%3E%0A%20%20html!%20%3Cimg%20src%3D%22https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fa%2Fa5%2FParrot_montage.jpg%22%2F%3E%0A%20%20trivial%0A\">web demo</a></p>",
        "id": 406612614,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1701979363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/.60live.2Elean-lang.2Eorg.60.20can't.20.60import.20ProofWidgets.60/near/406599998\">said</a>:</p>\n<blockquote>\n<p>We could extend the <code>lake build</code> invocation to explicitly build proofwidgets but also it would probably be good to bump the Lean version of proofwidgets even if there is no code breakage /cc <span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span></p>\n</blockquote>\n<p>PW4 should hopefully build on any recent version, so choosing the newest one seems reasonable to me.</p>",
        "id": 406619146,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1701982508
    }
]