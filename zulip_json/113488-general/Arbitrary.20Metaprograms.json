[
    {
        "content": "<p>In this thread <a href=\"#narrow/stream/113488-general/topic/PSA.20about.20trusting.20Lean.20proofs\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/PSA.20about.20trusting.20Lean.20proofs</a> Jannis Limperg writes a metaprogram that (as far I understand) can interfere with the environment and cause incorrect proofs to be accepted. On page 17 of Sebastian Ullrich's PhD thesis the last paragraph states:</p>\n<blockquote>\n<p>The global context or environment holds the top-level declarations defined so far as well as further metadata. The environment is implemented in what is commonly called the LCF approach: it is an abstract data type to metaprogramming code that can only be extended with new declarations by an exported kernel function that rejects any input that is not well-typed in the environment before the extension, guaranteeing that the environment is consistent at all times even in the presence of arbitrary metaprograms.</p>\n</blockquote>\n<p>Can someone help me understand: <em>Where does the argument in the paragraph from the thesis breakdown?</em></p>",
        "id": 395115895,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1696538541
    },
    {
        "content": "<p>In the idea that the environment can only me modified  through the function which was not the case as this meta program was being written</p>",
        "id": 395116608,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696538886
    },
    {
        "content": "<p>that said I belive the PR that make the constructor of Environment private made this much harder to do  in a way that is not noticed and in addition the lean4checker  basically ensures this property by limiting itself to only using the kernel functions as it validates  an Envrionment</p>",
        "id": 395116682,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696538936
    },
    {
        "content": "<p>Thanks for the response Henrik.</p>\n<p>So the particular statement: </p>\n<blockquote>\n<p>it is an abstract data type to metaprogramming code that can only be extended with new declarations by an exported kernel function that rejects any input that is not well-typed in the environment before the extension,</p>\n</blockquote>\n<p>If I understand you correctly the \"bug\" (if it is appropriate to call it that) is that the Environment data structure is not a faithful implementation of the LCF approach? In this case we had (before it was made private) the function <code>Environment.mk</code> that allowed addition of false theorems to the environment.</p>",
        "id": 395118241,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1696539646
    },
    {
        "content": "<p>Indeed, although as I mentioned the lean4checker program nullifies this issue as it loads an Environment and shows all declarations to the kernel again so if there are such declarations around they will definitely be caught</p>",
        "id": 395118653,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696539839
    },
    {
        "content": "<p>Is the feature you are talking about which shows all declarations to the kernel is the one here in <a href=\"https://github.com/leanprover/lean4/pull/2617\">lean4#2617</a>?</p>\n<p>Perhaps a rather silly question: the issue described in Jannis Limperg's thread was on the global context/Environment. The other contexts (local, metavariable context, tactic context)  which are described in the next paragraphs of the thesis have no such issues because they are not observed by the kernel? Only the terms synthesized are sent to the kernel?</p>",
        "id": 395120512,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1696540801
    },
    {
        "content": "<p>No it is this a separate program: <a href=\"https://github.com/leanprover/lean4checker/\">https://github.com/leanprover/lean4checker/</a></p>\n<p>Yes the Environment is the only thing that gets actively observed by the kernel, everything else is just means for meta programs to construct terms.</p>",
        "id": 395121446,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696541303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/113488-general/topic/Arbitrary.20Metaprograms/near/395115895\">said</a>:</p>\n<blockquote>\n<p>Can someone help me understand: <em>Where does the argument in the paragraph from the thesis breakdown?</em></p>\n</blockquote>\n<blockquote>\n<p>The environment is implemented in what is commonly called the LCF approach: it is an abstract data type to metaprogramming code that can only be extended with new declarations by an exported kernel function that rejects any input that is not well-typed in the environment before the extension, guaranteeing that the environment is consistent at all times even in the presence of arbitrary metaprograms.</p>\n</blockquote>\n<p>This sentence is incorrect. The <code>Environment</code> is not an abstract data type, it is a regular data type which arbitrary metaprograms can modify arbitrarily. The PR to make the constructor private approximates an abstract data type more closely, but lean does not truly have abstract data types, and it is not possible to build LCF style provers in lean as a result - the type system is not airtight enough to hang system soundness on.</p>",
        "id": 395127217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696544584
    },
    {
        "content": "<p>I would also argue that it is not an issue for Lean. Part of the reason why in LCF-style systems a 'truly abstract' (in this case meaning one whose values cannot be constructed by functions outside of the kernel module other than by going through kernel functions) datatype is needed is that proof terms are not recorded. In some systems, the proof datatype is implemented as roughly, <code>unit</code>. So you better make sure that this definition cannot be observed. In contrast, Lean records and stores full proof terms that can be verified by an independent proof checker. From that perspective, Lean is more of a proof construction environment for proofs that <em>can also be checked</em> separately than it is a proof checker. I seem to recall Mario phrasing a similar view on the other thread.</p>",
        "id": 395128102,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696545176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Arbitrary.20Metaprograms/near/395127217\">said</a>:</p>\n<blockquote>\n<p>... but lean does not truly have abstract data types ....</p>\n</blockquote>\n<p>Can you explain more on what this means?</p>",
        "id": 395128914,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1696545764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/113488-general/topic/Arbitrary.20Metaprograms/near/395128102\">said</a>:</p>\n<blockquote>\n<p>In contrast, Lean records and stores full proof terms that can be verified by an independent proof checker. From that perspective, Lean is more of a proof construction environment for proofs that <em>can also be checked</em> separately than it is a proof checker. I seem to recall Mario phrasing a similar view on the other thread.</p>\n</blockquote>\n<p>Is Lean being a proof construction environment an intentional design choice?</p>\n<p>My current understanding is that lean exports <code>olean</code> files. An independent proof checker would have to deal with these <code>oleans</code>. The format of <code>oleans</code> changes from time to time.<code>oleans</code> are as <a href=\"https://github.com/digama0/olean-rs#olean-rs\">Mario describes them</a> \"an unstable binary format\". Is it possible for the Oleans (or some other export format) to have a specification or are there design considerations that discourage this?</p>",
        "id": 395129971,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1696546413
    },
    {
        "content": "<blockquote>\n<p>Is Lean being a proof construction environment an intentional design choice?</p>\n</blockquote>\n<p>This I do not know; you would have to ask the language team :)</p>\n<blockquote>\n<p>Is it possible for the Oleans (or some other export format) to have a specification or are there design considerations that discourage this?</p>\n</blockquote>\n<p>I would say it's entirely possible, but fixing a specification now would make it harder to the developers to iterate on what's stored in oleans. Also if you made the specification reflect the current format, it would probably be a bit weird because the current approach more or less just dumps the in-memory representation (rather a compacted version of it) of an object graph into the olean file, for performance reasons.</p>",
        "id": 395143450,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696554473
    }
]