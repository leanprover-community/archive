[
    {
        "content": "<p>When in an instance declaration, would it be possible to get the IDE to autocomplete unimplemented method names as you get to them, or to stub them all out with sorry?</p>",
        "id": 392200235,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695240717
    },
    {
        "content": "<p>If you do <code>instance : Myclass := _</code> you should get a blue lightbulb appear in VS Code that gives you a code action to generate a skeleton</p>",
        "id": 392200426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695240809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/ide.20autocomplete.20instance.20methods/near/392200426\">said</a>:</p>\n<blockquote>\n<p>If you do <code>instance : Myclass := _</code> you should get a blue lightbulb appear in VS Code that gives you a code action to generate a skeleton</p>\n</blockquote>\n<p>Thanks - that seems to work :D I would never have guessed it though, as I only knew of the <code>where</code> syntax for instance declarations.</p>",
        "id": 392200822,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695240987
    },
    {
        "content": "<p>Yes, we really need to figure out how to get this to work with <code>where</code> which is clearly the preferred syntax.</p>",
        "id": 392201108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695241132
    },
    {
        "content": "<p>Well, it at least <em>generates</em> a <code>where</code>!</p>",
        "id": 392206493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695243651
    },
    {
        "content": "<p>Speaking of <code>where</code>, why can't we nest it?</p>",
        "id": 392206967,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695243858
    },
    {
        "content": "<p>nest it where?</p>",
        "id": 392207030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695243898
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"n\">where</span> <span class=\"c1\">-- unexpected token 'where'; expected ':=' or '|'</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 392207743,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695244240
    },
    {
        "content": "<p>you can do <code>f.x := 0</code></p>",
        "id": 392207784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244265
    },
    {
        "content": "<p>I've never seen that, is it documented?</p>",
        "id": 392207922,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695244339
    },
    {
        "content": "<p>inasmuch as anything is</p>",
        "id": 392207944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244350
    },
    {
        "content": "<p>Does it auto complete dotted names when you're in the <code>where</code> scope?</p>",
        "id": 392208291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695244550
    },
    {
        "content": "<p>While that is convenient, it is less so when the name is long, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">FooThatHasAReallyLongName</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFooThatHasAReallyLongName</span> <span class=\"o\">:</span> <span class=\"n\">FooThatHasAReallyLongName</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFooThatHasAReallyLongName</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFooThatHasAReallyLongName.x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">toFooThatHasAReallyLongName.y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">toFooThatHasAReallyLongName.z</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 392208352,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695244566
    },
    {
        "content": "<p>It also doesn't help if you have a function that takes a structure value</p>",
        "id": 392208396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695244599
    },
    {
        "content": "<p><code>foo { x.y := 1 }</code> is illegal, right?</p>",
        "id": 392208427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695244621
    },
    {
        "content": "<p>(certainly <code>foo { f x := x^2 }</code> is)</p>",
        "id": 392208467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695244649
    },
    {
        "content": "<p>Sometimes I wish <code>where ...</code> was a term as an alternative to <code>{ ... }</code>. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">return</span> <span class=\"n\">where</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>I've found returning <code>{ ... }</code>'s awkward since \"return\" plus a space is seven characters, and you can't put the <code>{</code> on the next line.</p>\n<p>Or in Jireh's case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFooThatHasAReallyLongName</span> <span class=\"o\">:=</span> <span class=\"n\">where</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 392208473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695244653
    },
    {
        "content": "<p>I'm torn on whether that second case should have a <code>:=</code> before the <code>where</code></p>",
        "id": 392208586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695244700
    },
    {
        "content": "<p>I agree, although that would be ambiguous with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">{</span>\n  <span class=\"n\">toFooThatHasAReallyLongName</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 392208606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244709
    },
    {
        "content": "<p>Is that syntax legal?</p>",
        "id": 392208633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695244730
    },
    {
        "content": "<p>I meant it with the <code>:=</code></p>",
        "id": 392208637,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695244733
    },
    {
        "content": "<p>It's an application of a structure instance to <code>Bar</code></p>",
        "id": 392208699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244772
    },
    {
        "content": "<p>and the first half of a definition</p>",
        "id": 392208728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244788
    },
    {
        "content": "<p>It needs a different keyword than <code>where</code>, since not only that, the <code>where</code> clause at the end of a definition would be ambiguous</p>",
        "id": 392208729,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695244789
    },
    {
        "content": "<p>that could be fixed by whitespace sensitivity</p>",
        "id": 392208819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244808
    },
    {
        "content": "<p>the <code>where</code> at the end of a declaration is also terribly ambiguous though</p>",
        "id": 392208849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244827
    },
    {
        "content": "<p>While we're wishing for syntax,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo</span> <span class=\"n\">where</span>\n   <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>might be nice as sugar for <code>foo (x := 1)</code></p>",
        "id": 392208891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695244852
    },
    {
        "content": "<p>I don't think <code>where</code> is a very good keyword to start a term with though</p>",
        "id": 392208903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244859
    },
    {
        "content": "<p>Though obviously that clashes with the above!</p>",
        "id": 392208911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695244864
    },
    {
        "content": "<p><code>where</code> is sort of nifty if you think of passing a structure to a function as being a way to pass keyword arguments, but except for that particular use it doesn't read well</p>",
        "id": 392209002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695244916
    },
    {
        "content": "<p>I think it makes sense in <code>let</code> declarations and other declaration-looking things, but I wouldn't make it a term</p>",
        "id": 392209075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695244946
    },
    {
        "content": "<p>although <code>where</code> is technically followed by a list of <code>letDecl</code>, so if <code>let</code> supported it then you could also do nested <code>where</code></p>",
        "id": 392209184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245005
    },
    {
        "content": "<p>There is also <code>withForbidden</code> for dealing with the ambiguity I mentioned <a href=\"#narrow/stream/113488-general/topic/ide.20autocomplete.20instance.20methods/near/392208606\">above</a> (which exists to deal with the issue that <code>x do ...</code> is <code>x (do ...)</code> but <code>for _ in x do ...</code> is not parsed in that way)</p>",
        "id": 392209397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245111
    },
    {
        "content": "<p>One key problem is that any <code>def</code> can end with a <code>where</code>  set of decls, so having a <code>where</code> anywhere inside a declaration (outside brackets) clashes with that.</p>",
        "id": 392259269,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695279421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/ide.20autocomplete.20instance.20methods/near/392208891\">said</a>:</p>\n<blockquote>\n<p>While we're wishing for syntax,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo</span> <span class=\"n\">where</span>\n   <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>might be nice as sugar for <code>foo (x := 1)</code></p>\n</blockquote>\n<p>Back to <a href=\"#narrow/stream/270676-lean4/topic/Fun.20macro.20-.20bulleted.20argument.20lists/near/384908572\">David's old proposal</a>, are we? <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 392259852,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695279689
    }
]