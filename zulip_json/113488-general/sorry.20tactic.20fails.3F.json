[
    {
        "content": "<p>I get this error message when attempting to use sorry,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.free_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.index</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">residually_finite</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">H.index</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">∉</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">residually_finite</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">residually_finite</span> <span class=\"o\">(</span><span class=\"n\">free_product</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">residually_finite</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">free_product.word.equiv.forall_congr_left'</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">free_product.word.equiv</span> <span class=\"n\">at</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">free_product.word.empty</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">w'</span><span class=\"o\">,</span> <span class=\"n\">hw'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">free_product.neword.of_word</span> <span class=\"n\">w</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n    <span class=\"n\">clear</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">w'</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">w'_i</span> <span class=\"n\">w'_x</span> <span class=\"n\">w'_hne1</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">hH₁</span><span class=\"o\">,</span> <span class=\"n\">hH₂</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"c1\">-- exact tactic failed, failed to assign sorry to metavariable ?m_3 (possible cause: occurs check failed)</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 345802831,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1680217359
    },
    {
        "content": "<p>The system won't forgive you</p>",
        "id": 345847920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680242795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> recently ran into something like this, I think - how was it fixed?</p>",
        "id": 345856782,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1680245862
    },
    {
        "content": "<p><code>exact sorry</code> gives \"Don't know how to synthesize placeholder <code>Π (i : ι), decidable_eq (G i)</code>\" but even adding that to the context doesn't fix it.</p>",
        "id": 345867617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680249061
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n      <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">recover</span><span class=\"o\">,</span> <span class=\"c1\">-- now 4 goals,</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 345868077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680249172
    },
    {
        "content": "<p>There should be <code>{ }</code> after the <code>induction</code> step, you shouldn't be writing code when there are two goals. This seems unrelated to the problem, but my fix will affect your second goal.</p>",
        "id": 345868508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680249259
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">residually_finite</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">residually_finite</span> <span class=\"o\">(</span><span class=\"n\">free_product</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">residually_finite</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">free_product.word.equiv.forall_congr_left'</span><span class=\"o\">,</span>\n  <span class=\"n\">rotate</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">free_product.word.equiv</span> <span class=\"n\">at</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">free_product.word.empty</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">w'</span><span class=\"o\">,</span> <span class=\"n\">hw'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">free_product.neword.of_word</span> <span class=\"n\">w</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n    <span class=\"n\">clear</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">w'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">w'_i</span> <span class=\"n\">w'_x</span> <span class=\"n\">w'_hne1</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">hH₁</span><span class=\"o\">,</span> <span class=\"n\">hH₂</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 345874643,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680250927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/sorry.20tactic.20fails.3F/near/345856782\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> recently ran into something like this, I think - how was it fixed?</p>\n</blockquote>\n<p>I had the same error, but it was from a failing <code>rw</code>. I got around it because the rewrite was in the <code>and</code> of two props and I only needed to rewrite in one, so splitting and doing the focused rewrite worked instead, not really a fix</p>",
        "id": 346031855,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1680288045
    }
]