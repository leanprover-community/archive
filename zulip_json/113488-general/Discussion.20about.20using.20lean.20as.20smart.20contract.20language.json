[
    {
        "content": "<p>I have a preliminary idea I'd like to discuss. Could Lean be the next-generation language for smart contracts and get a significant share of users?</p>\n<p>A smart contract essentially calculates the next state of the blockchain based on a given transaction. Here's a simple breakdown: <code>t</code> represents the transaction, <code>f</code> is the smart contract, and <code>s</code> denotes the state. So, the new state becomes <code>s' := f(t, s)</code> after the transaction. A significant challenge is ensuring that no malicious transactions exists, which might alter the state in harmful ways, such as rug pulls or hacks. While some have tried to address this using the formal semantics of the runtime, such methods offer limited assurance. As a result, the bulk of contract verification heavily relies on third-party audits.</p>\n<p>This is where I see the potential for Lean to revolutionize the process. Developers could publish their smart contracts alongside proofs that clearly define and guarantee the contract's behavior. For instance, let <code>P</code> represent the claim that \"everyone can withdraw their money.\" A proof such as <code>∀ s t, P f(t, s) s</code> would ensure there's no possibility of a rug pull.</p>\n<p>The beauty of this approach is its accessibility. Anyone could write these proofs, reducing our dependence on highly costly third-party audits that only a few institutions offer. In blockchain communities, many feel that such institutional requirements contradict the foundational principle of permissionless access that blockchain should uphold. </p>\n<p>If we integrate Lean with blockchain, it can open doors to something more interesting. For instance, when a developer submits code, they can also declare certain properties and provide a corresponding proof to the chain. The chain then validates this proof. If everything aligns, the code gets deployed. Moreover, if a developer later submits an updated code with a proof ensuring the same property, they can seamlessly upgrade the initial code. Such flexibility contrasts with our present situation, where smart contracts are either non-upgradable or can be modified without restrictions, which is quite frustrating.</p>\n<p>Furthermore, developers can upload their code and its desired properties, setting a bounty as an incentive. If someone from the community successfully provides a proof that validates the stated properties of the code, they earn the reward. This not only accelerates the proof-generation process but also fosters collaboration and trust within the community.</p>\n<p>I would like to write a toy system first. I'd appreciate any ideas, suggestions, questions or concerns you might have.</p>",
        "id": 399895837,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698919286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399895837\">said</a>:</p>\n<blockquote>\n<p>I have a preliminary idea I'd like to discuss. Could Lean be the next-generation language for smart contracts and get a significant share of users?</p>\n<p>A smart contract essentially calculates the next state of the blockchain based on a given transaction. Here's a simple breakdown: <code>t</code> represents the transaction, <code>f</code> is the smart contract, and <code>s</code> denotes the state. So, the new state becomes <code>s' := f(t, s)</code> after the transaction. A significant challenge is ensuring that no malicious transactions exists, which might alter the state in harmful ways, such as rug pulls or hacks. While some have tried to address this using the formal semantics of the runtime, such methods offer limited assurance. As a result, the bulk of contract verification heavily relies on third-party audits.</p>\n<p>This is where I see the potential for Lean to revolutionize the process. Developers could publish their smart contracts alongside proofs that clearly define and guarantee the contract's behavior. For instance, let <code>P</code> represent the claim that \"everyone can withdraw their money.\" A proof such as <code>∀ s t, P f(t, s) s</code> would ensure there's no possibility of a rug pull.</p>\n<p>The beauty of this approach is its accessibility. Anyone could write these proofs, reducing our dependence on highly costly third-party audits that only a few institutions offer. In blockchain communities, many feel that such institutional requirements contradict the foundational principle of permissionless access that blockchain should uphold. </p>\n<p>If we integrate Lean with blockchain, it can open doors to something more interesting. For instance, when a developer submits code, they can also declare certain properties and provide a corresponding proof to the chain. The chain then validates this proof. If everything aligns, the code gets deployed. Moreover, if a developer later submits an updated code with a proof ensuring the same property, they can seamlessly upgrade the initial code. Such flexibility contrasts with our present situation, where smart contracts are either non-upgradable or can be modified without restrictions, which is quite frustrating.</p>\n<p>Furthermore, developers can upload their code and its desired properties, setting a bounty as an incentive. If someone from the community successfully provides a proof that validates the stated properties of the code, they earn the reward. This not only accelerates the proof-generation process but also fosters collaboration and trust within the community.</p>\n<p>I would like to write a toy system first. I'd appreciate any ideas, suggestions, questions or concerns you might have.</p>\n</blockquote>\n<p>Which blockchain? Are you proposing to build a new network in Lean?</p>",
        "id": 399898771,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1698920160
    },
    {
        "content": "<p>No idea yet. Maybe sub-chain in other eco? Just talk about the idea first. But, yes, integration needs a chain.</p>",
        "id": 399902340,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698921227
    },
    {
        "content": "<p>Do you know about Cairo?</p>",
        "id": 399908587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698922981
    },
    {
        "content": "<p>Lean is in some sense \"perfectly trustworthy\" for mathematics, but this isn't the case for executable programs; there are plenty of ways to perform a rug pull where you prove your program does one thing in the kernel, but when run in the real world it does something different.</p>",
        "id": 399909735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698923311
    },
    {
        "content": "<p>So as usual, the way to tell that no rugs are being pulled is to carefully read the source code</p>",
        "id": 399909898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698923349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399908587\">said</a>:</p>\n<blockquote>\n<p>Do you know about Cairo?</p>\n</blockquote>\n<p>Yes. But I think STARKs is not related to the idea.</p>",
        "id": 399915775,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698925076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399909898\">said</a>:</p>\n<blockquote>\n<p>So as usual, the way to tell that no rugs are being pulled is to carefully read the source code</p>\n</blockquote>\n<p>While this holds true for most development scenarios, it's the reason functional programming languages like Haskell aren't as popular as people like them. However, what I'd like to discuss is whether this remains the case in the context of smart contracts. </p>\n<ol>\n<li>Upgrading a smart contract is very challenging, as many are designed to be immutable. Developing smart contracts is more akin to chip manufacturing than traditional software development. (It's not 'soft' at all.)</li>\n<li>Once an attack starts, halting the chain or the program becomes difficult.</li>\n<li>The financial loss can be substantial.</li>\n<li>Unlike in traditional software development where spotting bugs is primarily the developer's responsibility, in crypto, users need to be familiar with the code to safeguard their assets. Most users can't understand the code and are dependent on auditing reports. For those capable of understanding the code, reading through thousands of lines just to interact with the contract safely is time-consuming and low-efficiency. I think here proof would be helpful.</li>\n<li>Only institutions with a high reputation can provide trustworthy auditing reports. This naturally leads to a monopoly, driving up costs for developers and users.</li>\n</ol>\n<p>While \"no rug\" isn't a precisely defined term, it's still good to show that a contract adheres to certain well-established properties. </p>\n<p>After witnessing numerous hacking incidents, I'm convinced that employing a language with a strong type system and few vulnerabilities is essential. Presently, even audits that cost millions of dollars can overlook potential risks. Solidity and the EVM lack the robustness to effectively prevent bugs. The EVM can be viewed as an early implementation of Vitalik's idea, introduced prematurely and leaving many issues unresolved. There inevitably will be a successor to address these shortcomings.</p>",
        "id": 399924005,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698927865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399909735\">said</a>:</p>\n<blockquote>\n<p>where you prove your program does one thing in the kernel, but when run in the real world it does something different.</p>\n</blockquote>\n<p>How that would be, could you give me some examples. Like there are bugs in the kernel or ...</p>",
        "id": 399924320,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698927987
    },
    {
        "content": "<p>Sure, here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">implemented_by</span> <span class=\"n\">one</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\">-- in the kernel, two is still two</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">two_is_two</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- but we told the compiler / interpreter that it can use `one` to execute `two`</span>\n<span class=\"k\">#eval</span> <span class=\"n\">two</span> <span class=\"c1\">-- prints `1`</span>\n</code></pre></div>",
        "id": 399925701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698928469
    },
    {
        "content": "<blockquote>\n<p>Like there are bugs in the kernel</p>\n</blockquote>\n<p>No, but the kernel is not the same thing as the VM, and you are implicitly trusting that the type-theoretic algorithms are correctly compiled into C / handled by the interpreter.</p>",
        "id": 399925888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698928528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399925701\">said</a>:</p>\n<blockquote>\n<p>Sure, here's an example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">implemented_by</span> <span class=\"n\">one</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\">-- in the kernel, two is still two</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">two_is_two</span> <span class=\"o\">:</span> <span class=\"n\">two</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- but we told the compiler / interpreter that it can use `one` to execute `two`</span>\n<span class=\"k\">#eval</span> <span class=\"n\">two</span> <span class=\"c1\">-- prints `1`</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It is interesting and helpful. Thank you very much. Is there any way to avoid this. Would an external checker or a dialect help?</p>",
        "id": 399929354,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698929639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399925888\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Like there are bugs in the kernel</p>\n</blockquote>\n<p>No, but the kernel is not the same thing as the VM, and you are implicitly trusting that the type-theoretic algorithms are correctly compiled into C / handled by the interpreter.</p>\n</blockquote>\n<p>Does what you mean here the kernel of the compiler or type checker? I think we always have to trust some basic infrastructure. But maybe the less 'axioms' the better.</p>",
        "id": 399930326,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698929913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399895837\">said</a>:</p>\n<blockquote>\n<p>I would like to write a toy system first. I'd appreciate any ideas, suggestions, questions or concerns you might have.</p>\n</blockquote>\n<p>The problem of using lean itself as a language has been explained by Eric. But even if you cannot get code extraction, just having an EDSL for reasoning about smart contracts is good to have. You can restrict the kind of constructions allowed there. Lean is nice for implementing EDSLs</p>",
        "id": 399930704,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698930019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399930704\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399895837\">said</a>:</p>\n<blockquote>\n<p>I would like to write a toy system first. I'd appreciate any ideas, suggestions, questions or concerns you might have.</p>\n</blockquote>\n<p>The problem of using lean itself as a language has been explained by Eric. But even if you cannot get code extraction, just having an EDSL for reasoning about smart contracts is good to have. You can restrict the kind of constructions allowed there. Lean is nice for implementing EDSLs</p>\n</blockquote>\n<p>I may not catch your idea well. But do you mean something like this? <a href=\"https://github.com/ivan71kmayshan27/coq-evm\">https://github.com/ivan71kmayshan27/coq-evm</a> or <a href=\"https://github.com/runtimeverification/evm-semantics\">https://github.com/runtimeverification/evm-semantics</a> ?</p>",
        "id": 399934046,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698931016
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 399934075,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698931027
    },
    {
        "content": "<p>There's a bunch of prior work in this area. Look through recent ITP/ICFP/POPL/PLDI proceedings and you should find some papers about verifying smart contracts. Smart contracts are indeed an attractive verification target, but as always the devil is in the details.</p>",
        "id": 399934186,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698931069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399934186\">said</a>:</p>\n<blockquote>\n<p>There's a bunch of prior work in this area. Look through recent ITP/ICFP/POPL/PLDI proceedings and you should find some papers about verifying smart contracts. Smart contracts are indeed an attractive verification target, but as always the devil is in the details.</p>\n</blockquote>\n<p>I saw some of them. What I am interested in is would it be easy if we write the contract in Lean and verify it in Lean.</p>",
        "id": 399935224,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698931397
    },
    {
        "content": "<p>Wrt using Lean for verified software, when you run a verified program in Lean, you trust that</p>\n<ul>\n<li>the Lean compiler has no bugs;</li>\n<li>all <code>@[implemented_by]</code> and <code>@[extern]</code> annotations are correct;</li>\n<li>the Lean kernel (or <code>leanchecker</code> or <code>lean4lean</code>) has no bugs.</li>\n</ul>\n<p>Other systems have much smaller trustbases, particularly HOL Light with the CakeML/Candle project.</p>\n<p>However, for a smart contracts project you likely wouldn't use the Lean compiler anyway (because you need to output your blockchain language, not C), so then the first two points are not a concern. As Shreyas points out, you likely don't want to compile all of Lean either (because that would be way too inefficient); rather you would work with a deep embedding of the blockchain language, or perhaps of a custom language that compiles to the blockchain language.</p>",
        "id": 399935937,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698931603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399935224\">said</a>:</p>\n<blockquote>\n<p>I saw some of them. What I am interested in is would it be easy if we write the contract in Lean and verify it in Lean.</p>\n</blockquote>\n<p>If you write the contract in Lean, you have to compile it to an efficient blockchain program. This is highly nontrivial because blockchains have such severe resource limits that the compiler would have to optimise near-perfectly.</p>",
        "id": 399936340,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698931729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399935937\">said</a>:</p>\n<blockquote>\n<p>Wrt using Lean for verified software, when you run a verified program in Lean, you trust that</p>\n<ul>\n<li>the Lean compiler has no bugs;</li>\n<li>all <code>@[implemented_by]</code> and <code>@[extern]</code> annotations are correct;</li>\n<li>the Lean kernel (or <code>leanchecker</code> or <code>lean4lean</code>) has no bugs.</li>\n</ul>\n<p>Other systems have much smaller trustbases, particularly HOL Light with the CakeML/Candle project.</p>\n<p>However, for a smart contracts project you likely wouldn't use the Lean compiler anyway (because you need to output your blockchain language, not C), so then the first two points are not a concern. As Shreyas points out, you likely don't want to compile all of Lean either (because that would be way too inefficient); rather you would work with a deep embedding of the blockchain language, or perhaps of a custom language that compiles to the blockchain language.</p>\n</blockquote>\n<p>Understood, thank you.</p>",
        "id": 399936631,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698931828
    },
    {
        "content": "<p>Perhaps worth noting that of those bullet points, mathematicians only really care about the last one (which is also the one that needs the least trust)</p>",
        "id": 399936939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698931940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399936340\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399935224\">said</a>:</p>\n<blockquote>\n<p>I saw some of them. What I am interested in is would it be easy if we write the contract in Lean and verify it in Lean.</p>\n</blockquote>\n<p>If you write the contract in Lean, you have to compile it to an efficient blockchain program. This is highly nontrivial because blockchains have such severe resource limits that the compiler would have to optimise near-perfectly.</p>\n</blockquote>\n<p>Some block-chains support wasm. I saw some one is porting Lean to wasm. Does that help?</p>",
        "id": 399937041,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698931987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399936939\">said</a>:</p>\n<blockquote>\n<p>Perhaps worth noting that of those bullet points, mathematicians only really care about the last one (which is also the one that needs the least trust)</p>\n</blockquote>\n<p>Just out of curiosity, why?</p>",
        "id": 399937284,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698932070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399937041\">said</a>:</p>\n<blockquote>\n<p>Some block-chains support wasm. I saw some one is porting Lean to wasm. Does that help?</p>\n</blockquote>\n<p>A bit, but you'd still have to ensure that your Lean smart contracts compile to extremely efficient wasm.</p>",
        "id": 399941304,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698933254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399941304\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399937041\">said</a>:</p>\n<blockquote>\n<p>Some block-chains support wasm. I saw some one is porting Lean to wasm. Does that help?</p>\n</blockquote>\n<p>A bit, but you'd still have to ensure that your Lean smart contracts compile to extremely efficient wasm.</p>\n</blockquote>\n<p>You also probably  don't want to reason about your contracts at the wasm level anyway. What you need is a high level DSL where you can reason about smart contracts at a high level (symbolically) and then have verified translations to some IR up to some semantics, and so on until you reach wasm.</p>",
        "id": 399967232,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698938920
    },
    {
        "content": "<p>As long as you stick to DSLs, you don't have to trust the full lean compiler.</p>",
        "id": 399967458,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698938977
    },
    {
        "content": "<p>Ofc, this may not be a fully satisfactory answer, because I am carefully asking you to avoid contact with the real world, but these simplification and abstraction steps restrict your means of interaction with the real world, and prove prpperties up to that point, which is the best you can achieve anyway with FV</p>",
        "id": 399967925,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698939096
    },
    {
        "content": "<p>Reasoning about a full programming language for distributed systems is simply overkill.</p>",
        "id": 399969587,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698939572
    },
    {
        "content": "<p>Thank you all for the information. I changed my mind. It may not be a good idea. Thank you~</p>",
        "id": 400037260,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698970369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399936939\">said</a>:</p>\n<blockquote>\n<p>Perhaps worth noting that of those bullet points, mathematicians only really care about the last one (which is also the one that needs the least trust)</p>\n</blockquote>\n<p>I guess these \"soundness questions\" will keep coming up. Perhaps there should be a page to link to that explains the situation and the relevant point of view in Lean and Mathlib? </p>\n<p>That bullet list is not complete  (from what I've seen mentioned as examples). To illustrate: How hard would it be (for a group of experts) to set up a CI system where anyone can upload code and someone proving <code>False</code> while passing appropriate additional checks indicates a kernel bug (or type system inconsistency)? My impression from what people have said is \"very hard\", while the list being complete might be interpreted as saying that just \"banning the words <code>implemented_by</code> and <code>extern</code>\" would do it. (I'm not suggesting anyone should try this)</p>\n<p>I'm beginning to understand why mathematicians (who care about formalization) don't care about this but I'm not quite there yet. For example I could see that coming up when using automation, especially language models. Eventually some system might find one of these loopholes and it may be hard to detect due to it happening inside macros and tactics. D. J. Bernstein has also mentioned this possibility in his <a href=\"https://cr.yp.to/papers.html#pwccp\">recent paper</a>.</p>",
        "id": 400058883,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698983175
    },
    {
        "content": "<p>To be honest I think that Mathlib CI is a pretty close approximation of what you've asked for: we compile your code with Lean, then recheck the oleans with <code>lean4checker</code> (and soon <code>lean4lean</code>?).</p>\n<p>If your proof of <code>False</code> passes that, you've either found a boring bug in our CI setup, or something interesting.</p>",
        "id": 400059673,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698983738
    },
    {
        "content": "<p>e.g. I don't know how to pass that.</p>",
        "id": 400059685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698983751
    },
    {
        "content": "<p>(Okay, if my PR disables CI, or changes the version of <code>lean4checker</code>, etc...)</p>",
        "id": 400059762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698983787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/400059685\">said</a>:</p>\n<blockquote>\n<p>e.g. I don't know how to pass that.</p>\n</blockquote>\n<p>Will it prevent me from adding axioms? What I'm trying to understand is what <em>exactly</em> the \"pretty close\" means in \"pretty close approximation\". (I do realize that I probably never will understand this <em>exactly</em>. It's still interesting to try.)</p>",
        "id": 400062384,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698985305
    },
    {
        "content": "<p>not as currently configured</p>",
        "id": 400062795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698985573
    },
    {
        "content": "<p>We should add this somewhere in Mathlib CI, I guess. Any takers? Even just <code>import Mathlib</code> and then scan the constants in the environment for unfamiliar axioms?</p>",
        "id": 400067351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698989257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/400059673\">said</a>:</p>\n<blockquote>\n<p>To be honest I think that Mathlib CI is a pretty close approximation of what you've asked for: we compile your code with Lean, then recheck the oleans with <code>lean4checker</code> (and soon <code>lean4lean</code>?).</p>\n<p>If your proof of <code>False</code> passes that, you've either found a boring bug in our CI setup, or something interesting.</p>\n</blockquote>\n<p>Do you mean these checks?<br>\n<a href=\"/user_uploads/3121/hGfC4lIelXBU7v7ECBlrQ6D1/Screenshot-from-2023-11-03-14-06-21.png\">Screenshot-from-2023-11-03-14-06-21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hGfC4lIelXBU7v7ECBlrQ6D1/Screenshot-from-2023-11-03-14-06-21.png\" title=\"Screenshot-from-2023-11-03-14-06-21.png\"><img src=\"/user_uploads/3121/hGfC4lIelXBU7v7ECBlrQ6D1/Screenshot-from-2023-11-03-14-06-21.png\"></a></div>",
        "id": 400070781,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698991701
    },
    {
        "content": "<p>Readers of this thread might be interested in <a href=\"#narrow/stream/284757-job-postings/topic/Remote.20Lean.20jobs.20at.20Nethermind/near/389633854\">this job posting</a> from a couple months ago, it seems Nethermind might be interested in verifying smart contracts as well.</p>",
        "id": 400072390,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698992739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250110\">@ZHAO Jiecheng</span>, yes, if you look at what CI does it runs <code>lean4checker</code>.</p>",
        "id": 400113843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699010522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">Adomas Baliuka</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/400058883\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20using.20lean.20as.20smart.20contract.20language/near/399936939\">said</a>:</p>\n<blockquote>\n<p>Perhaps worth noting that of those bullet points, mathematicians only really care about the last one (which is also the one that needs the least trust)</p>\n</blockquote>\n<p>I guess these \"soundness questions\" will keep coming up. Perhaps there should be a page to link to that explains the situation and the relevant point of view in Lean and Mathlib?</p>\n</blockquote>\n<p>I think this would be a very good idea. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, do you think this belongs in the Lean docs, or the community website?</p>",
        "id": 400115853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699011431
    },
    {
        "content": "<p>Both would be good, I think. The Lean docs should just point to the available tools and explain the situation. The Mathlib docs could be more opinionated about \"what mathematicians should care about\".</p>",
        "id": 400249583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699071789
    }
]