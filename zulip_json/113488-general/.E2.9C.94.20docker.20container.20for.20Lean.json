[
    {
        "content": "<p>Good afternoon,</p>\n<p>I'm able to successfully run the following in VSCcode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and, using the Lean v4 container from <a href=\"https://github.com/allofphysicsgraph/lean-in-docker/tree/main/lean_v4\">https://github.com/allofphysicsgraph/lean-in-docker/tree/main/lean_v4</a> I can run the same snippet above in a text file using the command</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">docker</span> <span class=\"n\">run</span> <span class=\"bp\">-</span><span class=\"n\">it</span> <span class=\"c1\">--rm -v `pwd`:/scratch --workdir /scratch lean4onubuntu lean tmp.lean</span>\n</code></pre></div>\n<p>where <code>tmp.lean</code> contains the text snippet. No output is produced, which indicates success.</p>\n<p>When I try to avoid Unicode and use the snippet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">nat</span> <span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I get the following error: <code>tmp.lean:1:14: error: expected token</code></p>\n<p>Is there a reason the ASCII version of ℕ isn't parsed correctly? (I also tried \\N and got the same error.)</p>\n<p>If this question is better suited for a different channel I'm happy to move it.</p>",
        "id": 371527812,
        "sender_full_name": "Ben",
        "timestamp": 1688228797
    },
    {
        "content": "<p>The only version is <code>Nat</code>. The first version appears to work because of <code>autoImplicit</code>: <code>ℕ</code> is treated as a type variable.</p>",
        "id": 371532052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688229782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"429746\">@Ben</span> Follow the instruction on <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency\">this link</a> to use <code>mathlib4</code> as a dependency of your Lean project. Then try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Be careful when you type <code>ℕ</code> on your Lean file without importing any Mathlib file. When you do so, <code>ℕ</code> becomes an arbitrary type variable, not the type of the natural numbers.</p>",
        "id": 371613185,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688266233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/docker.20container.20for.20Lean/near/371532052\">said</a>:</p>\n<blockquote>\n<p>The only version is <code>Nat</code>. The first version appears to work because of <code>autoImplicit</code>: <code>ℕ</code> is treated as a type variable.</p>\n</blockquote>\n<p>Awesome! Thanks Reid. I verified that <code>Nat</code> works.</p>",
        "id": 371614806,
        "sender_full_name": "Ben",
        "timestamp": 1688267056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/docker.20container.20for.20Lean/near/371613185\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"429746\">Ben</span> Follow the instruction on <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency\">this link</a> to use <code>mathlib4</code> as a dependency of your Lean project. </p>\n</blockquote>\n<p>For reasons I don't understand, Reid's suggestion of using <code>Nat</code> seems to be sufficient. I don't have any import statements in my script.</p>",
        "id": 371615000,
        "sender_full_name": "Ben",
        "timestamp": 1688267168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"429746\">Ben</span> has marked this topic as resolved.</p>",
        "id": 371615017,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688267178
    }
]