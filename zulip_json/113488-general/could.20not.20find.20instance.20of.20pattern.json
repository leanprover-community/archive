[
    {
        "content": "<p>I'm getting a really weird error that I suspect has to do with typeclass derivations but I might be entirely wrong. I'm trying to rewrite using this theorem: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inSet</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n<span class=\"n\">InSet</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inSetPropBoolEquiv</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">inSet</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">InSet</span> <span class=\"n\">a</span> <span class=\"n\">as</span>\n</code></pre></div>\n<p>which is kind of an analogue of <a href=\"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Init/Data/List/Basic.lean#L359C1-L371C55\">these</a> list lemmas.</p>\n<p>my goal state has this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">pset</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span>\n<span class=\"c1\">---</span>\n<span class=\"n\">inSet</span> <span class=\"n\">f</span> <span class=\"n\">pset</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>but when i try to <code>rw [inSetPropBoolEquiv]</code>, I get this error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">inSet</span> <span class=\"bp\">?</span><span class=\"n\">m.113395</span> <span class=\"bp\">?</span><span class=\"n\">m.113396</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>which doesn't make sense to me because that is the form my goal is in. I thought it might be a <code>DecidableEq</code> instance thing but <code>A</code> is an instance of <code>DecidableEq</code> so that doesn't make sense. Am I missing something obvious?</p>",
        "id": 374347160,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689097812
    },
    {
        "content": "<p>[Edit: deleted because it was wrong and irrelevant to the original question]</p>",
        "id": 374348513,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689098158
    },
    {
        "content": "<p>That's a type error. The error says that you're not putting your inputs in the correct places.</p>",
        "id": 374352441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689099171
    },
    {
        "content": "<p>Ah i see. fully qualified it correctly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">inSetPropBoolEquiv</span> <span class=\"n\">A</span> <span class=\"n\">instDecidableEqA</span> <span class=\"n\">f</span> <span class=\"n\">pset</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and I got the same error as before of the rewrite failure, which I'm still unable to solve.</p>",
        "id": 374354212,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689099624
    },
    {
        "content": "<p>I solved it. So for <code>A</code> I had <code>deriving BEq, DecidableEq for A</code> (at some point I had only <code>BEq</code> and added <code>DecidableEq</code> later, but now I realize that you don't need both), and it generated two separate <code>instBEq</code> instantiations -- one directly via the <code>BEq</code> and one via the <code>DecidableEq</code>. <code>inSet</code>'s <code>BEq</code> constraint was then filled by two different instances in the target and the pattern and hence could not be unified, and since it was an implicit arg it was never printed; I just happened to notice it when I hovered over the term in the goal panel :')</p>",
        "id": 374380406,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689107454
    },
    {
        "content": "<p>Maybe an opportunity to improve the error message on unification failure? explicitly mentioning which argument could not be unified would be useful</p>",
        "id": 374380612,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689107515
    }
]