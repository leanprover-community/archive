[
    {
        "content": "<p>I have a type <code>tuple (α : Type u) : ℕ → Type u</code> and would like to implement <code>functor</code> on it. I already have definitions for <code>map</code> and <code>map_const</code>, but the <code>instance</code> statement keeps giving me errors due to a type mismatch. This seems to be because <code>functor</code> requires it to be a <code>Type -&gt; Type</code> and the extra <code>ℕ</code> argument is causing issues. I've tried using a lambda to fix this, but Lean also complains about that since the name is not provided explicitly. Is there any way around this other than changing to <code>tuple : ℕ  → Type u  → Type u</code>? I can't seem to find an instance of <code>functor</code> for <code>core.vector</code>, which is basically the same as <code>tuple</code> (other than the fact that <code>tuple</code> works with the inductive definition directly rather than using a list internally), so this gives me doubt.</p>",
        "id": 369808093,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687806682
    },
    {
        "content": "<p>Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tuple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">tuple</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">tuple</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tuple</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tuple</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tuple</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">tuple</span> <span class=\"n\">β</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map_const</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tuple</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">tuple</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">tuple</span> <span class=\"n\">γ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">map_const</span><span class=\"o\">⟩</span> <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>",
        "id": 369808348,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687806745
    },
    {
        "content": "<p>Can't you just swap the arguments? That is your <code>tuple</code> becomes <code>tuple'</code> and then <code>tuple n α := tuple' α n</code>. Then you can state that each <code>tuple n</code> is a functor.</p>",
        "id": 369834542,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1687813770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113488-general/topic/Implementing.20functor.20for.20a.20Type.20-.3E.20N.20-.3E.20Type/near/369834542\">said</a>:</p>\n<blockquote>\n<p>Can't you just swap the arguments? That is your <code>tuple</code> becomes <code>tuple'</code> and then <code>tuple n α := tuple' α n</code>. Then you can state that each <code>tuple n</code> is a functor.</p>\n</blockquote>\n<p>That does work, but then I can only use things like <code>&lt;$&gt;</code> with <code>tuple'</code> and not with regular <code>tuple</code>. Implementing <code>cast</code> between the two would probably help, but it would still be quite cumbersome.</p>",
        "id": 369840224,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687815391
    },
    {
        "content": "<p>If your <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> is just to use <code>&lt;$&gt;</code> with your type, then you may consider switching to lean 4 and using the new <code>|&gt;</code> <a href=\"https://leanprover.github.io/lean4/doc/functions.html#pipelining\">notation</a>.  Instead of <code>f &lt;$&gt; v</code> you write <code>v |&gt;.map f</code>.  You can also chain them together, like <code>v |&gt;.map f |&gt;.map (· + 1) |&gt;.last</code>.</p>",
        "id": 369848271,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687819229
    },
    {
        "content": "<p>It’s a more flexible notation which doesn’t require type classes or hard-to-read symbols.</p>",
        "id": 369848376,
        "sender_full_name": "Jason Rute",
        "timestamp": 1687819289
    },
    {
        "content": "<p>The arguments to switch to lean4 get better each day... I might have to do that soon.</p>",
        "id": 369851487,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1687820955
    }
]