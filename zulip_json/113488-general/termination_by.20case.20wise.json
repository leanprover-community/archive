[
    {
        "content": "<p>This is probably really dumb but i've been confused for a bit: I have two mutually recursive functions and i need to specify termination. The structure is something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">outer</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- not a recursive call</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">outer</span> <span class=\"n\">m</span>\n<span class=\"n\">ok</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">C3</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"c1\">-- m : List Expr</span>\n<span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">inner</span> <span class=\"n\">m</span>\n<span class=\"n\">ok</span> <span class=\"n\">x</span>\n<span class=\"bp\">...</span> <span class=\"n\">variations</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">three</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">[]</span> <span class=\"k\">then</span> <span class=\"n\">ok</span> <span class=\"o\">[]</span>\n<span class=\"k\">else</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">outer</span> <span class=\"n\">a.head</span>\n<span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">inner</span> <span class=\"n\">a.tail</span>\n<span class=\"n\">ok</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span>\n</code></pre></div>\n<p>proving termination for <code>inner</code> is simple as <code>List.length a</code> is decreasing. <br>\nthe only way i can think of proving termination for <code>outer</code> is by pattern matching on each <code>Expr</code> constructor. for constructors with an argument that is a collection type the decreasing size seems simple enough. <br>\nthis is the dumb part of the question but how do i prove termination for constructors matching the structure  of<code>C1</code>, that is, no recursive calls? It seems intuitive that hitting that case means terminating right away because we just return immediately but i have no idea how to say something is actually decreasing. I'm assuming the termination checker doesn't usually complain about this case but if i'm doing a match statement in the <code>termination_by</code> clause i need to specify a relation for each arm.<br>\nthis is the slightly less dumb part but how do i prove termination for a <code>C2</code> type? in my head it's just <em>if the internal call to <code>outer</code> terminates then that arm terminates</em> but i'm not sure how to specify that. </p>\n<p>thank you :)</p>",
        "id": 370207922,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687900529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span> Could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 370217258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687903716
    },
    {
        "content": "<p>It sounds to me like this is an induction on <code>sizeOf</code></p>",
        "id": 370217677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687903875
    },
    {
        "content": "<p>which is also the default</p>",
        "id": 370217701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687903885
    },
    {
        "content": "<p>but it would probably simplify the termination proof significantly if you used pattern matching in <code>inner</code> instead of if-else</p>",
        "id": 370217850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687903935
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ok</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">outer</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">inner</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 370217925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687903964
    },
    {
        "content": "<p>sorry about that, here's an mwe: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">C3</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Inhabited</span> <span class=\"n\">for</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">outer</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">Bool</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C1</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C2</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">outer</span> <span class=\"n\">m</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C3</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">inner</span> <span class=\"n\">m</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">((</span><span class=\"bp\">&lt;-</span> <span class=\"n\">outer</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">inner</span> <span class=\"n\">a.tail</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n<span class=\"n\">outer</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C1</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C2</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C3</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.length</span> <span class=\"n\">m</span>\n<span class=\"n\">inner</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.length</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>This is a far simpler case than what I have but I can't prove termination on this either. I'm not sure if I'm using <code>sizeOf</code> correctly, though</p>\n<p>I guess I understand why it's refusing to accept termination (the <code>C2</code> case), but I'm not sure how to do it (or even if it can be done) in a case where you have something like this.</p>",
        "id": 370489897,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687968472
    },
    {
        "content": "<p>As Mario said, this is an induction on <code>sizeOf</code>, at least if you correctly match on the list in <code>inner</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">outer</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">Bool</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C1</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C2</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">outer</span> <span class=\"n\">m</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C3</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">inner</span> <span class=\"n\">m</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">((</span><span class=\"bp\">&lt;-</span> <span class=\"n\">outer</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">inner</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 370492302,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687968916
    },
    {
        "content": "<p>that does in fact seem to work for this simple case, though not for the more complex one I have. I'll try to mess with the pattern matching a bit more before i ask about that, though. Thank you!<br>\n[edit: It was in fact just a matter of switching out a couple other head and tail instances :)]</p>",
        "id": 370508990,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687972035
    }
]