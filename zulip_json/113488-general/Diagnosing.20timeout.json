[
    {
        "content": "<p>I'm getting a confusing deterministic timeout - with the last line of my proof there's a timeout but without it there isn't, and if I reorder the proof to have a different last line, still the last line gives a timeout. I haven't used anything like simp or tidy, and I'm pretty sure there shouldn't be any difficult typeclass searches either. What sort of thing could I do to figure out why it's timing out? (I can't really post an MWE since it's on top of thousands of lines of topos code but the proof is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195833392,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250797
    },
    {
        "content": "<p>I'm not sure if it makes a difference but the proof of <code>dense_prod_map_id</code> is currently sorry</p>",
        "id": 195833617,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250946
    },
    {
        "content": "<p>and without the final line of the proof, it's very quick to show me the tactic state</p>",
        "id": 195833653,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250973
    },
    {
        "content": "<p>are there other fields of <code>sheaf</code> you haven't provided?</p>",
        "id": 195833884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251104
    },
    {
        "content": "<p>Nope</p>",
        "id": 195833898,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251112
    },
    {
        "content": "<p>You can try turning on various trace flags, and see whether anything looks obviously out of control. Otherwise, I am afraid it's not easy to tell what's going on</p>",
        "id": 195834909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251686
    },
    {
        "content": "<p>One possibility is that you actually have a type error and Lean is going on an unfolding spree to see if it can be reduced away</p>",
        "id": 195835003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251719
    },
    {
        "content": "<p>Are there any trace flags I should try first? <code>trace.class_instances</code> didn't seem out of control</p>",
        "id": 195835097,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835003\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835003\">said</a>:</p>\n<blockquote>\n<p>One possibility is that you actually have a type error and Lean is going on an unfolding spree to see if it can be reduced away</p>\n</blockquote>\n<p>This makes sense, but if I reorder the proof (eg changing the <code>have z</code> to a <code>suffices</code>) there's no type error for the alternative last line</p>",
        "id": 195835237,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251818
    },
    {
        "content": "<p>For clarity, by reordered proof I mean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195835283,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251841
    },
    {
        "content": "<p>In both cases commenting out the last line (in the latter case, just the <code>ha</code>) tells me quickly that the goal isn't solved and there's no other errors</p>",
        "id": 195835390,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251885
    },
    {
        "content": "<p>maybe <code>set_option trace.type_context.is_def_eq true</code></p>",
        "id": 195835402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251898
    },
    {
        "content": "<p>Doesn't seem to be crazy, one of the rw gives a pretty long trace but most of it says success</p>",
        "id": 195835923,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588252140
    },
    {
        "content": "<p>Post a MWE anyway. Seriously. Of the form \"download this branch of this repo, and look at this line in this file\". When people did this in the past I just thought they were taking the mickey. But now with leanproject it's much easier.</p>",
        "id": 195836978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588252732
    },
    {
        "content": "<p>Well, something must be happening where Lean starts taking time.</p>",
        "id": 195837143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252812
    },
    {
        "content": "<p>In the past I have occasionally resorted to running Lean in a debugger, then stopping it at a random point and looking at the trace</p>",
        "id": 195837169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195836978\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195836978\">said</a>:</p>\n<blockquote>\n<p>Post a MWE anyway. Seriously. Of the form \"download this branch of repo, and look at this line in this file\". When people did this in the past I just thought they were taking the mickey. But now with leanproject it's much easier.</p>\n</blockquote>\n<p>The final line in <a href=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean\" title=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean\">https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean</a> - download the sheaf branch of the repo. (It's not particularly minimal)</p>",
        "id": 195837876,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588253209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195837169\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195837169\">said</a>:</p>\n<blockquote>\n<p>In the past I have occasionally resorted to running Lean in a debugger, then stopping it at a random point and looking at the trace</p>\n</blockquote>\n<p>How could I do this?</p>",
        "id": 195860476,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588262199
    },
    {
        "content": "<p>If I add another line (eg simp) before the <code>end</code>, it says the tactic state is <code>goals accomplished</code> and the simp fails with match failed, no goals; and this happens quickly</p>",
        "id": 195866461,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588264744
    },
    {
        "content": "<p>My guess is that you should try to fill in the sorry of <code>dense_prod_map_id</code>: it is not a Prop, so what you put in there is important.</p>\n<p>By the way, all these classes (<code>dense</code>, <code>closed</code>) are not Props because <code>is_iso</code> is not Prop either. Does it really create problems to turn <code>is_iso</code> into a Prop, just requiring the existence of an inverse -- and having a convenience function <code>is_iso.inverse</code> that would pull the inverse out of choice?</p>",
        "id": 195869576,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588265864
    },
    {
        "content": "<p>This is the big \"category_theory uses data, not Props\" question...</p>",
        "id": 195869737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265915
    },
    {
        "content": "<p>The same thing with <code>has_limits</code> etc...</p>",
        "id": 195869849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265954
    },
    {
        "content": "<p>Yeah I think it has to be all or nothing - we've got to have everything as a Prop or everything as data otherwise things won't play well with each other</p>",
        "id": 195870021,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266008
    },
    {
        "content": "<p>If the data is not unique, then I understand you need to keep the data and record the way it is constructed. But when the data is unique like the inverse, I don't see the point.</p>",
        "id": 195870328,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588266124
    }
]