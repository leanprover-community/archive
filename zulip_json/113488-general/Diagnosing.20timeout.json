[
    {
        "content": "<p>I'm getting a confusing deterministic timeout - with the last line of my proof there's a timeout but without it there isn't, and if I reorder the proof to have a different last line, still the last line gives a timeout. I haven't used anything like simp or tidy, and I'm pretty sure there shouldn't be any difficult typeclass searches either. What sort of thing could I do to figure out why it's timing out? (I can't really post an MWE since it's on top of thousands of lines of topos code but the proof is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195833392,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250797
    },
    {
        "content": "<p>I'm not sure if it makes a difference but the proof of <code>dense_prod_map_id</code> is currently sorry</p>",
        "id": 195833617,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250946
    },
    {
        "content": "<p>and without the final line of the proof, it's very quick to show me the tactic state</p>",
        "id": 195833653,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588250973
    },
    {
        "content": "<p>are there other fields of <code>sheaf</code> you haven't provided?</p>",
        "id": 195833884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251104
    },
    {
        "content": "<p>Nope</p>",
        "id": 195833898,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251112
    },
    {
        "content": "<p>You can try turning on various trace flags, and see whether anything looks obviously out of control. Otherwise, I am afraid it's not easy to tell what's going on</p>",
        "id": 195834909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251686
    },
    {
        "content": "<p>One possibility is that you actually have a type error and Lean is going on an unfolding spree to see if it can be reduced away</p>",
        "id": 195835003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251719
    },
    {
        "content": "<p>Are there any trace flags I should try first? <code>trace.class_instances</code> didn't seem out of control</p>",
        "id": 195835097,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835003\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835003\">said</a>:</p>\n<blockquote>\n<p>One possibility is that you actually have a type error and Lean is going on an unfolding spree to see if it can be reduced away</p>\n</blockquote>\n<p>This makes sense, but if I reorder the proof (eg changing the <code>have z</code> to a <code>suffices</code>) there's no type error for the alternative last line</p>",
        "id": 195835237,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251818
    },
    {
        "content": "<p>For clarity, by reordered proof I mean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195835283,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251841
    },
    {
        "content": "<p>In both cases commenting out the last line (in the latter case, just the <code>ha</code>) tells me quickly that the goal isn't solved and there's no other errors</p>",
        "id": 195835390,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588251885
    },
    {
        "content": "<p>maybe <code>set_option trace.type_context.is_def_eq true</code></p>",
        "id": 195835402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588251898
    },
    {
        "content": "<p>Doesn't seem to be crazy, one of the rw gives a pretty long trace but most of it says success</p>",
        "id": 195835923,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588252140
    },
    {
        "content": "<p>Post a MWE anyway. Seriously. Of the form \"download this branch of this repo, and look at this line in this file\". When people did this in the past I just thought they were taking the mickey. But now with leanproject it's much easier.</p>",
        "id": 195836978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588252732
    },
    {
        "content": "<p>Well, something must be happening where Lean starts taking time.</p>",
        "id": 195837143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252812
    },
    {
        "content": "<p>In the past I have occasionally resorted to running Lean in a debugger, then stopping it at a random point and looking at the trace</p>",
        "id": 195837169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588252828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195836978\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195836978\">said</a>:</p>\n<blockquote>\n<p>Post a MWE anyway. Seriously. Of the form \"download this branch of repo, and look at this line in this file\". When people did this in the past I just thought they were taking the mickey. But now with leanproject it's much easier.</p>\n</blockquote>\n<p>The final line in <a href=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean\" title=\"https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean\">https://github.com/b-mehta/topos/blob/sheaf/src/sheaf.lean</a> - download the sheaf branch of the repo. (It's not particularly minimal)</p>",
        "id": 195837876,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588253209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195837169\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195837169\">said</a>:</p>\n<blockquote>\n<p>In the past I have occasionally resorted to running Lean in a debugger, then stopping it at a random point and looking at the trace</p>\n</blockquote>\n<p>How could I do this?</p>",
        "id": 195860476,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588262199
    },
    {
        "content": "<p>If I add another line (eg simp) before the <code>end</code>, it says the tactic state is <code>goals accomplished</code> and the simp fails with match failed, no goals; and this happens quickly</p>",
        "id": 195866461,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588264744
    },
    {
        "content": "<p>My guess is that you should try to fill in the sorry of <code>dense_prod_map_id</code>: it is not a Prop, so what you put in there is important.</p>\n<p>By the way, all these classes (<code>dense</code>, <code>closed</code>) are not Props because <code>is_iso</code> is not Prop either. Does it really create problems to turn <code>is_iso</code> into a Prop, just requiring the existence of an inverse -- and having a convenience function <code>is_iso.inverse</code> that would pull the inverse out of choice?</p>",
        "id": 195869576,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588265864
    },
    {
        "content": "<p>This is the big \"category_theory uses data, not Props\" question...</p>",
        "id": 195869737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265915
    },
    {
        "content": "<p>The same thing with <code>has_limits</code> etc...</p>",
        "id": 195869849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265954
    },
    {
        "content": "<p>Yeah I think it has to be all or nothing - we've got to have everything as a Prop or everything as data otherwise things won't play well with each other</p>",
        "id": 195870021,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266008
    },
    {
        "content": "<p>If the data is not unique, then I understand you need to keep the data and record the way it is constructed. But when the data is unique like the inverse, I don't see the point.</p>",
        "id": 195870328,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588266124
    },
    {
        "content": "<p>In some cases, the data might only be unique up to (unique) isomorphism, but also in category theory (and topos theory) we often try to avoid using choice, so just the existence of a unique object isn't enough</p>",
        "id": 195870702,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266318
    },
    {
        "content": "<p>It's also reasonably common to take \"has limits\" in category theory to mean \"we are given a particular choice of limit for every diagram\", which matches lean's current definition</p>",
        "id": 195870863,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266384
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0Z1rlCc5VdNPOiDKBmBv2RPo/image.png\" title=\"image.png\">eg just after Lemma A1.2.1 in the Elephant</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0Z1rlCc5VdNPOiDKBmBv2RPo/image.png\" title=\"eg just after Lemma A1.2.1 in the Elephant\"><img src=\"/user_uploads/3121/0Z1rlCc5VdNPOiDKBmBv2RPo/image.png\"></a></div>",
        "id": 195870981,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266436
    },
    {
        "content": "<p>Only very picky people and theorem provers would consider \"having limits\" to mean a choice of limits.</p>",
        "id": 195871331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266598
    },
    {
        "content": "<p>I won't tell PTJ you called him picky :P</p>",
        "id": 195871532,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266694
    },
    {
        "content": "<p>I'm pretty sure this is the convention in MM as well</p>",
        "id": 195871547,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266702
    },
    {
        "content": "<p>metamath?</p>",
        "id": 195871637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266739
    },
    {
        "content": "<p>Maclane-Moerdijk</p>",
        "id": 195871653,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266745
    },
    {
        "content": "<p>I think this is mainly in the eye of the beholder</p>",
        "id": 195871693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266771
    },
    {
        "content": "<p>Just like, \"obviously\", most category theory texts mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span></span>-small category for some universe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span></span></span></span> even if they never mention universes</p>",
        "id": 195871885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195871693\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195871693\">said</a>:</p>\n<blockquote>\n<p>I think this is mainly in the eye of the beholder</p>\n</blockquote>\n<p>Maybe, but it is explicitly discussed and mentioned in the Elephant</p>",
        "id": 195871917,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588266896
    },
    {
        "content": "<p>My guess is these picky people have to rely on the fact that there is nobody even pickier who wants to dismantle their position</p>",
        "id": 195871956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588266913
    },
    {
        "content": "<p>So I tried some preliminary investigations:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">...</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ZZZ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">cchat</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">unhat</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">at</span> <span class=\"n\">ZZZ</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ZZZ</span><span class=\"o\">,</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">exp_transpose</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195876596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269116
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ZZZ</span> <span class=\"o\">:</span> <span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">is_left_adjoint</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"n\">B</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">is_left_adjoint</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"n\">B</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"err\">‚ä¢</span> <span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">is_left_adjoint</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"n\">B</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">‚áë</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">is_left_adjoint</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"n\">B</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 195876726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269174
    },
    {
        "content": "<p>and <code>exact ZZZ</code> or <code>convert ZZZ</code> causes the timeout</p>",
        "id": 195876757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269186
    },
    {
        "content": "<p>So of course when you <code>set_option pp.all true</code> you find that the terms are different.</p>",
        "id": 195876813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835283\" title=\"#narrow/stream/113488-general/topic/Diagnosing.20timeout/near/195835283\">said</a>:</p>\n<blockquote>\n<p>For clarity, by reordered proof I mean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheaf_exponential</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">C</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">exp</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_extend</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">B</span> <span class=\"n\">B&#39;</span> <span class=\"n\">m</span> <span class=\"n\">f&#39;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dense_prod_map_id</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">j</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">cchat</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">_‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">f&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"err\">‚â´</span> <span class=\"n\">unhat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">unique_extend</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unhat</span> <span class=\"n\">f&#39;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">unhat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">exp_transpose_natural_left_symm</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Yeah I get a timeout as well with exact ZZZ, but with the re-ordered version of the code that version doesn't give a type error</p>",
        "id": 195876931,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269265
    },
    {
        "content": "<p>and that doesn't explain why it's fine if you put a simp afterwards</p>",
        "id": 195876945,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269275
    },
    {
        "content": "<p>My current hypothesis is that Sebastian's right, and the problem happens when lean is trying to make the bytecode, so I'm currently filling in the sorry</p>",
        "id": 195877025,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269311
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/7eb4998162960f7c0e1f975c8d199a71\" title=\"https://gist.github.com/kbuzzard/7eb4998162960f7c0e1f975c8d199a71\">ZZZ</a> vs <a href=\"https://gist.github.com/kbuzzard/81c432ac5a5282a4baf3ce789e358519\" title=\"https://gist.github.com/kbuzzard/81c432ac5a5282a4baf3ce789e358519\">goal</a>; <a href=\"https://gist.github.com/kbuzzard/8cd788951b49a3ff536c3dce71e085e0\" title=\"https://gist.github.com/kbuzzard/8cd788951b49a3ff536c3dce71e085e0\">diff</a></p>",
        "id": 195877247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269412
    },
    {
        "content": "<p>Looking at the first diff, that's defeq by how I defined <code>exp</code></p>",
        "id": 195877334,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269457
    },
    {
        "content": "<p>There are no sorrys in ZZZ or the goal though</p>",
        "id": 195878290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588269884
    },
    {
        "content": "<p>Hmm</p>",
        "id": 195878382,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588269935
    }
]