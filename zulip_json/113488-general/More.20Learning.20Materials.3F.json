[
    {
        "content": "<p>After having finished <a href=\"https://leanprover.github.io/theorem_proving_in_lean4\">Theorem Proving in Lean4</a>, Functional Programming in Lean and some part of manual. I still feel extremely insuffiicient for writing proof as neat and useful in mathlib.  Are there any materials to go further?</p>",
        "id": 344255148,
        "sender_full_name": "Erika Su",
        "timestamp": 1679662370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> <a href=\"#narrow/stream/113488-general/topic/More.20Learning.20Materials.3F/near/344255148\">said</a>:</p>\n<blockquote>\n<p>After having finished <a href=\"https://leanprover.github.io/theorem_proving_in_lean4\">Theorem Proving in Lean4</a>, Functional Programming in Lean and some part of manual. I still feel extremely insuffiicient for writing proof as neat and useful in mathlib.  Are there any materials to go further?</p>\n</blockquote>\n<p>I found the porting exercise to be the best way to learn the innards of lean 4. Trying the natural number game, topology game or Euclidean Geometry Game also felt useful. </p>\n<p>For me personally, the reason this works is that being able to write nice proofs often hinges on good definitions and theorem statements, and this is non-trivial to learn when starting from scratch, so working on new projects was tough. When porting files however, the definitions and theorems are already in place. There is already a proof in lean3 to guide the process and understand what is happening.  This provides a lot of opportunities for comparing and contrasting what tactics do in lean 3 and lean 4.</p>",
        "id": 344264520,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679664509
    }
]