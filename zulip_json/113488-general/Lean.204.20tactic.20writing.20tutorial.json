[
    {
        "content": "<p>Nice series of blog posts! I think you should make it clear that this is not about using tactics but about writing tactics. Otherwise it is a bit strange to read you complain about documentation only to realize later you are talking about super advanced usage (tactic writing) documentation.</p>",
        "id": 380940614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690963818
    },
    {
        "content": "<p>It would be even nicer if you could find less artificial examples. All the issues you face in those examples come from stating lemmas in a very unusable way. I mean unusable first when proving them but mostly when using them. Did you notice you almost never see conjunctions as conclusions of lemmas in mathlib? And I think you would have a very hard time finding a lemma in mathlib whose conclusion is ten conjunctions like your example. Trying to use such a lemma would be a nightmare because accessing the individual pieces would be very difficult.</p>",
        "id": 380941377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690964027
    },
    {
        "content": "<p>Here is a slightly cleanup version of your file anyway (since each post ends with a request for improvement suggestions).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">u3</span>\n<span class=\"kd\">class</span> <span class=\"n\">incidence_geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">circle</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u3</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"c1\">-- Betweenness</span>\n\n<span class=\"o\">(</span><span class=\"n\">length_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length_symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">},</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length_sum_of_B</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">},</span>\n   <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ne_12_of_B</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">},</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ne_13_of_B</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">},</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ne_23_of_B</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">},</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">incidence_geometry</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">incidence_geometry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">len_pos_of_neq</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Ne.lt_of_le'</span> <span class=\"o\">(</span><span class=\"n\">length_eq_zero_iff.not.mpr</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length_nonneg</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">incidence_geometry.B.length_pos</span> <span class=\"o\">(</span><span class=\"n\">Babc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">len_pos_of_neq</span> <span class=\"o\">(</span><span class=\"n\">ne_12_of_B</span> <span class=\"n\">Babc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">incidence_geometry.B.ne_12</span> <span class=\"o\">(</span><span class=\"n\">Babc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ne_12_of_B</span> <span class=\"n\">Babc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">incidence_geometry.B.ne_23</span> <span class=\"o\">(</span><span class=\"n\">Babc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">ne_23_of_B</span> <span class=\"n\">Babc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">incidence_geometry.B.ne_13</span> <span class=\"o\">(</span><span class=\"n\">Babc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">ne_13_of_B</span> <span class=\"n\">Babc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">length_sum_perm_of_B'</span> <span class=\"o\">(</span><span class=\"n\">Babc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">length_symm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Babc.length_pos</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">length_sum_perm_of_B</span> <span class=\"o\">(</span><span class=\"n\">Babc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n   <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">length_sum_of_B</span> <span class=\"n\">Babc</span><span class=\"o\">,</span> <span class=\"n\">B.length_pos</span><span class=\"o\">,</span> <span class=\"n\">Babc.ne_12</span><span class=\"o\">,</span> <span class=\"n\">Babc.ne_13</span><span class=\"o\">,</span> <span class=\"n\">Babc.ne_23</span><span class=\"o\">,</span>\n        <span class=\"n\">len_pos_of_neq</span><span class=\"o\">,</span> <span class=\"n\">length_symm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">length_symm</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">length_symm</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 380941824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690964116
    },
    {
        "content": "<p>For completeness I should make sure you know about <span class=\"user-mention\" data-user-id=\"268018\">@Julien Narboux</span>'s work on formalization of synthetic Euclidean geometry, see <a href=\"https://dpt-info.u-strasbg.fr/~narboux/publications.html\">https://dpt-info.u-strasbg.fr/~narboux/publications.html</a>. In particular <a href=\"https://inria.hal.science/hal-00989781/file/small-scale-automation-Tarski-proceedings.pdf\">https://inria.hal.science/hal-00989781/file/small-scale-automation-Tarski-proceedings.pdf</a> for less naive tactics handling permutation (your tactic will only work if you have a betweenness assumption miraculously listing the point in the order you enforce in your tactic).</p>",
        "id": 380954122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690966562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557226\">@Ian Jauslin</span> those blog post refer to your project, but <a href=\"https://github.com/ianjauslin-rutgers/pythagoras4/blob/master/lakefile.lean#L5\">this line</a> makes it impossible to use. Mathlib is moving too fast, you can't simply to tell people to install the latest mathlib and hope for the best. The best will never happen here.</p>",
        "id": 380954775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690966678
    },
    {
        "content": "<p>You need to put a specific mathlib commit, just as with André's project two lines below.</p>",
        "id": 380955009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690966714
    },
    {
        "content": "<p>This is the role of <code>lake-manifest.json</code>, which needs to be committed as well for this reason</p>",
        "id": 380955304,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690966795
    },
    {
        "content": "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113486\" href=\"/#narrow/stream/113486-announce/topic/Lean.204.20tactics.20tutorial\">#announce &gt; Lean 4 tactics tutorial</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 380955825,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690966905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Lean.204.20tactic.20writing.20tutorial/near/380954122\">said</a>:</p>\n<blockquote>\n<p>For completeness I should make sure you know about <span class=\"user-mention silent\" data-user-id=\"268018\">Julien Narboux</span>'s work on formalization of synthetic Euclidean geometry, see <a href=\"https://dpt-info.u-strasbg.fr/~narboux/publications.html\">https://dpt-info.u-strasbg.fr/~narboux/publications.html</a>. In particular <a href=\"https://inria.hal.science/hal-00989781/file/small-scale-automation-Tarski-proceedings.pdf\">https://inria.hal.science/hal-00989781/file/small-scale-automation-Tarski-proceedings.pdf</a> for less naive tactics handling permutation (your tactic will only work if you have a betweenness assumption miraculously listing the point in the order you enforce in your tactic).</p>\n</blockquote>\n<p>Thanks a lot! I'll definitely check this out and try to think about improving the tactics as well as finding more natural examples (ideally unsolvable by <code>simp</code> alone). I've incorporated your other points.</p>",
        "id": 381352252,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1691037754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"613795\">@Vladimír Sedláček</span> you can simplify your example in part 3 to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getFVars</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">FVarId</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.collectFVars</span> <span class=\"o\">{}</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fvarIds</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"length_nf\"</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Conv.getLhs</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">n1</span> <span class=\"bp\">←</span> <span class=\"o\">((</span><span class=\"n\">getFVars</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.getArg</span><span class=\"bp\">!</span> <span class=\"n\">tgt</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getUserName</span>\n  <span class=\"k\">let</span> <span class=\"n\">n2</span> <span class=\"bp\">←</span> <span class=\"o\">((</span><span class=\"n\">getFVars</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.getArg</span><span class=\"bp\">!</span> <span class=\"n\">tgt</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getUserName</span>\n  <span class=\"k\">if</span> <span class=\"n\">n2.lt</span> <span class=\"n\">n1</span> <span class=\"k\">then</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">length_symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Elab.Tactic</span>\n</code></pre></div>",
        "id": 381658920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691119096
    },
    {
        "content": "<p>An alternative to the <code>splitAll</code> tactic you wrote is <code>repeat' constructor</code>, <code>repeat'</code> is like <code>repeat</code> but it recurses on all subgoals generated by the tactic instead of just the first one</p>",
        "id": 381659777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691119605
    },
    {
        "content": "<p>The fact that you had to implement <code>perm at *</code> separately seems like a bug in <code>conv</code>, <code>conv at * =&gt; ...</code> should work</p>",
        "id": 381660232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691119847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Thanks. I guess I'm too much of an optimist...</p>",
        "id": 383375184,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1691603556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks! I've finally incorporated your comments. <code>conv at * =&gt; ...</code> doesn't seem to work (throws <code>expected identifier</code>) even in other contexts though, do you have any idea what could be wrong with it?</p>",
        "id": 387187293,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1692925831
    },
    {
        "content": "<p>\"It should work\" in the sense \"someone should write a PR to make it work\"</p>",
        "id": 387187452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692925910
    },
    {
        "content": "<p>In case anyone found this thread but not the posts (like me), the 4 great posts are here: <a href=\"https://www.vladasedlacek.cz/en/posts/lean-01-intro\">https://www.vladasedlacek.cz/en/posts/lean-01-intro</a> ( found <a href=\"#narrow/stream/113486-announce/topic/Lean.204.20tactic.20writing.20tutorial\">here</a> )</p>",
        "id": 387685845,
        "sender_full_name": "Utensil Song",
        "timestamp": 1693234431
    }
]