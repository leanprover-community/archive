[
    {
        "content": "<p>how does aux on the end work ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">LeanCourse.Common</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n  <span class=\"n\">apply</span> <span class=\"n\">min_le_left</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n  <span class=\"n\">apply</span> <span class=\"n\">min_le_right</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">aux</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_add_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span>\n  <span class=\"n\">apply</span> <span class=\"n\">aux</span>          <span class=\"c1\">-- what happens here?</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_neg_cancel_right</span><span class=\"o\">,</span> <span class=\"n\">add_neg_cancel_right</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>it goes from<br>\n min (a + c) (b + c) + -c ≤ ?a.bc.b✝<br>\nto <br>\nmin (a + c + -c) (b + c + -c) ≤ min a b</p>",
        "id": 398783945,
        "sender_full_name": "Leni Greco",
        "timestamp": 1698363856
    },
    {
        "content": "<p>Again… <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 398784861,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698364539
    },
    {
        "content": "<p>Please take a look at those links and edit your message accordingly</p>",
        "id": 398784969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698364594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"659458\">Leni Greco</span> has marked this topic as resolved.</p>",
        "id": 398853120,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698396295
    }
]