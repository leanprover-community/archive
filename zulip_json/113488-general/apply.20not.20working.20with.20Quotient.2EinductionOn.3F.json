[
    {
        "content": "<p>I have the following ad-hoc example where i want to prove the associativity of addition modulo some fixed integer.  Somehow <code>exact</code> works but not <code>apply</code> and i don't understand the error message <code>failed to elaborate eliminator, expected type is not available</code>. The relevant line is the field <code>add_assoc</code> in the instance of <code>AddMonoid</code> below. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.ModEq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Int</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mod_cong_setoid</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">Int.ModEq</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ModEq.refl</span><span class=\"o\">,</span> <span class=\"n\">ModEq.symm</span><span class=\"o\">,</span> <span class=\"n\">ModEq.trans</span><span class=\"o\">⟩</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">CMod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">mod_cong_setoid</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CMod</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">add_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">CMod</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">⟧</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_aux_resp_cong</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span><span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">,</span>  <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≈</span> <span class=\"n\">b'</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"bp\">⟦</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">CMod</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"bp\">⟦</span> <span class=\"n\">a'</span> <span class=\"bp\">+</span> <span class=\"n\">b'</span> <span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">CMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.lift₂</span> <span class=\"o\">(</span><span class=\"n\">CMod.add_aux</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_aux_resp_cong</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_assoc_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span> <span class=\"n\">a</span> <span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">CMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">⟦</span> <span class=\"n\">b</span> <span class=\"bp\">⟧</span>  <span class=\"bp\">+</span> <span class=\"bp\">⟦</span> <span class=\"n\">c</span> <span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span> <span class=\"n\">a</span> <span class=\"bp\">⟧</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span> <span class=\"n\">b</span> <span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"bp\">⟦</span> <span class=\"n\">c</span> <span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mod_cong_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">CMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Add.add</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Quotient.inductionOn₃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">add_assoc_aux</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"c1\">--simp; apply Quotient.inductionOn₃ a b c;</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CMod</span>\n</code></pre></div>",
        "id": 399800469,
        "sender_full_name": "Sina",
        "timestamp": 1698871318
    },
    {
        "content": "<p>Use <code>refine</code> instead</p>",
        "id": 399800977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698871584
    },
    {
        "content": "<p>The function <code>Quotient.inductionOn₃</code> is handled specially -- it's got a complicated argument (<code>motive</code>) that needs help filling in when elaborating. To do this, it needs to know the expected type at this point. However, the <code>apply</code> tactic elaborates its argument <em>without</em> an expected type (this is because the way <code>apply</code> works is that it attempts to figure out how many additional arguments to apply, so it can't supply an expected type without knowing this number, which would be needed <em>before</em> elaborating). Other tactics, like <code>exact</code> or <code>refine</code>, do elaborate their arguments with the expected type.</p>",
        "id": 399801848,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698872030
    },
    {
        "content": "<p>(I suppose there could be an <code>apply! f x y z</code> tactic that re-elaborates with every guess...)</p>",
        "id": 399802027,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698872111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/apply.20not.20working.20with.20Quotient.2EinductionOn.3F/near/399802027\">said</a>:</p>\n<blockquote>\n<p>(I suppose there could be an <code>apply! f x y z</code> tactic that re-elaborates with every guess...)</p>\n</blockquote>\n<p><code>apply</code> does that</p>",
        "id": 399802322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698872244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\nI see, thanks for explaining this. In my mind <code>apply</code> could do everything that <code>exact</code> was capable of but your explanation indicates I had a wrong presumption.</p>",
        "id": 399802424,
        "sender_full_name": "Sina",
        "timestamp": 1698872288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Huh? <code>apply f x y z</code> elaborates <code>f x y z</code> exactly once, and it tacks on new metavariables using <code>mkAppN</code> on the elaborated expression.</p>",
        "id": 399803753,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698872862
    },
    {
        "content": "<p>well it elaborates only once, yes, but it does try different settings for the mvars</p>",
        "id": 399803900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698872920
    },
    {
        "content": "<p>Ok, but the point is that <code>apply!</code> could re-elaborate with varying numbers of trailing holes with the expected type -- you can't do that by elaborating <code>f x y z</code> once ahead of time.</p>",
        "id": 399804179,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698873060
    },
    {
        "content": "<p>In theory this should be sufficient provided that the eliminator defers when it doesn't know how to create the motive</p>",
        "id": 399804200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698873068
    }
]