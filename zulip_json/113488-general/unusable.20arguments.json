[
    {
        "content": "<p>From <a href=\"https://github.com/leanprover-community/mathlib/issues/2502\" title=\"https://github.com/leanprover-community/mathlib/issues/2502\">#2502</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">forget₂</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">d</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">parent_projection</span> <span class=\"bp\">@</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_forget₂</span> <span class=\"o\">(</span><span class=\"n\">bundled</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bundled</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">forget₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Unless I am very confused, I'm pretty sure this is not usable as an instance because <code>F</code> could never be inferred (<code>bundled</code> doesn't mention it implicitly). Wasn't there some discussion about a linter for cases like this?</p>",
        "id": 195547000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588071566
    },
    {
        "content": "<p>It can be inferred using an instance for <code>parent_projection</code>.</p>",
        "id": 195548058,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588072230
    },
    {
        "content": "<p>I think you're right, Reid, this should be a def, not an instance.</p>",
        "id": 195548502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588072517
    },
    {
        "content": "<p>It makes me wonder whether, in the context of <a href=\"https://github.com/leanprover-community/mathlib/issues/2502\" title=\"https://github.com/leanprover-community/mathlib/issues/2502\">#2502</a>, <code>parent_projection</code> plays any role at all</p>",
        "id": 195549058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588072822
    },
    {
        "content": "<p>Gabriel, I don't understand. I see that we could infer <code>F</code> from the instance or the instance from <code>F</code> (by instance search), but how can either of them be determined by anything on the right side of the <code>:</code>?</p>",
        "id": 195549960,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588073453
    },
    {
        "content": "<p>I hope I understand how this is supposed to be used.  Say you want to solve <code>?m_1 : has_forget₂ (bundled group) (bundled monoid)</code>, then Lean will apply the instance <code>forget₂</code> and you get a new goal <code>?m_2 : @parent_projection monoid group ?m_3</code>, which is then presumably solved using the instance <code> Group.category_theory.bundled_hom.parent_projection : parent_projection group.to_monoid</code>.</p>",
        "id": 195550969,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588074157
    },
    {
        "content": "<p>I think it would be a bit clearer if the type arguments in <code>parent_projection</code> were explicit and the functor was explicily marked as an <code>out_param</code>.</p>",
        "id": 195551151,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588074273
    },
    {
        "content": "<p>Couldn't the functor be a field of <code>parent_projection</code>?</p>",
        "id": 195551337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588074441
    },
    {
        "content": "<p>I thought that the instance could only be used if <code>F</code> was an <code>out_param</code>.</p>",
        "id": 195551343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588074448
    },
    {
        "content": "<p>If the functor is a field you'd need to reduce them afterwards to get acceptable terms.</p>",
        "id": 195551373,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588074480
    },
    {
        "content": "<p><code>out_param</code> is only necessary at the interface between type-class search and the rest of Lean.  Inside type-class search, everything is an out-param.</p>",
        "id": 195551441,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588074511
    },
    {
        "content": "<p>no more than usual, I think</p>",
        "id": 195551449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588074517
    },
    {
        "content": "<p>With this setup it seems that <code>parent_projection</code> doesn't carry any information at all</p>",
        "id": 195551490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588074548
    }
]