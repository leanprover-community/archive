[
    {
        "content": "<p>Hey gang, here is my mwe: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>It's telling me \"type expected, got (X : β)\"<br>\nIf had another theorem I want to be able to write <code>theorem ... (h: Relation p X) : ... := ... </code> for example? thoughts?</p>",
        "id": 402059955,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699992178
    },
    {
        "content": "<p>What should <code>X → X → Prop</code> mean if <code>X</code> is a <code>β</code>?</p>",
        "id": 402060482,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699992372
    },
    {
        "content": "<p>Did you mean to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 402060566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699992415
    },
    {
        "content": "<p>p: X, X -&gt; Prop <br>\n      x, y |-&gt; p(x,y)</p>",
        "id": 402060590,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699992424
    },
    {
        "content": "<p>Okay, but <code>X</code> is not a type, it might be eg a natural number (if you pick <code>β = ℕ</code>).</p>",
        "id": 402060668,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699992460
    },
    {
        "content": "<p>I want to define a relation over a set X. I was using Beta so I could define relations over Y too if I wanted. How would I change my definition</p>",
        "id": 402062066,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699993033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Define.20a.20relation.20p.20over.20X.20.3F/near/402060566\">said</a>:</p>\n<blockquote>\n<p>Did you mean to write</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I want to use this as a definition to prove theorems like \"if p is a preorder relation, then p /\\ p^op is an equivalence relation and I don't think I could do that with your definition</p>",
        "id": 402062889,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699993374
    },
    {
        "content": "<p>Okay, what about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsPreorder</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">IsPreorder</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsPreorder</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402063302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699993539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">def</span> <span class=\"n\">Transitive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Reflexive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Transitive</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">Reflexive</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm getting an error on my defintion of Preorder</p>",
        "id": 402064431,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699993954
    },
    {
        "content": "<p>And what is the error?</p>",
        "id": 402065047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699994216
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">def</span> <span class=\"n\">Transitive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Reflexive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Symmetric</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Transitive</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">Reflexive</span> <span class=\"n\">p</span>\n<span class=\"kd\">def</span> <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Preorder</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">Symmetric</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is the actual statement I'm looking for but I'm not sure this is correct lean. My vscode gives me red squiggles under Symmetric p</p>",
        "id": 402065059,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699994220
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/goETqFEp7CXSz6eDIPKNr2RW/Screenshot-2023-11-14-at-12.37.15-PM.png\">Screenshot-2023-11-14-at-12.37.15-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/goETqFEp7CXSz6eDIPKNr2RW/Screenshot-2023-11-14-at-12.37.15-PM.png\" title=\"Screenshot-2023-11-14-at-12.37.15-PM.png\"><img src=\"/user_uploads/3121/goETqFEp7CXSz6eDIPKNr2RW/Screenshot-2023-11-14-at-12.37.15-PM.png\"></a></div>",
        "id": 402065118,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699994242
    },
    {
        "content": "<p>also while you are all here, what tactic should I use to prove that the function provided is Transitive, Reflexive, and Symmetric. I feel like they (you) removed split or cases in lean4</p>",
        "id": 402065414,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699994353
    },
    {
        "content": "<p>If lean is expecting a function at <code>Symmetric p</code> then that means that the thing after <code>Symmetric p</code> is being interpreted as an input to a function. The thing after it is <code>lemma</code> which isn't a thing in lean 4 so that's probably the issue</p>",
        "id": 402065474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699994376
    },
    {
        "content": "<p>oh awesome the squiggles are gone</p>",
        "id": 402065609,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699994423
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/NrZrKVmQ8SdeW_yRvPIraz46/Screenshot-2023-11-14-at-12.40.39-PM.png\">Screenshot-2023-11-14-at-12.40.39-PM.png</a><br>\nWill you prove this for me if I tell you I beat your natural number game like 1.5 years ago?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NrZrKVmQ8SdeW_yRvPIraz46/Screenshot-2023-11-14-at-12.40.39-PM.png\" title=\"Screenshot-2023-11-14-at-12.40.39-PM.png\"><img src=\"/user_uploads/3121/NrZrKVmQ8SdeW_yRvPIraz46/Screenshot-2023-11-14-at-12.40.39-PM.png\"></a></div>",
        "id": 402065691,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699994461
    },
    {
        "content": "<p>They didn't remove <code>split</code> or <code>cases</code>, they renamed <code>split</code> to <code>constructor</code> and <code>cases</code> is still there but has a slightly different syntax.</p>",
        "id": 402065735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699994485
    },
    {
        "content": "<p>I can't prove anything for you because I'm on mobile (that was why I asked for the error message)</p>",
        "id": 402065804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699994516
    },
    {
        "content": "<p>It doesn't look too difficult to prove though. Start with <code>constructor</code></p>",
        "id": 402066095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699994625
    },
    {
        "content": "<p>And then unfold everything and use <code>tauto</code> or <code>aesop</code> or something?</p>",
        "id": 402066227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699994669
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">Relation</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reflexive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">Transitive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"kd\">def</span> <span class=\"n\">Symmetric</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Transitive</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">Reflexive</span> <span class=\"n\">p</span>\n<span class=\"kd\">def</span> <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Transitive</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Reflexive</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Symmetric</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Ex5a</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n  <span class=\"n\">Reflexive</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hp.right</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hp.right</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Ex5b</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n  <span class=\"n\">Symmetric</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">expr</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">expr.right</span><span class=\"o\">,</span> <span class=\"n\">expr.left</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Ex5c</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n  <span class=\"n\">Transitive</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">expr</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_trans</span> <span class=\"o\">:=</span> <span class=\"n\">hp.left</span>\n  <span class=\"k\">have</span> <span class=\"n\">pxz</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">p_trans</span> <span class=\"o\">⟨</span><span class=\"n\">expr.left.left</span><span class=\"o\">,</span> <span class=\"n\">expr.right.left</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">pzx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">p_trans</span> <span class=\"o\">⟨</span><span class=\"n\">expr.right.right</span><span class=\"o\">,</span> <span class=\"n\">expr.left.right</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">pxz</span><span class=\"o\">,</span> <span class=\"n\">pzx</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Ex5</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n  <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Ex5c</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">Ex5a</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Ex5b</span> <span class=\"n\">hp</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">end</span> <span class=\"n\">Relation</span>\n</code></pre></div>",
        "id": 402843996,
        "sender_full_name": "Mason McBride",
        "timestamp": 1700291541
    }
]