[
    {
        "content": "<p>I've started playing around with <code>norm_num</code> a bit, trying to understand how one can possibly extend it. Mimicking code I found in the context of <code>gcd</code>s, I'm trying the following (a bit silly) example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test0</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mod</span><span class=\"o\">],}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"n\">nat.one_mod</span><span class=\"o\">],}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_sub_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.mod_eq_sub_mod</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_not_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">h'</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_sub_two'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">test_sub_two</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_test</span> <span class=\"o\">:</span> <span class=\"n\">instance_cache</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">instance_cache</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ic</span> <span class=\"n\">ea</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ea.to_nat</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">ea'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.of_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_test</span> <span class=\"n\">ic</span> <span class=\"n\">ea'</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- `p'` should be a proof of `a ≠ 1`</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test_sub_two'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval_test</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">prove_test</span> <span class=\"n\">c</span> <span class=\"n\">ea</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>The <code>sorry</code> should be replaced by something returning a proof of <code>a ≠ 1</code>.</p>\n<p>The question is, how can I obtain this? I have noticed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_num.prove_ne\">docs#norm_num.prove_ne</a>, but this seems to be about rational numbers, not naturals.</p>",
        "id": 296882698,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662146666
    },
    {
        "content": "<p>OK; I figured out that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_num.prove_ne\">docs#norm_num.prove_ne</a> works for naturals and integers as well. So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test0</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_mod</span><span class=\"o\">],}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">,</span> <span class=\"n\">nat.one_mod</span><span class=\"o\">],}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_sub_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.mod_eq_sub_mod</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_not_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">h'</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_sub_two'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">test_sub_two</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_test</span> <span class=\"o\">:</span> <span class=\"n\">instance_cache</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">instance_cache</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ic</span> <span class=\"n\">ea</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ea.to_nat</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">ea'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.of_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_test</span> <span class=\"n\">ic</span> <span class=\"n\">ea'</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">norm_num.prove_ne</span> <span class=\"n\">ic</span> <span class=\"n\">ea</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test_sub_two'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"n\">er</span><span class=\"o\">,</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval_test</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">prove_test</span> <span class=\"n\">c</span> <span class=\"n\">ea</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 296887200,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662148750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as resolved.</p>",
        "id": 296887227,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662148761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as unresolved.</p>",
        "id": 296891520,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662150803
    },
    {
        "content": "<p>Here is something weird: When I additionally <code>import analysis.normed.field.basic</code> in the example above, then I get an error message <code>rec_fn_macro only allowed in meta definitions</code> at the line <code>meta def prove_test : ...</code>.<br>\nThis does not occur when I instead <code>import</code> one of the files imported by <code>analysis.normed.field.basic</code>. What is going on here?<br>\nIn a similar situation, I get an error message <code>missing 'noncomputable' modifier, definition 'prove_foo' depends on 'rat.normed_field'</code>, which seems to be triggered by the use of <code>norm_num.prove_ne</code>. This is quite annoying...</p>",
        "id": 296891966,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662151048
    },
    {
        "content": "<p>Coincidentally this came up within the last day or two on the Discord. You can fix it with <code>instance : ring ℚ := division_ring.to_ring ℚ</code>. See <a href=\"https://github.com/leanprover-community/mathlib/pull/16349\">#16349</a> which probably <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should be alerted to...(and which will fix the problem if the PR is accepted, but the PR might cause other issues)</p>",
        "id": 296902077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662156188
    },
    {
        "content": "<p>Thanks, Kevin!<br>\nCan you also explain how this error arises? (Just out of curiosity.)</p>",
        "id": 296954208,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662191667
    },
    {
        "content": "<p>The part I understand: the import makes the ring structure on the rationals noncomputable, because the typeclass inference system can find a new way to prove Q is a ring after the import, via <code>normed_ring</code> which is noncomputable, and by chance this is the preferred way after the import. The fix is to explicitly make the computable construction and explicitly add it into the system, which then prefers this choice and all of a sudden it's computable again. The part I don't understand is the <code>rec_fn_macro</code> error, I searched for it on this site and found several other occurrences, which all seemed to be to do with computability, but I can't say I understand the problem properly. The reason I tagged Mario in the previous post was two-fold; firstly to point out the PR to him (becuase there might be reasons against the change) but secondly to alert him to your error (which I think he understands quite well).</p>",
        "id": 296958840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662194315
    },
    {
        "content": "<p>The issue is when some auxiliary definition mistakenly gets marked computable when it shouldn't be, there is some edge case here that results in bad error messages</p>",
        "id": 296959076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662194433
    },
    {
        "content": "<p>I was hoping that I could fix everything by adding <code>noncomputable!</code> all over the place but I couldn't get rid of the error.</p>",
        "id": 296959170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662194489
    },
    {
        "content": "<p>IIRC if you put <code>noncomputable theory</code> too you can get noncomputable on that pesky internal definition</p>",
        "id": 296959343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662194592
    },
    {
        "content": "<p>It looked like <code>analysis.normed.field.basic</code> uses <code>noncomputable theory</code>, but I didn't look at it too closely.</p>",
        "id": 296960418,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662195119
    },
    {
        "content": "<p>Yeah, we can make <code>rat.normed_field</code> computable using some trickery. I can do that if you want.</p>",
        "id": 297004010,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662217497
    },
    {
        "content": "<p>For now, I am happy with the workaround that Kevin mentioned. But it would be nice, of course, if the error would not show up in the first place.</p>",
        "id": 297020550,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1662227106
    }
]