[
    {
        "content": "<p>What is the status of autoimplicit variables with respect to <code>Type*</code>? I.e., if I use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>will <code>R</code> be declared as <code>Type _</code> or <code>Type*</code>? If it is the former, does it mean we should ban autoImplicits from mathlib (because they are mostly used for this kind of situation)?</p>",
        "id": 383878932,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691744856
    },
    {
        "content": "<p>It will be declared as <code>Type _</code> (I brought this up <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib4.20porting.20meeting.20series/near/382777648\">here</a>)</p>",
        "id": 383881516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691745419
    },
    {
        "content": "<p>I would be very pro banning <code>autoImplicit</code> from  mathlib, though I think <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355142480\">that viewpoint is contentious</a></p>",
        "id": 383881622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691745442
    },
    {
        "content": "<p>autoImplicit was inspired by mathlib, right? Really shows that sometimes \"you think you do, but you don't\"</p>",
        "id": 383882783,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691745691
    },
    {
        "content": "<p>I would guess that 90% of the use-case of <code>autoImplicit</code> could be replaced with a code action that inserted the variables for you</p>",
        "id": 383882936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691745719
    },
    {
        "content": "<p>Well we could still make autoimplicit \"use <code>Type*</code>\" (or probably emulate it because of import order), right? I would even say that it's the right thing to do, but that's maybe just a naive thought</p>",
        "id": 383884128,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691745957
    },
    {
        "content": "<p>I don't think that really works, because <code>autoImplicit</code> really just creates <code>{R : _}</code>, which is unified to <code>{R : Type _}</code> in the example above</p>",
        "id": 383885118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691746158
    },
    {
        "content": "<p>Even <code>autoImplicitTypeOnly</code> which always makes <code>R : Type*</code> would be a (less) bad idea because sometimes we want <code>Sort*</code></p>",
        "id": 383885349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691746204
    },
    {
        "content": "<p>Ah right nevermind then</p>",
        "id": 383885562,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691746241
    },
    {
        "content": "<p>Are you saying core uses <code>Type _</code> under the hood?</p>",
        "id": 383891555,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691747467
    },
    {
        "content": "<p>Core uses <code>_</code> by itself under the hood and unification will unify <code>R : _</code> to <code>R : Type _</code> when it sees <code>Ring R</code></p>",
        "id": 383892134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691747549
    },
    {
        "content": "<p>The <code>Type _</code> issue doesn't propagate right? As in, does it cause slow-downs only when elaborating the declaration it's used in, or also when that declaration is used?</p>",
        "id": 383892353,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691747590
    },
    {
        "content": "<p>It causes slowdowns when elaborating the definition it's used in, but <a href=\"#narrow/stream/270676-lean4/topic/Stuck.20at.20universe.20constraint.20FromJson/near/381579400\">sometimes universe errors</a> downstream</p>",
        "id": 383892476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691747614
    },
    {
        "content": "<p>Ah right it can lead to strange universes. Do we have a way to detect them (using a linter?)</p>",
        "id": 383892571,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691747639
    },
    {
        "content": "<p>Yes, we had such a linter in Lean 3</p>",
        "id": 383892743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691747665
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6528\">#6528</a> explores how many files currently rely on autoImplicit</p>",
        "id": 384034768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691772404
    }
]