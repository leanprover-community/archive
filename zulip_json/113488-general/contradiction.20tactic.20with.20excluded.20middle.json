[
    {
        "content": "<p>Hey would anyone be able to help me with this proof? I'm trying to show that <code>f B.T ≠ B.F -&gt; f B.T = B.T</code></p>\n<p>This is what I have tried so far.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">≠</span> <span class=\"n\">B.F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">he</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span><span class=\"o\">)</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>The context it arrives at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"n\">he</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">≠</span> <span class=\"n\">B.F</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span>\n</code></pre></div>\n<p>I think <code>he</code> and <code>h✝</code> should be a contradiction but the tactic doesn't work.</p>",
        "id": 405430686,
        "sender_full_name": "procero",
        "timestamp": 1701461107
    },
    {
        "content": "<p>They're not literally a contradiction: a contradiction would be <code>P</code> and <code>\\not P</code>. You seem to want to do <code>cases</code> on <code>f B.T</code>, then you should be fine</p>",
        "id": 405431352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701461424
    },
    {
        "content": "<p>Although the function <code>f</code> here is just a red herring.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_T_of_ne_F</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">B.F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B.T</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B.F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">≠</span> <span class=\"n\">B.F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">he</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_T_of_ne_F</span> <span class=\"n\">he</span>\n</code></pre></div>",
        "id": 405432039,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701461763
    },
    {
        "content": "<p>Or with even less work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_T_of_ne_F</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">B.F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B.T</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">≠</span> <span class=\"n\">B.F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">B.T</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">he</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_T_of_ne_F</span> <span class=\"n\">he</span>\n</code></pre></div>\n<p><code>match</code> can eliminate the false case for you</p>",
        "id": 405432327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701461904
    },
    {
        "content": "<p>I don't quite understand this line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">B.F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>\n<p>Is <code>rfl</code> a tactic in <code>(hx rfl).elim</code>? What does it mean? My understanding here is that some how Lean treated <code>rfl</code> like <code>x = B x</code> but I want to understand how one can get the equality implied by the match branch as an assumption.</p>\n<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">B.T</span> <span class=\"bp\">=&gt;</span> <span class=\"c\">/-</span><span class=\"cm\">! where is x = B.T ? -/</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 405443133,
        "sender_full_name": "procero",
        "timestamp": 1701467389
    },
    {
        "content": "<p>No, <code>rfl</code> is a term, and it's the constructor for the equality type.</p>",
        "id": 405443834,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701467715
    },
    {
        "content": "<p>Here's a tactic equivalent for that proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_T_of_ne_F</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">B.F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">B.T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exfalso</span> <span class=\"c1\">-- corresponds to `(...).elim`, short for `False.elim (...)`</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 405443854,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701467723
    },
    {
        "content": "<p>You may be confused because <code>rfl</code> is used for three distinct things in lean; it's a term of type <code>a = a</code>, it's a tactic that proves a goal <code>R a a</code> for any reflexive relation <code>R</code>, and it's a pattern used to substitute out variables in <code>rcases</code>/<code>obtain</code></p>",
        "id": 405444817,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701468162
    }
]