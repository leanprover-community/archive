[
    {
        "content": "<p>All, please see the <a href=\"https://github.com/leanprover/lean4/releases/tag/v4.2.0-rc4\">updated release notes</a> of 4.2.0-rc4 if you have previously used rc2 or rc3, or go back to a project/branch still using them. For more information also see the thread <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/lake.20build.27ing.20mathlib.20HEAD\">#lean4 &gt; lake build'ing mathlib HEAD</a>.</p>",
        "id": 397875701,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697919640
    },
    {
        "content": "<p>I think I hit this now while already on 4.2.0-rc4. I (really believe I) had deleted the <code>lakefile.olean</code> as instructed before <code>lake update</code>ing to 4.2.0-rc4. <em>[UPDATE: Confirmed on command history, but see below for why this was not a solution.]</em></p>\n<p>I had some issues in VS Code suddenly --- the same config worked for some time before. I then ran <code>lake clean</code>, and it erased the entire project directory.</p>",
        "id": 397970839,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1698007192
    },
    {
        "content": "<p>I think you maybe have to delete it <em>after</em> running <code>lake update</code></p>",
        "id": 397970914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698007263
    },
    {
        "content": "<p>Otherwise <code>lake update</code> will recreate it (pre-update)</p>",
        "id": 397970920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698007269
    },
    {
        "content": "<p>Oh, I had misunderstood the instructions...</p>",
        "id": 397970941,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1698007302
    },
    {
        "content": "<p>I think that's on the instructions, not on you:</p>\n<blockquote>\n<p>Fixes a bug that could lead to data loss from lake clean when switching between this version and previous stable versions. Users upgrading a project from 4.2.0-rc2 or 4.2.0-rc3 should manually remove their lakefile.olean beforehand.</p>\n</blockquote>",
        "id": 397971030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698007405
    },
    {
        "content": "<p>The obvious reading is that \"beforehand\" modifies \"upgrading a project\", but I think it actually is intended to modify \"<code>lake clean</code>\"</p>",
        "id": 397971052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698007440
    },
    {
        "content": "<p>I just checked the same and was about to request a clarification there.</p>\n<p>(That said, I don't blame those instructions, because I just sloppily followed the problem on Zulip instead of carefully reading the instructions.)</p>",
        "id": 397971110,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1698007482
    },
    {
        "content": "<p>I should have everything (except from a very small amount of recent work) on an external repo, so I should be fine.</p>\n<p>But this can be really bad for Lean users. There is absolutely nothing left of the directory.</p>",
        "id": 397971200,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1698007591
    },
    {
        "content": "<p>Not that I assume you saw it, and Sebastian I'm sure will update the official instructions, but I changed the TLDR at the top of <a href=\"#narrow/stream/270676-lean4/topic/lake.20build'ing.20mathlib.20HEAD/near/397850852\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/lake.20build'ing.20mathlib.20HEAD/near/397850852</a> to hopefully make that even clearer there.</p>",
        "id": 397971789,
        "sender_full_name": "Julian Berman",
        "timestamp": 1698008299
    },
    {
        "content": "<p>I'm confused, everyone is talking about <code>lake update</code> upgrading Lean but it doesn't change <code>lean-toolchain</code>, you still have to do that yourself. Whether you remove <code>lakefile.olean</code> right before or after touching that file doesn't really matter. I've clarified the instructions nevertheless.</p>",
        "id": 397972604,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698009268
    },
    {
        "content": "<p>Now it's my turn to be confused. I'm pretty sure <code>lake update</code> updated <code>lean-toolchain</code> last time I used it (= this morning).</p>",
        "id": 397972890,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698009626
    },
    {
        "content": "<p>I hope you can also see that having a confusing system for upgrading leads to confusion.</p>\n<p>(I should probably add that knowing this community well I fully expect these issues to be ironed out in time!)</p>",
        "id": 397972916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698009664
    },
    {
        "content": "<p>Then I may be mistaken, did I miss some feature automating this?</p>",
        "id": 397972996,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698009740
    },
    {
        "content": "<p>People have been talking about it, so I wouldn't be surprised. Nothing else comes to mind though.</p>",
        "id": 397973325,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698010126
    },
    {
        "content": "<p>I honestly cannot remember what it does, but it seems not to here from just testing. The language I edited in myself was probably imprecise, will edit to match yours.</p>",
        "id": 397973480,
        "sender_full_name": "Julian Berman",
        "timestamp": 1698010314
    },
    {
        "content": "<p>No, I'm pretty sure Yaël must be mistaken here --- I don't know of anything tooling that modifies a <code>lean-toolchain</code> file (except for the CI automation that manages the <code>nightly-testing</code> and <code>lean-pr-testing-NNNN</code> branches).</p>",
        "id": 397973976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698010964
    },
    {
        "content": "<p>Yeah sorry I can't check now</p>",
        "id": 397973992,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698011000
    },
    {
        "content": "<p>(we <em>want</em> <code>lake update</code> to appropriately update Lean of course and we will get there, I was just checking whether my instructions for the current Lean were correct!)</p>",
        "id": 398022343,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698044156
    },
    {
        "content": "<p>Maybe add something like: Back up your whole Lean project elsewhere before running any <code>lake</code> command, particularly <code>lake clean</code>.</p>",
        "id": 398039750,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698051157
    },
    {
        "content": "<p>does this <code>lake clean</code> bug also end up deleting the git history and the .vscode folder?</p>",
        "id": 398062215,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698059680
    },
    {
        "content": "<p>Also, what toolchain should I update to if I haven't been bitten by this bug yet. Currently I am using 4.2 rc1 and 4.1.</p>",
        "id": 398062458,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698059783
    },
    {
        "content": "<p>4.2.0-rc4 is the fixed version, if you just skip over 4.2.0-rc{2,3} you will not have any problems</p>",
        "id": 398062612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698059868
    },
    {
        "content": "<p>Yes, it deletes the entire working directory, which includes <code>.git</code> and <code>.vscode</code>; the bug is that what lake things is the build directory is actually the source directory</p>",
        "id": 398062634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698059874
    },
    {
        "content": "<p>alternatively you can just not use <code>lake clean</code>, I don't think I ever use this command and do <code>rm -rf build</code> instead</p>",
        "id": 398062835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698059953
    },
    {
        "content": "<p>Is there/can there be an option for <code>lake update</code> that only updates to stable releases like 4.1 or 4.2 instead of intermediate <code>rc</code> releases?</p>",
        "id": 398063166,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698060119
    },
    {
        "content": "<p>As already discussed upthread, <code>lake update</code> never updates the release at all</p>",
        "id": 398064519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698060638
    },
    {
        "content": "<p>So wish somewhat granted, <code>lake update</code> will never move you to a <code>rc</code> release</p>",
        "id": 398064564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698060658
    },
    {
        "content": "<p>Mario, the stupid part about that is that <code>lake clean</code> should be the <em>safer</em> operation, because if I mistype with <code>rm -rf</code> there's no telling what I might delete.</p>",
        "id": 398075492,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698064516
    },
    {
        "content": "<p>no, my point is exactly that <code>lake clean</code> is another way to spell <code>rm -rf &lt;something not immediately visible&gt;</code> and this has consequences</p>",
        "id": 398122004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698079056
    },
    {
        "content": "<p>I'm sorry, that sucks. If the directory to <code>rm</code> were just stored in some json file that was tracked in the repo this would <em>never</em> happen. And if <code>lake clean</code> meant <code>rm -rf &lt;directory read from json file&gt;</code>, then there would be no problem and it would be <em>safer</em> than <code>rm -rf</code> manually. The only reason this issue came up is because <code>lake</code> was / is relying on a cache file <code>lakefile.olean</code>(for important performance reasons I expect) which is not stored in the git repo. So in my mind, this again boils down to the complexity of <code>lake</code>.</p>\n<p>In years of using <code>make</code> files for my LaTeX projects, I have exactly 0 times deleted something unwanted by running my <code>make clean</code> operation, but I have definitely <code>rm -rf</code>'ed a number of things on accident (in fact, as a safety precaution, I generally type <code>asdf rm -rf stuff</code> and only after checking <code>stuff</code> is correct do I delete <code>asdf</code>).</p>\n<p>For newbie / math users, it's even worse because they may not even understand <code>rm -rf</code>, or maybe (in the future) they will only interact with <code>lake clean</code> by using the VS Code extension; and the potential for deleting the user's entire repo should be virtually non-existent in that case (requiring <code>lake clean</code> to never do anything bad, hence safer than <code>rm -rf stuff</code>).</p>",
        "id": 398138488,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698086521
    },
    {
        "content": "<p>I'll add that my personal intention is likely to use <code>git clean -xi</code> going forward, which both supports a <code>--dry-run / -n</code> option as well as <code>-i</code> for interactively deleting only after showing me what I'm deleting. FWIW, <code>rm</code> also has such a flag, it's <code>rm -i</code> or <code>rm -I</code> to only ask for confirmation if it's going to remove a lot of stuff</p>",
        "id": 398139443,
        "sender_full_name": "Julian Berman",
        "timestamp": 1698086957
    },
    {
        "content": "<p>I hesitate to say anything because of how little I know, and the fact that it seems this issue itself isn't fully \"clear and out of the water yet\", but to me the really worrying thing is <em>how</em> this seems to have happened -- namely that .olean files seem to contain serialized arbitrary objects, and that when deserializing them, there's some sort of positional layout applied. That's very worrying to me naively, and reminiscent of the situation in Python where -- I claim <em>good</em> Python programmers know \"never use Pickle\", which has some of these issues. I could be way off here on the \"root\" issue, it's just understanding I got from reading the other thread, but to me that would be what I would be wary of. ISTM Lake was just the first unlucky thing to hit that. Again though, just raw thoughts from seeing the other Zulip thread.</p>",
        "id": 398139770,
        "sender_full_name": "Julian Berman",
        "timestamp": 1698087107
    },
    {
        "content": "<p>It would certainly seem to be \"safer\" to have a \"downward facing FilePath object\" -- i.e. one where it cannot traverse further upward than its root path (i.e. the kind of path that in other places mean you cannot do <code>Path(\"/foo/bar\").child(someUntrustedString).remove()</code> and be vulnerable to path traversal attacks) -- but so long as it's possible to have the kind of deserialization problem that I gathered (hopefully correctly), it'd still be worrying -- because you could get some other random object in the spot you expected, making anything fair game again.</p>",
        "id": 398139989,
        "sender_full_name": "Julian Berman",
        "timestamp": 1698087202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/398122004\">said</a>:</p>\n<blockquote>\n<p>no, my point is exactly that <code>lake clean</code> is another way to spell <code>rm -rf &lt;something not immediately visible&gt;</code> and this has consequences</p>\n</blockquote>\n<p>User interfaces on top of existing tools provide safety for non-expert and non-malicious users by hiding complexity and footguns. By that standard you are suggesting, how does one trust <code>rm</code> itself rather than writing a program with all the syscalls it uses?</p>",
        "id": 398141568,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698087846
    },
    {
        "content": "<p>The reason I trust <code>rm</code> and <code>make clean</code> more than <code>lake clean</code> at a technical and social level is because they are old and well tested pieces of software used by millions of people. I have never even heard a report of these tools deleting unwanted data except by user error (i.e. calling <code>rm</code> with the wrong argument or in the wrong directory), let alone seen it first hand. I'm sure this used to happen more, but that was 20+ years ago. <code>lake</code> is a young tool under active development, built on a young language under active development. Building stable software takes time and effort, and that doesn't come easily. In fact, if I was to write a program with direct syscalls I would still trust it less than <code>rm</code> because I would have just created another young and buggy program.</p>",
        "id": 398150117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698092567
    },
    {
        "content": "<p>Obviously, if <code>lake clean</code> has no bugs and does exactly what I am hoping it does it is superior to <code>rm -rf build</code>. But the complexity of lake ties directly to both lowering the probability that it has no bugs, as well as the probability that it does what I want it to. <code>rm -rf build</code> has a very simple to understand spec, at least for someone like me who knows how CLIs work. I totally agree that for people who don't know their way around a terminal it is better to use <code>lake clean</code> via vscode commands (assuming it doesn't have critical bugs in it).</p>",
        "id": 398150868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698092937
    },
    {
        "content": "<p>This I totally understand. I guess from your previous message I had interpreted \"you should not <em>eventually</em> trust <code>lake clean</code> more than your fat fingers.\" The fact that it has bugs early on is unfortunate, but understandable.</p>",
        "id": 398150990,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698093001
    },
    {
        "content": "<p>... and more than a little unlucky, since the bug could have been something less dramatic than wiping out the current mathlib directory!</p>",
        "id": 398151432,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698093125
    },
    {
        "content": "<p>I think we have had less dramatic ABI breakage issues many times already</p>",
        "id": 398151630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093181
    },
    {
        "content": "<p>oleans make for a bad interchange format on many levels, but the siren song of <code>mmap</code> is hard to compete with</p>",
        "id": 398151816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093247
    },
    {
        "content": "<p>Let's take a file from disk and - without even parsing it - map it directly into memory and start dereferencing pointers in it. What could possibly go wrong?</p>",
        "id": 398152090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093383
    },
    {
        "content": "<p>Presumably this doesn't manifest anywhere else because we always read the source file and check it is in sync with the olean before loading the olean?</p>",
        "id": 398152477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698093492
    },
    {
        "content": "<p>But lake skipped that step for performance reasons, and we're now paying the price?</p>",
        "id": 398152580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698093521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/398152477\">said</a>:</p>\n<blockquote>\n<p>Presumably this doesn't manifest anywhere else because we always read the source file and check it is in sync with the olean before loading the olean?</p>\n</blockquote>\n<p>How does that work? We compile each lean file every time?</p>",
        "id": 398152620,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698093532
    },
    {
        "content": "<p>Lake uses a hash of the source file and the toolchain and lots of other stuff to decide whether to rebuild the olean</p>",
        "id": 398152711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093563
    },
    {
        "content": "<p>Unfortunately it doesn't do this for lakefile.olean, it only uses modification times</p>",
        "id": 398152961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093633
    },
    {
        "content": "<p>Is this just for performance so it doesn't have to incur startup costs?</p>",
        "id": 398153088,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698093672
    },
    {
        "content": "<p>yes, that's the main reason, but I think the lack of hashing is just because there isn't an obvious place to put it</p>",
        "id": 398153190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093707
    },
    {
        "content": "<p>oleans should probably (definitely) store the toolchain name or an ABI version number or something</p>",
        "id": 398153333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093744
    },
    {
        "content": "<p>This hash needs to be computed once for one lake file.olean when it is asked to run a command that probably checks many oleans? Why is it costly?</p>",
        "id": 398153410,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698093779
    },
    {
        "content": "<p>right now they are a non-self-describing binary format which means you need to have some external knowledge to even know how to parse them</p>",
        "id": 398153455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093810
    },
    {
        "content": "<p>the hash is not costly, it was just not done</p>",
        "id": 398153545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093852
    },
    {
        "content": "<p>the hash of all the lean files in the project is somewhat costly but that's not what we're talking about</p>",
        "id": 398153571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093870
    },
    {
        "content": "<p>There is no question that hashing the lakefiles and/or adding the toolchain version is an important thing to do and I know Mac is planning on working on it soon because we don't want to enshrine ABI stability of lake</p>",
        "id": 398153668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093938
    },
    {
        "content": "<p>rc4 was just an emergency measure to prevent data loss while we fix the underlying issue</p>",
        "id": 398153763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698093981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/398153410\">said</a>:</p>\n<blockquote>\n<p>This hash needs to be computed once for one lake file.olean when it is asked to run a command that probably checks many oleans? Why is it costly?</p>\n</blockquote>\n<p>The thing that is costly which motivated the lakefile.olean in the first place is elaboration of the lakefiles</p>",
        "id": 398153848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698094046
    },
    {
        "content": "<p>It's less costly than it used to be, but still a decent fraction of lake's overall runtime</p>",
        "id": 398154040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698094094
    },
    {
        "content": "<p>Is this hash stored in the olean when it is created from the respective lean file and cross checked by recomputing the hash on the lean file afterwards?</p>",
        "id": 398154297,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698094169
    },
    {
        "content": "<p>Maybe I will understand this better if I read how this hash is built, stored, and checked. Where should I look in the source/docs?</p>",
        "id": 398154703,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698094313
    },
    {
        "content": "<p>If you look in the <code>build</code> directory you will notice there are <code>.trace</code> files everywhere</p>",
        "id": 398155365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698094640
    },
    {
        "content": "<p>these are recursive hashes of all the inputs to each build output, and when you run <code>lake build</code> it re-hashes everything, checks if the result matches the stored <code>.trace</code> file and only if it agrees does it trust the corresponding build output file (<code>.olean</code>, <code>.c</code>, <code>.o</code> etc)</p>",
        "id": 398155632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698094759
    },
    {
        "content": "<p><code>lakefile.olean</code> is special because it is done before <code>lake</code> proper is set up (the workspace hasn't been built yet), so it has to go through a different code path and that one doesn't have the same hashing infrastructure</p>",
        "id": 398155844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698094852
    },
    {
        "content": "<p>Okay, now the pieces are falling in place in my head. Thanks :)</p>",
        "id": 398158713,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698096537
    },
    {
        "content": "<p>Basically, before this bootstrapping of Lake  is complete, the only way to be sure that lakefile.lean matches its olean is compiling it, which is expensive. So Lake has been faithfully reading lakefile.olean, which is essential to said bootstrapping.</p>",
        "id": 398159577,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698097033
    },
    {
        "content": "<p>I am guessing a two stage boostrapping process is one possible solution?</p>",
        "id": 398159956,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698097290
    },
    {
        "content": "<p>please don't propose that, I just mentioned that complexity is a major issue and that will not help</p>",
        "id": 398160557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698097679
    },
    {
        "content": "<p>Not at all. Not proposing anything. At this point, I am just fascinated by how the system design process is hashed out (pun intended)  in practice. Fwiw, I suspect Lake is going to get more complex when dependency management with version constraints enters the picture.</p>",
        "id": 398161013,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698097953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/398139443\">said</a>:</p>\n<blockquote>\n<p>I'll add that my personal intention is likely to use <code>git clean -xi</code> going forward, which both supports a <code>--dry-run / -n</code> option as well as <code>-i</code> for interactively deleting only after showing me what I'm deleting. FWIW, <code>rm</code> also has such a flag, it's <code>rm -i</code> or <code>rm -I</code> to only ask for confirmation if it's going to remove a lot of stuff</p>\n</blockquote>\n<p>Both of these sound like nice features to add to Lake! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>  Would you be willing to make an issue for them? One design question I  can think of is whether Lake should traverse the directories it intends to delete and list all files or just list the top-level directory if it intends to delete the whole thing.</p>",
        "id": 398172355,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698105267
    },
    {
        "content": "<blockquote>\n<p>One design question I can think of is whether Lake should traverse the directories it intends to delete and list all files or just list the top-level directory if it intends to delete the whole thing.</p>\n</blockquote>\n<p>This is indeed a good question, considering <code>git clean -xd</code> will not, but <code>rm -i</code> will :) -- I think either is probably reasonable behavior personally. But yes sure, done as <a href=\"https://github.com/leanprover/lean4/pull/2740\">lean4#2740</a> and <a href=\"https://github.com/leanprover/lean4/pull/2741\">lean4#2741</a>!</p>",
        "id": 398175703,
        "sender_full_name": "Julian Berman",
        "timestamp": 1698107645
    }
]