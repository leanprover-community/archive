[
    {
        "content": "<p>In some cases (e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space\">docs#uniform_space</a>), it makes sense to have a custom <code>infi</code> function to ensure definitional equality for <code>to_topological_space</code> projection. I suggest that we add (may be, after the port) a protected definition <code>uniform_space.infi (f : Œπ ‚Üí uniform_space Œ±)</code> with <code>to_topological_space := ‚®Ö i, (f i).to_topological_space</code> and use it, e.g, for the <code>pi</code> instance.</p>",
        "id": 325283760,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675291470
    },
    {
        "content": "<p>Is this definitional equality to avoid diamonds, or just for convenience?</p>",
        "id": 325284418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675291787
    },
    {
        "content": "<p>The problem with custom <code>infi</code>s is that if expressed as a typeclass they need to be universe polymorphic</p>",
        "id": 325284572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675291834
    },
    {
        "content": "<p>Not a TC, just a definition. The first use that comes to my mind is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pi.uniform_space\">docs#Pi.uniform_space</a></p>",
        "id": 325284864,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675291959
    },
    {
        "content": "<p>I suppose if you did the TC route  you could have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_infi</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">infi</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Infi_eq_Inf</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">infi</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 325284889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675291972
    },
    {
        "content": "<p>But we can't include this in <code>complete_lattice</code>, so we can't turn this into the \"main\" interface for <code>infi</code>.</p>",
        "id": 325284998,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675292030
    },
    {
        "content": "<p>And if it's not a part of <code>complete_lattice</code>, then any generic lemma about this TC <code>infi</code> will need lots of <code>[has_infi _ _]</code> instances.</p>",
        "id": 325285208,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675292110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Custom.20infi/near/325284864\">said</a>:</p>\n<blockquote>\n<p>Not a TC, just a definition. The first use that comes to my mind is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pi.uniform_space\">docs#Pi.uniform_space</a></p>\n</blockquote>\n<p>How would you deal with the uniform space over a double-indexed pi type?</p>",
        "id": 325287132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675292917
    },
    {
        "content": "<p>Most <code>infi</code>s are built out of other <code>infi</code>s, aren't they? In which case, I think typeclasses are hard to avoid.</p>",
        "id": 325287254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675292973
    },
    {
        "content": "<p>Probably, we shouldn't do this till we have more than 1 use for the new function.</p>",
        "id": 325288869,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675293824
    },
    {
        "content": "<p>Just to be sure, making sure that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.has_Inf\">docs#uniform_space.has_Inf</a> has nice definitional equality (which is not the case right now) wouldn‚Äôt help because of <code>range</code> having bad defeq, is that right ?</p>",
        "id": 325345553,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1675329024
    },
    {
        "content": "<p>Would <code>Inf ((Œª u, ùì§[u]) '' s)</code> be better or worse than the current <code>(‚®Öu‚ààs, ùì§[u])</code>?</p>",
        "id": 325347757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675329815
    },
    {
        "content": "<p>It doesn't matter because the <code>to_topological_space</code> projection is not defeq</p>",
        "id": 325425077,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675351206
    },
    {
        "content": "<p>defeq to what?</p>",
        "id": 325428394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675352061
    },
    {
        "content": "<p>To <code>infi (Œª i, (u i).to_topological_space)</code></p>",
        "id": 325484833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675367408
    },
    {
        "content": "<p>Ah, so you want <code>‚®Ö i, (u i).to_topological_space = (‚®Ö i, u i).to_topological_space</code> to be true definitionally</p>",
        "id": 325505692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675375174
    },
    {
        "content": "<p>I wanted to define a custom function <code>uniform_space.infi</code> (no notation) with this property.</p>",
        "id": 325518200,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675380574
    },
    {
        "content": "<p>But I don't have good use cases except for the <code>uniform_space</code> structure on a pi type.</p>",
        "id": 325518350,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675380634
    }
]