[
    {
        "content": "<p>Hi everyone, I've built a prototype functional UI framework for lean that you can try out here: <a href=\"https://demo.edayers.com\" title=\"https://demo.edayers.com\">https://demo.edayers.com</a><br>\nIt's still very much WIP but I thought I would share it here now because I am now happy with it as a proof of concept.<br>\nThe idea is that you can use <code>widget.component</code> and <code>widget.html</code> to build a virtual HTML tree in Lean (with support for stateful components).<br>\nThere is a new constant called <code>save_widget</code> which performs the analogue of <code>save_info_thunk</code>. If this is called, then instead of rendering the goal state, the editor will render an interactive widget.  It is also possible for the widget to send commands to the editor.<br>\nThis means that it is possible to make an interactive UI for tactic states (eg you could click on a goal and it would give you a list of available tactics) entirely within lean, without having to write any javascript or C++.<br>\nThe UI building API is still very rough and subject to change.</p>\n<p>The source code is on a branch called 'widget'  in the following places: </p>\n<ul>\n<li>lean: <a href=\"https://github.com/EdAyers/lean/tree/widget\" title=\"https://github.com/EdAyers/lean/tree/widget\">https://github.com/EdAyers/lean/tree/widget</a></li>\n<li>vscode extension: <a href=\"https://github.com/EdAyers/vscode-lean/tree/widget\" title=\"https://github.com/EdAyers/vscode-lean/tree/widget\">https://github.com/EdAyers/vscode-lean/tree/widget</a></li>\n<li>lean-web-editor: <a href=\"https://github.com/EdAyers/lean-web-editor/tree/widget\" title=\"https://github.com/EdAyers/lean-web-editor/tree/widget\">https://github.com/EdAyers/lean-web-editor/tree/widget</a><br>\nAlso massive thanks to <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> for helping me get the emscripten build working!</li>\n</ul>",
        "id": 196758988,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588852064
    },
    {
        "content": "<p>So apparently this can be used to implement go-to-definition in the goal view.  And it should also be possible to implement a feature where you can click on a subterm and it expands the implicit arguments.</p>",
        "id": 196759477,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588852424
    },
    {
        "content": "<p>Yep, go-to-definition would require writing a hook in the client editor but subterm implicit arguments is straightforward. The tooltip message is generated by lean and it has the full tactic state and subexpression to work with when generating the UI.</p>",
        "id": 196759709,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588852595
    },
    {
        "content": "<blockquote>\n<p>And it should also be possible to implement a feature where you can click on a subterm and it expands the implicit arguments.</p>\n</blockquote>\n<p>I would love to have something similar to <a href=\"https://blog.jetbrains.com/scala/2018/07/25/intellij-scala-plugin-2018-2-advanced-implicit-support-improved-patterns-autocompletion-semantic-highlighting-scalafmt-and-more/\" title=\"https://blog.jetbrains.com/scala/2018/07/25/intellij-scala-plugin-2018-2-advanced-implicit-support-improved-patterns-autocompletion-semantic-highlighting-scalafmt-and-more/\">IntelliJ's Scala Plugin's \"show implicits\"</a>.</p>\n<p>The other IntelliJ feature that I'd love to have is to select a subexpression (not just a single word) and to get the type of the whole subexpression.</p>\n<p>... and \"reverse go to definition\" which finds all uses of a definition in the codebase.</p>",
        "id": 196760259,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588852974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/widget/near/196760259\" title=\"#narrow/stream/113488-general/topic/widget/near/196760259\">said</a>:</p>\n<blockquote>\n<p>The other IntelliJ feature that I'd love to have is to select a subexpression (not just a single word) and to get the type of the whole subexpression.</p>\n</blockquote>\n<p>That works on the demo right now.</p>",
        "id": 196760428,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588853074
    },
    {
        "content": "<p>Oooh, this is slick!</p>",
        "id": 196760466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588853122
    },
    {
        "content": "<p>Only, when I have the counter, I don't see any other goal state anymore. And after the <code>split</code>, I only have 1 counter, whereas I interpret the comments as saying that I should see two. Is that right?</p>",
        "id": 196760559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588853172
    },
    {
        "content": "<p>Yes the counter replaces the goal state widget.</p>",
        "id": 196760600,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588853210
    },
    {
        "content": "<p>But you could easily make a component that shows both the counter and the tactic state</p>",
        "id": 196760646,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588853246
    },
    {
        "content": "<p>But what does the comment after the <code>split</code> mean?</p>",
        "id": 196760769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588853332
    },
    {
        "content": "<p>Should I then see two counters?</p>",
        "id": 196760776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588853338
    },
    {
        "content": "<p>There is a separate counter state (the number between buttons) for each command in the block. So if you click between the counters you can observe that the state is preserved, the idea is that you would use this state for ephemeral things like whether a UI menu is open or scroll position or whatever</p>",
        "id": 196760777,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588853338
    },
    {
        "content": "<blockquote>\n<p>This means that it is possible to make an interactive UI for tactic states (eg you could click on a goal and it would give you a list of available tactics) entirely within lean, without having to write any javascript or C++.</p>\n</blockquote>\n<p>To flesh this out a little more, how would you implement this \"available tactics\" example?  Would you write a  \"widget\" (formally a function of type <code>component tactic_state string</code>) in lean similar to your <code>counter</code> example, but which looks at the tactic_state and then figures out which tactics are applicable (sort of a like many of the current tactics which generate <code>Try it:</code>s).  Then the result of that widget tactic would be printed on the right?</p>",
        "id": 196763830,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588855303
    },
    {
        "content": "<p>I'm mixing up my types a little.  Can you call tactics from within your widgets (again, functions of type <code>component tactic_state string</code>)?  Maybe you would directly apply the tactic to the tactic_state?</p>",
        "id": 196764012,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588855415
    },
    {
        "content": "<p>Yes that's the rough idea. Since <code>tactic a := tactic_state -&gt; interaction_monad (tactic_state x a)</code> (OWTTE) you can run tactics inside the 'view' method of a component. But you can't output a tactic_state to anywhere, instead you have to get the component to emit a string (as it does in the <code>counter</code> example) which is a command in the begin/end block.</p>",
        "id": 196764591,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588855738
    },
    {
        "content": "<p>There is a helper def <code>widget.mk_tactic_widget</code> for making widgets which use tactics</p>",
        "id": 196765005,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588855925
    },
    {
        "content": "<p>Yes I just found that.  Makes more sense.</p>",
        "id": 196765030,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588855943
    },
    {
        "content": "<p>Also, one big advantage of this over just adding a tactic at the end of your block is that you can delay running this \"suggest\" tactic (which might be expensive) until the user clicks on the goal (or some button which says \"find relevant tactics\").  Is that the idea?</p>",
        "id": 196765223,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588856028
    },
    {
        "content": "<p>Yes. Eg the contents of the type tooltip is not computed until you click on it</p>",
        "id": 196765485,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588856156
    },
    {
        "content": "<p>currently  there is no support for having a long-running computation in a <code>task a</code> and having the UI update when it is done, so the user experience is not going to be great if there is a long-running comp that is needed before showing the UI</p>",
        "id": 196765673,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588856247
    },
    {
        "content": "<p><a href=\"https://demo.edayers.com/#code=--%20Live%20WebAssembly%20version%20of%20Lean%0Aimport%20widget%0Aopen%20widget%0A%0Auniverses%20v%20u%0A%0Anamespace%20category_theory%0Aclass%20has_hom%20%28obj%20%3A%20Type%20u%29%20%3A%20Type%20%28max%20u%20%28v%2B1%29%29%20%3A%3D%0A%28hom%20%3A%20obj%20%E2%86%92%20obj%20%E2%86%92%20Type%20v%29%0A%0Ainfixr%20%60%20%E2%9F%B6%20%60%3A10%20%3A%3D%20has_hom.hom%20--%20type%20as%20%5Ch%0A%0Asection%20prio%0Aset_option%20default_priority%20100%0Aclass%20category_struct%20%28obj%20%3A%20Type%20u%29%0Aextends%20has_hom.%7Bv%7D%20obj%20%3A%20Type%20%28max%20u%20%28v%2B1%29%29%20%3A%3D%0A%28id%20%20%20%20%20%20%20%3A%20%CE%A0%20X%20%3A%20obj%2C%20hom%20X%20X%29%0A%28comp%20%20%20%20%20%3A%20%CE%A0%20%7BX%20Y%20Z%20%3A%20obj%7D%2C%20%28X%20%E2%9F%B6%20Y%29%20%E2%86%92%20%28Y%20%E2%9F%B6%20Z%29%20%E2%86%92%20%28X%20%E2%9F%B6%20Z%29%29%0A%0Anotation%20%60%F0%9D%9F%99%60%20%3A%3D%20category_struct.id%20--%20type%20as%20%5Cb1%0Ainfixr%20%60%20%E2%89%AB%20%60%3A80%20%3A%3D%20category_struct.comp%20--%20type%20as%20%5Cgg%0A%0Aclass%20category%20%28obj%20%3A%20Type%20u%29%0Aextends%20category_struct.%7Bv%7D%20obj%20%3A%20Type%20%28max%20u%20%28v%2B1%29%29%20%3A%3D%0A%28id_comp'%20%3A%20%E2%88%80%20%7BX%20Y%20%3A%20obj%7D%20%28f%20%3A%20hom%20X%20Y%29%2C%20%F0%9D%9F%99%20X%20%E2%89%AB%20f%20%3D%20f%29%0A%28comp_id'%20%3A%20%E2%88%80%20%7BX%20Y%20%3A%20obj%7D%20%28f%20%3A%20hom%20X%20Y%29%2C%20f%20%E2%89%AB%20%F0%9D%9F%99%20Y%20%3D%20f%29%0A%28assoc'%20%20%20%3A%20%E2%88%80%20%7BW%20X%20Y%20Z%20%3A%20obj%7D%20%28f%20%3A%20hom%20W%20X%29%20%28g%20%3A%20hom%20X%20Y%29%20%28h%20%3A%20hom%20Y%20Z%29%2C%0A%20%20%28f%20%E2%89%AB%20g%29%20%E2%89%AB%20h%20%3D%20f%20%E2%89%AB%20%28g%20%E2%89%AB%20h%29%29%0Aend%20prio%0A%0Ainstance%20natCat%20%3A%20category%20unit%20%3A%3D%0A%7B%20hom%20%3A%3D%20%CE%BB%20_%20_%2C%20nat%0A%2C%20id%20%3A%3D%20%CE%BB%20_%2C%200%0A%2C%20comp%20%3A%3D%20%CE%BB%20_%20_%20_%20n%20m%2C%20n%20%2B%20m%0A%2C%20id_comp'%20%3A%3D%20%CE%BB%20_%20_%2C%20nat.zero_add%0A%2C%20comp_id'%20%3A%3D%20%CE%BB%20_%20_%2C%20nat.add_zero%0A%2C%20assoc'%20%3A%3D%20%CE%BB%20_%20_%20_%20_%2C%20nat.add_assoc%0A%7D%0Aend%20category_theory%0Aopen%20category_theory%0A%0Anamespace%20tactic%0Aopen%20tactic%0A%0A--%20deprecated%0Ameta%20def%20hasHomOfCat%20%28%F0%9D%92%9E%20%3A%20expr%29%20%3A%20tactic%20%28expr%20%C3%97%20expr%29%20%3A%3D%20do%0A%20%20%60%28%40category%20%25%25%CE%B1%29%20%E2%86%90%20infer_type%20%F0%9D%92%9E%0A%20%20%20%20%7C%20fail%20%22Not%20a%20category%20instance%3F!%22%2C%0A%20%20catStruct%20%E2%86%90%20mk_app%20%60category_theory.category.to_category_struct%20%5B%CE%B1%2C%20%F0%9D%92%9E%5D%2C%0A%20%20hasHom%20%E2%86%90%20mk_app%20%60category_theory.category_struct.to_has_hom%20%5B%CE%B1%2C%20catStruct%5D%2C%0A%20%20pure%20%E2%9F%A8%CE%B1%20%2C%20hasHom%E2%9F%A9%0A%0Ameta%20def%20morTypesAux%20%3A%20list%20expr%20%E2%86%92%20tactic%20%28list%20expr%29%0A%7C%20%28f%20%3A%3A%20gs%29%20%3A%3D%20do%0A%20%20%60%28%25%25X%20%E2%9F%B6%20%25%25Y%29%20%E2%86%90%20infer_type%20f%0A%20%20%20%20%7C%20fail%20%22Not%20a%20hom%3F!%22%2C%0A%20%20gTypes%20%E2%86%90%20morTypesAux%20gs%2C%0A%20%20pure%20%28Y%20%3A%3A%20gTypes%29%0A%7C%20%5B%5D%20%3A%3D%20pure%20%5B%5D%0A%0Ameta%20def%20morTypes%20%3A%20list%20expr%20%E2%86%92%20tactic%20%28list%20expr%29%0A%7C%20%28f%20%3A%3A%20gs%29%20%3A%3D%20do%0A%20%20%60%28%25%25X%20%E2%9F%B6%20%25%25Y%29%20%E2%86%90%20infer_type%20f%0A%20%20%20%20%7C%20fail%20%22Not%20a%20hom%3F!%22%2C%0A%20%20gTypes%20%E2%86%90%20morTypesAux%20%28f%20%3A%3A%20gs%29%2C%0A%20%20pure%20%28X%20%3A%3A%20gTypes%29%0A%7C%20%5B%5D%20%3A%3D%20pure%20%5B%5D%0A%0A%2F--%20Turns%20an%20expression%20representing%20a%20chain%20of%20morphisms%0Ainto%20a%20list%20of%20the%20morphisms.%20-%2F%0Ameta%20def%20listOfMors%20%3A%20expr%20%E2%86%92%20list%20expr%0A%7C%20%60%28%25%25f%20%E2%89%AB%20%25%25g%29%20%3A%3D%20listOfMors%20f%20%2B%2B%20listOfMors%20g%20--%20note%20we%20don't%20assume%20left-%20or%20right-associated%2C%20so%20recur%20on%20both%20sides%0A%7C%20e%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%3D%20%5Be%5D%0A%0Ameta%20def%20scriptInject%20%3A%20component%20tactic_state%20empty%20%3A%3D%0Acomponent.mk%20empty%20unit%0A%28%CE%BB%20_%20_%2C%20%28%29%29%20%28%CE%BB%20_%20_%20_%2C%20%E2%9F%A8%28%29%2C%20none%E2%9F%A9%29%0A%28%CE%BB%20_%20_%2C%20%5Bhtml.h%20%22a%22%20%5Bhtml.attr.val%20%22href%22%20%22javascript%3Aalert%28'Hello!'%29%3B%22%5D%20%5Bhtml.of_string%20%22Click%20me.%22%5D%5D%29%0A%0Ameta%20def%20morsAndObjs%20%28e%20%3A%20expr%29%20%3A%20tactic%20%28list%20expr%20%C3%97%20list%20expr%29%20%3A%3D%0Ado%0A%20%20let%20mors%20%3A%3D%20listOfMors%20e%2C%0A%20%20objs%20%E2%86%90%20morTypes%20mors%2C%0A%20%20pure%20%E2%9F%A8mors%2C%20objs%E2%9F%A9%0A%20%20%0Ameta%20def%20getLast%20%7B%CE%B1%20%3A%20Type*%7D%20%3A%20list%20%CE%B1%20%E2%86%92%20tactic%20%CE%B1%0A%7C%20%5B%5D%20%3A%3D%20failure%0A%7C%20%28h%20%3A%3A%20%5B%5D%29%20%3A%3D%20pure%20h%0A%7C%20%28h%20%3A%3A%20hs%29%20%3A%3D%20getLast%20hs%0A%0Aopen%20html.attr%0A%0Ameta%20def%20blue_box%20%7B%CE%B1%7D%3A%20html%20%CE%B1%20%E2%86%92%20html%20%CE%B1%20%0A%7C%20x%20%3A%3D%20html.h%20%22span%22%20%5BclassName%20%22ph2%20pv1%20ma1%20br3%20bg-light-blue%22%5D%20%5Bx%5D%0A%0Ameta%20def%20green_box%20%7B%CE%B1%7D%3A%20html%20%CE%B1%20%E2%86%92%20html%20%CE%B1%20%0A%7C%20x%20%3A%3D%20html.h%20%22span%22%20%5BclassName%20%22ph2%20pv1%20ma1%20br3%20bg-light-green%22%5D%20%5Bx%5D%0A%0A%0Ameta%20def%20diagrams%20%3A%20component%20tactic_state%20string%20%3A%3D%0A%40widget.mk_tactic_widget%0A%20%20string%20--%20no%20action%0A%20%20empty%20--%20no%20inner%20action%0A%20%20unit%20%28%29%20--%20no%20state%0A%20%20%28%CE%BB%20_%20isLeanInconsistent%2C%20fail%20%22How%20did%20you%20get%20my%20number%3F%22%29%0A%20%20%28%CE%BB%20_%2C%20do%0A%20%20%20%20%60%28%25%25a%20%3D%20%25%25b%29%20%E2%86%90%20target%0A%20%20%20%20%20%20%7C%20fail%20%22Goal%20is%20not%20an%20equality.%22%2C%0A%20%20%20%20%E2%9F%A8lMors%2C%20lObjs%E2%9F%A9%20%E2%86%90%20morsAndObjs%20a%2C%0A%20%20%20%20%E2%9F%A8rMors%2C%20rObjs%E2%9F%A9%20%E2%86%90%20morsAndObjs%20b%2C%0A%20%20%20%20let%20asciify%20%3A%20list%20expr%20%E2%86%92%20list%20expr%20%E2%86%92%20tactic%20%28html%20empty%29%20%3A%3D%0A%20%20%20%20%20%20%28%CE%BB%20objs%20mors%2C%20do%0A%20%20%20%20%20%20%20%20ppLs%20%E2%86%90%20%40list.mfoldr%20_%20_%20%28list%20%24%20html%20empty%29%20%28expr%20%C3%97%20expr%29%0A%20%20%20%20%20%20%20%20%20%20%28%CE%BB%20%E2%9F%A8X%2C%20f%E2%9F%A9%20ht%2C%20do%0A%20%20%20%20%20%20%20%20%20%20%20%20X%20%E2%86%90%20pp%20X%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20X%20%E2%86%90%20pure%20%24%20blue_box%20%24%20html.of_string%20%24%20format.to_string%20%24%20X%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20f%20%E2%86%90%20pp%20f%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20f%20%E2%86%90%20pure%20%24%20green_box%20%24%20html.of_string%20%24%20%22--%22%20%2B%2B%20%28format.to_string%20f%29%20%2B%2B%20%22-%3E%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pure%20%28X%20%3A%3A%20f%20%3A%3A%20ht%29%29%20%5B%5D%20%28objs.zip%20mors%29%2C%0A%20%20%20%20%20%20%20%20lastObj%20%E2%86%90%20getLast%20objs%2C%0A%20%20%20%20%20%20%20%20lastObj%20%E2%86%90%20pp%20lastObj%2C%0A%20%20%20%20%20%20%20%20lastObj%20%E2%86%90%20pure%20%24%20blue_box%20%24%20html.of_string%20%24%20format.to_string%20%24%20lastObj%2C%0A%20%20%20%20%20%20%20%20pure%20%24%20html.div%20%28ppLs%20%2B%2B%20%5BlastObj%5D%29%29%2C%0A%20%20%20%20lhsHt%20%E2%86%90%20asciify%20lObjs%20lMors%2C%0A%20%20%20%20rhsHt%20%E2%86%90%20asciify%20rObjs%20rMors%2C%0A%20%20%20%20pure%20%24%20html.h%20%22div%22%20%5BclassName%20%22ma4%22%5D%20%5BlhsHt%2C%20%22%3D%22%2C%20rhsHt%5D%0A%20%20%20%20%29%0A%20%20%28%CE%BB%20_%2C%20id%29%0A%0Aend%20tactic%0A%0Aexample%20%3A%20%281%20%3A%20%28%29%20%E2%9F%B6%20%28%29%29%20%E2%89%AB%20%282%20%3A%20%28%29%20%E2%9F%B6%20%28%29%29%20%E2%89%AB%20%283%20%3A%20%28%29%20%E2%9F%B6%20%28%29%29%20%3D%206%20%3A%3D%0Abegin%20%5Bwidget_tactic%5D%0A%20%20put%20tactic.diagrams%2C%0A%20%20--%20put%20the%20cursor%20here!%0Aend%0A%0A\" title=\"https://demo.edayers.com/#code=--%20Live%20WebAssembly%20version%20of%20Lean%0Aimport%20widget%0Aopen%20widget%0A%0Auniverses%20v%20u%0A%0Anamespace%20category_theory%0Aclass%20has_hom%20%28obj%20%3A%20Type%20u%29%20%3A%20Type%20%28max%20u%20%28v%2B1%29%29%20%3A%3D%0A%28hom%20%3A%20obj%20%E2%86%92%20obj%20%E2%86%92%20Type%20v%29%0A%0Ainfixr%20%60%20%E2%9F%B6%20%60%3A10%20%3A%3D%20has_hom.hom%20--%20type%20as%20%5Ch%0A%0Asection%20prio%0Aset_option%20default_priority%20100%0Aclass%20category_struct%20%28obj%20%3A%20Type%20u%29%0Aextends%20has_hom.%7Bv%7D%20obj%20%3A%20Type%20%28max%20u%20%28v%2B1%29%29%20%3A%3D%0A%28id%20%20%20%20%20%20%20%3A%20%CE%A0%20X%20%3A%20obj%2C%20hom%20X%20X%29%0A%28comp%20%20%20%20%20%3A%20%CE%A0%20%7BX%20Y%20Z%20%3A%20obj%7D%2C%20%28X%20%E2%9F%B6%20Y%29%20%E2%86%92%20%28Y%20%E2%9F%B6%20Z%29%20%E2%86%92%20%28X%20%E2%9F%B6%20Z%29%29%0A%0Anotation%20%60%F0%9D%9F%99%60%20%3A%3D%20category_struct.id%20--%20type%20as%20%5Cb1%0Ainfixr%20%60%20%E2%89%AB%20%60%3A80%20%3A%3D%20category_struct.comp%20--%20type%20as%20%5Cgg%0A%0Aclass%20category%20%28obj%20%3A%20Type%20u%29%0Aextends%20category_struct.%7Bv%7D%20obj%20%3A%20Type%20%28max%20u%20%28v%2B1%29%29%20%3A%3D%0A%28id_comp'%20%3A%20%E2%88%80%20%7BX%20Y%20%3A%20obj%7D%20%28f%20%3A%20hom%20X%20Y%29%2C%20%F0%9D%9F%99%20X%20%E2%89%AB%20f%20%3D%20f%29%0A%28comp_id'%20%3A%20%E2%88%80%20%7BX%20Y%20%3A%20obj%7D%20%28f%20%3A%20hom%20X%20Y%29%2C%20f%20%E2%89%AB%20%F0%9D%9F%99%20Y%20%3D%20f%29%0A%28assoc'%20%20%20%3A%20%E2%88%80%20%7BW%20X%20Y%20Z%20%3A%20obj%7D%20%28f%20%3A%20hom%20W%20X%29%20%28g%20%3A%20hom%20X%20Y%29%20%28h%20%3A%20hom%20Y%20Z%29%2C%0A%20%20%28f%20%E2%89%AB%20g%29%20%E2%89%AB%20h%20%3D%20f%20%E2%89%AB%20%28g%20%E2%89%AB%20h%29%29%0Aend%20prio%0A%0Ainstance%20natCat%20%3A%20category%20unit%20%3A%3D%0A%7B%20hom%20%3A%3D%20%CE%BB%20_%20_%2C%20nat%0A%2C%20id%20%3A%3D%20%CE%BB%20_%2C%200%0A%2C%20comp%20%3A%3D%20%CE%BB%20_%20_%20_%20n%20m%2C%20n%20%2B%20m%0A%2C%20id_comp'%20%3A%3D%20%CE%BB%20_%20_%2C%20nat.zero_add%0A%2C%20comp_id'%20%3A%3D%20%CE%BB%20_%20_%2C%20nat.add_zero%0A%2C%20assoc'%20%3A%3D%20%CE%BB%20_%20_%20_%20_%2C%20nat.add_assoc%0A%7D%0Aend%20category_theory%0Aopen%20category_theory%0A%0Anamespace%20tactic%0Aopen%20tactic%0A%0A--%20deprecated%0Ameta%20def%20hasHomOfCat%20%28%F0%9D%92%9E%20%3A%20expr%29%20%3A%20tactic%20%28expr%20%C3%97%20expr%29%20%3A%3D%20do%0A%20%20%60%28%40category%20%25%25%CE%B1%29%20%E2%86%90%20infer_type%20%F0%9D%92%9E%0A%20%20%20%20%7C%20fail%20%22Not%20a%20category%20instance%3F!%22%2C%0A%20%20catStruct%20%E2%86%90%20mk_app%20%60category_theory.category.to_category_struct%20%5B%CE%B1%2C%20%F0%9D%92%9E%5D%2C%0A%20%20hasHom%20%E2%86%90%20mk_app%20%60category_theory.category_struct.to_has_hom%20%5B%CE%B1%2C%20catStruct%5D%2C%0A%20%20pure%20%E2%9F%A8%CE%B1%20%2C%20hasHom%E2%9F%A9%0A%0Ameta%20def%20morTypesAux%20%3A%20list%20expr%20%E2%86%92%20tactic%20%28list%20expr%29%0A%7C%20%28f%20%3A%3A%20gs%29%20%3A%3D%20do%0A%20%20%60%28%25%25X%20%E2%9F%B6%20%25%25Y%29%20%E2%86%90%20infer_type%20f%0A%20%20%20%20%7C%20fail%20%22Not%20a%20hom%3F!%22%2C%0A%20%20gTypes%20%E2%86%90%20morTypesAux%20gs%2C%0A%20%20pure%20%28Y%20%3A%3A%20gTypes%29%0A%7C%20%5B%5D%20%3A%3D%20pure%20%5B%5D%0A%0Ameta%20def%20morTypes%20%3A%20list%20expr%20%E2%86%92%20tactic%20%28list%20expr%29%0A%7C%20%28f%20%3A%3A%20gs%29%20%3A%3D%20do%0A%20%20%60%28%25%25X%20%E2%9F%B6%20%25%25Y%29%20%E2%86%90%20infer_type%20f%0A%20%20%20%20%7C%20fail%20%22Not%20a%20hom%3F!%22%2C%0A%20%20gTypes%20%E2%86%90%20morTypesAux%20%28f%20%3A%3A%20gs%29%2C%0A%20%20pure%20%28X%20%3A%3A%20gTypes%29%0A%7C%20%5B%5D%20%3A%3D%20pure%20%5B%5D%0A%0A%2F--%20Turns%20an%20expression%20representing%20a%20chain%20of%20morphisms%0Ainto%20a%20list%20of%20the%20morphisms.%20-%2F%0Ameta%20def%20listOfMors%20%3A%20expr%20%E2%86%92%20list%20expr%0A%7C%20%60%28%25%25f%20%E2%89%AB%20%25%25g%29%20%3A%3D%20listOfMors%20f%20%2B%2B%20listOfMors%20g%20--%20note%20we%20don't%20assume%20left-%20or%20right-associated%2C%20so%20recur%20on%20both%20sides%0A%7C%20e%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%3D%20%5Be%5D%0A%0Ameta%20def%20scriptInject%20%3A%20component%20tactic_state%20empty%20%3A%3D%0Acomponent.mk%20empty%20unit%0A%28%CE%BB%20_%20_%2C%20%28%29%29%20%28%CE%BB%20_%20_%20_%2C%20%E2%9F%A8%28%29%2C%20none%E2%9F%A9%29%0A%28%CE%BB%20_%20_%2C%20%5Bhtml.h%20%22a%22%20%5Bhtml.attr.val%20%22href%22%20%22javascript%3Aalert%28'Hello!'%29%3B%22%5D%20%5Bhtml.of_string%20%22Click%20me.%22%5D%5D%29%0A%0Ameta%20def%20morsAndObjs%20%28e%20%3A%20expr%29%20%3A%20tactic%20%28list%20expr%20%C3%97%20list%20expr%29%20%3A%3D%0Ado%0A%20%20let%20mors%20%3A%3D%20listOfMors%20e%2C%0A%20%20objs%20%E2%86%90%20morTypes%20mors%2C%0A%20%20pure%20%E2%9F%A8mors%2C%20objs%E2%9F%A9%0A%20%20%0Ameta%20def%20getLast%20%7B%CE%B1%20%3A%20Type*%7D%20%3A%20list%20%CE%B1%20%E2%86%92%20tactic%20%CE%B1%0A%7C%20%5B%5D%20%3A%3D%20failure%0A%7C%20%28h%20%3A%3A%20%5B%5D%29%20%3A%3D%20pure%20h%0A%7C%20%28h%20%3A%3A%20hs%29%20%3A%3D%20getLast%20hs%0A%0Aopen%20html.attr%0A%0Ameta%20def%20blue_box%20%7B%CE%B1%7D%3A%20html%20%CE%B1%20%E2%86%92%20html%20%CE%B1%20%0A%7C%20x%20%3A%3D%20html.h%20%22span%22%20%5BclassName%20%22ph2%20pv1%20ma1%20br3%20bg-light-blue%22%5D%20%5Bx%5D%0A%0Ameta%20def%20green_box%20%7B%CE%B1%7D%3A%20html%20%CE%B1%20%E2%86%92%20html%20%CE%B1%20%0A%7C%20x%20%3A%3D%20html.h%20%22span%22%20%5BclassName%20%22ph2%20pv1%20ma1%20br3%20bg-light-green%22%5D%20%5Bx%5D%0A%0A%0Ameta%20def%20diagrams%20%3A%20component%20tactic_state%20string%20%3A%3D%0A%40widget.mk_tactic_widget%0A%20%20string%20--%20no%20action%0A%20%20empty%20--%20no%20inner%20action%0A%20%20unit%20%28%29%20--%20no%20state%0A%20%20%28%CE%BB%20_%20isLeanInconsistent%2C%20fail%20%22How%20did%20you%20get%20my%20number%3F%22%29%0A%20%20%28%CE%BB%20_%2C%20do%0A%20%20%20%20%60%28%25%25a%20%3D%20%25%25b%29%20%E2%86%90%20target%0A%20%20%20%20%20%20%7C%20fail%20%22Goal%20is%20not%20an%20equality.%22%2C%0A%20%20%20%20%E2%9F%A8lMors%2C%20lObjs%E2%9F%A9%20%E2%86%90%20morsAndObjs%20a%2C%0A%20%20%20%20%E2%9F%A8rMors%2C%20rObjs%E2%9F%A9%20%E2%86%90%20morsAndObjs%20b%2C%0A%20%20%20%20let%20asciify%20%3A%20list%20expr%20%E2%86%92%20list%20expr%20%E2%86%92%20tactic%20%28html%20empty%29%20%3A%3D%0A%20%20%20%20%20%20%28%CE%BB%20objs%20mors%2C%20do%0A%20%20%20%20%20%20%20%20ppLs%20%E2%86%90%20%40list.mfoldr%20_%20_%20%28list%20%24%20html%20empty%29%20%28expr%20%C3%97%20expr%29%0A%20%20%20%20%20%20%20%20%20%20%28%CE%BB%20%E2%9F%A8X%2C%20f%E2%9F%A9%20ht%2C%20do%0A%20%20%20%20%20%20%20%20%20%20%20%20X%20%E2%86%90%20pp%20X%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20X%20%E2%86%90%20pure%20%24%20blue_box%20%24%20html.of_string%20%24%20format.to_string%20%24%20X%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20f%20%E2%86%90%20pp%20f%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20f%20%E2%86%90%20pure%20%24%20green_box%20%24%20html.of_string%20%24%20%22--%22%20%2B%2B%20%28format.to_string%20f%29%20%2B%2B%20%22-%3E%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pure%20%28X%20%3A%3A%20f%20%3A%3A%20ht%29%29%20%5B%5D%20%28objs.zip%20mors%29%2C%0A%20%20%20%20%20%20%20%20lastObj%20%E2%86%90%20getLast%20objs%2C%0A%20%20%20%20%20%20%20%20lastObj%20%E2%86%90%20pp%20lastObj%2C%0A%20%20%20%20%20%20%20%20lastObj%20%E2%86%90%20pure%20%24%20blue_box%20%24%20html.of_string%20%24%20format.to_string%20%24%20lastObj%2C%0A%20%20%20%20%20%20%20%20pure%20%24%20html.div%20%28ppLs%20%2B%2B%20%5BlastObj%5D%29%29%2C%0A%20%20%20%20lhsHt%20%E2%86%90%20asciify%20lObjs%20lMors%2C%0A%20%20%20%20rhsHt%20%E2%86%90%20asciify%20rObjs%20rMors%2C%0A%20%20%20%20pure%20%24%20html.h%20%22div%22%20%5BclassName%20%22ma4%22%5D%20%5BlhsHt%2C%20%22%3D%22%2C%20rhsHt%5D%0A%20%20%20%20%29%0A%20%20%28%CE%BB%20_%2C%20id%29%0A%0Aend%20tactic%0A%0Aexample%20%3A%20%281%20%3A%20%28%29%20%E2%9F%B6%20%28%29%29%20%E2%89%AB%20%282%20%3A%20%28%29%20%E2%9F%B6%20%28%29%29%20%E2%89%AB%20%283%20%3A%20%28%29%20%E2%9F%B6%20%28%29%29%20%3D%206%20%3A%3D%0Abegin%20%5Bwidget_tactic%5D%0A%20%20put%20tactic.diagrams%2C%0A%20%20--%20put%20the%20cursor%20here!%0Aend%0A%0A\">Here is an example</a> that <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> made, put your cursor on line 135!</p>",
        "id": 196767287,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588857021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/widget/near/196759477\" title=\"#narrow/stream/113488-general/topic/widget/near/196759477\">said</a>:</p>\n<blockquote>\n<p>So apparently this can be used to implement go-to-definition in the goal view.  And it should also be possible to implement a feature where you can click on a subterm and it expands the implicit arguments.</p>\n</blockquote>\n<p>You can now view the implicit arguments of an expression (recursively!). This was about 4 lines of lean code to add. No C++ changes.</p>",
        "id": 196769109,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588857929
    },
    {
        "content": "<p>Now this is really neat!  Can you also make it work without the <code>[widget_tactic]</code>?</p>",
        "id": 196769983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588858279
    },
    {
        "content": "<p>This looks so <em>awesome</em>!</p>",
        "id": 196784317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588864191
    },
    {
        "content": "<p>What is the plan here? Getting this into a next version of Lean + VScode extension?</p>",
        "id": 196784926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588864417
    },
    {
        "content": "<p>Is there already something we can do to have it in our VScode instead of online?</p>",
        "id": 196785095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588864453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/widget/near/196785095\" title=\"#narrow/stream/113488-general/topic/widget/near/196785095\">said</a>:</p>\n<blockquote>\n<p>Is there already something we can do to have it in our VScode instead of online?</p>\n</blockquote>\n<p>Yes there is a vscode extension but it's a bit of a faff to set up at the moment</p>",
        "id": 196785302,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588864501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/widget/near/196784926\" title=\"#narrow/stream/113488-general/topic/widget/near/196784926\">said</a>:</p>\n<blockquote>\n<p>What is the plan here? Getting this into a next version of Lean + VScode extension?</p>\n</blockquote>\n<p>My main plan is to use it to make some UI for my thesis work, but eventually get it in to core Lean in the near future. The long term plan I guess is to convince the Lean 4 squad that allowing lean to have its own customisable UI system and having lots of interactivity is useful and feasible.</p>",
        "id": 196786037,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588864771
    },
    {
        "content": "<p>As you can see, there's a lot of enthusiasm here for this. Definitely reach out if you want a hand!</p>",
        "id": 196786689,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588864997
    },
    {
        "content": "<p>Great!</p>",
        "id": 196788613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588865713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/widget/near/196769983\" title=\"#narrow/stream/113488-general/topic/widget/near/196769983\">said</a>:</p>\n<blockquote>\n<p>Now this is really neat!  Can you also make it work without the <code>[widget_tactic]</code>?</p>\n</blockquote>\n<p>done</p>",
        "id": 196789379,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588866011
    },
    {
        "content": "<p>This is super nice!</p>",
        "id": 196789615,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588866105
    },
    {
        "content": "<p>One thing that I'd like some type-theory advice on is whether it is possible to write the definitions of <code>html a</code> and <code>component p a</code> without having to use C++ implementations. When I tried to do it all in Lean, I couldn't get the universes to work correctly. Namely, I want to make the following definitions:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">html</span> <span class=\"o\">(</span><span class=\"n\">Action</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_element</span> <span class=\"o\">:</span> <span class=\"n\">element</span> <span class=\"n\">Action</span> <span class=\"bp\">→</span> <span class=\"n\">html</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_string</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">html</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_component</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">Props</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Props</span> <span class=\"bp\">→</span> <span class=\"n\">component</span> <span class=\"n\">Props</span> <span class=\"n\">Action</span> <span class=\"bp\">→</span> <span class=\"n\">html</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">html</span><span class=\"bp\">.</span><span class=\"n\">element</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">attributes</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">html</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">component</span> <span class=\"o\">(</span><span class=\"n\">Props</span> <span class=\"n\">Action</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">InnerAction</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">Props</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"o\">:</span> <span class=\"n\">Props</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">InnerAction</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">×</span> <span class=\"n\">option</span> <span class=\"n\">Action</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">view</span> <span class=\"o\">:</span> <span class=\"n\">Props</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">html</span> <span class=\"n\">InnerAction</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Even accounting for the mutual induction issues, I still have problems because <code>of_component</code> takes a type argument which causes the universe level to increment.</p>",
        "id": 196791099,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588866765
    },
    {
        "content": "<p>I could use this today...  You can click on an coercion and it tells you what types it coerces between.  In some cases the selection behaves a bit weird, I guess this is a bug:<br>\n<a href=\"/user_uploads/3121/7HEjsH_vKAjNhw6wvHPC_3V6/widget_address_bug.png\" title=\"widget_address_bug.png\">widget_address_bug.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7HEjsH_vKAjNhw6wvHPC_3V6/widget_address_bug.png\" title=\"widget_address_bug.png\"><img src=\"/user_uploads/3121/7HEjsH_vKAjNhw6wvHPC_3V6/widget_address_bug.png\"></a></div>",
        "id": 196791115,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588866776
    },
    {
        "content": "<p>hmm yes the logic for when to show and unshow tooltips is still a bit rough</p>",
        "id": 196791195,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588866820
    },
    {
        "content": "<p>but if you click on the expression that made the tooltip it should vanish</p>",
        "id": 196791223,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588866835
    },
    {
        "content": "<p>You can use <code>meta inductive</code>, this disables all checks for universes.</p>",
        "id": 196791228,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588866837
    },
    {
        "content": "<p>That's the problem, it always selects both subterms at once.</p>",
        "id": 196791303,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588866853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/widget/near/196791303\" title=\"#narrow/stream/113488-general/topic/widget/near/196791303\">said</a>:</p>\n<blockquote>\n<p>That's the problem, it always selects both subterms at once.</p>\n</blockquote>\n<p>wow that is wierd</p>",
        "id": 196791356,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588866874
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 196791463,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588866920
    },
    {
        "content": "<p>ah yes I think that's because I didn't get round to implementing properly how coercion expressions are addressed when it does a structural pp</p>",
        "id": 196791489,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588866932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/widget/near/196791228\" title=\"#narrow/stream/113488-general/topic/widget/near/196791228\">said</a>:</p>\n<blockquote>\n<p>You can use <code>meta inductive</code>, this disables all checks for universes.</p>\n</blockquote>\n<p>hmm when I tried this it was still doing universe checks i'll have another go</p>",
        "id": 196791793,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1588867040
    },
    {
        "content": "<p>Oh, then I remembered this incorrectly.  We only skip the positivity check for meta inductives, but not universes.  We can remove that check as well if it makes your life easier.</p>",
        "id": 196793282,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588867608
    }
]