[
    {
        "content": "<p>Is there something evil about the instances <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.elemental_algebra.comm_ring\">docs#algebra.elemental_algebra.comm_ring</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/elemental_star_algebra.comm_semiring\">docs#elemental_star_algebra.comm_semiring</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/elemental_star_algebra.comm_ring\">docs#elemental_star_algebra.comm_ring</a>, like maybe because they are declared using a reducible def?</p>\n<p>Reason I ask: I'm trying to fix the timeout in <a href=\"https://github.com/leanprover-community/mathlib/pull/17164\">#17164</a> and I traced it to these instances (which weren't imported before where the timeout occurs, but are now). Easiest way to reproduce the timeout: On master, add <code>import topology.algebra.star_subalgebra</code> to <code>number_theory.modular_forms.slash_actions</code>. If you deinstance the aforementioned declarations locally then the timeout disappears.</p>",
        "id": 336358119,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677192712
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.comm_ring_topological_closure\">docs#subalgebra.comm_ring_topological_closure</a> already ported?</p>",
        "id": 336358757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677192977
    },
    {
        "content": "<p>No. Why?</p>",
        "id": 336358837,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677193016
    },
    {
        "content": "<p>Sorry, I though I was looking at a porting stream, ignore that comment</p>",
        "id": 336358901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677193050
    },
    {
        "content": "<p>Does adding <code>mul := (*)</code> etc to <code>subalgebra.comm_ring_topological_closure</code> help?</p>",
        "id": 336358999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677193088
    },
    {
        "content": "<p>No.</p>",
        "id": 336359432,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677193259
    },
    {
        "content": "<p>Hmmm, it doesn't timeout here (with or without the <code>mul</code>) but instead gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">increased</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">visualized</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"n\">trace.class_instances'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>almost immediately, which makes me feel like it's looping or something.</p>",
        "id": 336359652,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677193341
    },
    {
        "content": "<p>Those three instances look completely fine to me. The assumptions are all type-classes on <code>R</code> and <code>A</code>, both of which occur in the conclusion.<br>\nWhat is declared using a reducible def?</p>",
        "id": 336424767,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677228916
    },
    {
        "content": "<p>It is probably looping, you can try <code>set_option trace.class_instances true</code> and looking at all of the instances in the loop (look at the <code>[nn]</code> numbers to see how deep you are in the loop.</p>",
        "id": 336425053,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677228992
    },
    {
        "content": "<p>Huh, I don't entirely understand the issue, but removing the local notation <code>↑ₘ</code> on <code>γ</code> here solves the problem. This local notation has some holes, so perhaps it's sending Lean down the wrong path somehow. (I think because it needs to find a chain of several coercions). <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> : since you authored the file, do you have any obejctions if I replace <code>↑ₘγ</code> with just <code>γ</code> here (assuming everything later works fine)?</p>",
        "id": 336492242,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677247853
    },
    {
        "content": "<p>And Floris, I didn't see any clear looping (although instance search did go deep into over a thousand metavariables), but it seemed to be spending all it's time looking for coercions, consistent with the above.</p>",
        "id": 336492854,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677247998
    },
    {
        "content": "<p>Oh I have no problem changing it if its helps (and doesnt break anything). This notation is also used in <code>...number_theory.modular</code> and <code>...matrix.special_linear_group</code>.  But I'm guessing there are no issues there.</p>",
        "id": 336493588,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1677248177
    },
    {
        "content": "<p>Is thisthe matrix coe notation?</p>",
        "id": 336497866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677249179
    },
    {
        "content": "<p>The problem is that if you write <code>g 0 1</code> you get <code>⇑g 0 1</code> which isn't simp-normal</p>",
        "id": 336498184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677249259
    },
    {
        "content": "<p>But the only way to get the simp-normal <code>↑g 0 1</code> is with painful annotations</p>",
        "id": 336498465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677249315
    },
    {
        "content": "<p>Making <code>matrix</code> a structure would solve this</p>",
        "id": 336498511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677249325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> : given the simp normal form issue Eric raised, how do you feel about an additional local notation <code>↑ₘ[R]</code> that allows you to specify the ring <code>R</code>? This seems to also solve the issue. I'll leave the <code>↑ₘ</code> notation where it works and add a note where <code>↑ₘ[R]</code> is declared stating that it exists to help Lean elaborate in certain contexts.</p>",
        "id": 336507628,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677251396
    },
    {
        "content": "<p>Oh yeah thats better! It really is just a convenience since we dont want to keep writing <code>(M : matrix n n R)</code> or something, but I didn't know it would cause issues, so I'm for any change that fixes this.</p>",
        "id": 336508295,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1677251529
    }
]