[
    {
        "content": "<p>While porting, we are discovering that several multiplicative statements are being mapped to the same additive statement.<br>\nI don't know how to modify <code>to_additive</code>, but I think it should error when a decl already exists.<br>\nAnd then we pass a <code>+force</code> flag to make it shut up, so that the following still works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">some_mul_thing</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span> <span class=\"o\">:=</span> <span class=\"n\">baz</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">some_add_thing</span> <span class=\"o\">:</span> <span class=\"n\">fooquux</span> <span class=\"o\">:=</span> <span class=\"n\">bumsdings</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"bp\">+</span><span class=\"n\">force</span> <span class=\"n\">some_add_thing</span><span class=\"o\">]</span> <span class=\"n\">some_mul_thing</span>\n</code></pre></div>",
        "id": 323296741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674577678
    },
    {
        "content": "<p>Maybe something more self-explanatory e.g. <code>[to_additive as_existing some_add_thing]</code></p>",
        "id": 323299538,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674578365
    },
    {
        "content": "<p>Additivizing a declaration to an additive declaration that already exists is quite common: sometimes <code>@[to_additive]</code> is not good enough to translate the declaration automatically (this happens basically with all lemmas that involve powers that should be translated to <code>smul</code>).</p>\n<p>In rare cases it's even useful to have multiple multiplicative declarations that map to the same additive declaration (so one of the <code>to_additive</code> calls will then refer to an existing declaration. I responded in <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20align.20failures/near/323303372\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/to_additive.20align.20failures/near/323303372</a> why this is sometimes useful. </p>\n<p>I agree that it might be good to have a syntax for the cases where the additive declaration already exists. I think this can be a Lean 4-only thing? It's easy to implement if we decide on a syntax.</p>",
        "id": 323313984,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674582232
    },
    {
        "content": "<p>(I actually want to implement something similar for <code>simps</code> where in some cases it will run in \"expensive mode\", which can be slow in certain cases. I want to add a token like <code>simps!</code> that runs in expensive mode.)</p>",
        "id": 323314131,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674582268
    },
    {
        "content": "<p><code>to_additive!</code>?</p>",
        "id": 323314796,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1674582461
    },
    {
        "content": "<p><code>to_additive!</code> used to have another meaning that nobody ever used and wasn't very useful (it was to disable the heuristics, but they turn out to be pretty good - <a href=\"https://github.com/leanprover-community/mathlib4/pull/1504\">!4#1504</a>). So <code>to_additive!</code> is available. However, <code>!</code> tends to mean \"try harder\", which isn't really the case here. I think I'll do <code>to_additive existing</code>, unless someone has a better suggestion.</p>",
        "id": 324015991,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674816328
    },
    {
        "content": "<p>(Duplicated message deleted)</p>",
        "id": 324015993,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674816328
    },
    {
        "content": "<p>Implemented in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1881\">!4#1881</a> (see last commit, everything else is from the dependencies)</p>",
        "id": 324024898,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674819054
    }
]