[
    {
        "content": "<p>In NNG I sometimes have the following tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>and I want to turn it into this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>(here a,b,c,d are fake naturals, if this matters). The first instance of this has <a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/Algorithm/level/7\">just gone live</a> in \"Algorithm world\", but I realise now that I'm not happy with my solution. I introduce the tactic <code>have</code> to do this, and I don't really want to introduce that tactic there, I would rather introduce it in a more \"core\" world like advanced multiplication world rather than in a world which is kind of \"optional\" like algorithm world (a new world, which I'd be very happy to have feedback on). </p>\n<p>One approach is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">mt</span> <span class=\"n\">_</span> <span class=\"n\">h1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span>\n  <span class=\"c1\">-- clear h1</span>\n</code></pre></div>\n<p>but I'm wondering if we already have some more high-powered tactic which does this for me. I would far rather teach high-powered tactics which do things which mathematicians find comprehensible like the transformation above (\"prove the contrapositive\"), than weird tactics like <code>apply</code> which do maths backwards and confuse mathematicians no end. Does anyone have any suggestions?</p>",
        "id": 399055245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698502680
    },
    {
        "content": "<p>Isn't <code>contrapose</code> exactly what you're looking for?</p>",
        "id": 399055495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698502878
    },
    {
        "content": "<p>contrapose adds negations</p>",
        "id": 399055636,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698502973
    },
    {
        "content": "<p>Aah -- no -- but <code>contrapose!</code> is! Thanks!</p>",
        "id": 399055642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698502976
    },
    {
        "content": "<p>I'm sure no one cares, but <code>contrapose!</code> uses choice for no reason</p>",
        "id": 399056427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698503514
    },
    {
        "content": "<p>It performs double negatoin elimination doesn't it? Which in turn is probably using LEM which probably uses choice (Diaconescu)</p>",
        "id": 399056499,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698503558
    },
    {
        "content": "<p>In the context of NNG I definitely don't care :-)</p>",
        "id": 399056534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698503601
    },
    {
        "content": "<p>That is true, but since equality on natural numbers is decidable, it should be able to go without it</p>",
        "id": 399106293,
        "sender_full_name": "Chris Wong",
        "timestamp": 1698546965
    },
    {
        "content": "<p>Yes but that would be a completely irrelevant red herring in this context</p>",
        "id": 399113088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698553303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/113488-general/topic/tactic.20for.20modus.20tollens/near/399106293\">said</a>:</p>\n<blockquote>\n<p>That is true, but since equality on natural numbers is decidable, it should be able to go without it</p>\n</blockquote>\n<p>This is beside the point. (EDIT : contrapose! <del>contrapose</del>)  calls push_neg which applies logic lemmas to push negations and eliminate double negations. It doesn't care whether the propositions are decidable or not and how to handle negations in that case. I can't imagine that it would be trivial to extend push_neg to do all that.</p>",
        "id": 399147075,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698581153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/tactic.20for.20modus.20tollens/near/399056427\">said</a>:</p>\n<blockquote>\n<p>I'm sure no one cares, but <code>contrapose!</code> uses choice for no reason</p>\n</blockquote>\n<p>I read your comment as \"uses choice as opposed to <code>contrapose</code>\", but <code>contrapose</code> already uses choice in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mtr</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"n\">by_contra</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h'</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399147502,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698581436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/tactic.20for.20modus.20tollens/near/399147075\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/113488-general/topic/tactic.20for.20modus.20tollens/near/399106293\">said</a>:</p>\n<blockquote>\n<p>That is true, but since equality on natural numbers is decidable, it should be able to go without it</p>\n</blockquote>\n<p>This is beside the point. contrapose calls push_neg which applies logic lemmas to push negations and eliminate double negations. It doesn't care whether the propositions are decidable or not and how to handle negations in that case. I can't imagine that it would be trivial to extend push_neg to do all that.</p>\n</blockquote>\n<p>only <code>contrapose!</code> calls <code>push_neg</code></p>",
        "id": 399147516,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698581455
    },
    {
        "content": "<p>Yeah I was talking about <code>contrapose!</code>. See the first few lines of <a href=\"https://github.com/leanprover-community/mathlib4/blob/a988ad9300897ae7de89811e768a0b09555e6488/Mathlib/Tactic/PushNeg.lean#L21\">push_neg</a> which adds a bunch of theorems used by push_neg which is used by <code>transformNegationStep </code> :</p>",
        "id": 399147648,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698581551
    },
    {
        "content": "<p>My comment is \"if people cared, there could be a version of contrapose that sees <code> ¬p → ¬q</code>, and uses <code>mt</code> instead of choice\"</p>",
        "id": 399167009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698595782
    },
    {
        "content": "<p>We already have this behavior in <code>by_contra</code></p>",
        "id": 399167075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698595830
    }
]