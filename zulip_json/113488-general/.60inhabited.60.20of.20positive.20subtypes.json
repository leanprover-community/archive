[
    {
        "content": "<p>It looks like mathlib doesn't have <code>inhabited {x : α // 0 &lt; x}</code> instances. Those that have the classes for <code>zero_lt_one</code> should be able to use 1 as the default instead (as <code>⟨1, zero_lt_one⟩</code>?). Is there any particular reason not to do this?</p>",
        "id": 373807377,
        "sender_full_name": "Naruyoko",
        "timestamp": 1688952948
    },
    {
        "content": "<p>Why do you want <code>inhabited</code>, not <code>nonempty</code>?</p>",
        "id": 373809863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688954269
    },
    {
        "content": "<p>It's because I'm getting an error getting the <code>head</code> of a <code>list {x : ℕ // 0 &lt; x}</code> because there's no <code>inhabited {x : ℕ // 0 &lt; x}</code>, and though I do put <code>1 ≤ length</code> in the hypothesis, <code>list.head</code> requires an <code>inhabited</code> instance anyways.</p>",
        "id": 373815793,
        "sender_full_name": "Naruyoko",
        "timestamp": 1688957366
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat\">docs3#pnat</a></p>",
        "id": 373816932,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688957926
    },
    {
        "content": "<p>Or switch to Lean 4 and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.headD#doc\">docs#List.headD</a></p>",
        "id": 373817110,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688958036
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.head#doc\">docs#List.head</a></p>",
        "id": 373817225,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688958112
    },
    {
        "content": "<p>I don't think there would be much wrong with using such an inhabited instance locally (inside a proof). But the reason we don't have such instances in mathlib (e.g. inhabited from has one) is that they cause conflicts when a type for instance has both a zero and a one. So they don't make good global instances.</p>",
        "id": 373832209,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688966175
    },
    {
        "content": "<p>But <code>{x // 0 &lt; x}</code> probably has no other nice candidate for <code>inhabited</code>.</p>",
        "id": 373832320,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688966229
    },
    {
        "content": "<p>For nat I agree, I was thinking of the more general question</p>",
        "id": 373840083,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688969460
    },
    {
        "content": "<p>Thanks for info about <code>pnat</code></p>",
        "id": 373845984,
        "sender_full_name": "Naruyoko",
        "timestamp": 1688971417
    }
]