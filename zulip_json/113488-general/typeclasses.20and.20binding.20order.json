[
    {
        "content": "<p>Supposing I have different instances of a type class, how do I tell Lean to always try matching one before the other?</p>",
        "id": 339457156,
        "sender_full_name": "Dean Young",
        "timestamp": 1677883014
    },
    {
        "content": "<p>In Lean 4 (maybe in Lean 3 as well) you can define <code>(priority := low/high)</code></p>",
        "id": 339457369,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677883118
    },
    {
        "content": "<p>can you link me to an example?</p>",
        "id": 339457628,
        "sender_full_name": "Dean Young",
        "timestamp": 1677883224
    },
    {
        "content": "<p>From <code>Init/SizeOf.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SizeOf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">sizeOf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">SizeOf</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">default.sizeOf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">sizeOf</span> <span class=\"o\">:=</span> <span class=\"n\">default.sizeOf</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 339457790,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677883304
    },
    {
        "content": "<p>This is generally not a good way to use typeclasses. Mathlib tends to use <code>priority</code> as a form of optimization, not to actually change behavior</p>",
        "id": 339457954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677883377
    },
    {
        "content": "<p>ok I'll keep the binding order to the notation then</p>",
        "id": 339748883,
        "sender_full_name": "Dean Young",
        "timestamp": 1678053665
    }
]