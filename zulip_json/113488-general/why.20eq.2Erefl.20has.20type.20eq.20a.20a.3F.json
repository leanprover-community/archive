[
    {
        "content": "<p>In <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductive-families\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductive-families</a>, the <code>eq</code> inductive family is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I don’t understand why <code>eq.refl</code> has type <code>eq a a</code>. Isn’t it just <code>eq a</code>?</p>",
        "id": 358986861,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1684330893
    },
    {
        "content": "<p>The second <code>a</code> is the one before the colon in the first line. You don't write it on the second line because it's automatically inserted <em>whilst making the definition</em>, but <code>#check eq.refl</code> shows you it's there.</p>",
        "id": 358988523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684331278
    },
    {
        "content": "<p>I also remember being totally confused by this at exactly the same point :-)</p>",
        "id": 358988718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684331321
    },
    {
        "content": "<p>yeah. Quite confusing in a first look. It seems the first <code>a</code> is the one appeared in first line</p>",
        "id": 358989949,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1684331605
    },
    {
        "content": "<p>If I change it to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I get <code>eq a b a</code>. Knowing this rule it makes sense now</p>",
        "id": 358990494,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1684331734
    },
    {
        "content": "<p>I <em>think</em> it changed in Lean 4 so be careful out there :-)</p>",
        "id": 358990939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684331833
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html</a> Ah indeed, it changed to <code>Eq a a</code></p>",
        "id": 358992009,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1684332068
    }
]