[
    {
        "content": "<p>Thinking about this a bit more, I'd recommend you replace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this lets you write `{x : proj_plane_div_config P L} (x : c)`</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe_sort</span> <span class=\"o\">:=</span> <span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338365318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677513365
    },
    {
        "content": "<p>Then to define addition you should fill in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338365665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677513443
    },
    {
        "content": "<p>That's throwing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 338367092,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677513749
    },
    {
        "content": "<p>Well, that tells you there's an argument missing; so try adding a <code>_</code></p>",
        "id": 338368737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677514131
    },
    {
        "content": "<p>If you get the error message that ends with <code>term has type</code> <code>Y → Z</code> at <code>foo x</code>, usually that means you should have written <code>foo x y</code>. That's a super important error message to know how to read.</p>",
        "id": 338369067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677514212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane/near/338365318\">said</a>:</p>\n<blockquote>\n<p>Thinking about this a bit more, I'd recommend you replace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the_div_ring</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>with</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this lets you write `{x : proj_plane_div_config P L} (x : c)`</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe_sort</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This feels deeply strange to me.</p>",
        "id": 338371519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677514762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>: The config is meaningless besides defining the division ring, isn't it? Why is this different to how we handle <code>subgroup</code> in mathlib (which presumably you do not regard as strange)?</p>",
        "id": 338371857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677514833
    },
    {
        "content": "<p>This is more like you define a <code>has_coe_to_sort</code> on <code>n : nat</code> that returns <code>zmod n</code>.</p>",
        "id": 338372099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677514882
    },
    {
        "content": "<p>A subgroup is a subgroup and a subgroup has elements that are the members of the subgroup--that seems obvious.</p>",
        "id": 338372197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677514905
    },
    {
        "content": "<p>Does <code>proj_plane_div_config P L</code> have any use besides creating this division ring?</p>",
        "id": 338372234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677514913
    },
    {
        "content": "<p>I mean it is just some data of fixing some points that aren't badly chosen</p>",
        "id": 338372352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677514928
    },
    {
        "content": "<p>Because certainly <code>nat</code> has uses besides creating <code>zmod n</code></p>",
        "id": 338372353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677514928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane/near/338372352\">said</a>:</p>\n<blockquote>\n<p>I mean it is just some data of fixing some points that aren't badly chosen</p>\n</blockquote>\n<p>A subgroup is just some data fixing a set of values that are well chosen</p>",
        "id": 338372708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677515010
    },
    {
        "content": "<p>No, this is absurd but I don't know how to explain why.</p>",
        "id": 338372764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677515023
    },
    {
        "content": "<p>Maybe you can figure it out.</p>",
        "id": 338372836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677515041
    },
    {
        "content": "<p>Would defining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proj_plane_div_config.carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">proj_plane_div_config</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe_sort</span> <span class=\"o\">:=</span>  <span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c.carrier</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>feel less absurd to you? That's the connection to <code>subgroup</code> I'm trying to make</p>",
        "id": 338373190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677515128
    },
    {
        "content": "<p>It cannot be called \"carrier\"</p>",
        "id": 338373513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677515204
    },
    {
        "content": "<p>Is it the fact that we're putting a <code>+</code> on <code>c.carrier</code> that is independent of the <code>+</code> that might exist on the underlying <code>P</code> that makes you uneasy?</p>",
        "id": 338373796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677515270
    },
    {
        "content": "<p>Again it is just like defining <code>nat.carrier</code></p>",
        "id": 338373907,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677515290
    },
    {
        "content": "<p>That's not what the word means</p>",
        "id": 338373956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677515303
    },
    {
        "content": "<p>Let me try and justify it from another direction. I claim this is reasonable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proj_plane_div</span> <span class=\"o\">[</span><span class=\"n\">configuration.is_desarguesian</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"n\">ha₁a₂</span> <span class=\"n\">hnoncol</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so using <code>coe_sort</code> is just a syntactic grouping for convenience, to avoid passing around 6 arguments</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">proj_plane_div</span> <span class=\"o\">[</span><span class=\"n\">configuration.is_desarguesian</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hnoncol</span> <span class=\"o\">:</span> <span class=\"n\">four_points_no_three_collinear</span> <span class=\"n\">L</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">c₁₃</span> <span class=\"n\">c₂₃</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">proj_plane_div</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe_sort</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">//</span>  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">c.ha₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c.a₂</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">proj_plane_div</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 338374532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677515432
    },
    {
        "content": "<p>What's a proj plane div?</p>",
        "id": 338375254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677515596
    },
    {
        "content": "<p>The name has no connection to the definition. And two of the points are not even used.</p>",
        "id": 338375567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677515671
    },
    {
        "content": "<p>I'm afraid I have no idea what the \"real\" names for the things that <span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span> is talking about here are</p>",
        "id": 338376038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677515794
    },
    {
        "content": "<p>I assume by \"real\" you mean \"conventional\" <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 338376426,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677515891
    },
    {
        "content": "<p>The sources I've seen do not give it a name. But I don't have much experience in the field.</p>",
        "id": 338376789,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677515991
    },
    {
        "content": "<p>Need/should I clarify the definition of the division ring that's associated to any desarguesian projective plane?</p>",
        "id": 338388829,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677516050
    },
    {
        "content": "<p>The math is something like this. We have our favorite projective plane and we fix some points on it. We are going to give a division ring on the line through two of the points (with one of them removed). We need the other two points to define (most of) the ring operations.</p>",
        "id": 338388964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677516081
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/projective+plane#equivalence_of_synthetic_and_analytic\">https://ncatlab.org/nlab/show/projective+plane#equivalence_of_synthetic_and_analytic</a> suggests the <code>structure</code> be called \"scalar\"</p>",
        "id": 338389019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677516098
    },
    {
        "content": "<p>The choice of some points is not a ring, it's a choice of some points.</p>",
        "id": 338389085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677516110
    },
    {
        "content": "<p>I think the thing you linked to is not exactly the approach that Quinn is taking</p>",
        "id": 338389333,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677516162
    },
    {
        "content": "<p>Indeed, I can't find a reference that matches Quinn's approach because I don't know what to search for!</p>",
        "id": 338389525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677516205
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/TU0ew2joJYrBSlfqtR5G602L/ftpg.pdf\">ftpg.pdf</a></p>",
        "id": 338389940,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1677516299
    },
    {
        "content": "<p>35 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane.3A.20has_coe_to.2E.2E.2E\">#general &gt; Structure defined for Desarguesian proj plane: has_coe_to...</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 338613219,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677597279
    },
    {
        "content": "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane.3A.20has_coe_to.2E.2E.2E\">#general &gt; Structure defined for Desarguesian proj plane: has_coe_to...</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 338613291,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677597297
    },
    {
        "content": "<p>3 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane\">#general &gt; Structure defined for Desarguesian proj plane</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 338613292,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677597297
    }
]