[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">map₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">mapEq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">r.r</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">map₀</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">map₀</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Quotient</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How to fill in this \"sorry\"?<br>\nI think use of Choice can be avoided because of finiteness of <code>Fin n</code>.</p>",
        "id": 398295108,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1698155927
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Quotient.lift\">these results</a>?</p>",
        "id": 398296617,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698156374
    },
    {
        "content": "<p>Do you mean I should do induction on <code>n</code>?</p>",
        "id": 398298817,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1698157130
    },
    {
        "content": "<p>Or does it hold if <code>Fin n</code> is replaced by any <code>X</code>?</p>",
        "id": 398299976,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1698157474
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5576\">#5576</a> ?</p>",
        "id": 398301562,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1698157955
    },
    {
        "content": "<p>No, the \"induction\" that you see there is not the \"natural induction\" you might be used to. It rather refers to an \"induction\" used to define a function <em>out</em> of a certain type. The point here is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.lift#doc\">docs#Quotient.lift</a> allows yo to define a function on a quotient if you know that it sends congruent elements to the same image. You can upgrade your <code>r</code> to an equivalence relation on <code>Fin n -&gt; A</code> and then apply this result.</p>",
        "id": 398303455,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698158536
    },
    {
        "content": "<p>Thank you and I can fill it now.</p>",
        "id": 398308846,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1698160211
    }
]