[
    {
        "content": "<p>I have several questions regarding the external object:</p>\n<ol>\n<li>where should I register for an external class? via an <code>#[init]</code> routine?</li>\n<li>once an external object is returned from FFI, what type should I use to represent its handle inside lean?</li>\n</ol>\n<p>For example, I want to have an external object representing aligned byte array:</p>\n<p><a href=\"/user_uploads/3121/elXRHus2Xibbtlxq2fJy5J27/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/elXRHus2Xibbtlxq2fJy5J27/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/elXRHus2Xibbtlxq2fJy5J27/image.png\"></a></div>",
        "id": 383414778,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691614166
    },
    {
        "content": "<p>You define an opaque type on lean level, have a look at this <a href=\"https://github.com/leanprover/lean4/blob/2aeeed13cf3dcfb71ae4ceca801956a8540195f7/tests/compiler/foreign/Main/S.lean\">example</a> which defines a new type <code>S</code>. And <a href=\"https://github.com/leanprover/lean4/blob/2aeeed13cf3dcfb71ae4ceca801956a8540195f7/tests/compiler/foreign/myfuns.cpp#L5\">here</a> it is defined on C++ level.</p>",
        "id": 383438719,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691626717
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover/lean4/blob/2aeeed13cf3dcfb71ae4ceca801956a8540195f7/tests/compiler/foreign/myfuns.cpp#L22-L27\">these lines</a> show how the external class is initialized.</p>",
        "id": 383438831,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691626790
    },
    {
        "content": "<p>cool, thanks a lot</p>",
        "id": 383963320,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691760637
    },
    {
        "content": "<p>One thing I find interesting is that FBIP actually provides a canonical way to wrap imperative data structures to FP without having too much overhead or introducing ST monad. On each modification, one just check&amp;ensure the exclusivity. As long as the user is using it linearly, it will not incur much overhead.</p>",
        "id": 383964549,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691760823
    },
    {
        "content": "<p>I managed to make a proof of concept implementation of porting rust's hashbrown to lean directly via FFI. <a href=\"https://github.com/SchrodingerZhu/hashbrown4lean/blob/main/src/set.rs#L158\">It seems to work</a>. However, <code>lean.h</code> inlined several non-trivial functions which make the FFI in rust a little bit more harder to write. Is there any suggestion on improving this?</p>",
        "id": 384158749,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691819474
    },
    {
        "content": "<p>There is <a href=\"https://crates.io/crates/lean-sys\">https://crates.io/crates/lean-sys</a> (unofficial)</p>",
        "id": 384182358,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691827500
    },
    {
        "content": "<p>Speaking of which, I have an improved version of that crate and also some beginning work on a proper type-aware lean-FFI crate for rust (unreleased)</p>",
        "id": 384198627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691831564
    },
    {
        "content": "<p>For immutable FFI operations, is it recommended to use <code>@&amp;</code> or to manage the refcount myself? I think they are similar performance-wise?</p>",
        "id": 384301192,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691855504
    },
    {
        "content": "<p><code>@&amp;</code> is better if you don't actually need to consume a reference</p>",
        "id": 384301355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691855562
    },
    {
        "content": "<p>Ok. And, is there a thing of <code>@&amp;</code> inside a closure? <code>lean_apply_X(f, args..)</code> seems to always assume that <code>f</code> will consume <code>args</code>.</p>",
        "id": 384308210,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691857163
    },
    {
        "content": "<p>yes, that's right</p>",
        "id": 384308264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691857193
    },
    {
        "content": "<p>uniform-ABI function calls consume all their arguments</p>",
        "id": 384308328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691857205
    },
    {
        "content": "<p>only extern function calls and non-<code>_boxed</code> functions can use <code>@&amp;</code></p>",
        "id": 384308410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691857238
    },
    {
        "content": "<p>I see. That clarifies things. Thanks a lot!</p>",
        "id": 384308542,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691857279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/384182358\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://crates.io/crates/lean-sys\">https://crates.io/crates/lean-sys</a> (unofficial)</p>\n</blockquote>\n<p>I really appreciate this work but there are some problems with such crate: the unsafe marker is not correct in rust perspective; the build script scans for <code>.so</code> without respecting the OS it runs on. Hope this will help to improve it.</p>",
        "id": 384381917,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691893330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/384381917\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/384182358\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://crates.io/crates/lean-sys\">https://crates.io/crates/lean-sys</a> (unofficial)</p>\n</blockquote>\n<p>I really appreciate this work but there are some problems with such crate: the unsafe marker is not correct in rust perspective; the build script scans for <code>.so</code> without respecting the OS it runs on. Hope this will help to improve it.</p>\n</blockquote>\n<p>Why would the unsafe marker not be okay? Unsafe means memory unsafety in rust and doing an FFI  call is her inherently memory unsafe, especially if it is to C. The entire point of these crates is that someone writes a second crate above it that ensures they are only called safely</p>",
        "id": 384444175,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1691920538
    },
    {
        "content": "<p>sorry for the confusion. I mean there are some functions without <code>unsafe</code> but actually they are <code>unsafe</code>. For example, <code>lean_dec</code> should also be <code>unsafe</code> --  although it checks <code>lean_is_scalar</code>, it is up to the user to make sure the pointer passed in points to either a boxed scalar or a valid <code>lean_object</code>. You can write <code>lean_dec(RANDOM_VALUE as _)</code> in safe rust, and it leads to UB/SEGVFAULT. Therefore, in <code>rust</code>'s perspective, calling such function without care is unsafe  :)</p>",
        "id": 384511025,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691937254
    },
    {
        "content": "<p>The implementation is a little bit strange:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">o</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">lean_is_scalar</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Won't this lead to infinite recursion? I thought it should be <code>lean_inc_ref</code> inside the <code>if</code> body.</p>",
        "id": 384511900,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1691937511
    },
    {
        "content": "<p>I am really looking forward to it. I got some ideas on providing a <code>rust2lean</code> feature that supports easy conversion from rust type to lean functionalities. I think we can also have something like automatically generating FFI files from rust to lean (or the reverse way?) that reduce human errors.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// A wrapper to `lean_object` that holds reference counting.</span>\n<span class=\"c1\">// On clone, it calls `lean_inc`; on drop it calls `lean_dec`;</span>\n<span class=\"c1\">// One can create `LeanObjectRef` from this without increasing refcnt.</span>\n<span class=\"cp\">#[repr(transparent)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">LeanObject</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// A wrapper to `lean_object` that does not hold reference counting.</span>\n<span class=\"c1\">// On clone, it calls `lean_inc`; on drop it does not call `lean_dec`.</span>\n<span class=\"c1\">// One can get a `LeanObject` from this while increasing refcnt.</span>\n<span class=\"cp\">#[repr(transparent)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">LeanObjectRef</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"p\">);</span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ExternalObject</span><span class=\"w\"> </span>: <span class=\"nb\">Clone</span> <span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">LeanObjIter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LeanObjectRef</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">inner_obj_iter</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">LeanObjIter</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">ExternalObjectFactory</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">class</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">lean_extern_class</span>\n<span class=\"w\">  </span><span class=\"n\">_tag</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[repr(transparent)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">RustObject</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">LeanObject</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n\n<span class=\"cp\">#[repr(transparent)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">RustObjectRef</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">LeanObjectRef</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RustObject</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">mutate</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">factory</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ExternalObjectFactory</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">is_exlusive</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_data</span><span class=\"p\">());</span>\n<span class=\"w\">      </span><span class=\"bp\">self</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_obj</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">factory</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_data</span><span class=\"p\">()).</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n<span class=\"w\">      </span><span class=\"c1\">// no need to `lean_inc` inner objects, if user stores `LeanObject`, it is handled automatically.</span>\n<span class=\"w\">      </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">new_obj</span><span class=\"p\">.</span><span class=\"n\">get_data</span><span class=\"p\">());</span>\n<span class=\"w\">      </span><span class=\"n\">new_obj</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ExternalObjectFactory</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">ExternalObject</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">finalize</span><span class=\"p\">(</span><span class=\"n\">obj</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"c1\">// no need to `lean_dec`, if user stores `LeanObject`, it is handled automatically</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foreach</span><span class=\"p\">(</span><span class=\"n\">obj</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">obj</span><span class=\"p\">).</span><span class=\"n\">inner_obj_iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">closure</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">lean_apply_1</span><span class=\"p\">(</span><span class=\"n\">closure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">as_raw</span><span class=\"p\">());</span>\n<span class=\"w\">      </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">class</span>: <span class=\"nc\">lean_register_external_class</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">finalize</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">foreach</span><span class=\"p\">));</span>\n<span class=\"w\">      </span><span class=\"n\">_tag</span>: <span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RustObject</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">RustObject</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">LeanObject</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">lean_alloc_external_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">class</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">))},</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">())</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 384991394,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1692069643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/384182358\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://crates.io/crates/lean-sys\">https://crates.io/crates/lean-sys</a> (unofficial)</p>\n</blockquote>\n<p>not sure if this is maintained anymore (doesnât look like it) but thereâs a really minor typo that makes the entire thing unusable on mac, so if you are to advertise it you may want to advertise a patched version (I made a pr to their repo a week ago, but itâs just a one word change from mac to macos)</p>",
        "id": 385300876,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692142324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/384198627\">said</a>:</p>\n<blockquote>\n<p>Speaking of which, I have an improved version of that crate and also some beginning work on a proper type-aware lean-FFI crate for rust (unreleased)</p>\n</blockquote>\n<p>That sounds awesome! Is the improved version also unreleased, and do you have an approximate timeline for release, if any?</p>",
        "id": 385301027,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692142453
    },
    {
        "content": "<p>well I can put it on github but I'm not going to make any particular promises about it. But I did fix a handful of issues in the original</p>",
        "id": 385301325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692142688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span> Okay, the new lean-sys is available at <a href=\"https://github.com/digama0/lean-sys\">https://github.com/digama0/lean-sys</a> and the (very experimental) work towards a higher level set of bindings is at <a href=\"https://github.com/digama0/lean-rs\">https://github.com/digama0/lean-rs</a></p>",
        "id": 385303982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692144563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span> we should collaborate, it sounds like you are implementing something similar to <code>lean-rs</code>. At least, the object wrapping is straightforward enough, but there is more to be done in a <code>build.rs</code> file to autogenerate Rust types by reading the lean expressions, i.e. a lean version of <code>bindgen</code></p>",
        "id": 385304378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692144799
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! Will take a look</p>",
        "id": 385313468,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692148004
    },
    {
        "content": "<p>speaking of which, it would be great if someone who understands lean linking could take a look at the setup, because I'm currently getting link errors about undefined references to symbols from <code>libstdc++</code></p>",
        "id": 385313716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692148114
    },
    {
        "content": "<p>I did get it to work some weeks ago, but I'm not certain I could export the arrangement off my computer and it seems to have since broken (this was pre-Lake-in-lean4-repo)</p>",
        "id": 385314443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692148386
    },
    {
        "content": "<p>probably not the same thing but I had undefined references to symbols from libstdc++ when I explicitly linked to multiple copies of libLean and libC or something along those lines (it seems just linking to âlibleanshared.dylibâ is enough) (thank you <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>)</p>",
        "id": 385314779,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692148516
    },
    {
        "content": "<p>yes, if you are dynamic linking, but I'm trying to set things up to statically link, same as what <code>lake build</code> does to make an exe</p>",
        "id": 385314983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692148582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  / <span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span> If you do not wish to link <code>leanshared</code>, then you need to link <code>Lean</code>, <code>Init</code>, <code>leancpp</code>, <code>leanrt</code>, and <code>stc++</code> along with other platform libs (take a look at <code>leanc --print-ldflags</code> for an example). <code>leanshared</code> is specifically <a href=\"https://github.com/leanprover/lean4/blob/b328835f4d3a303e61d4e382246d8b8a97052a5f/src/stdlib.make.in#L45-L47\">composed</a> of <code>Init</code>, <code>Lean</code>, <code>leancpp</code>, <code>libleanrt_inital-exec</code>, and <code>stdc++</code> plus the stuff from <a href=\"https://github.com/leanprover/lean4/blob/master/src/bin/leanc.in\">leanc.sh</a></p>",
        "id": 385316221,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692149035
    },
    {
        "content": "<p>Ah I tried to figure out the static linking for the same reason but for everything I added I got more undefined symbols so I eventually gave up. Iâll give it another shot after looking at that though</p>",
        "id": 385316632,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692149180
    },
    {
        "content": "<p>here's the relevant <a href=\"http://build.rs\">build.rs</a> code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"cargo:rustc-link-search={}/lib/lean\"</span><span class=\"o\">,</span> <span class=\"n\">lean_dir.display</span><span class=\"o\">())</span><span class=\"bp\">;</span>\n        <span class=\"n\">for</span> <span class=\"n\">libs</span> <span class=\"k\">in</span> <span class=\"o\">[[</span><span class=\"s2\">\"Lean\"</span><span class=\"o\">,</span> <span class=\"s2\">\"leancpp\"</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"s2\">\"Init\"</span><span class=\"o\">,</span> <span class=\"s2\">\"leanrt\"</span><span class=\"o\">]]</span> <span class=\"o\">{</span>\n            <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"cargo:rustc-link-arg=-Wl,--start-group\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n            <span class=\"n\">for</span> <span class=\"n\">lib</span> <span class=\"k\">in</span> <span class=\"n\">libs</span> <span class=\"o\">{</span>\n                <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"cargo:rustc-link-lib=static={lib}\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"cargo:rustc-link-arg=-Wl,--end-group\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"cargo:rustc-link-lib=static=Lake\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n        <span class=\"n\">for</span> <span class=\"n\">lib</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"s2\">\"stdc++\"</span><span class=\"o\">,</span> <span class=\"s2\">\"m\"</span><span class=\"o\">,</span> <span class=\"s2\">\"dl\"</span><span class=\"o\">,</span> <span class=\"s2\">\"gmp\"</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n            <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"s2\">\"cargo:rustc-link-lib=dylib={lib}\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n        <span class=\"o\">}</span>\n</code></pre></div>\n<p>AFAICT this is a reasonable translation of what I can see on the result of <code>LEAN_CC=echo lake build</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-05/include</span>\n<span class=\"bp\">-</span><span class=\"n\">fstack</span><span class=\"bp\">-</span><span class=\"n\">clash</span><span class=\"bp\">-</span><span class=\"n\">protection</span>\n<span class=\"bp\">-</span><span class=\"n\">fPIC</span>\n<span class=\"bp\">-</span><span class=\"n\">fvisibility</span><span class=\"bp\">=</span><span class=\"n\">hidden</span>\n<span class=\"bp\">-</span><span class=\"n\">c</span>\n<span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Test.o</span>\n<span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Test.c</span>\n<span class=\"bp\">-</span><span class=\"n\">O3</span>\n<span class=\"bp\">-</span><span class=\"n\">DNDEBUG</span>\n<span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-05/lib/lean</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--start-group</span>\n<span class=\"bp\">-</span><span class=\"n\">lleancpp</span>\n<span class=\"bp\">-</span><span class=\"n\">lLean</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--end-group</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--start-group</span>\n<span class=\"bp\">-</span><span class=\"n\">lInit</span>\n<span class=\"bp\">-</span><span class=\"n\">lleanrt</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--end-group</span>\n<span class=\"bp\">-</span><span class=\"n\">lLake</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"n\">Bstatic</span>\n<span class=\"bp\">-</span><span class=\"n\">lc</span><span class=\"bp\">++</span>\n<span class=\"bp\">-</span><span class=\"n\">lc</span><span class=\"bp\">++</span><span class=\"n\">abi</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"n\">Bdynamic</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--as-needed</span>\n<span class=\"bp\">-</span><span class=\"n\">lgmp</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--no-as-needed</span>\n<span class=\"bp\">-</span><span class=\"n\">lm</span>\n<span class=\"bp\">-</span><span class=\"n\">ldl</span>\n<span class=\"bp\">-</span><span class=\"n\">pthread</span>\n<span class=\"bp\">-</span><span class=\"n\">Wno</span><span class=\"bp\">-</span><span class=\"n\">unused</span><span class=\"bp\">-</span><span class=\"n\">command</span><span class=\"bp\">-</span><span class=\"n\">line</span><span class=\"bp\">-</span><span class=\"n\">argument</span>\n</code></pre></div>",
        "id": 385316769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692149247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>   note that there are number of special <code>LEANC_INTERNAL_LINKER_FLAGS</code> that will not appear there (as they are not included when <code>LEAN_CC</code> is set).</p>",
        "id": 385317169,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692149403
    },
    {
        "content": "<p>actually that doesn't include <code>-Wl,-Bstatic</code>, and the lake invocation includes <code>-lc++</code> and <code>-lc++abi</code> instead of <code>-lstdc++</code></p>",
        "id": 385317217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692149416
    },
    {
        "content": "<p>geez, why do you have to make things so complicated</p>",
        "id": 385317304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692149463
    },
    {
        "content": "<p>this, I guess?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"n\">ROOT</span><span class=\"bp\">/</span><span class=\"n\">lib</span>\n<span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"n\">ROOT</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">glibc</span>\n<span class=\"n\">ROOT</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">glibc</span><span class=\"bp\">/</span><span class=\"n\">libc_nonshared.a</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--as-needed</span>\n<span class=\"bp\">-</span><span class=\"n\">static</span><span class=\"bp\">-</span><span class=\"n\">libgcc</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"n\">Bstatic</span>\n<span class=\"bp\">-</span><span class=\"n\">lgmp</span>\n<span class=\"bp\">-</span><span class=\"n\">lunwind</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"n\">Bdynamic</span>\n<span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--no-as-needed</span>\n<span class=\"bp\">-</span><span class=\"n\">fuse</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"bp\">=</span><span class=\"n\">lld</span>\n</code></pre></div>",
        "id": 385317579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692149567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I should note that I had no control over how <code>leanc</code> works and had a lot of fun encounter this problems myself when working on Lake <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 385317594,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692149572
    },
    {
        "content": "<p>oh I know, I feel your pain</p>",
        "id": 385317630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692149587
    },
    {
        "content": "<p>what even is that <code>ROOT/lib/glibc/libc_nonshared.a</code> argument? It's not a flag</p>",
        "id": 385317934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692149710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> some special libc code for the custom clang build Lean uses I presume</p>",
        "id": 385318072,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692149766
    },
    {
        "content": "<p>I don't think lean uses a custom clang build</p>",
        "id": 385318164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692149814
    },
    {
        "content": "<p>certainly I've never needed to build clang to run stuff in the lean4 repo</p>",
        "id": 385318233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692149841
    },
    {
        "content": "<p>It does: <a href=\"https://github.com/leanprover/lean-llvm\">https://github.com/leanprover/lean-llvm</a></p>",
        "id": 385318252,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692149848
    },
    {
        "content": "<p>The release Lean comes with the custom clang, the source build does not use it.</p>",
        "id": 385318314,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692149880
    },
    {
        "content": "<p><span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> unraveling this is a nightmare</p>",
        "id": 385318643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692150025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> which is why I would suggest linking <code>libleanshared</code>.</p>",
        "id": 385318684,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692150046
    },
    {
        "content": "<p>that's fine, but that's only one setting, the lib is supposed to support both</p>",
        "id": 385318785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692150094
    },
    {
        "content": "<p>also, lean-llvm doesn't have any code changes in it, I think it's just setting build options that ship with LLVM</p>",
        "id": 385318931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692150154
    },
    {
        "content": "<p>I think getting static linking working will require some help from <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>. <span class=\"user-mention\" data-user-id=\"395550\">@Henrik BÃ¶ving</span> might also be able to help given his familiarity with the compilation process (and having to tweak these things to support an LLVM backend).</p>",
        "id": 385319032,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692150198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/385318931\">said</a>:</p>\n<blockquote>\n<p>also, lean-llvm doesn't have any code changes in it, I think it's just setting build options that ship with LLVM</p>\n</blockquote>\n<p><code>lean-llvm</code> is like <code>lean4-nightly</code> -- it hosts the bundled releases for the build generated from the CI. The scripts to build the lean4 releases that use it the are <code>prepare-llvm-*</code> files in the <a href=\"https://github.com/leanprover/lean4/tree/b328835f4d3a303e61d4e382246d8b8a97052a5f/script\">script</a> directory of the lean4 repository.</p>",
        "id": 385319302,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692150328
    },
    {
        "content": "<p>I think that's still true then, I read the <code>LEANC_INTERNAL_LINKER_FLAGS</code> out of that file, but there are no changes to C++ files or CLI parsing in that script</p>",
        "id": 385319916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692150616
    },
    {
        "content": "<p>actually, now I remember why I don't like the <code>libleanshared</code> approach: when you try to build it it works but then you can't easily run it, I want <code>cargo run</code> to just work and it complains about not finding <code>libleanshared.so</code></p>",
        "id": 385320986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692151088
    },
    {
        "content": "<p>TBH I'm not sure how one is even supposed to ship files like that, is the user of the executable supposed to learn this linking stuff and set LD_LIBRARY_PATH correctly every time?</p>",
        "id": 385321156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692151182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Upon further investigation, <code>libc_nonshared</code> is actually just part of glibc. See this <a href=\"https://stackoverflow.com/questions/66701091/what-is-the-purpose-of-libc-nonshared-a\">StackOverflow post</a> about it.</p>",
        "id": 385321163,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692151186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/385321156\">said</a>:</p>\n<blockquote>\n<p>TBH I'm not sure how one is even supposed to ship files like that, is the user of the executable supposed to learn this linking stuff and set LD_LIBRARY_PATH correctly every time?</p>\n</blockquote>\n<p>You are suppose to run the executables with <code>libleanshared</code> in the library path. On Windows, this amounts to sticking the library next to the executable and shipping them together (which is also possible on Linux and macOS).</p>",
        "id": 385321385,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692151270
    },
    {
        "content": "<p>It is worth noting that even the release <code>lean</code> and <code>lake</code> don't run on Windows without a proper library path setup (namely one including the MSYS2 libraries).</p>",
        "id": 385321414,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692151294
    },
    {
        "content": "<p>in this case we can assume the user has a lean installation provided by elan, but it's not on the library path and I don't know how to make it so</p>",
        "id": 385322179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692151610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>lake env</code>?</p>",
        "id": 385322432,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692151702
    },
    {
        "content": "<p><code>lake env cargo run</code> doesn't work because there isn't a <code>lakefile.lean</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 385322481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692151737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I could  potentially get <code>lake env</code> to work without <code>lakefile.lean</code> (i.e., just setting up a Lean environment) if you make an issue for it.</p>",
        "id": 385322921,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692151949
    },
    {
        "content": "<p>In the meantime, you  can give <code>lake env cargo run</code> a try with a bare lakefile (i.e., with just a <code>package</code>).</p>",
        "id": 385323055,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692152024
    },
    {
        "content": "<p>still no dice</p>",
        "id": 385323465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692152212
    },
    {
        "content": "<p>calling <code>lake env target/debug/lean-rs</code> directly also doesn't work</p>",
        "id": 385323527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692152250
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 385323557,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692152278
    },
    {
        "content": "<p><code>target/debug/lean-rs: error while loading shared libraries: libleanshared.so: cannot open shared object file: No such file or directory</code></p>",
        "id": 385323634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692152293
    },
    {
        "content": "<p><code>env LD_LIBRARY_PATH=(lean --print-prefix)/lib/lean target/debug/lean-rs</code> works</p>",
        "id": 385323947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692152479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That sounds like there may be bug in Lake. What does <code>lake env env</code> show?</p>",
        "id": 385324053,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692152536
    },
    {
        "content": "<p>In particular, what is <code>LD_LIBRARY_PATH</code> set to?</p>",
        "id": 385324096,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692152563
    },
    {
        "content": "<p><code>LD_LIBRARY_PATH=./build/lib</code></p>",
        "id": 385324097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692152563
    },
    {
        "content": "<p><code>LEAN_PATH=./build/lib:/home/mario/.elan/toolchains/leanprover--lean4---nightly-2023-08-05/lib/lean</code></p>",
        "id": 385324159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692152594
    },
    {
        "content": "<p>Oh, yeah, I guess Lake does not add the lean libraries to the library path only the package ones.</p>",
        "id": 385324163,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692152597
    },
    {
        "content": "<p>That can be changed as part of <a href=\"https://github.com/leanprover/lake/pull/179\">lake#179</a>.</p>",
        "id": 385324543,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692152791
    },
    {
        "content": "<p>yeah Iâve had to set it manually every time. adding something to the search path in your build script is theoretically supposed to add it to the library path env variable too but that hasnât been working for me; perhaps because of a mac specific configuration in lean-sys? From what I saw in the rust build script docs it sets DYLD_FALLOUT_LIBRARY_PATH and I had to set DYLD_LIBRARY_PATH</p>",
        "id": 385326845,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692154079
    },
    {
        "content": "<p>libc_noshared.a is glibcâs component to provide some special symbols like atexit_XXX. these symbols are not defined in .so</p>",
        "id": 385339741,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1692161927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://github.com/digama0/lean-sys/commit/d9640b6fde9f8a2970667700ec4428b1e25e149f#:~:text=println!(%22cargo%3Arustc%2Dlink%2Dlib%3Dstatic%3DLake%22)%3B\">this line</a> <code>println!(\"cargo:rustc-link-lib=static=Lake\");</code> errors out for me, and I don't see a lake search path in the build script. Perhaps you need to add a search path (although I only see an executable for lake on my device, no compiled lib, so I'm not sure what this is looking for)</p>",
        "id": 385487058,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692199428
    },
    {
        "content": "<p>Lake was moved into the core distribution about a month ago, update your lean nightly to the latest</p>",
        "id": 385499393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692203302
    },
    {
        "content": "<p>ah. thank you</p>",
        "id": 385508780,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692207128
    },
    {
        "content": "<p>Hi everyone! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <br>\nI've recently been playing with the lean4 language using ffi with ziglang.</p>\n<p>However, there's still an issue with the MacOS CI/CD when trying to run reverse-ffi and <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> on Linux .</p>\n<p><strong>src</strong>: <a href=\"https://github.com/kassane/lean4-zig\">https://github.com/kassane/lean4-zig</a></p>\n<p>Although <code>zig translate-c</code> had been used, it needed to manually handle some failures during the alignment of the <code>lean_object</code>, because zig doesn't recognize C bitfields and de-references errors (from: <code>o.*</code> to <code>o.?.*</code> [optional ptr]).</p>\n<p>Is it possible to get a static link from lean4?</p>",
        "id": 387951239,
        "sender_full_name": "Matheus C. FranÃ§a",
        "timestamp": 1693337854
    },
    {
        "content": "<p>I think the build script in the lean-sys repo by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can be helpful when seeking a way to do the static linking. However, I think the duplicated main symbol in libLake.a is not yet addressed yet.</p>",
        "id": 387955306,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693339130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"645084\">@Matheus C. FranÃ§a</span> It looks like the issue is that you are dynamically linking with <code>leanlibshared.dylib</code>. This should work, but you need to pass the path to lean in the <code>DYLD_LIBRARY_PATH</code> when actually running the built executable. If you run the program through <code>lake env</code> it should set this up</p>",
        "id": 388027987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693368910
    },
    {
        "content": "<p>Does lean.h have bitfields? I don't see any bitfield declarations in lean.h</p>",
        "id": 388028049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693368962
    },
    {
        "content": "<p>I thought one of the selling points of zig was that you could just import C headers unmodified, why do you have to translate it to zig?</p>",
        "id": 388028273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693369095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/388028049\">said</a>:</p>\n<blockquote>\n<p>Does lean.h have bitfields? I don't see any bitfield declarations in lean.h</p>\n</blockquote>\n<p><code>lean_object struct</code>: <a href=\"https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/include/lean/lean.h#L112-L117\">https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/include/lean/lean.h#L112-L117</a></p>",
        "id": 388089749,
        "sender_full_name": "Matheus C. FranÃ§a",
        "timestamp": 1693396569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/388028273\">said</a>:</p>\n<blockquote>\n<p>I thought one of the selling points of zig was that you could just import C headers unmodified, why do you have to translate it to zig?</p>\n</blockquote>\n<p><code>zig translate-c</code>|<code>@cImport(@cInclude(\"lean.h\"))</code>, get some errors on atomic (c11) and C bitfields [align(u1)] (<code>*anyopaque</code>== <code>void*</code> align)</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// vendor/lean.h:114:14: warning: struct demoted to opaque type - has bitfield</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"p\">{};</span><span class=\"w\"> </span><span class=\"c1\">// before</span>\n\n<span class=\"c1\">// zig `opaque{}` types not have fields. another problem.</span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?*</span><span class=\"n\">lean_object</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?*</span><span class=\"n\">lean_object</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">u_lean_obj_arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?*</span><span class=\"n\">lean_object</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?*</span><span class=\"n\">lean_object</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">b_lean_obj_res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?*</span><span class=\"n\">lean_object</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>My manual fix:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// manual fix</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"c1\">// align to C ABI != packed struct</span>\n<span class=\"w\">    </span><span class=\"n\">m_rc</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">m_cs_sz</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">m_other</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">m_tag</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 388090300,
        "sender_full_name": "Matheus C. FranÃ§a",
        "timestamp": 1693396799
    },
    {
        "content": "<p>yeah that seems fine</p>",
        "id": 388092805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693397696
    },
    {
        "content": "<p>the other issue I see is the atomics, I can send you a patch later</p>",
        "id": 388092946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693397744
    },
    {
        "content": "<p>Great! I'm available for any suggestions and improvements to the project.<br>\nSince version 0.11.0  is currently in use, I want to test the new zig <a href=\"https://ziglang.org/download/0.11.0/release-notes.html#Package-Management\">package manager</a> (<strong>WiP</strong>) on it too.</p>",
        "id": 388095166,
        "sender_full_name": "Matheus C. FranÃ§a",
        "timestamp": 1693398564
    },
    {
        "content": "<p>Any idea on why I am getting this error now?<br>\n<a href=\"/user_uploads/3121/ppXDsr6leBwSfG93xAnOTgef/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ppXDsr6leBwSfG93xAnOTgef/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ppXDsr6leBwSfG93xAnOTgef/image.png\"></a></div>",
        "id": 389029069,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693847252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/389029069\">said</a>:</p>\n<blockquote>\n<p>Any idea on why I am getting this error now?<br>\n<a href=\"/user_uploads/3121/ppXDsr6leBwSfG93xAnOTgef/image.png\">image.png</a></p>\n</blockquote>\n<p>Can't reproduce this on my local Lean. Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in text form and your lean version?</p>",
        "id": 389029591,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1693847572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik BÃ¶ving</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/389029591\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/113488-general/topic/FFI.20External.20Object/near/389029069\">said</a>:</p>\n<blockquote>\n<p>Any idea on why I am getting this error now?<br>\n<a href=\"/user_uploads/3121/ppXDsr6leBwSfG93xAnOTgef/image.png\">image.png</a></p>\n</blockquote>\n<p>Can't reproduce this on my local Lean. Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in text form and your lean version?</p>\n</blockquote>\n<p>Unfortunately, I just run <code>elan install nightly</code> again (also deleted the toolchain file inside the project) and the problem disappeared.</p>",
        "id": 389029858,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693847684
    }
]