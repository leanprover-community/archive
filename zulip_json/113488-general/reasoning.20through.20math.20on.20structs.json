[
    {
        "content": "<p>I have a struct <code>LinEq</code> that's a simple linear equation. I've defined scalar multiplication and addition for it. In the example at the end of this MWE, the proof gets stuck, as I haven't convinced it to unpack the <code>hMul</code> and <code>hAdd</code> definitions. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ColN</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span>      <span class=\"o\">:</span> <span class=\"n\">ColN</span>          <span class=\"c1\">-- zero, also leading zero</span>\n    <span class=\"bp\">|</span> <span class=\"n\">even_of</span>   <span class=\"o\">:</span> <span class=\"n\">ColN</span> <span class=\"bp\">→</span> <span class=\"n\">ColN</span>   <span class=\"c1\">-- the even number that is twice the previous</span>\n    <span class=\"bp\">|</span> <span class=\"n\">odd_of</span>    <span class=\"o\">:</span> <span class=\"n\">ColN</span> <span class=\"bp\">→</span> <span class=\"n\">ColN</span>   <span class=\"c1\">-- the odd number that is one more than twice the previous</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z10</span> <span class=\"o\">:=</span> <span class=\"n\">ColN.even_of</span> <span class=\"bp\">$</span> <span class=\"n\">ColN.odd_of</span> <span class=\"n\">ColN.zero</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">ColN.eval</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">ℕ</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">cn</span><span class=\"o\">:</span> <span class=\"n\">ColN</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">cn</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColN.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColN.even_of</span> <span class=\"n\">cm</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ColN.eval</span> <span class=\"n\">cm</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ColN.odd_of</span> <span class=\"n\">cm</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ColN.eval</span> <span class=\"n\">cm</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">LinEq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">LinEq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LinEq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b.m</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b.c</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HAdd</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">HAdd</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">LinEq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LinEq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAdd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">b.m</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b.c</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">LinEq</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">z10.eval</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">m₀</span><span class=\"o\">,</span> <span class=\"n\">c₀</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"c1\">-- unpacking here doesn't seem to help</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- this doesn't simplify through the LinEq ops</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 393082730,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695666631
    },
    {
        "content": "<p>The standard thing to do here is write an <code>@[ext]</code> lemma for <code>LinEq</code></p>",
        "id": 393084470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695667303
    },
    {
        "content": "<p>As well as write a <code>simp</code> lemma that says <code>(a * b).m = a * b.m</code></p>",
        "id": 393084573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695667326
    },
    {
        "content": "<p><code>simp</code> only knows the things you teach it, and you didn't teach it what <code>*</code> and <code>+</code> on <code>LinEq</code> mean</p>",
        "id": 393084631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695667342
    },
    {
        "content": "<p>Ah OK - I had assumed that simp could see through instances of things like HMul. Fair enough. I'll write out the lemmas :D</p>",
        "id": 393087598,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695668376
    },
    {
        "content": "<p>You can get lean to generate them for you if you add <code>@[simps]</code> to the <code>instance</code>, but it will generate them with terrible names!</p>",
        "id": 393088451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695668625
    },
    {
        "content": "<p>Thanks. It worked when I added <code>@[simp]</code> directly to the instances. It didn't work when I wrote out theorems for each component <code>m</code>, <code>c</code>, individually, as I don't think that was the right shape. I feel a bit strange pushing entire linear equations through functions that I thought of as taking numbers. Good strange, but strange.</p>",
        "id": 393092913,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695670035
    },
    {
        "content": "<p>Not sure you noticed, but <code>@[simp]</code> and <code>@[simps]</code> do different things.</p>",
        "id": 393093520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695670255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/reasoning.20through.20math.20on.20structs/near/393093520\">said</a>:</p>\n<blockquote>\n<p>Not sure you noticed, but <code>@[simp]</code> and <code>@[simps]</code> do different things.</p>\n</blockquote>\n<p>No, I hadn't! And I don't think I'd noticed they were differently written until you pointed it out. FWIW, tagging the instances with <code>@[simp]</code> works in this case, while <code>@[simps]</code> does not.</p>",
        "id": 393094679,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695670651
    },
    {
        "content": "<p><code>simps</code> should do the right thing in combination with <code>@[ext]</code> on the structure</p>",
        "id": 393095473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695670954
    },
    {
        "content": "<p>(and <code>ext</code> in the proof)</p>",
        "id": 393095487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695670963
    }
]