[
    {
        "content": "<p>In the following code <code>rw </code> commented out next to the sorry generates an error of <code>motive type not correct</code>.  I have read a few of the cases in the chat stream where motive not correct error are reported but couldn't figure out a usable fix. Any thought?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_product_star_self_eq_zero_iff_R_or_C</span>\n    <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix.dotProduct</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span>  <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ker_mulVecLin_conjTranspose_mul_self_R_or_C</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVecLin</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rank_conjTranspose_mul_self_R_or_C</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">A.rank</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rank</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">add_left_injective</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)))</span> <span class=\"n\">_</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n  <span class=\"n\">trans</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">+</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- rw [← ker_mulVecLin_conjTranspose_mul_self_R_or_C] -- motive type is not correct</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.finrank_range_add_finrank_ker</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 379642120,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690580470
    },
    {
        "content": "<p>Note this is just an adaptation of the proof of <a href=\"https://github.com/leanprover-community/mathlib4/blob/e266a1ed2c7099a2b00b0b488cd25022e4c25c05/Mathlib/Data/Matrix/Rank.lean#L200-L208\">rank_conjTranspose_mul_self</a> where the <code>rw</code> is working nicely.</p>",
        "id": 379642500,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690580629
    },
    {
        "content": "<p>I'm not at a computer right now but -- try <code>simp only</code>? Or find a trick with <code>convert</code>?</p>",
        "id": 379647149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690582532
    },
    {
        "content": "<p>This error usually happens when you try to rewrite <code>rw [(h : a = b)]</code> in a goal, where the <strong>type</strong> of some part of the expression depends on <code>a</code>. E.g., in your case <code>finrank K M</code> takes instance-implicit arguments <code>[AddCommGroup M] [Module K M]</code>, so you can't rewrite on <code>(h : M = N)</code> without noticing that the instances on <code>M</code> and <code>N</code> agree.</p>",
        "id": 379673483,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690595363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/motive.20type.20not.20correct.3F.3F/near/379673483\">said</a>:</p>\n<blockquote>\n<p>This error usually happens when you try to rewrite <code>rw [(h : a = b)]</code> in a goal, where the <strong>type</strong> of some part of the expression depends on <code>a</code>. E.g., in your case <code>finrank K M</code> takes instance-implicit arguments <code>[AddCommGroup M] [Module K M]</code>, so you can't rewrite on <code>(h : M = N)</code> without noticing that the instances on <code>M</code> and <code>N</code> agree.</p>\n</blockquote>\n<p>What is the difference between the case above and the case already in mathlib for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=rank_conjTranspose_mul_self#doc\">docs#rank_conjTranspose_mul_self</a> which looks identical to me? What trips up rewrite here and not in the <a href=\"https://github.com/leanprover-community/mathlib4/blob/e266a1ed2c7099a2b00b0b488cd25022e4c25c05/Mathlib/Data/Matrix/Rank.lean#L200-L208\">mathlib proof</a></p>",
        "id": 379776443,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690631388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/motive.20type.20not.20correct.3F.3F/near/379647149\">said</a>:</p>\n<blockquote>\n<p>I'm not at a computer right now but -- try <code>simp only</code>? Or find a trick with <code>convert</code>?</p>\n</blockquote>\n<ul>\n<li>I tried just <code>simp only</code>and 'dsimp` and then using rewrite did not work.</li>\n<li>I also tried makeing <code>ker_mulVecLin_conjTranspose_mul_self_R_or_C</code> a simp lemma and simping with it. Not useful.</li>\n<li>I tried using <code>simp_rw</code> and <code>erw</code>.</li>\n</ul>\n<p>From reading around this \"motive\" thing seems to be like a replace template. So I tried taking that from the working example inside mathlib. It says that the rw produces the term:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.mpr</span>\n  <span class=\"o\">(</span><span class=\"n\">id</span>\n    <span class=\"o\">(</span><span class=\"n\">ker_mulVecLin_conjTranspose_mul_self</span> <span class=\"n\">A</span> <span class=\"bp\">▸</span>\n      <span class=\"n\">Eq.refl</span>\n        <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">+</span>\n            <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n          <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">+</span>\n            <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">})))</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.refl</span>\n    <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">+</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">}))</span>\n</code></pre></div>\n<p>So I tried that while replacing <code>ker_mulVecLin_conjTranspose_mul_self</code> with <code>ker_mulVecLin_conjTranspose_mul_self_R_or_C</code> with no use also</p>",
        "id": 379777715,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690631675
    },
    {
        "content": "<p>I have no idea how to use convert and from looking around it seems to have so many forms some with using some without using (my random attempts were not useful)</p>",
        "id": 379790738,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690634751
    },
    {
        "content": "<p>The usual pattern is to write <code>convert e</code> and then if you get goals which are unprovable because they went too deep (e.g. if <code>e</code> is a proof of <code>P (b + a)</code> and your goal is <code>P (a + b)</code> then <code>convert e</code> will give you subgoals <code>a = b</code> and <code>b = a</code> but probably you wanted <code>a + b = b + a</code> instead) then use <code>using 1</code>, <code>using 2</code>, etc, increase the number until you get the goals you expect</p>",
        "id": 379794629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690635658
    },
    {
        "content": "<p>I am not sure what is going but it works \"inside mathlib\"!!</p>\n<ul>\n<li>\n<p>On a clean project the <code>rw</code> gives <code>motive is not type correct</code>. The project is just one file which you can find here on github <a href=\"https://github.com/MohanadAhmed/dotProd_outside_math\">dotProd_outside_math</a>. When I copy the code of the lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=rank_conjTranspose_mul_self#doc\">docs#rank_conjTranspose_mul_self</a> outside of <code>mathlib</code> (and rename it) gives the same error!!!</p>\n</li>\n<li>\n<p>I moved the lemma into <code>mathlib</code> and the rewrite works. No complaints about <code>motive is not type correct</code>. This is on the branch <a href=\"https://github.com/leanprover-community/mathlib4/pull/6239\">MohanadAhmed/IsROrC_AHA_rank_workaround</a></p>\n</li>\n</ul>\n<p>In the form of MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">IsROrC.re_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsROrC.re</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">IsROrC.re</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">map_sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">IsROrC.im_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsROrC.im</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">IsROrC.im</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">map_sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_product_star_self_eq_zero_iff_R_or_C</span>\n    <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix.dotProduct</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span>  <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ker_mulVecLin_conjTranspose_mul_self_R_or_C</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVecLin</span> <span class=\"bp\">=</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rank_conjTranspose_mul_self_R_or_C</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">A.rank</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Matrix.rank</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">add_left_injective</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)))</span> <span class=\"n\">_</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n  <span class=\"n\">trans</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">+</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ker_mulVecLin_conjTranspose_mul_self_R_or_C</span><span class=\"o\">]</span> <span class=\"c1\">-- Error</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.finrank_range_add_finrank_ker</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">PartialOrder</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">StarOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">NotInMathlib_rank_conjTranspose_mul_self</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">A.rank</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rank</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">add_left_injective</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)))</span> <span class=\"n\">_</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n  <span class=\"n\">trans</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">+</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ker_mulVecLin_conjTranspose_mul_self</span><span class=\"o\">]</span> <span class=\"c1\">-- Error</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.finrank_range_add_finrank_ker</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 379873571,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690657638
    },
    {
        "content": "<p>I don't know why the proof in <code>Mathlib</code> works.</p>",
        "id": 379898755,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690669898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <br>\nSo far the error is the same </p>\n<ol>\n<li>On my local machine with the lemmas \"outside mathlib\"</li>\n<li>In Lean4 Playground</li>\n</ol>\n<p><a href=\"/user_uploads/3121/K3raS0-mCcY2Ki4H0GzWdiCo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/K3raS0-mCcY2Ki4H0GzWdiCo/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/K3raS0-mCcY2Ki4H0GzWdiCo/image.png\"></a></div>",
        "id": 379899534,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690670493
    },
    {
        "content": "<p>So I don't think I am doing anything particularly wrong (I mean in setting up the project and mathlib dependency)!</p>",
        "id": 379899607,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690670531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/motive.20type.20not.20correct.3F.3F/near/379898755\">said</a>:</p>\n<blockquote>\n<p>I don't know why the proof in <code>Mathlib</code> works.</p>\n</blockquote>\n<p>Any random ideas I can try?</p>",
        "id": 379899834,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690670723
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Rank</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">PartialOrder</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">StarOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">NotInMathlib_rank_conjTranspose_mul_self</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">A.rank</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rank</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">add_left_injective</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)))</span> <span class=\"n\">_</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n  <span class=\"n\">trans</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">+</span>\n    <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ker_mulVecLin_conjTranspose_mul_self</span><span class=\"o\">]</span> <span class=\"c1\">-- Error</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.finrank_range_add_finrank_ker</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 379901091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690671707
    },
    {
        "content": "<p>The same proof with <code>import Mathlib</code> fails</p>",
        "id": 379901202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690671767
    },
    {
        "content": "<p>So is the behavior of <code>rw</code> affected by the imports one has at the top of the file?</p>",
        "id": 379901512,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690672048
    },
    {
        "content": "<p>Just for clarity at a future time:<br>\nI can confirm what you said: the reduced imports makes the <code>rw</code> work.<br>\nIn my case I need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Rank</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.IsROrC.Basic</span>\n</code></pre></div>\n<p>since the example depends on <code>IsROrC</code> fields</p>",
        "id": 379901883,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690672345
    },
    {
        "content": "<p>The imports affect the instances Lean uses behind the scene.</p>",
        "id": 379901887,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690672347
    },
    {
        "content": "<p>It looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.ofSubgroupOnRing#doc\">docs#AddCommGroup.ofSubgroupOnRing</a> is the offending instance</p>",
        "id": 379901909,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690672372
    },
    {
        "content": "<p>It looks like a bad instance to me.</p>",
        "id": 379901930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690672387
    },
    {
        "content": "<p>Nice! How did you get to that? Like what debugging steps?</p>",
        "id": 379901956,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690672409
    },
    {
        "content": "<p>This:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">PartialOrder</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">StarOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotInMathlib_rank_conjTranspose_mul_self</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">A.rank</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_left_injective</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">)))</span> <span class=\"bp\">&lt;|</span>\n   <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">+</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n       <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">+</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">mulVecLin</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n         <span class=\"n\">congr</span>\n     <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rank</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.finrank_range_add_finrank_ker</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>shows some HEq about this instance after <code>congr</code>.</p>",
        "id": 379902054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690672468
    },
    {
        "content": "<p>Could you please try to compile Mathlib without <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.ofSubgroupOnRing#doc\">docs#AddCommGroup.ofSubgroupOnRing</a>  and other similar instances in that file (just delete them and push to github so that CI runs <code>lake build</code>)?</p>",
        "id": 379902185,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690672564
    },
    {
        "content": "<p>OK<br>\nIt is in this branch <a href=\"https://github.com/leanprover-community/mathlib4/tree/MohanadAhmed/mathlib_without_AddCommGroup_blah_inst\">MohanadAhmed/mathlib_without_AddCommGroup_blah_inst</a></p>",
        "id": 379902635,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690672917
    },
    {
        "content": "<p>The build failed</p>",
        "id": 379903006,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690673203
    },
    {
        "content": "<p>details here <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/5703006908/job/15455182227\">https://github.com/leanprover-community/mathlib4/actions/runs/5703006908/job/15455182227</a></p>",
        "id": 379903106,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690673283
    },
    {
        "content": "<p>The errors are timeouts in some file <code>././Mathlib/LinearAlgebra/ExteriorAlgebra/Grading.lean</code>with large maxHeartbeat values like <code>400000</code></p>",
        "id": 379903215,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690673383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/motive.20type.20not.20correct.3F.3F/near/379901930\">said</a>:</p>\n<blockquote>\n<p>It looks like a bad instance to me.</p>\n</blockquote>\n<p>Can an instance be bad if it's implementation is <code>inferInstance</code>?</p>",
        "id": 379941225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690695661
    },
    {
        "content": "<p>Oh, I guess maybe the trouble is that it consumes <code>A</code> as a family</p>",
        "id": 379941379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690695758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/motive.20type.20not.20correct.3F.3F/near/379902185\">said</a>:</p>\n<blockquote>\n<p>Could you please try to compile Mathlib without <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.ofSubgroupOnRing#doc\">docs#AddCommGroup.ofSubgroupOnRing</a>  and other similar instances in that file (just delete them and push to github so that CI runs <code>lake build</code>)?</p>\n</blockquote>\n<p>I just noticed that you said other similar instances.<br>\nWhich ones would those be?<br>\nI only removed the one you mentioned?</p>",
        "id": 379944325,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690697558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/motive.20type.20not.20correct.3F.3F/near/379941379\">said</a>:</p>\n<blockquote>\n<p>Oh, I guess maybe the trouble is that it consumes <code>A</code> as a family</p>\n</blockquote>\n<p>Yes, it is written for a family but applies in any case. I don't know if it can cause troubles.</p>",
        "id": 380065829,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690731122
    },
    {
        "content": "<p>The instance in question was a workaround for a bug in Lean3 TC inference</p>",
        "id": 380097799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690739486
    }
]