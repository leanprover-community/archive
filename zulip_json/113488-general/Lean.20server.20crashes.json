[
    {
        "content": "<p>I have updated a branch I am working on to latest master, to take advantage of the speedup. Since then, I have been experiencing many crashes, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">Lean</span> <span class=\"n\">Server</span> <span class=\"n\">has</span> <span class=\"n\">stopped</span> <span class=\"n\">processing</span> <span class=\"n\">this</span> <span class=\"n\">file</span><span class=\"o\">:</span>\n\n<span class=\"n\">Server</span> <span class=\"n\">process</span> <span class=\"n\">for</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"bp\">///</span><span class=\"n\">c</span><span class=\"bp\">%</span><span class=\"mi\">3</span><span class=\"n\">A</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">Sebastien</span><span class=\"bp\">/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">MeasureTheory</span><span class=\"bp\">/</span><span class=\"n\">Measure</span><span class=\"bp\">/</span><span class=\"n\">Haar</span><span class=\"bp\">/</span><span class=\"n\">Unique.lean</span> <span class=\"n\">crashed</span><span class=\"o\">,</span> <span class=\"n\">likely</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">stack</span> <span class=\"n\">overflow</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug.</span>\n</code></pre></div>\n<p>Is it specific to my (windows) setup, or have other people been experiencing the same lately?</p>",
        "id": 396908703,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697464532
    },
    {
        "content": "<p>Output looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">12</span> <span class=\"n\">PM</span><span class=\"o\">]</span> <span class=\"n\">Request</span> <span class=\"n\">textDocument</span><span class=\"bp\">/</span><span class=\"n\">codeAction</span> <span class=\"n\">failed.</span>\n  <span class=\"n\">Message</span><span class=\"o\">:</span> <span class=\"n\">Server</span> <span class=\"n\">process</span> <span class=\"n\">for</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"bp\">///</span><span class=\"n\">c</span><span class=\"bp\">%</span><span class=\"mi\">3</span><span class=\"n\">A</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">Sebastien</span><span class=\"bp\">/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">MeasureTheory</span><span class=\"bp\">/</span><span class=\"n\">Measure</span><span class=\"bp\">/</span><span class=\"n\">Haar</span><span class=\"bp\">/</span><span class=\"n\">Unique.lean</span> <span class=\"n\">crashed</span><span class=\"o\">,</span> <span class=\"n\">likely</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">stack</span> <span class=\"n\">overflow</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug.</span>\n  <span class=\"n\">Code</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">32902</span>\n<span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">12</span> <span class=\"n\">PM</span><span class=\"o\">]</span> <span class=\"n\">Request</span> <span class=\"n\">textDocument</span><span class=\"bp\">/</span><span class=\"n\">semanticTokens</span><span class=\"bp\">/</span><span class=\"n\">full</span> <span class=\"n\">failed.</span>\n  <span class=\"n\">Message</span><span class=\"o\">:</span> <span class=\"n\">Server</span> <span class=\"n\">process</span> <span class=\"n\">for</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"bp\">///</span><span class=\"n\">c</span><span class=\"bp\">%</span><span class=\"mi\">3</span><span class=\"n\">A</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">Sebastien</span><span class=\"bp\">/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">MeasureTheory</span><span class=\"bp\">/</span><span class=\"n\">Measure</span><span class=\"bp\">/</span><span class=\"n\">Haar</span><span class=\"bp\">/</span><span class=\"n\">Unique.lean</span> <span class=\"n\">crashed</span><span class=\"o\">,</span> <span class=\"n\">likely</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">stack</span> <span class=\"n\">overflow</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug.</span>\n  <span class=\"n\">Code</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">32902</span>\n</code></pre></div>",
        "id": 396909166,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697464658
    },
    {
        "content": "<p>Oh dear! Leo has also had the same problem. :-(</p>",
        "id": 396909347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697464701
    },
    {
        "content": "<p>(It crashes every two lines I am typing, so makes it pretty unusable)</p>",
        "id": 396909536,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697464754
    },
    {
        "content": "<p>I'm out of time here, but if someone is experiencing this knows how to compile Lean and use <code>elan override</code>, I suggest:</p>\n<ul>\n<li>locally revert <a href=\"https://github.com/leanprover/lean4/pull/2648\">lean4#2648</a></li>\n<li>rebuild lean</li>\n<li>have Mathlib use it via <code>elan override</code> (should compile fine)</li>\n<li>test!</li>\n</ul>\n<p>If that solves it we will revert it globally asap.</p>",
        "id": 396911015,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697465182
    },
    {
        "content": "<p>(A message I am getting all the time is <code>libc++abi: terminating due to uncaught exception of type lean::interrupted</code>. I don't know if this hints in some direction).</p>",
        "id": 396911638,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697465346
    },
    {
        "content": "<p>I'm 75% confident <a href=\"https://github.com/leanprover/lean4/pull/2648\">lean4#2648</a> will be the source of the problem.</p>",
        "id": 396911754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697465371
    },
    {
        "content": "<p>Indeed, it looks like the <code>interrupted</code> exception I am getting has been introduced there.</p>",
        "id": 396912143,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697465472
    },
    {
        "content": "<p>This sounds like the kind of thing that can't be caught in CI. Does that mean we need some amount of \"testing in production\"?</p>",
        "id": 396914521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697466150
    },
    {
        "content": "<p>Beta release?</p>",
        "id": 396914608,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697466171
    },
    {
        "content": "<p>Sure, but you need users of the beta release, otherwise it doesn't have value</p>",
        "id": 396914707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697466200
    },
    {
        "content": "<p>When I saw rc releases or \"release candidates\" my first instinct was that they are in fact beta releases of some sort.</p>",
        "id": 396915363,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697466371
    },
    {
        "content": "<p>I assume <code>rc</code> is what Mathlib master will use it for a while, so would projects that depend on Mathlib's master HEAD and have to keep a consistent toolchain. <del>But isn't that most projects? Maybe only teaching projects that deliberately fall behind a version or two would survive.</del> EDIT: oh, only after <code>lake update</code></p>",
        "id": 396917205,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697466907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20server.20crashes/near/396914521\">said</a>:</p>\n<blockquote>\n<p>This sounds like the kind of thing that can't be caught in CI. Does that mean we need some amount of \"testing in production\"?</p>\n</blockquote>\n<p>What would this look like? I guess nightly testing is to make sure things build and no one is taking for a hard core test drive</p>",
        "id": 396917234,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697466917
    },
    {
        "content": "<p>After update, I crashed it too (on Mac M1). With no Mathlib deps. But it doesn't keep crashing, only intermittent.</p>",
        "id": 396921285,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697468093
    },
    {
        "content": "<p>I am not going to be able to look at this for &gt;7 hours. If someone could revert <a href=\"https://github.com/leanprover-community/mathlib4/pull/7703\">#7703</a> in the meantime I can sort out the details tomorrow.</p>",
        "id": 396924782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697469052
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7710\">#7710</a></p>",
        "id": 396933105,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697471717
    },
    {
        "content": "<p>Unfortunately I just haven't been able to reproduce this problem on my computer, so I'm not entirely sure how to proceed from here.</p>",
        "id": 396989544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697497309
    },
    {
        "content": "<p>If there is anyone who is able to reproduce, I would really really appreciate if they could help out by following my instructions above to locally revert <a href=\"https://github.com/leanprover/lean4/pull/2648\">lean4#2648</a> and report whether this solves the problem.</p>",
        "id": 396989729,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697497352
    },
    {
        "content": "<p>Without someone who can reproduce and who can try this, my fallback solution is going to be to revert <a href=\"https://github.com/leanprover/lean4/pull/2648\">lean4#2648</a> on <code>master</code>, cut a <code>v4.2.0-rc3</code> release, and then just see what happens. :-( But this is a lot of work with uncertain outcome.</p>",
        "id": 396989830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697497407
    },
    {
        "content": "<p>It seems the problem occurs on at least Windows and Apple Silicon (but not on mine??).</p>",
        "id": 396989952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697497450
    },
    {
        "content": "<p>Do we have a set context where this happens repeatedly?</p>",
        "id": 396989996,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697497474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20server.20crashes/near/396914521\">said</a>:</p>\n<blockquote>\n<p>This sounds like the kind of thing that can't be caught in CI. Does that mean we need some amount of \"testing in production\"?</p>\n</blockquote>\n<p>Yes, the basic problem here is that <a href=\"https://github.com/leanprover/lean4/pull/2648\">lean4#2648</a>, which makes changes not testable by CI, should not have been included in a release candidate so quickly after reaching master. If I'd waited longer on it, we hopefully would have seen this either from users on Lean <code>master</code> (i.e. not at Mathlib), or me working on <code>nightly-testing</code> at Mathlib.</p>\n<p>This is what happens when there is demand for additional release candidates to get new features. :-)</p>",
        "id": 396990732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697497789
    },
    {
        "content": "<p>If there's anyone who was experiencing these crashes available now, I am very happy to screenshare with you to walk you through the step of testing whether it was <a href=\"https://github.com/leanprover/lean4/pull/2648\">lean4#2648</a>.</p>",
        "id": 396991108,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697497967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20server.20crashes/near/396908703\">said</a>:</p>\n<blockquote>\n<p>I have updated a branch I am working on to latest master, to take advantage of the speedup. Since then, I have been experiencing many crashes, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">Lean</span> <span class=\"n\">Server</span> <span class=\"n\">has</span> <span class=\"n\">stopped</span> <span class=\"n\">processing</span> <span class=\"n\">this</span> <span class=\"n\">file</span><span class=\"o\">:</span>\n\n<span class=\"n\">Server</span> <span class=\"n\">process</span> <span class=\"n\">for</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"bp\">///</span><span class=\"n\">c</span><span class=\"bp\">%</span><span class=\"mi\">3</span><span class=\"n\">A</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">Sebastien</span><span class=\"bp\">/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">MeasureTheory</span><span class=\"bp\">/</span><span class=\"n\">Measure</span><span class=\"bp\">/</span><span class=\"n\">Haar</span><span class=\"bp\">/</span><span class=\"n\">Unique.lean</span> <span class=\"n\">crashed</span><span class=\"o\">,</span> <span class=\"n\">likely</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">stack</span> <span class=\"n\">overflow</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug.</span>\n</code></pre></div>\n<p>Is it specific to my (windows) setup, or have other people been experiencing the same lately?</p>\n</blockquote>\n<p>Is this branch public? I am still failing to reproduce.</p>",
        "id": 396992037,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697498402
    },
    {
        "content": "<p>Found it, <code>SG_haar_unique</code>.</p>",
        "id": 396992444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697498580
    },
    {
        "content": "<p>... but still can't reproduce.</p>",
        "id": 396993426,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697499204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20server.20crashes/near/396990732\">said</a>:</p>\n<blockquote>\n<p>This is what happens when there is demand for additional release candidates to get new features. :-)</p>\n</blockquote>\n<p>My only excuse is that all this came from too much enthusiasm about the great work coming from the FRO. I also ate my own dog food and gave a talk today including live coding with the new rc2 (without hitting any bug).</p>",
        "id": 396994917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697500184
    },
    {
        "content": "<p>Lucky. :-)</p>",
        "id": 396995233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697500410
    },
    {
        "content": "<p>Sorry, didn't mean to blame you on this! It should definitely have occurred to me that this was an untestable change being rolled into a release candidate soon after hitting master... I'll learn, hopefully.</p>",
        "id": 396995321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697500451
    },
    {
        "content": "<p>It seems to more likely to happen when I just open a long file, typing in the middle of it, typing triggers slow orange bar then my typing requests code completion. But when it happens, I've tried reproduce it this way in the same spot after many file restart/server restart but it just doesn't happen again. I've tried manually create a monkey test of typing sequence then play undo and redo at different pace after file restart, see orange bar come and go, copilot auto completion and LSP auto completion mixed together, it just doesn't crash. Now I feel that it's quite resilient.</p>",
        "id": 396997550,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697501780
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>. I'm working on making an <code>v4.2.0-rc3</code> without this PR now.</p>",
        "id": 397005861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697506395
    },
    {
        "content": "<p>For me, it happens more often when I'm working close to the end of a longish file. Apart from that, it is pretty nondeterministic.</p>",
        "id": 397030616,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697520508
    },
    {
        "content": "<p>I've now seen it a handful of times, but have never managed two in a row.</p>\n<p><code>master</code> is now on <code>v4.2.0-rc3</code>, so if you merge master to your branches hopefully everything is good.</p>",
        "id": 397031840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697521234
    },
    {
        "content": "<p>(And if it is not, and you're definitely on <code>v4.2.0-rc3</code>, please let me know ASAP)</p>",
        "id": 397031867,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697521252
    },
    {
        "content": "<p>I've just merged master. We'll see how things go.</p>",
        "id": 397032046,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697521356
    },
    {
        "content": "<p>And thanks!</p>",
        "id": 397032056,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697521363
    },
    {
        "content": "<p>Not sure if this is related, but although I couldn't get the server to crash with Emacs and <code>v4.2.0-rc2</code>, on rc2 almost any editing done on a pending (\"orange bar\") region causes completions to stop working (using the <code>company</code> completion framework). Take this with a big grain of salt, but it \"feels like\" some of the edits are being discarded and the LSP server view of the file gets out of sync. <code>v4.2.0-rc3</code> is fine.</p>",
        "id": 397087455,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697541894
    },
    {
        "content": "<p>Ok, got a worker stack trace: <a href=\"https://gist.github.com/collares/ae3a8d5b5f7c6976b8d46b5bfb6e945b\">https://gist.github.com/collares/ae3a8d5b5f7c6976b8d46b5bfb6e945b</a>. This is on a debug build, commit <code>d15a0a4acb988954137eb902f0991b72d63e8d67</code>. It seems like the kernel calls <code>check_interrupted()</code> directly in <a href=\"https://github.com/leanprover/lean4/blob/d15a0a4acb988954137eb902f0991b72d63e8d67/src/kernel/for_each_fn.cpp#L65-L66\"><code>for_each_fn::apply</code></a>.</p>",
        "id": 397101121,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697546803
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 397103666,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697547657
    },
    {
        "content": "<p>I've noticed the same thing as Mauricio. It feels like the LSP server is seeing a different file from the editor.</p>",
        "id": 397162190,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697567232
    }
]