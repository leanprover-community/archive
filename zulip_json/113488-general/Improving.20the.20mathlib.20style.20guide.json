[
    {
        "content": "<p>There's a handful of things in mathlib where there's more than one way to write something down, and the style guide gives preference to neither option. I'd like to put these to vote to then update the style guide. It would be nice if as many people as possible voted.</p>",
        "id": 291390560,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659135055
    },
    {
        "content": "<p>Number 1: Trailing commas at the end of code blocks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- the comma here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291390768,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659135218
    },
    {
        "content": "<p>/poll Should these trailing commas be allowed?</p>\n<ul>\n<li>They should be mandatory.</li>\n<li>There shouldn't be a guideline for this.</li>\n<li>They should be disallowed.</li>\n</ul>",
        "id": 291390913,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659135339
    },
    {
        "content": "<p>Number 2: Spacing in infixes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"c1\">-- No spacing</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- All spacing</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 291391247,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659135605
    },
    {
        "content": "<p>/poll Should spaces in infixes be allowed?</p>\n<ul>\n<li>They should be mandatory.</li>\n<li>There shouldn't be a guideline for this.</li>\n<li>They should be disallowed.</li>\n</ul>",
        "id": 291391289,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659135635
    },
    {
        "content": "<p>I think there's a difference between a style and it being mandatory</p>",
        "id": 291391471,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659135788
    },
    {
        "content": "<p>A style allows for not having to go and change everything. It also allows for flexibility when something calls for the opposite of a guideline</p>",
        "id": 291391509,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659135829
    },
    {
        "content": "<p>By mandatory, I mean \"part of the style guide\". Perhaps I should have worded this more clearly.</p>",
        "id": 291391577,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659135871
    },
    {
        "content": "<p>Encouraged and discouraged?</p>",
        "id": 291391720,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659136021
    },
    {
        "content": "<p>Yeah, that's it.</p>",
        "id": 291391737,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659136028
    },
    {
        "content": "<p>Perennial discussion, but a \"black\" style tool would be great. But likely only really feasible and useful lean4</p>",
        "id": 291391805,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659136094
    },
    {
        "content": "<p>Number 3: spacing between <code>←</code>  and theorem in <code>rw</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- no spacing</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nat.add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.add_comm</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- with spacing</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 291391824,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659136129
    },
    {
        "content": "<p>/poll Opinion on the spacing of ← in rw?</p>\n<ul>\n<li>They should be encouraged.</li>\n<li>There shouldn't be a guideline for this.</li>\n<li>They should be discouraged.</li>\n</ul>",
        "id": 291391828,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659136135
    },
    {
        "content": "<p>I think that's all I'll put up to vote for now.</p>",
        "id": 291391964,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659136251
    },
    {
        "content": "<p>I think a discussion we should have (especially for mathlib4) is whether we want to have (a) more structured proofs, i.e., less <code>refine</code> and more <code>have</code> (b) encouraging proofs to be sufficiently commented so that it is possible to actually understand the proofs without looking in the literature. obviously this is only for proofs that are mathematically nontrivial.<br>\nI guess <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has some thoughts in that direction as well.</p>",
        "id": 291393015,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659137331
    },
    {
        "content": "<p>My personal opinion is that it's not worth commenting proofs less than 10 or so lines long no matter how clever they are</p>",
        "id": 291400083,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659146673
    },
    {
        "content": "<p>Because inspecting them usually makes them speak for itself</p>",
        "id": 291400088,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659146682
    },
    {
        "content": "<p>Longer proofs, particularly public-facing proofs like in the archive, can usually benefit from comments</p>",
        "id": 291400107,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659146735
    },
    {
        "content": "<p>I get the impression that the philosophy of mathlib is that the library of code is primarily there to teach things to the computer, and making things easier for human readers to understand is useful only to the extent that it serves that primary goal. That, as I understand it, is why we optimise for practical considerations like speed and brevity rather than readability, and hence why we don’t tend to explain the steps of a proof with comments.</p>",
        "id": 291414537,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659167620
    },
    {
        "content": "<p>I think this is a place to express once more my concern about the idea that \"short proofs do not deserve comment\" (with the indirect but related attitude of having very short proofs).  I understand that short proofs are easier to maintain, but <br>\n1) They are really a nighmare to decipher if one is not already used to <code>mahtlib</code>. Since we talk a lot about getting more people onboard and the effect of <code>lean/mathlib</code> on teaching, I believe we should tackle this seriously.<br>\n2) The choice of spliting big results in small lemmas (which is, on its own, a reasonable choice), makes most proof very shorts. This does not mean that they are easy, it just means we are hiding everything under the rug because we decompose things so much that everything is locally trivial.<br>\n3) One may want to learn by looking at the code, and some math-trivial proofs are not lean-trivial. So they might deserve some comment.</p>",
        "id": 291418453,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659173357
    },
    {
        "content": "<blockquote>\n<p>2) The choice of spliting big results in small lemmas (which is, on its own, a reasonable choice), makes most proof very shorts. This does not mean that they are easy, it just means we are hiding everything under the rug because we decompose things so much that everything is locally trivial.</p>\n</blockquote>\n<p>Isn't \"locally trivial\" exactly the property you want of a good proof? If a theorem has been broken down like this then the theorem statements are all you need to understand the proof</p>",
        "id": 291418613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659173535
    },
    {
        "content": "<p>I don't see this as hiding everything under the rug at all, rather the opposite. Hiding everything under the rug is using <code>by magic</code> heavy tactics</p>",
        "id": 291418716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659173684
    },
    {
        "content": "<blockquote>\n<p>3) One may want to learn by looking at the code, and some math-trivial proofs are not lean-trivial. So they might deserve some comment.</p>\n</blockquote>\n<p>In a broken-down proof, it's possible to make all of these <em>doc comments</em> instead of simply code comments. There is nothing saying that you can't put comments on theorems (even trivial ones), in fact I wish we did so more often and more systematically. And these get added to doc-gen and shown in hovers and so on which makes reading broken down proofs a lot easier</p>",
        "id": 291418836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659173872
    },
    {
        "content": "<p>There are parts of mathlib where the proofs are all \"locally trivial\", but the amount of small lemmas is overwhelming and it is tedious to read through them all. Sometimes there is a long comment before the whole section outlining the proof strategy and highlighting the mathematically nontrivial lemmas from the other QoL/API lemmas, which I find very helpful when trying to reuse the intermediate lemmas. I think this kind of comments should nonetheless be encouraged.</p>",
        "id": 291418883,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659173905
    },
    {
        "content": "<p>Part of the difficulty of reading mathlib proofs is that we often do things like inlining the proofs of some conditions to a lemma.  For example, if lemma <code>foo</code> takes a condition <code>0 &lt; n</code> then we might end up writing a line like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">pos_of_bar_of_dvd_pow</span> <span class=\"n\">hd</span> <span class=\"n\">hn_bar</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h3</span> <span class=\"n\">hk</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>rather than building things up step by step with <code>have h_dvd_pow : ...</code> and <code>have hn_pos : ...</code>.  This makes the proof shorter, but harder to unpick what's going on — and there's no way to \"step into\" the line to see what each part does.</p>",
        "id": 291419285,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659174429
    },
    {
        "content": "<p>you can put your cursor in the middle of the line to get expected type info</p>",
        "id": 291419430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659174605
    },
    {
        "content": "<p>which is basically \"stepping into\" the line</p>",
        "id": 291419441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659174616
    },
    {
        "content": "<p>I think you can also use the widget view to click through the proof</p>",
        "id": 291419464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659174645
    },
    {
        "content": "<p>I think this thread has departed from the original topic, which was about making decisions about trivial style choices regarding where individual characters go so that we have clearer style rulings to apply in review</p>",
        "id": 291420384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659175939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Improving.20the.20mathlib.20style.20guide/near/291418716\">said</a>:</p>\n<blockquote>\n<p>I don't see this as hiding everything under the rug at all, rather the opposite. Hiding everything under the rug is using <code>by magic</code> heavy tactics</p>\n</blockquote>\n<p>OK, may be I should make it clearer what I mean by \"hiding everything under the rug\". I mean that the novice's path is by no means easy, but we pretend it to be. The fact that a big theorem needs 50 lemmas (say) shows that the theorem is somewhat deep. Of these 50, some will be crucial and some will be minor; some will be specific to this theorem, some will reveal some deep property; and some will be \"technical results\". If you decide to keep the long proof, you will be forced to explain it, and to underpin the contribution of every step. If they become 50 lemmas on an equal footing, there will be no communication at all about what is \"really\" happening. This was my (admittedly, too concise ;-) ) idea when I spoke about the rug.</p>",
        "id": 291422054,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659178455
    },
    {
        "content": "<p>In an alternate universe I guess we could use lemma vs theorem to distinguish crucial vs minor</p>",
        "id": 291424178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659180949
    },
    {
        "content": "<p>Maybe another aspect is that it can be difficult to fix a proof that breaks because of some changes to mathlib when it is hard to understand how precisely the proof works. A less condensed style and comments can be helpful in such cases.</p>",
        "id": 291433151,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1659192756
    },
    {
        "content": "<p>Let me just say that I really don’t think we are in a position of discouraging comments. I agree that for programming, clean code with clear names often removes the need for comments, but I think the situation is different here, because while programmers expect only other programmers to read their code, I think we should target having mathlib being as readable as possible for mathematicians. Besides, I think tactic mode has an intrinsic readability limitation : even with nicely structured proof, it is still nearly impossible for me to predict the tactic state after, e.g, a call to <code>field_simp</code>. And even <em>if</em> we decided that some comments are superfluous, mathlib is so under documented at the moment that making any rules on this matter would probably discourage way more useful comments than useless ones.</p>",
        "id": 291439460,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659200003
    },
    {
        "content": "<p>(I have nothing against <code>field_simp</code>, this is the first tactic that I thought of which is not predictable and is often used in a non-terminal way)</p>",
        "id": 291439582,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659200124
    }
]