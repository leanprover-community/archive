[
    {
        "content": "<p>This proof doesn't work today, because it gets stuck on <code>list.pairwise ne nil</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.pairwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"n\">i₃</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi₁₂</span> <span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">≠</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi₁₃</span> <span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">≠</span> <span class=\"n\">i₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi₂₃</span> <span class=\"o\">:</span> <span class=\"n\">i₂</span> <span class=\"bp\">≠</span> <span class=\"n\">i₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">i₃</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"bp\">≠</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n</code></pre></div>\n\n<p>I can fix it either with <code>attribute [simp] list.pairwise.nil</code> or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">list.pairwise_nil</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">[]</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">list.pairwise.nil</span>\n</code></pre></div>\n\n<p>noting that the latter is consistent with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise_cons.\">docs#list.pairwise_cons.</a></p>\n<p>Should one of these be PR'd?</p>",
        "id": 211249816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601036146
    },
    {
        "content": "<p>Yes please. I ran into the same problem just recently, but didn't fix it.</p>",
        "id": 211251791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601037315
    },
    {
        "content": "<p>LGTM</p>",
        "id": 211252349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601037687
    },
    {
        "content": "<p>I note there is <code>attribute [simp] chain.nil</code> a bit lower in <code>data.list.defs</code>.</p>",
        "id": 211252876,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601038005
    },
    {
        "content": "<p>Presumably I should prefer the  <code>pairwise_nil</code> spelling for consistency?</p>",
        "id": 211254218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601038855
    },
    {
        "content": "<p>Ah, nevermind, I'll just match <code>chain</code></p>",
        "id": 211254559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601039065
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4254\">#4254</a></p>",
        "id": 211254901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601039259
    }
]