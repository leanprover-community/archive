[
    {
        "content": "<p>In the process of porting a file, I think that one of the results is now redundant (presumably thanks to the new way in which coercions are handled).  The result is an <a href=\"https://github.com/leanprover-community/mathlib4/blob/5917c2a3dc32033640a6b5c44d142a3acdeb261e/Mathlib/Algebra/Lie/Submodule.lean#L271\">equality between two submodules</a>.<br>\nTo check that this result is no longer needed, I did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">possiblyUselessTheorem</span>\n</code></pre></div>\n<p>and verified that the two explicit inputs to the corresponding <code>Eq</code> application are identical.</p>\n<p>Does this justify removing the lemma?  Could this lemma still be useful for something?</p>\n<p>Thank!</p>",
        "id": 361412998,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685126773
    },
    {
        "content": "<p>You should double check that the statement indeed corresponds to the one in Lean 3, sometimes the statement written by mathport isn’t parsed in the same way so the statement becomes trivial. But if that is the case I think you can freely remove it.</p>",
        "id": 361413973,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685127076
    },
    {
        "content": "<p>the two statements are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">lie_ideal.coe_to_lie_subalgebra_to_submodule</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">lie_ideal</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">lie_subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[norm_cast]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">LieIdeal.coe_toLieSubalgebra_toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">LieIdeal</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">LieSubalgebra</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>They look pretty similar to me!  Is this enough?  I feel really uncomfortable about this, for some reason...</p>",
        "id": 361414376,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685127191
    },
    {
        "content": "<p>The double coercion is pretty printed as a double coercion in Lean3, but not in Lean4.  In fact, in Lean 4 the output of the <code>pp.all</code> thing is exactly the same on the two sides of the equality.</p>",
        "id": 361414579,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685127244
    },
    {
        "content": "<p>(The only reason I picked up on this is because the <code>norm_cast</code> linter flagged it as <code>badly shaped lemma, rhs can't start with coe   ↑(lieIdealSubalgebra R L I)</code>.)</p>",
        "id": 361415019,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685127379
    },
    {
        "content": "<p>Double coercions are indeed implemented differently in Lean 4, so I agree that this is probably safe to remove. Doesn't the syntactic tautology linter check for this?</p>",
        "id": 361425864,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1685130753
    },
    {
        "content": "<p>I did not even know that a syntactic tautology linter existed!</p>",
        "id": 361426889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685131081
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `synTaut` linter reports:</span>\n<span class=\"cm\">THE FOLLOWING DECLARATIONS ARE SYNTACTIC TAUTOLOGIES.</span>\n<span class=\"cm\">This usually means that they are of the form `∀ a b ... z, e₁ = e₂` where `e₁` and `e₂` are identical expressions.</span>\n<span class=\"cm\">We call declarations of this form syntactic tautologies.</span>\n<span class=\"cm\">Such lemmas are (mostly) useless and sometimes introduced unintentionally when proving basic facts using `rfl`,</span>\n<span class=\"cm\">when elaboration results in a different term than the user intended. You should check that the declaration really</span>\n<span class=\"cm\">says what you think it does. -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">LieIdeal.coe_toLieSubalgebra_toSubmodule</span> <span class=\"c\">/-</span><span class=\"cm\"> LHS equals RHS syntactically -/</span>\n</code></pre></div>",
        "id": 361426996,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685131104
    },
    {
        "content": "<p>Thanks Anne!</p>",
        "id": 361427019,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685131111
    },
    {
        "content": "<p>I fewer <code>norm_cast</code> problem to worry about!</p>",
        "id": 361427478,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685131231
    }
]