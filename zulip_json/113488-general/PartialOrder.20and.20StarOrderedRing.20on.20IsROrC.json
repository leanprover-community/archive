[
    {
        "content": "<p>In a previous discussion <a href=\"#narrow/stream/113488-general/topic/wierd.20rewrite.20fail\">Here</a> on using the <code>rank_conjTranspose_mul_self</code> and its sister lemma <code>rank_conjTranspose_mul_self</code> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  stated that I cannot just require <code>IsROrC</code> to have a <code>PartialOrder</code> and then <code>StarOrderedRing</code>. That will place two Star operations on the field!! Thus to be able to have <code>StarOrderedRing</code> and hence use the above theorems I must create instances inside  <code>IsROrC</code> <code>PartialOrder</code> and then for `StarOrderedRing.   </p>\n<p>My attempt at doing that is below. It seems to work and I am able to successfully use the theorems. However my understanding of the Typeclass system is not that good. So my question are:</p>\n<ol>\n<li>Is this the \"right\" way to make <code>IsROrC</code> a <code>StarOrderedRing</code>?</li>\n<li><code>IsROrC</code> applies to <code>ℝ</code> and <code>ℂ </code>. Would the instance of PartialOrder I created interfere with <code>PartialOrder</code> already inside the <code>Complex ℂ </code> for example?</li>\n<li>Assume I am to submit this to Mathlib any gotchas I need to pay attention to?</li>\n</ol>\n<p>Thanks</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IsROrC</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">toPartialOrder</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsROrC.re</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">IsROrC.re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">IsROrC.im</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">IsROrC.im</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">hab.1.trans</span> <span class=\"n\">hbc.1</span><span class=\"o\">,</span> <span class=\"n\">hab.2.trans</span> <span class=\"n\">hbc.2</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsROrC.ext_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">hab.1.antisymm</span> <span class=\"n\">hba.1</span><span class=\"o\">,</span> <span class=\"n\">hab.2</span> <span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_def</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">IsROrC.re</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">IsROrC.re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">IsROrC.im</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">IsROrC.im</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">LE.le</span> <span class=\"n\">Preorder.toLE</span> <span class=\"n\">PartialOrder.toPreorder</span> <span class=\"n\">toPartialOrder</span> <span class=\"n\">LE.le</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_congr_left_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">toStarOrderedRing</span> <span class=\"o\">:</span> <span class=\"n\">StarOrderedRing</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">StarOrderedRing.ofNonnegIff'</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"n\">z</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">z</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span>\n  <span class=\"n\">use</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">IsROrC.re</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsROrC.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">le_def</span><span class=\"o\">,</span> <span class=\"n\">star_def</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">conj_ofReal</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_re</span><span class=\"o\">,</span> <span class=\"n\">ofReal_re</span><span class=\"o\">,</span> <span class=\"n\">ofReal_im</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_im</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">Real.mul_self_sqrt</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">h.2.symm</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">star_def</span><span class=\"o\">,</span> <span class=\"n\">le_def</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_re</span><span class=\"o\">,</span> <span class=\"n\">conj_re</span><span class=\"o\">,</span> <span class=\"n\">conj_im</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_im</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">IsROrC.norm_sq_eq_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">IsROrC.normSq_eq_def'</span><span class=\"o\">,</span> <span class=\"n\">IsROrC.normSq_nonneg</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">im</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">eq_self</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IsROrC</span>\n</code></pre></div>",
        "id": 371317620,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1688164038
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsROrC#doc\">docs#IsROrC</a> already extends <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarRing#doc\">docs#StarRing</a>, so you can reuse star operation from there.</p>",
        "id": 371326497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688168592
    },
    {
        "content": "<p>However, if you add a generic instance <code>IsROrC.toPartialOrder</code>, then you'll get 2 partial orders on <code>Real</code>s and <code>Complex</code>.</p>",
        "id": 371326534,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688168623
    },
    {
        "content": "<p>So, if you want the order to be a part of the signature, then you need to extend, e.g., <code>PartialOrder</code> (or <code>LT</code> and <code>LE</code>) and an axiom saying that <code>z ≤ w ↔ re z ≤ re w ∧ im z = im w</code> (and similarly for <code>&lt;</code> if you only extend <code>LT</code> and <code>LE</code>).</p>",
        "id": 371326715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688168753
    },
    {
        "content": "<p>In fact, you have 1 more option: just extend <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarOrderedRing#doc\">docs#StarOrderedRing</a> and reuse existing instances for <code>Real</code> and <code>Complex</code>.</p>",
        "id": 371327088,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688168957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/PartialOrder.20and.20StarOrderedRing.20on.20IsROrC/near/371327088\">said</a>:</p>\n<blockquote>\n<p>In fact, you have 1 more option: just extend <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarOrderedRing#doc\">docs#StarOrderedRing</a> and reuse existing instances for <code>Real</code> and <code>Complex</code>.</p>\n</blockquote>\n<p>Can you point me towards an example of extending <code>StarOrderedRing</code> which I can try to emulate. What I did above was to a large extent emulating the Complex.partialOrder and StarOrderedRing codes?</p>\n<p>Also what is your preferred learning resource for learning about how to deal with classes/structures?</p>",
        "id": 371328026,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1688169535
    },
    {
        "content": "<p>I was learning by looking at <code>mathlib</code> code...</p>",
        "id": 371337753,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688173969
    },
    {
        "content": "<p>I see 3 different options.</p>\n<h3>Option 1</h3>\n<ul>\n<li>Add <code>PartialOrder K</code> to the list of <code>extends</code>, replace <code>StarRing K</code> with <code>StarOrderedRing K</code>.</li>\n<li>Deduce from the definition of <code>StarOrderedRing</code> that <code>z ≤ w ↔ re z ≤ re w ∧ im z = im w</code> and similarly for <code>&lt;</code>.</li>\n<li>Prove that complex numbers is a star ordred ring.</li>\n<li>Reuse this instance and the existing instance for real numbers in the <code>IsROrC</code> instances for real and complex numbers.</li>\n</ul>\n<p>With this approach, you will need to relate the <code>StarOrderedRing</code> axiom to <code>z ≤ w ↔ re z ≤ re w ∧ im z = im w</code> twice (one implication for an <code>IsROrC</code> field, the reversed implication for complex numbers.</p>\n<h3>Option 2 (I recommend this one)</h3>\n<ul>\n<li>Add <code>PartialOrder K</code> to the list of <code>extends</code> and add <code>le_iff_re_im : z ≤ w ↔ re z ≤ re w ∧ im z = im w</code> to the list of axioms.</li>\n<li>Prove <code>StarOrderedRing</code> instance for any <code>IsROrC</code>. <strong>Important</strong>: reuse existing data (<code>PartialOrder</code>), don't define a new one.</li>\n<li>Add (almost trivial) <code>le_iff_re_im</code> proofs to <code>IsROrC</code> instances for real and complex numbers.</li>\n</ul>\n<h3>Option 3</h3>\n<ul>\n<li>Add <code>LE K</code> and <code>LT K</code> to the list of <code>extends</code> and add <code>le_iff_re_im</code> and <code>lt_iff_re_im</code> to the list of axioms.</li>\n<li>Define <code>IsROrC.toPartialOrder</code> reusing given <code>LT</code> and <code>LE</code> instances.</li>\n<li>Prove <code>StarOrderedRing</code> instance for any <code>IsROrC</code>. <strong>Important</strong>: reuse existing data (<code>PartialOrder</code>), don't define a new one.</li>\n<li>Add (almost trivial) <code>le_iff_re_im</code> and <code>lt_iff_re_im</code> proofs to <code>IsROrC</code> instances for real and complex numbers.</li>\n</ul>",
        "id": 371339435,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688174765
    },
    {
        "content": "<p>None of this (actually, I think option 3 does?) works because <code>Real</code> has a partial order, but <code>Complex</code> doesn't have one that is activated globally. Unless we want <code>Complex</code> to have a globally activated partial order instance, we can't make <code>IsROrC</code> extend <code>PartialOrder</code></p>",
        "id": 371342792,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688176412
    },
    {
        "content": "<p>Unless we activate this instance globally, we can't turn <code>IsROrC</code> into a <code>StarOrderedRing</code>.</p>",
        "id": 371343542,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688176797
    },
    {
        "content": "<p>Because either way you need the <code>[PartialOrder]</code> argument to the class.</p>",
        "id": 371343665,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688176836
    },
    {
        "content": "<p>So, I suggest that we turn this instance on globally.</p>",
        "id": 371343703,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688176860
    },
    {
        "content": "<p>BTW, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarOrderedRing.ofLeIff#doc\">docs#StarOrderedRing.ofLeIff</a> looks like a nice constructor. <del>Why does it need <code>h_add</code>?</del> UPD: read the source. UPD2: proved without this assumption.</p>",
        "id": 371344241,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688177097
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5639\">#5639</a></p>",
        "id": 371346299,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688178206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> please see my open PR about refactoring StarOrderedRing</p>",
        "id": 371346483,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688178312
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">#4871</a></p>",
        "id": 371346658,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688178400
    },
    {
        "content": "<p>Wait, sorry, I forgot what happened. That's a different PR. Nevermind.</p>",
        "id": 371347024,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688178625
    },
    {
        "content": "<p>Personally, I like and need the order on the complexes (I'm convoluting complex-valued functions and getting a (morally) real-valued result), so I'm happy to see the instance go global.</p>",
        "id": 371372605,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688192678
    },
    {
        "content": "<p>I'm curious which order that induces the ordinary one on the reals has better properties though, using the real part alone, or letting complexes with nonzero imaginary part be incomparable with any other (the push forward of the nice order).</p>",
        "id": 371426415,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688206297
    },
    {
        "content": "<p>Your second one is quite weak, since it's not even an <code>ordered_add_comm_monoid</code>! <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 ≤ 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≰</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\"> i \\not≤ i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>",
        "id": 371430543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688207187
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 371474589,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688216267
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  and <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> . Just submitted PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6210\">#6210</a> which implements <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  suggestion number 2 above. Any review welcome</p>",
        "id": 379461968,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690542839
    },
    {
        "content": "<p>It looks like you didn't actually implement the thing in the title of this thread!</p>",
        "id": 379467170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690543868
    },
    {
        "content": "<p>Also, you should delete the scope that contains <code>PartialOrder</code> instance on <code>Complex</code> and turn it into a global instance.</p>",
        "id": 379488756,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690547684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/PartialOrder.20and.20StarOrderedRing.20on.20IsROrC/near/379467170\">said</a>:</p>\n<blockquote>\n<p>It looks like you didn't actually implement the thing in the title of this thread!</p>\n</blockquote>\n<p>Yeah my bad!</p>",
        "id": 379494449,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690548636
    },
    {
        "content": "<p>It seems I thought I included the code from the top of this thread but I didn't</p>",
        "id": 379494562,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690548657
    },
    {
        "content": "<p>When I add PartialOrder to the extends list and a field <code>le_iff_re_im</code> it seems the <code>le</code> used on the right is from the IsROrC class not the Real numbers which is not what I want. </p>\n<p>The error message below is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1086422</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1086425</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">IsROrC</span> <span class=\"n\">K</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">IsROrC.re</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">IsROrC.re</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">↑</span><span class=\"n\">IsROrC.im</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">IsROrC.im</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>The arrows behind IsROrC shows that it is being sent back to K instead of staying as Real numbers!!</p>\n<p>In the file <code>Data.IsROrC.Basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"𝓚\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">algebraMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ComplexConjugate</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">This typeclass captures properties shared by ℝ and ℂ, with an API that closely matches that of ℂ.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsROrC</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">semiOutParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"kd\">extends</span> <span class=\"n\">DenselyNormedField</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">StarRing</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n    <span class=\"n\">NormedAlgebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">CompleteSpace</span> <span class=\"n\">K</span> <span class=\"n\">where</span>\n  <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span>\n  <span class=\"sd\">/-- Imaginary unit in `K`. Meant to be set to `0` for `K = ℝ`. -/</span>\n  <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">K</span>\n  <span class=\"n\">I_re_ax</span> <span class=\"o\">:</span> <span class=\"n\">re</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">I_mul_I_ax</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n  <span class=\"n\">re_add_im_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">𝓚</span> <span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">𝓚</span> <span class=\"o\">(</span><span class=\"n\">im</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n  <span class=\"n\">ofReal_re_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">re</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span>\n  <span class=\"n\">ofReal_im_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">(</span><span class=\"bp\">𝓚</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">mul_re_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">re</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">re</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">re</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">im</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">im</span> <span class=\"n\">w</span>\n  <span class=\"n\">mul_im_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">re</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">im</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">im</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">re</span> <span class=\"n\">w</span>\n  <span class=\"n\">conj_re_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">re</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">re</span> <span class=\"n\">z</span>\n  <span class=\"n\">conj_im_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">im</span> <span class=\"n\">z</span>\n  <span class=\"n\">conj_I_ax</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">I</span>\n  <span class=\"n\">norm_sq_eq_def_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">z</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">re</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">re</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">im</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">im</span> <span class=\"n\">z</span>\n  <span class=\"n\">mul_im_I_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">im</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">im</span> <span class=\"n\">z</span>\n  <span class=\"n\">le_iff_re_im</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">im</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">im</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- le_iff_re_im : z ≤ w ↔ (((re z):ℝ) ≤ ((re w):ℝ)) ∧ (im z) = ((im w):ℝ)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">is_R_or_C</span> <span class=\"n\">IsROrC</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsROrC.le_iff_re_im</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- unfold LE.le Preorder.toLE  PartialOrder.toPreorder IsROrC.toPartialOrder at h</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>",
        "id": 379500264,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690549601
    },
    {
        "content": "<blockquote>\n<p>The arrows behind IsROrC shows that it is being sent back to K instead of staying as Real numbers!!</p>\n</blockquote>\n<p>No they don't; did you hover over them?</p>",
        "id": 379503143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690550078
    },
    {
        "content": "<p>Hopefully fixed now</p>",
        "id": 379534897,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690555708
    },
    {
        "content": "<p>spoke two minutes too soon<br>\ngetting <code>failed to synthesize</code> <code>maxHeartbeats</code> errors</p>",
        "id": 379535688,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690555864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , we want those scoped instances on <code>ℂ</code> to be global now, right?</p>",
        "id": 379544641,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690557481
    },
    {
        "content": "<p>In the interest of keeping changes small, I'd argue that the <code>IsROrC</code> instance should be in the same scope</p>",
        "id": 379547432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690557959
    },
    {
        "content": "<p>I think making the instance global for <code>Complex</code> is sort of orthogonal to generalizing it to <code>IsROrC</code></p>",
        "id": 379547858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690558025
    },
    {
        "content": "<p>I don't follow. We need the following:</p>\n<ol>\n<li>A global <code>IsROrC ℂ</code> instance.</li>\n<li>With the change in this PR, a global <code>PartialOrder ℂ</code> instance (because <code>IsROrC</code> now extends <code>PartialOrder</code>)</li>\n</ol>\n<p>At that point, all the data is in global instances, so why should instances that only add proofs be scoped?</p>",
        "id": 379549421,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690558280
    },
    {
        "content": "<blockquote>\n<p>because IsROrC now extends PartialOrder</p>\n</blockquote>\n<p>It could instead have a <code>toPartialOrder</code> field that is only <code>attribute [instance]</code>d in a scope</p>",
        "id": 379551570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690558647
    },
    {
        "content": "<p>I agree that if the <code>PartialOrder</code> instance is global then the rest should be too</p>",
        "id": 379551764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690558681
    },
    {
        "content": "<p>The more I think about it the more <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.partialOrder#doc\">docs#Complex.partialOrder</a> is a reasonable order to put as a global instance (!): it's also the order coming from the star algebra structure...</p>",
        "id": 379554298,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690559117
    },
    {
        "content": "<p>I agree (but of course I'm biased about this!), especially since we know there doesn't exist an order on <code>ℂ</code> making it into a <code>LinearOrderedField</code> (by the way, do we have this result stated anywhere, maybe in <code>counterexamples</code>?). We should probably have a poll before we turn it on globally though. (I'll make it now)</p>",
        "id": 379556718,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690559584
    },
    {
        "content": "<p>Here is the <a href=\"#narrow/stream/113488-general/topic/global.20PartialOrder.20.E2.84.82.20instance\">poll</a></p>",
        "id": 379558665,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690559969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nIf we go with the measured approach will the IsROrC instance for Complex have to be in whole inside the <code>ComplexOrder</code> locale? Meaning IsROrC would not apply to Complex unless the person is willing to take the order with it right?</p>",
        "id": 379583744,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690565260
    },
    {
        "content": "<p>No, that's not what it would mean</p>",
        "id": 379584317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690565391
    },
    {
        "content": "<p>It would mean that <code>IsROrC.toPartialOrder</code> and <code>IsROrC.toStarOrderedRing</code> would be in the <code>ComplexOrder</code> locale</p>",
        "id": 379584514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690565422
    },
    {
        "content": "<p>Oh, right, Eric that's bad then. It would mean that <code>ℝ</code> doesn't have a globally enabled <code>StarOrderedRing</code> instance.</p>",
        "id": 379584741,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690565471
    },
    {
        "content": "<p>We could add a shortcut for R, I don't see that being an issue</p>",
        "id": 379585049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690565540
    },
    {
        "content": "<p>Probably a stupid question. But what happens Real gets two instances of <code>StarOrderedRing</code>?</p>",
        "id": 379585412,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690565621
    },
    {
        "content": "<p>Not much if they're definitional equal</p>",
        "id": 379585691,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690565663
    },
    {
        "content": "<p>Note that discussions about global orders aside, this PR is not passing CI due to timeouts</p>",
        "id": 380282797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690799725
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6391\">#6391</a> passes CI and leaves things in the <code>ComplexOrder</code> locale for now</p>",
        "id": 382309900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691314053
    }
]