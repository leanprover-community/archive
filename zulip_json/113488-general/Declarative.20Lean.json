[
    {
        "content": "<p>I wanted to learn more about the options for Declarative Lean (e.g. like Isar or controlled natural language or Cezar <a href=\"https://kluedo.ub.uni-kl.de/frontdoor/deliver/index/docId/2100/file/B-065.pdf\" title=\"https://kluedo.ub.uni-kl.de/frontdoor/deliver/index/docId/2100/file/B-065.pdf\">https://kluedo.ub.uni-kl.de/frontdoor/deliver/index/docId/2100/file/B-065.pdf</a>). Any pointers? Does this exist for Lean?</p>",
        "id": 196667754,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1588785676
    },
    {
        "content": "<p>Everything I see when skimming this pdf is already possible with the tactics we have.</p>",
        "id": 196669584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786364
    },
    {
        "content": "<p>You don't need anything new , you only need to restrict to a subset of what is available</p>",
        "id": 196669690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786401
    },
    {
        "content": "<p>If you want to enforce using only this subset then you can have a dedicated tactic mode where you only copy the subset you want to enforce</p>",
        "id": 196669837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786466
    },
    {
        "content": "<p>For instance you can read the discussion at <a href=\"#narrow/stream/113488-general/topic/Proposal.3A.20.60fix.20x.60.20for.20.60assume.20x.60\" title=\"#narrow/stream/113488-general/topic/Proposal.3A.20.60fix.20x.60.20for.20.60assume.20x.60\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Proposal.3A.20.60fix.20x.60.20for.20.60assume.20x.60</a>. It will contains a lot of noise from your point of view, but also interesting things for you.</p>",
        "id": 196670257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786642
    },
    {
        "content": "<p>Here's the example on p4 of the pdf, in Lean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">div2</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">double_div2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">double</span> <span class=\"n\">at</span> <span class=\"n\">hd</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div2</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">double_div2&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n  <span class=\"o\">(</span> <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">Hrec</span><span class=\"o\">,</span>\n   <span class=\"k\">calc</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">div2</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">]</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">div2</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Hrec</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>\n\n\n<p>Both modes are already available.</p>",
        "id": 196670417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588786690
    },
    {
        "content": "<p>See also the example at <a href=\"#narrow/stream/116395-maths/topic/Lebesgue.20number.20lemma/near/194033514\" title=\"#narrow/stream/116395-maths/topic/Lebesgue.20number.20lemma/near/194033514\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Lebesgue.20number.20lemma/near/194033514</a></p>",
        "id": 196670541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786736
    },
    {
        "content": "<p>The main difference with Isar (beyond the additional flexibility) is the lack of sledgehammer to proving proofs of each small step.</p>",
        "id": 196670639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786765
    },
    {
        "content": "<p>You can also mix Kevin's example, doing the structured tactic mode style.</p>",
        "id": 196670761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246156\">@Brando Miranda</span>’s interests are in AI, so I don’t think he is asking from the point of a Lean user (i.e. how can I do this in practice), but for some other purpose (e.g. is there a formal declarative specification I can use to interact with Lean).  Can you clarify your motivation Brando?  (Also it is good to hear from you again.)</p>",
        "id": 196671249,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588787024
    },
    {
        "content": "<p>Wow. Thanks Jason, that was <em>very</em> hard to guess from his message and then disappearance.</p>",
        "id": 196673519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588788028
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks for your response. It's greatly appreciated. I'm curious, what do you mean by disappearance? I didn't know when I would get a response so I just closed the chat and would be back to it later as I have now. </p>\n<p>My question has many facets. One of them is trying to understand what is the best representation from an interactive theorem prover side for machine learning (ML) systems to do proof search. I won't lie but with so many Interactive Theorem Provers (ITPs) in existence, it's been very hard for me to commit to any of them in depth (though Isabelle is the one I know best because it's the one taught in my university) because I just don't know which one is the best (especially for Machine Learning). I am not even sure what are all the features I should be considering when choosing one (especially for ML).</p>\n<p>In addition, to discover that there is a declarative style ITP language added yet another layer of complexity that I didn't know existed. It's not entirely clear why to me what the main problem declarative proofs solve vs procedural (I will admit if I don't know if there are more styles I am not aware of). </p>\n<p>Though, it was a pleasant surprise to hear that Lean has declarative proofs embedded in the language naturally, so I wouldn't have to worry about that if I were to choose Lean it seems, though I'm not an expert in ITPs, but I find them fascinating (and fun to use!).</p>",
        "id": 196691120,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1588796243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>  Thanks for the kind message Jason. I plan to be very active this summer, as soon as classes end next week. Excited! :)</p>",
        "id": 196691565,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1588796431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246156\">Brando Miranda</span> <a href=\"#narrow/stream/113488-general/topic/Declarative.20Lean/near/196691120\" title=\"#narrow/stream/113488-general/topic/Declarative.20Lean/near/196691120\">said</a>:</p>\n<blockquote>\n<p>Thanks for your response. It's greatly appreciated. I'm curious, what do you mean by disappearance? I didn't know when I would get a response so I just closed the chat and would be back to it later as I have now. </p>\n</blockquote>\n<p>There is no problem. I was making fun of Kevin and I trying to answer very quickly without really knowing the question (but adding some context can often help)</p>",
        "id": 196696020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588798626
    }
]