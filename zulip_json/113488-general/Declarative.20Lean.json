[
    {
        "content": "<p>I wanted to learn more about the options for Declarative Lean (e.g. like Isar or controlled natural language or Cezar <a href=\"https://kluedo.ub.uni-kl.de/frontdoor/deliver/index/docId/2100/file/B-065.pdf\" title=\"https://kluedo.ub.uni-kl.de/frontdoor/deliver/index/docId/2100/file/B-065.pdf\">https://kluedo.ub.uni-kl.de/frontdoor/deliver/index/docId/2100/file/B-065.pdf</a>). Any pointers? Does this exist for Lean?</p>",
        "id": 196667754,
        "sender_full_name": "Brando Miranda",
        "timestamp": 1588785676
    },
    {
        "content": "<p>Everything I see when skimming this pdf is already possible with the tactics we have.</p>",
        "id": 196669584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786364
    },
    {
        "content": "<p>You don't need anything new , you only need to restrict to a subset of what is available</p>",
        "id": 196669690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786401
    },
    {
        "content": "<p>If you want to enforce using only this subset then you can have a dedicated tactic mode where you only copy the subset you want to enforce</p>",
        "id": 196669837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786466
    },
    {
        "content": "<p>For instance you can read the discussion at <a href=\"#narrow/stream/113488-general/topic/Proposal.3A.20.60fix.20x.60.20for.20.60assume.20x.60\" title=\"#narrow/stream/113488-general/topic/Proposal.3A.20.60fix.20x.60.20for.20.60assume.20x.60\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Proposal.3A.20.60fix.20x.60.20for.20.60assume.20x.60</a>. It will contains a lot of noise from your point of view, but also interesting things for you.</p>",
        "id": 196670257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786642
    },
    {
        "content": "<p>Here's the example on p4 of the pdf, in Lean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">div2</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">double_div2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">double</span> <span class=\"n\">at</span> <span class=\"n\">hd</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div2</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">double_div2&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n  <span class=\"o\">(</span> <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">Hrec</span><span class=\"o\">,</span>\n   <span class=\"k\">calc</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">div2</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">]</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">div2</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Hrec</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>\n\n\n<p>Both modes are already available.</p>",
        "id": 196670417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588786690
    },
    {
        "content": "<p>See also the example at <a href=\"#narrow/stream/116395-maths/topic/Lebesgue.20number.20lemma/near/194033514\" title=\"#narrow/stream/116395-maths/topic/Lebesgue.20number.20lemma/near/194033514\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Lebesgue.20number.20lemma/near/194033514</a></p>",
        "id": 196670541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786736
    },
    {
        "content": "<p>The main difference with Isar (beyond the additional flexibility) is the lack of sledgehammer to proving proofs of each small step.</p>",
        "id": 196670639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786765
    },
    {
        "content": "<p>You can also mix Kevin's example, doing the structured tactic mode style.</p>",
        "id": 196670761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588786806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246156\">@Brando Miranda</span>’s interests are in AI, so I don’t think he is asking from the point of a Lean user (i.e. how can I do this in practice), but for some other purpose (e.g. is there a formal declarative specification I can use to interact with Lean).  Can you clarify your motivation Brando?  (Also it is good to hear from you again.)</p>",
        "id": 196671249,
        "sender_full_name": "Jason Rute",
        "timestamp": 1588787024
    },
    {
        "content": "<p>Wow. Thanks Jason, that was <em>very</em> hard to guess from his message and then disappearance.</p>",
        "id": 196673519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588788028
    }
]