[
    {
        "content": "<p>I'm interested as to why there seems to be different definitions of a set like 'Set' and 'set' and 'Setoid' and 'finset' which one should I be using? What is the history?</p>",
        "id": 402962405,
        "sender_full_name": "Mason McBride",
        "timestamp": 1700371246
    },
    {
        "content": "<p>Note, the lowercased names no longer exist, those look like they are from the lean 3 naming convention</p>",
        "id": 402962495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700371319
    },
    {
        "content": "<p>The lean 4 version of those would be <code>ZFSet</code>, <code>Set</code>, <code>Setoid</code>, <code>Finset</code> respectively</p>",
        "id": 402962565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700371352
    },
    {
        "content": "<ul>\n<li><code>Set A</code>: an arbitrary subset of base type <code>A</code></li>\n<li><code>Finset A</code>: a finite set (with some computational content as a list of elements)</li>\n<li><code>Setoid A</code>: an equivalence relation on a type (this isn't really a set, the naming is borrowed from Coq)</li>\n<li><code>ZFSet</code>: a ZFC-style set for use in set theory formalization</li>\n</ul>",
        "id": 402962833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700371500
    },
    {
        "content": "<p>you pretty much always want the first one, unless you are doing summation over finite sets in which case you will need the second one</p>",
        "id": 402962887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700371526
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">please</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.image</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Set.image</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">Set.image</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>What is wrong here</p>",
        "id": 402964480,
        "sender_full_name": "Mason McBride",
        "timestamp": 1700372462
    },
    {
        "content": "<ol>\n<li>You're not importing enough of mathlib for lean to know what you mean when you try to use a set where a type of expected</li>\n<li>You've got the order wrong for the composition operator</li>\n<li>The proof needs more work</li>\n</ol>",
        "id": 402969131,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700375282
    },
    {
        "content": "<ol start=\"4\">\n<li>It looks like you're muddling <code>Set</code> and <code>Type</code></li>\n</ol>",
        "id": 402999359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700391686
    }
]