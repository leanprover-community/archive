[
    {
        "content": "<p>Do we agree that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/integral_undef\">docs#integral_undef</a> is a terrible name? I've been looking several times in the past for the lemma that says that a non-integrable function has <code>integral</code> zero, and I'm only finding it now. I was looking for <code>not_integrable</code>.</p>",
        "id": 364935495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686334533
    },
    {
        "content": "<p><code>integral_eq_zero_of_not_integrable</code>? Maybe a little long</p>",
        "id": 364935921,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686334643
    },
    {
        "content": "<p>Yes, that's a terrible name. You get used to it, but it's pretty much impossible to discover unless you browse the file. <code>integral_of_not_integrable</code> would be better.</p>",
        "id": 364936228,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1686334721
    },
    {
        "content": "<p><code>integral_of_not_integrable</code> is the name I guessed, yes. I will add an alias for discoverability, unless you hate the current name so much that you want a rename.</p>",
        "id": 364937059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686334956
    },
    {
        "content": "<p>Actually I would say that we could make it a naming pattern for all the default values like that, I would be happy with <code>integral_of_undef</code>, <code>deriv_of_under</code>, <code>csSup_of_undef</code> and so on</p>",
        "id": 364941137,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686335993
    },
    {
        "content": "<p>Okay but now you must know whether something holds by definition or because it's a consequence of something earlier.</p>",
        "id": 364942248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686336297
    },
    {
        "content": "<p>That sounds implementation-detaily.</p>",
        "id": 364942311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686336309
    },
    {
        "content": "<p>Well I only have examples in mind where it is clear what is needed for a definition to make sense, but I get your point. I don’t have strong feelings about this anyway, just felt like the name is not that bad</p>",
        "id": 364943667,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686336645
    },
    {
        "content": "<p>In each case listed by <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>, \"of undef\" means \"in a situation when the textbooks say that the value is undefined\".</p>",
        "id": 364950667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686338627
    },
    {
        "content": "<p>Then let's at least have a discoverable alias. I don't mind too much about removing the <code>undef</code> name.</p>",
        "id": 364950830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686338669
    },
    {
        "content": "<p>I wonder if we could have a tactic that does this sort of stuff, much like <code>nontriviality</code> (that is, gives you that wlog it's integrable by discharging the other case with simp)</p>",
        "id": 364950888,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686338693
    },
    {
        "content": "<p>That would be great, but we would need it to handle not just integrability, but also measurability, nonemptiness, nonzeroness...</p>",
        "id": 365075252,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686391890
    },
    {
        "content": "<p>I can try to give it a go, beginning with a simple case-split: is this non-integrable/integrable, trying to discharge the main goal replacing the integral with zero in one branch, and adding the hypothesis <code>integrable ...</code> in the other.</p>",
        "id": 365085563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686394671
    },
    {
        "content": "<p>Here is a very quick implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"unint \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span>\n      <span class=\"o\">(</span><span class=\"n\">by_cases</span> <span class=\"n\">h_int</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Integrable</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">pick_goal</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_int</span><span class=\"o\">,</span> <span class=\"n\">MeasureTheory.integral_undef</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">done</span> <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unint</span> <span class=\"n\">f</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> state:</span>\n<span class=\"cm\">  α: Type u</span>\n<span class=\"cm\">  E: Type v</span>\n<span class=\"cm\">  inst✝³: NormedAddCommGroup E</span>\n<span class=\"cm\">  inst✝²: NormedSpace ℝ E</span>\n<span class=\"cm\">  inst✝¹: CompleteSpace E</span>\n<span class=\"cm\">  inst✝: MeasureSpace α</span>\n<span class=\"cm\">  f: α → E</span>\n<span class=\"cm\">  h_int✝: Integrable f</span>\n<span class=\"cm\">  ⊢ (∫ (a : α), f a) = 0</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 365105036,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686399322
    },
    {
        "content": "<p>If anyone has any \"real world\" example where they would like to test this tactic, I would be happy to take a look and see what goes wrong with it!</p>",
        "id": 365105367,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686399410
    },
    {
        "content": "<p>I really want the general tactic to be called <code>junk</code>.</p>",
        "id": 365105731,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686399491
    },
    {
        "content": "<p>Sure, <code>junk</code> would probably also case-split on Nat-subtraction, right?  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 365105899,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686399536
    },
    {
        "content": "<p>Since <code>macros</code> can be expanded, maybe this could be the first iteration of <code>junk</code>...</p>",
        "id": 365105991,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686399560
    },
    {
        "content": "<p>Yes and yes, that's exactly what I'm thinking. You have a general tactic <code>junk</code> which calls extensions that each deal with junk values in a specific case (<code>0</code> in a <code>group_with_zero</code>, <code>a ≤ b</code> when <code>b - a : ℕ</code> is in the goal, integrability, nonemptiness, ...).</p>",
        "id": 365106704,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686399762
    },
    {
        "content": "<p>I agree with you, Yaël, and had a \"split nat_sub\" tactic in mathlib3.  I'd be happy to implement and extend it in mathlib4, but would start with this one, that seems easier.</p>",
        "id": 365106923,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686399833
    },
    {
        "content": "<p>Maybe we should have a <code>Tactic.Junk</code> namespace and put all the helper tactics for <code>junk</code> in there.</p>",
        "id": 365107134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686399889
    },
    {
        "content": "<p>So, the tactic above could be a stub for <code>Tactic.Junk.integrable</code>.</p>",
        "id": 365107244,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686399920
    },
    {
        "content": "<p>And <code>junk</code> matches the target with all the <code>Junk.whatever</code> that are implemented and adds the various assumptions.</p>",
        "id": 365107476,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686399980
    },
    {
        "content": "<p>We could even try to have a meta-tactic that takes the predicate and the \"junk lemmas\" as input and produces a macro expansion like <code>unint</code> above.</p>",
        "id": 365108589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400297
    },
    {
        "content": "<p>Then we could feed all of these trivial case splits to the meta-tactic and get rid of a bunch of junk cases.</p>",
        "id": 365108845,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400351
    },
    {
        "content": "<p>I think we don't want to hardcode the \"junk lemmas\" into the tactic because that would be too much work to maintain. Instead, we should assume these junk lemmas are in the simp set and try to discharge the goal using <code>simp</code>.</p>",
        "id": 365108955,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686400379
    },
    {
        "content": "<p>Naturally, some case-splits will be harder and would not fall under this scheme, but many of the ones proposed above probably would.</p>",
        "id": 365108979,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400384
    },
    {
        "content": "<p>I am a little wary of leaving a \"not-<code>only</code>\" <code>simp</code> call in a tactic...</p>",
        "id": 365109063,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400417
    },
    {
        "content": "<p>Maybe we could have a <code>junk</code> attribute and use <code>simp only [junk-attribute-lemmas]</code>.</p>",
        "id": 365109266,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400455
    },
    {
        "content": "<p>That's still more work than just calling simp, but it's at least less work than curating the list from within the tactic.</p>",
        "id": 365109411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686400500
    },
    {
        "content": "<p>(Wrt to <code>simp [no-only]</code>, note that above I followed the <code>simp</code> by <code>done</code> to try to mitigate this...)</p>",
        "id": 365109420,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400501
    },
    {
        "content": "<p>I don't see the problem in calling <code>simp</code> to finish a goal, though.</p>",
        "id": 365109502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686400528
    },
    {
        "content": "<p>Anyway, we can try with a simple <code>simp</code> and see how it works out.</p>",
        "id": 365109503,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400528
    },
    {
        "content": "<p>Ok, I'll try to write the meta-tactic that basically does the above, but takes <code>MeasureTheory.Integrable</code> as a user-input.</p>",
        "id": 365109728,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400589
    },
    {
        "content": "<p>The interesting part of the tactic would be for it to figure out what you want to junk on.</p>",
        "id": 365109845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686400624
    },
    {
        "content": "<p>Btw, <code>MeasureTheory.integral_undef</code> is not a <code>simp</code>-lemma.</p>",
        "id": 365109900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400645
    },
    {
        "content": "<p>It really should <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 365109956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686400660
    },
    {
        "content": "<p>So, <code>simp [h_int]</code> does not actually work.</p>",
        "id": 365109977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400664
    },
    {
        "content": "<p>Anyway, I'll experiment with whatever <code>simp</code>-call works, and we can then discuss about the best way of proceeding.</p>",
        "id": 365110166,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/integral_undef/near/365109845\">said</a>:</p>\n<blockquote>\n<p>The interesting part of the tactic would be for it to figure out what you want to junk on.</p>\n</blockquote>\n<p>To begin with, it could probably match the head-symbol of the target with the implemented <code>junk</code>-tactics.  It might even recurse inside the target goal, looking for applicable <code>junk</code>s.</p>",
        "id": 365110497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400786
    },
    {
        "content": "<p>However, this seems like a problem to be addressed later, once the \"basic <code>junk</code>-tactics\" already work.</p>",
        "id": 365110663,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686400821
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_eq_zero_of_not_summable#doc\">docs4#tsum_eq_zero_of_not_summable</a> is also not <code>simp</code>.</p>",
        "id": 365113491,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686401503
    },
    {
        "content": "<p>Why <code>integral_undef</code> should be a <code>simp</code> lemma, as opposed to a <code>@[junk]</code> lemma?</p>",
        "id": 365119295,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686402906
    },
    {
        "content": "<p>For the same reason that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_zero\">docs#div_zero</a> is a simp lemma.</p>",
        "id": 365120336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686403217
    },
    {
        "content": "<p><code>div_zero</code> matches syntactically. <code>tsum_eq_zero_of_not_summable</code> tries to prove <code>not (summable _)</code> for each <code>tsum</code> you have.</p>",
        "id": 365157879,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686414705
    },
    {
        "content": "<p>Does that actually make any difference performance-wise?</p>",
        "id": 365158329,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686414839
    },
    {
        "content": "<p>Regardless of performance, here is some reason why I think that having a <code>junk</code> attribute could be useful.</p>",
        "id": 365158825,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686414986
    },
    {
        "content": "<p>The <code>junk</code> tactic should make a case split on some <code>Prop</code>.  If some lemmas are marked <code>@junk</code>, then the tactic could try to match the expression of the target with some of the assumption of the <code>junk</code>-lemmas and \"understand\" automatically what <code>Prop</code> it should split on, simply inspecting the type of the target.</p>",
        "id": 365159058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686415073
    },
    {
        "content": "<p>The <code>junk</code> attribute could even have an optional hypothesis, defaulting to the first assumption that begins with <code>not</code>.</p>",
        "id": 365159552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686415235
    },
    {
        "content": "<p>But then you're going to need tagging <em>many</em> lemmas with <code>@[junk]</code>, or do you want to also fall back on <code>simp</code>?</p>",
        "id": 365159852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686415355
    },
    {
        "content": "<p>So far, the <code>junk</code> tactic is basically a way of doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">by_cases</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">something</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I think that the more it can figure out what to case on and which lemmas to use in <code>simp</code> automatically, the better.</p>",
        "id": 365159885,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686415367
    },
    {
        "content": "<p>I am happy to fall back on <code>simp</code>, but all considerations of efficiency and workability would have to be tested against some attempt, I think.</p>",
        "id": 365159946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686415404
    },
    {
        "content": "<p>Also, I think that the heuristic \"case on an assumption that is a negation\" is probably getting you a good chunk of <code>junk</code> splits correctly right away.</p>",
        "id": 365160082,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686415456
    },
    {
        "content": "<p>For the remaining ones, like <code>Summable</code>, <code>Integrable</code>,... we use the attribute.</p>",
        "id": 365160159,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686415501
    },
    {
        "content": "<p>I am imagining something like what used to happen with <code>to_additive</code>: you have to teach it a dictionary, and then it takes off.  Same here: if you introduce a suitable junk value, you teach it to <code>junk</code>.</p>",
        "id": 365160291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686415561
    },
    {
        "content": "<p>So you want to tag the possible case splits, not the lemmas to use? That's what I had in mind too.</p>",
        "id": 365160417,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686415609
    },
    {
        "content": "<p>The case splits take a <code>Prop</code>, so this is certainly one piece of the equation.  In some cases, <code>simp</code> will close the <code>junk</code> goal, but in some others it will not.  The <code>junk</code> attribute might guide in this choice.</p>",
        "id": 365160508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686415673
    },
    {
        "content": "<p><code>nontriviality</code> relies on the default <code>simp</code> set + lemmas tagged with <code>nontriviality</code></p>",
        "id": 365160757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686415785
    },
    {
        "content": "<p>Because after you apply lemmas that assume <code>Subsingleton</code>, you may get a goal like <code>a * 0 = 0</code></p>",
        "id": 365160966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686415868
    },
    {
        "content": "<p>In a current attempt, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">tsum_eq_zero_of_not_summable</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">MeasureTheory.integral_undef</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">Integrable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">junk_gen</span> <span class=\"n\">Integrable</span> <span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">junk_gen</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n</code></pre></div>\n<p>The two \"features\" are</p>\n<ul>\n<li>I tagged as <code>simp</code> lemmas, two lemmas that are not <code>simp</code> and</li>\n<li>that I give explicitly the <code>Prop</code> on which to case split.</li>\n</ul>\n<p>I think that the <code>junk</code> tag could help with making the tactic automatically select the right <code>Prop</code> and also using a more suitable <code>simp</code> set.</p>",
        "id": 365161537,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686416066
    },
    {
        "content": "<p>Ideally, <code>junk</code> would try to produce the <code>Prop</code> and then call <code>simp + junk-attribute</code> to close the trivial goal.</p>",
        "id": 365161624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686416113
    },
    {
        "content": "<p>And like <code>nontriviality</code>, it could ask for a hint, in case it does not find a good <code>Prop</code>.</p>",
        "id": 365161695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686416144
    },
    {
        "content": "<p>BTW,  <a href=\"https://github.com/leanprover-community/mathlib4/pull/4955\">!4#4955</a></p>",
        "id": 365163653,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686416919
    },
    {
        "content": "<p>I wonder whether it is better to have</p>\n<ul>\n<li>several ad hoc tactics and then a unified one that simply tries each one of the ad hoc ones, or</li>\n<li>a single tactic that does all the splitting internally.</li>\n</ul>",
        "id": 365164026,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686417049
    },
    {
        "content": "<p>Maybe it is the tactics that should be tagged with <code>junk</code>, not the lemmas.</p>",
        "id": 365164114,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686417076
    },
    {
        "content": "<p>So each tactic could get its special support and then the <code>junk</code> tactic brings them all together.</p>",
        "id": 365164613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686417257
    },
    {
        "content": "<p>In case of <code>inhabit</code> and <code>nontriviality</code>, you often need to speciry the type.</p>",
        "id": 365164787,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686417312
    },
    {
        "content": "<p>I'm not convinced it's worth buildings tactics for what seems to amount to <code>by_cases something, { simp }</code>.</p>",
        "id": 365164962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686417374
    },
    {
        "content": "<p>Even <code>nontriviality R</code> isn't really much more useful that <code>casesI subsingleton_or_nontrivial R</code></p>",
        "id": 365165136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686417456
    },
    {
        "content": "<p>I like <code>nontriviality</code></p>",
        "id": 365165431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686417589
    },
    {
        "content": "<p>I kind of like the idea of having a tactic that dispatches with the trivial cases-splits.  I agree though, that it is essentially doing <code>by_cases X; { simp };</code> and not much else.</p>",
        "id": 365165617,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686417651
    },
    {
        "content": "<p>Another situation with special support could be <code>Polynomial</code>, where the case-split on whether the polynomial is <code>0</code> or not, could also replace <code>degree</code>s with <code>nat_degree</code> and reduce as much as possible to <code>Nat</code>, instead of <code>WithBot Nat</code>.</p>",
        "id": 365167998,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686418633
    },
    {
        "content": "<p>The issue with doing case split on, e.g., <code>Integrable</code> is that often you have two integrals and the formula works because either both functions are integrable, or both functions are not integrable.</p>",
        "id": 365168012,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686418636
    },
    {
        "content": "<p>Yuri, if you have a good example of where the case-split would help with the proof, let me know and I can try out the <code>junk</code> tactic.</p>",
        "id": 365168181,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686418690
    },
    {
        "content": "<p>See, e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_mul_left#src\">src4#tsum_mul_left</a></p>",
        "id": 365175391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686421523
    },
    {
        "content": "<p>The case <code>else</code> is not trivial and depends on whether <code>a = 0</code> or not.</p>",
        "id": 365175510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686421563
    }
]