[
    {
        "content": "<p>Is there a tactic to prove:</p>",
        "id": 324327515,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1674926844
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isFin1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 324327541,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1674926859
    },
    {
        "content": "<p>I assume you want it to be computable?</p>",
        "id": 324329009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674927665
    },
    {
        "content": "<p>Just to be clear, you really want this to be some recursive type?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Sigma1.a</span> <span class=\"c1\">-- Sigma1.a : Sigma1 → Sigma1 → Sigma1</span>\n</code></pre></div>\n<p>I suspect Sigma1 is empty.</p>",
        "id": 324329107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674927720
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 324329291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674927817
    },
    {
        "content": "<p>In case this is what you meant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[derive fintype]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isFin1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 324329430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674927874
    },
    {
        "content": "<p>I thought I changed this on zulip, sorry.</p>",
        "id": 324329711,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1674928060
    },
    {
        "content": "<p>Ok, thank you!</p>",
        "id": 324329931,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1674928177
    },
    {
        "content": "<p>Btw, I am defining :</p>\n<ul>\n<li>an alphabet Sigma is a finite type</li>\n<li>a word over Sigma is a list over Sigma</li>\n<li>a language is a set of words, i.e. word Sigma -&gt; Prop<br>\nwhat is the best way to do this?</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">basics</span>\n<span class=\"kd\">variable</span> <span class=\"n\">Sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- the empty work ε</span>\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">word</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">Sigma</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epsilon</span> <span class=\"o\">:</span> <span class=\"n\">word</span> <span class=\"n\">Sigma</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">lang</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">word</span> <span class=\"n\">Sigma</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">basics</span>\n</code></pre></div>\n<p>But I never mention that Sigma has to be finite?</p>",
        "id": 324330261,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1674928332
    },
    {
        "content": "<p>I guess I could define Alphabet as a record of a type with fintype?</p>",
        "id": 324330446,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1674928431
    }
]