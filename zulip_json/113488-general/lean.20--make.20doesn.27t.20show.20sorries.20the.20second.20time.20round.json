[
    {
        "content": "<p>deleted</p>",
        "id": 192119060,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1585395682
    },
    {
        "content": "<p>What is <em>prod,</em> exactly? Not <em>mult,</em> obviously.</p>",
        "id": 193026527,
        "sender_full_name": "Phiroc",
        "timestamp": 1586171801
    },
    {
        "content": "<p>it is the type former for pairs</p>",
        "id": 193026587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171834
    },
    {
        "content": "<p><code>prod A B</code> is the type of pairs of an element of A and an element of B</p>",
        "id": 193026603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171850
    },
    {
        "content": "<p>like cartesian product but with types instead of sets</p>",
        "id": 193026635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171872
    },
    {
        "content": "<p>it's usually written <code>A \\times B</code> or <code>A × B</code></p>",
        "id": 193026736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171934
    },
    {
        "content": "<p>I see.</p>",
        "id": 193026781,
        "sender_full_name": "Phiroc",
        "timestamp": 1586171966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , but that's the proof provided by the author of the book.</p>",
        "id": 193026902,
        "sender_full_name": "Phiroc",
        "timestamp": 1586172032
    },
    {
        "content": "<p>How would you write the proof?</p>",
        "id": 193026921,
        "sender_full_name": "Phiroc",
        "timestamp": 1586172053
    },
    {
        "content": "<p>Can you please reply on the correct thread?</p>",
        "id": 193026954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586172078
    },
    {
        "content": "<p>simple noob question - how do I prove 1 + 1 = 2 in lean? it seems like it should be something built into \"nat\" but i can't find it</p>",
        "id": 198476617,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1590171747
    },
    {
        "content": "<p><code>rfl</code></p>",
        "id": 198476675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590171774
    },
    {
        "content": "<p>ok thanks. how could I have figured that out without bugging you, is there some way I missed?</p>",
        "id": 198476913,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1590171877
    },
    {
        "content": "<p>The first trick would have been to post this in the \"new members\" stream, with a topic.</p>",
        "id": 198477003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590171928
    },
    {
        "content": "<p>And then try <code>by library_search</code></p>",
        "id": 198477043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590171951
    },
    {
        "content": "<p>ok. thanks!</p>",
        "id": 198477128,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1590171985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> Have you seen the tutorials? They definitely help. For example the natural number game. See <a href=\"https://leanprover-community.github.io/\">#homepage</a> for some links to get started</p>",
        "id": 198519937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590212374
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 198684284,
        "sender_full_name": "Ami",
        "timestamp": 1590423538
    },
    {
        "content": "<p>Is there any way to forbid \"no topic\" posts?</p>\n<p>Ami, I don't understand what exactly you want to prove. If I interpret the definitions correctly, then you have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">two</span>\n<span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n</code></pre></div>\n\n\n<p>How exactly do you define <code>Φ(x)</code>: is it <code>(∀ y, Q y) → P x</code> or <code>∀ y, (Q y → P x)</code>?</p>",
        "id": 198685987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590424888
    },
    {
        "content": "<p>the first one.</p>",
        "id": 198686113,
        "sender_full_name": "Ami",
        "timestamp": 1590424987
    },
    {
        "content": "<p>And what are you trying to prove about <code>Φ</code>?</p>",
        "id": 198686122,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590424994
    },
    {
        "content": "<p>Ami, it will be much easier to get someone putting enough energy into answering your question if you put more energy asking it (eg. typing it and providing enough context)</p>",
        "id": 198686128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590425000
    },
    {
        "content": "<p>That's true. I will do it.</p>",
        "id": 198686224,
        "sender_full_name": "Ami",
        "timestamp": 1590425077
    },
    {
        "content": "<p>hmm, i was looking at what seems to be a totally different tutorial linked from a totally different home page, at <a href=\"https://leanprover.github.io/\">https://leanprover.github.io/</a> .</p>",
        "id": 198700250,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1590438571
    },
    {
        "content": "<p>That webpage is more closely linked to the last official lean release, as opposed to the work being dont by members of this chat on mathlib and the community fork (while we wait for lean 4). So I'd definitely recommend the <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a> version of everything.</p>",
        "id": 198700533,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590438832
    },
    {
        "content": "<p>Maybe it's time to kindly ask for a couple of links from <a href=\"https://leanprover.github.io/\">https://leanprover.github.io/</a> to <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a></p>",
        "id": 198702190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590440509
    },
    {
        "content": "<p>Google still puts all the official out of date pages ahead of the community pages when you're searching for lean</p>",
        "id": 201235655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592465386
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202543240,
        "sender_full_name": "James Arthur",
        "timestamp": 1593592375
    },
    {
        "content": "<p>Running <code>lean --make</code> on a file with sorries gives the warnings, but only the first time it's run; is there a switch I can do to make it show the warnings every time?</p>",
        "id": 203128869,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594140497
    },
    {
        "content": "<p>You can remove the olean as a workaround</p>",
        "id": 203135814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594143951
    },
    {
        "content": "<p>I guess this works but I'd really rather not make things recompile again</p>",
        "id": 203142486,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594147359
    },
    {
        "content": "<p>You could rename the oleans and then rename them back...</p>",
        "id": 203142593,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594147436
    },
    {
        "content": "<p>Import it from another file?</p>",
        "id": 203142967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594147596
    },
    {
        "content": "<p>which warnings do you want?</p>",
        "id": 203143004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594147612
    },
    {
        "content": "<p>If you want to know about all the warnings then of course lean needs to rebuild the file, right?</p>",
        "id": 203143074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594147647
    },
    {
        "content": "<p>Right but if it's already built then I should be able to get the warnings? For errors, if I do <code>lean --make</code> twice I get all the errors both times, but not for warnings</p>",
        "id": 203143711,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594147891
    },
    {
        "content": "<p>If there are errors then Lean doesn't write an .olean file I think, so this is a different situation</p>",
        "id": 203144599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594148240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/lean.20--make.20doesn't.20show.20sorries.20the.20second.20time.20round/near/203143711\">said</a>:</p>\n<blockquote>\n<p>but not for warnings</p>\n</blockquote>\n<p>I don't understand what this means</p>",
        "id": 203145050,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594148421
    },
    {
        "content": "<p>do you mean if there are only warnings?</p>",
        "id": 203145144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594148461
    },
    {
        "content": "<p>Yeah if there are only warnings</p>",
        "id": 203145517,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594148627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/lean.20--make.20doesn't.20show.20sorries.20the.20second.20time.20round/near/203144599\">said</a>:</p>\n<blockquote>\n<p>If there are errors then Lean doesn't write an .olean file I think, so this is a different situation</p>\n</blockquote>\n<p>Ah I didn't know this, I see</p>",
        "id": 203145532,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594148633
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/e378Vu1YbCb0F0LlKc26lkgy/image.png\">image.png</a> By the way, this is what I wanted it for - it's nice to see at a glance which files are broken by a mathlib bump in a project</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/e378Vu1YbCb0F0LlKc26lkgy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/e378Vu1YbCb0F0LlKc26lkgy/image.png\"></a></div>",
        "id": 203215102,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594163958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Hey, that looks nice! Are you preparing a PR to leanproject?</p>",
        "id": 203230728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594183146
    },
    {
        "content": "<p>I can, but it's pretty slow and pretty hacky</p>",
        "id": 203230871,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594183322
    },
    {
        "content": "<p>I didn't want to recompile <em>everything</em> each time it's run so it searches for the bytestring \"orry\" in the compiled oleans to check for sorries</p>",
        "id": 203230962,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594183455
    },
    {
        "content": "<p>lol, nice hack</p>",
        "id": 203231136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594183730
    },
    {
        "content": "<p>luckily none of my lemmas are called <code>worry</code></p>",
        "id": 203231153,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594183775
    },
    {
        "content": "<p>Wait till we start formalising self-driving cars. That will give you lots of <code>lorry</code> and <code>worry</code>...</p>",
        "id": 203231618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184504
    },
    {
        "content": "<p>Seriously, <code>worry</code> might have been a better name for <code>sorry</code>. In Isabelle, where it's from, we also have <code>oops</code>, for \"forget this proof attempt\". A common mistake is to mix up <code>oops</code> and <code>sorry</code>, ending up with a \"lemma\" one knows is unprovable. The names are clever and funny, but perhaps too clever for their own good.</p>",
        "id": 203234697,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594188850
    },
    {
        "content": "<p>We should take more advantage of the fact that lean supports unicode: I suggest replacing <code>sorry</code> with <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 203234965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594189306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> was recommending less cleverness and more clarity.</p>",
        "id": 203273461,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594218288
    },
    {
        "content": "<p>I think Johan understood.</p>",
        "id": 203273775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594218435
    },
    {
        "content": "<p>Historical side remark: as you all know, the synthetic sorrys that Lean inserts for syntax errors are printed as <code>⁇</code>.  Originally I wanted to print them as <code>💩</code>, but then quickly switched to <code>⁇</code> to make it look more professional.</p>",
        "id": 203274566,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594218782
    },
    {
        "content": "<p>/me puts his glasses on</p>",
        "id": 203274648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218839
    },
    {
        "content": "<p>eew</p>",
        "id": 203274693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594218846
    }
]