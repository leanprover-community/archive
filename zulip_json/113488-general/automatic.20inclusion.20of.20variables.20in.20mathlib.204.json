[
    {
        "content": "<p>There has been an ongoing discussion for some time about issues with automatic variable inclusion in Lean 4. Here is a quick summary of the discussion.</p>",
        "id": 386619738,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713718
    },
    {
        "content": "<p>Currently, when starting the proof of a theorem (or the body of a definition, it doesn't make a difference), all variables in the context are included and may be used in the proof. When the proof is over, only those variables that have indeed been used are kept for the statement of the theorem (i.e., all the other ones are discarded). This looks nice, but we have faced several issues because of this:</p>\n<ul>\n<li>if in the context there is <code>variable {n : ℕ} (hn : 1 &lt; n) (h'n : 2 &lt; n)</code> and a theorem using <code>hn</code> but not <code>h'n</code>, then <code>induction n</code> will also pull <code>h'n</code> in the assumptions of the theorem. So will <code>subst</code>. The solution is to <code>clear h'n</code> before the induction even though <code>h'n</code> should not be in sight anywhere.</li>\n<li>When cleaning up a proof, say by using lemma B instead of lemma A in the proof, new typeclass assumptions may be pulled in by lemma B and weaken the initial statement. All this will go unnoticed (no linter can help here).</li>\n<li>In files which are heavy on typeclass assumptions (say files on vector bundles), the goal view is cluttered by dozens of lines of typeclass assumptions which are not relevant for the lemma being currently proved.</li>\n</ul>",
        "id": 386619781,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713729
    },
    {
        "content": "<p>The Lean 3 behavior was less clever, but more predictable. It went like this:</p>\n<ul>\n<li>include for a lemma or a def all the variables that are mentioned explicitly in the statement of the lemma, and in its body if it is in term mode.</li>\n<li>Also include all the typeclass assumptions about these variables which are in the context, and unnamed.</li>\n<li>There was also a mechanism where <code>include hf</code> would force inclusion of <code>hf</code> in all the forthcoming statements, until the end of the section or until <code>omit hf</code> was encountered.</li>\n</ul>",
        "id": 386619826,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713741
    },
    {
        "content": "<p>This wasn't perfect either. Especially, the <code>include / omit</code> mechanism made things quite hard to parse for the user, and was one of the issues that prompted for a different mechanism in Lean 4.</p>",
        "id": 386619875,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713758
    },
    {
        "content": "<p>Based on several discussions, the following was proposed, which would probably improve both on the Lean 3 and Lean 4 behavior. It would be based on the Lean 3 behavior but removing some sharp edges:</p>\n<ul>\n<li>Include for a lemma or a def all the variables that are mentioned explicitly in the statement of the lemma (not its proof, even in term mode)</li>\n<li>Also include all the typeclass assumptions about these variables which are in the context, and unnamed (edit: possibly also named ones, see the discussion below).</li>\n<li>Allow <code>include hf hg in</code> before the statement of a theorem, to include <code>hf</code> and <code>hg</code> in the theorem (and all the unnamed typeclass assumptions that depend on them, as above). (edit: maybe also <code>omit h in</code> to remove a named typeclass assumption, see discussion below).</li>\n<li>No global <code>include / omit</code> mechanism.</li>\n<li>No automatic removal of unused typeclass assumptions at the end of the proof: Better let the linter signal it, and let the user fix it by hand.</li>\n</ul>",
        "id": 386619962,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713770
    },
    {
        "content": "<p>Another option was mentioned instead of <code>include ... in</code>: If there is some assumption <code>hf</code> in the context, then <code>theorem foo ... (hf) ...</code> would force the inclusion of <code>hf</code> in the theorem, without the need to restate its type. And one could adapt binders, for instance with <code>theorem foo ... {hf} ...</code>.</p>",
        "id": 386620017,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713785
    },
    {
        "content": "<p>Here is a poll to see what mathlib folks think of these different options. What core would think of it is another issue, but before anything it would be useful to know what mathlib prefers.</p>",
        "id": 386620057,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713796
    },
    {
        "content": "<p>/poll How should mathlib4 include variables in theorems</p>\n<ul>\n<li>current Lean 4 behavior: include everything in scope, remove unused stuff by the end of the proof.</li>\n<li>Lean 3 behavior.</li>\n<li>above proposal, with <code>include hf in</code> to force the inclusion of <code>hf</code>.</li>\n<li>above proposal, with <code>theorem foo ... (hf) ...</code> to force the inclusion of <code>hf</code>.</li>\n</ul>",
        "id": 386620103,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713810
    },
    {
        "content": "<p>I'm mainly opening the discussion, and possibly missing interesting points, so additional discussion is most welcome!</p>",
        "id": 386620279,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692713860
    },
    {
        "content": "<p>I really don't miss the Lean3 behavior being dependent on wether typeclass assumptions were named or not. Besides, we probably want way more named arguments in Lean4 to be able to specify them manually. I'm really looking forward to being able to use that extensively in the topology library (I was even thinking of systematically naming all <code>TopologicalSpace</code> assumptions), but making named TC arguments work differently than unnamed ones would seriously discourage people from using it in that case.</p>",
        "id": 386623084,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692714598
    },
    {
        "content": "<p>I think it would be still be nice to retain the option of keeping the current Lean 4 behavior; so far I've found it a lot more pleasant than the constant micromanagement of variables in Lean 3, and haven't had any of these issues bite me so far.</p>",
        "id": 386623331,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1692714657
    },
    {
        "content": "<p>The problem is that we don't have a net to catch these errors for now...</p>",
        "id": 386623509,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692714701
    },
    {
        "content": "<p>The <code>include in</code> feature will already be way better than <code>include</code>/<code>omit</code> in Lean3 imo, because we no longer have to be smart about it by grouping together lemmas that require the same variables and so on.</p>",
        "id": 386623950,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692714803
    },
    {
        "content": "<p>Sure, but it would be still be nice to be able to opt out of the Lean 3 style for the 99% of the time when the current Lean 4 behavior works well.</p>",
        "id": 386624202,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1692714862
    },
    {
        "content": "<p>The problem with the Lean 4 behavior is that you can't know if it worked well or not (and maybe it works well at some point in time, but it doesn't after some refactor). And there is no linter to help us catch its mistakes.</p>",
        "id": 386625337,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692715151
    },
    {
        "content": "<p>I agree that having more named instances would be a good idea, and is not compatible with automatic inclusion of unnamed instances only. Another option would be to include all instances that depend on already included variables, be they named or not. This would force a little bit more micromanagement, but it would also increase readability and predictability, IMHO.</p>",
        "id": 386626321,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692715369
    },
    {
        "content": "<p>If necessary, you could imagine having</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">omit</span> <span class=\"n\">myNamedInst</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">HodgeConjecture</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 386627022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1692715534
    },
    {
        "content": "<p>Some smaller suggestions:</p>\n<ul>\n<li><code>include (hf) {hg} in</code> might be nice to force the inclusion and update the binder type at the same time - and this can also be used to update the binder type even if the theorems statement mentions <code>hf</code> or <code>hg</code>. I like that syntax better than the <code>theorem foo (hf) {hg}</code> syntax.</li>\n<li>Do not re-elaborate variables for every declaration separately, but only once. This was causing performance issues before, and I think it's a bug - not a feature - that variable types can be elaborated differently for the two options (I think it's also a feature that variable types generally have a universe variable as universe level).</li>\n</ul>\n<p>Shall I make new options for these? Or is the proposal flexible enough to encapsulate (at least) the first suggestion?</p>",
        "id": 386627216,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1692715576
    },
    {
        "content": "<p>These are all very good ideas. I'd say let's not add new suggestions to the poll for now, and perhaps make a second finer poll once the discussion has settled a little bit. It will make it easier to see big trends.</p>",
        "id": 386627802,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692715733
    },
    {
        "content": "<p>I think that limiting the scope of <code>include/omit</code> to single declarations is generally an improvement.</p>\n<p>I also like Florian's syntax.</p>\n<p>Maybe, there should be also a stricter naming scheme for assumptions: I've found the new option of calling out assumptions by their label awesome and would like to be able to guess them more reliably!</p>",
        "id": 386627848,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692715744
    },
    {
        "content": "<p>In any case, if <em>all</em> the variables that I see in the infoview survive in the final type, that would already be an improvement.  Right now, I am always worried that something that I'm not \"using\" ends up being part of the declaration.</p>",
        "id": 386629273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692716079
    },
    {
        "content": "<p>(That and the unused variable linter pointing out unused stuff.)</p>",
        "id": 386629488,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692716152
    },
    {
        "content": "<p>Can't you just hover the mouse over the lemma name to see what declaration was generated? Am I missing something here?</p>",
        "id": 386630270,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1692716379
    },
    {
        "content": "<p>You can, but you're probably not going to remember to do it after every refactor...</p>",
        "id": 386630483,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692716429
    },
    {
        "content": "<p>Or if you decide to add another assumption to the <code>variable</code> declaration at the beginning of a section.</p>",
        "id": 386630982,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692716559
    },
    {
        "content": "<p>I like Floris' suggestion too, I think it's the best of both worlds. It's very often theorem by theorem what things should be explicit, even in a section, and being able to make things ex/implicit at will is great</p>",
        "id": 386644211,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692720400
    },
    {
        "content": "<p>RFC at <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean4#2452</a></p>",
        "id": 386937326,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692818732
    },
    {
        "content": "<p>It would be great if we could hear from any <em>non-Mathlib</em> users of Lean, and how this would effect them. If anyone feels they are in that category, please speak up!</p>",
        "id": 386966033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692834960
    },
    {
        "content": "<p>I haven't had time to consider the details, and how they affect my projects. I dont think this will happen overnight given the size and nature of the proposal, and the subtle errors that it might introduce. But I have a question and one suggestion for the  process of introducing such changes:</p>\n<ol>\n<li>Can all these features be (at least initially)implemented as locally set options at the file or project lakefile level, which are not set by default for non-mathlib projects?</li>\n<li>Perhaps these options be tested on some experimental branch of mathlib for some time before being introduced to the main branch.</li>\n</ol>",
        "id": 387351354,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1693002567
    }
]