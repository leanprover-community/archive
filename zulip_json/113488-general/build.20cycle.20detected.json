[
    {
        "content": "<p>Turns out that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">build</span> <span class=\"n\">cycle</span> <span class=\"n\">detected</span><span class=\"o\">:</span>\n  <span class=\"bp\">+</span><span class=\"n\">Game.Levels.Tutorial</span><span class=\"o\">:</span><span class=\"n\">lean.precompileImports</span>\n  <span class=\"bp\">+</span><span class=\"n\">Game.Levels.Tutorial</span><span class=\"o\">:</span><span class=\"n\">lean.precompileImports</span>\n</code></pre></div>\n<p>actually means \"you can't import a file whose name starts with a numeral\". This came about because I was changing a bunch of names of files from <code>Level_01.lean</code>, <code>Level_02.lean</code>.. into names like <code>add_comm.lean</code> and <code>add_assoc.lean</code>, and a passing computer scientist said \"add the numbers at the front so they'll be sorted correctly in VS Code\". I'm now going for <code>L04add_comm.lean</code>.</p>",
        "id": 381977280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691183527
    },
    {
        "content": "<p>Mathematics in Lean uses the same solution.</p>",
        "id": 382026130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691206933
    },
    {
        "content": "<p>Does <code>import «01-add_comm»</code> not work?</p>",
        "id": 382224579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691269181
    },
    {
        "content": "<p>Do I need to put the package name in front of that?</p>",
        "id": 382238905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691278691
    },
    {
        "content": "<p>I would strongly prefer we avoid french quotes in import statements, even to the point of proposing to disallow them. Whatever gain you think you're getting locally is outweighed by the suffering of the ecosystem having to cope with weird names.</p>",
        "id": 382238990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691278772
    },
    {
        "content": "<p>something like <code>L02_AddComm.lean</code> sounds like the right thing to do</p>",
        "id": 382298220,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691310512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/build.20cycle.20detected/near/381977280\">said</a>:</p>\n<blockquote>\n<p>\"you can't import a file whose name starts with a numeral\"</p>\n</blockquote>\n<p>That sounds like a bug in import parsing, it should give a much cleaner error than that.</p>",
        "id": 382775392,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691449516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/build.20cycle.20detected/near/382238990\">said</a>:</p>\n<blockquote>\n<p>Whatever gain you think you're getting locally is outweighed by the suffering of the ecosystem having to cope with weird names.</p>\n</blockquote>\n<p>While I agree in spirit, we already permit a number of complexities in the import header -- line comments and nested block comments (in arbitrary locations), unicode, and special import keywords (e.g., <code>prelude</code>, <code>runtime</code>) -- that the parser is not trivial anyway. Thus, accounting for french quotes likely adds little complexity.</p>",
        "id": 382776400,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691449937
    },
    {
        "content": "<p>Ugh, but it's needless complexity, verging on complexity for its own sake. Life is <em>better</em> if french quotes are not allowed in imports.</p>",
        "id": 382776740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691450116
    },
    {
        "content": "<p>the complexity isn't needless, this came up in mathport in fact</p>",
        "id": 382776810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691450160
    },
    {
        "content": "<p>also consider that files may be written by tools, not humans, and there may be reasons to use weird characters and/or handle whatever the user provides</p>",
        "id": 382776991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691450232
    },
    {
        "content": "<p>But the correct fix is to rename your files, as they did in MIL. (Note some of the MIL authors above agreeing with this. :-)</p>",
        "id": 382777007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691450241
    },
    {
        "content": "<p>Lake also uses French quotes imports for generating projects, but it could instead follow whatever rules exist.</p>",
        "id": 382777039,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691450263
    },
    {
        "content": "<p>I think that having french-quote-free names is a fine project naming convention, but it doesn't belong in lake</p>",
        "id": 382777118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691450291
    },
    {
        "content": "<p>The interesting thing about the Lake use case is it does demonstrate that the lack of French quotes would <em>increase</em> the complexity of project generation code, rather than decrease it. This connects to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s point that tools generate Lean code may like it even if tools consuming Lean code do not. So, there is question of where does the burden belong.</p>",
        "id": 382777409,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691450465
    },
    {
        "content": "<p>Given the already existing complexity of the import header parser, I would be inclined to put the burden there.</p>",
        "id": 382777541,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691450539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/build.20cycle.20detected/near/382775392\">said</a>:</p>\n<blockquote>\n<p>That sounds like a bug in import parsing, it should give a much cleaner error than that.</p>\n</blockquote>\n<p>Looking at the parse code the problem is that encountering <code>import A.0X</code> is parsed as <code>import A</code> and then the <code>.0X</code> as the beginning of the code block. This is fine within the Lean code as it will still produce an error, but for the parse import in Lake, this hides the error (as Lake does not parse the rest of the file until is built) and produces a build loop on <code>A</code>. I will take a look at potentially solving this within the import parser code.</p>",
        "id": 382778632,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691451226
    }
]