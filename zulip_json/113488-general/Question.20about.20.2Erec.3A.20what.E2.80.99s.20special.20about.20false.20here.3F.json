[
    {
        "content": "<p>Why does this work (in Lean 3):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">def</span> <span class=\"n\">false.elim</span><span class=\"bp\">‘</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">false.rec</span> <span class=\"n\">C</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>but this doesn‘t:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">test.elim</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">test.rec</span> <span class=\"n\">C</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>false is defined in exactly the same way as test after all. Also,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">test.rec</span> <span class=\"n\">C</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>works just fine and gives type C.</p>",
        "id": 338609045,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1677596309
    },
    {
        "content": "<p>I think it's a bug/deficiency in the code generator that nobody ever got around to. You can use <code>noncomputable! def</code> as a workaround.</p>",
        "id": 338610014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677596524
    },
    {
        "content": "<p>This worked, thank you! A very strange bug. Wouldn’t this suggest that there’s something special about false internally even though it‘s just a regular inductive type?</p>",
        "id": 338611523,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1677596899
    },
    {
        "content": "<p>I think it's just the code generator that has special knowledge of it</p>",
        "id": 338611747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677596959
    },
    {
        "content": "<p>I see.</p>",
        "id": 338611851,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1677596988
    },
    {
        "content": "<p>Interesting, even this isn't supported:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test.elim</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"kd\">end</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to generate bytecode for 'test.elim'</span>\n<span class=\"cm\">code generation failed, inductive predicate 'simple_graph.test' is not supported</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>That suggests it's special handling of <code>false</code></p>",
        "id": 338611869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677596993
    },
    {
        "content": "<p>Probably <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/compiler/erase_irrelevant.cpp#L188\">here</a> and again ~25 lines later</p>",
        "id": 338612342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677597093
    },
    {
        "content": "<p>I also tried this (which doesn‘t work either, fails at assumption):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test.elim</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">htC</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">@</span><span class=\"n\">test.rec</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">htC</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 338613650,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1677597376
    },
    {
        "content": "<p><del>There is a hard-coded list of <code>.rec</code>s that have native compiler support somewhere within Lean4</del></p>",
        "id": 338614278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677597514
    },
    {
        "content": "<p><del>Notably <code>List.rec</code> and <code>Nat.rec</code> are also absent</del> (edit: nevermind, Lean3)</p>",
        "id": 338614314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677597524
    },
    {
        "content": "<p>Interestingly, this even though a custom <code>false</code> doesn't work, you're free to use a custom <code>eq</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">myrfl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 338615133,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677597698
    },
    {
        "content": "<p>I‘m pretty new to Lean but hard coded facets which actually make a substantial difference are probably not the best idea.</p>",
        "id": 338615832,
        "sender_full_name": "Mario Weitzer",
        "timestamp": 1677597846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I guess that one's because the equation compiler proved <code>false</code> and then used <code>false.rec</code>?</p>",
        "id": 338616643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677597994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595391\">Mario Weitzer</span> <a href=\"#narrow/stream/113488-general/topic/Question.20about.20.2Erec.3A.20what.E2.80.99s.20special.20about.20false.20here.3F/near/338615832\">said</a>:</p>\n<blockquote>\n<p>I‘m pretty new to Lean but hard coded facets which actually make a substantial difference are probably not the best idea.</p>\n</blockquote>\n<p>Just to be clear, this \"hard coded facet\" has no incidence on the soundness of the system: Lean won't accept any proof about <code>false</code> that it wouldn't accept for your <code>test</code>. This is purely a code generation thing (i.e when you actually want to get an executable from your Lean code), so if you're not interested in that then it won't change anything.</p>",
        "id": 339391290,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1677861127
    }
]