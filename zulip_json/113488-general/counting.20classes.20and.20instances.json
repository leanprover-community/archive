[
    {
        "content": "<p>Is there an easy way to get a rough (or exact) estimate of the number of classes and instances in Mathlib? <code>grep</code> and <code>wc</code> overcount the occurrences of the word \"class\" or \"instance\" in comments. I can try my hand at metaprogramming, but any pointers or hints will be appreciated.</p>",
        "id": 396939958,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1697474365
    },
    {
        "content": "<p>A quick-and-dirty approximation for a given namespace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Instances</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">countClassesAndInstances</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">classExtension.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">classes</span> <span class=\"o\">:=</span> <span class=\"n\">s.outParamMap.fold</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.push</span> <span class=\"n\">k</span>\n  <span class=\"k\">let</span> <span class=\"n\">classes</span> <span class=\"o\">:=</span> <span class=\"n\">classes.filter</span> <span class=\"n\">ns.isPrefixOf</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">instanceExtension.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">instances</span> <span class=\"o\">:=</span> <span class=\"n\">s.instanceNames.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.push</span> <span class=\"n\">k</span>\n  <span class=\"k\">let</span> <span class=\"n\">instances</span> <span class=\"o\">:=</span> <span class=\"n\">s.erased.fold</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">instances</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.erase</span> <span class=\"n\">k</span>\n  <span class=\"k\">let</span> <span class=\"n\">instances</span> <span class=\"o\">:=</span> <span class=\"n\">instances.filter</span> <span class=\"n\">ns.isPrefixOf</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">classes.size</span><span class=\"o\">,</span> <span class=\"n\">instances.size</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">classes: 144</span>\n<span class=\"cm\">instances: 1526</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">numClasses</span><span class=\"o\">,</span> <span class=\"n\">numInstances</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">countClassesAndInstances</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"classes: {numClasses}\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"instances: {numInstances}\"</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">classes: 35</span>\n<span class=\"cm\">instances: 772</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">numClasses</span><span class=\"o\">,</span> <span class=\"n\">numInstances</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">countClassesAndInstances</span> <span class=\"bp\">`</span><span class=\"n\">Lean</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"classes: {numClasses}\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"instances: {numInstances}\"</span>\n</code></pre></div>",
        "id": 396943249,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697475650
    },
    {
        "content": "<p>With <code>import Mathlib</code>, that's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">classes</span><span class=\"o\">:</span> <span class=\"mi\">22071</span>\n<span class=\"n\">instances</span><span class=\"o\">:</span> <span class=\"mi\">1296</span>\n</code></pre></div>",
        "id": 396943870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697475916
    },
    {
        "content": "<p>I assume those are backwards and I copied your code just before the edit!</p>",
        "id": 396944004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697475951
    },
    {
        "content": "<p>Thanks! While waiting, I decided not to be so lazy, so I tried adapting <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20graphs/near/378851049\">some code that Floris once wrote</a>. I came up with this, which reports almost the same results on an older version of Mathlib, i.e. 1293 classes and 22110 instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getClassAndInstanceCounts</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">classes</span> <span class=\"o\">:=</span> <span class=\"n\">classExtension.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">outParamMap</span>\n  <span class=\"k\">let</span> <span class=\"n\">instances</span> <span class=\"o\">:=</span> <span class=\"n\">instanceExtension.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">instanceNames</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"classes: {classes.size}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"instances: {instances.size}\"</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"n\">getClassAndInstanceCounts</span>\n</code></pre></div>\n<p>I guess Mac is filtering out anonymous classes and instances. I'll check to see how much of a difference that makes..</p>",
        "id": 396945924,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1697476587
    },
    {
        "content": "<p>Oh, I see, Mac's code lets us filter for any prefix. Thanks!</p>",
        "id": 396946407,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1697476788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> It also filters out instances which have been erased, which may or may not be desirable in your use case.</p>",
        "id": 396946532,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697476828
    },
    {
        "content": "<p>What does it mean for an instance to have been erased?</p>",
        "id": 396947878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697477421
    },
    {
        "content": "<p>I think it means you've written <code>attribute [-instance] Foo</code>. I believe those erasures a local, so it shouldn't matter.</p>",
        "id": 396970736,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697487083
    },
    {
        "content": "<p>I think <code>attribute [local instance] Foo</code> counts as an erased instance too? My understanding was that local instances were globally registered then globally erased, but that was a guess after a cursory read of the source.</p>",
        "id": 396977151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697490303
    }
]