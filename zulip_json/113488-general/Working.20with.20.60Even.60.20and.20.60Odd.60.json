[
    {
        "content": "<p>I've been struggling to work with the <code>Even</code> and <code>Odd</code> rules. They often seem to behave as if they are opaque to other tactics, and <code>Odd n</code> keeps getting simplified to <code>¬Even n</code> when I'm not looking, preventing simplification rules defined in terms of <code>Odd n</code> from working.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span>  <span class=\"bp\">¬</span><span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So for example, this target won't simplify out the if/else case. To get simp to start to work on it, I have to do quite a lot of work by hand to unpack the <code>even</code>s, by which time something have gotten themselves messy. It should be obvious that this can be simpified as-is to <code>3 * n + 1</code>.</p>\n<p>But it's worse than that. What I actually wanted to work with was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I actually need the witness for <code>Odd n</code> to provide the witness to the outer <code>Even _</code>. But the simplifier eagerly flips it, loosing the witness in the process.</p>\n<p>Am I doing things wrongly? It feels like I'm fighting the library which is usually a sign that I'm not using it as intended.</p>",
        "id": 389746740,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694116880
    },
    {
        "content": "<p><code>Nat.odd_iff_not_even</code>. Let me fix that.</p>",
        "id": 389747084,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694116959
    },
    {
        "content": "<p>In this particular case you probably do want \"not even n\" because you can then <code>intro h; rw [if_neg h]</code> to simplify the if/then.</p>",
        "id": 389750271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694117830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Working.20with.20.60Even.60.20and.20.60Odd.60/near/389750271\">said</a>:</p>\n<blockquote>\n<p>In this particular case you probably do want \"not even n\" because you can then <code>intro h; rw [if_neg h]</code> to simplify the if/then.</p>\n</blockquote>\n<p>OK, but I also need the outer Odd, as I need to get its existential -- I need that variable to unify at the other end to prove the rhs Even constraint.</p>",
        "id": 389751252,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694118140
    },
    {
        "content": "<p>Maybe post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to better explain your question? This is by far the most efficient way to ask a Lean question.</p>",
        "id": 389753030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694118670
    },
    {
        "content": "<p>This was the code I ended up with in the end. I'm not particularly happy with it, particularly the step where I do some gymnastics to reduce the if statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">collatz</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">collatz_odd_to_even</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hon</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">collatz</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Iff.mp</span> <span class=\"n\">Nat.odd_iff_not_even</span> <span class=\"n\">hon</span><span class=\"o\">]</span> <span class=\"c1\">-- reduce the if statement</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hon</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Even</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.two_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 389760311,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694121918
    },
    {
        "content": "<p>If you abuse definitional equality and use <code>ring</code> you can get your version down to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">collatz_odd_to_even</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hon</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">collatz</span><span class=\"o\">,</span> <span class=\"n\">Iff.mp</span> <span class=\"n\">Nat.odd_iff_not_even</span> <span class=\"n\">hon</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">]</span> <span class=\"c1\">-- reduce the if statement</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hon</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 389761111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694122232
    },
    {
        "content": "<p>Here's a version which avoids the <code>Iff.mp</code> thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">collatz_odd_to_even</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hon</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hon</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">collatz</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hon</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 389762645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694122674
    },
    {
        "content": "<p>Thanks! The <code>ring</code> tactic is a godsend here. I wish I'd known about it sooner.</p>",
        "id": 389764439,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694123602
    },
    {
        "content": "<p>there's a <code>parity_simps</code> simp-set somewhere</p>",
        "id": 389765421,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694124155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Working.20with.20.60Even.60.20and.20.60Odd.60/near/389747084\">said</a>:</p>\n<blockquote>\n<p><code>Nat.odd_iff_not_even</code>. Let me fix that.</p>\n</blockquote>\n<p>Yeah this being <code>simp</code> has annoyed me very often, I don't think it's particularly good as a simp lemma</p>",
        "id": 389768643,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694125973
    },
    {
        "content": "<p>Can I enable <code>parity_simps</code> locally within a file? I tried <code>attribute [local simp] parity_simps</code> but it didn't seem to like that. Also, can I disable <code>Nat.odd_iff_not_even</code> from being considered as a simp within my file? I can put <code>parity_simps</code> within a simp, but I can't see how to just enable it everywhere.</p>",
        "id": 390149104,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694354464
    },
    {
        "content": "<p>As far as a I know that's not possible directly at the moment, you could easily define a macro that does <code>simp [parity_simps]</code> though, but making a version of that that's more flexible might be more trouble than it's worth depending how long your file is.</p>",
        "id": 390149414,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694354652
    },
    {
        "content": "<p><code>parity_simps</code> is a simp set, not one lemma, so I doubt <code>attribute [local simp] parity_simps</code> will work. For removing simp does <code>attribute [-simp] Nat.odd_iff_not_even</code> work? A more aggressive approach would be to PR the change removing <code>simp</code> from that lemma becasue people have complained before about it being in the simp set.</p>",
        "id": 390149449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694354682
    },
    {
        "content": "<p>I'm not aware of it, but it seems like it'd be a reasonable command to add to mathlib (where you take every lemma in a simp set and give it the <code>simp</code> attribute locally). Feel free to create a mathlib4 issue describing what you want and what problems this solves.</p>",
        "id": 390149454,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694354685
    },
    {
        "content": "<p>While on the face of it it doesn't seem that saving the extra keystrokes in <code>simp [parity_simps]</code> is worth it, there's automation that calls <code>simp</code> so this command would enable that automation to use <code>parity_simps</code> lemmas locally.</p>",
        "id": 390149619,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694354819
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/issues/7082\">https://github.com/leanprover-community/mathlib4/issues/7082</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/issues/7083\">https://github.com/leanprover-community/mathlib4/issues/7083</a></p>",
        "id": 390150827,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694355629
    }
]