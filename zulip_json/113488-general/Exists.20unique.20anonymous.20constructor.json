[
    {
        "content": "<p>What is the following anonymous constructor doing? It seems somehow to be proving existence &amp; uniqueness at the same time.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_points.exists_unique_point</span> <span class=\"o\">[</span><span class=\"n\">has_points</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">≠</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">mk_point</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eq_or_eq</span> <span class=\"n\">hp.1</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hp.2</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>That's from <a href=\"https://github.com/leanprover-community/mathlib/blob/57a30493469f1a4338a5b3237b31ad8e4f3dd661/src/combinatorics/configuration.lean#L94\">line 94 of <code>combinatorics.configuration</code></a></p>",
        "id": 328991327,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676902685
    },
    {
        "content": "<p>Have you looked at the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_unique\">docs#exists_unique</a>?</p>",
        "id": 328991743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676902780
    },
    {
        "content": "<p>Yeah I have. Is there something there that has the answer?</p>",
        "id": 328991948,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1676902814
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"n\">mk_point</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eq_or_eq</span> <span class=\"n\">hp.1</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hp.2</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>is short for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"n\">mk_point</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"o\">⟨</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eq_or_eq</span> <span class=\"n\">hp.1</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hp.2</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"n\">hl</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>which is short for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exists.intro</span> <span class=\"o\">(</span><span class=\"n\">mk_point</span> <span class=\"n\">hl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eq_or_eq</span> <span class=\"n\">hp.1</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hp.2</span> <span class=\"o\">(</span><span class=\"n\">mk_point_ax</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"n\">hl</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 328992156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676902867
    },
    {
        "content": "<p>The <code>exists.intro</code> and <code>and.intro</code> are inferred from the definition at the link I gave</p>",
        "id": 328992311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676902892
    },
    {
        "content": "<p>You can also use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">has_points.exists_unique_point</span>\n</code></pre></div>",
        "id": 329007699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676906564
    }
]