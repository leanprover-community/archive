[
    {
        "content": "<h3>Help with MCC proof</h3>\n<p>Not sure if General is the correct place to post this.  I'm attempting to build a formal proof in lean to accompany an informal proof in a small paper I wrote: <a href=\"https://arxiv.org/abs/2305.00594\">https://arxiv.org/abs/2305.00594</a> and I'm having a hard time porting concepts I've learned from Theorem Proving in Lean / Mathematics in Lean to a bigger problem.</p>\n<p>For additional context, I also wrote a previous post related to help with the limit part: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Help.20proving.20lim_.7Bx-.3Einf.7D.201.2Fx.20.3D.200\">previous post</a>. </p>\n<p>The idea is that I want to prove that the Matthew's Correlation Coefficient<br>\n(MCC) tends towards the Fowlkes--Mallows index (FM) as the number of true<br>\nnegatives in the MCC tends towards infinity.</p>\n<p>I'm starting to get a feel for the lean4 syntax and how to go about using the<br>\nVSCode proof assistant, but there things I'm having trouble with. My thought it<br>\nthat I can writeup how far I've gotten and hopefully ask questions and get<br>\ninsights on how to proceed.</p>\n<p>I think I have a reasonable statement of the problem via this code:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>import Mathlib\nimport Lake\nimport Mathlib.Tactic.Positivity\n\nopen Filter\nopen Real\nopen NNReal\n\n-- The definition of the MCC\nnoncomputable def MCC (tp tn fp fn : ℝ≥0) : ℝ :=\n    ( tp * tn - fp * fn ) /\n        NNReal.sqrt (( tp + fp ) * ( tp + fn ) * ( tn + fp ) * ( tn + fn ) )\n\n-- The definition of FM\nnoncomputable def FM (tp fp fn : ℝ≥0) : ℝ≥0 :=\n    NNReal.sqrt  (( tp / ( tp + fn ) ) * ( tp / ( tp + fp ) ) )\n\n--- The overall goal\n\nvariable (tp fp fn : ℝ≥0)\nnoncomputable def MCC_tn := fun (tn : ℝ≥0) =&gt; MCC tp tn fp fn\nnoncomputable def FM_ := FM tp fp fn\n\ntheorem tendsto_MCC_tn_atTop_FM : Tendsto MCC_tn atTop (nhds FM_) := by {\n  sorry\n}\n</code></pre></div>\n<p>And now I need to fill in the details for <code>tendsto_MCC_tn_atTop_FM</code>. </p>\n<p>I've tried to outline what I think the steps of the proof should look like in pseudo code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"n\">Consider</span> <span class=\"n\">the</span> <span class=\"n\">MCC</span><span class=\"o\">:</span>\n\n<span class=\"n\">MCC</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Expanding</span> <span class=\"n\">the</span> <span class=\"n\">MCC</span><span class=\"o\">:</span>\n\n<span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">-</span> <span class=\"n\">fp</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">((</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Multiply</span> <span class=\"kd\">by</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹/</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span> <span class=\"n\">so</span> <span class=\"n\">we</span> <span class=\"n\">also</span> <span class=\"k\">have</span> <span class=\"n\">to</span> <span class=\"n\">assert</span> <span class=\"n\">tn</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹/</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">-</span> <span class=\"n\">fp</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">((</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">))</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Bring</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"n\">into</span> <span class=\"n\">numer</span> <span class=\"n\">and</span> <span class=\"n\">denom</span> <span class=\"n\">terms</span>\n\n<span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">-</span> <span class=\"n\">fp</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">))</span>\n\n<span class=\"c1\">--- Numerator Algebra ---</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Consider</span> <span class=\"n\">the</span> <span class=\"n\">numerator</span>\n\n<span class=\"n\">Let</span> <span class=\"n\">numer</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">-</span> <span class=\"n\">fp</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">))</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Distribute</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"n\">over</span> <span class=\"n\">the</span> <span class=\"n\">addition</span>\n\n<span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fp</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Commute</span> <span class=\"n\">multiplication</span> <span class=\"n\">and</span> <span class=\"n\">cancel</span> <span class=\"n\">inverses</span>\n\n<span class=\"n\">numer</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fp</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--- Denominator Algebra ---</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Consider</span> <span class=\"n\">the</span> <span class=\"n\">denominator</span>\n\n<span class=\"n\">Let</span> <span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">))</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Bring</span>  <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"n\">inside</span> <span class=\"n\">the</span> <span class=\"n\">sqrt</span>\n\n<span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Commute</span> <span class=\"n\">the</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹'</span><span class=\"n\">s</span>\n\n<span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Distribute</span> <span class=\"n\">the</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹'</span><span class=\"n\">s</span>\n\n<span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Cancel</span> <span class=\"n\">multiplicative</span> <span class=\"n\">inverses</span>\n\n<span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"c1\">--- Limit Part ---</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Recall</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">numer</span>\n\n<span class=\"n\">numer</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fp</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Consider</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">numer</span> <span class=\"n\">as</span> <span class=\"n\">tn</span> <span class=\"n\">tends</span> <span class=\"n\">to</span> <span class=\"n\">infinity</span>\n\n<span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">numer</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">fp</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Cancel</span> <span class=\"n\">the</span> <span class=\"n\">term</span> <span class=\"n\">multiplied</span> <span class=\"kd\">by</span> <span class=\"n\">zero</span>\n\n<span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">numer</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tp</span><span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Recall</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">denom</span>\n\n<span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">tn</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Consider</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">denom</span> <span class=\"n\">as</span> <span class=\"n\">tn</span> <span class=\"n\">tends</span> <span class=\"n\">to</span> <span class=\"n\">infinity</span>\n\n<span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Cancel</span> <span class=\"n\">the</span> <span class=\"n\">terms</span> <span class=\"n\">multiplied</span> <span class=\"kd\">by</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">addative</span> <span class=\"n\">identity</span>\n\n<span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Apply</span> <span class=\"n\">multiplicative</span> <span class=\"n\">identity</span>\n\n<span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Apply</span><span class=\"o\">:</span> <span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">numer</span><span class=\"bp\">/</span><span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">numer</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">denom</span><span class=\"o\">)</span>\n\n<span class=\"n\">Limit</span><span class=\"o\">(</span><span class=\"n\">MCC</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tp</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"c1\">--- Rearrange FM Part</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Consider</span> <span class=\"n\">the</span> <span class=\"n\">FM</span><span class=\"o\">:</span>\n\n<span class=\"n\">FM</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Given</span> <span class=\"n\">mul_fractions</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"bp\">*</span> <span class=\"n\">Given</span> <span class=\"n\">div_is_mul_inv</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span>\n<span class=\"bp\">*</span> <span class=\"n\">Given</span> <span class=\"n\">sqrt_of_square</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">*</span> <span class=\"n\">Given</span> <span class=\"n\">sqrt_of_frac</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">*</span> <span class=\"n\">Given</span> <span class=\"n\">sqrt_one</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Expanding</span> <span class=\"n\">the</span> <span class=\"n\">FM</span><span class=\"o\">:</span>\n\n<span class=\"n\">Real.sqrt</span>  <span class=\"o\">((</span> <span class=\"n\">tp</span> <span class=\"bp\">/</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">/</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Apply</span> <span class=\"n\">div_is_mul_inv</span><span class=\"o\">:</span>\n\n<span class=\"n\">Real.sqrt</span>  <span class=\"o\">((</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Associativity</span> <span class=\"n\">and</span> <span class=\"n\">communitivty</span> <span class=\"n\">to</span> <span class=\"n\">rearange</span> <span class=\"n\">internal</span> <span class=\"n\">terms</span><span class=\"o\">:</span>\n\n<span class=\"n\">Real.sqrt</span>  <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Apply</span> <span class=\"n\">sqrt_of_square</span> <span class=\"n\">to</span> <span class=\"n\">extract</span> <span class=\"n\">tp</span><span class=\"o\">:</span>\n\n<span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Revert</span> <span class=\"n\">to</span> <span class=\"n\">division</span>\n\n<span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span>  <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span><span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Apply</span><span class=\"o\">:</span> <span class=\"n\">mul_fractions</span>\n\n<span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span>  <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">((</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">))</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Apply</span> <span class=\"n\">sqrt_of_frac</span>\n\n<span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span><span class=\"o\">(</span> <span class=\"o\">((</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">))</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Apply</span> <span class=\"n\">sqrt_one</span> <span class=\"n\">and</span> <span class=\"n\">mul</span> <span class=\"n\">identity</span>\n\n<span class=\"n\">FM</span> <span class=\"bp\">=</span> <span class=\"n\">tp</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span><span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">Thus</span> <span class=\"n\">We</span> <span class=\"n\">find</span>\n\n<span class=\"n\">Lim</span><span class=\"o\">(</span><span class=\"n\">MCC</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">FM</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span>\n</code></pre></div>\n<p>So given this pseudo code I'm trying to prove small parts, so I can then apply<br>\nthose intermediate theorems to prove the big statement.</p>\n<p>The one I'm currently trying to solve is the part where I simplify the FM to<br>\nlook like what the LIM(MCC) will look like.  I started with this:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>-- Helper Theorems\n\ntheorem mul_fractions (a b c d : ℝ) : (a/b) * (c/d) = (a * c) / (b * d) := by {\n  ring\n}\n\ntheorem div_is_mul_inv (a b: ℝ) : a / b = a * b⁻¹ := by {\n  ring\n}\n\ntheorem sqrt_one : Real.sqrt 1 = 1 := by {\n  rw [sqrt_eq_one]\n}\n\ntheorem sqrt_of_square (a c : ℝ≥0) : NNReal.sqrt (a * a * c) = a * NNReal.sqrt (c):= by {\n  rw [NNReal.sqrt_mul]\n  rw [NNReal.sqrt_mul_self]\n}\n\ntheorem sqrt_of_frac (a b: ℝ≥0) : NNReal.sqrt (a / b) = (NNReal.sqrt a) / (NNReal.sqrt b) := by {\n  rw [NNReal.sqrt_div]\n}\n\n-- Going to show that FM_v1 simplifies to FM_v2\n\n\nnoncomputable def FM_v1 (tp fp fn : ℝ≥0) : ℝ≥0 :=\n    NNReal.sqrt  (( tp / ( tp + fn ) ) * ( tp / ( tp + fp ) ) )\n\nnoncomputable def FM_v2 (tp fp fn : ℝ≥0) : ℝ≥0 :=\n    tp / NNReal.sqrt  ( ( tp + fn ) * ( tp + fp ) )\n\n\ntheorem FM_simplify : FM_v1 tp fp fn = FM_v2 tp fp fn := by {\n  rw [FM_v1]\n  rw [FM_v2]\n  rw [div_eq_inv_mul]\n  rw [div_eq_inv_mul]\n  rw [div_eq_inv_mul]\n  have u1 := (tp + fn)⁻¹\n  have u2 := (tp + fp)⁻¹\n  -- ?? rw [u1]\n\n  --rw [mul_comm (tp + fn)⁻¹ tp]\n  --rw [mul_comm (tp + fp)⁻¹ tp]\n\n  --rw [← mul_assoc (tp + fn)⁻¹ tp (tp + fp)⁻¹]\n  --rw [← mul_assoc (tp + fp)⁻¹]\n}\n</code></pre></div>\n<p>It was a useful exercise to get a handle on proving the simple helper theorems,<br>\nand I started to make some progress on <code>FM_simplify</code>.</p>\n<p>My current goal state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tp</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">NNReal.sqrt</span> <span class=\"o\">((</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">tp</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">tp</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">NNReal.sqrt</span> <span class=\"o\">((</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span><span class=\"o\">)))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">tp</span>\n</code></pre></div>\n<p>But I was having trouble grouping the <code>tp</code> terms. I wanted to try replacing the<br>\n<code>(...)⁻¹</code> terms with <code>u1</code> and <code>u2</code> to make some of the <code>mul_comm</code> and <code>mul_assoc</code><br>\nrewrites easier to specify where they should be applied, but I <code>rw [u1]</code> didn't<br>\nwork and I don't understand why.</p>\n<p>So in short, I'm looking to learn how to effectively manipulate the goal state.<br>\nSpecifically:</p>\n<ul>\n<li>\n<p>If there is an identity that I want to apply, how I can specify exactly where it should be applied? Do I just have to rely on the pattern matching? </p>\n</li>\n<li>\n<p>How can I do u-substitution on some part of an expression</p>\n</li>\n<li>\n<p>If I have a large nested expression like <code>def foo x := f1 f2 f3 (f4 x + f5 x)</code> how can I \"key-in\" on part of it like <code>f4 x</code>, and work on simplifying only that part?</p>\n</li>\n<li>\n<p>Is there something flawed in my code / thought process. I'm sure there are concepts here I'm not grasping yet, but I'm not sure if any are evident from what I've written.</p>\n</li>\n</ul>",
        "id": 403076727,
        "sender_full_name": "Jonathan Crall",
        "timestamp": 1700445055
    },
    {
        "content": "<p>Maybe you are looking for <code>generalize h2 : (tp + fp)⁻¹ = u2</code>?</p>",
        "id": 403079989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700447251
    },
    {
        "content": "<p>That is helping me get further. Is there a quick way to undo it? i.e. sub the original expression back in for u2?</p>\n<p>EDIT: Figured it out <code>rw [← h2]</code></p>\n<p>Thanks, I got the proof for the FM  part! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_fractions</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">ring</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">div_is_mul_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">ring</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sqrt_one</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_eq_one</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sqrt_inv_rule</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">NNReal.sqrt_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sqrt_of_square</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">):=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.sqrt_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.sqrt_mul_self</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sqrt_of_frac</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">NNReal.sqrt</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">NNReal.sqrt</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NNReal.sqrt_div</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- Going to show that FM_v1 simplifies to FM_v2</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">FM_v1</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"n\">NNReal.sqrt</span>  <span class=\"o\">((</span> <span class=\"n\">tp</span> <span class=\"bp\">/</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">/</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">FM_v2</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"n\">tp</span> <span class=\"bp\">/</span> <span class=\"n\">NNReal.sqrt</span>  <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">FM_simplify</span> <span class=\"o\">:</span> <span class=\"n\">FM_v1</span> <span class=\"n\">tp</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"n\">FM_v2</span> <span class=\"n\">tp</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">FM_v1</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">FM_v2</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_inv_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_inv_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_inv_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u1</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u2</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">u1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u3</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">u2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">u4</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">u3</span> <span class=\"n\">tp</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">u4</span> <span class=\"n\">tp</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span> <span class=\"n\">tp</span> <span class=\"n\">u3</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">u3</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">u3</span> <span class=\"n\">tp</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span> <span class=\"n\">tp</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">tp</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_of_square</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h4</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_inv_rule</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">tp</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Any comments on how I could do this better would be appreciated.</p>",
        "id": 403085372,
        "sender_full_name": "Jonathan Crall",
        "timestamp": 1700450941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"655039\">Jonathan Crall</span> <a href=\"#narrow/stream/113488-general/topic/Help.20Understanding.20Goal.20Manipulation/near/403076727\">said</a>:</p>\n<blockquote>\n<ul>\n<li>If I have a large nested expression like <code>def foo x := f1 f2 f3 (f4 x + f5 x)</code> how can I \"key-in\" on part of it like <code>f4 x</code>, and work on simplifying only that part?</li>\n</ul>\n</blockquote>\n<p>This sounds like the exact purpose of <a href=\"https://lean-lang.org/theorem_proving_in_lean4/conv.html\"><code>conv</code> mode</a></p>",
        "id": 403088885,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1700453260
    },
    {
        "content": "<p>@Timo Carlin-Burns conv has been helpful at keying in on things. Thanks for the pointer.</p>\n<p>I'm getting a lot farther, but I've found myself somewhat stuck again. First, I've figured out how to \"get past\" things I haven't solved yet, but know are true, using the axiom keyword. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">factor_rule1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">factor_rule2</span> <span class=\"o\">(</span><span class=\"n\">tn</span> <span class=\"n\">fn</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">u3</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"n\">tn</span> <span class=\"bp\">*</span> <span class=\"n\">u3</span> <span class=\"bp\">*</span> <span class=\"n\">u1</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"bp\">/</span> <span class=\"n\">tn</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u3</span> <span class=\"bp\">*</span> <span class=\"n\">u1</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I found these above 2 rules useful in the next part of the proof, but they rely on the fact that <code>a &gt; 0</code> in the first case and <code>tn &gt; 0</code> in the second case, otherwise there can be a divide by zero. Thus I can't prove these as theorems because they aren't true. I'm wondering what is the right way to go about encoding these as theorems such they are aware of the fact that these variables will be positive in the proof I ultimately intend to use them in?</p>\n<p>And on that note, here is the code that I use these two rules in. First the \"working\" version. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mcc_denoms_eq</span>\n    <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"n\">tn</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"c1\">--(tn_is_pos: tn &gt; 0)</span>\n    <span class=\"o\">:</span>\n    <span class=\"c1\">-- MCC_sqrd_denom_v1 tp tn fp fn =</span>\n    <span class=\"c1\">-- MCC_sqrd_denom_v2 tp tn fp fn := by {</span>\n   <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">=</span>\n   <span class=\"n\">tn</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span><span class=\"bp\">/</span><span class=\"n\">tn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span><span class=\"bp\">/</span><span class=\"n\">tn</span> <span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"c1\">--rw [MCC_sqrd_denom_v1]</span>\n  <span class=\"c1\">--rw [MCC_sqrd_denom_v2]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">factor_rule1</span> <span class=\"n\">tn</span> <span class=\"n\">fp</span><span class=\"o\">]</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"bp\">=</span> <span class=\"n\">u1</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"n\">u2</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"bp\">=</span> <span class=\"n\">u3</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"n\">u4</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">factor_rule2</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h4</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>You'll notice in the above code, I have some things commented out. First is my initial attempt to make tn positive. Second is in my statement of the theorem.  While I have definitions of <code>MCC_sqrd_denom_v1</code> and <code>MCC_sqrd_denom_v2</code>, for some reason the proof doesn't seem to work unless I paste in their manual definitions. I would have thought a <code>rw</code> would have fixed it, but this gives errors, and I'm not sure why: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MCC_sqrd_denom_v1</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"n\">tn</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MCC_sqrd_denom_v2</span> <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"n\">tn</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"n\">tn</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">*</span>  <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span><span class=\"bp\">/</span><span class=\"n\">tn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span><span class=\"bp\">/</span><span class=\"n\">tn</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mcc_denoms_eq</span>\n    <span class=\"o\">(</span><span class=\"n\">tp</span> <span class=\"n\">tn</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span>\n    <span class=\"n\">MCC_sqrd_denom_v1</span> <span class=\"n\">tp</span> <span class=\"n\">tn</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"bp\">=</span>\n    <span class=\"n\">MCC_sqrd_denom_v2</span> <span class=\"n\">tp</span> <span class=\"n\">tn</span> <span class=\"n\">fp</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MCC_sqrd_denom_v1</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MCC_sqrd_denom_v2</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">factor_rule1</span> <span class=\"n\">tn</span> <span class=\"n\">fp</span><span class=\"o\">]</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"bp\">=</span> <span class=\"n\">u1</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"n\">u2</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"bp\">=</span> <span class=\"n\">u3</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"n\">fn</span> <span class=\"bp\">=</span> <span class=\"n\">u4</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">factor_rule2</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h4</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>It is complaining about applying <code>factor_rule1</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">tn</span> <span class=\"bp\">*</span> <span class=\"n\">tn</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fp</span> <span class=\"bp\">/</span> <span class=\"n\">tn</span><span class=\"o\">)</span>\n<span class=\"n\">tptnfpfn</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">fp</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">fp</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">tn</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">↑</span><span class=\"n\">tn</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">tn</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">fp</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">tn</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">fp</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">tp</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">fn</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">tn</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It looks like I may have introduced an unbound variable or something, such that my <code>rw [MCC_sqrd_denom_v1]</code> and <code>rw [MCC_sqrd_denom_v2]</code> are not replaced with the original <code>tp, tn, fp, fn</code> variables? I'm not quite sure? Can anyone provide insight?</p>",
        "id": 403397676,
        "sender_full_name": "Jonathan Crall",
        "timestamp": 1700578450
    },
    {
        "content": "<p>Adding things that you can't prove as axioms is a really good route towards accidentally assuming something slightly false and thus completely invalidating all of your proof work. As you yourself point out, dividing by zero is typically a bad idea. Just add relevant hypotheses like <code>(ha : 0 &lt; a)</code> in your theorem statements, and then figure out how to prove them; skipping proofs is a dangerous game.</p>",
        "id": 403403190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700580010
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">factor_rule1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">field_simp</span>\n    <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 403403714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700580174
    }
]