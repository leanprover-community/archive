[
    {
        "content": "<p>Consider the following lemma. At the end, I have a diamond on two smul instances. What's the right way to avoid these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">det_eq_elem_of_subsingleton'</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">det</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjugate_subsingleton'</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjugate</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjugate_adjugate'</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">A.det</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A.adjugate.adjugate</span> <span class=\"bp\">=</span> <span class=\"n\">h.unit</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">fintype.card</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">adjugate_subsingleton'</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fintype.card_eq_one_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">h.unit</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.unit_spec</span><span class=\"o\">,</span> <span class=\"n\">det_eq_elem_of_subsingleton'</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">h.unit</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">h.unit</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">gpow_sub</span><span class=\"o\">,</span> <span class=\"n\">gpow_bit0</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span><span class=\"n\">units.coe_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel_comm_assoc</span><span class=\"o\">,</span> <span class=\"n\">gpow_one</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_succ</span><span class=\"o\">,</span>\n              <span class=\"n\">one_apply_eq</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">units.ext_iff.mp</span> <span class=\"n\">hc.symm</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- diamond here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246400399,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626644390
    },
    {
        "content": "<p>In particular, I made the <code>hc</code> hypothesis because <code>smul_eq_mul</code> wouldn't work.</p>",
        "id": 246400468,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626644478
    },
    {
        "content": "<p>One way, of course, is to avoid using <code>h.unit</code> in the lemma statement, and have only nat powers.</p>",
        "id": 246400613,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626644752
    },
    {
        "content": "<p>Can you reduce this any further?</p>",
        "id": 246402663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626647749
    },
    {
        "content": "<p>This diamond is weird - if I do <code>local attribute [ext] has_scalar</code>, then I can close your goal with <code>ext, refl</code></p>",
        "id": 246402703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626647773
    },
    {
        "content": "<p>Which suggests that the two smul actions are defeq</p>",
        "id": 246402708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626647787
    },
    {
        "content": "<p>Ah, here's the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.units</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">mul_action</span> <span class=\"n\">has_scalar</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>  <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 246402813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626648004
    },
    {
        "content": "<p>Ah, and this reveals what's going wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">units.mul_action'</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">has_mul.mul</span> <span class=\"n\">mul_one_class.mul</span> <span class=\"n\">monoid.mul</span> <span class=\"n\">div_inv_monoid.mul</span> <span class=\"o\">,</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">group.mul</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">units.smul_def</span><span class=\"o\">],</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">has_inv.inv</span> <span class=\"n\">div_inv_monoid.inv</span> <span class=\"n\">group.inv</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- {val := x.val * x_1.val, inv := x.inv * x_1.inv, val_inv := _, inv_val := _} =</span>\n    <span class=\"c1\">-- {val := x.val * x_1.val, inv := x_1.inv * x.inv, val_inv := _, inv_val := _}</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The actions agree on <code>val</code>, but disagree on <code>inv</code></p>",
        "id": 246403302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626648865
    },
    {
        "content": "<p>So <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.mul_action'/src\">src#units.mul_action'</a> is at fault here</p>",
        "id": 246403654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626649419
    },
    {
        "content": "<p>What would the inv be then for that definition?</p>",
        "id": 246403697,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626649460
    },
    {
        "content": "<p>I think it should be using a right action, <code>opposite.op r⁻¹ • m⁻¹</code></p>",
        "id": 246403711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626649504
    },
    {
        "content": "<p>I can investigate tomorrow</p>",
        "id": 246403719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626649524
    },
    {
        "content": "<p>I've almost fixed this, but I think the typeclass I need doesn't exist. What additional assumptions does the sorry below need?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n\n<span class=\"c1\">-- turn off the bad instance we're tring to fix</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">units.mul_action'</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">units</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Right actions on units - I can't think if a good way to inherit these from anything we already</span>\n<span class=\"cm\">have -/</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">units.op_has_scalar</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">units.op_mul_action</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">un</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">un.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)),</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Notation just to make the intent behind the sorried lemma clear. -/</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">g</span><span class=\"bp\">`</span> <span class=\"bp\">•&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span>\n<span class=\"kd\">notation</span> <span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"bp\">&lt;•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">g</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">opposite.op</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_smul_mul_smul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">opposite.op_injective</span> <span class=\"bp\">$</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">units.op_equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- A fixed version of `units.mul_action'`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">better_mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inv_smul_mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- note: now only needs monoid not comm_monoid!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.better_mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- ok, no diamond any more</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">units</span>\n</code></pre></div>",
        "id": 246433891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626687167
    },
    {
        "content": "<p>I think the <code>sorry</code> can be expanded as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_assoc</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">op_smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">op_smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- we need `is_scalar_tower` for right actions</span>\n    <span class=\"o\">}</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">units.mul_inv</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">•&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- `smul_comm_class` is too strong here</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 246435053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626688044
    },
    {
        "content": "<p>Does &lt;-units.coe_mul help here?</p>",
        "id": 246446778,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626696861
    },
    {
        "content": "<p>I doubt it, that step is folded into the <code>by rw units.mul_inv</code></p>",
        "id": 246449455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626698662
    },
    {
        "content": "<p>I think the statement at the first <code>sorry</code> is a general statement of <code>m1 * (m2 &lt;• g2) = (m1 * m2) &lt;• g2</code> <del>which may or may not be something that can be expressed with existing typeclasses.</del></p>",
        "id": 246449559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626698738
    },
    {
        "content": "<p>It follows from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_mul_assoc\">docs#smul_mul_assoc</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_smul_comm\">docs#mul_smul_comm</a>, but the requirements for those lemmas are stricter than we need as they go through the intermediate state <code>m1 * (m2 &lt;• g2)  = (m1 &lt;• g2) * m2</code> which isn't true when <code>M</code> and <code>G</code> are the same non-commutative monoid (and therefore  <code>(&lt;•) = (*)</code>).</p>",
        "id": 246449758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626698844
    },
    {
        "content": "<p><code>units.mul_action'</code> is weird anyways, and at odds with the usual meaning of a group acting on a monoid (where the formula should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>m</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><msup><mi>m</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(g.m)^{-1} = g.m^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>; maybe just delete it?</p>",
        "id": 262638603,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637786859
    },
    {
        "content": "<p>e.g., Galois groups acting on fields is a more typical example</p>",
        "id": 262641345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637788617
    },
    {
        "content": "<p>The action is useful because it saves us having to duplicate all the lemmas about groups acting on monoids for coerced units acting on monoids</p>",
        "id": 262644623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637790980
    },
    {
        "content": "<p>Besides, your complaint is equally valid against <code>monoid.to_mul_action</code> when <code>G=M</code>, right?</p>",
        "id": 262644652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637791009
    },
    {
        "content": "<p>These are not actions of groups on monoids in the first place</p>",
        "id": 262644688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637791042
    },
    {
        "content": "<p>Are you using \"monoid\" to also mean \"not a group\"?</p>",
        "id": 262644792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637791103
    },
    {
        "content": "<p>I'm not sure what the right setup is here, but it's definitely weird/confusing to call this an \"action\"</p>",
        "id": 262644824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637791132
    },
    {
        "content": "<p>No, a monoid could be a group</p>",
        "id": 262644834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637791139
    },
    {
        "content": "<p>Or, it's a group acting on a set, and the set is a monoid, but it's not a group acting on a monoid</p>",
        "id": 262645050,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637791262
    },
    {
        "content": "<p>But anyways the point is that if a group <em>is</em> acting on a monoid, then it also acts on the units (of course, just like it acts on anything built from the monoid) but not by the <code>units.mul_action'</code> formula</p>",
        "id": 262645208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637791395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/units.2Emul_action'.20diamond/near/262644652\">said</a>:</p>\n<blockquote>\n<p>Besides, your complaint is equally valid against <code>monoid.to_mul_action</code> when <code>G=M</code>, right?</p>\n</blockquote>\n<p>Yes, this is also not an action, it should be something like \"<code>M</code> acts on its underlying set\"</p>",
        "id": 262646306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637792154
    },
    {
        "content": "<p>I'm not sure I see the problem still. <code>units.mul_action</code> just says \"if there's a group that acts on a set and the set is a monoid, then that group acts in the same way when the set is the units of a monoid\"</p>",
        "id": 262652089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637797445
    },
    {
        "content": "<p>I think what you're after is a <code>units.mul_distrib_mul_action</code>, which is probably missing, but wouldn't be incompatible.</p>",
        "id": 262652113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637797477
    },
    {
        "content": "<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>m</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><msup><mi>m</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(g.m)^{-1} = g.m^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> you ask for is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_inv'\">docs#smul_inv'</a>, which is about <code>mul_distrib_mul_action</code></p>",
        "id": 262652157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637797533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/units.2Emul_action'.20diamond/near/262652113\">said</a>:</p>\n<blockquote>\n<p>I think what you're after is a <code>units.mul_distrib_mul_action</code></p>\n</blockquote>\n<p>Yes, this is the good notion!</p>",
        "id": 262653230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637798503
    },
    {
        "content": "<p><code>mul_distrib_mul_action</code> is a pretty lousy name, but no one suggested a better name when I PR'd it</p>",
        "id": 262653314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637798538
    },
    {
        "content": "<p>I just PR'd that instance in <a href=\"https://github.com/leanprover-community/mathlib/issues/10480\">#10480</a></p>",
        "id": 262653421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637798622
    },
    {
        "content": "<p>It has all the same problems as described with <code>mul_action</code> upthread, but we should be able to fix both instances at once in the future, since the new one carries no new data.</p>",
        "id": 262653515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637798670
    },
    {
        "content": "<p>But those are the wrong conditions!</p>",
        "id": 262653519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637798678
    },
    {
        "content": "<p>It should be simply <code>[group G] [monoid M] [mul_distrib_mul_action G M]</code></p>",
        "id": 262653524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637798695
    },
    {
        "content": "<p><code>[smul_comm_class G M M] [is_scalar_tower G M M]</code> will normally not be true</p>",
        "id": 262653553,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637798732
    },
    {
        "content": "<p>Right, those are a workaround for a problem with right-vs-left actions</p>",
        "id": 262653578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637798758
    },
    {
        "content": "<p>e.g. imagine the symmetric group on 3 letters acting on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Z</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X,Y,Z]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">]</span></span></span></span>, or whatever</p>",
        "id": 262653588,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637798763
    },
    {
        "content": "<p>I think the correct assumptions are <code>[group G] [monoid M] [mul_distrib_mul_action G M] [mul_distrib_mul_action Gᵒᵖ M] [is_symmetric_smul G M]</code>, where the last two are mathematically meaningless noise to make typeclass diamonds go away and make the generalization to <code>mul_action</code> work</p>",
        "id": 262653653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637798811
    },
    {
        "content": "<p>This only makes sense if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> acts on the right by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>g</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">g^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 262653702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637798875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/units.2Emul_action'.20diamond/near/262653588\">said</a>:</p>\n<blockquote>\n<p>e.g. imagine the symmetric group on 3 letters acting on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Z</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X,Y,Z]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">]</span></span></span></span>, or whatever</p>\n</blockquote>\n<p>this is a boring example for <code>units</code>, so throw in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">X^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>Y</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">Y^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>Z</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">Z^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> too</p>",
        "id": 262653922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637799043
    },
    {
        "content": "<p>Perhaps. My plan was to try introducing the <code>is_symmetric_smul</code> typeclass once <a href=\"https://github.com/leanprover-community/mathlib/issues/10457\">#10457</a> is in, and then revisit whether it helps with this units action later</p>",
        "id": 262653925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637799044
    },
    {
        "content": "<p>it's usually not going to happen that both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>∗</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g.(x*y) = (g.x)*(g.y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> and also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>∗</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">g.(x*y) = (g.x)*y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> for instance</p>",
        "id": 262654169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637799258
    },
    {
        "content": "<p>The first one is an action of a group on a monoid, that's why it's so confusing to talk about an action in the context of the second one</p>",
        "id": 262654193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637799290
    },
    {
        "content": "<p>The more normal way to express the hypotheses of <code>mul_action'</code> is that you have a homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo>:</mo><mi>G</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">\\varphi : G \\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and you are writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">gm</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">m</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\varphi(g)m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">m</span></span></span></span></p>",
        "id": 262654360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637799479
    },
    {
        "content": "<p>and also the homomorphism is central</p>",
        "id": 262654405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637799493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/units.2Emul_action'.20diamond/near/262654169\">said</a>:</p>\n<blockquote>\n<p>it's usually not going to happen that both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>∗</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g.(x*y) = (g.x)*(g.y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> and also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>∗</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">g.(x*y) = (g.x)*y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> for instance</p>\n</blockquote>\n<p>Yes, I agree - I think this is good evidence that something is wrong with the assumptions of <del><code>mul_action</code></del> <code>units.mul_action'</code> (which we already knew), but I don't think <a href=\"https://github.com/leanprover-community/mathlib/issues/10480\">#10480</a> is harmful, as it doesn't make anything more wrong, it just adds proofs that things are off.</p>",
        "id": 262654814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637799940
    },
    {
        "content": "<p>do you mean <code>units.mul_action'</code>?</p>",
        "id": 262655321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637800404
    },
    {
        "content": "<p><code>mul_action</code> by itself is fine, it's just a group acting on a set</p>",
        "id": 262655331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637800421
    },
    {
        "content": "<p>If something is wrong then it would be more helpful to add documentation to that effect</p>",
        "id": 262656528,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637801714
    },
    {
        "content": "<p>I am not sure whether we agree about what is wrong.</p>",
        "id": 262656533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637801721
    }
]