[
    {
        "content": "<p>In the Mathematics in Lean book chapter 3 section 1 see <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/b84c5a6b22eeae221c38134a68dfeb9f297aa1d5/MIL/C03_Logic/S01_Implication_and_the_Universal_Quantifier.lean#L46\">Here</a> if I run <code>simp?</code> it produces lemmas that are not applicable. Accepting <code>simp?</code> suggestion of Try this will not change the goal in any way as far as I can tell. I believe this is a bug. <code>simp?</code> if it cannot apply the lemmas in question should give the usual <code>simp only</code> but not emit unusable lemmas. </p>\n<p>Is that right or am I missing something?</p>\n<p>Here is the relevant part extracted into a mwe.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)(</span><span class=\"n\">hy</span><span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">):</span>\n  <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Run simp? here and you get</span>\n  <span class=\"c1\">-- simp only [gt_iff_lt, abs_pos, ne_eq]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n\n <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 374391694,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689111476
    },
    {
        "content": "<p>Offtopic: you can use <code>gcongr</code> here.</p>",
        "id": 374438260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689112634
    },
    {
        "content": "<p>Looking at the output of <code>simp</code> when you set <code>set_option trace.Meta.Tactic.simp true</code>, it seems like what's going on is that <code>simp</code> is trying to apply <code>mul_le_mul_left</code>, which requires proving <code>0 &lt; |x|</code> to apply, and then <code>simp</code> applies those three theorems to simplify this to <code>x ≠ 0</code>. It fails to prove this so it doesn't end up being able to apply <code>mul_le_mul_left</code>.</p>\n<p>If you have that hypotheses available, you can see that simp uses these three lemmas for real</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)(</span><span class=\"n\">hy</span><span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">):</span>\n  <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Try this: simp only [gt_iff_lt, abs_pos, ne_eq, h', not_false_eq_true, mul_le_mul_left]</span>\n  <span class=\"c1\">-- ⊢ |y| ≤ ε</span>\n</code></pre></div>",
        "id": 374438890,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689112868
    },
    {
        "content": "<p>It seems like a bug that <code>simp?</code> isn't discarding these lemmas when it fails to prove <code>x ≠ 0</code></p>",
        "id": 374439093,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689112954
    },
    {
        "content": "<p>Why does it need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=gt_iff_lt#doc\">docs#gt_iff_lt</a> ? Do we have <code>gt</code> in one of these lemmas?</p>",
        "id": 374439101,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689112960
    },
    {
        "content": "<p>And why do we need <code>gt_iff_lt</code> as a <code>simp</code> lemma? <code>gt</code> is reducible.</p>",
        "id": 374439256,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689113034
    },
    {
        "content": "<p>Yeah, I noticed that. In the simp trace, <code>gt_iff_lt</code> doesn't seem to do anything</p>",
        "id": 374439554,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689113157
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span>\n</code></pre></div>",
        "id": 374439672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689113202
    },
    {
        "content": "<p>I've noticed <code>gt_iff_lt</code> appear unnecessarily in <code>simp?</code> results before</p>",
        "id": 374439805,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689113276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/simp.3F.20generates.20.20irrelevant.20lemmas/near/374439093\">said</a>:</p>\n<blockquote>\n<p>It seems like a bug that <code>simp?</code> isn't discarding these lemmas when it fails to prove <code>x ≠ 0</code></p>\n</blockquote>\n<p>FWIW it seems <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  also has a similar idea. He suspects the <code>simp?</code> is trying the lemmas, figuring out they are not useful, but whatever part is backtracking is not clearing the failed lemmas, thus they appear in the output of <code>simp?</code>.</p>",
        "id": 374445448,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689115672
    },
    {
        "content": "<p><code>gt_iff_lt</code> is a bad lean 4 simp lemma</p>",
        "id": 374474642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689129992
    },
    {
        "content": "<p>I'm surprised it doesn't loop</p>",
        "id": 374474656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689130006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/113488-general/topic/simp.3F.20generates.20.20irrelevant.20lemmas/near/374445448\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/simp.3F.20generates.20.20irrelevant.20lemmas/near/374439093\">said</a>:</p>\n<blockquote>\n<p>It seems like a bug that <code>simp?</code> isn't discarding these lemmas when it fails to prove <code>x ≠ 0</code></p>\n</blockquote>\n<p>FWIW it seems <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>  also has a similar idea. He suspects the <code>simp?</code> is trying the lemmas, figuring out they are not useful, but whatever part is backtracking is not clearing the failed lemmas, thus they appear in the output of <code>simp?</code>.</p>\n</blockquote>\n<p>More precisely, it is trying and succeeding to apply them within a nested context of proving the side goal for another simp lemma, most likely <code>mul_le_mul_left</code>, but there is a try block somewhere which discards the whole subproof because it couldn't finish the job and the simp lemma tracking is not similarly rolled back</p>",
        "id": 374477609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689131633
    }
]