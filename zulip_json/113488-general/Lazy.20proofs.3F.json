[
    {
        "content": "<p>I was wondering if there's any systematic way to write lazy proofs to calculate something by brute force. For example, let's say we're trying to prove that the <a href=\"https://en.wikipedia.org/wiki/Ramsey%27s_theorem\">Ramsey number</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>≤</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">R(4,3) \\leq 9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">9</span></span></span></span> by naive brute force. By this I mean simply looking at every dichromatic edge labeling of the complete graph on 9 vertices and finding either a red 4-clique or a blue 3-clique in each. (Pretend for now that the only way is the naive way, as I just want to use it as a toy example.)</p>\n<p>There are over 68 billion labelings, so we don't want to have all the cliques we find present in memory as part of some term at once. We don't even want to wind up with a proof that involves a list with 68 billion small terms. So, I figure the search program ought to run in the kernel when we typecheck a small term, instead of being a program that unfolds to a sensible \"constructive\" term. But how do we actually write a \"brute-force search\" program that runs as part of the typechecking of a proof in the kernel? (Or is there another way to do it altogether?)</p>\n<p>(Has this been discussed already? I searched Zulip but came up empty.)</p>",
        "id": 399381585,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698702452
    },
    {
        "content": "<p>If you set things up to use kernel computation, it is <em>possible</em>, though very difficult, to get transient terms. I think the main challenge you will get with this method is that the caches will get filled up whether you want it or not</p>",
        "id": 399382211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698702815
    },
    {
        "content": "<p>Running programs in the kernel isn't that hard: just write a function which computes a <code>Bool</code> and assert it equals <code>true</code> by <code>rfl</code></p>",
        "id": 399382480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698702950
    },
    {
        "content": "<p>(or by <code>native_decide</code> if you're feeling spicy. This will be much more likely to have transient terms)</p>",
        "id": 399382662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698703032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and I were experimenting with taking advantage of the kernel to prove known mersenne primes up through ones found in the 1980s <a href=\"https://github.com/leanprover-community/mathlib4/blob/lucas_lehmer_tailrec/Archive/Examples/MersennePrimes.lean\">https://github.com/leanprover-community/mathlib4/blob/lucas_lehmer_tailrec/Archive/Examples/MersennePrimes.lean</a></p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/lucas_lehmer_tailrec/Mathlib/NumberTheory/LucasLehmer.lean#L589\">Here's the program</a> run by the kernel, and <a href=\"https://github.com/leanprover-community/mathlib4/blob/lucas_lehmer_tailrec/Mathlib/NumberTheory/LucasLehmer.lean#L681\">this bit of generated proof</a> is what causes it to be computed.</p>\n<p>Everything fits in memory, but it's not generating a giant proof term -- it's just reducing <code>sMod''</code> to some natural number.</p>",
        "id": 399383819,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698703553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lazy.20proofs.3F/near/399382480\">said</a>:</p>\n<blockquote>\n<p>Running programs in the kernel isn't that hard: just write a function which computes a <code>Bool</code> and assert it equals <code>true</code> by <code>rfl</code></p>\n</blockquote>\n<p>Can you capture mathematical content with this strategy, though? I.e. how do you actually show you've e.g. exhausted all possibilities, and/or what's to prevent someone from just saying <code>true</code> in place of running the search program?</p>",
        "id": 399384185,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698703739
    },
    {
        "content": "<p>You have to have a theorem that this function indeed computes a mathematically meaningful value.</p>",
        "id": 399384542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698703938
    },
    {
        "content": "<p>For the Lucas-Lehmer test, that theorem is <a href=\"https://github.com/leanprover-community/mathlib4/blob/lucas_lehmer_tailrec/Mathlib/NumberTheory/LucasLehmer.lean#L639\">here</a></p>",
        "id": 399384582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698703967
    },
    {
        "content": "<p>Ah, ok, neat! I get it now. So is the issue \"just\" (1) to ensure we have transient terms and (2) to somehow not fill up the cache?</p>",
        "id": 399384868,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698704137
    },
    {
        "content": "<p>This is probably not something we can do yet, but just to ask...is there any possibility of using a fast <code>extern</code> program somehow which is verified in lean to do what we think it does? Do we have any means of using lean to verify non-lean programs, yet? (Or can you not even intervene with an <code>extern</code> program during typechecking in the kernel?)</p>",
        "id": 399385742,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698704666
    },
    {
        "content": "<p>that's kind of what <code>native_decide</code> is for</p>",
        "id": 399385863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698704740
    },
    {
        "content": "<p>there are ideas for something intermediate where you use the lean compiler but turn off all the extra features that lead to a larger TCB like <code>implemented_by</code>, <code>extern</code> and <code>opaque</code></p>",
        "id": 399385962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698704795
    },
    {
        "content": "<p>Hmmmm. The appeal for me with brute force checking is really being sure that the code is doing what it says, seeing as it's impossible to examine fully how it's working in these cases. so having the smallest TCB is pretty important</p>",
        "id": 399386356,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698705050
    },
    {
        "content": "<p>Also with <code>native_decide</code> you can't create your <em>own</em> extern functions and then prove things about them, right? That's really what I'm wondering.</p>",
        "id": 399386419,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698705108
    },
    {
        "content": "<p>I'm not sure what you mean, you can make any function you want, subject to the constraint that it is the lean compiler that is compiling it</p>",
        "id": 399386927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698705489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/Lazy.20proofs.3F/near/399386356\">said</a>:</p>\n<blockquote>\n<p>Hmmmm. The appeal for me with brute force checking is really being sure that the code is doing what it says, seeing as it's impossible to examine fully how it's working in these cases. so having the smallest TCB is pretty important</p>\n</blockquote>\n<p>Like Kyle said, if you have a Bool function for doing a brute force search, it's typically easy to prove a general theorem that says it does what it is supposed to do</p>",
        "id": 399386979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698705537
    },
    {
        "content": "<p><del>What about the issues with transient terms and the cache that you mentioned?</del> Oh, maybe I misread the scope of your message.</p>",
        "id": 399387004,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698705557
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_correct</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.forall_lt_succ.2</span> <span class=\"o\">⟨</span><span class=\"n\">ih</span> <span class=\"n\">h.2</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">foo_correct</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 399387321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698705800
    },
    {
        "content": "<p>this is more or less how <code>Decidable</code> instances work</p>",
        "id": 399387429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698705859
    },
    {
        "content": "<p>If you use <code>set_option trace.Meta.isDefEq true in</code> on the example and scroll to the very last <code>✅ foo 10 = foo 10 =?= foo 10 = true</code> subgoal you will see it evaluating the search one step at a time</p>",
        "id": 399387610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698705990
    },
    {
        "content": "<p>Oh, ok! Is that happening in the kernel or during elaboration? My expectation would be that that's an elaboration-time thing. (Is it both?)</p>",
        "id": 399387662,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698706039
    },
    {
        "content": "<p>Both</p>",
        "id": 399387666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698706045
    },
    {
        "content": "<p>You can't trace the kernel evaluation (unless you stick a <code>dbg_trace</code> in lean4lean)</p>",
        "id": 399387700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698706073
    },
    {
        "content": "<p>That latter point was what I thought, yeah</p>",
        "id": 399387722,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698706084
    },
    {
        "content": "<p>You can skip the elaborator evaluation if you write a suitable tactic</p>",
        "id": 399387780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698706109
    },
    {
        "content": "<p>Right, makes sense</p>",
        "id": 399387802,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698706127
    },
    {
        "content": "<p>So I guess the issue to expect is mainly the cache issue, right? Is there any way around that (without trusting more code)?</p>",
        "id": 399387831,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698706155
    },
    {
        "content": "<p>well, that and also the kernel WHNF is not very good</p>",
        "id": 399387859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698706188
    },
    {
        "content": "<p>but modulo constant factors maybe you can ignore that</p>",
        "id": 399387954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698706229
    },
    {
        "content": "<p>If you don't write the function in just the right way it will build up a thunk during the search instead of evaluating everything like you would expect</p>",
        "id": 399387976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698706250
    },
    {
        "content": "<p>I'm not even sure it is possible to force everything that needs to be forced and prevent a buildup of terms</p>",
        "id": 399388002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698706278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lazy.20proofs.3F/near/399386927\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what you mean, you can make any function you want, subject to the constraint that it is the lean compiler that is compiling it</p>\n</blockquote>\n<p>In the message above this I was considering specifically the ability to not have the lean compiler compile it! (I'm exploring several possibilities at once here.) That is, you write your code in another (faster) language, and prove something about its behavior (or the behavior of its compiled version) in Lean—and then use it in Lean to do the search you need to do.</p>\n<p>I'm not expecting this to exist yet, it would just be cool—although I imagine it'd require extensive modeling of e.g. the resulting machine code (or whatever level would be appropriate) and demand conditions on the machine you're using to run it. It could be worth it, though, if you need <em>really</em> fast code to do cutting-edge searches, and want to verify that it's correct. I imagine this is a thing that people might want to use Lean for—and it'd be great to be able to compose existing \"fast external algorithms\" in a modular fashion in lean (and compose the proofs about them) instead of writing new code and verifying it from scratch each time.</p>\n<p>Is anyone working on e.g. verifying binaries in Lean (or anything similar)? I feel like I saw some mention of something like that on Zulip... <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 399388282,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698706483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/Lazy.20proofs.3F/near/399388282\">said</a>:</p>\n<blockquote>\n<p>In the message above this I was considering specifically the ability to not have the lean compiler compile it! (I'm exploring several possibilities at once here.) That is, you write your code in another (faster) language, and prove something about its behavior (or the behavior of its compiled version) in Lean—and then use it in Lean to do the search you need to do.</p>\n</blockquote>\n<p>Obviously this proof is only as good as the assertion that the lean model of the function matches the external implementation, but sure you can do this. You would use <code>native_decide</code> and an <code>extern</code> function, and then have that extern function do FFI to your function defined in whatever language</p>",
        "id": 399389640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698707146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lazy.20proofs.3F/near/399388002\">said</a>:</p>\n<blockquote>\n<p>I'm not even sure it is possible to force everything that needs to be forced and prevent a buildup of terms</p>\n</blockquote>\n<p>I'd found a way to at least force Nat expressions for the Lucas-Lehmer calculations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Ensure the `Nat` is reduced before evaluating `f` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat_seq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>But that's just Nats, and it contributes to the stack depth limit iirc.</p>",
        "id": 399391030,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698707891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Lazy.20proofs.3F/near/399389640\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/Lazy.20proofs.3F/near/399388282\">said</a>:</p>\n<blockquote>\n<p>In the message above this I was considering specifically the ability to not have the lean compiler compile it! (I'm exploring several possibilities at once here.) That is, you write your code in another (faster) language, and prove something about its behavior (or the behavior of its compiled version) in Lean—and then use it in Lean to do the search you need to do.</p>\n</blockquote>\n<p>Obviously this proof is only as good as the assertion that the lean model of the function matches the external implementation, but sure you can do this. You would use <code>native_decide</code> and an <code>extern</code> function, and then have that extern function do FFI to your function defined in whatever language</p>\n</blockquote>\n<p>I mean something a little deeper, I think: instead of having an external function with a lean model which we just assert is equivalent, we actually <em>prove</em> that the external function does what we want, in lean. This would mean being able to model the actual machine code in lean, with the idea being that we're trusting only very simple facts about how the machine code works. (This means, of course, that we'd also be using and trusting facts about what it's running <em>on</em>, which means a certain degree of platform-dependence, but that's inevitable.)</p>",
        "id": 399391339,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698708033
    },
    {
        "content": "<p>Coq has <a href=\"https://vst.cs.princeton.edu/\">Verified Software Toolchain</a>, which does something similar.</p>\n<p>It will take some time until Lean also makes something like this...</p>",
        "id": 399391878,
        "sender_full_name": "Lessness",
        "timestamp": 1698708335
    },
    {
        "content": "<p>I've also been working on <a href=\"https://github.com/digama0/mm0/blob/master/mm0-rs/mmc.md\">a project</a> to do verified programming for a while, but it will target lean via translation / code generation (it's not directly written in lean because I don't want lean in the TCB)</p>",
        "id": 399392163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698708499
    }
]