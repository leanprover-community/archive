[
    {
        "content": "<p>I am running into an odd issue trying to use Complex.abs_pow.  Here I explicitly cast 120 to \\N, but then it autocasts back and I can't use Complex.abs_pow.  I tried defining n : \\N and setting n=120 later, which still did not work.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">Complex.abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">Complex.im</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span><span class=\"bp\">!</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">120</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">Complex.abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">Complex.im</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Complex.abs_pow</span> <span class=\"n\">z</span> <span class=\"mi\">120</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Any help with this would be useful!</p>",
        "id": 400181370,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1699033942
    },
    {
        "content": "<p>This is most likely <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a></p>",
        "id": 400182509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699034424
    },
    {
        "content": "<p>Looks like it.  Would you suggest I just use the more complicated formula Complex.abs_cpow_of_ne_zero and simplify that, or is there a workaround that you think would work better like in that thread.  Based on my reading, I don't really understand the workaround, and also it seems like whatever it is could cause further problems down the line.</p>",
        "id": 400183146,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1699034615
    },
    {
        "content": "<p>In mathlib, we start the file with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- Porting note: See issue lean4#2220</span>\n</code></pre></div>",
        "id": 400196011,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699040747
    },
    {
        "content": "<p>Works, thanks so much!</p>",
        "id": 400357333,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1699157349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648334\">Teddy Baker</span> has marked this topic as resolved.</p>",
        "id": 400357337,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699157356
    }
]