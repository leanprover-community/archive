[
    {
        "content": "<p>I noticed some odd behaviour with the <code>intro (x, y)</code> syntax which I couldn't isolate further.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"c1\">-- strange behaviour</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- `⊢ (x, y) = id (x, y)`</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"c1\">-- not done yet, goal `⊢ (x, y) = (x, y)`</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> compare normal behaviour: -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- `⊢ (x, y) = id (x, y)`</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"c1\">-- done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"c1\">-- `⊢ p = id p`</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"c1\">-- done</span>\n</code></pre></div>\n<p>I'm on Std <code>101f1d041068be39093633e4ebf95f8c6fae2240</code>.</p>",
        "id": 389257895,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939129
    },
    {
        "content": "<p>I clicked around in the infoview and I couldn't see how the goal <code>⊢ (x, y) = id (x, y)</code> differed between the first and second examples, but I suppose there must be some subtle difference since the <code>dsimp</code> acts on them differently.</p>",
        "id": 389258060,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939194
    },
    {
        "content": "<p>What's the <code>pp.all</code> output in the <code>intro (x, y)</code> case?</p>",
        "id": 389258312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693939279
    },
    {
        "content": "<p>presumably these are simple enough terms that <code>pp.all</code> is actually readable. How about looking at that?</p>",
        "id": 389258356,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693939295
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.11</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.11</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.11</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.11</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.11</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.11</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.11</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.11</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.11</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.11</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 389258395,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939308
    },
    {
        "content": "<p>versus, in the second example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.128</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.128</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 389258507,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939336
    },
    {
        "content": "<p>Is there a useful trace for <code>dsimp</code>?</p>",
        "id": 389258608,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693939384
    },
    {
        "content": "<p>In this case  <code>pp.raw</code> might instead reveal the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">mdata</span> <span class=\"n\">noImplicitLambda</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.11</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.11</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.11</span><span class=\"o\">}</span> <span class=\"n\">_uniq.21</span> <span class=\"n\">_uniq.21</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prod.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.11</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.11</span><span class=\"o\">}</span> <span class=\"n\">_uniq.21</span> <span class=\"n\">_uniq.21</span> <span class=\"n\">_uniq.51</span> <span class=\"n\">_uniq.52</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prod.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.11</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.11</span><span class=\"o\">}</span> <span class=\"n\">_uniq.21</span> <span class=\"n\">_uniq.21</span> <span class=\"n\">_uniq.51</span> <span class=\"n\">_uniq.52</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>there is some mdata floating around that I assume blocks something</p>",
        "id": 389258865,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693939478
    },
    {
        "content": "<p>With <code>set_option trace.Meta.Tactic.simp.rewrite true</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">id_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>for both.</p>",
        "id": 389258867,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Indeed!  The first one has this <code>mdata noImplicitLambda</code>, the second doesn't.</p>",
        "id": 389259003,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939535
    },
    {
        "content": "<p>OK, so is this a bug or a feature?</p>",
        "id": 389259087,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939562
    },
    {
        "content": "<p>lol, I didn't know about <code>pp.raw</code>, but I think we should change the name to <code>pp.all_no_really_I_mean_ALL</code>. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 389259226,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693939609
    },
    {
        "content": "<p>And if it's a bug, is it a bug in <code>intro (x, y)</code> or a bug in <code>dsimp</code>?</p>",
        "id": 389259383,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939677
    },
    {
        "content": "<p>Found it, in <code>dsimp</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.dsimpGoal#doc\">docs#Lean.Meta.dsimpGoal</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">targetNew.eq</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n          <span class=\"n\">mvarIdNew.assign</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEqRefl</span> <span class=\"n\">lhs</span><span class=\"o\">)</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">usedSimps</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>it's not erasing metadata before doing <code>eq?</code></p>",
        "id": 389260039,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693939916
    },
    {
        "content": "<p>i.e., it should be <code>targetNew.consumeMData.eq?</code>, just like the other pattern matches against <code>targetNew</code> in that function</p>",
        "id": 389260187,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693939963
    },
    {
        "content": "<p>Awesome!  Let me know whether you want me to write up a bug report or whether I can leave it in your capable hands.</p>",
        "id": 389260233,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1693939979
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2514\">lean4#2514</a></p>",
        "id": 389262362,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693940823
    }
]