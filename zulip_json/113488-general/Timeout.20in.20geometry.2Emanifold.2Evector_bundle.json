[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/smooth_fibrewise_linear.locality\">docs#smooth_fibrewise_linear.locality</a>_aux₁ has been timing out for the past few days, but it only take a second to compile and I couldn't find any significant speedup. Does someone want to give it a go?</p>",
        "id": 338274893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677490030
    },
    {
        "content": "<p>I'm confused about this. I'm also getting timeouts on CI with this file, but when I open it locally everything is fine. Is there something wrong with the CI runners, like a bad olean cache or something?</p>",
        "id": 338303308,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677497821
    },
    {
        "content": "<p>Oof, this declaration was only added recently, in <a href=\"https://github.com/leanprover-community/mathlib/pull/17302\">#17302</a>, and it was timing out on <a href=\"https://github.com/leanprover-community/mathlib/pull/17302/commits/1f7d773a8068fc210cd61374c257578ac0def906\">an earlier commit</a>. I did some cosmetic changes, and significantly sped up some other declarations, and that seemed to have fixed it, but apparently not.<br>\nI think it has to do with the kernel type-checking the term, since I noticed the behavior that it would somehow still take quite some time to compile, after executing all tactics (unfortunately the profiler doesn't show kernel type checking time). I'll try to improve the situation.</p>",
        "id": 338329154,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677505055
    },
    {
        "content": "<p>The culprit is the line <code>choose s hs hsp φ u hu hφ h2φ heφ using h</code>. I expect it's not worth it to fix the tactic in Lean 3, so I just expanded what <code>choose</code> does manually. If I give that a lot of information, the kernel checking (or whatever Lean is doing after elaboration) is noticably less. This is in PR <a href=\"https://github.com/leanprover-community/mathlib/pull/18507\">#18507</a><br>\nHowever, I have no idea whether this actually fixes the timeout. The first commit of  <a href=\"https://github.com/leanprover-community/mathlib/pull/18507\">#18507</a> has the original proof twice, and somehow that doesn't time out.</p>",
        "id": 338391770,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677516718
    },
    {
        "content": "<p>I checked the original proof with various timeout settings. It seems like it's right on the border, and since deterministic timeouts aren't really deterministic (I think someone told me this), then sometimes it spills over in bors or randomly.</p>",
        "id": 338392218,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677516824
    },
    {
        "content": "<p>FYI: <code>localality_aux₂</code> (on your current PR) takes rather a lot of heartbeats as well (somewhere between 85000-87500), so it will probably be okay for now. I'm just recording this here for reference unless it comes up again.</p>",
        "id": 338392811,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677516944
    },
    {
        "content": "<p>Is there a better way to make <code>choose</code> not use this many heartbeats?</p>",
        "id": 338401385,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677518960
    },
    {
        "content": "<p>That's above my pay grade.</p>",
        "id": 338417187,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677522288
    },
    {
        "content": "<p><code>choose</code> isn't hard to emulate manually with <code>classical.some</code> and <code>classical.some_spec</code></p>",
        "id": 338419773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677522892
    },
    {
        "content": "<p><del>(Aside: we don't have a \"dependent choice\" version of <code>choose</code> right? Those you have to do manually?)</del> I should just ask this in a different thread and be more explicit about what I mean.</p>",
        "id": 338420225,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677523016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> that's what I did in <a href=\"https://github.com/leanprover-community/mathlib/pull/18507\">#18507</a>. When choosing 9 things, it's quite a bit of work.</p>",
        "id": 338421899,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677523544
    },
    {
        "content": "<p>How do I measure the number of heartbeats (incl. kernel typecheck)?</p>",
        "id": 338455230,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677533911
    },
    {
        "content": "<p>These 2 lines do the same as <code>choose</code> and I wnat to see if kernel typechecks faster this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">classical.skolem</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hsp</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">h2φ</span><span class=\"o\">,</span> <span class=\"n\">heφ</span><span class=\"o\">⟩,</span>\n</code></pre></div>",
        "id": 338455465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677534008
    },
    {
        "content": "<p>At least, it compiles with <code>-T90000</code>.</p>",
        "id": 338455657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677534096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> should we use this shorter fix?</p>",
        "id": 338455801,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677534139
    },
    {
        "content": "<p>I'll open a new PR on top of your PR. I don't want to <code>bors r-</code> your PR because I want a fix to land earlier.</p>",
        "id": 338456059,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677534242
    },
    {
        "content": "<p>Ah, nice catch!</p>",
        "id": 338465130,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1677537921
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18334\">#18334</a></p>",
        "id": 338465165,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677537939
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, your fix (<a href=\"https://github.com/leanprover-community/mathlib/pull/18509\">#18509</a>) is much better!</p>",
        "id": 338555760,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677582038
    }
]