[
    {
        "content": "<p>This produces an error message I've never seen before on the <code>{</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">is_unital</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">is_left_id</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">is_right_id</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">e.</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_one_class.is_unital</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_unital</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">left_id</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">right_id</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"o\">}</span>\n</code></pre></div>\n<blockquote>\n<p>'unreachable' code was reached</p>\n</blockquote>",
        "id": 236159036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619437552
    },
    {
        "content": "<p>Oh classy! That one used to show up all the time, until Gabriel hacked core Lean to make it go away. I've not seen it for years!</p>",
        "id": 236159332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619437698
    },
    {
        "content": "<p>There are still about 100 <code>lean_unreachable()</code> calls in lean core, so it's not entirely clear which one is being hit here</p>",
        "id": 236159458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619437781
    },
    {
        "content": "<p>It looks like if you have a debug build of lean it actually shows file/line numbers</p>",
        "id": 236159524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619437808
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">File</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">frontends</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">elaborator.cpp</span>\n<span class=\"n\">Line</span><span class=\"o\">:</span> <span class=\"mi\">3025</span>\n</code></pre></div>",
        "id": 236163714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619439815
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/af06b6aab669edfee7e310c5eab4c948bba173bb/src/frontends/lean/elaborator.cpp#L3025\">https://github.com/leanprover-community/lean/blob/af06b6aab669edfee7e310c5eab4c948bba173bb/src/frontends/lean/elaborator.cpp#L3025</a></p>",
        "id": 236165562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619440678
    },
    {
        "content": "<p>I have this issue where having an encodable instance causes the 'unreachable' code was reached error. Here's the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bottom</span> <span class=\"o\">:</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">vars</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">Form</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Form.Bottom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Form.Var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However if I reorder it as below, the error disappears:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bottom</span> <span class=\"o\">:</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">Form</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Form.Bottom</span><span class=\"o\">⟩</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">vars</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Form.Var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 269621726,
        "sender_full_name": "Alyssa Renata",
        "timestamp": 1643310351
    },
    {
        "content": "<p>Alyssa is on my course and this is her first coursework :-/</p>",
        "id": 269621994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643310478
    },
    {
        "content": "<p>Mathlib-free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bottom</span> <span class=\"o\">:</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">vars</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`⊥`</span> <span class=\"o\">:=</span> <span class=\"n\">has_bot.bot</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">has_bot.bot</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"o\">(</span><span class=\"n\">Form</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Form.Bottom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"c1\">-- 'unreachable' code was reached</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Form.Var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 269624605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643311650
    },
    {
        "content": "<p>If you use a type in a definition or a lemma, then lean pulls all instances from variables for this type</p>",
        "id": 269968767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643590605
    },
    {
        "content": "<p>Probably unused args cause the trouble later because lean can't unify them</p>",
        "id": 269968843,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643590689
    },
    {
        "content": "<p>This is just a guess</p>",
        "id": 269968848,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643590702
    }
]