[
    {
        "content": "<p>Do mathlib have something that behaves like:</p>\n<div class=\"codehilite\"><pre><span></span>class  Finite (α : Type u) :=\n  (cardinality : nat)\n  (bijection : trunc (equiv α (fin cardinality)))\n</pre></div>",
        "id": 124610398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522822200
    },
    {
        "content": "<p>Is this gross for some reason, and should be avoided?</p>",
        "id": 124610440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522822214
    },
    {
        "content": "<p>It is in my category theory repo (the category “set”)</p>",
        "id": 124610449,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522822274
    },
    {
        "content": "<p>and it’s called fintype</p>",
        "id": 124610450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522822282
    },
    {
        "content": "<p>It can't be called fintype, because mathlib already has a fintype which is slightly different (but equivalent, of course).</p>",
        "id": 124610479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522822323
    },
    {
        "content": "<p>I guess I'm asking if there is a strong reason to (bite the bullet and learn how to use multisets and) use mathlib's fintype, or if it's okay to use something like this.</p>",
        "id": 124610492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522822358
    },
    {
        "content": "<p>oops i meant the category is called set and uses fintype</p>",
        "id": 124610554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522822549
    },
    {
        "content": "<p>but I guess I didn’t notice that you used trunc</p>",
        "id": 124610595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522822566
    },
    {
        "content": "<p>That's <code>fintype</code>. If you want to use such an interface to it, prove it and use it</p>",
        "id": 124610881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522823264
    },
    {
        "content": "<p>Okay, I  guess that's a good point. In the meantime I'm discovering <code>fintype</code> is pretty easy to use anyway.</p>",
        "id": 124610925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522823304
    },
    {
        "content": "<p>What is the lemma that says <code>fintype</code> gives <code>decidable_eq</code>?</p>",
        "id": 124611257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522824094
    },
    {
        "content": "<p>I don't think it's true. So your formulation is a bit stronger, since it equips the set with a function to <code>fin</code>; in mathlib's <code>fintype</code>, this function is <code>index_of</code>, but it requires a separate proof of <code>decidable_eq</code></p>",
        "id": 124611576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522824763
    },
    {
        "content": "<p>your <code>Finite</code> should be equivalent to the conjunction of <code>fintype</code> and <code>decidable_eq</code></p>",
        "id": 124611584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522824789
    },
    {
        "content": "<p>ah, okay.</p>",
        "id": 124611585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1522824800
    }
]