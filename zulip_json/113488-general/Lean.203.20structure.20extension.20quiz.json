[
    {
        "content": "<p>Here's a little quiz: how many times does \"hey!\" print when you evaluate <code>foo</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">trace</span> <span class=\"s2\">\"hey!\"</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"c1\">-- or equivalently {trace \"hey!\" a with z := 3}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 336521121,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677254629
    },
    {
        "content": "<p>Twice? I think that makes sense if trace \"hey\" a is substituted everywhere a would be</p>",
        "id": 336538464,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677258682
    },
    {
        "content": "<p>Yes, it's twice (though if the CSE pass applied here it should only be once). That said, the type of <code>B.mk</code> is <code>A → ℕ → B</code> so one could imagine the structure notation to be smarter about it.</p>\n<p>The Lean 4 equivalent, in comparison, only prints \"hey!\" once.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">Id.run</span> <span class=\"k\">do</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"hey!\"</span> <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(do <code>#print foo</code> to see why)</p>",
        "id": 336540181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677259168
    },
    {
        "content": "<p>I'm wondering if there's any performance impact in Lean 3 due to this when there are typeclass instances created with complicated <code>..</code> expressions.</p>",
        "id": 336540471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677259247
    }
]