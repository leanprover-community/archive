[
    {
        "content": "<p>Hi there. I managed to get myself to the point when I need to deal with a piece of code that roughly resembles following snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Eh</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Eh</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rrr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Eh</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[()]</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">rrr</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">k.reverse</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There is a little problem, though, when I give it to  lean,  it shows me this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">reverse'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">Eh.reverse'</span>\n  <span class=\"n\">k</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Eh</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>What can I do to pull myself out of this finicky situation?</p>",
        "id": 406292992,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1701865090
    },
    {
        "content": "<p>What's <code>.reverse</code> supposed to refer to? There's no <code>reverse</code> in your code snippet.</p>",
        "id": 406293182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701865198
    },
    {
        "content": "<p><code>List.reverse</code></p>",
        "id": 406293676,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701865400
    },
    {
        "content": "<p>You probably need to <code>unfold Eh at k</code> manually to be able to apply <code>List.reverse</code></p>",
        "id": 406293837,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701865468
    },
    {
        "content": "<p>Actually this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Eh</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Eh</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rrr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Eh</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[()]</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">rrr</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">k.reverse</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">rrr</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">k.reverse</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Can you see why <code>Nat.succ Nat.zero</code> and <code>Nat.succ (Nat.succ n)</code> \"need\" to be handled separately?</p>",
        "id": 406295103,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701865915
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>At that point, <code>k : Eh n</code> is not definitionally of type <code>List α</code> for some <code>α</code>. You need to case on <code>n</code> to get <code>k : List Unit</code> or <code>k : List (Eh m)</code>.</p>\n</div></div>",
        "id": 406295539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701866059
    },
    {
        "content": "<p>Well spotted!</p>",
        "id": 406295646,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701866098
    },
    {
        "content": "<p>Thanks for the answer. From now on I will open stuck terms with patterns as \"far\" as possible XD.<br>\nAlso, is there a way to make definitions like this <code>def v := Nat.succ v</code> be accepted?</p>",
        "id": 406314727,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1701872099
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>but why do you want that?</p>",
        "id": 406316733,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701872657
    },
    {
        "content": "<p>actually that doesn't work</p>",
        "id": 406317461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701872880
    },
    {
        "content": "<p>partial defs have to be functions</p>",
        "id": 406317535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701872891
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">())</span>\n</code></pre></div>\n<p>works</p>",
        "id": 406317593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701872914
    }
]