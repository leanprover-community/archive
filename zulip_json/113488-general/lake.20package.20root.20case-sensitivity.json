[
    {
        "content": "<p>How does <code>lake</code> know the root of a lean package? For example, in mathlib's <code>lakefile.lean</code> specifies the package name as <a href=\"https://github.com/leanprover-community/mathlib4/blob/5c9c13df4643f68468a0f50fc217a3216ae6f8cc/lakefile.lean#L25C1-L25C22\"><code>mathlib</code></a>, (note the lower case), and yet <code>lake</code> when building knows that the root is <code>Mathlib.lean</code>. Does <code>lake</code> look for case <code>&lt;package-name&gt;.lean</code> with case-insensitivity?</p>",
        "id": 401812491,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699895838
    },
    {
        "content": "<p>Nvm, from lake's readme:</p>\n<blockquote>\n<p>It will also create the root Lean file for the package's library, which uses the capitalized version of the package's name (e.g., Hello.lean in this example), and the root file for the package's binary Main.lean. They contain the following dummy \"Hello World\" program split across the two files:</p>\n</blockquote>",
        "id": 401813483,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699896198
    },
    {
        "content": "<p>The library is called <a href=\"https://github.com/leanprover-community/mathlib4/blob/5c9c13df4643f68468a0f50fc217a3216ae6f8cc/lakefile.lean#L29\"><code>Mathlib</code></a></p>",
        "id": 401863212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699918467
    },
    {
        "content": "<p>the package name is pretty much unused except for lake internal stuff: it is the name used in <code>require</code> lines, and the name of the directory in <code>lake-packages</code> for a dependency, but the modules themselves are named based on the library name or the <code>roots</code>/<code>globs</code> of the library</p>",
        "id": 401863357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699918539
    },
    {
        "content": "<p>Oh the fact that it's used in <code>lake-packages</code> is good to know.</p>",
        "id": 401865292,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699919664
    },
    {
        "content": "<p>I'm writing a best-effort <a href=\"https://github.com/enricozb/lean.nix/blob/main/lake2nix.nix\"><code>lake2nix</code></a> and was /hoping/ not to have to parse/run any <code>lakefile.lean</code>. The one I have now works and can compile mathlib OK, but I have to manually inject the library name for <code>ProofWidgets</code>, since it's referred to in the manifest as <code>proofwidgets</code> but the library name is in fact <code>ProofWidgets</code>.</p>",
        "id": 401865299,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699919668
    },
    {
        "content": "<p>ah I see now the <code>lean_lib</code> statements in the <code>lakefile.lean</code>.</p>",
        "id": 401865555,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699919805
    },
    {
        "content": "<p>I have a small question though, mathlib's <code>lakefile.lean</code> defines a <a href=\"https://github.com/leanprover-community/mathlib4/blob/2fed2bb879abf057539d31d68bfbcc704aec39f7/lakefile.lean#L91-L101\">few libs</a>. When mathlib is declared as a dependency in <code>lake-manifest.json</code>, are all of those <code>lean_lib</code> libraries available?</p>",
        "id": 401865775,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699919906
    },
    {
        "content": "<p>Yes.</p>",
        "id": 401937197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699952197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256383\">Enrico Borba</span> <a href=\"#narrow/stream/113488-general/topic/lake.20package.20root.20case-sensitivity/near/401865299\">said</a>:</p>\n<blockquote>\n<p>I'm writing a best-effort <a href=\"https://github.com/enricozb/lean.nix/blob/main/lake2nix.nix\"><code>lake2nix</code></a> and was /hoping/ not to have to parse/run any <code>lakefile.lean</code>. The one I have now works and can compile mathlib OK, but I have to manually inject the library name for <code>ProofWidgets</code>, since it's referred to in the manifest as <code>proofwidgets</code> but the library name is in fact <code>ProofWidgets</code>.</p>\n</blockquote>\n<p>Don't do it, this is not a supported configuration. You should petition <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> to make this more possible in the future</p>",
        "id": 401940457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699953258
    },
    {
        "content": "<p>The workaround solution until then is to use something like <a href=\"https://github.com/digama0/lean-cache/tree/main/lake-ext\">https://github.com/digama0/lean-cache/tree/main/lake-ext</a> , which is the out-of-tree version of <a href=\"https://github.com/leanprover/lean4/pull/2542\"><code>lake dump-config</code></a> which has an uncertain future</p>",
        "id": 401940728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699953357
    },
    {
        "content": "<p>Not sure if <a href=\"https://github.com/Kha/nale/tree/master/lake2nix\">https://github.com/Kha/nale/tree/master/lake2nix</a> is still up-to-date</p>",
        "id": 401940845,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699953389
    },
    {
        "content": "<p>lol, <code>LakeExport.lean</code> is almost exactly the same thing as lake-ext</p>",
        "id": 401940932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699953422
    },
    {
        "content": "<p>unfortunately it doesn't have a lean-toolchain so I'm not sure how old it is, but from the modification dates I would guess lake-ext is newer</p>",
        "id": 401941054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699953481
    },
    {
        "content": "<p>It does have a flake.lock pinned at <a href=\"http://github.com/leanprover/lean4/commit/1a6663a41baf95cb995b79cd8a466ab81e230b35\">http://github.com/leanprover/lean4/commit/1a6663a41baf95cb995b79cd8a466ab81e230b35</a> though</p>",
        "id": 401941203,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699953544
    },
    {
        "content": "<p>Is there any way to get these nix builds to generate the trace/hash files you need to actually open a project in vscode? Otherwise lake just rebuilds everything anyway, right?</p>",
        "id": 401942182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699953890
    },
    {
        "content": "<p>That's a question I'd like to know the answer to as well. One use case that doesn't require this is shipping a program written in Lean. Admittedly this would make more sense with Std instead of Mathlib, in which case there would be no dependency problems, but it's not too far-fetched to have something which produces a binary and depends on Mathlib</p>",
        "id": 401943915,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699954527
    },
    {
        "content": "<p>I mean I guess you can always make a custom binary that just pokes at lake implementation details to write a hash, but that's obviously rather fragile</p>",
        "id": 401946178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699955293
    },
    {
        "content": "<p>I (personal me, not FRO me) am using nix to build and deploy <code>loogle</code>, which does include Mathlib as a dependency. But <a href=\"https://github.com/nomeata/loogle/blob/master/flake.nix\">the way I'm doing that</a> is a bit hackish and wouldn’t scale to public consumption. So I’d be grateful for a good <code>…2nix</code> setup for building lean programs, while I personally don’t need it for development. It’s probably tricky, though.</p>",
        "id": 401950253,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699956555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lake.20package.20root.20case-sensitivity/near/401940457\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256383\">Enrico Borba</span> <a href=\"#narrow/stream/113488-general/topic/lake.20package.20root.20case-sensitivity/near/401865299\">said</a>:</p>\n<blockquote>\n<p>I'm writing a best-effort <a href=\"https://github.com/enricozb/lean.nix/blob/main/lake2nix.nix\"><code>lake2nix</code></a> and was /hoping/ not to have to parse/run any <code>lakefile.lean</code>. The one I have now works and can compile mathlib OK, but I have to manually inject the library name for <code>ProofWidgets</code>, since it's referred to in the manifest as <code>proofwidgets</code> but the library name is in fact <code>ProofWidgets</code>.</p>\n</blockquote>\n<p>Don't do it, this is not a supported configuration. You should petition <span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> to make this more possible in the future</p>\n</blockquote>\n<p>I definitely don't have any expectations of support, it's just what I use for my personal configuration.</p>",
        "id": 401970661,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699963020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/lake.20package.20root.20case-sensitivity/near/401950253\">said</a>:</p>\n<blockquote>\n<p>I (personal me, not FRO me) am using nix to build and deploy <code>loogle</code>, which does include Mathlib as a dependency. But <a href=\"https://github.com/nomeata/loogle/blob/master/flake.nix\">the way I'm doing that</a> is a bit hackish and wouldn’t scale to public consumption. So I’d be grateful for a good <code>…2nix</code> setup for building lean programs, while I personally don’t need it for development. It’s probably tricky, though.</p>\n</blockquote>\n<p>My approach was actually <a href=\"https://github.com/enricozb/lean.nix/blob/687c25be73b8cf07fc071b49393ffcc7542303de/overrides.nix#L5\">inspired</a> by the loogle one. I just didn't like having to manually specify the commits, so I walk the refs in <code>lake-manifest.json</code> in order to automate fetching the dependencies.</p>",
        "id": 401971795,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699963374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/lake.20package.20root.20case-sensitivity/near/401942182\">said</a>:</p>\n<blockquote>\n<p>Is there any way to get these nix builds to generate the trace/hash files you need to actually open a project in vscode? Otherwise lake just rebuilds everything anyway, right?</p>\n</blockquote>\n<p>Sorry for the noob question (just looking to understand lean packaging/distribution a bit more): What do you mean by \"trace/hash\" files that you \"need to actually open a project\"? Does this have to do with setting <code>LEAN_PATH</code>? Or something else</p>",
        "id": 401972322,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1699963565
    },
    {
        "content": "<p>I mean the files that end up in <code>build/lib/MyFile.olean.hash</code> and <code>build/lib/MyFile.trace</code></p>",
        "id": 401992242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699970405
    },
    {
        "content": "<p>My attempt was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake.Build.Common</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lake.Load.Main</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lake.CLI.Main</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lake.CliM.run</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"n\">processOptions</span> <span class=\"n\">lakeOption</span>\n  <span class=\"k\">let</span> <span class=\"n\">config</span> <span class=\"bp\">←</span> <span class=\"n\">mkLoadConfig</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">LakeOptions</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ws</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span><span class=\"n\">Lake.loadWorkspace</span> <span class=\"n\">config</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">config.configFile</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Lake.fetchFileTrace</span> <span class=\"o\">(</span><span class=\"n\">System.mkFilePath</span> <span class=\"o\">[</span><span class=\"s2\">\"Std.lean\"</span><span class=\"o\">])</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">ws.runBuild</span> <span class=\"n\">b</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">t.hash</span>\n  <span class=\"n\">return</span>\n  <span class=\"o\">)</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>but this crashes the web editor</p>",
        "id": 401996046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699971477
    }
]