[
    {
        "content": "<p>In which order does Lean 4 generate instances? Is it possible to turn, e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SmoothMul#doc\">docs#SmoothMul</a> by adding an unused assumption <code>[BaseField ùïú]</code> with no global instances of <code>[BaseField]</code> (with scoped instances for <code>Real</code> and <code>Complex</code>)? My idea is that someone can write <code>haveI : BaseField K := .mk</code> at the beginning of a proof and get instances like <del>docs#SmoothMul</del> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=continuousMul_of_smooth#doc\">docs#continuousMul_of_smooth</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteDimensional.complete#doc\">docs#FiniteDimensional.complete</a> etc</p>",
        "id": 373541505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688840126
    },
    {
        "content": "<p>I don't understand your last two doc links; the first is a class but the second is an instance</p>",
        "id": 373559467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688847890
    },
    {
        "content": "<p>Did you have a particular <code>SmoothMul</code> instance in mind?</p>",
        "id": 373559481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688847897
    },
    {
        "content": "<p>Fixed</p>",
        "id": 373561541,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688848972
    },
    {
        "content": "<p>BTW, should links to library notes work or doc-gen4 doesn't support library notes?</p>",
        "id": 373561649,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688849025
    },
    {
        "content": "<p>Separating the implementation idea from the problem: we have scoped instances, but it would be nice to have <em>parameterized</em> scoped instances, where you can specify values for arguments that can't be inferred during typeclass inference. The point would be that you can introduce multiple instances simultaneously, rather than one at a time by name.</p>\n<p>Yury's idea: have a dummy class with the additional parameters, and make some classes require this class as an extra argument. The assumption is that all instances of such classes would need these parameters anyway (if I understood correctly).</p>",
        "id": 373572112,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688855551
    },
    {
        "content": "<p>(By the way <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, in Lean 4 <code>haveI</code> now means \"<code>have</code> and inline the value\", and <code>have</code> by itself can now introduce instances. No more <code>unfreezingI</code> and friends)</p>",
        "id": 373572331,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688855663
    },
    {
        "content": "<p>If <code>k</code> is <code>Real</code> or <code>Complex</code>, then it's easy to have scoped instances specializing a general instance to this field. It's more complicated if <code>k</code> is a local variable.</p>",
        "id": 373596680,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688869430
    }
]