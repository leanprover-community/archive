[
    {
        "content": "<p>Motivated by recent discussions and reports of elan footguns, I have been thinking about drastically simplifying elan's workings and the necessary mental model for users by removing any kind of state that a) is not directly recorded in the affected repo/project and b) is not reproducible from that record. In detail, this would mean</p>\n<ul>\n<li>removing overrides (<code>elan override</code>) in favor of temporary changes to the <code>lean-toolchain</code> file (or <code>leanpkg.toml</code> in Lean 3, this part should not need to be touched)</li>\n<li>removing the notion of a default toolchain (as introduced by the installer and <code>elan default</code>); new projects would have to be created with an explicit version reference such as <code>leanpkg +stable new</code> or <code>lake +leanprover/lean4:nightly new</code> (at some point we will switch the default prefix from Lean 3 to Lean 4, I assume). Stand-alone files could be compiled in the same way; if desired, editors could provide a version selector on opening a stand-alone file (vscode-lean4 had code for something like this at one point, but it was removed precisely because it did not adhere to condition a) from above).</li>\n<li>removing \"channel\" toolchains such as \"stable\" and \"nightly\" as installable toolchains; instead, on the commandline they are interpreted as mere references to a proper version while in <code>lean-toolchain</code> they are not accepted at all. The reference is not cached locally but looked up on every use, making sure that you actually get the latest nightly when invoking <code>lake +nightly new</code>. This would also solve the annoyance of <code>lake ... new &amp;&amp; lake build</code> downloading two separate toolchains.</li>\n</ul>\n<p>My main questions at this point are:</p>\n<ul>\n<li>Are there any use cases not covered by the above, especially for special applications of elan such as in teaching?</li>\n<li>Is there anyone interested in implementing these changes (NB, elan is written in Rust)? Because I'm not necessarily.</li>\n</ul>",
        "id": 343356302,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679401648
    },
    {
        "content": "<p>Being explicit about the toolchain on <code>lake new</code>/<code>lake init</code>/<code>leanpkg new</code> is pretty annoying, and I think it's particularly hard on mathematicians who are new to CLIs.</p>\n<p>Alternatively, the \"default\" toolchain could be picked up on the fly, as the one that was installed most recently. Or the one that was released most recently.</p>\n<p>(of course, the user should be able to be explicit about it, but having a decent fallback policy would make things easier)</p>",
        "id": 343363943,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679403669
    },
    {
        "content": "<p>Maybe the <code>new</code> command could show typical options to choose from, or even hardcode to something sensible</p>",
        "id": 343364408,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679403804
    },
    {
        "content": "<p>I agree with Arthur. While I personally wouldn't mind being forced to specify the toolchain, this would be a burden to mathematicians new to Lean who want things to Just Work out of the box.</p>",
        "id": 343368116,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679404770
    },
    {
        "content": "<p>If <code>lake new</code> gives a friendly error message with \"here are your options; when in doubt pick <code>stable</code>\", that shouldn't be a dealbreaker imo. For mathlib-dependent projects, <code>lake new math</code> should anyway copy the mathlib <code>lean-toolchain</code>.</p>\n<p>In general, I like this proposal. For our teaching, we've always used an explicit <code>lean-toolchain</code> and nothing else (precisely to minimise the potential for confusion).</p>",
        "id": 343371792,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679405641
    },
    {
        "content": "<p>Yeah, a helpful error should be sufficient.</p>",
        "id": 343375822,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679406528
    },
    {
        "content": "<p>Let me add to the mathematician's chorus: <code>leanproject new my_project</code> was a game-changer (speaking as someone who remembers when that didn't exist). It just means \"make me a new project with today's mathlib as a dependency\" which is exactly what a mathematician wants half the time; the other half of the time they want <code>leanproject get &lt;URI&gt;</code>. In both cases all relevant mathlib <code>olean</code>s are fetched too and this is crucial. I think most undergraduate mathematicians would want <code>lake</code> versions of those two use cases and pretty much nothing else, really. Remember that they just spent 5 minutes trying to remember how to open a command line (and typically have no idea which directory they're in either).</p>\n<p>Perhaps another alternative is to have some simple buttons on the VS Code extension which give those two simple options, and you <code>lake</code> enthusiasts can have whatever you like.</p>",
        "id": 343377454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679406852
    },
    {
        "content": "<p>I agree that it helps to have a sensible default for <code>leanproject new</code>. Soon we won't have to worry about distinguishing Lean 3 and Lean 4 (because we'll all be using Lean 4). </p>\n<p>I have heard some people worry about all the toolchains that accumulate over time and take up space. We can see them with <code>elan show</code>. Would an <code>elan purge</code> or <code>elan clean</code> help people delete old ones every once in a while, or help them remember to do that? Space is cheap, so maybe it's not worth the bother.</p>",
        "id": 343381232,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1679407654
    },
    {
        "content": "<p>Yes, setting a default channel for <code>lake new</code> is something we can still do without contradicting the goals of the proposal. I hope that in the near future, we will all simply be using sufficiently frequently-released Lean 4 stable versions. Perhaps, and especially in the mean time, we can even keep the current defaulting mechanism but with the reference semantics outlined above.</p>",
        "id": 343385460,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679408561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/113488-general/topic/Rethinking.20elan.20toolchain.20management/near/343381232\">said</a>:</p>\n<blockquote>\n<p>I have heard some people worry about all the toolchains that accumulate over time and take up space. We can see them with <code>elan show</code>. Would an <code>elan purge</code> or <code>elan clean</code> help people delete old ones every once in a while, or help them remember to do that? Space is cheap, so maybe it's not worth the bother.</p>\n</blockquote>\n<p>There now is <a href=\"https://github.com/JLimperg/elan-cleanup\">https://github.com/JLimperg/elan-cleanup</a>, it would be good to have that integrated into elan at some point</p>",
        "id": 343386134,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679408696
    },
    {
        "content": "<p>Idea: <code>elan default-policy</code> with options:</p>\n<ul>\n<li><code>elan default-policy recent-install</code></li>\n<li><code>elan default-policy recent-release</code></li>\n<li>...</li>\n</ul>",
        "id": 343386555,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679408771
    },
    {
        "content": "<p>Please no, then we're back to <code>lake new</code> using random old nightlies</p>",
        "id": 343387123,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679408897
    },
    {
        "content": "<p>Ah, then you'd want to stick with the most recently released, always? I like that option</p>",
        "id": 343387625,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679409002
    },
    {
        "content": "<p>No, most recently released in the hard-coded or configured default channel. Most recently installed is completely non-deterministic.</p>",
        "id": 343388087,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679409068
    },
    {
        "content": "<p>When two people talk about running <code>lake new</code> on the same day, they should get the same result, or they will talk past each other like we've seen it happen before</p>",
        "id": 343388380,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679409125
    },
    {
        "content": "<p>I almost suggested having an interactive version selector in cmdline <code>elan</code> (also when invoked as <code>lake new</code>) in the original message, but I agree with Kevin in that that time would be better spent on improving that workflow in the extension.</p>",
        "id": 343388531,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679409153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/Rethinking.20elan.20toolchain.20management/near/343371792\">said</a>:</p>\n<blockquote>\n<p>For mathlib-dependent projects, <code>lake new math</code> should anyway copy the mathlib <code>lean-toolchain</code>.</p>\n</blockquote>\n<p>Note that there is an interesting bootstrapping issue here: unless we teach elan about <code>new math</code>, we still have to download <em>some</em> toolchain first in order to obtain a Lake binary that then copies the <code>lean-toolchain</code>, which likely refers to a different toolchain</p>",
        "id": 343390524,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679409547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Rethinking.20elan.20toolchain.20management/near/343390524\">said</a>:</p>\n<blockquote>\n<p>Note that there is an interesting bootstrapping issue here: unless we teach elan about <code>new math</code>, we still have to download <em>some</em> toolchain first in order to obtain a Lake binary that then copies the <code>lean-toolchain</code>, which likely refers to a different toolchain</p>\n</blockquote>\n<p>Oh yeah, I didn't consider this. I would special-case this in elan. It's a major hack but the alternatives seem worse.</p>",
        "id": 343454651,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679414328
    },
    {
        "content": "<p>Oh, btw, since we're here, there's an issue in which <code>elan</code> gets to a point I've never been able to make it recover from. It happened to me like 2 or 3 times in the past. From what I remember, it has something to do with manually deleting some toolchains and then <code>elan</code> doesn't know what to do if the default toolchain had been deleted. This may be the wrong hypothesis, but maybe someone else can explain it better.</p>\n<p>The way that I got out of those situations was simply nuking the <code>elan</code> folder and reinstalling it from scratch. Can this redesign avoid that bad state?</p>",
        "id": 343663020,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679488424
    },
    {
        "content": "<p>One gotcha is that if you manually delete a toolchain from <code>.elan/toolchains/</code> then you <em>must</em> also delete the corresponding file from <code>.elan/update-hashes</code> or else you end up with a borked system.</p>",
        "id": 343675619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679491261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Rethinking.20elan.20toolchain.20management/near/343385460\">said</a>:</p>\n<blockquote>\n<p>Yes, setting a default channel for <code>lake new</code> is something we can still do without contradicting the goals of the proposal. I hope that in the near future, we will all simply be using sufficiently frequently-released Lean 4 stable versions.</p>\n</blockquote>\n<p>On my roadmap for Lake  is having a <code>lake install</code> to install global packages into the toolchain (much like <code>npm install -g</code>). This would allow for easy installation of Lake-based CLI tools which, using JS as a reference point, become quite common as the package ecosystem grows. While some such CLI tools are package-specific and thus do not need a global toolchain, others do desire one. Thus, in order for this to be feasible, there needs to be some system-wide toolchain accessible for out-of-project CLI use. Therefore, I would greatly hope to retain the notion of a default toolchain.</p>",
        "id": 344040879,
        "sender_full_name": "Mac Malone",
        "timestamp": 1679590414
    },
    {
        "content": "<p>Those globally installed tools should probably be built using the toolchain that they specify, not with whatever the user happens to have set up as the default.</p>",
        "id": 344041269,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679590500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Rethinking.20elan.20toolchain.20management/near/343356302\">said</a>:</p>\n<blockquote>\n<ul>\n<li>removing \"channel\" toolchains such as \"stable\" and \"nightly\" as installable toolchains; instead, on the commandline they are interpreted as mere references to a proper version while in <code>lean-toolchain</code> they are not accepted at all. The reference is not cached locally but looked up on every use, making sure that you actually get the latest nightly when invoking <code>lake +nightly new</code>. This would also solve the annoyance of <code>lake ... new &amp;&amp; lake build</code> downloading two separate toolchains.</li>\n</ul>\n</blockquote>\n<p>This is now up at <a href=\"https://github.com/leanprover/elan/pull/106\">https://github.com/leanprover/elan/pull/106</a>. The following toolchain references will (at the time of writing) resolve to the same toolchain, and not install it multiple times:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stable</span>\n<span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">v4.0.0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"bp\">&lt;</span><span class=\"n\">any</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">above</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 390259848,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694420995
    },
    {
        "content": "<p>I don't have any plans anymore to get rid of the notion of default toolchain, so with the default settings of <code>elan default stable</code>, <code>lake new</code> by itself will do the sensible thing of giving you the most recent stable.</p>",
        "id": 390260112,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694421097
    },
    {
        "content": "<p>Does this mean that I can't run <code>lake new</code> without an internet connection?</p>",
        "id": 390308638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694438220
    },
    {
        "content": "<p>In that case you will have to think about exactly which of your local toolchains you want to use anyway, so do that and then use e.g. <code>lake +4.0.0 new</code>, which will work</p>",
        "id": 390315282,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694440394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does this sound acceptable to you (also for your question on GH)? We could think about possibly caching the toolchain lookup for a while but I would really like to avoid that complexity if there are no sufficient use cases</p>",
        "id": 392155186,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695227698
    },
    {
        "content": "<p>I think the command should suggest that if network connection fails</p>",
        "id": 392194926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695238104
    },
    {
        "content": "<p>ideally it should be able to determine exactly one local toolchain which is preferred too, not just give a list of all your toolchains. For example, suggest the most recent toolchain on the selected release track</p>",
        "id": 392195175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695238222
    },
    {
        "content": "<p>Yes, I wanted to improve the error message before merging. Storing a preferred version would be an interesting weak version of the aforementioned cache but I think I'd wait on user feedback before implementing that</p>",
        "id": 392264951,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695281948
    }
]