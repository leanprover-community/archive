[
    {
        "content": "<p>I've written this simple function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compose_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>  <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">compose_n</span> <span class=\"n\">a</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Assuming I haven't mucked it up, it applies a function <code>g</code> to an argument <code>x</code> <code>n</code> times. I'm sure this or its equivalent must be in the standard library. Is it possible to search by type signature? Or structural equivalency?</p>",
        "id": 389273902,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693945427
    },
    {
        "content": "<p>There's <a href=\"https://loogle.lean-fro.org\">https://loogle.lean-fro.org</a></p>",
        "id": 389274367,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693945615
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>You might be looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.iterate#doc\">docs#Nat.iterate</a></p>\n</div></div>",
        "id": 389274452,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693945648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Nat -&gt; (?a -&gt; ?a) -&gt; ?a -&gt; ?a</p>\n<p>Do I do this right?</p>",
        "id": 389274994,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1693945856
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 389275034,
        "sender_full_name": "loogle",
        "timestamp": 1693945877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/search.20by.20signature/near/389274452\">said</a>:</p>\n<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>You might be looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.iterate#doc\">docs#Nat.iterate</a></p>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>thanks</p>",
        "id": 389275637,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693946019
    },
    {
        "content": "<p>You do it right, but that query seems to take too long because it's relatively generic - it only has <code>Nat</code> to index on, and too many lemmas mention <code>Nat</code> :-)<br>\nBut not even</p>",
        "id": 389276555,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693946305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat -&gt; (?a -&gt; ?a) -&gt; ?a -&gt; ?a, \"iter\"</p>",
        "id": 389276583,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693946314
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 389276585,
        "sender_full_name": "loogle",
        "timestamp": 1693946316
    },
    {
        "content": "<p>works, and I wonder why. The pattern matching with metavariables doesn't always seem to do what it should, I fear</p>",
        "id": 389276675,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693946355
    },
    {
        "content": "<p>So as a sanity check, would this be a valid way to express the collatz conjecture using <code>Nat.iterate</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collatz_conjecture</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Nat.iterate</span> <span class=\"n\">collatz</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 389277481,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693946611
    },
    {
        "content": "<p>Do I need to import anything to get <code>#find</code> syntax to work within a session?</p>",
        "id": 389278071,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693946795
    },
    {
        "content": "<p>The syntax supported by <a href=\"https://loogle.lean-fro.org/\">https://loogle.lean-fro.org/</a> isn't in mathlib yet, so maybe just use the web version for now</p>",
        "id": 389279175,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693947083
    }
]