[
    {
        "content": "<p>Why I have to separately introduce <code>AddCommMonoid M</code> and <code>Module R M</code> when I want to have a module <code>M</code>? Why <code>Module R M</code> does not extend <code>AddCommMonoid M </code>? </p>\n<p>Is this because I might want to have <code>Module R M</code> and <code>Module S M</code> ? and this would introduce two different additions on <code>M</code> and that would be a problem?</p>\n<p>I'm just wondering to what kind of trouble I'm getting into if I just introduce a class</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span>\n    <span class=\"n\">AddCommGroup</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>as my library really does not care about so much generality. However, at some point I might want to consider <code>X</code> as complex vector space and as real vector space at the same time.</p>",
        "id": 382747556,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691438730
    },
    {
        "content": "<p>Yes you definitely want things to be modules over more than one ring, for example the complexes are a 1D vector space over the complexes and also a 2D vector space over the reals</p>",
        "id": 382757536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691441976
    },
    {
        "content": "<p><a href=\"https://arxiv.org/pdf/2202.01629.pdf#page=8\">https://arxiv.org/pdf/2202.01629.pdf#page=8</a> (section 5.1) has an explanation of this example</p>",
        "id": 382759299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691442554
    },
    {
        "content": "<p>Ahh I should read this pdf every sunday before lunch for couple of months straight. It contains so much wisdom and I always seem to forget it/it does not stick until I need it.</p>",
        "id": 382763088,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691443779
    },
    {
        "content": "<p>Interestingly, with <code>[NormedField K]</code> the class <code>Vec</code> warns me with <code>cannot find synthesization order for instance Vec.toAddCommGroup with type</code>, but with <code>[IsROrC K]</code> this does not happen because <code>K</code> is marked as <code>semiOutParam</code>. I wander if <code>Vec.toAddCommGroup</code> is still dangerous in that case.</p>",
        "id": 382764532,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691444350
    },
    {
        "content": "<p>No, it wouldn't be dangerous if you restrict to <code>IsROrC</code> because that class only has two instances (per the name). So it can't send Lean on a wild goose chase.</p>",
        "id": 382768740,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691446241
    },
    {
        "content": "<p>I'm still worried that <code>Vec ℝ X</code> and <code>Vec ℂ X</code> would introduce two different additions on <code>X</code>, but probably those will be defeq and I do not have to worry about it. </p>\n<p>I really do not want to define <code>Vec</code> as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span>\n    <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">ContinuousSMul</span> <span class=\"n\">K</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>It is tedious to write and makes type signature of every function that depends on few <code>Vec</code> super long and unreadable.</p>",
        "id": 382769562,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691446649
    },
    {
        "content": "<p>This is also explained in the hierarchy chapter of Mathematics in Lean.</p>",
        "id": 382769674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1691446704
    },
    {
        "content": "<p>While <code>AddCommGroup</code> instances may be defeq in all your applications, if you write <code>[Vec K X] [Vec K' X]</code>, there is no guarantee that <code>AddCommGroup</code> projections agree.</p>",
        "id": 382831596,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691475056
    },
    {
        "content": "<p><a href=\"https://github.com/DenisGorbachev/lean-error-resolutions/blob/main/errors/cannot-find-synthesization-order.md\">Solution for \"Cannot find synthesization order\"</a> (for those coming from search)</p>",
        "id": 383491925,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1691642263
    }
]