[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"nf\">mk_capacity</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">string_ensure_capacity</span><span class=\"p\">(</span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">extra</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">lean_assert</span><span class=\"p\">(</span><span class=\"n\">is_exclusive</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string_size</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">cap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string_capacity</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sz</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">extra</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cap</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">new_o</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alloc_string</span><span class=\"p\">(</span><span class=\"n\">sz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cap</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">extra</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string_len</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">lean_assert</span><span class=\"p\">(</span><span class=\"n\">string_capacity</span><span class=\"p\">(</span><span class=\"n\">new_o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">extra</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">w_string_cstr</span><span class=\"p\">(</span><span class=\"n\">new_o</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">string_cstr</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">lean_dealloc</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_string_byte_size</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">new_o</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">lean_string_push</span><span class=\"p\">(</span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_string_size</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_string_len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lean_is_exclusive</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_string</span><span class=\"p\">(</span><span class=\"n\">sz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mk_capacity</span><span class=\"p\">(</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">w_string_cstr</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">lean_string_cstr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">lean_dec_ref</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string_ensure_capacity</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"n\">consumed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">push_unicode_scalar</span><span class=\"p\">(</span><span class=\"n\">w_string_cstr</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">lean_to_string</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">m_size</span><span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sz</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">consumed</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">lean_to_string</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">m_length</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">w_string_cstr</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)[</span><span class=\"n\">sz</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">consumed</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If the string object is not linear, the above operation doubles the size of the string. </p>\n<p>On the fast path where the string is linear, however, the push operation only increases the size by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span>. That is , there may be frequent memcpy if I push chars to a string in a for-loop.</p>\n<p>Am I understanding it correctly? This looks strange.</p>",
        "id": 400241339,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1699066718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> has marked this topic as resolved.</p>",
        "id": 400245555,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699069895
    },
    {
        "content": "<p>I was wrong. On fast path, the buffer is also \"nearly\" doubled using <code>cap + sz</code></p>",
        "id": 400245621,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1699069928
    }
]