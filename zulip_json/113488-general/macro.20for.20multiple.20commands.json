[
    {
        "content": "<p>Is it possible to write a macro that expands to a sequence of Lean commands? For example <code>#silly foo</code> expands to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo_1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo_2</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo_3</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>and <code>#silly bar</code> expands to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar_1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar_2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar_3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>If macros are not the way to go, what is the easiest way to write such a command?</p>",
        "id": 390063906,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1694292937
    },
    {
        "content": "<p>I couldn't find a way when I tried recently and instead came up with something only slightly more verbose in this thread <br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonym.20boilerplate\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Type.20synonym.20boilerplate</a></p>",
        "id": 390064552,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694293533
    },
    {
        "content": "<p>You can just put them all into an quotation</p>",
        "id": 390064752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694293753
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"foo!!\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo3</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This works, but there is something that needs to be done with the actual names <code>foo1</code> etc. that I forget at the moment.</p>",
        "id": 390064868,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694293890
    },
    {
        "content": "<p>Oh wait I misunderstood. But it's still possible, you just need to pass a <code>nm:ident</code> as a parameter (for <code>foo</code> resp. <code>bar</code>)</p>",
        "id": 390064957,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694294005
    },
    {
        "content": "<p>Here is how you can chain it in a for loop. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#empty\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"#silly\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"n\">empty</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">idn</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">id.getId.appendAfter</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"_{i}\"</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"n\">command</span> <span class=\"bp\">←</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">command</span>\n        <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">idn</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"n\">command</span>\n\n<span class=\"bp\">#</span><span class=\"n\">silly</span> <span class=\"n\">foo</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo_1</span>\n\n<span class=\"bp\">#</span><span class=\"n\">silly</span> <span class=\"n\">bar</span>\n<span class=\"k\">#print</span> <span class=\"n\">bar_2</span>\n</code></pre></div>\n<p>The command <code>#empty</code> is just a dummy command doing nothing and is used to initialize the value of <code>command</code>. There has to be a better way to do this.</p>",
        "id": 390065272,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1694294311
    },
    {
        "content": "<p>Aha! <code>mkIdent</code> is what I was missing in my first message :)</p>",
        "id": 390065317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694294372
    },
    {
        "content": "<p>And you don't really need to build them all as one syntax if you use an elab instead and just elab the defs one at a time in a loop instead of building one big syntax for the block</p>",
        "id": 390066340,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694295392
    },
    {
        "content": "<p>One pattern you find in things like the derive handlers is that functions return an <code>Array (TSyntax `command)</code>, these are all concatenated, and then there's a main loop that elabs the combined results.</p>",
        "id": 390146326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694352904
    },
    {
        "content": "<p>Another pattern is in the <code>irreducible_def</code> module. It (locally) defines a syntax for a sequence of commands, where when it elaborates them it stops at the first error: <a href=\"https://github.com/leanprover-community/mathlib4/blob/7d308680dc444730e84a86c72357ad9a7aea9c4b/Mathlib/Tactic/IrreducibleDef.lean#L58\">https://github.com/leanprover-community/mathlib4/blob/7d308680dc444730e84a86c72357ad9a7aea9c4b/Mathlib/Tactic/IrreducibleDef.lean#L58</a></p>",
        "id": 390146758,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694353109
    },
    {
        "content": "<p>The easiest way to expand/elaborate (an Array of) multiple commands at once is via <code>mkNullNode</code> (which the command elaborator has special support for): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"#silly \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmds</span> <span class=\"o\">:=</span> <span class=\"c1\">-- [0:3].map ...</span>\n  <span class=\"o\">{</span><span class=\"n\">raw</span> <span class=\"o\">:=</span> <span class=\"n\">mkNullNode</span> <span class=\"n\">cmds</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>(Sorry that I cannot write a proper mwe. I am on my phone away from the computer).</p>",
        "id": 390152451,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694356591
    },
    {
        "content": "<p>Thank you! All the information and examples are helpful.</p>",
        "id": 390153707,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1694357198
    }
]