[
    {
        "content": "<p>Is it just me (Chrome 119.0.6045.199 on MacBook Pro 13\" 2018 running macOS 13.6.1) or the Mathlib docs pages are using half a GB of memory each!?<br>\n<a href=\"/user_uploads/3121/1B6_pELESuy7ZEMrBcSG_d21/Screenshot-2023-12-08-at-01.25.59.png\">Screenshot-2023-12-08-at-01.25.59.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1B6_pELESuy7ZEMrBcSG_d21/Screenshot-2023-12-08-at-01.25.59.png\" title=\"Screenshot-2023-12-08-at-01.25.59.png\"><img src=\"/user_uploads/3121/1B6_pELESuy7ZEMrBcSG_d21/Screenshot-2023-12-08-at-01.25.59.png\"></a></div>",
        "id": 406720392,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702027825
    },
    {
        "content": "<p>On my machine in chromium it stabilizes around ~85 MB. Which I have no idea if that's big for a modern webpage? But the majority of that size is used by the DeclarationDataCenter so it is most likely possible to improve on.</p>",
        "id": 406726127,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702030054
    },
    {
        "content": "<p>Wasn't there an improvement a long time ago which reduced local storage requirements? Could this lead to high memory usage if someone hasn't cleared the local storage cache since then?</p>",
        "id": 406726538,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702030167
    },
    {
        "content": "<p>I have no idea but I guess its worth a try.</p>",
        "id": 406726691,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702030210
    },
    {
        "content": "<p>Cleared cache and still consistently &gt;350 MB on several doc pages. To compare, a GiHub PR page uses &lt;100 MB, and a Google Doc uses &lt;200 MB.</p>",
        "id": 406730196,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702031420
    },
    {
        "content": "<p>Can you reproduce this in a fresh profile? Do you have any extensions that could be causing the problem?</p>",
        "id": 406734835,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702033069
    },
    {
        "content": "<p>(I can't reproduce it, it stays under 150MB)</p>",
        "id": 406734868,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702033083
    },
    {
        "content": "<p>Mine is around 452MB, on MacBook Pro 2021 (M1)</p>",
        "id": 406735411,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702033258
    },
    {
        "content": "<p>In Chrome Incognito, all extensions disabled, went up to 750 MB lol</p>",
        "id": 406735516,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702033291
    },
    {
        "content": "<p>Is this as soon as you load a page, or do you have to click around a lot?</p>",
        "id": 406735886,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702033403
    },
    {
        "content": "<p>Basically as soon as it finishes loading</p>",
        "id": 406735943,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702033423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/113488-general/topic/Docs.20memory.20usage/near/406735516\">said</a>:</p>\n<blockquote>\n<p>In Chrome Incognito, all extensions disabled, went up to 750 MB lol</p>\n</blockquote>\n<p>191MB for a fresh Chrome Incognito tab</p>",
        "id": 406735964,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702033431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/113488-general/topic/Docs.20memory.20usage/near/406735943\">said</a>:</p>\n<blockquote>\n<p>Basically as soon as it finishes loading</p>\n</blockquote>\n<p>Can you use <a href=\"https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots\">https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots</a> to see if something stands out?</p>",
        "id": 406736142,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702033488
    },
    {
        "content": "<p>Goes up to 361MB after 2 searches</p>",
        "id": 406736303,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702033534
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/yfK_CmbDUwIcI9BmOnuwKCSx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yfK_CmbDUwIcI9BmOnuwKCSx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yfK_CmbDUwIcI9BmOnuwKCSx/image.png\"></a></div><p>If I visit <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/Manifold/MFDeriv.html#HasMFDerivAt\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/Manifold/MFDeriv.html#HasMFDerivAt</a>  in a Chromium (that I never really use) my heap profiler sits at 90 MB</p>",
        "id": 406736528,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702033619
    },
    {
        "content": "<p>But it does indeed go up after visiting another page via searches, 160 after two. That's most likely a mem leak in the JS. I conjecture in the DeclarationDataCenter</p>",
        "id": 406736760,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702033706
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ZOtwJexXht0Ew5eIKT7LaXLF/Screenshot-2023-12-08-at-03.08.32.png\">Screenshot-2023-12-08-at-03.08.32.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZOtwJexXht0Ew5eIKT7LaXLF/Screenshot-2023-12-08-at-03.08.32.png\" title=\"Screenshot-2023-12-08-at-03.08.32.png\"><img src=\"/user_uploads/3121/ZOtwJexXht0Ew5eIKT7LaXLF/Screenshot-2023-12-08-at-03.08.32.png\"></a></div>",
        "id": 406736834,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702033742
    },
    {
        "content": "<p>The large amount of strings are from the DeclarationDataCenter because it has to store all of the meta information for the in browser search.</p>",
        "id": 406737024,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702033809
    },
    {
        "content": "<p>Everytime I search, the profile has a new number under 100MB, then they accumulated, now I'm 500MB after a few searches</p>",
        "id": 406737079,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702033828
    },
    {
        "content": "<p>I'll try to investigate this after my lectures, in the afternoon.</p>",
        "id": 406739184,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702034573
    },
    {
        "content": "<p>Okay interesting (accidental) observation: Just leaving my window alone for 15~ minutes drops the consumed memory drastically back down to 50 MB. Can anyone reproduce this?</p>",
        "id": 406775902,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702047520
    },
    {
        "content": "<p>It only dropped to ~ 270MB (a few hours ago it was 500MB+, and I left it open...)</p>",
        "id": 406777713,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702048057
    },
    {
        "content": "<p>Yeah that happens to me.</p>",
        "id": 406777726,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702048059
    },
    {
        "content": "<p>Could this be an issue with the search feature?</p>",
        "id": 406777891,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702048092
    },
    {
        "content": "<p>I used the following to record, and search for 3 times:</p>\n<p><a href=\"/user_uploads/3121/DA6swOFtzIyD8QijoSfgryy8/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DA6swOFtzIyD8QijoSfgryy8/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DA6swOFtzIyD8QijoSfgryy8/image.png\"></a></div><p>Here is what can be seen from the snapshot:</p>\n<p><a href=\"/user_uploads/3121/2L_0JMkVgu7gX_mUbzQ7Z75P/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2L_0JMkVgu7gX_mUbzQ7Z75P/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2L_0JMkVgu7gX_mUbzQ7Z75P/image.png\"></a></div><p>My guess is that they are trapped in the closure of a Promise.</p>",
        "id": 406778322,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702048210
    },
    {
        "content": "<p>I mean these strings are not supposed to be free'd really. The issue is that they appear multiple times...</p>",
        "id": 406779626,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702048632
    },
    {
        "content": "<p>No I can't figure out where the memory gets duplicated so much. From my understanding of whats going on in the debugger the singleton in the declaration data center works and the large object that it manages does not end up getting duplicated. If someone else has an idea feel free to take a look.</p>",
        "id": 406786268,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702050789
    },
    {
        "content": "<p>Okay I have some more news. So the majority of data that  fills the RAM is strings from the declaration data centers as conjectured above. Now lets say we are on page A and go to B. Interestingly the browser does not instantly free the declaration data center from page A once arriving on B. However it will end up doing this after the mentioned 10 minutes (for whatever reason). And now if you visit a series of pages in quick succession lots of data centers remain in memory but only ever get freed approximately at the same time. At least this is how I am reading the traces of the memory profiler.</p>\n<p>Namely when I visit 7 pages in quick succession, take a snapshot, wait for 10 min until it frees and take another snapshot then diff them I see the corresponding amount of datacenters being freed. If i do just one side swap its just one datacenter.</p>\n<p>While this does explain the phenomena we observe I have no idea how one might convince JS VM to...well not behave like this?</p>",
        "id": 406979602,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702160991
    },
    {
        "content": "<p>I had a few local attempts to fix around the Promise idea, but none seems to work.</p>\n<p>One thing that puzzles me is JS memory seems to be significantly less than total memory. JS memory is usually lower, ~200MB, while the total memory footprint is ~500MB+, and burst more on each search.</p>\n<p><a href=\"/user_uploads/3121/LHu606KQQgdAkWcmzsP4Vc6O/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LHu606KQQgdAkWcmzsP4Vc6O/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/LHu606KQQgdAkWcmzsP4Vc6O/image.png\"></a></div><p>In the time I type the above, total memory down to 300M, JS memory down to 60MB, something just doesn't add up.</p>",
        "id": 407147050,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702265071
    },
    {
        "content": "<p>To make it more obvious, searching more times (I start with a<em>, get to k</em>) results in larger difference: 1G vs 370MB</p>\n<p><a href=\"/user_uploads/3121/VMZmY9ewBJYf9BtkU9a7PStV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VMZmY9ewBJYf9BtkU9a7PStV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/VMZmY9ewBJYf9BtkU9a7PStV/image.png\"></a></div>",
        "id": 407148438,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702265541
    },
    {
        "content": "<p>I checked again throughout the day, and the memory usage is ~ 220MB, which is not low but still much more reasonable than before. Thanks for looking into this. I look forward to future optimisations!</p>",
        "id": 407625153,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702438006
    },
    {
        "content": "<p>(I didn't do anything to fix this because idk how, its still the same code and an ever so slightly changed JSON format)</p>",
        "id": 407660018,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702452622
    }
]