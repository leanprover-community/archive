[
    {
        "content": "<p>I know that you're typically not supposed to be have <code>prelude</code> at the top of files, but it's for a personal (read: a crank) project to see how close I can get Lean 3 notation to standard mathematics. So, now to the actual question: when trying to define <code>has_zero</code> and <code>has_one</code> to get natural numbers to work, it seems to give me an error about how it can't force them to be nats. I can't seem to find the error message anywhere in the C++ code for one, so I'm just... wondering what's going on?</p>",
        "id": 347184913,
        "sender_full_name": "Adalynn",
        "timestamp": 1680708828
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 347185952,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680709045
    },
    {
        "content": "<p>Will do, just in the middle of class right now so I don't have the MWE on hand.</p>",
        "id": 347189970,
        "sender_full_name": "Adalynn",
        "timestamp": 1680709890
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_zero</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">has_zero.mk</span> <span class=\"n\">t</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and the error is \"invalid numeral, failed to force numeral to be a nat\"</p>",
        "id": 347201292,
        "sender_full_name": "Adalynn",
        "timestamp": 1680712487
    },
    {
        "content": "<p>It still breaks even if I try something like <code>0 + t</code> when I add in notation-stuff for <code>+</code> as well</p>",
        "id": 347201540,
        "sender_full_name": "Adalynn",
        "timestamp": 1680712551
    },
    {
        "content": "<p>The default type for numerals in Lean 3 is <code>ℕ</code> aka <code>nat</code>. But I don't know how this plays with <code>prelude</code>.</p>",
        "id": 347206892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680713846
    },
    {
        "content": "<p>Is <code>nat</code> defined after <code>prelude</code>? Do you need to provide an instance of <code>has_zero nat</code>?</p>",
        "id": 347207076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680713885
    },
    {
        "content": "<p><code>prelude</code>-mode doesn't have <code>nat</code>, I've checked. So the default is the unicode symbol? I'll have to try that later, along with a has_zero nat.</p>",
        "id": 347211697,
        "sender_full_name": "Adalynn",
        "timestamp": 1680714929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"607019\">@Adalynn</span>  No, you don't need the unicode symbol. Maybe just assert the existence of <code>nat</code>, via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">nat.has_zero</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 347213632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680715468
    },
    {
        "content": "<p>Or define the actual inductive type, etc...</p>",
        "id": 347213673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680715479
    },
    {
        "content": "<p>Yeah, that also doesn't work... Need to actually have an instance, which causes it to work. Thanks for the advice!</p>",
        "id": 347215379,
        "sender_full_name": "Adalynn",
        "timestamp": 1680715936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607019\">Adalynn</span> has marked this topic as resolved.</p>",
        "id": 347220431,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680717387
    },
    {
        "content": "<p>I'm still a bit confused by your question, the following works fine for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_zero</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">+</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">has_add.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kd\">constant</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">has_zero.mk</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 347228047,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680719606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> But does <code>#check 0</code> (without a type) also work for you?</p>",
        "id": 347228437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680719731
    },
    {
        "content": "<p>No, but I wouldn't expect it to</p>",
        "id": 347228496,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680719748
    },
    {
        "content": "<p>Maybe I just don't understand what the goal is enough but \"It still breaks even if I try something like 0 + t when I add in notation-stuff for + as well\" was unclear to me, so I'm just showing that if you set things up right that works fine. and 0 is interpreted as something of type T</p>",
        "id": 347228839,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680719860
    },
    {
        "content": "<p>OH right, It's because I had in my file, add was defined via <code>class has_add(α: Type u)(β: Type v)(γ: out_param(Type w)) := (add: α → β → γ)\n</code> to allow for coset notation</p>",
        "id": 347233782,
        "sender_full_name": "Adalynn",
        "timestamp": 1680721453
    },
    {
        "content": "<p>Right if you have a heterogeneous addition operation you would need to specify the type of <code>0</code>as <code>(0 : T)</code> if you wanted it to be in <code>T</code> otherwise lean would assume its  a nat indeed (even if nat isn't defined)</p>",
        "id": 347234889,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680721803
    },
    {
        "content": "<p>Yeah, I thought initially it wasn't the homogeneity of the <code>has_add</code> but the homogeneity of the <em>arguments</em> (i.e. I thought it would work if I had an instance as <code>has_add T T T</code>) which was why I was so confused, thanks.</p>",
        "id": 347240631,
        "sender_full_name": "Adalynn",
        "timestamp": 1680723847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607019\">Adalynn</span> has marked this topic as unresolved.</p>",
        "id": 347525202,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680818528
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Class_subset_Class</span><span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"n\">Class</span> <span class=\"n\">Class</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)[</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">C</span> <span class=\"bp\">⇒</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">D</span><span class=\"o\">]⟩</span>\n  <span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">Class_subset_Set</span><span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"n\">Class</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)[</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">C</span> <span class=\"bp\">⇒</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">S</span><span class=\"o\">]⟩</span>\n  <span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">Set_subset_Class</span><span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"n\">Set</span> <span class=\"n\">Class</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)[</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">S</span> <span class=\"bp\">⇒</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">C</span><span class=\"o\">]⟩</span>\n  <span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">Set_subset_Set</span><span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"n\">Set</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)[</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">S</span> <span class=\"bp\">⇒</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">T</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">constants</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">Class</span>\n<span class=\"kd\">constants</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">Set</span>\n<span class=\"k\">#check</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>For some reason this also breaks, with a heterogeneous $\\subseteq$ defined in a different file...</p>\n<p><del>this is probably why people don't use prelude often</del></p>",
        "id": 347525460,
        "sender_full_name": "Adalynn",
        "timestamp": 1680818657
    },
    {
        "content": "<p>the same thing happened when I tried overloading the heterogenous equals with <code>Set = Class</code> and <code>Class = Set</code>, it for some reason clashed with the homogenous equals instance in a different file</p>\n<p>What's going on? Does the lean 3 compiler just like to force homogeneity?</p>",
        "id": 347526157,
        "sender_full_name": "Adalynn",
        "timestamp": 1680819024
    },
    {
        "content": "<p>For what it's worth, here's where the nat error in the C++ is reported <a href=\"https://github.com/leanprover-community/lean/blob/f2b2beefe2e9ab200d23e1c99dc20879eb32e9fa/src/frontends/lean/elaborator.cpp#L3618\">https://github.com/leanprover-community/lean/blob/f2b2beefe2e9ab200d23e1c99dc20879eb32e9fa/src/frontends/lean/elaborator.cpp#L3618</a></p>",
        "id": 347526472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680819193
    },
    {
        "content": "<p>I fixed the nat error already, by using a workaround... but I'm now stuck on a similar error with typeclasses</p>",
        "id": 347527579,
        "sender_full_name": "Adalynn",
        "timestamp": 1680819719
    },
    {
        "content": "<p>Oh, I fixed it, I had needless <code>out_params</code> everywhere</p>",
        "id": 347530537,
        "sender_full_name": "Adalynn",
        "timestamp": 1680820925
    }
]