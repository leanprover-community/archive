[
    {
        "content": "<p>In various places, but especially in the measure theory library, we abuse definitional equality and regard a set as a function <code>α → Prop</code>. Mostly this is fine but one thing that does not work is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">s</span> <span class=\"bp\">=ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">∅</span> <span class=\"c1\">-- failed to synthesize instance EmptyCollection (α → Prop)</span>\n</code></pre></div>",
        "id": 377364466,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958077
    },
    {
        "content": "<p>I propose fixing this as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">PiProp.instEmptyCollection</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">EmptyCollection</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span><span class=\"o\">⟩</span> <span class=\"c1\">-- Or even `Set.instEmptyCollectionSet`</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">s</span> <span class=\"bp\">=ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">∅</span> <span class=\"c1\">-- works :-)</span>\n</code></pre></div>",
        "id": 377364654,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958111
    },
    {
        "content": "<p>Any objections?</p>",
        "id": 377364737,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958134
    },
    {
        "content": "<p>There was a discussion about <code>=ᵐ[μ]</code> and sets somewhere else, right?</p>",
        "id": 377364793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689958150
    },
    {
        "content": "<p>I assume you don't want to use <code>\\bot</code>, which should already work here</p>",
        "id": 377364877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689958172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/An.20.60EmptyCollection.60.20instance.20for.20Prop-valued.20functions/near/377364793\">said</a>:</p>\n<blockquote>\n<p>There was a discussion about <code>=ᵐ[μ]</code> and sets somewhere else, right?</p>\n</blockquote>\n<p>There was a discussion which ultimately resulted in this issue <a href=\"https://github.com/leanprover-community/mathlib/pull/16932\">!3#16932</a> for which the history is here: <a href=\"#narrow/stream/113488-general/topic/Diamond.20of.20complete.20boolean.20algebras.20on.20sets\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Diamond.20of.20complete.20boolean.20algebras.20on.20sets</a></p>",
        "id": 377365141,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958232
    },
    {
        "content": "<p>(I actually plan to fix that issue at some point when I'm feeling patient.)</p>",
        "id": 377365253,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/An.20.60EmptyCollection.60.20instance.20for.20Prop-valued.20functions/near/377364877\">said</a>:</p>\n<blockquote>\n<p>I assume you don't want to use <code>\\bot</code>, which should already work here</p>\n</blockquote>\n<p>I hadn't considered this but I'd prefer to use <code>∅</code> and it looks like I can unless there's an objection to my proposal here.</p>",
        "id": 377365460,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958310
    },
    {
        "content": "<p>I think that we should add a notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.EventuallyEq#doc\">docs#Filter.EventuallyEq</a> for sets which unfolds to <code>(· ∈ s) =ᶠ[l] (· ∈ t)</code></p>",
        "id": 377365766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958377
    },
    {
        "content": "<p>And add <code>⊆ᶠ[l]</code> which unfolds to <code>(· ∈ s) ≤ᶠ[l] (· ∈ t)</code></p>",
        "id": 377365960,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958418
    },
    {
        "content": "<p>These should be notations, not (semireducible) definitions so that we can continue using lemmas about <code>EventuallyLE</code> and <code>EventuallyEq</code>.</p>",
        "id": 377366312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958491
    },
    {
        "content": "<p>But this should wait till we reopen Mathlib for refactors.</p>",
        "id": 377366448,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/An.20.60EmptyCollection.60.20instance.20for.20Prop-valued.20functions/near/377366448\">said</a>:</p>\n<blockquote>\n<p>But this should wait till we reopen Mathlib for refactors.</p>\n</blockquote>\n<p>this isn't the case yet?</p>",
        "id": 377366546,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689958543
    },
    {
        "content": "<p>Is it definitely a win to have more notation? I mean <code>s =ᵐ[μ] t</code> is completely clear already, it's just that we haven't supported it fully.</p>",
        "id": 377366943,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958609
    },
    {
        "content": "<p>I think using sets as functions is a design mistake. Elsewhere we're careful to write <code>(· ∈ s)</code> for <code>s</code> as a function.</p>",
        "id": 377367332,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689958677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  I agree and I'm to blame for introducing this abuse of defeq.</p>",
        "id": 377367797,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Empty set is not the only operation. We get similar errors with all set operations.</p>",
        "id": 377367982,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958793
    },
    {
        "content": "<p>Is there a downside to this design decision beyond the burden it creates to ensure that we have definitionally equal constructions on <code>Set α</code> and <code>α → Prop</code>?</p>",
        "id": 377367991,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/An.20.60EmptyCollection.60.20instance.20for.20Prop-valued.20functions/near/377367982\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> Empty set is not the only operation. We get similar errors with all set operations.</p>\n</blockquote>\n<p>I know.</p>",
        "id": 377368082,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958809
    },
    {
        "content": "<p>I think that <code>=ᵐˢ</code> or <code>=ˢᵐ</code> is short and readable too.</p>",
        "id": 377368164,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958828
    },
    {
        "content": "<p>Once you accidentally get terms like <code>s x</code> there's no theory about it, and you can't write any simp lemmas to get you out of the situation.</p>",
        "id": 377368172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689958831
    },
    {
        "content": "<p>Also, Lean 4 simp uses discrimination trees and a similar abuse of defeq in manifolds leads to situations when <code>simp</code> fails to apply a theorem because it is about <code>Prod</code> while the arguments are of type <code>ModelProd</code>.</p>",
        "id": 377368479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958902
    },
    {
        "content": "<p>BTW, I think that we should add notation <code>=ˢ</code> for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.EqOn#doc\">docs#Set.EqOn</a></p>",
        "id": 377368859,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689958977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/An.20.60EmptyCollection.60.20instance.20for.20Prop-valued.20functions/near/377368164\">said</a>:</p>\n<blockquote>\n<p>I think that <code>=ᵐˢ</code> or <code>=ˢᵐ</code> is short and readable too.</p>\n</blockquote>\n<p>Fair enough; I don't have strenuous objections. But it does seem the same argument could almost be used to justify separate notations for addition on <code>ℤ</code> versus <code>ℚ</code> or something.  For me if we add a new notation for this, it's a slight capitulation to the computer. I'd never use it on the blackboard.</p>",
        "id": 377368881,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689958982
    },
    {
        "content": "<p>It'd be nice if <code>Set</code> were a structure. One cool thing would be that we could have a CoeFun instance that makes it so <code>s</code> as a function <em>is</em> <code>(· ∈ s)</code></p>",
        "id": 377369076,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689959025
    },
    {
        "content": "<p>With the above remarks in mind, it sounds like my need for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">PiProp.instEmptyCollection</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">EmptyCollection</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>will ultimately disappear (maybe soon). Nevertheless, am I right in thinking there is no objection to adding this anyway?</p>",
        "id": 377369950,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689959221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Though we would need an unexpander to avoid <code>fun x ↦ x ∈ s =ᵐ[μ] fun x ↦ x ∈ t</code> in the info view.</p>",
        "id": 377370543,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689959332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> I don't think it's a good idea, because now if you see <code>∅</code> you can't be sure whether it's a true <code>Set</code> or a predicate</p>",
        "id": 377370551,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689959333
    },
    {
        "content": "<p>I think that you should write <code>(∅ : Set _)</code> in the RHS.</p>",
        "id": 377370718,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689959370
    },
    {
        "content": "<p>That's what we do for union and intersection.</p>",
        "id": 377370766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689959384
    },
    {
        "content": "<p>OK I give in. Maybe I'm not persuaded but I'm in the minority!</p>",
        "id": 377370921,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689959410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/An.20.60EmptyCollection.60.20instance.20for.20Prop-valued.20functions/near/377366546\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/An.20.60EmptyCollection.60.20instance.20for.20Prop-valued.20functions/near/377366448\">said</a>:</p>\n<blockquote>\n<p>But this should wait till we reopen Mathlib for refactors.</p>\n</blockquote>\n<p>this isn't the case yet?</p>\n</blockquote>\n<p>We're waiting for official pair of tags on <code>mathlib3</code> and <code>Mathlib4</code>. We hope to have them today or tomorrow.</p>",
        "id": 377371161,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689959470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"406490\">María Inés de Frutos Fernández</span> has marked this topic as resolved.</p>",
        "id": 378167061,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690209363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"406490\">María Inés de Frutos Fernández</span> has marked this topic as unresolved.</p>",
        "id": 378167176,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690209378
    }
]