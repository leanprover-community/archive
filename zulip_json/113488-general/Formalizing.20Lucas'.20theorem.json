[
    {
        "content": "<p>Hi I'm a first-year mathematics undergraduate and I'd like to formalize Lucas' theorem (<a href=\"https://en.wikipedia.org/wiki/Lucas%27s_theorem\">https://en.wikipedia.org/wiki/Lucas%27s_theorem</a>), and I've completed everything but the inequality world in the natural number game, but I can't find how to define non-base 10 numbers, and easily be able to play around with the indices of products and sums.  Where should I look to learn more about how to do such a thing?   Is this a relevant thing to prove in Lean and try to get added to mathlib?</p>",
        "id": 252013175,
        "sender_full_name": "Alexander Valentino",
        "timestamp": 1630774918
    },
    {
        "content": "<p>I think mathlib has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.digits\">docs#nat.digits</a> which computes digits in some arbitrary base.</p>",
        "id": 252013458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630775233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20Lucas'.20theorem/near/252013458\">said</a>:</p>\n<blockquote>\n<p>I think mathlib has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.digits\">docs#nat.digits</a> which computes digits in some arbitrary base.</p>\n</blockquote>\n<p>Thank you, what about manipulating indicies?  Or should I be asking this question elsewhere in the new members channel?</p>",
        "id": 252014835,
        "sender_full_name": "Alexander Valentino",
        "timestamp": 1630776861
    },
    {
        "content": "<p>No, it's fine to ask it here</p>",
        "id": 252016339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630778536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"425229\">@Alexander Valentino</span> What do you mean exactly with \"manipulating indices\"?</p>",
        "id": 252016348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630778551
    },
    {
        "content": "<p>Hi there, I'm wondering what would I need to grasp from starting with just having completed most of the natural number game to formalizing this theorem, copying the proof via generating functions from Wikipedia (<a href=\"https://en.wikipedia.org/wiki/Lucas%27s_theorem\">https://en.wikipedia.org/wiki/Lucas%27s_theorem</a>)?</p>",
        "id": 256446656,
        "sender_full_name": "Alexander Valentino",
        "timestamp": 1633539875
    },
    {
        "content": "<p>It looks like the first half of the proof can be proved via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_pow_char_pow_of_commute\">docs#add_pow_char_pow_of_commute</a>, other than that it would help to get a bit used to the material in <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html</a> I guess.</p>",
        "id": 256451882,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633541926
    },
    {
        "content": "<p>I remember seeing Lucas' theorem or something very close to it... Let me dig again.</p>",
        "id": 256459136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633544453
    },
    {
        "content": "<p><del>I have been working on this in <a href=\"https://github.com/leanprover-community/mathlib/issues/8820\">#8820</a></del><br>\nActually, this PR is Lucas' <em>Primality</em> theorem. Perhaps this is what Yaël was thinking of.</p>",
        "id": 256796048,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1633722688
    },
    {
        "content": "<p>Hi, it's been two years, time to fix this :) I proved it <a href=\"https://github.com/grhkm21/lean4/commit/aaddea345645930d8e30d8efed69c8ddac0b99b3\">here</a></p>",
        "id": 403916775,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700812320
    },
    {
        "content": "<p>I only proved the weaker version <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>≡</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>k</mi><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><mi>p</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><mrow><mi>k</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\binom{n}{k} \\equiv \\binom{n \\pmod{p}}{k \\pmod{p}} \\binom{n / p}{k / p} \\pmod{p}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7454em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.52em;vertical-align:-0.5355em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9845em;\"><span style=\"top:-2.3395em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace allowbreak mtight\"></span><span class=\"mspace mtight\" style=\"margin-right:0.5204em;\"></span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">mod</span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.3903em;\"></span><span class=\"mord mathnormal mtight\">p</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.1595em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace allowbreak mtight\"></span><span class=\"mspace mtight\" style=\"margin-right:0.5204em;\"></span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">mod</span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.3903em;\"></span><span class=\"mord mathnormal mtight\">p</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5355em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9845em;\"><span style=\"top:-2.3395em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">p</span></span></span></span><span style=\"top:-3.1595em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5355em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> but the full version can be done via induction. Can someone check if my formulation of <code>lucas'</code> is correct, or is there a better way to do it? Johan proposed <code>.digits</code> above but I'm not sure if it's the correct way</p>",
        "id": 403916934,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700812395
    },
    {
        "content": "<p>And I think <code>sum_ite_iff_eq</code>should be in Mathlib so that it's more convenient to rewrite sums, but I don't know how to name it</p>",
        "id": 403917206,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700812555
    },
    {
        "content": "<p>Also the proof is quite slow and I don't know why. Here's <code>profiler</code> trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeFun</span> <span class=\"n\">took</span> <span class=\"mi\">181</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">201</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">193</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">184</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeFun</span> <span class=\"n\">took</span> <span class=\"mi\">164</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">193</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">191</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">190</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeFun</span> <span class=\"n\">took</span> <span class=\"mi\">169</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">197</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 403917378,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700812653
    },
    {
        "content": "<p>Your second lemma is just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod.int_cast_eq_int_cast_iff#doc\">docs#ZMod.int_cast_eq_int_cast_iff</a></p>",
        "id": 403917496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700812699
    },
    {
        "content": "<p>Yep, thanks</p>",
        "id": 403917592,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700812761
    },
    {
        "content": "<p>your <code>sum_ite_iff_eq</code> can be golfed a little:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_ite_iff_eq</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">sum_ite_eq'</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">if_congr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403938735,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700821195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> In that case, you can <span aria-label=\"curry\" class=\"emoji emoji-1f35b\" role=\"img\" title=\"curry\">:curry:</span>  the function to <code>fun a ha =&gt;</code> too :) Thanks!</p>",
        "id": 403956014,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700827965
    },
    {
        "content": "<p><a href=\"https://github.com/grhkm21/lean4/commit/0ec5a46d02a7d89e0e388e6c8ba856642e08304a\">https://github.com/grhkm21/lean4/commit/0ec5a46d02a7d89e0e388e6c8ba856642e08304a</a><br>\nHere's the newest version. If someone wants to prove the full version please go ahead, as I will be travelling for the next few days :)<br>\nThough I can definitely do it when I come back</p>",
        "id": 403956281,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700828091
    },
    {
        "content": "<p>Should this go into mathlib? :)</p>",
        "id": 403961459,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700830108
    },
    {
        "content": "<p>Yeah</p>",
        "id": 403961494,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700830125
    },
    {
        "content": "<p>But I think there are some other relevant theorems that’s provable</p>",
        "id": 403961609,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700830172
    },
    {
        "content": "<p>Maybe some generalisations - I remember one for mod p^2 for example, but it’s quite a lot more complicated</p>",
        "id": 403961690,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700830203
    },
    {
        "content": "<p>Don't let the complete be the enemy of the good</p>",
        "id": 403961778,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700830227
    },
    {
        "content": "<p>Okay, I will start a draft PR first to force myself to progress <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 403961841,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700830255
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8612/files\">here</a> we go. I will work on it afterwards, but PRs would be appreciated too :)</p>",
        "id": 403974121,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700834801
    }
]