[
    {
        "content": "<p>Using mathlib master,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">J</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">J</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">K</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">false</span> <span class=\"k\">else</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">J</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p><code>aesop</code> works, but <code>aesop?</code> causes a panic on my machine, and an error in a very large font!</p>\n<p><a href=\"/user_uploads/3121/a31ESM-B7osvMgDAkDImovXM/Screenshot-from-2023-10-28-12-35-13.png\">Screenshot-from-2023-10-28-12-35-13.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/a31ESM-B7osvMgDAkDImovXM/Screenshot-from-2023-10-28-12-35-13.png\" title=\"Screenshot-from-2023-10-28-12-35-13.png\"><img src=\"/user_uploads/3121/a31ESM-B7osvMgDAkDImovXM/Screenshot-from-2023-10-28-12-35-13.png\"></a></div><p>Should this message be in <a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a> ? Is this an issue with <code>TryThis</code>?</p>",
        "id": 399041865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698492955
    },
    {
        "content": "<p>I think that Aesop needs to be updated after <a href=\"https://github.com/leanprover/std4/pull/215\">https://github.com/leanprover/std4/pull/215</a>, the widget changed so at the very least Aesop needs to add some extra json to call it properly</p>",
        "id": 399047428,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698497031
    },
    {
        "content": "<p>maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Aesop.addTryThisTacticSeqSuggestion#doc\">docs#Aesop.addTryThisTacticSeqSuggestion</a> can be removed completely now in facvour of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Tactic.TryThis.addSuggestion#doc\">docs#Std.Tactic.TryThis.addSuggestion</a> <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> what do you think?</p>",
        "id": 399047708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698497228
    },
    {
        "content": "<p>Hmm, the docstring says that it’s specifically to handle some bad formatting—I’ve only taken a cursory glance so I’m not sure if it’s the same bad formatting as mentioned <a href=\"#narrow/stream/348111-std4/topic/.60TryThis.60.20widget.20doesn't.20support.20multi-line.20suggestions\">here</a>.</p>\n<p><a href=\"https://github.com/leanprover/std4/pull/215\">std4#215</a> didn’t address this issue per se, but I think it at least means code no longer needs to be copy-pasted the way it currently is in that definition, since <code>Suggestion</code>s (the structure fed into <code>addSuggestion</code>(<code>s</code>)) can also be just raw strings now! So maybe <code>addTacticSeqSuggestion</code> could become more or less <code>return addSuggestion { suggestion := (&lt;- someSpecificPrettyPrinting stx) }</code> until the actual underlying pretty-printing issue is fixed. But again I haven’t looked closely at the code, so I’m not sure if there are any other changes it makes.</p>",
        "id": 399126851,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698565749
    },
    {
        "content": "<p>I can't repro this right now because my VSCode is borked, but as soon as it's unborked I'll fix it. Thanks for the debugging work!</p>",
        "id": 399583901,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698778335
    },
    {
        "content": "<p>This is now fixed on Aesop master, but the mathlib bump is currently blocked by work on <code>continuity</code> (see <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity\">#mathlib4 &gt; Regression in continuity</a> ).</p>",
        "id": 400023639,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698961671
    }
]