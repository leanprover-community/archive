[
    {
        "content": "<p>I am trying to wrote a tactic that behaves like <code>field_simp</code>, but also uses cancelation in denominators (adding the corresponding hypothesis to be proved as new goals). It is basically a sequence of rewrites:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"unify_denoms\"</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">unify_denoms</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span><span class=\"o\">(</span> <span class=\"n\">field_simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?;</span>  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_add_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_sub_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_div'</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_add'</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_sub'</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_div'</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_mul_right</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_mul_left</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>as you can see, it results in a very long line, but if i try to split it, it gives errors. So I have two questions:</p>\n<ul>\n<li>Is there a way to break the line so it looks better, but Lean still considers it as a single line in terms of syntax?</li>\n<li>Is there a more elegant (or better in a general sense) to do this kind of thing?</li>\n</ul>",
        "id": 399052519,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698500750
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I would expect that you could break that in many places without errors</p>",
        "id": 399054688,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698502262
    },
    {
        "content": "<p>Extra brackets</p>",
        "id": 399054705,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698502274
    },
    {
        "content": "<p>You need extra brackets starting after <code>(tactic|</code></p>",
        "id": 399054745,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698502307
    },
    {
        "content": "<p>One other thing to do is use <code>$loc</code> instead of <code>$location</code> seeing as you have it 5 times</p>",
        "id": 399054800,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698502324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20break.20lines/near/399054688\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I would expect that you could break that in many places without errors</p>\n</blockquote>\n<p>This: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"unify_denoms\"</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">unify_denoms</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">field_simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?;</span>  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">|</span>\n <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_add_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_sub_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">))))</span>\n</code></pre></div>\n<p>gives me an error: <code>expected ')'</code>. It highlights the first <code>|</code> in the last line.</p>",
        "id": 399055578,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698502928
    },
    {
        "content": "<p>This is not an mwe since there is no syntax category by the name <code>location</code> in this example</p>",
        "id": 399055711,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698503041
    },
    {
        "content": "<p>Changing <code>loc</code>  to <code> location</code> has the same behaviour.</p>",
        "id": 399055838,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698503102
    },
    {
        "content": "<p>No I just mean that it will make your line shorter and easier to read</p>",
        "id": 399056013,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698503229
    },
    {
        "content": "<p>I disagree with Alex since I am a fan of descriptive names, but it will really help us if you have an example where everything else is in place</p>",
        "id": 399056068,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698503276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span> your code gives me <code>unknown parser declaration/category/alias 'location'</code>. Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? Click on the link if you don't know what I'm talking about.</p>",
        "id": 399056125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698503293
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"unify_denoms\"</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">unify_denoms</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span> <span class=\"bp\">|</span>\n  <span class=\"n\">field_simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_add_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_sub_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 399056143,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698503312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20break.20lines/near/399056068\">said</a>:</p>\n<blockquote>\n<p>I disagree with Alex since I am a fan of descriptive names, but it will really help us if you have an example where everything else is in place</p>\n</blockquote>\n<p>In general I agree but <code>$loc</code> is already quite common in the library, so anybody reading it probably knows what it means</p>",
        "id": 399056190,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698503345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20break.20lines/near/399056013\">said</a>:</p>\n<blockquote>\n<p>No I just mean that it will make your line shorter and easier to read</p>\n</blockquote>\n<p>Yes, I get that. I just wanted to point that that change is not the culprit. So the mwe would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"unify_denoms\"</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">unify_denoms</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"o\">((</span> <span class=\"n\">field_simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?;</span>  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_add_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_sub_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 399056206,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698503358
    },
    {
        "content": "<p><code>unknown tactic</code></p>",
        "id": 399056366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698503462
    },
    {
        "content": "<p>I've already worked out and posted the correct opens above.</p>",
        "id": 399056408,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698503504
    },
    {
        "content": "<ol>\n<li>That is not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> since the syntax line has an unknown syntax category, which leads to it not being registered, ergo <code>unknown tactic</code> error on the macro </li>\n<li>The below also works</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"unify_denoms\"</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">unify_denoms</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span><span class=\"o\">(</span>\n  <span class=\"n\">field_simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_add_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_sub_div</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 399056412,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698503506
    },
    {
        "content": "<p>Alex has answered your question, but I'm just trying to make the point that you should check your posts by cutting and pasting into a new file. It makes everyone else's life easier.</p>",
        "id": 399056425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698503513
    },
    {
        "content": "<p>Thanks everybody. It works.</p>",
        "id": 399057643,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698504369
    }
]