[
    {
        "content": "<p>The following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.ZFC.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ZFSet.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">ZFSet.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">ZFSet.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zero</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">≠</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">∈</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">]</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h0</span>\n  <span class=\"n\">done</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">try 'simp at h0' instead of 'simpa using h0' [linter.unnecessarySimpa]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>makes the <code>unnecessarySimpa</code> linter complain that I'm using <code>simpa</code> unnecessarily. But its suggestion to use <code>simp at h0</code> clearly won't work because such a tactic invocation won't ever close the goal, whereas <code>simpa using h0</code> does.</p>",
        "id": 373130322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688720412
    },
    {
        "content": "<p>simp at will close the goal if it reduces the hypothesis to false</p>",
        "id": 373151351,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688724480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 373160697,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688726304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 373160705,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688726306
    },
    {
        "content": "<p>Yes I discovered this today whilst working on something else! However <code>simp at h0</code> does not close this goal in this case, the linter is just plain wrong (and it's annoying because I don't know how to remove the warning)</p>",
        "id": 373286850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688751459
    },
    {
        "content": "<p><span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> <code>simp [zero] at h0</code> works. So in fact this is probably just a bug in the linter output (it fails to mention the list of extra stuff fed to <code>simpa</code>) rather than anything weirder.</p>",
        "id": 373287450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688751624
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/180\">std4#180</a></p>",
        "id": 373288839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688752016
    },
    {
        "content": "<blockquote>\n<p>(and it's annoying because I don't know how to remove the warning)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Every linter warning comes with a <code>[linter.xxx]</code> at the end. If you use <code>set_option linter.xxx false in</code> then the warning will be suppressed</p>",
        "id": 373345927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688771341
    },
    {
        "content": "<p>The reason it's not a \"Try this\" is because the message is approximate, it's asking you to manually rewrite the syntax. Maybe <code>'simp [...] at h0' instead of 'simpa [...] using h0'</code> would be clearer?</p>",
        "id": 373346168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688771464
    },
    {
        "content": "<p>Experimentation indicated that the linter knew the name of the hypothesis being <code>simp</code>ed so I am slightly surprised that the error can't also include a list of the hypotheses being used to simp it. But yeah I think that if I'd seen that revised version of the error with the <code>[...]</code> then I would not even have mentioned the issue. I just tried exactly what it said and it failed and I didn't engage my brain, I just decided to whinge. The moment I thought about it I realised that of course the hypotheses should still be included.</p>",
        "id": 373346513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688771647
    },
    {
        "content": "<p>it can, this was definitely laziness on my part when writing the message</p>",
        "id": 373347171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688772077
    },
    {
        "content": "<p>because simp has a ton of options, it's annoying to pretty print it all</p>",
        "id": 373347247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688772124
    }
]