[
    {
        "content": "<p>I'm wondering how I would go about setting this up to show that the recursion terminates, since eventually <code>s</code> will be longer than any of the elements of <code>l</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">variant</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n  <span class=\"k\">then</span> <span class=\"n\">variant</span> <span class=\"o\">(</span><span class=\"n\">s.append</span> <span class=\"n\">c.toString</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">l</span>\n  <span class=\"k\">else</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 389334851,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1693974359
    },
    {
        "content": "<p>Maybe part of the issue is that it is an <code>if, then, else</code> and not a match, so I'm not sure what the syntax is to deal with it to start.</p>",
        "id": 389344889,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1693980627
    },
    {
        "content": "<p>you need to use <code>if h : s ∈ l</code></p>",
        "id": 389345355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693980884
    },
    {
        "content": "<p>Do I somehow introduce <code>by</code> to show the proof?</p>",
        "id": 389345731,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1693981098
    },
    {
        "content": "<p>I guess it is <code>termination_by</code>.</p>",
        "id": 389346152,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1693981330
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 389355886,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1693985464
    },
    {
        "content": "<p>Is this the right setup?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">variant</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n  <span class=\"k\">then</span> <span class=\"n\">variant</span> <span class=\"o\">(</span><span class=\"n\">s.append</span> <span class=\"n\">c.toString</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">l</span>\n  <span class=\"k\">else</span> <span class=\"n\">s</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">variant</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.sup</span> <span class=\"n\">String.length</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">s.length</span>\n</code></pre></div>",
        "id": 389357703,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1693986116
    },
    {
        "content": "<p>What kind of expression is <code>termination_by</code> looking for?</p>",
        "id": 389546614,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694051779
    },
    {
        "content": "<p>Is it supposed to be some kind of function?</p>",
        "id": 389546700,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694051834
    },
    {
        "content": "<p>Look for examples in core lean or mathlib -- right now this seems to be the most efficient way to understand this stuff</p>",
        "id": 389575908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694065703
    },
    {
        "content": "<p>There might be a simpler way to do it, but I kept hacking at it and got this to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.String.Lemmas</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">List.str_max_len</span> <span class=\"o\">:</span>\n  <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">max</span> <span class=\"n\">hd.length</span> <span class=\"o\">(</span><span class=\"n\">List.str_max_len</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list_str_max_len_mem</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.length</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">List.str_max_len</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">List.str_max_len</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">c1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">c1</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">c1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"n\">c1</span>\n      <span class=\"n\">trans</span> <span class=\"n\">List.str_max_len</span> <span class=\"n\">tl</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">variant</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n  <span class=\"k\">then</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.str_max_len</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">String.length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">String.length</span> <span class=\"o\">(</span><span class=\"n\">Char.toString</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.str_max_len</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">String.length</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Char.toString</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">String.length</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Char.toString</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">list_str_max_len_mem</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">tsub_lt_tsub_iff_right</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">variant</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">c.toString</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">l</span>\n  <span class=\"k\">else</span> <span class=\"n\">s</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">variant</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.str_max_len</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">s.length</span>\n</code></pre></div>",
        "id": 389576248,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694065880
    },
    {
        "content": "<p>Would anyone happen to know how to go about proving things about this definition? Is there some way to do induction on it? For example, I'm struggling with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">variant</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 389815848,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694153013
    },
    {
        "content": "<p>Unfolding the definition doesn't help, because it just keeps on going.</p>",
        "id": 389815925,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694153052
    },
    {
        "content": "<p>And I'm not certain what to do induction on.</p>",
        "id": 389815947,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694153071
    },
    {
        "content": "<p>I thought maybe <code>s.data</code>, but <code>induction s.data</code> doesn't seem to change the goal.</p>",
        "id": 389816355,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694153282
    },
    {
        "content": "<p>Unfold <code>variant</code> and use <code>split</code>?</p>",
        "id": 389816525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694153379
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">variant</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">variant</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">split_ifs</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">c1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Char</span>\n<span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n<span class=\"n\">c1</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">variant</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">Char.toString</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 389816710,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694153475
    },
    {
        "content": "<p>I'm not sure where to go from there.</p>",
        "id": 389816849,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694153546
    },
    {
        "content": "<p>The most I have been able to prove is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">variant</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 389816935,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694153596
    },
    {
        "content": "<p>You can use a similar recursion for the proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">variant_spec</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">variant</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n  <span class=\"k\">then</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.str_max_len</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">String.length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">String.length</span> <span class=\"o\">(</span><span class=\"n\">Char.toString</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.str_max_len</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">String.length</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Char.toString</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">String.length</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Char.toString</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">list_str_max_len_mem</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">tsub_lt_tsub_iff_right</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">variant</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n\n    <span class=\"n\">apply</span> <span class=\"n\">variant_spec</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"k\">else</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">variant</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">variant_spec</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.str_max_len</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">s.length</span>\n</code></pre></div>",
        "id": 389827391,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694158743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Thank you! I'm not familiar with how this form of proof works. Is it equivalent in some way to one of the usual forms of induction? Is there exposition on it somewhere?</p>",
        "id": 389922706,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694194432
    },
    {
        "content": "<p>Well whats happening here is that lemmas and defs are basically the same thing. Constructing some sort of resursive function that terminates and produces some value is not just analogous to writing down some recursive function that terminates and produces a proof, its really the same thing. So seeing as you already worked out precisely what induction you needed to state the function it makes sense to use the analogous structure to prove things about the function.<br>\nUnder the hood both are being turned into something defined in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WellFounded.fix#doc\">docs#WellFounded.fix</a>, we can just use this nice recursive syntax to write this down in a natual way.<br>\nThe only difference is that when I want to prove something I can freely drop into tactic mode to finish things off rather than having to write  a proof term by hand, this is much more conventient so I use it in 2 places in the above proof.</p>",
        "id": 389949397,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694206755
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 389978439,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694225051
    }
]