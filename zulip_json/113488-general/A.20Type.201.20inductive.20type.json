[
    {
        "content": "<p>I feel like I just leveled up: I just wrote my first ever inductive type that required me to use a higher universe, and it's also my first ever mutually inductive type <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p>Here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">StackFrame</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">StackFrame</span> <span class=\"n\">Expr</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Stack</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StackFrame</span> <span class=\"n\">α</span> <span class=\"n\">γ</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Stack</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"n\">push</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">StackFrame</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rest</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"n\">α</span> <span class=\"n\">γ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The type <code>Stack</code> here represents a call stack. A <code>func</code> stack frame consists of two components: a function to run immediately to produce an intermediate result, and a function producing a collection of stack frames which will further process the intermediate result.</p>\n<p>This _does_ need to be in <code>Type 1</code>, right? A <code>Stack</code> can contain functions with arbitrary domain and codomain types, which means that a <code>Stack</code> needs to contain <code>Type</code>s, and anything with <code>Type</code>s in it has to live in <code>Type 1</code> or higher.</p>",
        "id": 371858712,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688356199
    },
    {
        "content": "<p>Yes, this has to be in <code>Type 1</code> as written, although usually this is a bad sign / to be avoided. Usually you can avoid it in this kind of situation by classifying some family of types that you actually care to consider, which can be indexed by a normal inductive type instead of by a universe</p>",
        "id": 371861940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688357740
    },
    {
        "content": "<p>Yup. I figured it would be cool to be able to write implementation functions in do notation, which means I need a monad, and I've discovered that that means that the call stack can get \"polluted\" with arbitrary types, so I need this.</p>",
        "id": 371862650,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688358238
    }
]