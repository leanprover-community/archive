[
    {
        "content": "<p>I'm trying to formalize Hilbert's Geometry axioms and theorems using lean4.<br>\nI've seen the (two) projects in github with the same title (Hilbert/Euclid Geometry), but they are apparently not being worked on any more and do not really mimic Hilbert's proofs. Anyway...<br>\nBefore that I tried Isabelle; got most of the first two axiom/theorem groups done. I switched to lean4, because I could not control memory consumption with Isabelle and it kept halting/crashing my complete system.<br>\nI got the first theorem proved in lean4, but compared to Isabelle it looks very lengthy and was really tedious. In Isabelle I could proof the theorem in two steps which were supported by the \"try\" and \"blast\" mechanisms, which suggests proofs/tactics solving (intermediate) goals. I already saw  simp and aesop in lean4 which somehow correspond to Isabelle's simp and auto, and I know about \"apply?\", which I find produces just too much options to handle. <br>\nSo I have two questions:</p>\n<ol>\n<li>Are there similar techniques in lean4 to Isabelle's \"try\" or \"blast\" which attempt to apply a broad range of primitive tactics?</li>\n<li>I have attached my current results with lean4. If someone could have a look at what I did and comment what could be improved/simplified/automated it would be of great help.<br>\nI also attached the Isabelle results so far in case someone is interested.<br>\n<a href=\"/user_uploads/3121/5bl55vDIwXp5OSGGF5z3qG2P/Hilbert.lean\">Hilbert.lean</a><br>\n<a href=\"/user_uploads/3121/fBLuBqZ75OcApJXnfkyFB4sB/Hilberts-Foundations-of-Geometry.pdf\">Hilberts-Foundations-of-Geometry.pdf</a></li>\n</ol>",
        "id": 397926962,
        "sender_full_name": "Jürgen Uhl",
        "timestamp": 1697964220
    },
    {
        "content": "<blockquote>\n<p>Are there similar techniques in lean4 to Isabelle's \"try\" or \"blast\" which attempt to apply a broad range of primitive tactics?</p>\n</blockquote>\n<p>The <code>aesop</code> tactic as you mentioned is intended to be an equivalent to <code>auto</code>, but it is also useful in more basic situations. I'm not familiar with <code>try</code> and <code>blast</code>: could you explain why they would be more useful than <code>auto</code> in these cases?</p>",
        "id": 398040436,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698051426
    },
    {
        "content": "<p>IIRC <code>try</code> would try <code>simp</code> and <code>aesop</code> and <code>rw_search</code> and a bunch of other tactics in parallel and reports whatever works.</p>",
        "id": 398044895,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698052977
    },
    {
        "content": "<p>Yes, we had <code>hint</code> in mathlib3 that did this, and I would love to reinstate it!</p>",
        "id": 398047706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698054011
    },
    {
        "content": "<p>try and blast simple apply a lot more theorems and strategies. As you can see from the attachment, the proof for lemma -I-1 was found by typing \"try\" and it produced \"(metis Suc-diﬀ-le Suc-eq-plus1 Zero-not-Suc cancel-comm-monoid-add-class.diﬀ-cancel card.empty is-singletonI′ is-singleton-altdef not-numeral-le-zero one-add-one)\" - I don't even know what exactly these different rewrites/theorems are - which include set and number theory. \"try\" can take really long while searching for different strategies, whereas \"blast\" is a fairly fast yes/no tactic and is much stronger than auto, but weaker than try. Which theorems/strategies exactly are contained in try/blast, I do not know.</p>",
        "id": 398071176,
        "sender_full_name": "Jürgen Uhl",
        "timestamp": 1698062967
    }
]