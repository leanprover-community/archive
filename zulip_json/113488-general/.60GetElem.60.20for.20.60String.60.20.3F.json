[
    {
        "content": "<p>Hi, I'm a beginner at Lean4 . My Lean version is 4.2.0. Std4 commit hash is 409a64.</p>\n<p>I find <code>String</code> doesn't have an instance of <code>GetElem</code> which makes getting a character from a string  is a bit inconvenient. Instead, it has a unique component <code>Iterator</code> compared to <code>List</code> and <code>Array</code>, although <code>Iterator</code>  doesn't have the api like <code>def curr' (it: Iterator) (h: ¬it.atEnd): Char</code> and <code>def next' (it: Iterator) (h: ¬it.atEnd): Iterator</code>.</p>\n<p>So I have some questions...</p>\n<ol>\n<li>Is it intentionally designed  that  <code>String</code> doesn't support <code>GetElem</code> ? if no, then here is a feature request for it.</li>\n<li>Is it possible for other data structure (<code>List</code>, <code>Array</code>, etc..) to support <code>Iterator</code>? </li>\n<li>Another  request for <code>String.Iterator.curr'</code> and <code>String.Iterator.next'</code> described above.</li>\n</ol>",
        "id": 403916547,
        "sender_full_name": "fonqL",
        "timestamp": 1700812196
    },
    {
        "content": "<p>The <code>Substring</code> type has better support than <code>Iterator</code>.</p>\n<p>The problem with <code>GetElem</code> for <code>String</code> is that strings are indexed by <code>String.Pos</code> not by <code>Nat</code> and not all possible values of <code>String.Pos</code> are valid for a given string. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"s2\">\"abc\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">byteIdx</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- 'a'</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"abc\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">byteIdx</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"c1\">-- 'b'</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"abc\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">byteIdx</span><span class=\"o\">:=</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"c1\">-- 'c'</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"▸bc\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">byteIdx</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"c1\">-- '▸'</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"▸bc\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">byteIdx</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"c1\">-- 'A' -- not a valid character position</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"▸bc\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">byteIdx</span><span class=\"o\">:=</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"c1\">-- 'A' -- not a valid character position</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"▸bc\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">byteIdx</span><span class=\"o\">:=</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"c1\">-- 'b'</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"▸bc\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">byteIdx</span><span class=\"o\">:=</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"c1\">-- 'c'</span>\n</code></pre></div>",
        "id": 403942548,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700822650
    },
    {
        "content": "<p>It is possible to define a version of <code>GetElem</code> for <code>String</code> that uses <code>Nat</code> but then <code>str[n]</code> would be <code>O(n)</code> and not <code>O(1)</code>.</p>",
        "id": 403942772,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700822731
    },
    {
        "content": "<p>That's another strange thing that <code>Pos</code> doesn't contain some propositions like <code>Fin</code> and I also wonder why it is designed that way...</p>\n<p>I understand that string is not random-access,  but <code>List</code> also support <code>GetElem</code> despite the <code>O(n)</code> complexity of <code>List.get</code>.  Besides <code>String.get</code> is actually <code>O(1)</code> because of external function. So I think the reason is not convincing.</p>\n<p>In other word, why not define like this?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"n\">String</span> <span class=\"n\">String.Pos</span> <span class=\"n\">Char</span> <span class=\"k\">fun</span> <span class=\"n\">str</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">str.atEnd</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">String.Pos.Valid</span> <span class=\"n\">str</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403953085,
        "sender_full_name": "fonqL",
        "timestamp": 1700826848
    },
    {
        "content": "<p>I believe this was considered too cumbersome to use in practice</p>",
        "id": 404005786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700849589
    },
    {
        "content": "<p>Besides this, it is traditional to have nondependent operations but make theorems depend on the validity assumption. (Division by zero is the classic example of this.) Dependent operations have the drawback that they block rewriting and are generally harder to prove properties about</p>",
        "id": 404005934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700849713
    },
    {
        "content": "<p>Don’t many languages support <code>string[i]</code> for character access? How do they handle it? (And wouldn’t it be ideal to write <code>string[i]</code> to get the <code>i</code>th character of the string in any case?)</p>",
        "id": 404021986,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700861745
    },
    {
        "content": "<p>Lean does proof irrelevance but not irrelevance of proofs!</p>",
        "id": 404022602,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700862313
    },
    {
        "content": "<p>Things get really messy if you think it through. For example, <code>String.map</code> makes perfect sense if you think of <code>String</code> as a list/array but try proving that <code>(s.map f)[i] = f s[i]</code>...</p>",
        "id": 404023135,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700862791
    },
    {
        "content": "<p>Bottom line: use <code>Substring</code> and <code>Stream</code> if possible, if you can't then rethink what you really want to do.</p>",
        "id": 404023634,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700863214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60GetElem.60.20for.20.60String.60.20.3F/near/404005786\">said</a>:</p>\n<blockquote>\n<p>I believe this was considered too cumbersome to use in practice</p>\n</blockquote>\n<p>Ok I got it, but actually my initial idea was like this without proof of position validity and just want to omit the bounds check in runtime. How about it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"n\">String</span> <span class=\"n\">String.Pos</span> <span class=\"n\">Char</span> <span class=\"k\">fun</span> <span class=\"n\">str</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">str.atEnd</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/.60GetElem.60.20for.20.60String.60.20.3F/near/404021986\">said</a>:</p>\n<blockquote>\n<p>And wouldn’t it be ideal to write <code>string[i]</code> to get the <code>i</code>th character of the string in any case?</p>\n</blockquote>\n<p>Maybe not. Get the <code>i</code>th character of the string is <code>O(n)</code>, and Lean already have <code>String.get</code> to access a character so it's not a good idea to do one thing in two way.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/113488-general/topic/.60GetElem.60.20for.20.60String.60.20.3F/near/404023634\">said</a>:</p>\n<blockquote>\n<p>Bottom line: use <code>Substring</code> and <code>Stream</code> if possible, if you can't then rethink what you really want to do.</p>\n</blockquote>\n<p>Glad to learn that <code>Substring</code> support <code>for c in substr</code> through <code>Stream</code>/<code>ToStream</code>, thanks! (sorry but I find myself more comfortable in imperative programming. ;-)</p>\n<p>But I am tring to implement some algorithm of string by myself in Lean such as palindrome. So I need an <code>Iterator</code> or a <code>Pos</code> to access a string. And I'm just a bit concerned about the bounds check and typing...</p>",
        "id": 404273522,
        "sender_full_name": "fonqL",
        "timestamp": 1701017408
    },
    {
        "content": "<p>Can you convert the string to a list of chars?</p>",
        "id": 405022194,
        "sender_full_name": "Chris Wong",
        "timestamp": 1701319331
    },
    {
        "content": "<p>I think that, outside of programming exercises, string indexing is quite rare. (And fraught with edge cases.) Lean's API being a bit unwieldy would reflect that.</p>",
        "id": 405025947,
        "sender_full_name": "Chris Wong",
        "timestamp": 1701320522
    }
]