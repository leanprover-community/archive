[
    {
        "content": "<p>Slightly dumb question: What exactly is the difference between doing something like <code>match a, b with</code> and <code>match (a,b) with</code>? More specifically, what does just <code>,</code> do that's different from tupling them? I was assuming they were equivalent but this doesn't seem to be the case (see example).<br>\nThis is mostly out of curiosity in general but here's the scenario where I ran into this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Type2</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Base</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ind</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Type2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Errors</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">E1</span>\n<span class=\"bp\">|</span> <span class=\"n\">E2</span>\n\n<span class=\"c1\">-- this is fine</span>\n<span class=\"kd\">def</span> <span class=\"n\">opt</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">Type2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">Errors</span> <span class=\"n\">Type2</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Base</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Base</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"bp\">.</span><span class=\"n\">Base</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Ind</span> <span class=\"n\">i1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Ind</span> <span class=\"n\">i2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">opt</span> <span class=\"n\">i1</span> <span class=\"n\">i2</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Ind</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"bp\">.</span><span class=\"n\">E1</span>\n\n<span class=\"c1\">-- this is not (can't prove termination)</span>\n<span class=\"kd\">def</span> <span class=\"n\">opt</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">Type2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">Errors</span> <span class=\"n\">Type2</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Base</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Base</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"bp\">.</span><span class=\"n\">Base</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Ind</span> <span class=\"n\">i1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">Ind</span> <span class=\"n\">i2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">opt</span> <span class=\"n\">i1</span> <span class=\"n\">i2</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Ind</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"bp\">.</span><span class=\"n\">E1</span>\n</code></pre></div>\n<p>Thank you :)</p>",
        "id": 377063962,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689874919
    },
    {
        "content": "<p>I think in the first example, Lean uses structural induction because you are peeling off one layer of constructors when you do the recursive call. But in the second example, it can't tell this easily (you aren't taking off one layer of the <code>Prod</code> constructor in the recursive call). You might be able to get the second example working with a <code>by_termination</code> clause, though I'm not too familiar with them.</p>",
        "id": 377069758,
        "sender_full_name": "Niels Voss",
        "timestamp": 1689876346
    },
    {
        "content": "<p>Since your <code>Type2</code> is essentially the same as <code>Nat</code>, imagine your function took in two <code>Nat</code>s instead. If when it is called with <code>opt 4 5</code> it does a recursive call <code>opt 3 4</code> Lean can tell that the first argument is always decreasing (with respect to some well order). But if whenever you call <code>opt (4, 5)</code> it does a recursive call <code>opt (3, 4)</code> it can't really tell that <code>(3, 4)</code> is less than <code>(4, 5)</code>. Things are complicated by the fact that your second definition of <code>opt</code> doesn't actually accept a tuple, but you match on one.</p>",
        "id": 377071390,
        "sender_full_name": "Niels Voss",
        "timestamp": 1689876789
    },
    {
        "content": "<p>I see, thank you !</p>",
        "id": 377090924,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1689881261
    }
]