[
    {
        "content": "<p>I just wanted to show off a project I have been working on, creating bindings for Vulkan to Lean: <a href=\"https://github.com/kuruczgy/lean-vulkan\">https://github.com/kuruczgy/lean-vulkan</a></p>\n<p>Right now the project is mostly an exercise in pushing what can be done with the current lean FFI. The bindings are automatically generated from the Vulkan XML specification. (See the <a href=\"https://github.com/kuruczgy/lean-vulkan#implementation\">README</a> for more details.)</p>\n<p>It is an aim of the project to make the API easier to work with than the C API. Simplifications are made wherever possible, for example by using namespaces and automatically filling some values. For example this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">extensions</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s\">\"VK_EXT_debug_utils\"</span><span class=\"p\">};</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">validationLayers</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s\">\"VK_LAYER_KHRONOS_validation\"</span><span class=\"p\">};</span>\n<span class=\"n\">VkInstanceCreateInfo</span><span class=\"w\"> </span><span class=\"n\">instanceCreateInfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">sType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">enabledExtensionCount</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">ppEnabledExtensionNames</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">extensions</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">enabledLayerCount</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">ppEnabledLayerNames</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">validationLayers</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"n\">VkInstance</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">;</span>\n<span class=\"n\">VkResult</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vkCreateInstance</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">instanceCreateInfo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">inst</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>turns into this in lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Vk.createInstance</span> <span class=\"o\">{</span>\n  <span class=\"n\">enabledExtensionNames</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"VK_EXT_debug_utils\"</span><span class=\"o\">]</span>\n  <span class=\"n\">enabledLayerNames</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"VK_LAYER_KHRONOS_validation\"</span><span class=\"o\">],</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Currently the project is capable of rendering a single triangle:<br>\n<a href=\"/user_uploads/3121/Mhp3c3oPF061wnGNy0Dh2utP/image.png\">The \"hello world\" triangle</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mhp3c3oPF061wnGNy0Dh2utP/image.png\" title=\"The &quot;hello world&quot; triangle\"><img src=\"/user_uploads/3121/Mhp3c3oPF061wnGNy0Dh2utP/image.png\"></a></div><p>Rendering more complex stuff should be doable, but needs a little more work. (E.g. figuring out what would be the best way to construct vertex buffers in lean.)</p>",
        "id": 399461557,
        "sender_full_name": "György Kurucz",
        "timestamp": 1698745445
    },
    {
        "content": "<p>Are you planning to compile lean code to shaders?  It would be super cool if we could use this for semi-verified high-performance compute kernels as well.</p>",
        "id": 399462229,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698745693
    },
    {
        "content": "<p>In theory it should be possible, compile Lean to LLVM then LLVM to SPIR-V. The hard part would be working out how to reference uniforms, samplers, and other special stuff like shader built-in variables.</p>",
        "id": 399462972,
        "sender_full_name": "György Kurucz",
        "timestamp": 1698745965
    },
    {
        "content": "<p>Even if it only did <code>Array a -&gt; Array b</code> map for simple structure types <code>a, b</code>, it could be very useful.</p>",
        "id": 399463698,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698746215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Vulkan/near/399463698\">said</a>:</p>\n<blockquote>\n<p>Even if it only did <code>Array a -&gt; Array b</code> map for simple structure types <code>a, b</code>, it could be very useful.</p>\n</blockquote>\n<p>Arrays in Lean contain boxed types so they can't really be used with SIMD operations (well I guess unless you have some funky pointer ops), the only unboxed array types that Lean has right now are ByteArrays and FloatArrays</p>",
        "id": 399466810,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698747147
    },
    {
        "content": "<p>I would already be happy about a EDSL for shaders in Lean, using the type system to ensure that everything lines up. Would maybe be fun to port <a href=\"https://kaleidogen.nomeata.de/\">https://kaleidogen.nomeata.de/</a> (which dynamically generates shader code in the browser) from Haskell to Lean.</p>",
        "id": 399474060,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698749323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Vulkan/near/399466810\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Vulkan/near/399463698\">said</a>:</p>\n<blockquote>\n<p>Even if it only did <code>Array a -&gt; Array b</code> map for simple structure types <code>a, b</code>, it could be very useful.</p>\n</blockquote>\n<p>Arrays in Lean contain boxed types so they can't really be used with SIMD operations (well I guess unless you have some funky pointer ops), the only unboxed array types that Lean has right now are ByteArrays and FloatArrays</p>\n</blockquote>\n<p>Could we have <code>@[implemented_by name platform]</code> and box-less intrinsics?</p>",
        "id": 399559157,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698769490
    },
    {
        "content": "<p>Not really no, the value would still be treated as an <code>Array a</code> by the rest of the Lean world so if any other function apart from your special implemented_by ones try to access stuff you end up in trouble. That said it would be very cool if we could support unboxed integer and float values in <code>Array</code> in general.</p>",
        "id": 399559834,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698769732
    },
    {
        "content": "<p>The assumption would be on a given platform, you can <em>only</em> run <code>@[implemented_by name platform]</code>, otherwise an unknown symbol error occurs (or the Lean code is run). Then with a runtime that also makes the right assumptions, there would be no rest of the Lean world that could break, I think.</p>",
        "id": 399560184,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698769864
    }
]