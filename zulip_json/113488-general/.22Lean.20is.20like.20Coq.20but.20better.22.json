[
    {
        "content": "<p>Just drawing attention to an ongoing relevant Coq-club thread on the differences between Coq and Lean, sparked by a comment by Kevin at his MSR talk:<br>\n<a href=\"https://sympa.inria.fr/sympa/arc/coq-club/2020-01/msg00006.html\" target=\"_blank\" title=\"https://sympa.inria.fr/sympa/arc/coq-club/2020-01/msg00006.html\">https://sympa.inria.fr/sympa/arc/coq-club/2020-01/msg00006.html</a></p>",
        "id": 184692037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578006574
    },
    {
        "content": "<p>Oh I didn't know it was publically readable like this. I didn't fancy going up against Adam Chlipala on the advantages of having one language rather than three ;-) Maybe I can tempt some more CS people to reply...</p>",
        "id": 184694479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578009249
    },
    {
        "content": "<p>I think that Lean's tactic language is mostly a different language anyway from regular proofs, even if it nominally uses the same syntax. That's a big step up from completely distinct languages, but you still have to come to terms with monads (and do notation and haskell operators), <code>meta</code>, the lean tactic state and the <code>expr</code>/<code>level</code>/<code>name</code> ontology, and the large number of builtin functions (with less than stellar documentation). Very little of this has much in common with proof writing, which uses interactive tactics (<code>begin</code>/<code>end</code>), term mode proofs, and a large library of mathematical facts from mathlib</p>",
        "id": 184698935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578014897
    },
    {
        "content": "<p>Ultimately, this is a side effect of the fact that they have different aims, and you can't really unify that</p>",
        "id": 184698946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578014925
    },
    {
        "content": "<p>I've never written Ltac, but my impression is that lean 3 tactics have a bit more access to the underlying state, and there is not as much ad hoc syntax to make the simple cases easy (in lieu of <code> `[tac,...]</code> quick tactics)</p>",
        "id": 184699024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578015021
    }
]