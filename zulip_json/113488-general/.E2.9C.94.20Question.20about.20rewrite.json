[
    {
        "content": "<p>Hi, i am trying to prove the theorem LcompIff as given below :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Word</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language.element</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"n\">w</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Language.element</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language.notElement</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"n\">w</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span> <span class=\"mi\">75</span> <span class=\"s2\">\" ∉ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Language.notElement</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language.complement</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span> <span class=\"bp\">|</span> <span class=\"n\">w</span> <span class=\"bp\">∉</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LcompIff</span>  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"n\">w</span> <span class=\"bp\">∉</span> <span class=\"n\">L.complement</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>when i try intro w, unfold Language.complement i get to<br>\n⊢ w ∈ L ↔ w ∉ {w | w ∉ L}<br>\nnow i tried to use rw [Set.compl_def] to replace the {w | w ∉ L} with Lᶜ  but i get<br>\n \"tactic 'rewrite' failed, did not find instance of the pattern in the target expression\"<br>\ncan somebody explain to me what i am doing wrong ?<br>\nthanks :)</p>",
        "id": 364064635,
        "sender_full_name": "HenrikT",
        "timestamp": 1686071282
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.compl_def#doc\">docs4#Set.compl_def</a></p>",
        "id": 364066062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686071630
    },
    {
        "content": "<p><code>rw</code> replaces the left hand side of the equality with the right hand side, and the left hand side of the equality is not in your goal.</p>",
        "id": 364066456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686071710
    },
    {
        "content": "<p>Ok so if i want to do it the other way around i should do <code> rw [← Set.compl_def]</code> right ?<br>\nBut this is not working either</p>",
        "id": 364067713,
        "sender_full_name": "HenrikT",
        "timestamp": 1686072051
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Question.20about.20rewrite/near/364067713\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/variables\">#general &gt; variables</a> by <span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span>.</p>",
        "id": 364067869,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686072101
    },
    {
        "content": "<p>Right, because the right hand side is not in your goal either :-) It has a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi></mrow><annotation encoding=\"application/x-tex\">\\lnot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">¬</span></span></span></span> in, not a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">∉</mo></mrow><annotation encoding=\"application/x-tex\">\\notin</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span></span></span>.</p>",
        "id": 364072465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686073290
    },
    {
        "content": "<p>Ok i see i was looking at the wrong definitions. I had the Lean3 Mathlib doku open <br>\nthanks :)</p>",
        "id": 364073574,
        "sender_full_name": "HenrikT",
        "timestamp": 1686073562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> has marked this topic as resolved.</p>",
        "id": 364073625,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686073570
    },
    {
        "content": "<p>In fact I am confused about this. In mathlib4 itself we have <code>theorem compl_def (s : Set α) : sᶜ = { x | x ∉ s } := ...</code> but if I hover over it I see <code>Set.compl_def.{u} {α : Type u} (s : Set α) : sᶜ = {x | ¬x ∈ s}</code>.</p>",
        "id": 364073955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686073663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> has marked this topic as unresolved.</p>",
        "id": 364074357,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686073752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> has marked this topic as resolved.</p>",
        "id": 364074372,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686073756
    },
    {
        "content": "<p>Oh! You redefined <code>∈</code> and <code>∉</code>! I'm no longer confused :-) If these are your own definitions then you can't use mathlib's theorems about mathlib's definitions.</p>",
        "id": 364074406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686073769
    },
    {
        "content": "<p>Isn't notin just pretty printing for not in?</p>",
        "id": 364074561,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686073804
    },
    {
        "content": "<p>Oh duh</p>",
        "id": 364074627,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686073820
    },
    {
        "content": "<p>notin has been redefined in the script above, that's the problem.</p>",
        "id": 364074636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686073824
    },
    {
        "content": "<p>In fact it has been redefined to mean \"in\" :-)</p>",
        "id": 364074730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686073852
    },
    {
        "content": "<p>The proof right now is <code>rfl</code> :-)</p>",
        "id": 364074934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686073903
    },
    {
        "content": "<p>oh</p>",
        "id": 364075616,
        "sender_full_name": "HenrikT",
        "timestamp": 1686074060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> has marked this topic as unresolved.</p>",
        "id": 364075841,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686074124
    },
    {
        "content": "<p>I redefined ∈ and ∉ because lean threw a \"failed to synthesize instance Membership\". Is there another way to fix it ?</p>",
        "id": 364076192,
        "sender_full_name": "HenrikT",
        "timestamp": 1686074228
    },
    {
        "content": "<p>I dont know if this is correct but i could define <code>∉</code> like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Language.notElement</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">L</span> <span class=\"n\">w</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"s2\">\" ∉ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Language.notElement</span>\n</code></pre></div>\n<p>right ?<br>\nBut then it would still not work with the Mathlib stuff i guess</p>",
        "id": 364078965,
        "sender_full_name": "HenrikT",
        "timestamp": 1686074916
    },
    {
        "content": "<p>Ok looks like i fixed the \"failed to synthesize instance Membership\" by <br>\ninstead of defining </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Word</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span>\n</code></pre></div>\n<p>and then using it in the theorem like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">LcompIff</span>  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>i instead did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">LcompIff</span>  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>i.e. i replaced Language with its definition<br>\nand now its working. <br>\nI dont know why it fixed it but its fixed :)</p>",
        "id": 364083403,
        "sender_full_name": "HenrikT",
        "timestamp": 1686076120
    },
    {
        "content": "<p>maybe someone can make sense out of it. I cant</p>",
        "id": 364083534,
        "sender_full_name": "HenrikT",
        "timestamp": 1686076160
    },
    {
        "content": "<p>If you want to use the normal membership notation, you don't need to define it yourself with <code>infixr:75 \" ∉ \" =&gt; Language.notElement</code>, you can instead just define an instance of the <code>Membership</code> typeclass. This is what the error message <code>failed to synthesize instance Membership</code> is referring to. You can also do the same thing for complement.</p>\n<p>e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">Word</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Language.element</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LcompIff</span>  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Word</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>You pointed out that <code>Language</code> didn't work but <code>Set Word</code> works.   Lean doesn't by default know that <code>Language</code> is just a synonym for <code>Set Word</code>, which is why it doesn't automatically retrieve the instances for Membership etc. If you define Language instead with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"n\">Set</span> <span class=\"n\">Word</span>\n</code></pre></div>\n<p>then you wouldn't need to define new typeclass instances,  Lean is  able to figure out that it should use the predefined instances for <code>Set</code>.</p>",
        "id": 364102095,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1686081102
    },
    {
        "content": "<p>oh ok, thanks for the great feedback :)</p>",
        "id": 364103175,
        "sender_full_name": "HenrikT",
        "timestamp": 1686081428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> has marked this topic as resolved.</p>",
        "id": 364103571,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686081567
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 364104579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686081869
    }
]