[
    {
        "content": "<p>Hi all. I've been out of sync with Lean stuff for the last six-eight months or so (busy with other stuff), but I'd somewhat like to re-sync myself and read about what the community has been up to and what the state of things is. What's the best way to get myself up to speed/does anyone feel like giving me a potted summary of what I've missed?</p>",
        "id": 348494128,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681226723
    },
    {
        "content": "<p>The state of the port (<a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a>) is probably the main thing to be aware of right now. Unfortunately we haven't managed to keep up the \"this month in lean\" blog posts, as curating those is a lot of work that never ends!</p>",
        "id": 348495808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681227040
    },
    {
        "content": "<p>If you want to help with the port, then there is now a script that makes some automatic fixes. The workflow is now: find a unported file on the dashboard, checkout the current master, run <code>scripts/start_port.sh Mathlib/Foo/Bar/Baz.lean</code> and fix all the remaining issues.</p>",
        "id": 348597093,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681264747
    },
    {
        "content": "<p>and we have <code>lake exe cache get</code> for getting caches</p>",
        "id": 348597138,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681264795
    },
    {
        "content": "<p>Good to know. Thanks. It would be good to help with the port.</p>",
        "id": 348671141,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681292196
    },
    {
        "content": "<p>If you are also looking for news/gossip there is this: <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Moving.20to.20AWS\">#general &gt; Moving to AWS</a></p>",
        "id": 348686988,
        "sender_full_name": "Jason Rute",
        "timestamp": 1681296120
    },
    {
        "content": "<p>As it happens I already heard that gossip a few days earlier via a source &lt;_&lt;</p>",
        "id": 348688535,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681296522
    },
    {
        "content": "<p>For working on port files, do I want to be using stable or nightly?</p>",
        "id": 348690525,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681297055
    },
    {
        "content": "<p>Nightly, but elan should take care of that for you automatically if you work inside the mathlib4 directory</p>",
        "id": 348691007,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1681297185
    },
    {
        "content": "<p>Where does one find Mathlib4 docs?</p>",
        "id": 348701852,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681299960
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Group#doc\">docs4#Group</a> here</p>",
        "id": 348703046,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681300237
    },
    {
        "content": "<p>Ta. Having a go at porting a file just to understand the process. I'm not sure if my cache download has worked right though as when I open the file I'm just getting the orange bars of death.</p>",
        "id": 348703648,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681300379
    },
    {
        "content": "<p>Hmm - worse yet, it is now red bars.</p>",
        "id": 348704279,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681300512
    },
    {
        "content": "<p>Looks like the build failed.</p>",
        "id": 348704308,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681300520
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Building</span> <span class=\"n\">Aesop.Index</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">wrobson</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-31/lib::/usr/local/lib:/usr/local/lib:./build/lib:./lake-packages/Qq/build/lib:./lake-packages/aesop/build/lib:./lake-packages/std/build/lib:./build/lib /home/wrobson/.elan/toolchains/leanprover--lean4---nightly-2023-03-31/bin/lean -DwarningAsError=true -Dpp.unicode.fun=true ./././Mathlib/Init/Logic.lean -R ././. -o ./build/lib/Mathlib/Init/Logic.olean -i ./build/lib/Mathlib/Init/Logic.ilean -c ./build/ir/Mathlib/Init/Logic.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Logic.lean</span><span class=\"o\">:</span><span class=\"mi\">275</span><span class=\"o\">:</span><span class=\"mi\">70</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.25422</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">False</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">False</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">wrobson</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-31/bin/lean` exited with code 1</span>\n</code></pre></div>\n<p>Anyone got any suggestions?</p>",
        "id": 348704641,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681300596
    },
    {
        "content": "<p>It does look like Mathlib.Init.Logic has an issue, having opened it directly...</p>",
        "id": 348706663,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681301058
    },
    {
        "content": "<p>You have to ensure nothing is building your code when you get the cache, otherwise that running lean process may overwrite cache files as they're downloaded</p>",
        "id": 348707260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681301175
    },
    {
        "content": "<p>Aha.</p>",
        "id": 348709047,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681301591
    },
    {
        "content": "<p>So kill all lean processes before I get it.</p>",
        "id": 348709081,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681301598
    },
    {
        "content": "<p>Still not really sure why Mathlib.Init.Logic broke (it didn't when I rolled back to master...)</p>",
        "id": 348709403,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681301694
    },
    {
        "content": "<p>Hmm - still getting orange bars. But Mathlib.Init.Logic builds now. Let's see if the bars resolve.</p>",
        "id": 348710938,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681302038
    },
    {
        "content": "<p>Ah, there we go. A little slow but fine.</p>",
        "id": 348711205,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681302100
    },
    {
        "content": "<p>Two questions: in Lean 4, is there an equivalent of include/omit statements. And where is there a list of Mathlib4 linters?</p>",
        "id": 348734422,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681306982
    },
    {
        "content": "<p><code>include</code>/<code>omit</code> are gone. Instead, all variables are automatically included, but once the proof/statement is done, all the unused variables are automatically omitted.</p>",
        "id": 348736019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681307358
    },
    {
        "content": "<p>This creates the small risk that one (or more likely, some automation) uses a variable that would not have been included in Lean 3.</p>",
        "id": 348736122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681307385
    },
    {
        "content": "<p>Yeah - the particular pattern I am running into is somewhere where a definition doesn't use a variable but you want to make it dependent on it anyway.</p>",
        "id": 348736732,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681307525
    },
    {
        "content": "<p>Yeah, in that case you have to manually include it in the statement.</p>",
        "id": 348736942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681307573
    },
    {
        "content": "<p>Cool.</p>",
        "id": 348737935,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681307793
    },
    {
        "content": "<p>Hmm (sorry to ask so many little questions). I have a linear map - there's an \"apply\"-style lemma, where it is being coerced to a function. But the coercion doesn't seem to be happening.</p>",
        "id": 348738201,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681307852
    },
    {
        "content": "<p>Linear maps should still be able to be used like functions, right?</p>",
        "id": 348738282,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681307868
    },
    {
        "content": "<p>Ah it seems like it's because the type of the function is implicit...</p>",
        "id": 348739445,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681308108
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">PolynomialModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finsupp.singleAddHom</span> <span class=\"n\">i</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial_module.single</span> <span class=\"n\">PolynomialModule.single</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">single_apply</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">single</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finsupp.single_apply</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial_module.single_apply</span> <span class=\"n\">PolynomialModule.single_apply</span>\n\n<span class=\"sd\">/-- `polynomial_module.single` as a linear map. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lsingle</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">PolynomialModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finsupp.lsingle</span> <span class=\"n\">i</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial_module.lsingle</span> <span class=\"n\">PolynomialModule.lsingle</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lsingle_apply</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lsingle</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finsupp.single_apply</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial_module.lsingle_apply</span> <span class=\"n\">PolynomialModule.lsingle_apply</span>\n</code></pre></div>\n<p>So why is it happy with <code>single_apply</code>, in which <code>single</code> coerces to a function of type <code>(M → (ℕ → M))</code>, but in <code>lsingle_apply</code> it appears to not be able to work out that lsingle R i can coerce to a function of the same type.</p>",
        "id": 348740306,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681308276
    },
    {
        "content": "<p>I am wondering if it cannot find an <code>AddHomClass</code> instance for <code>LinearMap</code>...</p>",
        "id": 348744826,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681309080
    },
    {
        "content": "<p>Yeah... I think maybe? <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Hom/Group.html#AddHomClass\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Hom/Group.html#AddHomClass</a></p>",
        "id": 348745341,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681309179
    },
    {
        "content": "<p>Yes. The definition of <code>semilinear_map_class</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/module/linear_map.html#semilinear_map_class\">https://leanprover-community.github.io/mathlib_docs/algebra/module/linear_map.html#semilinear_map_class</a>) seems to automatically create <code>semilinear_map_class.to_add_hom_class</code>. However, no such instance exists for <code>SemilinearMapClass</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LinearMap.html#SemilinearMapClass\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LinearMap.html#SemilinearMapClass</a>).</p>",
        "id": 348746437,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681309355
    },
    {
        "content": "<p>You can try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>just before the theorem (I don't understand all the details, but it sometimes works).</p>",
        "id": 348746456,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1681309359
    },
    {
        "content": "<p>That has made it work, but I do think the issue I've identified above is an issue?</p>",
        "id": 348747146,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681309473
    },
    {
        "content": "<p><code>LinearMap</code> extends <code>AddHom</code> but there is no corresponding instance of <code>AddHomClass</code> I think.</p>",
        "id": 348747416,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681309514
    },
    {
        "content": "<p><code>https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Hom/Group.html#AddHomClass</code> very clearly states that an instance of it should be declared whenever you extend <code>AddHom</code> (I think probably with the name <code>instAddHomClass</code>) but this does not exist.</p>",
        "id": 348748283,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681309673
    },
    {
        "content": "<p><code>semilinear_map_class.to_add_hom_class</code> was auto-generated before from however extending a class was defined.</p>",
        "id": 348748803,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681309759
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SemilinearMapClass.addMonoidHomClass#doc\">docs4#SemilinearMapClass.addMonoidHomClass</a> exists. The <code>extends</code>-generated instance just isn't shown in the docs, I think</p>",
        "id": 348749613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681309920
    },
    {
        "content": "<p>That was previously <code>semilinear_map_class.add_monoid_hom_class</code>. <code>semilinear_map_class.add_monoid_hom_class</code> and <code>semilinear_map_class.to_add_hom_class</code> are I think different.</p>",
        "id": 348750776,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681310132
    },
    {
        "content": "<p>The latter uses <code>out_param</code>, for one thing...</p>",
        "id": 348751098,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681310180
    },
    {
        "content": "<p>Indeed, yes, they <em>are</em> different.</p>",
        "id": 348751384,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681310246
    },
    {
        "content": "<p>Ah: as you note here, Eric, I suppose this is a new-style-structures issue? <a href=\"https://github.com/leanprover/lean4/issues/2074\">https://github.com/leanprover/lean4/issues/2074</a></p>",
        "id": 348752523,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681310444
    },
    {
        "content": "<p>I can use this experimental fix, and I see that it is used many times in the port, but given that it is explictly for testing only I don't feel <em>great</em> about that...</p>",
        "id": 348752676,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681310481
    },
    {
        "content": "<p>I use <img alt=\":eta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/37966.png\" title=\"eta\"> with great impunity</p>",
        "id": 348753019,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681310550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> might have some thoughts given aiui it's his fix?</p>",
        "id": 348753260,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681310607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> the <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> issue is one which Gabriel and others have been giving lots of thought. We have collectively decided that for the time being we will use the experimental eta option to get past issues while porting. At some point, either we will restructure classes in mathlib (via one of a few different possible methods) or there will be a fix which implements eta for TC synthesis in a feasible way. So, yes, it's a problem, but for the moment we're just working around it with this option. Don't feel bad about using it, especially for linear maps / modules which is a key place that needs it.</p>",
        "id": 348756048,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681311162
    },
    {
        "content": "<p>Super, thank you for the clear guidance.</p>",
        "id": 348756179,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681311195
    },
    {
        "content": "<p>Some other things you can try instead of eta: <code>attribute [-instance] Ring.toNonAssocRing</code>. This deletes a particularly unfortunate path that TC synthesis takes to get an <code>AddCommGroup</code> instance from a <code>Ring</code> instance and hence forces TC synthesis to take a different route. You can try this if, for instance, using eta causes things to get unbearably slow (which is possible from time to time). There are a few other hacks lying around mathlib and on Zulip, you can grep for <code>2074</code> in mathlib to find them.</p>",
        "id": 348757689,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681311497
    },
    {
        "content": "<p>Yeah definitely noticing those speed issues...</p>",
        "id": 348770914,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681314496
    },
    {
        "content": "<p>Deriving e.g. Algebra instance for PolynomialModule requires the eta experiment, and takes ages...</p>",
        "id": 348771050,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681314533
    }
]