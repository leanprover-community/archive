[
    {
        "content": "<p>Why do so many definitions in Lean use proofs when it is possible to define it s.t. it is true by construction? Is there an advantage to this approach?<br>\nThe two main examples of this are with <code>fin</code> and <code>vector</code>. In lean, an element of <code>fin n</code> is a natural number along with a proof that it is <code>&lt; n</code>, although the true-by-construction definition is an inductive type with constructors <code>fin_zero : fin n.succ</code> and <code>fin_succ : fin n → fin n.succ</code> (adapted from Idris2). As for <code>vector α n</code>, it is defined as a <code>list α</code> along with a proof that the length of the list is <code>n</code>, although the true-by-construction definition is inductive with constructors <code>nil : vector α 0</code> and <code>cons : α → vector α n → vector α n.succ</code>.</p>",
        "id": 372690853,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1688583971
    },
    {
        "content": "<p>It's easy to make the constructors you're suggesting from the lean definition (and the recursor) so what do we gain from the inductive definition?</p>",
        "id": 372691315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688584096
    },
    {
        "content": "<p>Maybe having a <code>vector</code> be a <code>list</code> with a length proof means that it's got a map to <code>list</code> by construction, and similarly <code>fin</code> has a map to <code>nat</code> by construction. It seems like these maps to <code>list</code> and <code>fin</code> are more important in practice, and different compositions of such functions equaling others can be definitionally true, which likely wouldn't be the case with the more rigid inductive definitions.</p>",
        "id": 372691971,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688584282
    },
    {
        "content": "<p>Yes; in short it's more practical.</p>",
        "id": 372692873,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688584517
    },
    {
        "content": "<p>Alright, thanks.</p>",
        "id": 372694381,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1688584903
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 372697067,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1688585683
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 372697113,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1688585698
    },
    {
        "content": "<p>I think mathlib actually does also have the inductive family of at least one of <code>fin</code> and <code>vector</code>. Note that <code>vector</code> itself already sees very little use.</p>",
        "id": 372704219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688587943
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin2\">docs3#fin2</a></p>",
        "id": 372704752,
        "sender_full_name": "Reid Barton",
        "timestamp": 1688588097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"620085\">@Ricardo Prado Cunha</span> Some other points to consider. </p>\n<ol>\n<li>Lean 4 has builtin support for the <code>Nat</code> type to make it more performant (so that it is represented as a primitive number by the computer rather than a chain of successors). A custom inductive <code>Fin</code> would not have this support, so preserving the raw <code>Nat</code> is desirable. </li>\n<li>Converting a type <code>A</code> equipped with a proof to <code>A</code> (e.g. List w/proof to a List) and vice-versa is a computational no-op (<code>O(1)</code> complexity) whereas converting between the different inductives (e.g. <code>vector</code> to a <code>list</code> or vice-versa) would require actually traversing one inductive and building the other from it (<code>O(n)</code> complexity where <code>n</code> is the size of the inductive). </li>\n</ol>\n<p>Essentially, the type with a proof is generally more performant than the proof by construction. Furthermore, in many cases, it also makes proofs that transfer between the types easier as well.</p>",
        "id": 372712381,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688590640
    },
    {
        "content": "<p>Ah yeah I didn't even think about the performance. And I presume that writing compiler optimizations to reduce the conversion between inductive types down to a no-op would be prohibitively difficult.</p>",
        "id": 372713270,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1688590925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"620085\">@Ricardo Prado Cunha</span> Yeah. It is theoretically possible to optimize away transformations between inductives with the same data layout (e.g., order of constructors and their number of  relevant parameters). However, some proofs by construction do not even retain the same data layout as their unrestricted form, in which case it would actually be impossible to optimize away.</p>",
        "id": 372715267,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688591726
    },
    {
        "content": "<p>If we really wanted to \"invest\" in this kind of data type we could give the <code>Fin</code> inductive family the same repr as <code>Nat</code>, and likewise for <code>Vector</code>, although this would require better handling of ghost arguments to constructors (since otherwise e.g. <code>Vector.cons</code> is stored as a triple of <code>n</code>, the head and the tail)</p>",
        "id": 372747054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688608447
    },
    {
        "content": "<p>BTW, does Lean kernel has special support for integers or only for natural numbers?</p>",
        "id": 372750237,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688610273
    },
    {
        "content": "<p>both</p>",
        "id": 372750449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688610384
    },
    {
        "content": "<p>more precisely, the compiler supports both integers and naturals, and the kernel has special support only for natural numbers</p>",
        "id": 372750512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688610422
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 372760556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688615428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> has marked this topic as resolved.</p>",
        "id": 372998973,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688670966
    }
]