[
    {
        "content": "<p>is there a function pointer type in Lean 4? in Rust there is <code>fn(T) -&gt; U</code> and this allows adding axioms for meta theorem proving to Rust's type system. I am interested in porting some code from Rust to Lean 4.</p>",
        "id": 389913703,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694190573
    },
    {
        "content": "<p>You can say <code>f : T -&gt; U</code></p>",
        "id": 389914491,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694190902
    },
    {
        "content": "<p><code>T -&gt; U</code> in Lean 4 is the type of a lambda, that can capture variables from the environment. I need a function pointer that can not capture variables.</p>",
        "id": 389914586,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694190940
    },
    {
        "content": "<p>There is no internal notion of capture in Lean</p>",
        "id": 389914861,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694191046
    },
    {
        "content": "<p>What kind of things would you need this for?</p>",
        "id": 389914925,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694191079
    },
    {
        "content": "<p>Exponential propositions: <a href=\"https://github.com/advancedresearch/path_semantics/blob/master/papers-wip2/hooo-exponential-propositions.pdf\">https://github.com/advancedresearch/path_semantics/blob/master/papers-wip2/hooo-exponential-propositions.pdf</a></p>",
        "id": 389915034,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694191123
    },
    {
        "content": "<p>Lambdas are one kind of exponential object, but function pointer is another exponential object which is very useful for meta theorem proving. This allows extending Propositional Logic with exponential objects that behave like <code>|-</code> in Sequent Calculus</p>",
        "id": 389915284,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694191230
    },
    {
        "content": "<p>It is also used to define path semantical qubit <code>~</code> which has tautological congruence instead of normal congruence. Under normal congruence, if <code>a == b</code> then <code>f(a) == f(b)</code>, however, with tautological congruence you need <code>(a == b)^true</code> to prove <code>f(a) == f(b)</code>. This is used by <code>~</code> to extend classical logic with probabilistic propositions, e.g. <code>~a</code> gives a new proposition with the \"source\" <code>a</code>. I'm studying how logic behaves with extended operators <code>^</code> (exponential propositions) and <code>~</code> (called a \"qubit\").</p>",
        "id": 389916063,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694191565
    },
    {
        "content": "<p>Currently, I am using an inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `a^b`.</span>\n<span class=\"c1\">-- Exponential (function pointer).</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">FPow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- `a^true`.</span>\n<span class=\"c1\">-- Tautology.</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tauto</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">FPow</span> <span class=\"n\">a</span> <span class=\"n\">Tr</span>\n\n<span class=\"c1\">-- `false^a`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">Para</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">FPow</span> <span class=\"n\">Fa</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- `true^a`.</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">tr</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">FPow</span> <span class=\"n\">Tr</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- `a^false`.</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">fa</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">FPow</span> <span class=\"n\">a</span> <span class=\"n\">Fa</span>\n\n<span class=\"c1\">-- `a^b &amp; b =&gt; a`.</span>\n<span class=\"c1\">-- Modus ponens.</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">modus_ponens</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">FPow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- `a^true =&gt; a`.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">tauto</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Tauto</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modus_ponens</span> <span class=\"n\">x</span> <span class=\"n\">Tr.intro</span>\n</code></pre></div>\n<p>However, I have to rewrite all statements that I want to hold tautologically using <code>FPow</code>, which is difficult. I haven't yet studied in detail what is required to implement this logic in a type system that doesn't distinguish between lambdas and function pointers.</p>",
        "id": 389921828,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694194030
    },
    {
        "content": "<p>Is there a key property that holds for one but not the other? Since I’m not familiar with Rust I’m having troubles understanding the subtlety</p>",
        "id": 389922202,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694194204
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/b5FIQEkMUbv_VXOVESLumwiN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/b5FIQEkMUbv_VXOVESLumwiN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/b5FIQEkMUbv_VXOVESLumwiN/image.png\"></a></div>",
        "id": 389922666,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694194405
    },
    {
        "content": "<p>But no Lean doesn't have a function pointer concept distinct from lambdas right now. That said I believe it can be added in theory even though you have to be a bit careful as many lambdas end up being lambda lifted into actual functions so you can technically use them as function pointers. That said I don't understand how your formalization ends up resolving the context/closure issue. Since you are still creating objects within Lean of course there can always be an environment at play.</p>",
        "id": 389923139,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694194663
    },
    {
        "content": "<p>If you have a type for function pointers in the type system, then you can write a proof of <code>a =&gt; b</code> and lift it to <code>(a =&gt; b)^true</code>. A such proof can use the global context. However, you can not do this with an argument of type <code>a =&gt; b</code>, because this argument might be the result of a runtime computation. The type system can not distinguish \"impossible computations\" from \"possible computations\" (those that are decidable). You have to \"know\" that the proof of <code>a =&gt; b</code> is provable. This is why one needs a type for function pointers. By adding a few axioms for meta theorem proving, one can construct \"new function pointers\" within the type system.</p>\n<p>In Rust, <code>Fn(T) -&gt; U</code> is the trait constraint of closure/lambdas. The <code>fn(T) -&gt; U</code> type is for function pointers.</p>",
        "id": 389923683,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694194911
    },
    {
        "content": "<p>So you mean that, even with <code>False</code> in your context, you shouldn’t be able to prove <code>(a -&gt; b)^\\top</code>?</p>",
        "id": 389926918,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694196368
    },
    {
        "content": "<p>with <code>False</code> in your context, you can prove anything, including <code>(a =&gt; b)^true</code></p>",
        "id": 389927489,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694196610
    },
    {
        "content": "<p>a type for function pointers is onto-logically a reference for a function pointer, not an \"actual\" function pointer. so, meta theorem proving is about proving statements about references.</p>",
        "id": 389927630,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694196686
    },
    {
        "content": "<p>If I'm understanding correctly, the key difference is in what you know if you take <code>x^true</code> as a hypothesis. Let's say we have a proof in our context that <code>((a = b)^true) -&gt; ((b = a)^true)</code>. This implication takes an exponential as a hypothesis. We can only use the implication if we supply it a proof of <code>(a = b)^true</code>, a proof of <code>a = b</code> from an empty context. If we also have <code>false</code> in our context and use it to prove <code>a = b</code>, then we only have <code>(a = b)^false</code>, so we can't use the implication.</p>",
        "id": 389929135,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1694197395
    },
    {
        "content": "<p><code>x^false</code> is provable for any <code>x</code>, so you can prove <code>((b == a)^true)^false</code> and then lift it to <code>(((a = b)^true) =&gt; ((b = a)^true))^false</code> (you can also do this directly). so, if you have <code>false</code> in your context, then you can prove any theorem.</p>",
        "id": 389929590,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694197604
    },
    {
        "content": "<p>The key difference is that <code>a == b</code> can happen at runtime, e.g. by faulty hardware and prove an unsound theorem. This is an \"impossible computation\" seen from the perspective of compile time. <code>(a == b)^true</code> is a reference to <code>a == b</code> as provable at compile time.</p>",
        "id": 389929897,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694197742
    },
    {
        "content": "<p>When we say <code>a == b</code> in logic, we do not exclude possibilities that this might become true at some point in the future, by making further assumptions. We do not express under which circumstances such assumptions might be made. When using a single type for lambdas and function pointers, the runtime and compile time gets collapsed into one semantical level. You need a stronger theory of reference to talk about compile time explicitly. The normal procedure to handle this is by enforcing rigor through the use of the language, instead of through the type system.</p>\n<p>The reason Rust added a separate type for function pointers, was because of performance concerns. A closure/lambda needs extra memory at runtime, while function pointers can be passed around in a single hardware depending <code>usize</code>.</p>",
        "id": 389930858,
        "sender_full_name": "Sven Nilsen",
        "timestamp": 1694198166
    },
    {
        "content": "<p>Interestingly, I noticed a problem related to this in LeanGccJit:</p>\n<p>When a foreign function pointer is passed to lean (say, we compiled a function with LeanGccJit), lean actually have no way to invoke it inside its own runtime environment because there is no raw function pointer.</p>\n<p>One may workaround this by porting lean runtime into LeanGccJit context and wrap a closure that conforms the uniform ABI.</p>",
        "id": 389940408,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694202478
    }
]