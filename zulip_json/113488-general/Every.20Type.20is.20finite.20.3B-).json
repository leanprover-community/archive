[
    {
        "content": "<p>Dear All,</p>\n<p>there was a time where roughly this time on Friday there was a thread about some funny behaviour in Lean.  I do not know if this has been brought up before, but the following \"every type is finite in Lean\" made me laugh!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finite.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>Do not spoil the fun for others, when you realize what is going on, please!  Use <code>spoiler</code>-blocks for compromising comments!</p>",
        "id": 403988796,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700840503
    },
    {
        "content": "<p>I'm quite sure that </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>answer</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>alpha is in Prop</p>\n</div></div>",
        "id": 403988881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700840534
    },
    {
        "content": "<p>I have a harder puzzle. What will this <code>#lint</code> complain about?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Function.Basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Function.update_of_eq</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">update</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>",
        "id": 403989311,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700840726
    },
    {
        "content": "<p>I am going to </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>guess</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Some unused argument, possibly the very explicit <code>h</code>?</p>\n</div></div>",
        "id": 403989768,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700840924
    },
    {
        "content": "<p>This example made me realize exactly how evil <code>set_option autoImplicit true</code> is...</p>",
        "id": 403989976,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700841005
    },
    {
        "content": "<p>For me, it also made me realise that <code>Sort*/Type*</code> can shield you partially from this evilness.</p>",
        "id": 403990420,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700841193
    },
    {
        "content": "<p>But it's not shielding you here!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Function.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Function.update_of_eq2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">Function.update</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">}</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">of_eq_true</span> <span class=\"o\">((</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">Function.update_same</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq_self</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>compiles fine and proves an \"obviously false\" statement until you look at the type of what was actually proved.</p>",
        "id": 403990607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700841265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  <code>Sort*</code>/<code>Type*</code> is different than <code>Sort _</code>/<code>Type _</code>. Using <code>Sort*</code> here does indeed shield you from the evilness.</p>",
        "id": 403990988,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700841450
    },
    {
        "content": "<p>Oh jeez, so the one I've been told never to use is the one we have to use here?? Or did I just get confused about which one never to use?</p>",
        "id": 403991122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700841506
    },
    {
        "content": "<p><code>Sort*</code>/<code>Type*</code> means \"this must be a sort/type in a new universe variable\". It should be used instead of <code>Sort _</code>/<code>Type _</code> whenever possible.</p>",
        "id": 403991168,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700841532
    },
    {
        "content": "<p>I think you got confused.</p>",
        "id": 403991174,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700841538
    },
    {
        "content": "<p>Why don't we ban the bad one?</p>",
        "id": 403991205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700841559
    },
    {
        "content": "<p>I usually go for \"if <code>Type*/Sort*</code> complains, use <code>_</code> instead\".</p>",
        "id": 403991217,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700841564
    },
    {
        "content": "<p>I seem to go for \"use an arbitrary one because my brain can't tell the difference\"</p>",
        "id": 403991264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700841589
    },
    {
        "content": "<p>The underscore can be the only option sometimes, when you want Lean to figure out a universe level, given constraints.</p>",
        "id": 403991270,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700841591
    },
    {
        "content": "<p>Because it's still often necessary. For example, the code below fails, since the output is not a fresh universe variable (it's the same as the input universe variable).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Function.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myId</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 403991421,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700841638
    },
    {
        "content": "<p>My mental picture is <code>*</code> is a generic level, while <code>_</code> is a level that is \"generic but specializable\".  If Lean finds a specialization that works, it will use it.</p>",
        "id": 403991432,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700841643
    },
    {
        "content": "<p>Generally, variables/arguments should almost always have type <code>Type*</code>/<code>Sort*</code>. It's fine if output types (the type of a <code>def</code>) is <code>Type _</code>.</p>",
        "id": 403991593,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700841704
    },
    {
        "content": "<p>At the end of the day my problem is that I'm old and stupid, and both <code>*</code> and <code>_</code> mean \"please lean fill this in\" to me. I find it surprisingly difficult to remember which is which.</p>",
        "id": 403993526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700842577
    },
    {
        "content": "<p>In Lean 3 you used <code>Type*</code> everywhere. It's basically the same now.</p>",
        "id": 403993999,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700842816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Every.20Type.20is.20finite.20.3B-.29/near/403991122\">said</a>:</p>\n<blockquote>\n<p>Oh jeez, so the one I've been told never to use is the one we have to use here?? Or did I just get confused about which one never to use?</p>\n</blockquote>\n<p>In lean 3 <code>Type _</code> and <code>Type*</code> were synonyms, but the analogy is muddled by the behavior of <code>variable</code> also changing in Lean 4.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code>Type*</code> in Lean 3</th>\n<th><code>Type*</code> in Lean 4</th>\n<th><code>Type _</code> in Lean 4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>variable</code></td>\n<td>safe</td>\n<td>safe</td>\n<td>risky</td>\n</tr>\n<tr>\n<td><code>theorem</code>/<code>def</code></td>\n<td>risky</td>\n<td>safe</td>\n<td>risky</td>\n</tr>\n</tbody>\n</table>",
        "id": 403999799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700845943
    }
]