[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> , I wonder if <code>lake update</code> (and <code>lake clean</code>) should always delete the <code>lakefile.olean</code> and recreate it?</p>\n<p>Before the introduction of the  <code>lakefile.olean</code> I had an env variable to switch between a local copy of a dependency or downloading it. As expected, when calling <code>lake update</code>, it would reevaluate the lakefile, choose the right one and update the <code>lake-manifest.json</code>. Now, however, <code>lake update</code> does nothing  and I have to resort to <code>rm lakefile.olean &amp;&amp; lake update</code> to get a \"clean\" update. My understanding is that <code>lakefile.olean</code> is a performance optimisation when calling <code>lake</code> (e.g. <code>lake build</code> etc). However, I believe <code>lake update</code> (and <code>lake clean</code>) is only rarely used and getting a consistent result would be much more important than performance.</p>\n<p>Here's the relevant lakefile:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I know this is a bit hacky again, but one thing I really like about lake is exactly that you can put some lean code in the lakefile :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">LocalGameServer</span> <span class=\"o\">:</span> <span class=\"n\">Dependency</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">GameServer</span>\n  <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.path</span> <span class=\"s2\">\"../lean4game/server\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RemoteGameServer</span> <span class=\"o\">:</span> <span class=\"n\">Dependency</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">GameServer</span>\n  <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/lean4game.git\"</span> <span class=\"s2\">\"main\"</span> <span class=\"s2\">\"server\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- do something depending on the env variable `MY_ENV_VAR`</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">gameServerName</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">IO.getEnv</span> <span class=\"s2\">\"MY_ENV_VAR\"</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"s2\">\"local\"</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"bp\">``</span><span class=\"n\">LocalGameServer</span> <span class=\"k\">else</span> <span class=\"bp\">``</span><span class=\"n\">RemoteGameServer</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lake.packageDepAttr.ext.addEntry</span> <span class=\"n\">env</span> <span class=\"n\">gameServerName</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Elab.Command.CommandElabM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">TestProject</span><span class=\"bp\">»</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">TestProject</span><span class=\"bp\">»</span>\n</code></pre></div>\n</div></div>",
        "id": 401208525,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699552781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> A cleaner alternative to <code>rm lakefile.olean &amp;&amp; lake update</code> is <code>lake update -R</code> (where <code>-R</code> is short for <code>--reconfigure</code>). </p>\n<p>Whether re-elaborating the file should be the default for <code>lake update</code> and <code>lake clean</code> is curious question. From a purely performance angel, you are right that the time save is probably doesn't matter to much for commands like <code>lake update</code> and <code>lake clean</code> that are unlikely to invoked frequently. However, <code>lakefile.olean</code> is not purely a performance optimization, it also saves the Lake configuration options (e.g. <code>-K</code>) and other environment-based state. In your case, you do not want that, but in other circumstances this can be quite useful (e.g., to fix a state to be used by the Lean language server in VS Code.)</p>\n<p>I am inclined to believe that do the fast thing by default and the slower thing by request (via <code>-R</code>) is generally a good default. However, I am open to being persuaded otherwise.</p>",
        "id": 401236600,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699563831
    },
    {
        "content": "<p>I continue to be hit by olean compatibility issues with lakefile.olean, especially in lean 4 core. I'm hoping your recent work on tightening this up will help, but I'd rather have stable behavior at the cost of some performance loss</p>",
        "id": 401237832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699564351
    },
    {
        "content": "<p>Moreover, saving state in an olean seems like a dangerous idea to begin with, especially if you need to know magic options to <code>clean</code> to reset it!</p>",
        "id": 401255709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699574219
    },
    {
        "content": "<p>Thanks, <code>-R</code> is indeed useful!</p>",
        "id": 401257170,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699574897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/113488-general/topic/deleting.20lakefile.2Eolean/near/401208525\">said</a>:</p>\n<blockquote>\n<p>Before the introduction of the  <code>lakefile.olean</code> I had an <strong>env variable</strong> to switch between a local copy of a dependency or downloading it.</p>\n</blockquote>\n<p>I just realised staring at mathlib's lakefile, that rather than setting an environment variable, the \"intended way\" would probably be to use the <code>-K</code> that Mac mentions above: <code>lake update -K my.config.option -R</code> and then <code>if get_config? my.config.option |&gt;.isSome then _ else _</code>inside the <code>lakefile.lean</code>. Still needs the <code>-R</code> to have any effect.</p>\n<p>I couldn't find <code>-K</code> in the <a href=\"https://github.com/leanprover/lean4/tree/master/src/lake\">lake docs</a> yet, although it does appear under <code>lake --help</code>. Therefore I thought I leave a note to future me here.</p>",
        "id": 402050612,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1699988677
    }
]