[
    {
        "content": "<p>Hi, when learning Isabelle, I feel that (as really non-expert in proof assistants) the cantor's theorem is a bit more readable in Isabelle than Lean mathlib. In other words, the Isabelle proof resembles more the proofs in human language. Thus, I wonder:</p>\n<ol>\n<li>Is it a fundamental limit of Lean that Lean proofs are not that human readable? (I guess we can use <code>have</code> keyword in Lean, but I am not sure why it is not that frequently used; In addition, it seems Lean's automation is not that powerful)</li>\n<li>Is it / will it be a priority in Lean to make proofs human readable? (Or it is favored to write down hard-to-read but easy-to-write proofs to speed up proving)<br>\nP.S. I like Lean's ecosystem, community, etc, and hope I can use it!</li>\n</ol>\n<p>Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- **Cantor's theorem** -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cantor</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">Cardinal.inductionOn</span> <span class=\"k\">with</span> <span class=\"n\">α</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mk_set</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">singleton</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">singleton_eq_singleton_iff.1</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cantor_injective</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">cardinal.cantor</span> <span class=\"n\">Cardinal.cantor</span>\n\n<span class=\"sd\">/-- **Cantor's diagonal argument** implies that there are no injective functions from `Set α`</span>\n<span class=\"sd\">to `α`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cantor_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Injective</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cantor_surjective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">b</span><span class=\"o\">})</span> <span class=\"bp\">&lt;|</span>\n         <span class=\"n\">RightInverse.surjective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">U</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span> <span class=\"n\">i</span> <span class=\"n\">e</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cantor_surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Surjective</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n        <span class=\"bp\">@</span><span class=\"n\">iff_not_self</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">iff_of_eq</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">∈</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>while Isabelle:<br>\n<a href=\"/user_uploads/3121/o58v2-HCAoGhqIE47LalEflf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/o58v2-HCAoGhqIE47LalEflf/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/o58v2-HCAoGhqIE47LalEflf/image.png\"></a></div>",
        "id": 397018801,
        "sender_full_name": "fzyzcjy",
        "timestamp": 1697514227
    },
    {
        "content": "<p>The proof is pretty golfed. You can of course write a version of the proof similar to the isabelle proof</p>",
        "id": 397019039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697514333
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h_surj</span> <span class=\"o\">:</span> <span class=\"n\">Surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">h_surj</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n  <span class=\"k\">show</span> <span class=\"n\">False</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">iff_not_self</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 397020170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697514848
    },
    {
        "content": "<p>Of course we don't have tactics like <code>blast</code>; improving in this regard is a long standing issue</p>",
        "id": 397020229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697514891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thank you, that one does look readable for me!<br>\nSo I wonder, whether Lean community will tend to make proofs human readable?<br>\nMy area is about ML/AI for theorem proving. If a proof is easier to understand by humans (e.g. the lean proof you provided), I guess it may be easier for AI to learn from it.</p>",
        "id": 397020590,
        "sender_full_name": "fzyzcjy",
        "timestamp": 1697515108
    },
    {
        "content": "<p>People write proofs according to their tastes</p>",
        "id": 397020618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697515130
    },
    {
        "content": "<p>I see, thanks!</p>",
        "id": 397020674,
        "sender_full_name": "fzyzcjy",
        "timestamp": 1697515168
    },
    {
        "content": "<p>some people prefer human readable proofs, some do write-only proofs, some golf proofs into the smallest number of lines of code or the shortest term proof</p>",
        "id": 397020679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697515170
    },
    {
        "content": "<p>this particular proof is going for a small term, it's just applying three lemmas with some very cleverly chosen instantiations</p>",
        "id": 397020783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697515220
    },
    {
        "content": "<p>it's probably not a very representative example of mathematics in mathlib, although mathlib is also not primarily focused on proof readability</p>",
        "id": 397021297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697515389
    },
    {
        "content": "<p>Usability of lemma statements and maintainability are the main criteria in mathlib IMO</p>",
        "id": 397021413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697515459
    },
    {
        "content": "<p>It seems proof style transfer could be a novel research topic for ML/AI, even better if it can help both directions:</p>\n<ul>\n<li>human readable proofs to more golfed proof (with measurable performance improvements)</li>\n<li>too golfed proof back to more readable proof (with minimal or no performance loss)</li>\n</ul>",
        "id": 397028972,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697519420
    },
    {
        "content": "<p>A stretch bonus is style transfer to informal proofs.</p>",
        "id": 397029060,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697519510
    },
    {
        "content": "<p>I would expect a symbolic tool to do better at golfing than AI</p>",
        "id": 397029179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697519576
    },
    {
        "content": "<p>Sure. IMHO ML based AI is more expected to improve quality of life (e.g. for researchers) rather than directly advance serious research.</p>",
        "id": 397029325,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697519677
    },
    {
        "content": "<p>I would also expect a symbolic tool to do better at \"unpacking\" a proof, although ML would do better at summarizing the unpacked proof</p>",
        "id": 397029331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697519685
    }
]