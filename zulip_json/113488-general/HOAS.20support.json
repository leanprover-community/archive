[
    {
        "content": "<p>I used Lean (version 2, I guess) back in 2016 to <a href=\"https://github.com/lambdacalculator/lean-choice\">completely formalize</a> my 2001 JSL paper, but haven't used it since.  Coming back now, I see that Lean is already up to version 4. I have an interest in formalizing several HOAS developments that I had previously formalized in Abella and Twelf, and I see that the Lean Manual gives some examples (in Sections 6.5 and 6.6) of how to achieve similar results. </p>\n<p>Here is my question: Are the syntax and tactic definition capabilities of Lean 4 sufficient to be able to add new constructions for defining LF-like specifications  and reasoning about them in a way that would be familiar to Abella and Twelf users, effectively hiding their \"implementations\" as either dependent de Bruijn indices or parametric HOAS (or something else)?</p>\n<p>For concreteness, here is how I might imagine the syntax looking for both an extrinsic and intrinsic formulation of simply typed lambda calculus (adapted from Twelf):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">signature</span> <span class=\"n\">extrinsic</span>\n   <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"n\">type.</span>\n   <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm.</span>\n   <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm.</span>\n   <span class=\"n\">tp</span> <span class=\"o\">:</span> <span class=\"n\">type.</span>\n   <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp.</span>\n   <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type.</span>\n   <span class=\"n\">of</span><span class=\"bp\">-</span><span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">tm</span><span class=\"o\">}{</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">of</span> <span class=\"n\">x</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n   <span class=\"n\">of</span><span class=\"bp\">-</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">M'</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">of</span> <span class=\"n\">M</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">M'</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">T'.</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">signature</span> <span class=\"n\">intrinsic</span>\n   <span class=\"n\">tp</span> <span class=\"o\">:</span> <span class=\"n\">type.</span>\n   <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp.</span>\n   <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type.</span>\n   <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tm</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n   <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T'.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>There would also need to be a mechanism for defining \"contexts\" (Abella) or \"worlds\" (Twelf) and stating and proving, with tactic support, theorems about contextual judgments in these signatures.</p>",
        "id": 326474181,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1675810659
    },
    {
        "content": "<p>It's hard for me to tell, but this might be a literal translation of your first example into Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Extrinsic</span> <span class=\"n\">where</span>\n   <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n   <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span>\n   <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span>\n   <span class=\"n\">tp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n   <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">→</span> <span class=\"n\">tp</span> <span class=\"bp\">→</span> <span class=\"n\">tp</span>\n   <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>  <span class=\"c1\">-- you maybe want `Prop` here</span>\n   <span class=\"n\">of_lam</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">T'</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">x</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">T'</span> <span class=\"bp\">→</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span>\n   <span class=\"n\">of_app</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">T'</span> <span class=\"n\">M</span> <span class=\"n\">M'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">M'</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">of</span> <span class=\"n\">M</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">M'</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">T'</span>\n</code></pre></div>",
        "id": 326478441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675812778
    },
    {
        "content": "<p>The point of HOAS, though, is that the argument to <code>lam</code> is not the full function space but just the lambda functions, i.e., terms of type <code>tm</code> relative to a context containing a variable of type <code>tm</code>. Such types, unlike the full function space, have an induction principle on which most of the proofs are based. Once you allow variables in the context, functions and predicates over these types must be generalized to include contexts as part of their \"input\", which then you have to limit with some kind of context predicate (or \"world\" in the terminology of Twelf) to get totality. This kind of genericity is captured in both of the approaches in Sections 6.5 and 6.6 of the manual but at an additional \"semantic\" cost. My question is whether it is possible to hide all of this semantic cost behind a kind of interface that mimics the reasoning you do in Abella or Twelf.</p>",
        "id": 326483627,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1675815627
    },
    {
        "content": "<p>I think something like this. It's not how I would do lamba calculus, but it seems close to your definition. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span> <span class=\"bp\">-</span> <span class=\"bp\">&gt;</span> <span class=\"n\">tp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tm</span> <span class=\"n\">T</span><span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T'</span>\n</code></pre></div>",
        "id": 326485057,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1675816395
    },
    {
        "content": "<p>Isn't <code>tp</code> isomorphic to <code>empty</code> there?</p>",
        "id": 326485172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675816449
    },
    {
        "content": "<p>Yes. I would probably do another constructor like <code>var : Nat -&gt; tp</code></p>",
        "id": 326485256,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1675816507
    },
    {
        "content": "<p>Chris, I'm not sure whether your post crossed with my reply to Eric, but that answer I think applies also to your example. If I'm not mistaken, the type A -&gt; B in Lean includes all functions from A to B, including functions that can be defined by case splits, recursion, and other means. In HOAS, A -&gt; B is crucially inductively generated only by the constructors of B and (effectively) a new constant of type A.</p>",
        "id": 326485812,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1675816825
    },
    {
        "content": "<p>I think it should be done something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-</span> <span class=\"bp\">&gt;</span> <span class=\"n\">tp</span>\n<span class=\"bp\">|</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">context</span>\n<span class=\"bp\">|</span> <span class=\"n\">snoc</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">context</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Context</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">empty</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">C</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">T'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">C</span> <span class=\"n\">T'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">C</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I can't quite figure out the whole lot right now. You need a constructor for <code>var</code> which takes a natural numver smaller than the size of the context.</p>",
        "id": 326487215,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1675817705
    },
    {
        "content": "<p>I don't really understand what <code>-&gt;</code> is in HOAS.</p>",
        "id": 326487273,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1675817755
    },
    {
        "content": "<p>Todd, in case you haven't already seen it, it might provide some inspiration to see how lean models it's own expression syntax (for metaprogramming), at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs4#Lean.Expr</a>. Obviously you can't use that directly.</p>",
        "id": 326487530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675817918
    },
    {
        "content": "<p>(ouch, that page is ugly on mobile; I'll try to fix it tomorrow)</p>",
        "id": 326487610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675817986
    },
    {
        "content": "<p>Probably you need a constructor for <code>tm C T -&gt; tm (snoc C T') T</code> as well. <code>Lean.Expr</code> allows for expressions that don't type check as well, and this isn't the best way to do lambda calculus I've heard.</p>",
        "id": 326487709,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1675818030
    },
    {
        "content": "<p>Yes, this is closer to what I'm getting at. For <code>var</code> you need some kind of look-up function that has a dependent type depending on the index. But the whole point of my question is trying to hide all of this in a nice \"interface\". </p>\n<p>To illustrate the difference with HOAS, suppose we had this, modified from your example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">tp</span>\n<span class=\"bp\">|</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tp</span> <span class=\"bp\">-</span> <span class=\"bp\">&gt;</span> <span class=\"n\">tp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"n\">tp</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tm</span> <span class=\"n\">T</span><span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">T'</span>\n</code></pre></div>\n<p>Then, the term <code>lam (fun x =&gt; if x == z then s z else z))</code> would have type <code>tm (arr nat nat)</code> assuming that there was an if-then-else available. By contrast, the only terms of type <code>tm (arr nat nat)</code> in HOAS would be <code>lam (fun x =&gt; s (s ( ... (s *))))</code>, where <code>*</code> is either <code>z</code> or <code>x</code>.</p>",
        "id": 326488463,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1675818518
    },
    {
        "content": "<p>Presumably <code>lam</code> should just take a <code>tm</code>, and produce a <code>tm</code> whose context has one element removed?</p>",
        "id": 326489432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675819244
    },
    {
        "content": "<p>Which is the <code>intro</code> rule in Chris' message</p>",
        "id": 326489594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675819380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224547\">Todd Wilson</span> <a href=\"#narrow/stream/113488-general/topic/HOAS.20support/near/326488463\">said</a>:</p>\n<blockquote>\n<p>But the whole point of my question is trying to hide all of this in a nice \"interface\". </p>\n</blockquote>\n<p>I think it will be a lot easier for people to help with that if we can first get to a correct but ugly/specialized example.</p>",
        "id": 326489730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675819468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/HOAS.20support/near/326489730\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224547\">Todd Wilson</span> <a href=\"#narrow/stream/113488-general/topic/HOAS.20support/near/326488463\">said</a>:</p>\n<blockquote>\n<p>But the whole point of my question is trying to hide all of this in a nice \"interface\". </p>\n</blockquote>\n<p>I think it will be a lot easier for people to help with that if we can first get to a correct but ugly/specialized example.</p>\n</blockquote>\n<p>That's been done already, in two different ways, in Sections 6.5 and 6.6 of the manual. So that's exactly what I'm trying to make less ugly. Maybe I could do both of those examples in Abella and Twelf, for those not familiar, to show what they look like for comparison. (Probably will have to wait until tomorrow, though.)</p>",
        "id": 326490476,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1675819990
    },
    {
        "content": "<p>It's generally hard to translate LF-style into other proof assistants like Lean and Agda. It can be done via a combination of encoding techniques like PHOAS, but the advantage of LF-style assistants is precisely the weaker function space. So if Lean could painlessly do this, languages like Twelf would become useless.</p>",
        "id": 326541895,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1675849370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224547\">Todd Wilson</span> <a href=\"#narrow/stream/113488-general/topic/HOAS.20support/near/326490476\">said</a>:</p>\n<blockquote>\n<p>That's been done already, in two different ways, in Sections 6.5 and 6.6 of the manual.</p>\n</blockquote>\n<p>Oh sorry, I completely missed <a href=\"https://leanprover.github.io/lean4/doc/examples/deBruijn.lean.html\">those</a> <a href=\"https://leanprover.github.io/lean4/doc/examples/phoas.lean.html\">two</a> examples</p>",
        "id": 326567509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675856797
    },
    {
        "content": "<p>Trebor, thanks for your statement, which is useful and was in fact my own starting point. Glancing over the Lean 4 manual, I was impressed by all of the syntax-extension (Chapter 8 of the manual) and meta-programming (Functional Programming in Lean) capabilities, so I was inspired to ask about whether those capabilities might, in effect, allow one to <strong>embed</strong> Abella or Twelf into Lean 4 in a nice way, not only so that developments in those systems could be accommodated almost directly, but also so that those systems could effectively be <strong>extended</strong> to include new type constructors (e.g., universes) and make use of Lean's built in types and reasoning.</p>\n<p>And, in fact, the example from Section 6.5 of the manual illustrates this perfectly. I cannot encode that example directly in either Abella or Twelf, because the <code>denote</code> function there requires a universe, as it constructs types recursively from an inductive type, and neither Abella nor Twelf has universes. Furthermore, that example makes use of Lean's <code>Nat</code> type and associated <code>(+)</code> operation, which, if I wanted to code it in Abella or Twelf, would need to be defined from scratch.</p>",
        "id": 326670039,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1675885011
    },
    {
        "content": "<p>So, after the above clarifications, I guess I can restate my question now more concisely as: Are Lean 4's syntax-extension and meta-programming capabilities sufficient for hiding a development in the style of the example in Section 6.5 of the manual (Dependent de Bruijn Indices) behind an Abella- or Twelf-like HOAS \"interface\" that would seem familiar to anyone with experience with those systems?</p>\n<p>I'm hoping that someone with knowledge of both Lean 4 capabilities and LF-style proof assistants can give me some confidence that such a project has a reasonable chance of success before I dive in and make the investment.</p>",
        "id": 327158133,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1676068192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224547\">@Todd Wilson</span> the answer to \"are Lean 4's syntax-extension and meta-programming capabilities sufficient for implementing MyLF\" is almost certainly 'yes', but the implementation effort may vary hugely depending on <em>how</em> you want to do it (I'm sorry to say I did not read your posts carefully enough to understand what exactly you are trying).</p>\n<ul>\n<li>Maybe you just want to use Lean as a programming language in which you define a type of MyLF syntax, a typechecker for MyLF expressions, etc, etc. Lean 4 is general purpose, so you can write any language you want this way (including Lean, which is implemented in itself). However the implementation effort of doing things this way is huge because you can't really reuse any type-theoretic infrastructure.</li>\n<li>Maybe you also want to use Lean the type theory (which should really be given a different name for clarity) in which you reason about LF derivations. With this approach you can use all the metaprogramming capabilities purpose-built for this type theory. I am not sufficiently familiar with Twelf to tell whether a shallow embedding can work. If you go with a deep embedding in which you have an inductive type of LF derivations, you can definitely write some meta code which makes it appear to the user as if they are working in LF, but in reality will construct an LF derivation tree in Lean's type theory. You could look to <a href=\"https://github.com/larsk21/iris-lean\">lean-iris</a> for inspiration on how this might work.</li>\n</ul>\n<p>I hope this helps somewhat!</p>",
        "id": 327166485,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1676072328
    },
    {
        "content": "<p>Thanks, Wojciech! Of your two bullets, I really have the second in mind -- a \"shallow\" embedding, as you say, along the lines of the Section 6.5 example. This gives me the ability to use type capabilities of Lean that go beyond the source language, as Section 6.5 again illustrates with its use of universes and pre-defined Lean types like Nat (and Lists, finite sets, etc.), in my LF developments. At the same time, I'd rather have my nice LF specifications translated automatically to the more complicated ones involving de Bruijn indices without constantly having to pay the cost of maintaining those de Bruijn indices and having them clutter my theorems and proofs.</p>",
        "id": 327169700,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1676074153
    },
    {
        "content": "<p>Am I understanding correctly that you don't want a Lean encoding <em>of the LF syntax itself</em> but rather want to translate constructions in the LF to Lean constructions directly? Indeed this would be closer to something 'shallow'.</p>",
        "id": 327170645,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1676074770
    },
    {
        "content": "<p>Yes, exactly. I want to give an LF specification, perhaps augmented with additional Lean types (e.g, Nat, Lists, finite sets, universes), and have Lean define for me instead the Dependent de Bruijn Indices version behind the scenes, while maintaining the illusion of an LF-style proof assistant with various syntax and tactics that allow me to work directly with the LF specifications, without having to break the abstraction layer and mess with de Bruijn indices -- unless absolutely necessary, but that would just mean that I needed more syntax and tactics to hide some more stuff.</p>\n<p>The point is, once I set up this embedding, I could start with the LF developments I've already done and then expand outward to include more and more of Lean's types as needed, kind of like a workbench where extensions to existing LF-style proof assistants could be explored, all within Lean's type system, and with Lean acting as the ultimate consistency check.</p>",
        "id": 327171200,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1676075102
    },
    {
        "content": "<p>I see, in that case <code>lean-iris</code> is the closest-in-spirit project that I can think of. It sounds like it would be a fair amount of work, but possible!</p>",
        "id": 327178215,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1676080703
    },
    {
        "content": "<p>Thanks for this reference! I'll take a look.</p>",
        "id": 327178854,
        "sender_full_name": "Todd Wilson",
        "timestamp": 1676081305
    }
]