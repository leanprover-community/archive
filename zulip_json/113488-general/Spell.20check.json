[
    {
        "content": "<p>Does anyone knows how to setup spell checking in VSCode so that it spells-checks only Lean comments? There is extra credit if this exclude things that are quoted in backticks in comments. I know about the cSpell extension and I know it claims to be able to do this, but I haven't been able to understand how.</p>",
        "id": 395903619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696950180
    },
    {
        "content": "<p><a href=\"https://github.com/bartosz-antosik/vscode-spellright\">Spell Right</a> looks promising, it can be configured to only spell check comment by something like <code>\"spellright.spellContext\": \"comments\"</code> or per language <code>\"spellright.spellContextByClass\": { \"lean4\": \"comments\" }</code>. It has no extra credit for code in comments, though.</p>\n<p>It doesn't support Lean out-of-box, adding support is easy  (although not well documented, the <a href=\"https://github.com/bartosz-antosik/vscode-spellright/blob/main/lib/doctype.js#L38\">code</a> supports it): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"spellright.parserByClass\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n            <span class=\"s2\">\"parser\"</span><span class=\"o\">:</span> <span class=\"s2\">\"code\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_start\"</span><span class=\"o\">:</span> <span class=\"s2\">\"/-\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_end\"</span><span class=\"o\">:</span> <span class=\"s2\">\"-/\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_line\"</span><span class=\"o\">:</span> <span class=\"s2\">\"--\"</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>It confirms to work like this (green is expected, red is less than ideal):</p>\n<p><a href=\"/user_uploads/3121/KPD2v6QChJVv-cwAqXCLJM_J/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KPD2v6QChJVv-cwAqXCLJM_J/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KPD2v6QChJVv-cwAqXCLJM_J/image.png\"></a></div>",
        "id": 395917069,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696954457
    },
    {
        "content": "<p>This already looks very useful but I can't make it do anything. Could you add details?</p>",
        "id": 395924022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696957115
    },
    {
        "content": "<p>Sorry, I omitted some important  details:</p>\n<ol>\n<li>\n<p>the JSONs mentioned above are supposed to be added to user settings of VSCode. </p>\n</li>\n<li>\n<p>after the extension is installed, the right-bottom corner would have something looks like off, click it, choose the languages like English and French, click OK to confirm </p>\n</li>\n<li>\n<p>I tested only Mac, on which it uses Apple's spell check API, thus might be less hassle. It uses Windows  spell check API on Windows and bundled spell check engine on Linux so they should work too.</p>\n</li>\n</ol>",
        "id": 395928944,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696959158
    },
    {
        "content": "<p>Not doing 2 is likely why it didn't work for you for any programming language</p>",
        "id": 395929046,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696959216
    },
    {
        "content": "<p>1 is essential for it to work for Lean</p>",
        "id": 395929437,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696959378
    },
    {
        "content": "<p>Better to test with Python first, with only 2 it should work, if not then it might be due to 3: OS</p>",
        "id": 395929555,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696959448
    },
    {
        "content": "<p>I did 1. I also tried 2. It allows only selecting French and I have no idea how to make English appear there. And selecting French doesn't  do anything.</p>",
        "id": 395930244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696959749
    },
    {
        "content": "<p>Weird, I tested both English and French</p>",
        "id": 395930433,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696959837
    },
    {
        "content": "<p>What's the OS?</p>",
        "id": 395930491,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696959850
    },
    {
        "content": "<p>Linux</p>",
        "id": 395930956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696960033
    },
    {
        "content": "<p>ubuntu 22.04</p>",
        "id": 395930989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696960048
    },
    {
        "content": "<p>Seems to require extra download: <a href=\"https://github.com/bartosz-antosik/vscode-spellright#linux-and-windows-7\">https://github.com/bartosz-antosik/vscode-spellright#linux-and-windows-7</a></p>",
        "id": 395931128,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696960097
    },
    {
        "content": "<p>Ok, it required <code>ln -s /usr/share/hunspell/* ~/.config/Code/Dictionaries</code>.</p>",
        "id": 395932893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696960904
    },
    {
        "content": "<p>Now it does something. But spelling mistakes are reported exactly as Lean errors, this is very distracting, especially since it flag all code in comments.</p>",
        "id": 395933000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696960943
    },
    {
        "content": "<p>If you go to the settings of the extension, there is <code>Spellright: Notification Class</code> and you can choose <code>Hint</code>, which is minimally distracting (maybe too little!).</p>",
        "id": 395933438,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696961130
    },
    {
        "content": "<p>It is indeed much better. There is also a <code>spellright.ignoreRegExpsByClass</code>  setting that looks promising to exclude quoted code, but I can't get it to work.</p>",
        "id": 395935879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696962007
    },
    {
        "content": "<p>It should work if provided with multiline regex</p>",
        "id": 395936890,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696962376
    },
    {
        "content": "<p>I'll try it tomorrow.</p>",
        "id": 395936958,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696962412
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"spellright.ignoreRegExpsByClass\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n <span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"o\">[</span> <span class=\"s2\">\"/```[^]*?```/gm\"</span> <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 395939663,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696963043
    },
    {
        "content": "<p>may be something like this, can't test at the moment though</p>",
        "id": 395939833,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696963078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>, I tested very minimally your regex and it seems to work.</p>",
        "id": 395942310,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696963642
    },
    {
        "content": "<p>I can't get it to work.</p>",
        "id": 395948414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696966110
    },
    {
        "content": "<p>In <code>.vscode/settings.json</code> I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"spellright.parserByClass\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n            <span class=\"s2\">\"parser\"</span><span class=\"o\">:</span> <span class=\"s2\">\"code\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_start\"</span><span class=\"o\">:</span> <span class=\"s2\">\"/-\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_end\"</span><span class=\"o\">:</span> <span class=\"s2\">\"-/\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_line\"</span><span class=\"o\">:</span> <span class=\"s2\">\"--\"</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"s2\">\"spellright.documentTypes\"</span><span class=\"o\">:</span> <span class=\"o\">[</span>\n        <span class=\"s2\">\"lean4\"</span><span class=\"o\">,</span>\n        <span class=\"s2\">\"markdown\"</span><span class=\"o\">,</span>\n        <span class=\"s2\">\"latex\"</span><span class=\"o\">,</span>\n        <span class=\"s2\">\"plaintext\"</span>\n    <span class=\"o\">],</span>\n    <span class=\"s2\">\"spellright.notificationClass\"</span><span class=\"o\">:</span> <span class=\"s2\">\"hint\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"spellright.ignoreRegExpsByClass\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"o\">[</span> <span class=\"s2\">\"/```[^]*?```/gm\"</span> <span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>and then the spell check automatically ignores text contained between (I guess odd-numbered) <code> ``` </code> and (even-numbered) <code> ``` </code>.</p>",
        "id": 395949010,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696966435
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ggCU5hXOGzuNECK6PsYcAqeM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ggCU5hXOGzuNECK6PsYcAqeM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ggCU5hXOGzuNECK6PsYcAqeM/image.png\"></a></div>",
        "id": 395994824,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696991807
    },
    {
        "content": "<p>It seems to work, also for single `.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"spellright.spellContextByClass\"</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"s2\">\"comments\"</span> <span class=\"o\">},</span>\n    <span class=\"s2\">\"spellright.parserByClass\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n            <span class=\"s2\">\"parser\"</span><span class=\"o\">:</span> <span class=\"s2\">\"code\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_start\"</span><span class=\"o\">:</span> <span class=\"s2\">\"/-\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_end\"</span><span class=\"o\">:</span> <span class=\"s2\">\"-/\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"comment_line\"</span><span class=\"o\">:</span> <span class=\"s2\">\"--\"</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"s2\">\"spellright.notificationClass\"</span><span class=\"o\">:</span> <span class=\"s2\">\"hint\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"spellright.ignoreRegExpsByClass\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"o\">[</span> <span class=\"s2\">\"/```[^]*?```/gm\"</span><span class=\"o\">,</span> <span class=\"s2\">\"/`[^]*?`/g\"</span><span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 395994892,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696991846
    },
    {
        "content": "<p>Does it work for double backtick? I know the question sounds crazy but this is what rst expects...</p>",
        "id": 395995020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696991905
    },
    {
        "content": "<p>It can be. Wait a sec...</p>",
        "id": 395995156,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696991972
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/UYwVjXCducNUMbBY0GzC1O-F/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UYwVjXCducNUMbBY0GzC1O-F/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/UYwVjXCducNUMbBY0GzC1O-F/image.png\"></a></div>",
        "id": 395996372,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696992721
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"o\">[</span> <span class=\"s2\">\"/```[^]*?```/gm\"</span><span class=\"o\">,</span> <span class=\"s2\">\"/``[^]*?``/g\"</span><span class=\"o\">,</span> <span class=\"s2\">\"/`[^]*?`/g\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>can work with both md and rst intertwined . Still investigating rst code block...</p>",
        "id": 395996420,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696992729
    },
    {
        "content": "<p>Thanks a lot for your work on this!</p>",
        "id": 395996732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696992928
    },
    {
        "content": "<p>I confirm I can now spell-check <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>!</p>",
        "id": 395997079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696993119
    },
    {
        "content": "<p>Could this configuration be stored somewhere?</p>",
        "id": 395997150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696993174
    },
    {
        "content": "<p>Perhaps even in Mathlib's <code>.vscode</code> directory?? Otherwise on the community webpage?</p>",
        "id": 395997177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696993193
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"spellright.ignoreRegExpsByClass\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"lean4\"</span><span class=\"o\">:</span> <span class=\"o\">[</span>\n            <span class=\"s2\">\"/```[^]*?```/gm\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"/``[^]*?``/g\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"/`[^]*?`/g\"</span><span class=\"o\">,</span>\n            <span class=\"s2\">\"/(?&lt;indentation&gt;[ </span><span class=\"se\">\\\\</span><span class=\"s2\">t]*)(?&lt;directiveline&gt;</span><span class=\"se\">\\\\</span><span class=\"s2\">.</span><span class=\"se\">\\\\</span><span class=\"s2\">. code-block::[^</span><span class=\"se\">\\\\</span><span class=\"s2\">n]*</span><span class=\"se\">\\\\</span><span class=\"s2\">n)((?&lt;codeline&gt;</span><span class=\"se\">\\\\</span><span class=\"s2\">k&lt;indentation&gt;+[ </span><span class=\"se\">\\\\</span><span class=\"s2\">t]+[^</span><span class=\"se\">\\\\</span><span class=\"s2\">n]*</span><span class=\"se\">\\\\</span><span class=\"s2\">n)|(?&lt;emptyline&gt;</span><span class=\"se\">\\\\</span><span class=\"s2\">k&lt;indentation&gt;*</span><span class=\"se\">\\\\</span><span class=\"s2\">n))*/gm\"</span>\n        <span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>works for rst code block, it's a bit complicated but straight forward if you take a closer look, I named the matches. Or you can past the following non-escape version into <a href=\"https://regex101.com/\">https://regex101.com/</a> to better understand it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"bp\">?&lt;</span><span class=\"n\">indentation</span><span class=\"bp\">&gt;</span><span class=\"o\">[</span> <span class=\"bp\">\\</span><span class=\"n\">t</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)(</span><span class=\"bp\">?&lt;</span><span class=\"n\">directiveline</span><span class=\"bp\">&gt;\\.\\.</span> <span class=\"n\">code</span><span class=\"bp\">-</span><span class=\"n\">block</span><span class=\"o\">::[</span><span class=\"bp\">^\\</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">*\\</span><span class=\"n\">n</span><span class=\"o\">)((</span><span class=\"bp\">?&lt;</span><span class=\"n\">codeline</span><span class=\"bp\">&gt;\\</span><span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">indentation</span><span class=\"bp\">&gt;+</span><span class=\"o\">[</span> <span class=\"bp\">\\</span><span class=\"n\">t</span><span class=\"o\">]</span><span class=\"bp\">+</span><span class=\"o\">[</span><span class=\"bp\">^\\</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">*\\</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">?&lt;</span><span class=\"n\">emptyline</span><span class=\"bp\">&gt;\\</span><span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">indentation</span><span class=\"bp\">&gt;*\\</span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">*/</span><span class=\"n\">gm</span>\n</code></pre></div>\n<p>Before:</p>\n<p><a href=\"/user_uploads/3121/lQfK9WRauHprOpteY05zAYZe/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lQfK9WRauHprOpteY05zAYZe/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/lQfK9WRauHprOpteY05zAYZe/image.png\"></a></div><p>After:</p>\n<p><a href=\"/user_uploads/3121/c-BxcCAtdXFn1dHFD23iGbHC/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/c-BxcCAtdXFn1dHFD23iGbHC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/c-BxcCAtdXFn1dHFD23iGbHC/image.png\"></a></div>",
        "id": 395997312,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696993232
    },
    {
        "content": "<p>OK, now it really works. I've updated the configs and screenshots above to avoid confusion.</p>",
        "id": 396006860,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696998907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Spell.20check/near/395997150\">said</a>:</p>\n<blockquote>\n<p>Could this configuration be stored somewhere?</p>\n</blockquote>\n<p>The UX I'm imagining is VSCode Lean 4 could register a command \"Spell check\", which would prompt to install \"Spell Right\" then install it via  <code>workbench.extensions.installExtension</code>, then override the configuration via <code>contributes.configurationDefaults</code>, so the installation and configuration would be pretty transparent except for requiring user consent.</p>\n<p>But for now maybe a simple configuration guide would be sufficient.</p>",
        "id": 396015225,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697003979
    },
    {
        "content": "<p><a href=\"https://gist.github.com/utensil/9591618f9cf5a0026d3154d062f36c78\">https://gist.github.com/utensil/9591618f9cf5a0026d3154d062f36c78</a></p>",
        "id": 396019517,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697006152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Spell.20check/near/396015225\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Spell.20check/near/395997150\">said</a>:</p>\n<blockquote>\n<p>Could this configuration be stored somewhere?</p>\n</blockquote>\n<p>The UX I'm imagining is VSCode Lean 4 could register a command \"Spell check\", which would prompt to install \"Spell Right\" then install it via  <code>workbench.extensions.installExtension</code>, then override the configuration via <code>contributes.configurationDefaults</code>, so the installation and configuration would be pretty transparent except for requiring user consent.</p>\n<p>But for now maybe a simple configuration guide would be sufficient.</p>\n</blockquote>\n<p>Generally, I consider <a href=\"https://code.visualstudio.com/docs/editor/extension-marketplace#_workspace-recommended-extensions\">workspace recommended extensions</a> to be a good tool for this that doesn't require baking anything into the extension, but it won't install the dictionaries for you. As for the configuration, you should be able to add your spellcheck configuration to the workspace-wide settings.json.</p>",
        "id": 396026623,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1697009147
    },
    {
        "content": "<p>I see, then all these can be workspace configurations, no need to bake them into the extension. I had the impression of some extension recommends some other extensions to me, but I don't recall the exact UX and can't find an API to support this directly. I also had the impression that some extension can bundle other extensions. But all these may be too much.</p>",
        "id": 396039305,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697014024
    },
    {
        "content": "<p>I am strongly against putting extensions like this in the workspace recommended extensions if that means that all new users see a pop-up that prompts them to install this extension (which I think it does).</p>",
        "id": 396044911,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697015889
    },
    {
        "content": "<p>I believe what was suggested is only a solution to do so project-wise, like only for Mathlib development, or only for books/tutorials authoring, and it should not affect general users of Lean or Mathlib.</p>",
        "id": 396045476,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697016046
    },
    {
        "content": "<p>Fair, most new users don't clone mathlib for their first project. Still, I don't think it should be recommended for mathlib. For custom projects it's fine of course.</p>",
        "id": 396045884,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697016173
    },
    {
        "content": "<p>I'm pretty surprised that a better spell check extension isn't available; having to provide regexes to tell it where to spell check seems ridiculous when it could be looking at the syntax highlighting scopes</p>",
        "id": 396061831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697021910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Spell.20check/near/396061831\">said</a>:</p>\n<blockquote>\n<p>I'm pretty surprised that a better spell check extension isn't available; having to provide regexes to tell it where to spell check seems ridiculous when it could be looking at the syntax highlighting scopes</p>\n</blockquote>\n<p>Indeed, that's what I was looking for first, but after some search of VSCode issues, it seems that such syntax information (used in code highlight) is not available to extension developers. So I fall back to this seemingly extendable extension.</p>",
        "id": 396062510,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697022145
    },
    {
        "content": "<p><a href=\"https://github.com/microsoft/vscode/issues/580\">https://github.com/microsoft/vscode/issues/580</a> suggests this is now possibly fixed (by an external library)</p>",
        "id": 396062695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697022215
    },
    {
        "content": "<p><a href=\"https://github.com/vsce-toolroom/vscode-textmate-languageservice\">The mentioned library</a> is in maintainace, it depends on Textmate grammar hat has certain features, and what superseded it is <a href=\"https://github.com/microsoft/vscode-anycode\">vscode-anycode</a> which in turn relies on tree-sitter parsers. Lean doesn't have both parser configurations, Lean only has Lean itself as a parser and <a href=\"https://github.com/leanprover/vscode-lean4/blob/master/vscode-lean4/syntaxes/lean4.json\">this JSON with many regrexes</a>.</p>",
        "id": 396064961,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697023064
    },
    {
        "content": "<p>I believe that json file is a textmate grammar, though maybe it's a vscode dialect</p>",
        "id": 396065374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697023215
    },
    {
        "content": "<p>Even if we managed to feed parser configurations to them, then we need to PR a spellchecker to make use of these services to get syntax highlighting scopes. It looks to me a long shot. But I agree, this should be much simpler than how hard it is now.</p>",
        "id": 396065405,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697023229
    },
    {
        "content": "<p>Sorry, Lean 4 has <a href=\"https://github.com/Julian/tree-sitter-lean\">tree-sitter-lean</a> (not actively maintained it seems), I even starred it but forgot.</p>",
        "id": 396065703,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697023327
    },
    {
        "content": "<p>This reminds me of my failed attempt to use the Lean language server to make a Jupyter kernel. This shortcut seems natural and feasible, especially with <a href=\"https://github.com/jupyter-lsp/jupyterlab-lsp\">jupyterlab-lsp</a>, but it was a deep rabbit hole.</p>",
        "id": 396066520,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697023629
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/D060A8_uziI-dmjdIdaklLtx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/D060A8_uziI-dmjdIdaklLtx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/D060A8_uziI-dmjdIdaklLtx/image.png\"></a></div><p>Any single quote will break the regex, I guess this happens a lot for quote-heavy tactic code.</p>",
        "id": 396113244,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697037856
    },
    {
        "content": "<p>That's true, but you regex is already very useful for teaching material which is not about meta-programming.</p>",
        "id": 396115537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697038543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Spell.20check/near/396113244\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/D060A8_uziI-dmjdIdaklLtx/image.png\">image.png</a></p>\n<p>Any single quote will break the regex, I guess this happens a lot for quote-heavy tactic code.</p>\n</blockquote>\n<p>It annoyed me while reading meta-heavy code and I realized that it's an easy fix. Fixed in <a href=\"https://gist.github.com/utensil/9591618f9cf5a0026d3154d062f36c78/revisions\">the latest config</a> and added test cases:<br>\n<a href=\"/user_uploads/3121/TOLeCWwTJagYvLGFFAbEcduQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TOLeCWwTJagYvLGFFAbEcduQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TOLeCWwTJagYvLGFFAbEcduQ/image.png\"></a></div>",
        "id": 396241565,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697099957
    },
    {
        "content": "<p>Incidentally, I just noticed this: <a href=\"https://github.com/streetsidesoftware/vscode-spell-checker/blob/main/FAQ.md#is-it-possible-to-only-spell-check-comments\">https://github.com/streetsidesoftware/vscode-spell-checker/blob/main/FAQ.md#is-it-possible-to-only-spell-check-comments</a> which the same approach (regex inclusion and exclusion) applies.</p>",
        "id": 396243079,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697100453
    }
]