[
    {
        "content": "<p>I fear this is impossible, but I don't actually know why. Could</p>\n<ol>\n<li><code>X → Y</code> be notation for <code>function X Y</code>, and</li>\n<li><code>function X Y</code> be an abbreviation for whatever Pi-type it should be.</li>\n</ol>\n<p>Then we could write <code>(hf : f.injective)</code> if I'm not mistaken.</p>",
        "id": 196733385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588835136
    },
    {
        "content": "<p>I'd love to have this. I don't know if it's easier to implement this in Lean, or in C++.</p>",
        "id": 196734297,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588835869
    },
    {
        "content": "<p>1) seems like a really bad idea, 2) is extremely easy to do, you just need to add a case for <code>is_pi</code> here: <a href=\"https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728\" title=\"https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728\">https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728</a><br>\nI think we should also have this for <code>Sort</code>.</p>",
        "id": 196737141,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588838215
    },
    {
        "content": "<p>What do you mean by 1) and 2)?</p>",
        "id": 196737500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588838450
    },
    {
        "content": "<p>Can we differentiate between <code>pi</code> and <code>function</code> here?</p>",
        "id": 196737883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588838667
    },
    {
        "content": "<p>1) and 2) refer to Johan's questions.<br>\nOh, <code>function</code> is supposed to be a non-dependent pi!  My advice still stands: 1) is probably a bad idea, 2) is easy and should be done.  You could differentiate between pis and non-dependent pis, for example you could try <code>function.injective</code> if it is non-dependent as well as <code>pi.injective</code>.  I'm not sure if this difference is important.  Do you want different definitions for pis and non-dependent pis?</p>",
        "id": 196738926,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588839260
    },
    {
        "content": "<p>But if we don't have 1), what is the benefit of 2)?</p>",
        "id": 196739360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588839514
    },
    {
        "content": "<p>We can't write <code>f.injective</code> for <code>f : X → Y</code> in that case, right?</p>",
        "id": 196739386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588839531
    },
    {
        "content": "<p>Gabriel pointed to C++ source file where we can hardcode \"if you see a function, try <code>function</code> namespace\".</p>",
        "id": 196739517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588839602
    },
    {
        "content": "<p>Instead of doing this in Lean.</p>",
        "id": 196739580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588839620
    },
    {
        "content": "<p>Aah, I see. We add a hack (-;</p>",
        "id": 196739613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588839636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Can you also explain why 1) is a bad idea?</p>",
        "id": 196739631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588839652
    },
    {
        "content": "<p>why not just write <code>f : X \\hom Y</code> and <code>f.injective</code></p>",
        "id": 196739701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588839709
    },
    {
        "content": "<p>or whatever unicode variant of the arrow that hasn't been used</p>",
        "id": 196739759,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588839727
    },
    {
        "content": "<p>This is more a gut feeling.  But adding definitions typically breaks stuff.  For example defining <code>(≥)</code> as <code>flip (≤)</code> breaks the simplifier.  I would imagine many similar things to happen if <code>→</code> was suddenly no longer a pi.</p>",
        "id": 196739769,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588839734
    },
    {
        "content": "<p>my point is, there's no need to change <code>\\to</code></p>",
        "id": 196739773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588839737
    }
]