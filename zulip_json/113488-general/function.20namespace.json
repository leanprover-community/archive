[
    {
        "content": "<p>I fear this is impossible, but I don't actually know why. Could</p>\n<ol>\n<li><code>X â†’ Y</code> be notation for <code>function X Y</code>, and</li>\n<li><code>function X Y</code> be an abbreviation for whatever Pi-type it should be.</li>\n</ol>\n<p>Then we could write <code>(hf : f.injective)</code> if I'm not mistaken.</p>",
        "id": 196733385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588835136
    },
    {
        "content": "<p>I'd love to have this. I don't know if it's easier to implement this in Lean, or in C++.</p>",
        "id": 196734297,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588835869
    },
    {
        "content": "<p>1) seems like a really bad idea, 2) is extremely easy to do, you just need to add a case for <code>is_pi</code> here: <a href=\"https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728\" title=\"https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728\">https://github.com/leanprover-community/lean/blob/675c47294a57c98e3215b6edd9e7efc80ec99475/src/frontends/lean/elaborator.cpp#L2728</a><br>\nI think we should also have this for <code>Sort</code>.</p>",
        "id": 196737141,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588838215
    },
    {
        "content": "<p>What do you mean by 1) and 2)?</p>",
        "id": 196737500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588838450
    },
    {
        "content": "<p>Can we differentiate between <code>pi</code> and <code>function</code> here?</p>",
        "id": 196737883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588838667
    }
]