[
    {
        "content": "<p>Continuing from an earlier discussion, how do we actually get to the point where we can do exploratory research within Lean itself? I often have a situation that would look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">DeligneBound</span> <span class=\"o\">(</span><span class=\"n\">assumptions</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">exponentialSum</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>That is, I don’t know yet what bound I’ll get, but I know the rough shape of the lemma. Is there a reasonable way to use Lean for this mode of discovery? How could we get it to generate two goals, the first an unknown value for the RHS, and the second, a proof that the bound holds? (This is, by the way, how I often teach. I don’t state theorems; I state the beginnings of theorems and leave blanks to fill in once we know the outcome of the proof…) One could of course choose to put <code>exponentialSum</code> on the RHS and be trivially done, but the point isn’t to just close a goal, but to put something nontrivial there; so there’s a lot of flexibility…</p>",
        "id": 390492441,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694515569
    },
    {
        "content": "<p>One thing to be done in the above would be to use an exists statement. Often one knows that the bound should be in terms of some stuff only and the existence may be as a function of these.</p>",
        "id": 390493761,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694516119
    },
    {
        "content": "<p>But I do feel that the present workflow can easily be extended for mathematics in progress. For example, have a command <code>conjecture</code> where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conjecture</span> <span class=\"n\">riemann_hypothesis</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>introduces the <em>definition</em> <code>riemann_hypothesis.prop</code> (not <code>riemann_hypothesis</code> as that should be a proof). Similarly, have a command</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">assume</span> <span class=\"n\">riemann_hypothesis</span>\n</code></pre></div>\n<p>which translates to <code>variable _ : riemann_hypothesis.prop</code> for when one wants to work assuming the Riemann hypothesis.</p>",
        "id": 390494215,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694516301
    },
    {
        "content": "<p>It may be better to have typeclasses and scoped instances instead of types and variables. Things have to be designed well. But implementing something like this should not be hard.</p>",
        "id": 390494529,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694516418
    },
    {
        "content": "<p>I mean typeclasses especially where we are not speaking of a single statement but a property that conjecturally holds for all primes say. Then this holding for a class of primes will be an instance.</p>",
        "id": 390494679,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694516489
    },
    {
        "content": "<p>Indeed, I looked back at how Gomes and I formalized RH (not in mathlib; see: <a href=\"https://github.com/bhgomes/lean-riemann-hypothesis\">https://github.com/bhgomes/lean-riemann-hypothesis</a>) many years ago, and it's a definition...</p>",
        "id": 390495199,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694516679
    },
    {
        "content": "<p>But ok, that's still a standard process in Lean; if I know what the conjecture is, I can state it as a <code>def</code> of type <code>Prop</code>; and then the theorem simply assumes that this <code>Prop</code> is true. What if I don't know a priori what the conjecture is - can I still work with it somehow?</p>",
        "id": 390495338,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694516742
    },
    {
        "content": "<p>I agree that we should explore these kind of workflows. And I don't think there is one obviously correct design. There's a lot of room for experimenting here.<br>\nA very low brow approach could start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DeligneBound</span> <span class=\"o\">(</span><span class=\"n\">assumptions</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">bound</span> <span class=\"bp\">//</span> <span class=\"n\">exponentialSum</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">bound</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- look two goals</span>\n</code></pre></div>\n<p>While it works, it isn't exactly the UX and workflow that you are looking for.</p>",
        "id": 390497703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694517707
    },
    {
        "content": "<p>That's happening to me right now in LeanAPAP: The way <span class=\"user-mention\" data-user-id=\"458865\">@Thomas Bloom</span> originally stated <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/src/prereqs/energy.lean#L38-L42\">this lemma</a> was wrong (he accidentally used two different notions of dissociation), so now I have a lemma with a constant I don't know, but I trust Thomas that it's true with some constant. Hence I've posited the existence of <code>thomas_const</code> and sorried the lemma until Thomas comes back to me with a fixed proof. Once I have the fixed proof, I will enter that exploratory mode you're looking for, where I have a guess for the value of <code>thomas_const</code>, but also a hunch that it's wrong, since it's a fiddly proof that a professional combinatoricist already got wrong once.</p>",
        "id": 390497819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694517743
    },
    {
        "content": "<p>My instinct with Alex' question is that it's a very natural one but historically it's not the way theorem provers have been used and hence it's not well-understood yet. Right now I think you just say \"exists B, Sum &lt; B\" and then you see what happens. This is what we did in LTE -- Scholze raised the question that various constants in the technical low-level lemma 9.4 were ineffective in the paper and asked if a formalisation could make them effective -- turned out it could.</p>",
        "id": 390499529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694518433
    },
    {
        "content": "<p>Speaking as a non-mathematician and Lean beginner, isn't the expected workflow to work out a sketch of a proof on paper first, and then go into Lean to formalize? (For now, at least) If you want to bring Lean in at a point where you're unsure what your final theorem will be, it may be interesting to give Lean some functionality that gives you promising options to explore?</p>",
        "id": 390607550,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1694557874
    },
    {
        "content": "<p>that depends on your comfort level with the proof assistant</p>",
        "id": 390608019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694558098
    },
    {
        "content": "<p>Generally speaking, yes you probably want to go in with a plan, if you know that the formalization will be the hard part</p>",
        "id": 390608062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694558128
    },
    {
        "content": "<p>I've been meaning to look into e graphs for this purpose. If I correctly understood  the documentation of the e-graph implementation in Julia, it should be possible to find interesting expressions, where 'interesting' can be defined by some scoring function. It's not my wheel house for sure, but that seems like an interesting angle.</p>",
        "id": 390608082,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1694558146
    },
    {
        "content": "<p>But if you get good at the language and the library, you can get to the point where you can just sort of use it like a sketchpad and prove facts in a somewhat aimless fashion</p>",
        "id": 390608162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694558183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/using.20Lean.2Fmathlib.20for.20*doing*.20mathematics/near/390608019\">said</a>:</p>\n<blockquote>\n<p>that depends on your comfort level with the proof assistant</p>\n</blockquote>\n<p>Definitely, and I agree that people will probably get more comfortable with it over time. Especially as more and more people get introduced to it early on in university.</p>",
        "id": 390608277,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1694558272
    },
    {
        "content": "<p>My answer to <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> 's question would be to use a <code>sorry</code>'d definition for the bound and just delay unfolding it as long as possible (possibly creating <code>sorry</code> subproof goals when I find a required constraint). This usually works a bit better than an existential metavariable if this thing is going to stick around over many proofs</p>",
        "id": 390608285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694558280
    },
    {
        "content": "<p>and then hopefully once all the constraints are collected the solution is obvious, you can fill in the bound, prove the constraints, and then maybe cleanup by inlining stuff</p>",
        "id": 390608453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694558370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/113488-general/topic/using.20Lean.2Fmathlib.20for.20*doing*.20mathematics/near/390494215\">said</a>:</p>\n<blockquote>\n<p>For example, have a command <code>conjecture</code> where </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conjecture</span> <span class=\"n\">riemann_hypothesis</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I like this idea. It seems to me that it's useful to have a clear semantic distinction between the theorems you've been able to demonstrate, axioms that you assert, and conjectures that you are proposing. It would also open up a proof writing style where you set out at the beginning what you are working towards as conjectures, then provide the guts as theorems, and close with how that guts satisfies those conjectures.</p>",
        "id": 390610669,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694559616
    },
    {
        "content": "<p>Both for use in real mathematics, and for use in AI, I feel that what needs to get stronger is mechanisms to find counterexamples (maybe even integrating with SAT solvers etc).  One big value a <em>smart sketchpad</em> can have is to tell a mathematician not to waste time proving something that is false.</p>",
        "id": 390622896,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694566931
    },
    {
        "content": "<p>We do have <code>slim_check</code> (I assume it’s ported to Lean4?) which does this as a tactic. Others have talked about automatically running certain tactics like <code>exact?</code> at all time, so they can fry eggs on their cpu. This could be another candidate.</p>",
        "id": 390623574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694567341
    },
    {
        "content": "<p>I did mean in part refining slimcheck and adding power to it by many more instances of random stuff.</p>",
        "id": 390623757,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694567432
    },
    {
        "content": "<p>I think doing this would be quite cool actually. And I’m ready to sacrifice my cpu.</p>",
        "id": 390623845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694567505
    },
    {
        "content": "<p>I have been trying running and my CPU has not been stressed so far:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/Aesop.20etc.20in.20the.20background/near/378792005\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Aesop.20etc.20in.20the.20background/near/378792005</a></p>\n<p>Generally things like <code>exact?</code> or <code>aesop?</code> may not work so well for disproving as typically we need to instantiate with good candidates for disproving. This is fundamentally no harder than other tactics/automation in Lean. It is just that the cognitive focus has been on formalizing stuff with known proofs, so this side is far less developed.</p>",
        "id": 390625633,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694568540
    }
]