[
    {
        "content": "<p>I added <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/uniform_group.html#cauchy_seq.const_mul\"><code>cauchy_seq.const_mul</code></a> last week, but I can't actually apply it to the reals. The additive version does work, however. What am I doing wrong?</p>\n<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20topology.uniform_space.cauchy%0Aimport%20analysis.normed.group.basic%0A%0A--%20works%0Aexample%20%7Bf%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%7D%20%7Bx%20%3A%20%E2%84%9D%7D%20%28hf%20%3A%20cauchy_seq%20f%29%20%3A%20cauchy_seq%20%28%CE%BB%20n%2C%20%28x%20%2B%20%28f%20n%29%29%29%20%3A%3D%0Ahf.const_add%0A%0A--%20fails%3A%20failed%20to%20synthesize%20type%20class%20instance%20for%20...%3A%20group%20%E2%84%9D%0Aexample%20%7Bf%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%7D%20%7Bx%20%3A%20%E2%84%9D%7D%20%28hf%20%3A%20cauchy_seq%20f%29%20%3A%20cauchy_seq%20%28%CE%BB%20n%2C%20%28x%20*%20%28f%20n%29%29%29%20%3A%3D%0Ahf.const_mul%0A%0A--%20Attempt%20to%20resolve%20typeclass%20errors%0Ainstance%20%3A%20group%20%E2%84%9D%20%3A%3D%20multiplicative.group%0Ainstance%20%3A%20uniform_group%20%E2%84%9D%20%3A%3D%20begin%20fconstructor%2C%20exact%20uniform_continuous_sub%20end%0A%0Aexample%20%7Bf%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%7D%20%7Bx%20%3A%20%E2%84%9D%7D%20%28hf%20%3A%20cauchy_seq%20f%29%20%3A%20cauchy_seq%20%28%CE%BB%20n%2C%20%28x%20*%20%28f%20n%29%29%29%20%3A%3D%0Abegin%0A%20%20convert%20%40cauchy_seq.const_mul%20_%20_%20_%20_%20_%20_%20f%20x%20hf%2C%0A%20%20funext%2C%20%20--%20Goal%20%3A%20x%20*%20f%20n%20%3D%20x%20*%20f%20n%0A%20%20--ring%2C%0Aend\">MWE</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.cauchy</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">hf.const_add</span>\n\n<span class=\"c1\">-- fails: failed to synthesize type class instance for ...: group ℝ</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">hf.const_mul</span>\n\n<span class=\"c1\">-- Attempt to resolve typeclass errors</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicative.group</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">uniform_group</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">uniform_continuous_sub</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">cauchy_seq.const_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>  <span class=\"c1\">-- Goal : x * f n = x * f n</span>\n  <span class=\"c1\">--ring, -- `refl` fails, and `ring` prints \"Goals accomplished\" but causes a type error</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271875112,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644866439
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/leanprover-community/mathlib/pull/12007\">#12007</a> as well, but Zulip seems more active.</p>",
        "id": 271875253,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644866491
    },
    {
        "content": "<p>The problem is that <code>ℝ</code> is not a group under multiplication, it's only a monoid.</p>",
        "id": 271876175,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1644866851
    },
    {
        "content": "<p>Do you want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units\">docs#units</a> ?</p>",
        "id": 271876427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644866960
    },
    {
        "content": "<p><code>units \\R</code> should get a <code>comm_group</code> instance</p>",
        "id": 271876468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644866988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I don't know. I don't think so? I wonder if I can relax the typeclass bounds on <code>cauchy_seq.const_mul</code>?</p>",
        "id": 271876946,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644867201
    },
    {
        "content": "<p>The assumptions of <code>const_mul</code> also look unnecessarily strong.  It should be enough that <code>*</code> is uniformly continuous.</p>",
        "id": 271876949,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644867203
    },
    {
        "content": "<p>Yeah, you can probably get by with <code>monoid \\a</code> instead of <code>group \\a</code>. Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_monoid\">docs#uniform_monoid</a> ?</p>",
        "id": 271877178,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644867283
    },
    {
        "content": "<p>Bah, for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_group\">docs#uniform_group</a> we do the usual mathematician trick where we impose that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><mi>x</mi><mo>⋅</mo><msup><mi>y</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(x,y) \\mapsto x \\cdot y^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> is uniformly continuous, instead of saying that multiplication and inversion are uniformly continuous separately.</p>",
        "id": 271877475,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644867390
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>. That was dumb of me.</p>\n<p>Am I correct that I'll need a private version of this lemma with a different proof if I wish to use it on real numbers? The thing I'm trying to prove involves sequences of norms.</p>",
        "id": 271878474,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1644867829
    },
    {
        "content": "<p>I'm not convinced that you really need this lemma, anyway -- why are you working with Cauchy sequences of real numbers, couldn't you work with convergent sequences of real numbers?</p>",
        "id": 271878658,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1644867902
    },
    {
        "content": "<p>And if dealing with convergent rather than Cauchy sequences, the result you want is available as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.const_mul\">docs#filter.tendsto.const_mul</a></p>",
        "id": 271879004,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1644868059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457867\">Dylan MacKenzie (ecstatic-morse)</span> has marked this topic as resolved.</p>",
        "id": 271897124,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644876806
    }
]