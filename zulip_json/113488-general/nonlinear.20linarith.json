[
    {
        "content": "<p>In the teaching stream, Heather pointed out the usefulness of <a href=\"https://coq.inria.fr/refman/addendum/micromega.html#coq:tacn.nra\" title=\"https://coq.inria.fr/refman/addendum/micromega.html#coq:tacn.nra\">nra</a> in Coq. The description sounds like it would be pretty doable to have in mathlib. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> What would it take besides the name change to convince you to give it a try?</p>",
        "id": 196944750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588968625
    },
    {
        "content": "<p>Maybe I should emphasize I don't really mean <em>Rob</em> should do this, I simply couldn't resist using the combination of relation to <code>linarith</code> and to American politics.</p>",
        "id": 196945437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588969038
    },
    {
        "content": "<p>Isn't nonlinear arithmetic undecidable? That means we need a more precise description of what it can and can't do</p>",
        "id": 196974084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589000756
    },
    {
        "content": "<p>Is it just <code>linarith</code> with a fancy simp set?</p>",
        "id": 196974141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589000793
    },
    {
        "content": "<p>How does linarith with a fancy simp set work? Does it try the simp set first?</p>",
        "id": 196977521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589007675
    },
    {
        "content": "<p>I'm sorry, I should have copy-pasted in addition to giving a link:</p>\n<blockquote>\n<p>This tactic is an experimental proof procedure for non-linear arithmetic. The tactic performs a limited amount of non-linear reasoning before running the linear prover of lra. This pre-processing does the following:</p>\n<ul>\n<li>If the context contains an arithmetic expression of the form e[x2] where x is a monomial, the context is enriched with x2≥0 ;</li>\n<li>For all pairs of hypotheses e1≥0, e2≥0, the context is enriched with e1×e2≥0</li>\n</ul>\n<p>After this pre-processing, the linear prover of lra searches for a proof by abstracting monomials by variables.</p>\n</blockquote>",
        "id": 196982097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589015868
    },
    {
        "content": "<blockquote>\n<p>For all pairs of hypotheses e1≥0, e2≥0, the context is enriched with e1×e2≥0</p>\n</blockquote>\n<p>Doesn't this diverge?</p>",
        "id": 196982219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589016105
    },
    {
        "content": "<p>I guess they first generate the list of assumptions of the form e ≥0</p>",
        "id": 196982316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589016259
    },
    {
        "content": "<p>Is this supposed to work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">done</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 196983296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589018042
    },
    {
        "content": "<p>In any case, I think this does the requisite preprocessing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_squares</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">find_squares</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n    <span class=\"n\">p</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">pow_two_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span>\n    <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">assertv</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">traverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">find_squares</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nra</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ls</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">ls&#39;</span> <span class=\"err\">←</span> <span class=\"n\">ls</span><span class=\"bp\">.</span><span class=\"n\">mfoldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">find_squares</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">l</span>\n    <span class=\"kn\">end</span><span class=\"o\">)</span> <span class=\"o\">[],</span>\n  <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">find_squares</span><span class=\"o\">,</span>\n  <span class=\"n\">ls&#39;</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ls&#39;</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">p</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">mul_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n    <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">assertv</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">linarith</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"n\">none</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">nra</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 196983353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589018128
    }
]