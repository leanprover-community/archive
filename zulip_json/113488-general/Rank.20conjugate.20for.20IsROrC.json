[
    {
        "content": "<p>In PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6239\">#6239</a> I try to prove the following, For a matrix with elements in (<code>IsROrC</code>), the following three relations hold:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>rank</mtext><mo stretchy=\"false\">(</mo><msup><mi>A</mi><mi>H</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>rank</mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{rank}(A^H) = \\text{rank}(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>rank</mtext><mo stretchy=\"false\">(</mo><msup><mi>A</mi><mi>H</mi></msup><mi>A</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>rank</mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{rank}(A^HA) = \\text{rank}(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>rank</mtext><mo stretchy=\"false\">(</mo><mi>A</mi><msup><mi>A</mi><mi>H</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>rank</mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{rank}(AA^H) = \\text{rank}(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>The closest lemmas in mathlib to this are <code>rank_conjTranspose</code>, <code>rank_self_mul_conjTranspose</code> ... etc. These however do not apply since they require <code>PartialOrder</code> and <code>StarOrderedRing</code> instances on IsROrC. The status of the instances and where to place them seems to be a conversation the community is having and will continue to have for some time. </p>\n<p>The lemmas above however apply without resorting to this specific class issue. All they need is <code>dotProduc (star v) v =0 iff v = 0</code> which clearly applies to the IsROrC type class.</p>",
        "id": 380011345,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690718161
    },
    {
        "content": "<p>Any thoughts welcome</p>",
        "id": 380014890,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690719033
    },
    {
        "content": "<p>I think there is a post on zulip somewhere that proves that first result in even greater generality, it would be good to find it</p>",
        "id": 380016542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690719478
    },
    {
        "content": "<p>Do you mean this one?<br>\n<a href=\"#narrow/stream/116395-maths/topic/row.20rank.20equals.20column.20rank\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/row.20rank.20equals.20column.20rank</a></p>",
        "id": 380019530,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690720201
    },
    {
        "content": "<p>Yes!</p>",
        "id": 380019599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690720214
    },
    {
        "content": "<p>Though maybe that generalizes in a different direction...</p>",
        "id": 380019778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690720249
    },
    {
        "content": "<p>I think the fact that there is an <code>IsROrC</code> class is a strong indicator for having these lemmas. I mean is it not a bit odd that I cannot apply <code>dotProduct_star_self_eq_zero</code> to the IsROrC class?</p>",
        "id": 380020366,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690720393
    },
    {
        "content": "<p>Well yes, but you should also be able to apply it for \\Q</p>",
        "id": 380020535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690720436
    },
    {
        "content": "<p>If you can make a class that includes Q, R, C alone then I think we can prove the <code>dotProduct_star_self_eq_zero</code> for them. But I don't think that would be a wise step. I think among those three Q is different , it is not like the others!</p>",
        "id": 380021215,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690720606
    },
    {
        "content": "<p>We already have one such class, it's StarOrderedRing!</p>",
        "id": 380022135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690720821
    },
    {
        "content": "<p>That includes things other than Q R C.  Does it not include Positive Semi-definite Matrices for example?</p>",
        "id": 380022599,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690720934
    },
    {
        "content": "<p>I mean no order is required to have <code>dotProduct_star_self_eq_zero</code> it is just straight equal or not equal question right?</p>",
        "id": 380022829,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690721015
    },
    {
        "content": "<p>A <code>StarOrderedRing</code> as in mathlib requires a <code>PartialOrder</code></p>",
        "id": 380022981,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690721049
    },
    {
        "content": "<p>Which is a discussion you have demonstrated has been running on and off for some time</p>",
        "id": 380023069,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690721076
    },
    {
        "content": "<p>There's no question about whether we want the partial order: only if we want to make people type <code>open scoped ComplexOrder</code> to get it</p>",
        "id": 380026640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690721896
    },
    {
        "content": "<p>I agree that it's unfortunate that the typeclass is about orders even though the statement does not mention inequalities</p>",
        "id": 380026772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690721928
    },
    {
        "content": "<p>I'm not sure why you think needing the order here is unfortunate. This theorem, correctly interpreted, just says that a sum of positive elements is zero if and only if each of them is zero. You need the order to talk about positivity.</p>\n<p>And anyway, there are tons of results in C*-algebra theory that require the partial order without ever making explicit reference to it in the statement.</p>",
        "id": 380032365,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690723173
    },
    {
        "content": "<p>If many statements don't mention the order, perhaps there should be a <code>Prop</code>-only typeclass that says \"such an order could exist\"</p>",
        "id": 380033163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690723336
    },
    {
        "content": "<p>Sort of like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.MetrizableSpace#doc\">docs#TopologicalSpace.MetrizableSpace</a> doesn't actually globally induce a metric</p>",
        "id": 380033306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690723370
    },
    {
        "content": "<p>I'm not really sure what that will buy us in practice.</p>",
        "id": 380033558,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690723434
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"497480\">@MohanadAhmed</span>, I realize sometimes things don't move as fast as we want, but please be patient about <a href=\"https://github.com/leanprover-community/mathlib4/pull/6210\">#6210</a>, we'll get it sorted soon.</p>",
        "id": 380033670,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690723454
    },
    {
        "content": "<p>We always have the option of splitting <a href=\"https://github.com/leanprover-community/mathlib4/pull/6210\">#6210</a> in two: first add <code>IsROrC.toPartialOrder</code> as a scoped instance (which is uncontroversial), and then make a follow-up PR that makes it global</p>",
        "id": 380036542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690724119
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 380036585,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690724131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Rank.20conjugate.20for.20IsROrC/near/380033670\">said</a>:</p>\n<blockquote>\n<p>And <span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span>, I realize sometimes things don't move as fast as we want, but please be patient about <a href=\"https://github.com/leanprover-community/mathlib4/pull/6210\">#6210</a>, we'll get it sorted soon.</p>\n</blockquote>\n<p>To be honest when I saw the 21 Feb 2021 date at the top of that poll thread, ................... well I saw a few years flashing  by  <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 380037006,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690724226
    },
    {
        "content": "<p>It's worth remembering that that thread is only about bike-shedding whether to write <code>open scoped ComplexOrder</code> or not. That should be orthogonal to any mathematical concerns.</p>",
        "id": 380037316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690724292
    },
    {
        "content": "<p>On the more constructive note: <br>\nHow about a class that just encodes the following:<br>\nconjTranspose v * v = 0 iff v = 0</p>",
        "id": 380037805,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690724418
    },
    {
        "content": "<p>That would include Q R C , positive semidefinite matrices and so on</p>",
        "id": 380037934,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690724445
    },
    {
        "content": "<p>I think it is called something like a Star Normed Field</p>",
        "id": 380038245,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690724526
    },
    {
        "content": "<p>You mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CstarRing#doc\">docs#CstarRing</a> ?</p>",
        "id": 380038416,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690724572
    },
    {
        "content": "<p>That's not enough to work for the vector lemma, right? Because we're using <code>dotProduct</code> not <code>*</code></p>",
        "id": 380038430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690724576
    },
    {
        "content": "<p>I meant mulitplication by *</p>",
        "id": 380038513,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690724602
    },
    {
        "content": "<p>That's not enough to prove <code>dotProduct_star_self_eq_zero</code></p>",
        "id": 380038606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690724621
    },
    {
        "content": "<p>Something that gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">StarNormedField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_product_star_self_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"n\">Matrix.dotProduct</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span>  <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 380039346,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690724803
    },
    {
        "content": "<p><code>[StarNormedField K]</code> is spelt <code>[NormedField K] [StarRing K] [CstarRing K]</code></p>",
        "id": 380039844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690724938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Rank.20conjugate.20for.20IsROrC/near/380033558\">said</a>:</p>\n<blockquote>\n<p>I'm not really sure what that will buy us in practice.</p>\n</blockquote>\n<p>Eric <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> ?</p>",
        "id": 380040431,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690725067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Rank.20conjugate.20for.20IsROrC/near/380039844\">said</a>:</p>\n<blockquote>\n<p><code>[StarNormedField K]</code> is spelt <code>[NormedField K] [StarRing K] [CstarRing K]</code></p>\n</blockquote>\n<p>Does that give dotProduct_star_self_eq_zero?</p>",
        "id": 380041153,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690725244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Rank.20conjugate.20for.20IsROrC/near/380033558\">said</a>:</p>\n<blockquote>\n<p>I'm not really sure what that will buy us in practice.</p>\n</blockquote>\n<p>Only that you would be able to apply order-less statements without <code>open scoped ComplexOrder</code></p>",
        "id": 380041348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690725298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/113488-general/topic/Rank.20conjugate.20for.20IsROrC/near/380038513\">said</a>:</p>\n<blockquote>\n<p>I meant mulitplication by *</p>\n</blockquote>\n<p>Sorry yeah u are right vector inner product</p>",
        "id": 380041388,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690725309
    }
]