[
    {
        "content": "<p>Hi, is <a href=\"https://github.com/leanprover-community/mathlib/blob/8905e5ed90859939681a725b00f6063e65096d95/src/tactic/transfer.lean#L182-L196\">the general <code>transfer</code> tactic</a> used in the codebase? Is there doc beyond the header of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/transfer.lean\">the <code>tactic.lean</code> file</a> and a summary of its capabilities? Am I looking at the right file?</p>",
        "id": 373185013,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1688731321
    },
    {
        "content": "<p>Not as far as I'm aware.</p>",
        "id": 373185325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688731377
    },
    {
        "content": "<p>Is there another transfer tactic that is in use in the code base?</p>",
        "id": 373185556,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1688731421
    },
    {
        "content": "<p>I think it is used in <code>data.nat.num.lemmas</code> but that might be the only place iirc. there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#equiv_rw\">tactic#equiv_rw</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transport\">tactic#transport</a> which as I understand aim to do related things, but none of these tactics are used extensively in mathlib</p>",
        "id": 373192119,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688732768
    },
    {
        "content": "<p>One reason we almost never use <code>transport</code> is that results we could prove with it are usually true more generally when only an injection is available</p>",
        "id": 373263139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688746048
    },
    {
        "content": "<p>or a surjection: for example \"X isomorphic to compact Y is compact\" follows from \"continuous image of compact is compact\", and \"R isomorphic to S has at most one maximal ideal\" follows from \"R -&gt; S a surjection and R has at most one maximal ideal implies S has at most one maximal ideal\".</p>",
        "id": 373286404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688751332
    },
    {
        "content": "<p>A brand new <code>transport</code> (not ready for PR yet) can now do things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MyCompact</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Set.univ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">Set.univ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.Surjective</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf_cont</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">MyCompact</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyCompact</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">transport</span> <span class=\"n\">hX</span> <span class=\"n\">along</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>WIP with <span class=\"user-mention\" data-user-id=\"391579\">@Jake Levinson</span>.</p>",
        "id": 380934579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690962404
    },
    {
        "content": "<p>What?? This must be pulling the fact that preimage of open is open out of a hat somewhere. Your transport isn't just transporting along isomorphisms then? Because an isomorphism of topological spaces sends opens to opens by definition.</p>\n<p>Here's my favourite of these injective/surjective questions. By <code>transport</code> below I mean this amazing extension of what I was thinking of, where you can transport along injections and surjections as well as isomorphisms.</p>\n<p>Let's say a commutative ring is local if it has exactly one maximal ideal. I claim that a ring isomorphic to a local ring is local, and here's a funny proof. Say a ring is nontrivial if it has more than one element. If R -&gt; S is an injection and R is nontrivial then S is nontrivial, by <code>transport</code>. Say a ring is prelocal if it has at most one maximal ideal. If R -&gt; S is a surjection and R is prelocal then S is prelocal, by <code>transport</code>. Furthermore a nontrivial prelocal ring is local. Hence if R -&gt; S is an isomorphism and R is local then S is local. </p>\n<p>I am currently very confused about how you're transporting along non-isomorphisms so I'm wondering how far you're likely to be able to go and the above question is, I would imagine, quite a challenge.</p>",
        "id": 380954908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690966695
    },
    {
        "content": "<p>Yes please tell us how it works!</p>",
        "id": 380962699,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690968369
    },
    {
        "content": "<p>Indeed, Kevin, you have correctly identified our cheating, but it is only as bad as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span><span class=\"o\">]</span> <span class=\"n\">IsOpen.preimage</span>\n</code></pre></div>\n<p>which I think is fairly justifiable even without this tactic wanting it.</p>",
        "id": 380966482,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690969100
    },
    {
        "content": "<p>Another fun example that currently works (again, requiring the same <code>aesop</code> rule for <code>IsOpen.preimage</code>, but no other cheating):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MySeqCompact</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.Surjective</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf_cont</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">MySeqCompact</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">MySeqCompact</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">transport</span> <span class=\"n\">hX</span> <span class=\"n\">along</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 380967084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690969210
    },
    {
        "content": "<p>Jake and I were planning on working on this again tomorrow, and perhaps we will try local rings. :-)</p>",
        "id": 380967666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690969339
    },
    {
        "content": "<p>To say a bit more about (the current state of) the tactic, it works through the goal syntactically - it checks if the goal is a forall / pi type, if it is an exists statement, and so on. For example if the goal is <code>p and q</code> and we’re given <code>p’ and q’</code>, the tactic will try to transport <code>p’</code> to <code>p</code> and <code>q’</code> to <code>q</code> and will fail if this is not the correct way to proceed. So the goal has to syntactically resemble the transport hypothesis.</p>\n<p>The guesswork is limited, for instance to transport <code>x : X</code> to a goal <code>Y</code> it will try <code>f x</code> and see that it works. The default guess is to try <code>aesop</code>.</p>\n<p>The tactic isn’t intended to be very intelligent, the main point is to break down the transport goal piece by piece and transport each (small) part separately. Compactness is a nice example because there are several nested quantifiers that can be handled automatically, but only one (as Kevin pointed out) nontrivial choice.</p>",
        "id": 381233706,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1690995772
    },
    {
        "content": "<p>Jake's description leaves out one important part: we don't just transport by applying the bare function, but also by using <code>solve_by_elim</code> with lemmas tagged as <code>functor</code> to build new functions. Working out how to deal with ambiguity here (<a href=\"http://Filter.map\">Filter.map</a> via Filter.comap etc) is the big thing we haven't really decided how to deal with yet!</p>",
        "id": 381308689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691017041
    }
]