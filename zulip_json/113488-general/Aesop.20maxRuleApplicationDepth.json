[
    {
        "content": "<p>Trying to get aesop to one-shot the following lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">cases</span><span class=\"o\">]</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">constructors</span><span class=\"o\">]</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- set_option maxRuleApplicationDepth 35 -- When uncommented \"unknown option 'maxRuleApplicationDepth'\"</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">getD_map</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.getD</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n   <span class=\"c1\">-- aesop: failed to prove the goal. Some goals were not explored because the maximum rule application depth (30) was reached. Set</span>\n  <span class=\"c1\">-- option 'maxRuleApplicationDepth' to increase the limit.</span>\n\n  <span class=\"c1\">-- The working proof:</span>\n  <span class=\"c1\">-- induction l generalizing n with</span>\n  <span class=\"c1\">-- | nil =&gt; rfl</span>\n  <span class=\"c1\">-- | cons head tail ih =&gt;</span>\n  <span class=\"c1\">--   aesop</span>\n</code></pre></div>\n<p>What is the correct way to set the option aesop is telling me to set?</p>",
        "id": 393011711,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695648002
    },
    {
        "content": "<p>If you look at the aesop readme it explains how <a href=\"https://github.com/JLimperg/aesop#the-aesop-tactic\">https://github.com/JLimperg/aesop#the-aesop-tactic</a>, I found this answer by grepping for <code>maxRuleApplicationDepth</code> in mathlib + deps</p>",
        "id": 393052198,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695657569
    },
    {
        "content": "<p>Aesop is not trying to tell you that you should necessarily increase this limit. You should only increase it if you really want to look for proofs with more than 30 steps. ;) In this case, that likely won't help because Aesop doesn't know how to do induction (and this is a deliberate choice). So I would write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 393057679,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695658771
    },
    {
        "content": "<p>Ah, you probably added a custom induction rule for lists. In that case, your rule probably loops, generating longer and longer proof attempts, which the <code>maxRuleApplicationDepth</code> cuts short at 30.</p>",
        "id": 393062971,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695660384
    },
    {
        "content": "<p>I am interested in trying to get aesop to do the induction. Is there an accepted way of adding an induction lemma to the things aesop uses?</p>",
        "id": 393065917,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695661320
    },
    {
        "content": "<p>Is there a particular lemma that encapsulates the concept of \"induction on lists\"? Like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.reverseRecOn#doc\">docs#List.reverseRecOn</a> by without the reverse?</p>",
        "id": 393067353,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695661714
    }
]