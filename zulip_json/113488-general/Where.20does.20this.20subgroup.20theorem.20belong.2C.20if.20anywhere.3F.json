[
    {
        "content": "<p>There's a theorem that any subset of a group that is also a group, must be non-empty and closed under the operation &amp; inverse.</p>\n<p>Mathlib embodies the opposite direction: the <code>Subgroup</code> class embodies \"subset that includes 1, is closed under * and inverse\" and has a <code>toGroup</code> that give the <code>Group</code> object corresponding to the subset.</p>\n<p>AFAIK, the opposite doesn't exist explicitly in Mathlib.  It's an important part of an undergraduate education, that those conditions aren't just sufficient but also necessary.  But it's implicit in mathlib, not explicit.  For example, there's only one way to create a <code>Subgroup</code>, by giving those 3 conditions, and every <code>Subgroup</code> has them.</p>\n<p>The <a href=\"http://url\">Xena project</a>, one of its goals \"is to get the main results of all of the pure maths courses in Imperial's undergraduate curriculum formalised in Lean's maths library.\"  So does this belong in mathlib?  On the one had, I'd argue it's a main result of group theory.  On the other hand, in software at least, a library is a collection of things that are useful in creating applications, but don't contain applications themselves.  In other words, library code is a set of things useful for proving theorems, and in this view should only contain things that a user might use, rather than results that e.g. show a condition is not just sufficient but also necessary.</p>\n<p>Thoughts?</p>",
        "id": 401816529,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699897350
    },
    {
        "content": "<p>Martin, I tried to address this in the other thread, but let me explain again. When mathematicians say that \"any subset of a group that is also a group†, must be non-empty and closed under the operation and inverse\" (†of course, this means \"with the inherited operations\", otherwise the claim is patently false), they are being very sloppy, as it's essentially circular.</p>\n<ol>\n<li>Of course it's nonempty (all groups have an identity); this is <em>maybe</em> the only piece with meaningful content.</li>\n<li>In order for the subset to have \"inherited operations\" it is a prerequisite to the definition of those operations that the subset is closed under them.</li>\n</ol>",
        "id": 401817772,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699897909
    },
    {
        "content": "<p>Suppose <code>G</code> is a group. Then there are operations <code>(· * ·) : G → G → G</code> and <code>(· ⁻¹) : G → G</code>. If <code>H : Set G</code>, then we can <em>always</em> get operations <code>mulH : H → H → G</code> and <code>invH : H → G</code> given by <code>mulH h₁ h₂ := (h₁ : G) * (h₂ : G)</code> and <code>invH h₁ := (h₁⁻¹ : G)</code>. But for <code>H</code> to be a group, we need these operations to be <code>H → H → H</code> and <code>H → H</code>. And to ensure that (and they agree when coerced to <code>G</code>), must presuppose that <code>H</code> is closed under these operations.</p>",
        "id": 401818272,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699898120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> gave (most of) a proof.  He formalized it this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSubgroup</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>This seems like a great way to formalize it, at least to me.  Is there a place for this somewhere, either in mathlib or somewhere else?</p>\n<p><code>Subgroup.toGroup</code> is basically \"given a subgroup, give a constructive proof that it's a <code>Group</code> by constructing a <code>Group</code> object.\"</p>\n<p>Having an analogous <code>toSubgroup</code> function for the other direction makes sense to me.</p>",
        "id": 401821449,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699899410
    },
    {
        "content": "<p>If you <em>really</em> want something, there's this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"c1\">-- This says that `G` is a group, and `H` is a subset of `G` which is also a group with some,</span>\n<span class=\"c1\">-- possibly different, operations, but the coercion (\"identity\") map which sends every `h : H` to</span>\n<span class=\"c1\">-- `h : G` is a homomorphism, which means that the operations on `H` agree with the operations on</span>\n<span class=\"c1\">-- `G`.</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_f_eq_val</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.range</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">·</span><span class=\"o\">⟩,</span> <span class=\"n\">h_f_eq_val</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_f_eq_val</span> <span class=\"n\">x</span> <span class=\"bp\">▸</span> <span class=\"n\">x.2</span>\n</code></pre></div>",
        "id": 401822197,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699899719
    },
    {
        "content": "<p>But again, we don't want this in Mathlib because it's essentially just chasing one's tail.</p>",
        "id": 401822420,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699899812
    },
    {
        "content": "<p>Martin: at school I was taught that one of the axioms of a group was \"closure\", i.e. \"if x and y are in the group, then x*y is in the group\". At university I was taught that \"closure\" was not an axiom, and indeed if you look at the definition of a group on Wikipedia then there is no mention of a \"closure\" axiom. The school approach comes from a slightly muddled way of thinking, where there is assumed to be some kind of intrinsic definition of multiplication that magically works for any objects; this is not an unreasonable thing to tell a schoolchild because the groups that I saw in school (in the very limited amount of time which was spent on group theory) were <em>concrete</em> groups such as matrix groups or permutation groups. In university I was quickly introduced to the concept of an <em>abstract</em> group which was just <code>(G : Type) [Group G]</code> and with this change of emphasis comes a change in the whole way the theory is set up (e.g. the fact that \"closure\" now ceases to be an axiom and becomes something else). Mathlib is firmly in the \"abstract\" setting and it changes one's perspective. The statement \"a set is a group\" (implicit in what you write above) does not make sense in the <em>abstract</em> setting, because a group is a set plus some extra data, so a set literally cannot be a group because we are missing information. However in the concrete setting, the claim that \"this concrete set is a group\" does make some kind of sense. Such things might be used to teach undergraduates who are in the process of learning how to move from the concrete to the abstract. But with mathlib firmly in the abstract, some things we read in textbooks suitable for beginning undergraduates need to be modified or ignored, because they do not take into account the \"mathlib way of doing things\".</p>",
        "id": 401830334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699903277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thank you for your kind words.  I definitely appreciate the distinction between the concrete and the abstract.  My Group Theory text was W. Ledermann's \"Introduction to Group Theory,\" and its first group axiom is closure, and that always struck me as strange.  As you say, in the abstract setting, what else would it be?  If a group is essentially an ordered pair of a set G and an operation *, why elevate to a \"group axiom\" that the range of * is G, but say nothing about the domain of *?  I think the Lean way of handling this makes the most sense, and there's no debate there.</p>\n<p>I do think the situation for subgroup is different.  In that case, there's a \"parent\" group G (really (G, <em>) ), and you take a subset of those elements H, but you keep the same operation, just restricting its domain to H × H.  This is naturally more like your concrete setting above, because there is a natural \"wider set\" G, and it's reasonable to ask, for h₁, h₂ ∈ H, is h₁</em>  h₂ also in H?</p>\n<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> 's formalization seems to sum things up nicely to me: Given <code>(H : Set G) [Group G] [Group H]</code>, plus the hypothesis that the two *s are compatible, show that the <code>Subgroup</code> criteria are satisfied.  In other words, we already have a <code>Subgroup.toGroup</code> that shows our <code>Subgroup</code> is effectively a <code>Group</code>.  This goes the other direction, showing that a <code>Group H</code> is also a <code>Subgroup</code>.</p>\n<p>But I understand that my arguments don't seem to be convincing the members of this forum, and that's ok, we can agree to disagree.</p>",
        "id": 401833548,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699904660
    },
    {
        "content": "<p>Note that after you construct the <code>Subgroup</code>, your statement <code>H = asSubgroup H</code> will look pretty awkward (coercions). And I don't remember if my construction would make that theorem <code>rfl</code>.</p>",
        "id": 401833660,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699904730
    },
    {
        "content": "<p>(The other thread, with the construction, is <a href=\"#narrow/stream/113489-new-members/topic/Showing.20group.20operation.20is.20closed.20on.20a.20subset.2E\">here</a> for those interested.)</p>",
        "id": 401833894,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699904841
    },
    {
        "content": "<p>Martin, that definition of \"This is naturally more like your concrete setting above, because there is a natural \"wider set\" G, and it's reasonable to ask, for h₁, h₂ ∈ H, is h₁ h₂ also in H?\" is exactly how <code>Subgroup</code> works, you show that even with <code>H x H -&gt; G</code>, all the range is inside H. The whole time, I think you were asking for the other direction.</p>",
        "id": 401833918,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699904862
    },
    {
        "content": "<p>Martin, can you write out, very explicitly, what you think it means to say that \"<code>G</code> is a group, <code>H</code> is a subset of <code>G</code>, and <code>H</code> is a group with the operations inherited from <code>G</code>\"?</p>",
        "id": 401834619,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699905131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> sure, it's what I wrote above, here it is again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSubgroup</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>It translates from your statement, pretty directly, to <code>[Group G] (H : Set G) [Group H]</code> with the added hypothesis <code>h : ∀ x y : H, ((x * y : H) : G) = x * y</code>, where the * on the RHS is understood to be the * in <code>[Group G]</code>.</p>",
        "id": 401835031,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699905333
    },
    {
        "content": "<p>And the <code>toSubgroup</code> function simply takes those 4 Lean objects and returns a <code>Subgroup</code> object.</p>",
        "id": 401835318,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699905458
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one_eq_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_eq_inv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">inv_eq_iff_mul_eq_one.mpr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">one_eq_one</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSubgroup</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">H</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">one_eq_one</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">H</span> <span class=\"n\">using</span> <span class=\"n\">ha</span>\n    <span class=\"n\">lift</span> <span class=\"n\">b</span> <span class=\"n\">to</span> <span class=\"n\">H</span> <span class=\"n\">using</span> <span class=\"n\">hb</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">H</span> <span class=\"n\">using</span> <span class=\"n\">ha</span>\n    <span class=\"n\">exact</span> <span class=\"n\">inv_eq_inv</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 401837238,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699906148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> perfect!</p>",
        "id": 401837706,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699906353
    },
    {
        "content": "<p>Even more fun would be also stating that <code>toSubgroup</code> gives the \"same\" group instance... I don't think it will be defeq, which I think strongly points toward why this isn't done. At least it's not much of a pain to say that <code>toSubgroup h</code> is isomorphic to <code>H</code>.</p>",
        "id": 401837758,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699906383
    },
    {
        "content": "<p>Note that in the above code, the first two lemmas are the only things with mathematical content (if something is a group, then its identity and inverse functions are determined by the multiplication alone). In the latter case, this is basically the existing Mathlib statement <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inv_eq_iff_mul_eq_one#doc\">docs#inv_eq_iff_mul_eq_one</a>. In the former case, this is basically <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=self_eq_mul_right#doc\">docs#self_eq_mul_right</a>, which is hidden in the <code>simpa</code> call.</p>\n<p>However, the <code>toSubgroup</code> declaration then essentially has no mathematical content aside from these two lemas. <code>lift</code> is something you would never write in mathematics.</p>",
        "id": 401837763,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699906385
    },
    {
        "content": "<p>In particular, if you look at the proof of <code>mul_mem'</code>, what you'll see is that saying \"<code>H</code> is closed under multiplication\" is nearly <code>exact</code>ly the same as saying \"<code>H</code> has a multiplication inherited from <code>G</code>\". This is what I meant before when I said \"it's essentially just chasing one's tail.\"</p>",
        "id": 401838696,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699906815
    },
    {
        "content": "<p>I totally agree that the proof, or mathematical content, is minimal.  In LADR, the full proof of the equivalent for subspaces is \"by the definition of vector space.\"</p>",
        "id": 401838845,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699906913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">toSubgroup</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">toSubgroup</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toGroup</span> <span class=\"bp\">=</span> <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Submonoid.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">Subgroup.coe_toSubmonoid</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 401840217,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699907531
    },
    {
        "content": "<p>The entire proof of this in Dummit and Foote's book Abstract Algebra is \"If H is a subgroup of G, then certainly (1) and (2) hold because H contains the identity of G and the inverse of each of its elements and because H is closed under multiplication.\"</p>\n<p>However trivial the proof, both books thought it worth stating.  As a student, it was useful to remember that the conditions in our <code>Subgroup</code> were the only game in town.</p>\n<p>If it's considered too trivial or obvious to include in mathlib, that's fine with me.  That's why the subject of this chat ends with \"if anywhere?\"</p>",
        "id": 401841077,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699907909
    },
    {
        "content": "<p>It's not so much about them being \"too trivial\", but rather that, because they are equivalent, you can't have both. In the first <code>rfl</code> proof above, we see that Lean recognizes <code>H</code> and <code>toSubgroup H</code> as the same type. This is problematic because it means that <code>H</code> can have two <em>definitionally</em> different <code>Group</code> instances (one from the <code>[inst : Group H]</code> variable, and the other from <code>(toSubgroup h).toGroup</code>). This is bad because it leads to goals like the one right before the <code>change</code>, where we're asked to prove <code>Mul.mul x y = Mul.mul x y</code>, but that <em>isn't</em> true by <code>rfl</code>, and this would cause no end of headaches.</p>",
        "id": 401842894,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699908663
    },
    {
        "content": "<p>So, in Mathlib, we pick the one which makes life easy, which is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup#doc\">docs#Subgroup</a>.</p>",
        "id": 401843010,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699908714
    },
    {
        "content": "<p>I think it's worth considering that Dummit and Foote use different foundations from mathlib, and the concepts are organized somewhat differently as a result.</p>\n<p>I'd say that <code>Subgroup</code> is closer to what they mean by a group. A mathlib <code>Group</code> is some ambient universe that all the groups under consideration live as subsets.</p>\n<p>In this setting, you have \"groups\" <code>H H' : Subgroup G</code> along with <code>H ≤ H'</code> meaning \"<code>H</code> is a subgroup of <code>H'</code>.\"</p>\n<p>This makes it much more straightforward to say what you mean by a subset that's a group, without all these typeclass issues that don't have much to do with the mathematics, and that's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSubgroup#doc\">docs#IsSubgroup</a></p>",
        "id": 401843089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699908736
    },
    {
        "content": "<p>Interestingly in <a href=\"https://inria.hal.science/hal-00825074v3/document\">Assia Mahboubi, The Rooster and the Butterflies</a> they use <code>group</code> for what mathlib calls <code>Subgroup</code>. This paper I understand is a strong inspiration for mathlib's design of algebraic objects and subobjects.</p>",
        "id": 401843781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699909021
    },
    {
        "content": "<p>Martin, I think you are misinterpreting Dummit and Foote, and I agreee with Kyle that what D&amp;F call <em>subgroup</em> is very close to Mathlib's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup#doc\">docs#Subgroup</a> (with the exception that they replace <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.one_mem%27#doc\">docs#Subgroup.one_mem'</a> with the subset being nonempty).</p>\n<p>They say:</p>\n<blockquote>\n<p><strong>Definition.</strong> Let <code>G</code> be a grouip. The subset <code>H</code> of <code>G</code> is a <em>subgroup</em> of <code>G</code> if <code>H</code> is nonempty and <code>H</code> is closed under products and inverses (i.e., <code>x ∈ H</code>, <code>y ∈ H</code> implies <code>x⁻¹ ∈ H</code> and <code>x * y ∈ H</code>). If <code>H</code> is a subgroup of <code>G</code>, we shall write <code>H ≤ G</code>.</p>\n<p>Subgroups of <code>G</code> are just subsets of <code>G</code> which are themselves groups with respect to the operation defined on <code>G</code>, i.e., the binary operation on <code>G</code> restricts to give a binary operation on <code>H</code> which is associative, has an identity in <code>H</code>, and has inverses in <code>H</code> for all the elemens of <code>H</code>.\"</p>\n</blockquote>\n<p>The text after the definition says \"the binary operation on <code>G</code> restricts to give a binary operation on <code>H</code>\" which is just another way to say <code>x ∈ H, y ∈ H → x * y ∈ H</code>. And the rest I believe is really more a statement (without proof) of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.toGroup#doc\">docs#Subgroup.toGroup</a> than anything else.</p>\n<p>Note that in the proof of Proposition 1 on the next page, in the second paragraph (where they show that (1) and (2) imply <code>H</code> is a subgroup of <code>G</code>), they show that <code>1 ∈ H</code>, and <code>x ∈ H → x⁻¹ ∈ H</code> and <code>x ∈ H → y ∈ H → x * y ∈ H</code>, which are exactly the conditions in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup#doc\">docs#Subgroup</a>.</p>",
        "id": 401845666,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699909724
    }
]