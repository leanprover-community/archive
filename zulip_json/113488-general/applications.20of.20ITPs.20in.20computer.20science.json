[
    {
        "content": "<p>Hopefully an easy one for some of our readers: I am giving a talk to undergraduate computer scientists in Oxford and I wanted to do just a few lines on applications of ITPs in computer science; so far I have one line: \"there is a formally verified kernel and a formally verified C compiler\". Is that a short but accurate summary of the main achievements of ITPs in the area of \"checking code has no bugs\" (let me stress that \"checking code has no bugs\" is going to be 1 slide of my talk max, I'm talking mostly about SOTA with LLMs + ITPs doing mathematics)</p>",
        "id": 403777802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700741893
    },
    {
        "content": "<p>A striking example is the story of TimSort (my slides on this at <a href=\"https://siddhartha-gadgil.github.io/presentations/o9CompProofAI.html#/11\">https://siddhartha-gadgil.github.io/presentations/o9CompProofAI.html#/11</a>).</p>",
        "id": 403778103,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1700742018
    },
    {
        "content": "<p>To save googling, the source is <a href=\"http://www.envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/\">http://www.envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/</a></p>",
        "id": 403778250,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1700742082
    },
    {
        "content": "<p>I'm not sure to which degree KeY counts as an ITP, though</p>",
        "id": 403779397,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1700742540
    },
    {
        "content": "<p>There's a lot more. Some high-visibility projects off the top of my head:</p>\n<ul>\n<li><a href=\"https://www.fstar-lang.org/index.html#uses\">Evercrypt</a>: verified crypto routines used in Firefox, Linux kernel, ...</li>\n<li><a href=\"https://plv.mpi-sws.org/rustbelt/#project\">Rustbelt</a>: verification of Rust's type system, including <code>unsafe</code> blocks</li>\n<li><a href=\"https://cakeml.org/\">CakeML/Candle</a>: verified Standard ML compiler and HOL Light-style ITP</li>\n</ul>",
        "id": 403779935,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1700742754
    },
    {
        "content": "<p>Evercrypt is a nice example because (anecdotically) it's faster than a manual implementation, because when it's all verified you can do optimization stunts that you wouldn't dare otherwise.  But I should probably find a citation before spreading such rumors :-)</p>",
        "id": 403783984,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700744276
    },
    {
        "content": "<p>How far is Rustbelt from \"it's possible to verify (in some sense) that simple rust programs are correct\"? Is this still a dream away or has this already happened? I know that people can start going on about trusting compilers, chipsets etc etc but I'm talking about something which looks like it's doing the job of proving that an explicit simple program has no bugs. I tried looking at the project webpage but it's all way over my head.</p>",
        "id": 403785276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700744704
    },
    {
        "content": "<p>sel4 the os kernel</p>",
        "id": 403786086,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745003
    },
    {
        "content": "<p>yeah, that and compcert are the two I knew about already (see original post).</p>",
        "id": 403786145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700745027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/applications.20of.20ITPs.20in.20computer.20science/near/403785276\">said</a>:</p>\n<blockquote>\n<p>How far is Rustbelt from \"it's possible to verify (in some sense) that simple rust programs are correct\"? Is this still a dream away or has this already happened? I know that people can start going on about trusting compilers, chipsets etc etc but I'm talking about something which looks like it's doing the job of proving that an explicit simple program has no bugs. I tried looking at the project webpage but it's all way over my head.</p>\n</blockquote>\n<p>I am attending Derek's lecture now. I'll ask and let you know</p>",
        "id": 403786164,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745038
    },
    {
        "content": "<p>There is also Dargent</p>",
        "id": 403786178,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745044
    },
    {
        "content": "<p>There is the fully formal verification of kyber</p>",
        "id": 403786337,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745108
    },
    {
        "content": "<blockquote>\n<p>There is also Dargent</p>\n</blockquote>\n<p>took me to \"Coq d'Argent\" which sounded promising but turned out to be a restaurant in London.</p>",
        "id": 403786343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700745111
    },
    {
        "content": "<p>Not coq</p>",
        "id": 403786387,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745124
    },
    {
        "content": "<p>Isabelle</p>",
        "id": 403786420,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745127
    },
    {
        "content": "<p>Christine Rizkallah et al.</p>",
        "id": 403786433,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745132
    },
    {
        "content": "<p>There are some successes with synthesis too. Check Ilya Sergey's PLDI paper from this year</p>",
        "id": 403786501,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/applications.20of.20ITPs.20in.20computer.20science/near/403786343\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>There is also Dargent</p>\n</blockquote>\n<p>took me to \"Coq d'Argent\" which sounded promising but turned out to be a restaurant in London.</p>\n</blockquote>\n<p><a href=\"https://dl.acm.org/doi/abs/10.1145/3571240\">https://dl.acm.org/doi/abs/10.1145/3571240</a></p>",
        "id": 403787057,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745359
    },
    {
        "content": "<p>Fancy Post Quantum Crypto stuff: <a href=\"https://eprint.iacr.org/2023/215\">https://eprint.iacr.org/2023/215</a></p>",
        "id": 403787190,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700745401
    },
    {
        "content": "<p>proven-correct C code for cryptography generated by <a href=\"https://github.com/mit-plv/fiat-crypto\">Fiat Crypto</a> (Coq library/tool) was integrated into the BoringSSL library used by the Chrome browser</p>",
        "id": 403789656,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1700746323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/applications.20of.20ITPs.20in.20computer.20science/near/403785276\">said</a>:</p>\n<blockquote>\n<p>How far is Rustbelt from \"it's possible to verify (in some sense) that simple rust programs are correct\"?</p>\n</blockquote>\n<p>The original paper has some simple examples, and an unpublished paper has <a href=\"https://gitlab.mpi-sws.org/lgaeher/refinedrust-dev/-/tree/main/rr_frontend/case_studies\">some examples</a> proved using automation on top of Rust Belt.</p>",
        "id": 403789815,
        "sender_full_name": "Leo Stefanesco",
        "timestamp": 1700746380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/113488-general/topic/applications.20of.20ITPs.20in.20computer.20science/near/403778103\">said</a>:</p>\n<blockquote>\n<p>A striking example is the story of TimSort (my slides on this at <a href=\"https://siddhartha-gadgil.github.io/presentations/o9CompProofAI.html#/11\">https://siddhartha-gadgil.github.io/presentations/o9CompProofAI.html#/11</a>).</p>\n</blockquote>\n<p>Does this have to do with Vincent Jugé's work somehow?</p>",
        "id": 403792379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700747298
    },
    {
        "content": "<p>Does python have a spec? Do people work on questions such \"assume python conforms to its spec. Then the following code has no bugs\"?</p>",
        "id": 403805714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700751644
    },
    {
        "content": "<p>The answer from Derek was that rustbelt was focussed on proving the safety of rust APIs where it was non trivial to establish such properties. The work to scale those to full programs with suitable automation is ongoing</p>",
        "id": 403807329,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700752212
    },
    {
        "content": "<p>I think someone verified Scala’s type system in Coq to make sure it was correct.</p>",
        "id": 403807728,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700752360
    },
    {
        "content": "<p>But he also said that they have infact verified \"non-trivial\" programs for some suitable definition of non-triviality.</p>",
        "id": 403808087,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700752488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/applications.20of.20ITPs.20in.20computer.20science/near/403805714\">said</a>:</p>\n<blockquote>\n<p>Does python have a spec? Do people work on questions such \"assume python conforms to its spec. Then the following code has no bugs\"?</p>\n</blockquote>\n<p>I'm not aware of any work on Python specifically. People tend to focus on C (because that's what safety-critical applications actually use) or functional languages (because they're nice).</p>",
        "id": 403809190,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1700752884
    },
    {
        "content": "<p>I think Java also has a specification, but I’m not an expert.  I get the impression that Python is really hard to specify.</p>",
        "id": 403812220,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700753991
    },
    {
        "content": "<p>I just realized that you might potentially not have come across the common intro line for ITP papers in CS . It is usually some variant of  </p>\n<p>\"Model checkers and sat solvers might allow you to verify complex properties automatically, but they suffer from two problems: State space explosion, and the need to contort the spec to fit the decidability and complexity limits of the model checkers. ITPs overcome these issues and allow us to express specs more naturally at the cost of manual proving\". This is a semi-correct claim that I have seen in enough paper intros to remember it.</p>",
        "id": 403812994,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700754281
    },
    {
        "content": "<p>Semi-correct because you can certainly generate super large terms for the type checker to check, and ITP users do have the challenge of picking the right fornalism for their definitions and theorems, to simplify proofs</p>",
        "id": 403813671,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700754567
    },
    {
        "content": "<p>Wasn't this paper a spec for Python? <a href=\"https://cs.brown.edu/~sk/Publications/Papers/Published/pmmwplck-python-full-monty/\">https://cs.brown.edu/~sk/Publications/Papers/Published/pmmwplck-python-full-monty/</a></p>",
        "id": 403816351,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1700755542
    },
    {
        "content": "<p>There's very exciting work that uses EasyCrypt and Jasmin together to produce verifiably secure and correct fast assembly implementations</p>",
        "id": 403824407,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700759134
    },
    {
        "content": "<p><a href=\"https://blog.cloudflare.com/post-quantum-easycrypt-jasmin/\">https://blog.cloudflare.com/post-quantum-easycrypt-jasmin/</a></p>",
        "id": 403824539,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700759183
    },
    {
        "content": "<p>This is an accessible post on the subject that cites close to current literature</p>",
        "id": 403824583,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700759204
    },
    {
        "content": "<p>EasyCrypt in particular is essentially a specialised ITP I believe</p>",
        "id": 403824650,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700759234
    },
    {
        "content": "<p>I have myself used Galois's Cryptol/SAW toolchain in the past and it is good though not I think the focus of their current work. I think they are currently doing some stuff with Coq (they were looking at Lean but I think that dalliance petered out). Galois do good work in this area in general.</p>",
        "id": 403824938,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700759365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/applications.20of.20ITPs.20in.20computer.20science/near/403807728\">said</a>:</p>\n<blockquote>\n<p>I think someone verified Scala’s type system in Coq to make sure it was correct.</p>\n</blockquote>\n<p>There is a formalization in Coq of Scala's foundation, the DOT calculus, here:<a href=\"https://github.com/Blaisorblade/dot-iris\">https://github.com/Blaisorblade/dot-iris</a></p>",
        "id": 403857785,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1700775919
    }
]