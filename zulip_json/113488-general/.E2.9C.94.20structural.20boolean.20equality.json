[
    {
        "content": "<p>is structural equality of inductive types (specifically boolean equality) something that needs to be derived for each defined type manually? Is there some way to automatically do this for all defined inductive types?</p>",
        "id": 368656685,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687457797
    },
    {
        "content": "<p>Can you give an example of what you mean? My answer to my interpretation of your question would be that structural equality of inductive types was unprovable and undisprovable in Lean, but maybe I misunderstood.</p>",
        "id": 368657996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687458117
    },
    {
        "content": "<p>Do you mean something other than <code>deriving BEq</code>?</p>",
        "id": 368658077,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687458128
    },
    {
        "content": "<p>yeah, rather than manually deriving <code>BEq</code>. I'm curious about what scenarios would call for <em>not</em> having this derivation, and why it's a manual step rather than something that is automatically done.<br>\nI just meant when you have <code>inductive X where | A | B</code> you can say<code>A == A</code> and <code>A != B</code></p>",
        "id": 368659074,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687458383
    },
    {
        "content": "<p>Lean's BEq is so powerful that you can instead say <code>A == B</code> and <code>A != A</code> and maybe the devs want people to be able to have that flexibility? (isn't that what Float looks like in some edge cases?) Maybe you want <code>LawfulBEq</code>?</p>",
        "id": 368659794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687458553
    },
    {
        "content": "<p>Hm, that kind of makes sense. Can you give an example of where that would be the case?</p>",
        "id": 368664199,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687459738
    },
    {
        "content": "<p>Not every type has a derivable <code>BEq</code> (for example, what if one of the constructors has a <code>Nat -&gt; Bool</code> field? There's no way to check if two such functions are equal). You might also want to implement your own <code>BEq</code> because it has better run-time characteristics than whatever the derived one might be.</p>",
        "id": 368666055,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687460228
    },
    {
        "content": "<p>This is true for <code>deriving DecidableEq</code> too, if we want to ignore non-lawful <code>BEq</code></p>",
        "id": 368666371,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687460295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"578936\">Bhakti Shah</span> has marked this topic as resolved.</p>",
        "id": 368696467,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687468716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"578936\">Bhakti Shah</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20structural.20boolean.20equality/near/368664199\">said</a>:</p>\n<blockquote>\n<p>Hm, that kind of makes sense. Can you give an example of where that would be the case?</p>\n</blockquote>\n<p>For <code>Float</code> (which is an <a href=\"https://en.wikipedia.org/wiki/IEEE_754\">IEE 754</a> double-precision float i.e. <code>double</code> in C), <code>NaN != NaN</code> (even for the same representation of <code>NaN</code>). Also, <code>-0 == 0</code>, despite them being representationally distinct.</p>",
        "id": 372717250,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688592567
    }
]