[
    {
        "content": "<p>I am still struggling with my type Sigma1</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n<span class=\"kn\">open</span> <span class=\"n\">Sigma1</span>\n</code></pre></div>\n<p>I now learnt how to derive fintype, but I also would like to print it. Actually I would like to print:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">word</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">++</span><span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>because I don't like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>so I tried to say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive fintype,derive has_repr]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Sigma1</span>\n<span class=\"kn\">open</span> <span class=\"n\">Sigma1</span>\n</code></pre></div>\n<p>but this doesn't work. It seems to know how to print lists of printable things though.</p>",
        "id": 324335874,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1674931298
    },
    {
        "content": "<p>This should work, but I'm not sure because the computer I'm at right now doesn't have Lean. Maybe there's a better way with a <code>derive</code> but I don't know it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">Sigma1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sigma1.a</span> <span class=\"o\">:=</span> <span class=\"s2\">\"a\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sigma1.b</span> <span class=\"o\">:=</span> <span class=\"s2\">\"b\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sigma1.c</span> <span class=\"o\">:=</span> <span class=\"s2\">\"c\"</span>\n    <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 324341371,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674934370
    },
    {
        "content": "<p>Thank you - this is helpful. But I was hoping for an automatic method.</p>",
        "id": 324341936,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1674934724
    },
    {
        "content": "<p>I can't seem to get it to derive the fintype instance. What are your imports?</p>",
        "id": 324343612,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674935951
    },
    {
        "content": "<p><code>tactic.derive_fintype</code> maybe?</p>",
        "id": 324344603,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674936693
    },
    {
        "content": "<p><code>import tactic</code> worked for me in the other thread</p>",
        "id": 324359373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674948307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113488-general/topic/printing.20enumerations/near/324341936\">said</a>:</p>\n<blockquote>\n<p>Thank you - this is helpful. But I was hoping for an automatic method.</p>\n</blockquote>\n<p>Sounds like a great excuse to learn to write metaprograms :)</p>",
        "id": 324412257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674988013
    },
    {
        "content": "<p>I would discourage learning how to write metaprograms in lean 3 though because the story is different in lean 4 and migration is happening</p>",
        "id": 324413937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674988920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/printing.20enumerations/near/324413937\">said</a>:</p>\n<blockquote>\n<p>I would discourage learning how to write metaprograms in lean 3 though because the story is different in lean 4 and migration is happening</p>\n</blockquote>\n<p>Is there any advice how to write this metaprogram in lean4? It should actually work for any algebraic datatype (no constructors with function arguments).</p>",
        "id": 324752836,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675104565
    },
    {
        "content": "<p>In Lean 4 <code>deriving Repr</code> works already, sorry <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 324753466,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675104787
    },
    {
        "content": "<p>How can I put my toes in the lean4 water but I am still able to revert to lean3 if I don't like it?</p>",
        "id": 324753958,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675104935
    },
    {
        "content": "<p>the lean 4 and lean 3 extensions coexist, the <code>lean-toolchain</code> file determines which one your project is</p>",
        "id": 324754141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675104991
    },
    {
        "content": "<p>The only reason I made the comment was that the type theories of Lean 3 and Lean 4 are identical, but the metaprogramming set-ups are completely different, so whilst learning Lean's type theory via Lean 3 is a great idea, learning how to write tactics in Lean 3 is a dead end now.</p>",
        "id": 324756540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675105792
    }
]