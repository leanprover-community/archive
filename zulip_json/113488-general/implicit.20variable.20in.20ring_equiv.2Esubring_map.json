[
    {
        "content": "<p>I don't understand why the subring variable <code>{s}</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingEquiv.subringMap#doc\">docs#RingEquiv.subringMap</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv.subring_map\">docs3#ring_equiv.subring_map</a> is implicit. To me, it seems that the idea of this <code>def</code> is that I have a ring equivalence <code>f : S -&gt; R</code> and an explicit subring <code>s</code> of <code>S</code> and I create <code>f.subring_map s</code>.</p>",
        "id": 368260486,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687358247
    },
    {
        "content": "<p>I think the idea is that your have an <code>x : s</code> and let lean infer <code>s</code></p>",
        "id": 368268644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687359643
    },
    {
        "content": "<p>So you can write <code>e.subring_map x</code></p>",
        "id": 368268689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687359656
    },
    {
        "content": "<p>The nice thing about Lean 4 is that we now have the <code>e.subring_map (s := s)</code> syntax, so that we can (modulo a few extra characters) refer to the unapplied map itself. I think we should opt for implicit arguments in cases like these where we will often be applying the result to an element so that Lean can infer the type. In Lean 3 I may have preferred explicit arguments because we would have to write <code>@</code> to get the map itself if there wasn't enough context to infer <code>s</code>.</p>",
        "id": 368285240,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687362596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Did you mean <code>e.subring_map x</code>?</p>",
        "id": 368288491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687363173
    },
    {
        "content": "<p>Oh, sure, I see. Thanks!</p>",
        "id": 368297578,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687364927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as resolved.</p>",
        "id": 368297689,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687364947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20implicit.20variable.20in.20ring_equiv.2Esubring_map/near/368268644\">said</a>:</p>\n<blockquote>\n<p>I think the idea is that your have an <code>x : s</code> and let lean infer <code>s</code></p>\n</blockquote>\n<p>To be clear, I'm not saying this is necessarily the right choice, just that it seems to be the one that was made in the past.</p>",
        "id": 368303185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687366187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as unresolved.</p>",
        "id": 368376174,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687387515
    },
    {
        "content": "<p>As a matter of fact, I have been thinking about this a bit more and I am not sure I am still convinced. In my experience, when we have a <em>function</em> <code>f</code> we are happy to write <code>f x</code> but when one is after an equivalence in some proof, this is typically in order to prove either that such an equivalence exists (to show that two things are isomorphic), or may be to invert it, or the like. At any rate, one is often more interested in the equivalence as a gadget that something that is meant to be evaluated. So I would advocate for marking <code>s</code> explicit and possibly to add a <code>RingEquiv.subringMap_apply</code> (if I got the camel right... <span aria-label=\"camel\" class=\"emoji emoji-1f42b\" role=\"img\" title=\"camel\">:camel:</span> ) where the subring is implicit and the element is explicit, so that the subring gets inferred by it.</p>",
        "id": 368376722,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687387823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/implicit.20variable.20in.20ring_equiv.2Esubring_map/near/368285240\">said</a>:</p>\n<blockquote>\n<p>The nice thing about Lean 4 is that we now have the <code>e.subring_map (s := s)</code> syntax, so that we can (modulo a few extra characters) refer to the unapplied map itself. I think we should opt for implicit arguments in cases like these where we will often be applying the result to an element so that Lean can infer the type. In Lean 3 I may have preferred explicit arguments because we would have to write <code>@</code> to get the map itself if there wasn't enough context to infer <code>s</code>.</p>\n</blockquote>\n<p>Good point, but I think that (see my message above) most of the time the \"unapplied\"  equivalence is what shows up, while \"unapplied functions\" are indeed rare, and I understand both the (old) <code>@</code> use or the new <code>(s := s)</code> in such rare cases.</p>",
        "id": 368377028,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1687387991
    },
    {
        "content": "<p>Hmmm... yes, it would be interesting to have a collection of examples to see which is more common.</p>",
        "id": 368379485,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687389313
    }
]