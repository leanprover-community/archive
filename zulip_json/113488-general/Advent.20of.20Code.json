[
    {
        "content": "<p><a href=\"http://adventofcode.com\" target=\"_blank\" title=\"http://adventofcode.com\">adventofcode.com</a> in Lean?</p>",
        "id": 150682850,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543669230
    },
    {
        "content": "<p>Does anyone know how to use Lean to read a file from disk, and get a <code>list int</code> if each line looks like an integer?</p>",
        "id": 150683859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543671246
    },
    {
        "content": "<p>I just pasted into lean file! But that's a better idea!</p>",
        "id": 150683922,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543671396
    },
    {
        "content": "<p>I thought about pasting, but I guess that's not a reasonable strategy if you want to do all 50 puzzles</p>",
        "id": 150683931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543671429
    },
    {
        "content": "<p>And someone needs to write a IO monad howto anyway</p>",
        "id": 150683932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543671446
    },
    {
        "content": "<p>I completed it but I used <code>meta</code>. I feel dirty.</p>",
        "id": 150684498,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543672615
    },
    {
        "content": "<p>Did you use IO?</p>",
        "id": 150684511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543672644
    },
    {
        "content": "<p>nope</p>",
        "id": 150684515,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543672653
    },
    {
        "content": "<p>Would you know how to read from a file?</p>",
        "id": 150684561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543672684
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">parser</span>\n\n<span class=\"n\">def</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">many_char1</span> <span class=\"o\">(</span><span class=\"n\">sat</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"err\">&#39;</span><span class=\"mi\">0</span><span class=\"err\">&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"err\">&#39;</span><span class=\"mi\">9</span><span class=\"err\">&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">signed_number</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ch</span> <span class=\"err\">&#39;</span><span class=\"bp\">+</span><span class=\"err\">&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">number</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">ch</span> <span class=\"err\">&#39;</span><span class=\"bp\">-</span><span class=\"err\">&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">number</span><span class=\"o\">)</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"err\">$</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read_file</span> <span class=\"s2\">&quot;dat.txt&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">signed_number</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"err\">&#39;\\</span><span class=\"n\">n&#39;</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">l</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>[13,\n -(2+1),\n -(7+1),\n 14,\n 16,\n -(6+1),\n 3,\n -(6+1),\n 9,\n -(9+1),\n 16,\n...\n</pre></div>",
        "id": 150684565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543672696
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> knows the correct way to call IO from <code>run_cmd</code>, but <code>unsafe_run_io</code> works in a pinch</p>",
        "id": 150684582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543672752
    },
    {
        "content": "<p>I think you can use <code>#eval</code></p>",
        "id": 150684636,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1543672833
    },
    {
        "content": "<p>oh, I should have used <code>to_string</code>, the output is much nicer</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n\n<span class=\"n\">def</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">many_char1</span> <span class=\"o\">(</span><span class=\"n\">sat</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"err\">&#39;</span><span class=\"mi\">0</span><span class=\"err\">&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"err\">&#39;</span><span class=\"mi\">9</span><span class=\"err\">&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">signed_number</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ch</span> <span class=\"err\">&#39;</span><span class=\"bp\">+</span><span class=\"err\">&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">number</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">ch</span> <span class=\"err\">&#39;</span><span class=\"bp\">-</span><span class=\"err\">&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">number</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read_file</span> <span class=\"s2\">&quot;dat.txt&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">signed_number</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"err\">&#39;\\</span><span class=\"n\">n&#39;</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>[13, -3, -8, 14, 16, -7, 3, -7, 9, -10, 16, 13, 12, 12, 4, 19, -2, -5, -15, -2, -13, -11, -13, -2, ...\n</pre></div>",
        "id": 150684702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543672990
    },
    {
        "content": "<p>For some reason the output or return value of the io is ignored, so I had to to a hack with <code>trace</code> to get it to print</p>",
        "id": 150684754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543673113
    },
    {
        "content": "<p>Thanks Mario! It allowed to complete Day 1, adding only 15 characters to your code :)</p>",
        "id": 150684902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543673422
    },
    {
        "content": "<p>Did you do the second part?</p>",
        "id": 150684972,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543673572
    },
    {
        "content": "<p>here's how I did the first part in lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">0</span>\n<span class=\"bp\">+</span><span class=\"mi\">13</span>\n<span class=\"bp\">-</span><span class=\"mi\">3</span>\n<span class=\"bp\">-</span><span class=\"mi\">8</span>\n<span class=\"bp\">+</span><span class=\"mi\">14</span>\n<span class=\"bp\">+</span><span class=\"mi\">16</span>\n</pre></div>",
        "id": 150685393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543674459
    },
    {
        "content": "<p>No, I decided I should stop distractions for a while. And also the question looked masochistic to do in functional rather than imperative language</p>",
        "id": 150686187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543675969
    },
    {
        "content": "<p>Mario, was that all your input?</p>",
        "id": 150686195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543675986
    },
    {
        "content": "<p>I had to use <code>#eval (0 : int)</code> since the first line of the input was negative.</p>",
        "id": 150687782,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543679398
    },
    {
        "content": "<p>I solved it too. But my solution took 40 seconds to run</p>",
        "id": 150703402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543712093
    },
    {
        "content": "<p>The first part, I mean</p>",
        "id": 150703410,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543712135
    },
    {
        "content": "<p>Doing the second part in non-meta Lean seems pretty interesting</p>",
        "id": 150703754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543712783
    },
    {
        "content": "<p>I think this is a good test case for the conventional programming capabilities of lean. Here's my solution for day 2 pt 1:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">meta</span><span class=\"bp\">.</span><span class=\"n\">rb_map</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n\n<span class=\"n\">def</span> <span class=\"n\">letter</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">char</span> <span class=\"o\">:=</span>\n<span class=\"n\">sat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"err\">&#39;</span><span class=\"n\">a&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"err\">&#39;</span><span class=\"n\">z&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">count1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">lt</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">lt</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">rbmap</span> <span class=\"n\">α</span> <span class=\"bp\">ℕ</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rbmap</span> <span class=\"n\">α</span> <span class=\"bp\">ℕ</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span>\n<span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"k\">match</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">get_counts</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">count1</span> <span class=\"o\">(</span><span class=\"n\">mk_rbmap</span> <span class=\"n\">char</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"k\">in</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">r₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">r₁</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">r₂</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read_file</span> <span class=\"s2\">&quot;dat.txt&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">ls</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"n\">letter</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"err\">&#39;\\</span><span class=\"n\">n&#39;</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ls</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">get_counts</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unzip</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">tt</span> <span class=\"bp\">*</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">tt</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span>\n</pre></div>",
        "id": 150715253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543738662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  As for doing the day 1 pt 2 in non-meta lean, it was obviously intended to have a solution with unbounded iteration, and it is possible to have such a program never halt on some inputs. With some significant additional work you can actually decide whether an input will halt (by looking at whether the numbers are all distinct mod the period), and so you could get a fully correct non-meta lean solution that way (which is even better than the naive algorithm because it will tell you when the infinite stream has no duplicates).</p>\n<p>But if you just want the easy solution, the simplest approach is just to have a depth limiter, and increase it until you get the answer.</p>",
        "id": 150715398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543738984
    },
    {
        "content": "<p>To avoid spamming the chat I won't report daily, but I think I will take up this challenge. Follow along at <a href=\"https://github.com/digama0/advent-of-code\" target=\"_blank\" title=\"https://github.com/digama0/advent-of-code\">https://github.com/digama0/advent-of-code</a> (spoiler alert)</p>",
        "id": 150794896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543866302
    },
    {
        "content": "<p>On part day 1 part 2, I believe you can show that the search terminates if two elements of your list are equal mod (answer to part 1). So I started coding up a non-meta algorithm but then I realized it would sap away my entire Saturday so I stopped.</p>",
        "id": 150837825,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543920340
    },
    {
        "content": "<p>Did you see my solution?</p>",
        "id": 150837987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543920489
    },
    {
        "content": "<p>I did that algorithm</p>",
        "id": 150837992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543920500
    },
    {
        "content": "<p>and it did sap a good chunk of my day ;)</p>",
        "id": 150838001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543920523
    },
    {
        "content": "<p>you can actually do a bit better than producing a proof of well foundedness to run the search... when two values have the same mod the period, you find the least difference of divs, and that's where the search will terminate (so you can do the whole thing without actually running those passes)</p>",
        "id": 150838140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543920700
    },
    {
        "content": "<p>Yeah that's how I was going to do it.</p>",
        "id": 150838882,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543921406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks for sharing your solutions. There are still lots of language/mathlib features I am neglecting! Eg <code>withtop</code></p>",
        "id": 150839362,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543921830
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  in the parsers for numbers and letters you can use <code>sat $ char.is_lower</code> and <code>char.is_digit</code> instead of manually checking the char.</p>",
        "id": 150841457,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543924361
    },
    {
        "content": "<p>oh, lovely</p>",
        "id": 150841473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543924399
    },
    {
        "content": "<p>I'm hoping that the conventional programming capabilities of lean will be boosted by these attempts</p>",
        "id": 150841529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543924444
    }
]