[
    {
        "content": "<p>I've just been ignoring the existence of <code>Std</code> and <code>Lean</code> as two separate entities so far but it has come back to torment me. What's the difference between a library <code>Std.x</code> and <code>Lean.x</code>? I'm sure this is something really dumb but I can't figure it out. This is the error that led me here (surprisingly have not run into this before, the function <code>List.toAssocList</code> seems to be the one causing it):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">List.toAssocList</span> <span class=\"o\">(</span><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">m.6177</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AssocList.toList</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Std.AssocList</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">AssocList</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the field I'm assigning to has type <code>AssocList α β</code> <br>\n<code>Std.Data.AssocList</code> is the module imported; been looking <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/AssocList.html#Std.AssocList\">here</a> for documentation and the <a href=\"https://github.com/leanprover/std4/blob/e68aa8f5fe47aad78987df45f99094afbcb5e936/Std/Data/AssocList.lean#L230-L232\">source</a> seems to use just <code>AssocList α β</code> as the type so I'm unsure where the <code>Std</code> is coming from .</p>",
        "id": 369837219,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687814292
    },
    {
        "content": "<p>The problem is that there are two separate-but-identical definitions of <code>AssocList</code>, <code>Lean.AssocList</code> in core and <code>Std.AssocList</code> in Std4!</p>",
        "id": 369840068,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687815335
    },
    {
        "content": "<p>The function <code>List.toAssocList</code> is provided in Std, so it refers to the Std version.</p>",
        "id": 369840168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687815368
    },
    {
        "content": "<p>I suspect that this is intentional: the data structures used in core Lean4 are intended for internal consumption only, for the most part.</p>\n<p>At the very least there are some missing functions converting between <code>Std.AssocList</code> and <code>Lean.AssocList</code>, that should be in the Std file.</p>",
        "id": 369840515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687815535
    },
    {
        "content": "<p>It seems like a bug if you are using both kinds of <code>AssocList</code></p>",
        "id": 369840684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687815598
    },
    {
        "content": "<p>Writing a conversion would not be hard but it is much more likely that this is the result of a typo / incorrect <code>open</code></p>",
        "id": 369840809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687815634
    },
    {
        "content": "<p>Possibly true. Certainly one can imagine a situation where one <em>needs</em> a <code>Lean.AssocList</code> to pass into some Lean 4 core plumbing function, but one <em>wants</em> to work with <code>Std.AssocList</code> so there is a richer API available to manipulate them.</p>",
        "id": 369840886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687815664
    },
    {
        "content": "<p>you can also compose <code>List.toAssocList</code> and <code>Lean.AssocList.toList</code></p>",
        "id": 369840967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687815697
    },
    {
        "content": "<p>It's pretty weird to even be using <code>AssocList</code> directly</p>",
        "id": 369841088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687815738
    },
    {
        "content": "<p>it's mainly intended as an implementation detail of <code>HashMap</code>, although it has some useful lookup-like functions</p>",
        "id": 369841147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687815769
    },
    {
        "content": "<p>Ah i think i see what's happening -- i want to be working with <code>Std.AssocList</code> but i had an <code>open Lean</code> from before and totally didn't know that the std library also had an AssocList. I think I just want all my uses of AssocList to be prefixed with Std. That was less convoluted than i thought it would be</p>",
        "id": 369841256,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687815821
    },
    {
        "content": "<p>i'm only using <code>AssocList</code> as a part of a custom map because i can't actually use <code>HashMap</code>as I can't define a valid hash function on my type (it would require a mutually inductive datatype and function definition which Lean doesn't support)</p>",
        "id": 369841425,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687815898
    },
    {
        "content": "<p>so in terms of, say, just a list, or just anything in the standard library, would i want to be using the version in <code>Lean</code> or in <code>Std</code>? I've been assuming <code>open Lean</code> was how to open the namespace for the stdlib but im guessing i want to do <code>open Std</code> instead? and never use <code>open Lean</code> (unless im developing lean obviously). Does that all track or did i get something wrong?</p>",
        "id": 369841793,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687816084
    },
    {
        "content": "<p>I would not open anything at all until you get sick of writing <code>foo.blah</code> , <code>foo.bar</code> etc etc, and then I'd give up and open <code>foo</code>.</p>",
        "id": 369841982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687816153
    },
    {
        "content": "<p>Yes, never <code>open Lean</code> unless you are writing meta code.</p>",
        "id": 369842041,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687816183
    },
    {
        "content": "<p>And even then, often <code>open Lean Elab Meta in ...</code> is a good choice.</p>",
        "id": 369842064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687816196
    },
    {
        "content": "<p>thanks guys!</p>",
        "id": 369843184,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1687816715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"578936\">Bhakti Shah</span> has marked this topic as resolved.</p>",
        "id": 369844264,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687817187
    },
    {
        "content": "<p>(No need to mark topics as resolved. Zulip provides the mechanism, but it doesn't work well and we'd prefer it didn't exist.)</p>",
        "id": 369852255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687821451
    },
    {
        "content": "<p>Can't admins turn off this feature. I don't see the option to resolve topics in the zulipchats of coq or Isabelle.</p>",
        "id": 369961386,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687854784
    },
    {
        "content": "<p>Do you have the ability to edit topics in those chats?</p>",
        "id": 369962955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687855098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Std.20vs.20Lean/near/369962955\">said</a>:</p>\n<blockquote>\n<p>Do you have the ability to edit topics in those chats?</p>\n</blockquote>\n<p>Nope</p>",
        "id": 369963057,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687855120
    },
    {
        "content": "<p><a href=\"https://leanprover.zulipchat.com/help/resolve-a-topic\">https://leanprover.zulipchat.com/help/resolve-a-topic</a></p>\n<blockquote>\n<p>Users can resolve and unresolve a topic if they have permission to edit topics. Organization administrators can configure who can edit topics.</p>\n</blockquote>",
        "id": 369963124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687855135
    },
    {
        "content": "<p>I don't think we want to disable that</p>",
        "id": 369963213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687855148
    }
]