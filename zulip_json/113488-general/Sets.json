[
    {
        "content": "<p>Why is <code>Set ℤ</code> needed here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">x₃</span>\n          <span class=\"n\">x₄</span> <span class=\"n\">x₅</span> <span class=\"n\">x₆</span>\n          <span class=\"n\">x₇</span> <span class=\"n\">x₈</span> <span class=\"n\">x₉</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₃</span><span class=\"o\">,</span>\n                      <span class=\"n\">x₄</span><span class=\"o\">,</span> <span class=\"n\">x₅</span><span class=\"o\">,</span> <span class=\"n\">x₆</span><span class=\"o\">,</span>\n                      <span class=\"n\">x₇</span><span class=\"o\">,</span> <span class=\"n\">x₈</span><span class=\"o\">,</span> <span class=\"n\">x₉</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If I replace <code>Set ℤ</code> with <code>_</code> I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Insert</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.270</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why is this? Is there a better way to create this statement? I want to state something which holds for each of the variables.</p>",
        "id": 375737947,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1689508602
    },
    {
        "content": "<p>Without <code>Set ℤ</code> lean doesn't know whether you mean <code>Set</code> or <code>Finset</code></p>",
        "id": 375739121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689508909
    },
    {
        "content": "<p>Its because all of the notation that you have here is generic. The element of notation can for example also be used for lists and the collection notation could also be used for collections other than mathematical sets (like say HashSets) so Lean cannot know without you telling it that you actually mean a mathematical set here.</p>\n<p>For an alternative way you could always use a list and fold over that I guess? But the actual mathlib users might have a better idea</p>",
        "id": 375739124,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689508910
    },
    {
        "content": "<p>Ah this does work indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₃</span><span class=\"o\">,</span>\n                     <span class=\"n\">x₄</span><span class=\"o\">,</span> <span class=\"n\">x₅</span><span class=\"o\">,</span> <span class=\"n\">x₆</span><span class=\"o\">,</span>\n                     <span class=\"n\">x₇</span><span class=\"o\">,</span> <span class=\"n\">x₈</span><span class=\"o\">,</span> <span class=\"n\">x₉</span> <span class=\"o\">]</span>  <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 375741171,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1689509405
    },
    {
        "content": "<p>What's the problem with your original version?</p>",
        "id": 375751421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689512561
    },
    {
        "content": "<p>It is more verbose with the Set Z.</p>",
        "id": 375754553,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1689513508
    },
    {
        "content": "<p>Sure, but it's probably easier to prove things about</p>",
        "id": 375758839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689514693
    }
]