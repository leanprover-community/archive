[
    {
        "content": "<p>I'm getting a <code>simpNF</code> linter error on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5834\">#5834</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.RingTheory.AlgebraicIndependent</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicIndependent.lean</span><span class=\"o\">:</span><span class=\"mi\">428</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">AlgebraicIndependent.mvPolynomialOptionEquivPolynomialAdjoin_apply.</span><span class=\"o\">{</span><span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">LINTER</span> <span class=\"n\">FAILED</span><span class=\"o\">:</span>\n<span class=\"n\">simplify</span> <span class=\"n\">fails</span> <span class=\"n\">on</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">CommMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The statement of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicIndependent.mvPolynomialOptionEquivPolynomialAdjoin_apply#doc\">docs#AlgebraicIndependent.mvPolynomialOptionEquivPolynomialAdjoin_apply</a> doesn't involve <code>Polynomial (MvPolynomial ι R)</code> but I suppose that arises from an attempt at <code>simp</code>ing?</p>\n<p>The thing that I really don't understand is that this search also times out on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">AlgebraicIndependent</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">CommMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>(It requires <code>set_option synthInstance.maxHeartbeats 60000</code> approximately to not time out.)</p>",
        "id": 378442818,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690285625
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>it looks like applying an <code>IsDomain</code> instance to <code>Polynomial (MvPolynomial ι R)</code> always takes at least half a second of unification:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">612743</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">612692</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">≟</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">?</span><span class=\"n\">m.7460</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">612139</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">?</span><span class=\"n\">m.7460</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000033</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.7460</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">611988</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000013</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">?</span><span class=\"n\">m.7460</span>\n        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000007</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">?</span><span class=\"n\">m.7460</span>\n</code></pre></div>\n<p>and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5834\">#5834</a> adds a new instance <code>IsDedekindDomain.toIsDomain</code> which adds to the search time. The search was already timing out so that is not a problem, right?</p>",
        "id": 378444809,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690286026
    },
    {
        "content": "<p>Maybe I should try merging <a href=\"https://github.com/leanprover-community/mathlib4/pull/5959\">#5959</a> and see if that makes things work better?</p>",
        "id": 378445045,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690286061
    },
    {
        "content": "<p>Nope, doesn't seem to help. Does anyone want to help debugging this?</p>",
        "id": 378494503,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690294940
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.Meta.getInstancePriority</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">CommGroupWithZero.toCommMonoidWithZero</span> <span class=\"c1\">-- 1000</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Meta.getInstancePriority</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">LinearOrderedCommMonoidWithZero.toCommMonoidWithZero</span> <span class=\"c1\">-- 1000</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Meta.getInstancePriority</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">CancelCommMonoidWithZero.toCommMonoidWithZero</span> <span class=\"c1\">-- 1000</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Meta.getInstancePriority</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">CommSemiring.toCommMonoidWithZero</span> <span class=\"c1\">-- 100 (not 1000)</span>\n</code></pre></div>\n<p>These instances like <code>LinearOrderedCommMonoidWithZero.toCommMonoidWithZero</code> always apply and should have low priority; however the only time that a priority is lowered is the one instance which you want, so Lean goes on several wild goose chases before finding the right path.</p>\n<p>A cheap trick would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1001</span><span class=\"o\">]</span> <span class=\"n\">CommSemiring.toCommMonoidWithZero</span> <span class=\"k\">in</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">CommMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>and a perhaps more principled approach would be to globally lower the priority of all those other 1000 instances (perhaps to slightly less than 100 ;-) )</p>",
        "id": 378517081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690298639
    },
    {
        "content": "<p>Didn't this regression in setting priority of <code>extends</code> recently get fixed?</p>\n<p>In any case, I'm hesitant to make this change globally, since <code>CommSemiring</code> has a whole bunch of the instance hierarchy above it so it would certainly fail slower in many cases... I'd much prefer to speed up the <code>isDefEq</code> check on <code>IsDomain (Polynomial (MvPolynomial ι R)) =?= IsDomain ?m.7460</code>.</p>",
        "id": 378526490,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690300280
    },
    {
        "content": "<p>regression fixed: not as far as I know. I was trying to minimise something recently so was looking through a bunch of low-level mathlib files and it seems to me that instance priorities are right now a chaotic mess in places. The example above is a case in point I guess. </p>\n<p>Global change: but I only changed it in one example! You say it would fail slower in many cases but I'm not sure I know a single example of a CommMonoidWithZero which isn't also a semiring, so I think priority 1001 is not so unreasonable :-)</p>\n<p>More seriously: here is the issue with speeding up the <code>isDefEq</code> check in <code>IsDomain</code>. Here are some of the wild goose chases which Lean goes on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">241757</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">150206</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">DivisionRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">147619</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">327188</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span>\n                    <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>That's pretty costly, it's a second trying to prove something which is obviously nonsense :-( The first of these unfolds to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">241757</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Field.isDomain</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">241730</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">≟</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">?</span><span class=\"n\">m.14627</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">241512</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">?</span><span class=\"n\">m.14627</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>so it kind of looks like an easy problem: all Lean has to do is to set <code>?m.14627 = Polynomial (MvPolynomial ι R)</code> and we're done. But this won't do because <code>Field.isDomain</code> won't apply of course. However Lean spends ages unfolding the definition of the ring structure on <code>Polynomial (MvPolynomial ι R))</code> anyway, and because the definition is convoluted we end up with goals like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                                                                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">037176</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CommRing.toRing.1.1.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">Function.Injective.subNegMonoid</span> <span class=\"n\">Polynomial.toFinsupp</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">Polynomial.toFinsupp</span><span class=\"o\">)</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">toFinsupp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n                                                                              <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinsupp</span> <span class=\"bp\">=</span>\n                                                                                <span class=\"n\">a.toFinsupp</span> <span class=\"bp\">+</span> <span class=\"n\">b.toFinsupp</span><span class=\"o\">)</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n                                                                              <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinsupp</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a.toFinsupp</span><span class=\"o\">)</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n                                                                              <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinsupp</span> <span class=\"bp\">=</span>\n                                                                                <span class=\"n\">a.toFinsupp</span> <span class=\"bp\">-</span> <span class=\"n\">b.toFinsupp</span><span class=\"o\">)</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n                                                                              <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n                                                                              <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinsupp</span> <span class=\"bp\">=</span> <span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x.toFinsupp</span><span class=\"o\">)</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n                                                                              <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n                                                                              <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinsupp</span> <span class=\"bp\">=</span>\n                                                                                <span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x.toFinsupp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 378537864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690302442
    },
    {
        "content": "<p>You have convinced me that playing with instance priorities is the right approach! Since <code>IsDomain</code> depends on <code>Semiring</code> it makes no sense to go through all the trouble in the cancellative world when the path is already known.</p>",
        "id": 378725242,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690363930
    },
    {
        "content": "<p>I'll make a new PR...</p>",
        "id": 378725330,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690363947
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6145\">#6145</a></p>",
        "id": 378730725,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690364997
    },
    {
        "content": "<p>Did you see <a href=\"https://github.com/leanprover-community/mathlib4/pull/6011\">#6011</a> by the way? The benchmark results were disappointing. Do you understand why? Does something else need fixing?</p>",
        "id": 378733692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690365593
    },
    {
        "content": "<p>Maybe the change in <code>extends</code> order also leads to a change in instance order, and the wrong one is picked first more often?</p>",
        "id": 378735903,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690365999
    },
    {
        "content": "<p>Let me check out the class group definition...</p>",
        "id": 378735976,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690366012
    },
    {
        "content": "<p>Hmm, my machine seems to disagree with the benchmark, nearly all declarations in your branch's version of ClassGroup.lean are about 10% faster than on the main branch. And one that appeared slower disappeared on rebuild.</p>",
        "id": 378738585,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690366550
    },
    {
        "content": "<p>Although the vast majority of build time (over a minute) is taken by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ClassGroup.mk0_surjective#doc\">docs#ClassGroup.mk0_surjective</a>, probably this means the slowdown is an artifact?</p>",
        "id": 378738908,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690366612
    },
    {
        "content": "<p>Aha, looks like the definition of the inverse image in there is being unfolded so much that every equality check thrashes for about a second.</p>",
        "id": 378742358,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690367173
    },
    {
        "content": "<p>That specific issue is fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6146\">#6146</a>, let me now take a look at <code>FreeModule.PID</code>.</p>",
        "id": 378756057,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690369552
    },
    {
        "content": "<p>In <code>FreeModule.PID</code> I can't find a real example of the timings getting worse (everything is within about 10% of the master branch) or anything obviously wrong. The huge recursion of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.basis_of_pid_aux#doc\">docs#Submodule.basis_of_pid_aux</a> is slow but not horribly so. I find it hard to distinguish these outcomes from noise...</p>",
        "id": 378760125,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690370300
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6145\">#6145</a> indeed helps, thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>!</p>",
        "id": 378834287,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690383443
    },
    {
        "content": "<p><code>Mathlib.Combinatorics.HalesJewett</code> also shows up in <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/e7b27246-a3e6-496a-b552-ff4b45c7236e/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash1=fb884ddfb1f319b41225168cd6292844f46a4691&amp;hash2=d4443430f25df7a6036ba142a1f4de45b77b6325\">this benchmark</a> as slowing down by 30% or so. Let me check what is going on there...</p>",
        "id": 379064450,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690448359
    },
    {
        "content": "<p>Very weird: everything takes &lt; 0.02 seconds except for the main theorem, which takes 8.5 seconds on my branch and 9 seconds on the relevant master commit.</p>",
        "id": 379066740,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690448733
    },
    {
        "content": "<p>How can I get VelCom to graph the <code>~Mathlib.Combinatorics.HalesJewett — instructions</code> measure?</p>",
        "id": 379069432,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690449241
    },
    {
        "content": "<p>Aha, go to the commit details and click on the line.</p>",
        "id": 379069899,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690449336
    },
    {
        "content": "<p>Profiling output on <code>exists_mono_in_high_dimension'</code> is very weird, looks like the elaborator is done in less than a second, linting for unused variables takes 3s(!) and the remainder is gone. Are we hitting a slow path in the kernel?</p>",
        "id": 379073748,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690450018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Why.20is.20.60simpNF.60.20complaining.20here.3F/near/379069899\">said</a>:</p>\n<blockquote>\n<p>Aha, go to the commit details and click on the line.</p>\n</blockquote>\n<p>How do I get to that page?</p>",
        "id": 379074606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690450162
    },
    {
        "content": "<p>Here's the graph I was looking for: <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/repo-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e?zoomXStart=1687564800000&amp;zoomXEnd=1690502400000&amp;dimensions=~Mathlib.Combinatorics.HalesJewett%3Ainstructions&amp;dayEquidistant=true\">http://speedcenter.informatik.kit.edu/mathlib4/repo-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e?zoomXStart=1687564800000&amp;zoomXEnd=1690502400000&amp;dimensions=~Mathlib.Combinatorics.HalesJewett%3Ainstructions&amp;dayEquidistant=true</a></p>",
        "id": 379075231,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690450256
    },
    {
        "content": "<p>How did you get there? A naive attempt to replace the module name with <code>Mathlib.RingTheory.Kaehler</code> doesn't seem to work for me</p>",
        "id": 379075866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690450368
    },
    {
        "content": "<p>Step by step instructions: go to the benchmark comparison page I linked before, then under the heading \"First Run Information\" click the name of the commit and you'll go to <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e/fb884ddfb1f319b41225168cd6292844f46a4691\">the commit details page</a>. Under the heading \"run result\" go to the next page using the arrows on the bottom right until you find the name of the benchmark to compare. Click on that line and you'll go back to the \"repo overview\" page but with the right things selected.</p>",
        "id": 379076045,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690450403
    },
    {
        "content": "<p>I tried URL manipulation too and failed, so not sure how that works...</p>",
        "id": 379076188,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690450427
    },
    {
        "content": "<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/repo-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e?zoomXStart=1688169600000&amp;zoomXEnd=1690675200000&amp;dimensions=~Mathlib.RingTheory.Kaehler%3Ainstructions&amp;dayEquidistant=true\">Kaehler comparison graph</a></p>",
        "id": 379076424,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690450467
    },
    {
        "content": "<p>Ah, so clicking on the rows only does something when not in the diff view!</p>",
        "id": 379076435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690450469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Why.20is.20.60simpNF.60.20complaining.20here.3F/near/379073748\">said</a>:</p>\n<blockquote>\n<p>Profiling output on <code>exists_mono_in_high_dimension'</code> is very weird, looks like the elaborator is done in less than a second, linting for unused variables takes 3s(!) and the remainder is gone. Are we hitting a slow path in the kernel?</p>\n</blockquote>\n<p>I tried splitting out some parts but haven't figured out where the surprising slowdown comes from. Replacing the last lines with <code>sorry</code> makes it finish quickly, but replacing other lines with <code>sorry</code> tends to make the proof break due to unassigned metavariables.</p>\n<p>I don't think I can figure out more without knowledge of what is going on, would someone more experienced in combinatorics like to figure out where the slowness is coming from?</p>",
        "id": 379085227,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690452007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Why.20is.20.60simpNF.60.20complaining.20here.3F/near/379085227\">said</a>:</p>\n<blockquote>\n<p>I don't think I can figure out more without knowledge of what is going on, would someone more experienced in combinatorics like to figure out where the slowness is coming from?</p>\n</blockquote>\n<p>I looked at this a little a while back but I don't know enough about how to profile to figure out what's happening. Perhaps together we could figure it out? :D</p>",
        "id": 387336070,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1692993279
    },
    {
        "content": "<p>Thank you very much for the offer! Unfortunately I will be minimally active here for the coming two weeks at least, but if you're happy to wait a bit more I'd love to come together :D</p>",
        "id": 387402805,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1693038369
    }
]