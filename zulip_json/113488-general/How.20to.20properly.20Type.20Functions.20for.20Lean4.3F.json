[
    {
        "content": "<p><a href=\"/user_uploads/3121/9csxxdDkjix9Ieip98xbf1jd/Screenshot-2023-11-13-at-8.34.08-PM.png\">Screenshot-2023-11-13-at-8.34.08-PM.png</a><br>\nIn this screenshot, my Ex1 does not successfully parse and all the variables are of type ?m.218 etc and not X, Y, etc. Why is this?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9csxxdDkjix9Ieip98xbf1jd/Screenshot-2023-11-13-at-8.34.08-PM.png\" title=\"Screenshot-2023-11-13-at-8.34.08-PM.png\"><img src=\"/user_uploads/3121/9csxxdDkjix9Ieip98xbf1jd/Screenshot-2023-11-13-at-8.34.08-PM.png\"></a></div>",
        "id": 401904612,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699936621
    },
    {
        "content": "<p>This is not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> UPD: I was wrong.</p>",
        "id": 401904912,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699936828
    },
    {
        "content": "<p>Also, please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> instead of screenshots.</p>",
        "id": 401904952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699936875
    },
    {
        "content": "<p>This is my entire file so the fact it's not an MWE is a good answer</p>",
        "id": 401904961,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699936887
    },
    {
        "content": "<p>Don't you have some imports? UPD: I see, you don't.</p>",
        "id": 401904977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699936904
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `LeftInverse g f` means that g is a left inverse to f. That is, `g ∘ f = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">LeftInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- `HasLeftInverse f` means that `f` has an unspecified left inverse. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasLeftInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">finv</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- `RightInverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">RightInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LeftInverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"sd\">/-- `HasRightInverse f` means that `f` has an unspecified right inverse. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasRightInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">RightInverse</span> <span class=\"n\">finv</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Β</span> <span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ex1</span> <span class=\"o\">(</span><span class=\"n\">LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RightInverse</span> <span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401904989,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699936915
    },
    {
        "content": "<p>I copy and pasted from Function.lean but I'm trying to start from the ground up</p>",
        "id": 401905059,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699936942
    },
    {
        "content": "<p>You defined <code>(X : α)</code> and <code>(Y : B)</code> instead of making them types.</p>",
        "id": 401905063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699936949
    },
    {
        "content": "<p>I guess, in your setup, Lean uses autoimplicits for <code>α</code> and <code>β</code> but not for <code>X</code> and <code>Y</code>.</p>",
        "id": 401905198,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699937066
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `LeftInverse g f` means that g is a left inverse to f. That is, `g ∘ f = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">LeftInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- `HasLeftInverse f` means that `f` has an unspecified left inverse. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasLeftInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">finv</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- `RightInverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">RightInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LeftInverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"sd\">/-- `HasRightInverse f` means that `f` has an unspecified right inverse. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasRightInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">RightInverse</span> <span class=\"n\">finv</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ex1</span> <span class=\"o\">(</span><span class=\"n\">LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RightInverse</span> <span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here is my MWE. <br>\n<a href=\"/user_uploads/3121/7ZGhEOSW62YnQ64Z6DKPtFMu/Screenshot-2023-11-13-at-8.44.06-PM.png\">Screenshot-2023-11-13-at-8.44.06-PM.png</a><br>\nThis is my infoview. I want it to be clean and clear without all the underneath typing that Lean is doing</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7ZGhEOSW62YnQ64Z6DKPtFMu/Screenshot-2023-11-13-at-8.44.06-PM.png\" title=\"Screenshot-2023-11-13-at-8.44.06-PM.png\"><img src=\"/user_uploads/3121/7ZGhEOSW62YnQ64Z6DKPtFMu/Screenshot-2023-11-13-at-8.44.06-PM.png\"></a></div>",
        "id": 401905213,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699937080
    },
    {
        "content": "<p>You should name your assumptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span> <span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401905273,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699937134
    },
    {
        "content": "<p>Did yousee my infoview?</p>",
        "id": 401905373,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699937202
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `LeftInverse g f` means that g is a left inverse to f. That is, `g ∘ f = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">LeftInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- `HasLeftInverse f` means that `f` has an unspecified left inverse. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasLeftInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">finv</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- `RightInverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">RightInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LeftInverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"sd\">/-- `HasRightInverse f` means that `f` has an unspecified right inverse. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasRightInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">RightInverse</span> <span class=\"n\">finv</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span> <span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401905515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699937314
    },
    {
        "content": "<p>Thanks I appreciate it. Everything has the types I want but <code>\\alpha and \\beta </code> are type ?u.192 and ?u.195. Maybe I can do add the hidden attribute to them?</p>",
        "id": 401905734,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699937452
    },
    {
        "content": "<p>You can use <code>Type u</code> instead of <code>Type _</code></p>",
        "id": 401905962,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699937586
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- g is a left inverse to f. That is, `g ∘ f = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">LeftInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span>\n\n<span class=\"sd\">/-- g is a right inverse to f. That is, `f ∘ g = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">RightInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LeftInverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"sd\">/-- `f` has an unspecified left inverse. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasLeftInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">finv</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- `f` has an unspecified right inverse. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">HasRightInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">RightInverse</span> <span class=\"n\">finv</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ex1</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span> <span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">id</span>      <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">_</span>      <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n  <span class=\"n\">_</span>      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">_</span>      <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span>      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span>\n  <span class=\"n\">_</span>      <span class=\"bp\">=</span> <span class=\"n\">h</span>           <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 401910530,
        "sender_full_name": "Mason McBride",
        "timestamp": 1699940859
    }
]