[
    {
        "content": "<p>Does anyone know how Mutable Value Semantics (MVS) differs from Lean4's Functional But In-Place (FBIP) paradigm?</p>\n<blockquote>\n<p>MVS is implemented in <a href=\"https://www.val-lang.dev\">val-lang</a> and defined in <a href=\"https://www.jot.fm/issues/issue_2022_02/article2.pdf\">this paper</a>.</p>\n</blockquote>",
        "id": 382078797,
        "sender_full_name": "Somo S.",
        "timestamp": 1691226996
    },
    {
        "content": "<p>Lean does not have anything like MVS. From what I can tell by reading the paper, this is a way of indicating that a value or part of a value is mutable and there are operations that perform mutations of the parts. By contrast, FBIP is an optimization, where the user writes code that never mutates values explicitly, but certain patterns can reuse the storage of a consumed value and hence reconstruct mutation at the low level.</p>\n<p>There are advantages and disadvantages to making it an optimization instead of a change in semantics. An advantage is that the user doesn't have to be explicitly bothered about mutation, they can just write functional code (and reason about the code at that level) and the compiler does its best to make sense of the code. So it can fire even in code that is not using mutable variable patterns explicitly. A disadvantage is that because it is an optimization, you have no guarantee that it will occur, and small changes to the code or the compiler can cause spurious copies and performance instability. Lean has <code>let mut</code> in the <code>do</code> notation, but this is just syntax for (more or less) a state monad. It would be nice if it could include sufficient annotations so as to ensure FBIP; then one could achieve MVS by using <code>let mut</code> and approved combinators.</p>",
        "id": 382120314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691236285
    },
    {
        "content": "<p><a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2023/07/fip.pdf\">https://www.microsoft.com/en-us/research/uploads/prod/2023/07/fip.pdf</a> is also related</p>",
        "id": 382136840,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1691240226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/Mutable.20Value.20Semantics.20vs.2E.20FBIP/near/382136840\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2023/07/fip.pdf\">https://www.microsoft.com/en-us/research/uploads/prod/2023/07/fip.pdf</a> is also related</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mutable.20Value.20Semantics.20vs.2E.20FBIP/near/382120314\">said</a>:</p>\n<blockquote>\n<p>A disadvantage is that because it is an optimization, you have no guarantee that it will occur, and small changes to the code or the compiler can cause spurious copies and performance instability.</p>\n</blockquote>\n<p>My (crude) understanding of the new paper above is it provides precisely basis for making those guarantees? This is neat stuff thanks for sharing and explaining I'm quite new to all this.</p>",
        "id": 382338753,
        "sender_full_name": "Somo S.",
        "timestamp": 1691321946
    },
    {
        "content": "<p>I have been trying to get a better sense for how lean compares to Rust in terms of memory management (not safety but more along the lines of performance). I had initially thought FBIP is meant to offer the kinds of memory  guarantees that rust compiler does.. But I see that that is not the case, ... perhaps if this newer FIP research is incorporated?</p>",
        "id": 382342507,
        "sender_full_name": "Somo S.",
        "timestamp": 1691322983
    },
    {
        "content": "<p>Rust is more in the uniqueness type corner. The master thesis by Marc Huisinga does explore these topics but it is sadly not integrated with the main system yet.</p>",
        "id": 382343186,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1691323160
    },
    {
        "content": "<p>I‚Äôd love to explore some guaranteed compiler optimizations, akin to rust, with users having a lot of control (via the type system) how their lean code gets mapped to low level code.</p>",
        "id": 382988891,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1691506970
    }
]