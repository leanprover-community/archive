[
    {
        "content": "<p>What do people think of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders `, ` r:(scoped f, fintype.sum f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders `, ` r:(scoped f, fintype.prod f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders ` in ` s `, ` r:(scoped f, finset.sum s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders ` in ` s `, ` r:(scoped f, finset.prod s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I know that this is a very meagre substitute for the big ops library in coq. But I think it's better to wait for Lean 4 before we start a big refactor. In the mean time, this notation seems like a cheap way to improve readability.</p>",
        "id": 195813899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588237639
    },
    {
        "content": "<p>Does this actually work? I mean both the fintype and finset version at the same time.</p>",
        "id": 195815811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239028
    },
    {
        "content": "<p>Oh I see, the notation is subtly different</p>",
        "id": 195815858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239063
    },
    {
        "content": "<p>The question still stands, but I'm more optimistic</p>",
        "id": 195815872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> See <a href=\"https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230\" title=\"https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230\">https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230</a> for a short proof of concept</p>",
        "id": 195816376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588239390
    },
    {
        "content": "<p>Yes, I saw, that's wonderful. My question is specifically about coexistence of the two variations. Do you use both in that file?</p>",
        "id": 195816798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239715
    },
    {
        "content": "<p>Yes, I do.</p>",
        "id": 195817437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588240137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The first <code>calc</code> in the proof mixes them, for example.</p>",
        "id": 195817583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588240173
    },
    {
        "content": "<p>amazing</p>",
        "id": 195817681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588240234
    },
    {
        "content": "<p>Would that conflict with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">∑</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">tsum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n</code></pre></div>\n\n\n<p>in <code>topology/algebra/infinite_sum</code>? (If necessary, we could also localize this one).</p>",
        "id": 195819686,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588241547
    },
    {
        "content": "<p>People will probably want to use both when discussing partial sums.</p>",
        "id": 195820160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588241895
    },
    {
        "content": "<p>I would be ok with <code>∑'</code> for the infinite sum, and the other notations introduced by Johan.</p>",
        "id": 195821357,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588242790
    },
    {
        "content": "<p>Yes, I also thought about that, and I think the <code>'</code> version would be best.</p>",
        "id": 195821855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243155
    },
    {
        "content": "<p>To what extent could this refactor be done with a regex? Because I fear it will be a lot of work if everything has to be done manually...</p>",
        "id": 195821974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243214
    },
    {
        "content": "<p>One thing I noticed with my experiment is that <code>rw [finset.sum_lemma]</code> doesn't play very well with <code>abbreviation fintype.sum f := finset.sum univ f</code></p>",
        "id": 195822103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243316
    },
    {
        "content": "<p>Just using search and replace in all files in vscode, replacing <code>∑</code> with <code>∑'</code>, should do it, hopefully.</p>",
        "id": 195822165,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588243343
    },
    {
        "content": "<p>But I wouldn't like restating a whole bunch of lemmas to <code>fintype.sum</code>. At the same time, I think <code>∑ x in univ, f x</code> is ugly.</p>",
        "id": 195822179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/big.20ops/near/195822165\" title=\"#narrow/stream/113488-general/topic/big.20ops/near/195822165\">said</a>:</p>\n<blockquote>\n<p>Just using search and replace in all files in vscode, replacing <code>∑</code> with <code>∑'</code>, should do it, hopefully.</p>\n</blockquote>\n<p>No, I meant the other refactor.</p>",
        "id": 195822191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243365
    },
    {
        "content": "<p>Replacing all <code>finset.sum s f</code> with <code>∑ x in s, f x</code></p>",
        "id": 195822213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243386
    },
    {
        "content": "<p>You don't even need to introduce the abbreviation, just the notation <code>∑</code> should be enough.</p>",
        "id": 195822215,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588243387
    },
    {
        "content": "<p>Ah, yes, the other refactor. Time for regexps, yes.</p>",
        "id": 195822247,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588243420
    },
    {
        "content": "<p>Or do we just introduce the notation, but not use it in the file...</p>",
        "id": 195822261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243437
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2571\" title=\"https://github.com/leanprover-community/mathlib/issues/2571\">#2571</a></p>",
        "id": 195824749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588245172
    },
    {
        "content": "<p>If I change the notation to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders ` in ` s `, ` r:(scoped f, finset.sum s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders ` in ` s `, ` r:(scoped f, finset.prod s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders `, ` r:(scoped f, finset.univ.sum f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders `, ` r:(scoped f, finset.univ.prod f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n</code></pre></div>\n\n\n<p>then the second set of notation is not used in the tactic state. That's unfortunate. Is there some incantation that can move Lean to do a better job?</p>",
        "id": 195825145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588245498
    },
    {
        "content": "<p>I've never really understood how priorities work for notation. Can that be used here?</p>",
        "id": 195827375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588247038
    },
    {
        "content": "<p>Now that the <code>tsum</code> notation has been changed to <code>∑'</code>, I'm ready to start building a PR that introduces the notation above. Except that this notation doesn't really work yet. So what should I do? Introduce <code>fintype.sum</code> and <code>fintype.prod</code>?</p>",
        "id": 195869512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265837
    },
    {
        "content": "<p>From looking at the source code, the reverse lookups for notation <code>head_map&lt;notation_entry&gt; notation_state::m_inv_map</code> are stored without priority, since <code>head_map&lt;V&gt;</code> derives from <code>head_map_prio&lt;V, constant_priority_fn&lt;V&gt;&gt;</code></p>",
        "id": 195939011,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588319383
    }
]