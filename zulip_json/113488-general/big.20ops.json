[
    {
        "content": "<p>What do people think of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders `, ` r:(scoped f, fintype.sum f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders `, ` r:(scoped f, fintype.prod f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders ` in ` s `, ` r:(scoped f, finset.sum s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders ` in ` s `, ` r:(scoped f, finset.prod s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I know that this is a very meagre substitute for the big ops library in coq. But I think it's better to wait for Lean 4 before we start a big refactor. In the mean time, this notation seems like a cheap way to improve readability.</p>",
        "id": 195813899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588237639
    },
    {
        "content": "<p>Does this actually work? I mean both the fintype and finset version at the same time.</p>",
        "id": 195815811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239028
    },
    {
        "content": "<p>Oh I see, the notation is subtly different</p>",
        "id": 195815858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239063
    },
    {
        "content": "<p>The question still stands, but I'm more optimistic</p>",
        "id": 195815872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> See <a href=\"https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230\" title=\"https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230\">https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230</a> for a short proof of concept</p>",
        "id": 195816376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588239390
    },
    {
        "content": "<p>Yes, I saw, that's wonderful. My question is specifically about coexistence of the two variations. Do you use both in that file?</p>",
        "id": 195816798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239715
    },
    {
        "content": "<p>Yes, I do.</p>",
        "id": 195817437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588240137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The first <code>calc</code> in the proof mixes them, for example.</p>",
        "id": 195817583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588240173
    },
    {
        "content": "<p>amazing</p>",
        "id": 195817681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588240234
    }
]