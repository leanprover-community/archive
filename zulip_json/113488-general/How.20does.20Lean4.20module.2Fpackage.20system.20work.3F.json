[
    {
        "content": "<p>I have checked up <a href=\"https://leanprover.github.io/lean4/doc/organization.html\">Lean4 Manual</a> and can't find any content explaining these contents. For example, does a folder/a file counts as a namespace or not, what need/can be imported or open, how to use/create packages...... It reminds of the horrible documentation of coq on its module.</p>",
        "id": 384547310,
        "sender_full_name": "StructSeeker",
        "timestamp": 1691946982
    },
    {
        "content": "<p>The concept of namespaces and modules are entirely unrelated. You create declarations in a namespaces with the <code>namespace NAME &lt;decls&gt; end</code> syntax. In theory arbitrary files can \"break into\" arbitrary namespaces as they wish. A namespace can be <code>open</code>-ed. Modules are simply files so if we have <code>DirA/DirB/FileA.lean</code> you <code>import DirA.DirB.FileA</code>. You will want to use <code>lake</code> for your project management. That's about all there is to know.</p>",
        "id": 384547701,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691947126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <br>\nWhat about relative path import and visibility? I hope there will be specific documentation in manual......</p>",
        "id": 384548372,
        "sender_full_name": "StructSeeker",
        "timestamp": 1691947395
    },
    {
        "content": "<p>There are no relative path imports. If you are referring to things like <code>protected</code> or <code>private</code> with visibility those do exist in Lean but due to the fact that the type theory necessarily has to be able to look through definitions they are a little loose. <code>protected</code> means \"If you open the namespace of this decl  this decl in particular won't be exposed. This is useful for decls that have very common names like say <code>add</code>. <code>private</code> means <code>private</code> as you might be used to from OOP style languages. However in theory the type theory is still capable to look through a private if you put enough effort into it.</p>",
        "id": 384549940,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691947950
    },
    {
        "content": "<p>thanks! Hopefully these will be added to documentation...</p>",
        "id": 384551039,
        "sender_full_name": "StructSeeker",
        "timestamp": 1691948357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630542\">StructSeeker</span> <a href=\"#narrow/stream/113488-general/topic/How.20does.20Lean4.20module.2Fpackage.20system.20work.3F/near/384551039\">said</a>:</p>\n<blockquote>\n<p>thanks! Hopefully these will be added to documentation...</p>\n</blockquote>\n<p>The end of chapter 2 and the entirety of chapter 6 in TPIL4 might be helpful for you: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a></p>",
        "id": 384561234,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1691951996
    }
]