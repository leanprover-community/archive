[
    {
        "content": "<p>[soft question]<br>\nIs there a difference between the words \"hypothesis\" and \"assumption\" in the context of theorem proving?</p>",
        "id": 326055970,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675667944
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Hypotheses.20or.20premises.3F/near/295808654\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Hypotheses.20or.20premises.3F/near/295808654</a></p>",
        "id": 326058154,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675669001
    },
    {
        "content": "<p>Interesting. I think it can get blurry in statistics (which is somewhere on the boundary between math and science).</p>",
        "id": 326059963,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675669878
    },
    {
        "content": "<p>I used to think there was an informal difference between \"hypothesis\" and \"assumption\". When a proposition was used to obtain a contradiction (at least in one branch), I called it \"hypothesis\". Also, if it was a proof by induction, I had \"induction hypothesis\". Otherwise, I used to call it \"assumption\". Hence I have many propositions <code>ass</code> and many propositions <code>hyp</code> in my code. I am wondering if I should unify them (and which name is better then).</p>",
        "id": 326127015,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675691322
    },
    {
        "content": "<p>I would recommend preferring <code>hyp</code> to <code>ass</code> in your code for the sake of north american readers</p>",
        "id": 326131475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675692512
    },
    {
        "content": "<p><code>asm</code> is a more natural abbreviation for <code>assumption</code> than <code>ass</code>. But in any case, I would just use <code>h₁ h₂ h₃ ...</code> for assumption names.</p>",
        "id": 326142289,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675693649
    },
    {
        "content": "<p>Afaik <code>asm</code> has always been assembler/assembly.</p>",
        "id": 326189721,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675702330
    },
    {
        "content": "<p>I don't like <code>h₁ h₂ h₃</code> because it looks too much like variable names.</p>",
        "id": 326191676,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675702847
    },
    {
        "content": "<p>That's the recommended naming convention for assumptions.<br>\n<a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a></p>",
        "id": 326193255,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675703289
    },
    {
        "content": "<p>Using <code>a b c</code> for propositions looks weird.</p>",
        "id": 326194952,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675703725
    },
    {
        "content": "<p>My personal convention is that I use a single letter (which may have an index or special symbol attached to it) for data and multiple letters for propositions.</p>",
        "id": 326198089,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675704629
    },
    {
        "content": "<p>I avoid naming stuff <code>h</code> because it may look like both and because it can clash with some auto-generated names.</p>",
        "id": 326198870,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675704839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.22hypothesis.22.20and.20.22assumption.22/near/326131475\">said</a>:</p>\n<blockquote>\n<p>I would recommend preferring <code>hyp</code> to <code>ass</code> in your code for the sake of north american readers</p>\n</blockquote>\n<p>I have 160 uses of <code>ass</code> in my project. Laziness will probably win.</p>",
        "id": 326200206,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675705168
    },
    {
        "content": "<p>In Lean 4 auto-generated names are inaccessible, so you won't be able to have clashes like that.</p>",
        "id": 326210060,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675708130
    },
    {
        "content": "<p>I haven't moved past HelloWorld in Lean 4 yet. I don't know what your answer means.</p>",
        "id": 326210262,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675708189
    },
    {
        "content": "<p>In Lean 3, when you invoke certain tactics (e.g., <code>by_cases x = 0</code>), even though you didn't specify a name for the term, it will assign the name <code>h</code> and you will have <code>h : x = 0</code> in your context, and as your next tactic, you could, for instance, do <code>rw [h]</code>.</p>\n<p>In Lean 4, when names are auto-generated like this, they become inaccessible, and so you would have <code>h† : x = 0</code> in your context (where <code>†</code> means inaccessible). You then <em>cannot</em> write <code>rw [h]</code> (or even <code>rw [h†]</code>) on the next line. If you want to be able to explicitly refer to this hypothesis, you need to name it explicitly with <code>by_cases h : x = 0</code>, and then it won't be inaccessible.</p>",
        "id": 326213255,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675709070
    },
    {
        "content": "<p>Also, IIRC if you name two different things <code>h</code>, then the first one gets marked inaccessible.</p>",
        "id": 326213456,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675709132
    },
    {
        "content": "<p>Thank you! I like the new behavior!</p>",
        "id": 326213799,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675709220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 326220685,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675711368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20.22hypothesis.22.20and.20.22assumption.22/near/326213255\">said</a>:</p>\n<blockquote>\n<p>In Lean 3, when you invoke certain tactics (e.g., <code>by_cases x = 0</code>), even though you didn't specify a name for the term, it will assign the name <code>h</code> and you will have <code>h : x = 0</code> in your context, and as your next tactic, you could, for instance, do <code>rw [h]</code>.</p>\n<p>In Lean 4, when names are auto-generated like this, they become inaccessible, and so you would have <code>h† : x = 0</code> in your context (where <code>†</code> means inaccessible). You then <em>cannot</em> write <code>rw [h]</code> (or even <code>rw [h†]</code>) on the next line. If you want to be able to explicitly refer to this hypothesis, you need to name it explicitly with <code>by_cases h : x = 0</code>, and then it won't be inaccessible.</p>\n</blockquote>\n<p>This is not actually true about <code>by_cases</code> in mathlib4, fwiw. (I think perhaps it should be - I'm taking a look at how much work that is at the moment)</p>",
        "id": 326223037,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675712070
    },
    {
        "content": "<p>whoops, picked a bad example!</p>",
        "id": 326223118,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675712106
    },
    {
        "content": "<p>I think maybe it was left as-is until after the port. That's why <code>cases'</code> exists I think.</p>",
        "id": 326223161,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675712125
    }
]