[
    {
        "content": "<p>I find myself wanting to explain what the goal of a folder is, and how to decide whether a new file belongs to some folder X rather than some closely related folder Y, or whether a new lemma belongs to some file A instead of some closely related file B in the same folder.</p>",
        "id": 397239559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697610244
    },
    {
        "content": "<p>I think we could have <code>README.md</code>s for each top folder. Of course they do come with a maintenance obligation.</p>",
        "id": 397239854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697610378
    },
    {
        "content": "<p>Johan, don't spoil my suggestion: <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 397239884,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697610395
    },
    {
        "content": "<p>This would be addressable by adding a README.md file to each folder (/each folder we care enough about). And that file could be used as a landing page for its folder, as <span class=\"user-mention\" data-user-id=\"644656\">@Alex Altair</span> suggested <a href=\"#narrow/stream/113489-new-members/topic/Feedback.3A.20have.20Lean.203.20stuff.20point.20to.20Lean.204.20equivalent/near/396157686\">here</a>.</p>",
        "id": 397239975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697610460
    },
    {
        "content": "<p>I specifically want to explain non-top folders as well. The folders I'm thinking of are typically <code>LinearAlgebra.AffineSpace</code> vs <code>Analysis.Convex</code>. In that case, I'm actually planning on creating a third folder <code>Geometry.Convex</code> and develop the theory of convex spaces axiomatically there, until my refactor is far enough along that this new folder can act as a drop-in replacement for most of <code>Analysis.Convex</code> (where the complement of \"most\" is the theory of real and complex convex spaces).</p>",
        "id": 397240484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697610716
    },
    {
        "content": "<p>Another use case would be for me to expose the results in <code>Combinatorics.SetFamily</code> or <code>Combinatorics.Additive</code> in a semi-coherent fashion. I could list the important results that we have, how to use them, who to contact if people have question, and what future results people have been working and where to find that work.</p>",
        "id": 397240844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697610861
    },
    {
        "content": "<p>If people are happy with my suggestion, I can just start adding a <code>README.md</code> file to the aforementioned folders and a few more,  and we can worry about how to get doc-gen to display them later.</p>",
        "id": 397241142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697610997
    },
    {
        "content": "<p>I would suggest going further. <br>\nEach file could be accompanied with a <code>.tex</code> file that explains in vernacular language what is done in the <code>.lean</code> file, details the definitions, the way they are supposed to be used (the “API”).<br>\nI would even dare dreaming of everything stemming out a single file that is automatically processed into the <code>.lean</code> and <code>.tex</code> files.</p>",
        "id": 397248923,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697614058
    },
    {
        "content": "<p>That's more or less what doc-gen is doing right now isn't it, so you are actually dreaming of the <code>.lean</code> file itself? (With markdown instead of tex but that is probably enough.) Or do you envision something more like the <code>.dtx</code> format? It seems to me that this would add a lot of burden while providing little additional value. But I might be wrong about that.</p>\n<p>One markdown file per folder makes sense for a more general overview!</p>",
        "id": 397255269,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697616061
    },
    {
        "content": "<p>The <code>.lean</code> file does not contain enough information. There are cases where it explains the rationale behind the API, I'm thinking of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Nonempty#doc\">docs#Set.Nonempty</a> for example, but it is really tough to read.  And it rarely says anything about the proofs (which are the object of interest here, I mean, we not only care that a theorem is proved, we also are interested in how we prove it).<br>\nThe <code>.dtx</code> format is a bit hard to write, but VSCode/Emacs extensions are there to help.</p>",
        "id": 397259970,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697617840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> will be pleased to hear that you're all thinking about this, and is coming up with solutions for you!</p>",
        "id": 397262047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697618653
    },
    {
        "content": "<p>How about splitting this huge file <code>Mathlib/Data/Set/Basic.lean</code> which is 3k lines long into smaller <code>.lean</code> files, with a comment like you want inside a <code>/-! ... -/</code> comment on top of that?</p>",
        "id": 397262086,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697618670
    },
    {
        "content": "<p>Yes, please do!</p>\n<p>Any PR that splits a file over 1000 lines is highly welcome, and I'm happy to be pinged to merge quickly. :-)</p>",
        "id": 397262166,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697618708
    },
    {
        "content": "<p>(I was not volunteering to do that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> just suggesting that literate programming may be less useful if the source files are small.)</p>",
        "id": 397262753,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697618940
    },
    {
        "content": "<p>Does this mean every directory would get a doc-gen4 page? Now it's not possible to click on e.g. <code>Mathlib.LinearAlgebra</code> to learn what it is about, and its <code>Basic.lean</code> isn't about it as a whole.</p>",
        "id": 397265806,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697620021
    },
    {
        "content": "<p>Thanks for the CC, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> . I'm currently at the design stage of a documentation tool for Lean that allows the structure of the documentation to be different from the structure of the code when that's what makes sense, extensible in Lean itself. It will cooperate with doc-gen to allow the inclusion of API documentation in a larger, structured document. I'll watch threads like this for inspiration!</p>",
        "id": 397266614,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1697620292
    },
    {
        "content": "<p>Does that cover my \"one readme per folder\" idea?</p>",
        "id": 397266759,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697620337
    },
    {
        "content": "<p>In the demo of the new tool, it seems that one readme per folder would be written in Lean DSL, but I guess this topic is about the convention of having such a readme (in whatever format), a meta question.</p>\n<p>If the new documentation tool also introduce a convention like this, then it's partially covered to the extent that such a readme lean file should exist (EDIT: and its name). But it's still up to the Mathlib community to discuss what to include in this readme as a convention for contents.</p>",
        "id": 397270209,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697621573
    },
    {
        "content": "<p>Okay, I will open a PR to mathlib with a few example readmes.</p>",
        "id": 397275506,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697623532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397266759\">said</a>:</p>\n<blockquote>\n<p>Does that cover my \"one readme per folder\" idea?</p>\n</blockquote>\n<p>In the lean compiler we have one file per folder in the folder above that imports all of the files from below. A module file if you wish. If you just do that and put your documentation in there in a doc string it will just work with doc-gen as well.</p>",
        "id": 397290829,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697628372
    },
    {
        "content": "<p>This is useful to describe API. IIUC, what <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> wants, and I believe that most mathematicians would agree, is the ability to add exegesis along proofs when needed, so as close to the code as possible, and a way to export a readable commented version. We don't after all believe that proofs are irrelevant <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> but this is kind of orthogonal to API documentation.</p>",
        "id": 397294748,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697629725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397290829\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397266759\">said</a>:</p>\n<blockquote>\n<p>Does that cover my \"one readme per folder\" idea?</p>\n</blockquote>\n<p>In the lean compiler we have one file per folder in the folder above that imports all of the files from below. A module file if you wish. If you just do that and put your documentation in there in a doc string it will just work with doc-gen as well.</p>\n</blockquote>\n<p>I really dislike dumping information about folder X outside X, though. I would much prefer <code>X/README.md</code> or <code>X/README.lean</code> over <code>X.lean</code>.</p>",
        "id": 397297295,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697630529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, I think that ship sailed with the removal of <code>default.lean</code> (though there is a thread asking to <a href=\"http://[said](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Reintroducing.20default.2Elean/near/390895028)\">bring it back</a>)</p>",
        "id": 397297718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697630674
    },
    {
        "content": "<p>There is another sad thing about writing docstring in Lean, no comments are allowed before imports, so one can't add docstring to each import in that lean file for that directory.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n</code></pre></div>\n<p>gives <code>invalid 'import' command, it must be used in the beginning of the file</code>.</p>",
        "id": 397297746,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697630685
    },
    {
        "content": "<blockquote>\n<p>In the lean compiler we have one file per folder in the folder above that imports all of the files from below. </p>\n</blockquote>\n<p>This strategy doesn't work in mathlib; often two parallel directories import each other in sequence; <code>Foo/B</code> and <code>Bar/B</code> import both of <code>Foo/A</code> and <code>Bar/A</code>, <code>Foo/C</code> and <code>Bar/C</code> import both of <code>Foo/B</code> and <code>Bar/B</code>, etc</p>",
        "id": 397298104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697630781
    },
    {
        "content": "<p>The point of folders is also to make the working tree cleaner. Adding a file outside the corresponding folder works against that, by having two objects corresponding to one semantic entity.</p>",
        "id": 397312707,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697635530
    },
    {
        "content": "<p>I don't disagree, but I think I think that's more suited to an RFC adding back <code>default.lean</code> or something analogous</p>",
        "id": 397315349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697636320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397297746\">said</a>:</p>\n<blockquote>\n<p>There is another sad thing about writing docstring in Lean, no comments are allowed before imports</p>\n</blockquote>\n<p><em>Comments</em> are allowed (e.g., <code>/- ... -/</code> and <code>-- ...</code> work). However, docstrings and module documentation (e.g., <code>/-- ... -/</code> and <code>/-! ... -/</code>) do not. This is because the later are first-class syntax in Lean whereas the former are ignored by the lexer.</p>",
        "id": 397357959,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697650556
    },
    {
        "content": "<p>Is there a way to attach docstrings to parameters and assumptions of functions (kind of like it is possible for fields in a structure)? That would be useful to explain why an assumption is necessary, or what each parameter means.</p>",
        "id": 397367690,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697654975
    },
    {
        "content": "<p>I guess we would just use the function docstring for this, looking at <a href=\"https://github.com/leanprover/lean4/blob/5e0f6049c002e04e3593f1a08c96488bc6f8c49a/src/Lean/Parser/Term.lean#L257\">https://github.com/leanprover/lean4/blob/5e0f6049c002e04e3593f1a08c96488bc6f8c49a/src/Lean/Parser/Term.lean#L257</a> there is no place for a docstring there, so I don't think there is an existing mechanism to add an actual docstring (compared to <a href=\"https://github.com/leanprover/lean4/blob/5e0f6049c002e04e3593f1a08c96488bc6f8c49a/src/Lean/Parser/Command.lean#L178\">https://github.com/leanprover/lean4/blob/5e0f6049c002e04e3593f1a08c96488bc6f8c49a/src/Lean/Parser/Command.lean#L178</a> where we have an explicit declModifiers)</p>",
        "id": 397371974,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697657190
    },
    {
        "content": "<p>Even if we could put doc comments on parameters:</p>\n<ol>\n<li>That would be really awkward to format</li>\n<li>I'm not sure how we would surface that documentation other than function hovers as we currently do</li>\n</ol>",
        "id": 397373176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697657805
    },
    {
        "content": "<p>The documentation could be surfaced as hover text for <code>param</code> on <code>(param := _)</code></p>",
        "id": 397375548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697659070
    },
    {
        "content": "<p>Would it be possible to have something of the kind that exists for Coq / Agda, where the html pages show the code in a more human-friendly way than what is given here? I'm thinking of Martin Escardo's Type Topology archive, for example.<br>\n<a href=\"https://github.com/martinescardo/TypeTopology\">https://github.com/martinescardo/TypeTopology</a></p>",
        "id": 397380597,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697661566
    },
    {
        "content": "<p>Yes, this is what LeanInk is about. Let's say this is work in progress.</p>",
        "id": 397386997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697665364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397357959\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397297746\">said</a>:</p>\n<blockquote>\n<p>There is another sad thing about writing docstring in Lean, no comments are allowed before imports</p>\n</blockquote>\n<p><em>Comments</em> are allowed (e.g., <code>/- ... -/</code> and <code>-- ...</code> work). However, docstrings and module documentation (e.g., <code>/-- ... -/</code> and <code>/-! ... -/</code>) do not. This is because the later are first-class syntax in Lean whereas the former are ignored by the lexer.</p>\n</blockquote>\n<p>Yes, but only docstrings and module documentation  are rendered by Alectryon and doc-gen4.</p>",
        "id": 397404396,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697677534
    },
    {
        "content": "<p>Why do module docs have to go before imports?</p>",
        "id": 397408057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697679939
    },
    {
        "content": "<p>Initially it was for literate programming, there could be opening paragraphs before the first <code>import</code>. In the context of this topic, maybe in the doc lean file for the directory, each import is explained before the import, or there is also an opening before all imports.</p>\n<p>This was a surprise to me, compared to other languages, where <code>import</code> can happen anywhere in the file even inside a function (e.g. for Rust and Python).</p>",
        "id": 397408492,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697680253
    },
    {
        "content": "<p>For example, <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">lean4-metaprogramming-book</a> has opening paragraphs in <code>/- -/</code> before imports but it was rendered with <code>lean2md</code> instead of LeanInk/Doc-gen4 and I need type and goal annotations generated by LeanInk, so I can't really use <code>lean2md</code>.</p>\n<p>This may seem possible to relax from the doc tool side, but relaxing it will pollute the doc with comments unintended for doc render(e.g. for Mathlib and doc-gen4), so there's the dilemma.</p>",
        "id": 397409098,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697680749
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/DD3YIQg2W60WyDN7jx_yqyGw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DD3YIQg2W60WyDN7jx_yqyGw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DD3YIQg2W60WyDN7jx_yqyGw/image.png\"></a></div><p>Interesting, in the doc tool DSL demo, there's even no <code>import</code> but <code>@import</code>.</p>",
        "id": 397410270,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697681297
    },
    {
        "content": "<p>I'm guessing this is in order to make keywords more distinct since the substrate is plain text / markdown</p>",
        "id": 397410529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697681422
    },
    {
        "content": "<blockquote>\n<p>This was a surprise to me, compared to other languages, where import can happen anywhere in the file even inside a function (e.g. for Rust and Python).</p>\n</blockquote>\n<p>This is a complete mis-feature. (In C you can even <code>#include</code> in the middle of an array literal, and I have seen people do this.) Rust does not allow imports to happen anywhere in the file, imports are like <code>extern crate foo;</code> and they only happen at the top level. You are probably thinking of <code>use</code> declarations and these are more like lean's <code>open</code> command.</p>",
        "id": 397410926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697681595
    },
    {
        "content": "<p>The main reason you shouldn't be able to put <code>import</code>s anywhere in the (lean) file is because <code>import</code>s are not only parsed by lean but also directly by lake (which in particular means it needs to reimplement some of the comment and name lexing stuff just to read that part of the file) so that it knows what other files are required to make this one compile. If imports could appear anywhere you would get caught in a circularity since you need lean to parse the file but lean needs the imports to parse the file and lake needs to know what to compile first before this one...</p>",
        "id": 397411376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697681790
    },
    {
        "content": "<p>I think we would end up needing an external file dependency specification</p>",
        "id": 397411500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697681846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397410926\">said</a>:</p>\n<blockquote>\n<p>Rust does not allow imports to happen anywhere in the file, imports are like <code>extern crate foo;</code> and they only happen at the top level. You are probably thinking of <code>use</code> declarations and these are more like lean's <code>open</code> command.</p>\n</blockquote>\n<p>Actually that's not quite true, <code>mod</code> is also kind of like an import statement (it determines how files are located in the module graph) and those can actually go anywhere. This has been regarded as a mistake however, because it is hostile to IDEs that want to know the module graph up-front without parsing the whole project. This problem would be much worse for lean because \"parsing the whole project\" is already equivalent to a full build.</p>",
        "id": 397412962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697682388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397411376\">said</a>:</p>\n<blockquote>\n<p>The main reason you shouldn't be able to put <code>import</code>s anywhere in the (lean) file is because <code>import</code>s are not only parsed by lean but also directly by lake</p>\n</blockquote>\n<p>While a reasonable inference, this is not actually the main reason. Lake would very much like to just elaborate the file itself (to easily solve things like <a href=\"https://github.com/leanprover/lake/pull/86\">lake#86</a>). The reason the imports are pre-parsed and fixed at the top is due to restrictions of the Lean <code>Environment</code>. For example, the environment does not support multi-threading and parts of the environment extension are optimized in such away that it is nontrivial to extend it further later.</p>",
        "id": 397414852,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697683144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397410926\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>This was a surprise to me, compared to other languages, where import can happen anywhere in the file even inside a function</p>\n</blockquote>\n<p>This is a complete mis-feature.</p>\n</blockquote>\n<p>I disagree with calling this a \"mis-feature\". Lazy and asynchronous imports are very important performance optimizations in Ruby, Python, and JavaScript, and I have no doubt they would be quite useful in Lean. However, it is not clear the trade-offs required to enable such a feature are worth it for Lean.</p>",
        "id": 397415071,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697683283
    },
    {
        "content": "<p>Yes, lazy and asynchronous imports (plus conditional and optional imports, which, btw, is also available in Julia, to provide optional extensions if the certain libraries are present) are use cases made use of allowing imports everywhere in these languages, but most of them are too dynamic to follow, so Lean could have a less strict but not totally relaxed rule about this, like allowing limited grammar structures happen before <code>import</code>(e.g. <code>meta if</code>?), but maybe it would be more clear when a valid use case surfaces and becomes blocked by it. And of course this would be a nitpick if only for literate programming.</p>",
        "id": 397418967,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697685274
    },
    {
        "content": "<p>Wait, there is surely a difference between \"I want to be able to put comments at the very top of a file so a documentation system can see them\" and \"I want to be able to import stuff in the middle of a proof\". One seems infinitely easier to implement than the other, for example.</p>",
        "id": 397445122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697700393
    },
    {
        "content": "<p>Note that lean is currently already capable of taking additional dependencies on other files during elaboration (e.g. <code>include_str</code>). It just isn't tracked by lake</p>",
        "id": 397445633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697700608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397445122\">said</a>:</p>\n<blockquote>\n<p>Wait, there is surely a difference between \"I want to be able to put comments at the very top of a file so a documentation system can see them\" and \"I want to be able to import stuff in the middle of a proof\". One seems infinitely easier to implement than the other, for example.</p>\n</blockquote>\n<p>Yes, I wonder if there's any reason that <code>/-! -/</code> or <code>/-- -/</code> can't be placed before <code>imports</code>, and if it's not the preferred way, then which way is better to implement \"be able to put comments at the very top of a file so a documentation system can see them\" in Lean.</p>",
        "id": 397447674,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697701247
    },
    {
        "content": "<p>the documentation system can see <code>/-</code> comments if it chooses to interpret them</p>",
        "id": 397447840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697701312
    },
    {
        "content": "<p>We had to implement <code>/-</code> comment parsing for mathport because the copyright header is exactly this - it is a regular comment placed before the imports</p>",
        "id": 397448105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697701404
    },
    {
        "content": "<p>The <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397409098\">dilemma</a> mentioned above is exactly if doc-gen4 chooses to see and render <code>/- -/</code>or even <code>--</code>  then lots of comments unintended for doc would also be rendered and polluted the doc.</p>",
        "id": 397452513,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697702862
    },
    {
        "content": "<p>is this about doc-gen though? I thought it was about some literate lean processor</p>",
        "id": 397452840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697702952
    },
    {
        "content": "<p>I would indeed expect doc-gen to ignore <code>/-</code> comments but that's a different application</p>",
        "id": 397452973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697702987
    },
    {
        "content": "<p>The thing is there should be a consistent standard to treat them, or there would be fragmentation of doc tools, like the difference between <code>lean2md</code> and <code>doc-gen4</code>, one relies on <code>/- -/</code> heavily and the other relies on ignoring it completely.</p>",
        "id": 397453445,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697703160
    },
    {
        "content": "<p>Interesting note from <code>lean2md</code>:</p>\n<blockquote>\n<p>Important: since lean2md is so simple, please avoid using comment sections in Lean code blocks with <code>/- ... -/</code>. If you want to insert commentaries, do so with double dashes <code>--</code>.</p>\n</blockquote>\n<p>This isn't practical in real code, people would need internal multi-line comments with <code>/- -/</code>, while <code>/-! -/</code> and <code>/-- -/</code> are for docs that are expected to be rendered.</p>",
        "id": 397495087,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697718530
    },
    {
        "content": "<p>I think that <code>lean2md</code> was just a simple-minded program that was intended for being used only for the metaprogramming book.  And even then, my impression is that the metaprogramming book outgrew it: I do not think that <code>lean2md</code> should be seriously considered outside of its initial scope.</p>",
        "id": 397572434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697747128
    },
    {
        "content": "<p>Especially in light of the new tools David is building</p>",
        "id": 397575556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697748655
    }
]