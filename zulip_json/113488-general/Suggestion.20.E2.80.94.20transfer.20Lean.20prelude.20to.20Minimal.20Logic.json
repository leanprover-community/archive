[
    {
        "content": "<h3>Overview</h3>\n<p>I argue that the principle of explosion (EXP) (can refer to both <code>False -&gt; q</code> and <code>p \\and \\not p -&gt; q</code>) (Used by <code>Empty.elim</code>) is non-constructive. EXP is independent from the other axioms in the default intuitionist prelude, which make minimal logic. In addition, \"weak explosion\" (W-EXP) (<code>False -&gt; p -&gt; False</code> === <code>False -&gt; \\not p</code>) is constructive, derivable in minimal logic, and still an impressive theorem (not an axiom).</p>\n<h3>Relation to other theorems (in minimal logic)</h3>\n<ul>\n<li>EXP is equivalent to disjunctive syllogism</li>\n<li>EXP and the law of the excluded middle together are equivalent to the principle of double negation </li>\n</ul>\n<h3>Benefits of Omission of the Axiom of the Principle Of Explosion (of the negation of the truth)</h3>\n<ol>\n<li>Constructibility: This is the central argument for this, and I turn to the source below to provide the strongest argument I can.<br>\n_Edgar Campos &amp; Abilio Rodrigues:_<blockquote>\n<p>Heyting provides an informal explanation for the meaning of the implication that<br>\nintends to justify both EQV and EXP :<br>\nThe case is conceivable that after the statement a → b has been proved in<br>\nthe sense specified, it turns out that b is always correct. Once accepted,<br>\nthe formula a → b then has to remain correct; that is, we must attribute<br>\na meaning to the sign → such that a → b still holds. The same can<br>\nbe remarked in the case where it later turns out that a is always false<br>\n(Heyting, 1930, p. 313).<br>\nHeyting’s argument, however, as Johansson will point out in 1937 (Section 3.4 below), is<br>\nnot sound. He was thinking of a situation in which the proof of A → B was available,<br>\nand subsequently a proof of ¬A was obtained. But what EXP says is something rather<br>\ndifferent, and stronger, namely, that a proof of ¬A automatically yields a proof of A → B.<br>\nHeyting clearly fails to justify this.</p>\n</blockquote>\n</li>\n</ol>\n<p>_Johansson \"in a letter to Heyting dated September 23rd, 1935\"_</p>\n<blockquote>\n<p>I have not been able to make my peace with Axiom 4.1. You say that<br>\nwhen a → b has been proved, and later ¬a is proved, then a → b should<br>\nremain correct. Indeed; but ¬a → (a → b) means that when ¬a has<br>\nbeen proved, b at once becomes derivable from a, even when this had<br>\nnot been proved before. And that contradicts my intuition in the most<br>\nviolent way (Letter from Johansson to Heyting, apud van Atten, 2017).</p>\n</blockquote>\n<ol start=\"2\">\n<li>Classical is unaffected. As said before, EXP is a consequence of the axioms of classical logic. Either you want a constructive proof, for which you shouldn't use EXP; or you don't mind a non-constructive proof, in which case classical axioms are stronger. </li>\n<li>Paraconsistency: an added benefit. <code>False</code> is just an empty type, until you define an axiom which can populate it; in that case all that happens is <code>p -&gt; False</code> which is very constructively logical when you don't tack on extra semantics to <code>False</code> as a term of Prop. With two uninhabitable types, adding an axiom which serves as an introduction to one, does not necessarily create a proof to the other; this is not the case with EXP.</li>\n</ol>\n<h3>Drawbacks</h3>\n<ol>\n<li>Breaking change: Removing <code>False.elim</code> and <code>absurd</code> from the prelude will obviously be breaking. I do suggest that, if the opportunity does arise (e.g Lean5 comes with another syntax overhaul as the breaking change to rule them all), 3 logic namespaces be defined:</li>\n</ol>\n<ul>\n<li>_minimal_ — the root namespace, consisting of the current logic prelude excluding the principle of explosion. A proof of W-EXP should be added for convenience.</li>\n<li>a namespace containing the principle of explosion as an axiom, like the current implementation — this is probably equivalent to the popular _Heyting_'s formal intuitionistic logic.</li>\n<li>the _Classical_ namespace, with a proof of EXP</li>\n</ul>\n<ol start=\"2\">\n<li>Pragmatic non-difference given law of non-contradiction. Why this issue hasn't come up here before (or that often in academics).<blockquote>\n<p>Notice that van Dalen and Troelstra consider Heyting’s explanation (quoted above in<br>\nSection 3.5) as a stipulation that fixes the meaning of ⊥ and →, or ¬ and →, depending<br>\non what one chooses as primitive. But if this inference were in accordance with Brouwer’s<br>\nideas, it would not have to be the result of a stipulation. As far as we know, nowhere in<br>\nBrouwer is there evidence in support of the claim that any operation (i.e., a construction),<br>\napplied to an empty domain (i.e., to a non-existent proof of ⊥) yields as a result a proof<br>\nof an arbitrary proposition A.</p>\n</blockquote>\n</li>\n</ol>\n<p>Enough philosophy. The question is how this can be implemented non-disruptively. I'm very new to Lean, so this is the area I would appreciate help the most.</p>\n<ul>\n<li>Ideally, the lean prelude does not introduce False.elim or Empty.elim, which are to be moved to a new <code>Heyting</code> namespace. <code>Classical</code> would open the <code>Heyting</code> namespace.  </li>\n<li>If the community (understandably) does not feel traction with this proposal, due to practical infeasibility (breaking change), habit/popularity of Heyting logic, or a metaphysical argument I'm not aware of, then it would still be better than nothing if minimal logic had second class support. Since minimal logic is a strict weakening, this would require \"disabling\" the EXP axiom by the user, and all dependent theorems, including from imports. Can this be done? </li>\n<li>Also, <code>#print axioms</code> could include the axioms of elimination used. Maybe a second command?</li>\n</ul>\n<p>Thank you for reading.</p>\n<p>Source: <a href=\"http://lna.unb.br/lna_n01_04_ecampos_arodrigues.pdf\">http://lna.unb.br/lna_n01_04_ecampos_arodrigues.pdf</a></p>\n<blockquote>\n<p>Some remarks on the validity of the principle of<br>\nexplosion in intuitionistic logic1<br>\nEdgar Campos2 &amp; Abilio Rodrigues3<br>\nAbstract<br>\nThe formal system proposed by Heyting (1930, 1936) became the stan-<br>\ndard formulation of intuitionistic logic. The inference called ex falso<br>\nquodlibet, or principle of explosion, according to which anything follows<br>\nfrom a contradiction, holds in intuitionistic logic. However, it is not clear<br>\nthat explosion is in accordance with Brouwer’s views on the nature of<br>\nmathematics and its relationship with logic. Indeed, van Atten (2009)<br>\nargues that a formal system in line with Brouwer’s ideas should be a<br>\nrelevance logic. We agree that explosion should not hold in intuitionistic<br>\nlogic, but a relevance logic requires more than the invalidity of explosion.<br>\nThe principle known as ex quodlibet verum, according to which a valid<br>\nformula follows from anything, should also be rejected by a relevantist.<br>\nGiven ex quodlibet verum, the inference we call weak explosion, accord-<br>\ning to which any negated proposition follows from a contradiction, is<br>\nproved in a few steps. Although the same argument against explosion<br>\ncan be also applied against weak explosion, rejecting the latter requires<br>\nthe rejection of ex quodlibet verum. The result is the loss of at least<br>\none among reflexivity, monotonicity, and the deduction theorem in a<br>\nBrouwerian intuitionistic logic, which seems to be an undesirable result.</p>\n</blockquote>",
        "id": 402691473,
        "sender_full_name": "Nazar Androshchuk",
        "timestamp": 1700225399
    },
    {
        "content": "<p><code>False.elim</code> is just a shorthand for <code>False.rec</code>, which is not even in the prelude, but foundational to the type theory of Lean (CiC)</p>",
        "id": 402692519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700225736
    },
    {
        "content": "<p>I would guess that you might be able to get away with using the <code>HImp</code> symbol of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HeytingAlgebra#doc\">docs#HeytingAlgebra</a> if you want a weaker system of implication</p>",
        "id": 402694799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700226385
    },
    {
        "content": "<p>Could there be potential problems with CiC where explosion is excluded? (apart from being weaker). I can't find a name of such a calculus online.</p>",
        "id": 402697348,
        "sender_full_name": "Nazar Androshchuk",
        "timestamp": 1700227212
    },
    {
        "content": "<p>What would that even look like?</p>",
        "id": 402697478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700227249
    },
    {
        "content": "<p>The logical components would be isomorphic to Johansson minimal logic. No explosion, but weak explosion. Instead of taking contradiction as a primitive, the existence of an uninhabited type is asserted.</p>",
        "id": 402697785,
        "sender_full_name": "Nazar Androshchuk",
        "timestamp": 1700227340
    },
    {
        "content": "<p>That doesn't tell me at all how you think CiC should be modified.</p>",
        "id": 402698181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700227452
    },
    {
        "content": "<p>I want to remove the axiom of explosion from CiC. False does not imply an arbitrary proposition.</p>",
        "id": 402698327,
        "sender_full_name": "Nazar Androshchuk",
        "timestamp": 1700227499
    },
    {
        "content": "<p>You can't just do that. You'll destroy all of CiC along the way.</p>",
        "id": 402698631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700227587
    },
    {
        "content": "<p>What would happen?</p>",
        "id": 402698670,
        "sender_full_name": "Nazar Androshchuk",
        "timestamp": 1700227602
    },
    {
        "content": "<p>What do you think <code>False.rec</code> would look like in this case?</p>",
        "id": 402698671,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700227602
    },
    {
        "content": "<p>Nazar, you'll have to explain how you want inductive types to work. CiC gives such a description, and <code>False.rec</code> just falls out of it as a consequence.</p>",
        "id": 402698880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700227657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Suggestion.20.E2.80.94.20transfer.20Lean.20prelude.20to.20Minimal.20Logic/near/402698671\">said</a>:</p>\n<blockquote>\n<p>What do you think <code>False.rec</code> would look like in this case?</p>\n</blockquote>\n<p><code>False.rec</code> is not essential. It is ommited. But what can happen is <code>False \\r P \\r False</code>.</p>",
        "id": 402698968,
        "sender_full_name": "Nazar Androshchuk",
        "timestamp": 1700227682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Suggestion.20.E2.80.94.20transfer.20Lean.20prelude.20to.20Minimal.20Logic/near/402698880\">said</a>:</p>\n<blockquote>\n<p>Nazar, you'll have to explain how you want inductive types to work. CiC gives such a description, and <code>False.rec</code> just falls out of it as a consequence.</p>\n</blockquote>\n<p>Thanks, I'll have to read up on inductive types then.</p>",
        "id": 402699052,
        "sender_full_name": "Nazar Androshchuk",
        "timestamp": 1700227699
    },
    {
        "content": "<p>As others have said, we cannot easily change the logic of Lean. However, you can do minimal logic in Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">MinimalFalse</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MinimalNeg</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">MinimalFalse</span>\n\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"¬\"</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">MinimalFalse</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MinimalFalse</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MinimalFalse</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not provable</span>\n</code></pre></div>",
        "id": 402699094,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700227714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Suggestion.20.E2.80.94.20transfer.20Lean.20prelude.20to.20Minimal.20Logic/near/402699094\">said</a>:</p>\n<blockquote>\n<p>As others have said, we cannot easily change the logic of Lean. However, you can do minimal logic in Lean.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">MinimalFalse</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MinimalNeg</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">MinimalFalse</span>\n\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"¬\"</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">MinimalFalse</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MinimalFalse</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MinimalFalse</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not provable</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, this should be a solution.</p>",
        "id": 402699258,
        "sender_full_name": "Nazar Androshchuk",
        "timestamp": 1700227774
    }
]