[
    {
        "content": "<p>I am thinking about adding some more computation/algorithm stuff to NNG. This won't be needed for my course so there's no urgency, but if it is relatively straightforward to teach people how to write a tactic which turns a NNG <code>2</code> into <code>succ (succ 0)</code> then I might be tempted to teach this; perhaps a more advanced tactic could even change <code>1 + 1</code> not into <code>succ 0 + succ 0</code> but into <code>succ (succ 0)</code>. </p>\n<p>Anyway, all of this is moot right now because I don't have a clue how to do this myself. Here's some code from NNG:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Our copy of the natural numbers called `MyNat`, with notation `ℕ`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n<span class=\"c1\">-- deriving BEq, DecidableEq, Inhabited</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">MyNatNotation</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">1000000</span><span class=\"o\">)</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyNat</span>\n<span class=\"c1\">-- Note: as long as we do not import `Mathlib.Init.Data.Nat.Notation` this is fine.</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">MyNat.zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myNatFromNat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">MyNat.zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyNat.succ</span> <span class=\"o\">(</span><span class=\"n\">myNatFromNat</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">natFromMyNat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">MyNat.zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">MyNat.succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">natFromMyNat</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ofNat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">MyNat</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">myNatFromNat</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">natFromMyNat</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I go from here to a <code>normalize</code> tactic which turns a goal <code>2 + 2 \\ne 5</code> into <code>succ succ 0 + succ succ 0 \\ne succ succ ... 0</code>?<br>\nNote that I know how to write an instance of decidable equality so I can prove this by <code>decide</code>; but I want to play with some other ideas before I introduce this: once we're in this state then we can finish the goal with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">apply</span> <span class=\"n\">succ_inj</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">zero_ne_succ</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>(at least once you have <code>apply at</code>, which we have in NNG)</p>",
        "id": 395714792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696862666
    },
    {
        "content": "<p>Kevin, I have not yet tried to get this to work with your version of <code>Nat</code>, but that is probably not too hard.  Is what is below close to what you are looking for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Tactic.Replace</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norml</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Nat.zero</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Nat.succ</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">norml</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">litToExpr</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">natVal</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">norml</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toNorm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.replace</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">litToExpr</span><span class=\"bp\">?</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"normalize\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">modifyTarget</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">toNorm</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">normalize</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Goal is</span>\n<span class=\"cm\">OfNat.ofNat (succ (succ zero)) + OfNat.ofNat (succ (succ zero)) ≠</span>\n<span class=\"cm\">  OfNat.ofNat (succ (succ (succ (succ (succ zero)))))</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>If I understand correctly, the <code>OfNat</code>s may be undesirable, but hopefully everything else is close and might be a starting point!</p>",
        "id": 395770134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696890094
    },
    {
        "content": "<p>I now wonder if <code>normalize</code> is a typo for <code>normalise</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 395770208,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696890140
    },
    {
        "content": "<p>Kevin, looking at your code, I see you didn't use my trick of defining <code>MyNat</code> using only axioms so that you don't have accidental <code>rfl</code>. Did you end deciding you'll really teach <code>rfl</code>?</p>",
        "id": 395770420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696890285
    },
    {
        "content": "<p>Oh I didn't write any of this stuff, Jon and/or Alex ported the entire game and then I started ripping up the levels but left the underlying infrastructure the same. <code>rfl</code> doesn't prove stuff like <code>a + 0 = a</code> because  they somehow disabled it in another way. I don't know the details. I would be fine with making things more axiomatic: I have definitely made a conscious decision not to explain that x + 0 = x can be proved by <code>rfl</code> (and indeed for some reason it can't).</p>",
        "id": 395771483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696891183
    },
    {
        "content": "<p>Maybe they changed a transparency setting.</p>",
        "id": 395771714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696891405
    },
    {
        "content": "<p>Where is the repo again?</p>",
        "id": 395771719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696891424
    },
    {
        "content": "<p>Erm...it's called NNG4...I just type that and my computer finds it (I'm in bed now and I can't look)</p>",
        "id": 395773396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696892790
    },
    {
        "content": "<p><a href=\"https://github.com/hhu-adam/NNG4\">https://github.com/hhu-adam/NNG4</a></p>",
        "id": 395773566,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696892967
    },
    {
        "content": "<p>Yes, Jon changed the transparency setting. And we still redefined <code>Nat</code> because the transparency setting alone didn't fully do the job. (Maybe some definitions on <code>Nat</code> are reducible?)</p>",
        "id": 395824253,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696923495
    }
]