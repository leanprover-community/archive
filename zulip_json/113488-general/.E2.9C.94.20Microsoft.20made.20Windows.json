[
    {
        "content": "<p>[soft question]<br>\nIsn't it weird that Lean is not optimized for Windows, considering that Lean is developed by Microsoft and Microsoft made Windows?</p>",
        "id": 340124341,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678199615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Replacing.20Git.2BGitHub/near/272992679\">said</a>:</p>\n<blockquote>\n<p>Also noting the obvious: <a href=\"https://i.imgur.com/XLuaF0h.png\">https://i.imgur.com/XLuaF0h.png</a></p>\n</blockquote>\n<p><a href=\"https://i.imgur.com/XLuaF0h.png\">I think this picture might be relevant.</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/XLuaF0h.png\" title=\"I think this picture might be relevant.\"><img src=\"https://uploads.zulipusercontent.net/0e420b71b1b759a5434ed254840b71ee0eff2a65/68747470733a2f2f692e696d6775722e636f6d2f584c75614630682e706e67\"></a></div>",
        "id": 340125668,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1678199897
    },
    {
        "content": "<p>What do you mean by \"not optimized\"?</p>",
        "id": 340127334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678200254
    },
    {
        "content": "<p>I am referring to frequent difficulties with installing Lean on Windows.</p>",
        "id": 340127514,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678200298
    },
    {
        "content": "<p>I don't remember having any difficulty... I think a lot of windows users have a much  lower tolerance for command line installation than Linux users</p>",
        "id": 340128189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678200460
    },
    {
        "content": "<p>Does that mean that Lean is not optimized for Windows users? Or that Windows users are not optimized for Lean? Or both?</p>",
        "id": 340128432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678200516
    },
    {
        "content": "<p>Doesn't vscode have popup buttons that appear to install everything (lean 3) for you anyway?</p>",
        "id": 340128748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678200604
    },
    {
        "content": "<p>It was meant to be a vague statement. What surprised me when I was starting (nearly two years ago) was that Lean didn't work on Windows natively.</p>",
        "id": 340128843,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678200621
    },
    {
        "content": "<p>I started two years ago and it worked \"natively\" for me...</p>",
        "id": 340128968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678200646
    },
    {
        "content": "<p>If you're referring to people not installing / using <code>leanproject</code> to get oleans... I think that was built by Patrick after Microsoft stopped developing Lean 3.</p>",
        "id": 340129200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678200708
    },
    {
        "content": "<p>I'd like to see the Windows (64-bit) installer for Lean 4 in the future.</p>",
        "id": 340129628,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1678200806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Microsoft.20made.20Windows/near/340128748\">said</a>:</p>\n<blockquote>\n<p>Doesn't vscode have popup buttons that appear to install everything (lean 3) for you anyway?</p>\n</blockquote>\n<p>This didn't work for me, but this is irrelevant. I am simply pointing out that, when you install Lean 3 or Lean 4 on Windows, it clearly doesn't come as Windows executables. It must be run in some Unix-like environment.</p>",
        "id": 340130165,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678200953
    },
    {
        "content": "<p>This is completely false</p>",
        "id": 340131536,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678201255
    },
    {
        "content": "<p>What am I missing?</p>",
        "id": 340131669,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678201285
    },
    {
        "content": "<p>I don't know where your theories are coming from, so I can't help you there</p>",
        "id": 340132113,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678201379
    },
    {
        "content": "<p>But the current installation pipeline on Windows roughly is a Powershell script downloading a native Rust executable downloading a native Lean executable</p>",
        "id": 340132333,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678201435
    },
    {
        "content": "<p>Ah sorry. I was wrong. I just had the impression that Lean doesn't come as a typical Windows program. Compare with C# developed by Microsoft, for example. You can download Mono for Linux and use most of the .NET development environment from on Linux, but Windows is clearly the primary target and it is where all parts of the ecosystem work.</p>",
        "id": 340132813,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678201545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Microsoft.20made.20Windows/near/340132333\">said</a>:</p>\n<blockquote>\n<p>But the current installation pipeline on Windows roughly is a Powershell script downloading a native Rust executable downloading a native Lean executable</p>\n</blockquote>\n<p>Can I also run <code>leanproject</code> or <code>lake</code> from the Windows command line?</p>",
        "id": 340133225,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678201635
    },
    {
        "content": "<p>Maybe I was running it via MINGW64 for no reason all the time!</p>",
        "id": 340133400,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678201678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Microsoft.20made.20Windows/near/340128968\">said</a>:</p>\n<blockquote>\n<p>I started two years ago and it worked \"natively\" for me...</p>\n</blockquote>\n<p>This is where I was wrong. I incorrectly thought I didn't have native Windows executables.</p>",
        "id": 340133629,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678201736
    },
    {
        "content": "<p>I don't know much about leanproject (and for the purposes of this thread have to point out that it is not an official Lean core project), but <code>lake</code> depends only on <code>git</code> being in the <code>PATH</code> afaik</p>",
        "id": 340134091,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678201834
    },
    {
        "content": "<p>So I can setup the Windows commandline to do all Lean stuff from there?</p>",
        "id": 340134362,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678201890
    },
    {
        "content": "<p>I believe so. And ideally you wouldn't even need any commandline for most tasks of course, e.g. by exposing them in vscode-lean4 instead</p>",
        "id": 340134979,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678202023
    },
    {
        "content": "<p>How can I test whether my current Lean setup uses a Windows native executable or something in WSL?</p>",
        "id": 340135849,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678202190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Microsoft.20made.20Windows/near/340129628\">said</a>:</p>\n<blockquote>\n<p>I'd like to see the Windows (64-bit) installer for Lean 4 in the future.</p>\n</blockquote>\n<p>Yeah. A typical Windows user wants to get a <code>.exe</code> installer which they click on and then just press <code>Next</code> several times until a window full of fancy animations pops up.</p>",
        "id": 340136831,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678202406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Microsoft.20made.20Windows/near/340133400\">said</a>:</p>\n<blockquote>\n<p>Maybe I was running it via MINGW64 for no reason all the time!</p>\n</blockquote>\n<p>Oh! I just learned that MinGW does not use WSL. It is ... just a Windows with Bash?</p>",
        "id": 340137146,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678202476
    },
    {
        "content": "<p>The only thing I know is that it is much much older than WSL.</p>",
        "id": 340137265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678202502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Microsoft.20made.20Windows/near/340132113\">said</a>:</p>\n<blockquote>\n<p>I don't know where your theories are coming from, so I can't help you there</p>\n</blockquote>\n<p>I get it now. It was one of the moments when I was so wrong that it was really difficult for anyone to put a finger on where I got wrong.</p>",
        "id": 340137662,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678202584
    },
    {
        "content": "<p>TLDR: I was wrong about Lean not being a native Windows app. I was possibly also wrong about Windows users having frequent difficulties with installing Lean.</p>",
        "id": 340156840,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678207070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 340156920,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678207084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Microsoft.20made.20Windows/near/340133400\">said</a>:</p>\n<blockquote>\n<p>Maybe I was running it via MINGW64 for no reason all the time!</p>\n</blockquote>\n<p>It should be noted MinGW produces native Windows executables (which are this usable without it). That is one of its primary benefits over something like WSL. MinGW is essentially just Windows ports of POSIX system libraries with a POSIX shell (by default, Bash).</p>",
        "id": 352076428,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682260678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Microsoft.20made.20Windows/near/340136831\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Microsoft.20made.20Windows/near/340129628\">said</a>:</p>\n<blockquote>\n<p>I'd like to see the Windows (64-bit) installer for Lean 4 in the future.</p>\n</blockquote>\n<p>Yeah. A typical Windows user wants to get a <code>.exe</code> installer which they click on and then just press <code>Next</code> several times until a window full of fancy animations pops up.</p>\n</blockquote>\n<p>Windows installers for programming languages are a rare commodity. Languages which have them tend to have acquired them relatively late in their lifetime (e.g., Haskell, Python) and sometimes they are developed by a third party (e.g., Ruby).</p>",
        "id": 352077325,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682261022
    },
    {
        "content": "<p><a href=\"https://github.com/coq/platform/releases\">But Coq has it!</a></p>",
        "id": 352086513,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682264251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417769\">@Bulhwi Cha</span> Doesn't Coq come with its editor (CoqIDE) for its interactivity? So, it is kind of expected it would have an installer for that (e.g., to add it to Start Menu etc.). Lean delegates that to a standard code editor instead which has its own installer (e.g. VSCode), hence it following the conventions of young scripting languages rather than editors and using a command line tool to install toolchains (e.g., like nvm for Node, rvm for Ruby, and virtualenv/venv for Python).</p>\n<p>However, I do think an installer would be nice for beginners! It would also make Lean appeal more to those just getting started with programming and/or the command line.</p>",
        "id": 352988276,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682553079
    },
    {
        "content": "<p>I would love to see a command line free install of lean 4 project with mathlib dependency + mathlib + oleans. Maths students using the command line often don't know what directory they're in (or even that they're in a directory) and don't know how to find out. I think that CS people really underestimate the burden of a command line install to the average mathematician.</p>",
        "id": 353123914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682579014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Microsoft.20made.20Windows/near/352988276\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> Doesn't Coq come with its editor (CoqIDE) for its interactivity? So, it is kind of expected it would have an installer for that (e.g., to add it to Start Menu etc.). Lean delegates that to a standard code editor instead which has its own installer (e.g. VSCode), hence it following the conventions of young scripting languages rather than editors and using a command line tool to install tollchains (e.g., like nvm for Node, rvm for Ruby, and virtualenv/venv for Python).</p>\n<p>However, I do think an installer would be nice for beginners! It would also make Lean appeal more to those just getting started with programming and/or the command line.</p>\n</blockquote>\n<p>I don't think very many people actually use CoqIDE, they mostly use VSCode or Emacs</p>",
        "id": 353140784,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1682581357
    },
    {
        "content": "<p>I would guess some beginners use CoqIDE. But, as far as I could see, no expert would ever use it.</p>",
        "id": 353150046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682582496
    },
    {
        "content": "<p>I don't like the argument that mathematicians aren't skilful enough with computers very much. If the dream is that formalized mathematics will grow bigger and bigger, then an alternative approach is to fully embrace it.</p>\n<p>Not that mathematicians should become first class programmers. But I think it would be extremely helpful to understand at least the very basics about computers, just a little bit beyond the average lay person:</p>\n<ul>\n<li>What's an OS?</li>\n<li>What's a graphical interface?</li>\n<li>What's a terminal and how to interact with it?</li>\n<li>...</li>\n</ul>\n<p>Note: I am NOT advocating for a crystalized UX. I do think that the setup could be smoother. It's just hard to get it prioritized and implemented</p>",
        "id": 353533285,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1682637130
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>, but the reality is that a lot of mathematicians don't want to learn these.</p>",
        "id": 353534611,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682637377
    },
    {
        "content": "<p>The alternative is to make Lean + mathlib <em>so appealing</em> to mathematicians that they are willing to overcome their hesitation or lack of knowledge about using computers.</p>",
        "id": 353544202,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682639337
    },
    {
        "content": "<p>But how? Most mathematicians don't know type theory, so Lean's foundation alone becomes an obstacle to making Lean and Mathilb appealing to them. They also don't want to write formal proofs; they think informal proofs are rigorous enough and more intuitive than formal ones.</p>",
        "id": 353566990,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682643821
    },
    {
        "content": "<p>most mathematicians do not care about foundations, so type theory is not a real obstacle. also as Kevin never gets tired of saying it is a bad idea to pitch interactive proof assistants solely for correctness reasons.</p>",
        "id": 353574096,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1682645096
    },
    {
        "content": "<p>My reasons that it could appeal to mathematicians:</p>\n<ol>\n<li>potential for better exposition (this could be a near-term reality with <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  and <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s recent work).</li>\n<li>improvements in pedagogical practice by getting students to better understand things like what the <em>local context</em> or <em>goal</em> is at a given point in the proof. This is very hard to teach without something like Lean because it's just too much information to write down at every step of a proof.</li>\n<li>It's fun to formalize (admittedly, this may not be for everyone)</li>\n<li>reduce the work required / change the scope of the referee process (this is an <em>extremely</em> long term goal, so I don't expect to win over many mathematicians with this right now).</li>\n</ol>\n<p>I think Patrick wrote something nice not long ago about reasons mathematicians should be interested in formalization, but I can't seem to find the link to it right now.</p>",
        "id": 353576329,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682645372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Microsoft.20made.20Windows/near/353574096\">said</a>:</p>\n<blockquote>\n<p>most mathematicians do not care about foundations, so type theory is not a real obstacle.</p>\n</blockquote>\n<p>The real obstacle is that \"the math in Mathlib <em>looks</em> so much different from the math we learned.\" I think type theory makes this problem worse.</p>",
        "id": 353580690,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682645923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Microsoft.20made.20Windows/near/353576329\">said</a>:</p>\n<blockquote>\n<p>I think Patrick wrote something nice not long ago about reasons mathematicians should be interested in formalization, but I can't seem to find the link to it right now.</p>\n</blockquote>\n<ul>\n<li>Text: <a href=\"https://www.imo.universite-paris-saclay.fr/~patrick.massot/files/exposition/why_formalize.pdf\">https://www.imo.universite-paris-saclay.fr/~patrick.massot/files/exposition/why_formalize.pdf</a></li>\n<li>Talk: <a href=\"https://youtu.be/rRGh97sOtKE\">https://youtu.be/rRGh97sOtKE</a><div class=\"youtube-video message_inline_image\"><a data-id=\"rRGh97sOtKE\" href=\"https://youtu.be/rRGh97sOtKE\"><img src=\"https://uploads.zulipusercontent.net/972220e83079030a4c516e7d2482f8f710639359/68747470733a2f2f692e7974696d672e636f6d2f76692f725247683937734f744b452f64656661756c742e6a7067\"></a></div></li>\n</ul>",
        "id": 353590270,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682647815
    },
    {
        "content": "<p>I think that type theory is in some sense closer to what mathematicians do than set theory foundations (story time: I once saw a (pure maths) talk where there was the expression <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>j</mi><mo>∈</mo><mn>2</mn></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{j \\in 2} f(j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> (for some complicated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>), while this is obviously correct in set theory, it is very stupid).<br>\nNobody would care if it looks very different if formalization would make them prove theorems faster/more efficient/etc, so the underlying problem is motivation, not the ITP</p>",
        "id": 353590641,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1682647903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Microsoft.20made.20Windows/near/353590641\">said</a>:</p>\n<blockquote>\n<p>Nobody would care if it looks very different if formalization would make them prove theorems faster/more efficient/etc, so the underlying problem is motivation, not the ITP</p>\n</blockquote>\n<p>Groundbreaking mathematical results discovered using proof assistants also may motivate more mathematicians to formalize mathematics.</p>",
        "id": 353592965,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682648381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Microsoft.20made.20Windows/near/353590641\">said</a>:</p>\n<blockquote>\n<p>I think that type theory is in some sense closer to what mathematicians do than set theory foundations (story time: I once saw a (pure maths) talk where there was the expression <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>j</mi><mo>∈</mo><mn>2</mn></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{j \\in 2} f(j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> (for some complicated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>), while this is obviously correct in set theory, it is very stupid).</p>\n</blockquote>\n<p>By the way, I want some set theory where not every mathematical object is a set. I don't like constructing the natural numbers as sets. Perhaps <a href=\"https://plato.stanford.edu/entries/quine-nf/\">Quine's New Foundation</a> is what I'm looking for.</p>",
        "id": 353595285,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682648880
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>In set theory, if <code>a ∈ α</code> and <code>α = β</code>, then it follows that <code>a ∈ β</code>. But in type theory, if <code>a : α</code> and <code>h : α = β</code>, then <code>a : β</code> will usually not typecheck directly, so you need to embed <code>a</code> in type <code>β</code> as <code>cast h a : β</code>. (This explanation is excerpted from the docstring for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cast#doc\">docs4#cast</a>.) In this regard at least, I think set theory is closer to what mathematicians do than type theory. Both foundations have some quirks; we need something better.</p>",
        "id": 353623275,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682654454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Microsoft.20made.20Windows/near/353590641\">said</a>:</p>\n<blockquote>\n<p>I think that type theory is in some sense closer to what mathematicians do than set theory foundations (story time: I once saw a (pure maths) talk where there was the expression <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>j</mi><mo>∈</mo><mn>2</mn></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{j \\in 2} f(j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> (for some complicated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>), while this is obviously correct in set theory, it is very stupid).</p>\n</blockquote>\n<p>This doesn't even look that strange to me. In category theory <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn mathvariant=\"bold\">2</mn></mrow><annotation encoding=\"application/x-tex\">\\bf 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">2</span></span></span></span></span> is even a category with two objects in it, so it's not that weird to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>∈</mo><mn mathvariant=\"bold\">2</mn></mrow><annotation encoding=\"application/x-tex\">X\\in\\bf 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">2</span></span></span></span></span> with that context.</p>",
        "id": 353648349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682659177
    },
    {
        "content": "<p>and of course in set theory it works out nicely to mean what you want it to mean</p>",
        "id": 353648467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682659206
    },
    {
        "content": "<p>People sometimes get hung up on this kind of \"junk question\" about the \"elements\" of 2, but if you just read it as notation without an ontological commitment it's not particularly unclear what it is supposed to mean</p>",
        "id": 353648969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682659298
    },
    {
        "content": "<p>When I taught combinatorics, I decided to avoid this issue and write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> for a set with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> elements (I think I chose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,\\dots,n-1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> to be consistent with ordinals). Maybe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">[n]=n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, maybe not, but in any case it's an easy-to-write reminder \"now this is a set\" (the informal type of the expression is modified).</p>\n<p>You do sort of have to be careful with whether you want the number to be a set or not, since there are algebraic notations on sets themselves. For example with Minkowski addition we get: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>2</mn><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo>+</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo>+</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">}</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">2 + 2 = \\{0,1\\} + \\{0,1\\} = \\{0+0,1+0,0+1,1+1\\}=\\{0,1,2\\}=3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>.</p>\n<p>This fact is not so surprising if it's written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[2]+[2]=[3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span> instead.</p>",
        "id": 353723928,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682670536
    },
    {
        "content": "<p>BTW installing Agda in Windows was much worse!</p>",
        "id": 355361642,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683103458
    }
]