[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Currently <code>exists_congr</code> can not be tagged with the <code>gcongr</code> attribute. Could this possibly be an extension, or is that out of scope?</p>",
        "id": 398284522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698152497
    },
    {
        "content": "<p>This is probably because <code>Exists</code> is not applied to a variable <code>p</code>, but <code>fun x =&gt; p x</code>. In <a href=\"https://github.com/leanprover-community/mathlib4/blob/b5128f3cea63ba2020dcb5c5294bfa9a6fad495f//Mathlib/MeasureTheory/Integral/Lebesgue.lean#L103-L106\">some places</a> I added a reformulated lemma to tag as <code>@[gcongr]</code>.</p>",
        "id": 398292016,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698154966
    },
    {
        "content": "<p>It would be nice if <code>@[gcongr]</code> can just handle an argument <code>fun x =&gt; p x</code> as the variable <code>p</code>.</p>",
        "id": 398292141,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698155001
    },
    {
        "content": "<p>Currently, no equality lemmas at all are tagged with <code>@[gcongr]</code>.  It seems to me that it would lead to unpredictable behaviour to tag only a few.</p>\n<p>Ideally we would have the right equality analogue of <code>gcongr</code> implemented (see <a href=\"#narrow/stream/287929-mathlib4/topic/gcongr.20handling.20equality.3F/near/397905493\">my comments a few days ago</a>, I think it should be something between <code>congrm</code> and <code>congr!</code>) and then <code>gcongr</code> can just do exactly that in the equality case.</p>",
        "id": 398294055,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698155610
    },
    {
        "content": "<p>(so maybe we should enforce an informal rule, \"equalities get tagged <code>@[congr]</code> not <code>@[gcongr]</code>\")</p>",
        "id": 398294484,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698155736
    },
    {
        "content": "<p>Why do we need to distinguish equality from other relations? As an entitled user, I’d probably prefer to have one tactic and one attribute that works throughout. Also, I could imagine that some congruence lemmas about some (equivalence-like) relation could have equality in the assumptions, and vice versa.</p>",
        "id": 398295302,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698155995
    },
    {
        "content": "<p>Congruence lemmas for equality are weird!  There's some magic I don't understand in the <a href=\"https://github.com/leanprover/lean4/blob/819b5eaceaa433ea9105d7af3582a45d8f5a00e9/src/Lean/Meta/CongrTheorems.lean\">core implementation</a> of <code>congr</code> which generates one for every function of every arity.  So you need to hook into that (possibly superseding it in certain cases with tagged <code>@[congr]</code> lemmas), rather than just curating a list specific to the relation at hand.</p>",
        "id": 398295714,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698156107
    },
    {
        "content": "<p>Certainly I would prefer <code>gcongr</code> also handle equality, I just don't currently have the metaprogramming chops to do it right.</p>",
        "id": 398295833,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698156133
    },
    {
        "content": "<p>That’s of course fair, limited development resources is a perfectly valid justification!</p>",
        "id": 398297043,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698156534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I think it's worth knowing that the <code>congr</code> tactic is taking advantage of the existing congruence lemma generator that's designed for <code>simp</code>, and the <code>congr</code> tactic is a nice application of those congruence lemmas. These congruence lemmas though are specialized to <code>simp</code>'s design, where you want to make sure the arguments are Eqs rather than HEqs as much as possible, since <code>simp</code> can only do further rewrites where there are Eq arguments. It even prevents certain arguments from being rewritable (they become \"fixed\") to ensure later arguments are Eqs. These sorts of things probably account for a lot of the complexity you're seeing.</p>",
        "id": 398324809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698165307
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/819b5eaceaa433ea9105d7af3582a45d8f5a00e9/src/Lean/Meta/CongrTheorems.lean#L55-L113\"><code>Lean.Meta.mkHCongrWithArity</code></a> from core is another congruence lemma generator that generates Eqs or HEqs, depending on which is needed depending on the type of the function. The more dependent the function's type is, the more HEqs you'll see.</p>\n<p>Mathlib also has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkHCongrWithArity%27#doc\">docs#Lean.Meta.mkHCongrWithArity'</a>, which is a wrapper around <code>mkHCongrWithArity</code> that pre-proves certain Eqs using <code>Subsingleton</code> lemmas (useful for <code>Decidable</code> and <code>Fintype</code> for example). This function is used deep down by <code>congrm</code> (in particular, by the <code>congr(...)</code> quotations).</p>\n<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkRichHCongr#doc\">docs#Lean.Meta.mkRichHCongr</a>, which is similar to <code>mkHCongrWithArity'</code> but in the lemma each argument gets all the relevant previous Eqs/HEqs for convenience. This one is used by <code>congr!</code>.</p>",
        "id": 398324818,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698165311
    },
    {
        "content": "<p>The <code>congr</code> tactic doesn't do anything to the goal <code>Fintype.card X = Fintype.card Y</code> since the congruence lemma generator for <code>simp</code> doesn't generate a lemma with a <code>X = Y</code> goal. The <code>congr!</code> tactic should since <code>mkRichHCongr</code> will generate a lemma with a <code>X = Y</code> goal (and it can also eliminate the <code>HEq</code> goal for the <code>Fintype</code> instances automatically).</p>",
        "id": 398325386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698165546
    }
]