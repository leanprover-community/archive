[
    {
        "content": "<p>Consider this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.padic_val</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">padic_val_nat.pow</span> <span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even_two_mul</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- leaves goal `fact (nat.prime p)`</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">fact.out</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_nat.pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hp</span> <span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even_two_mul</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Why does <code>rw</code> fail to find the instance when it is clearly available in the context?</p>",
        "id": 359937061,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684605378
    },
    {
        "content": "<p>Perhaps lean does not know exactly what instance it needs when it's looking for it</p>",
        "id": 359937375,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684605562
    },
    {
        "content": "<p><code>simp_rw</code> works, BTW.</p>",
        "id": 359937730,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684605709
    },
    {
        "content": "<p><code>exact ⟨fact.out _⟩</code> is a worse way of spelling <code>apply_instance</code></p>",
        "id": 359939557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684606500
    },
    {
        "content": "<p>I know, buit that's not my point here.</p>",
        "id": 359940270,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684606792
    },
    {
        "content": "<p><code>rw @padic_val_nat.pow p _ _ 2 h</code> also works here</p>",
        "id": 359940502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684606890
    },
    {
        "content": "<p>So the problem is that Lean does not know <code>p</code> in time to look for the instance</p>",
        "id": 359940538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684606904
    },
    {
        "content": "<p>Why is <code>simp_rw</code> smarter than <code>rw</code> in this regard?<br>\nI assume <code>rw</code> could basically run <code>try {apply_instance}</code> after the fact on all unresolved instances to deal with this.</p>",
        "id": 359942703,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684607962
    },
    {
        "content": "<p>If it did this then 99% of the time it would be wasting its time, so it would just make things slower. It's all about the order in which things happen, the typeclass system runs, the unification system runs, some combination works most of the time, that's what we end up with.</p>",
        "id": 359953483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684613867
    },
    {
        "content": "<p>I'd think it would not need to waste time if there are no instance goals left (which is usually the case).</p>",
        "id": 359953758,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684614029
    },
    {
        "content": "<p>At the end of the day people have thought very hard about <code>rw</code> and it's very unlikely that anyone is changing the algorithm; any changes to the algorithm would have huge ramifications across mathlib I should think. If you asked a computer scientist I should think that they would tell you that the whole <code>fact</code> thing is a code smell anyway, and the typeclass inference shouldn't be being used to carry around hypotheses that aren't actually typeclasses. In fact <code>fact</code> was a hack made up by either the perfectoid project or LTE (I forgot which) but I remember being warned about it at the time. Probably a better solution here is just to make <code>p</code> explicit in the statement of the lemma, to mitigate the code smell.</p>",
        "id": 359955449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684615067
    },
    {
        "content": "<p>Well, these <code>[fact p.prime]</code> assumptions are all over mathlib by now...</p>",
        "id": 359957261,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684616147
    },
    {
        "content": "<p>Sure -- and I'm saying that perhaps this means that the usual algorithm (\"make x implicit in a theorem if it's an iff statement and x is mentioned on both sides of the iff\") for figuring out whether an input is implicit or explicit might not apply in this situation.</p>",
        "id": 359957574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684616341
    },
    {
        "content": "<p>Anyway, in the concrete case, would you recommed using <code>rw [... @name p _ _ ...]</code>, <code>rw [... name ...], ..., apply_instance</code>, or <code>simp_rw [.... name ...]</code> ? (In my PR <a href=\"https://github.com/leanprover-community/mathlib/pull/19054\">#19054</a>, I settled for <code>simp_rw</code>, as this seems the easiest to read.)</p>",
        "id": 359958013,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684616603
    },
    {
        "content": "<p>This happens sometimes in Lean 3 (AFAIR, not in Lean 4) when Lean doesn't know all arguments of the typeclass it needs to generate at some specific moment (not sure which one) of  unification of your lemma with the goal.</p>",
        "id": 360574686,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684857432
    },
    {
        "content": "<p>Supplying more arguments in <code>rw [my_lemma _]</code> usually helps. Another standard workaround is to use <code>apply_instance</code> after <code>rw</code>. I remember writing these <code>apply_instance</code>s in Lean 3 and removing them while porting.</p>",
        "id": 360575028,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684857505
    },
    {
        "content": "<p>As mentioned earlier, <code>simp_rw</code> seems to be an alternative, too (when it can be used).</p>",
        "id": 360575315,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684857576
    }
]