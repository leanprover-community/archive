[
    {
        "content": "<p>Is there a variant on the ring tactics that understand division?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span> <span class=\"c1\">-- fails to make any progress, but also does not produce a failure message</span>\n</code></pre></div>",
        "id": 391019936,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694726479
    },
    {
        "content": "<p>You might want to try the <code>field_simp</code> tactic. No idea if it makes progress here though.</p>",
        "id": 391020112,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1694726548
    },
    {
        "content": "<p>It doesn't, because this is over the natural numbers and (as the name suggests) <code>field_simp</code> works over a field. But is this equality even true over the natural numbers?</p>",
        "id": 391020397,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1694726705
    },
    {
        "content": "<p>The <code>slim_check</code> tactic reports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">===================</span>\n<span class=\"n\">Found</span> <span class=\"n\">problems</span><span class=\"bp\">!</span>\n<span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"n\">issue</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">hold</span>\n<span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"n\">shrinks</span><span class=\"o\">)</span>\n<span class=\"c1\">-------------------</span>\n</code></pre></div>",
        "id": 391020472,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1694726754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/ring.20tactic.20and.20division/near/391020112\">said</a>:</p>\n<blockquote>\n<p>You might want to try the <code>field_simp</code> tactic. No idea if it makes progress here though.</p>\n</blockquote>\n<p>Doesn't seem to. I found <code>mul_div_left_comm</code> which seems to be the correct shape, but it is complaining that it can't find an instance of <code>DivisionCommMonoid ℕ</code>.</p>",
        "id": 391020539,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694726775
    },
    {
        "content": "<p>So the error is basically saying that division on the natural numbers is not very well behaved, and <code>slim_check</code> tells us your goal as stated is actually false :( If you try to prove it over <code>ℚ</code> instead, then <code>field_simp</code> works fine.</p>",
        "id": 391020814,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1694726900
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 391020903,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694726951
    },
    {
        "content": "<p>ah ok - </p>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/ring.20tactic.20and.20division/near/391020814\">said</a>:</p>\n<blockquote>\n<p>So the error is basically saying that division on the natural numbers is not very well behaved, and <code>slim_check</code> tells us your goal as stated is actually false :( If you try to prove it over <code>ℚ</code> instead, then <code>field_simp</code> works fine.</p>\n</blockquote>\n<p>Got it! I my specific case, <code>c</code> (in fact, all the numbers) are guaranteed greater than 1, but I guess even this may not help.</p>",
        "id": 391020919,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694726959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  ?a * (?b / ?c) = ?b * (?a / ?c)</p>",
        "id": 391020964,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694726982
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Basic.html#mul_div_left_comm\">mul_div_left_comm</a></p>",
        "id": 391020969,
        "sender_full_name": "loogle",
        "timestamp": 1694726987
    },
    {
        "content": "<p>I thought there was a nat lemma for this :/ but seems not</p>",
        "id": 391021043,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694727006
    },
    {
        "content": "<p>most things about nat division are rolled by hand and have various divisibility hypotheses</p>",
        "id": 391021063,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694727018
    },
    {
        "content": "<p>Is this version at least true? <code>(a b c : ℕ) : 0 &lt; c -&gt; a * (b / c) = b * (a / c)</code></p>",
        "id": 391021121,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694727058
    },
    {
        "content": "<p>no, try 3 * 2 / 3 vs 2 * 3/3</p>",
        "id": 391021163,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694727084
    },
    {
        "content": "<p>nat division is the floor of the normal division</p>",
        "id": 391021174,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694727095
    },
    {
        "content": "<p>Nothing is true about natural number subtraction and division.</p>",
        "id": 391021179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694727099
    },
    {
        "content": "<p>Eric, that's a really weird way of stating it. It is the quotient in Euclidean division.</p>",
        "id": 391021260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694727125
    },
    {
        "content": "<p>But there is a reason why people invented integers and rational numbers.</p>",
        "id": 391021284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694727142
    },
    {
        "content": "<p>Thanks for the help - I now understand why I should be doing this bit in ℚ :D It is a little alarming that part of my larger calculation will be going via ℚ but then will have an ultimate result guaranteed to be in ℕ -- I guess I will just have to add in some extra machinery to convince me that's correct.</p>",
        "id": 391021750,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694727382
    },
    {
        "content": "<p>See also the <code>qify</code> tactic which tries to automatically handle the transfer from Z to Q, assuming you have the right divisibility statements locally for it to make sense</p>",
        "id": 391135353,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694774409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/ring.20tactic.20and.20division/near/391135353\">said</a>:</p>\n<blockquote>\n<p>See also the <code>qify</code> tactic which tries to automatically handle the transfer from Z to Q, assuming you have the right divisibility statements locally for it to make sense</p>\n</blockquote>\n<p>Is there some way to get a list of all available tactics? I keep on discovering there are more of them!</p>",
        "id": 391137388,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694775119
    },
    {
        "content": "<p>I don’t know if there’s a more complete version, but I’m going by this one: <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md\">https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md</a></p>",
        "id": 391140895,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1694776385
    }
]