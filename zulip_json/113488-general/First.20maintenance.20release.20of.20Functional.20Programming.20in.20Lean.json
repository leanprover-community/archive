[
    {
        "content": "<p>I'm happy to announce the first maintenance release of <em>Functional Programming in Lean</em>, an introductory book on using Lean as a programming language, which is intended to serve both programmers wanting to get into theorem proving and mathematicians wondering what this monad transformer thing is and why it's helpful for proof automation. In this release, a number of mistakes have been fixed and the text has been brought up to date with the changes in Lean version 4.1.0.</p>\n<p>It's here: <a href=\"https://lean-lang.org/functional_programming_in_lean/\">https://lean-lang.org/functional_programming_in_lean/</a></p>",
        "id": 394588026,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1696323001
    },
    {
        "content": "<p>Thank you very much for this update; without FPIL, I would have never gotten around to using Lean.</p>",
        "id": 394597157,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696326416
    },
    {
        "content": "<p>I am posting here a question about Section 2.2, but I wonder whether this is the right place (<span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> : should FPIL have a dedicated stream?). I start by saying  that I am a complete newby insofar \"programming\" is concerned, and I find the book deeply inspiring, incredibly well written and very clear: I am really sure my misunderstanding comes from my utter ignorance.</p>\n<p>I am trying to understand the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdout</span>\n  <span class=\"n\">stdout.putStrLn</span> <span class=\"s2\">\"How would you like to be addressed?\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">input.dropRightWhile</span> <span class=\"n\">Char.isWhitespace</span>\n  <span class=\"n\">stdout.putStrLn</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {name}!\"</span>\n</code></pre></div>\n<p>and I am puzzled about the usefulness of the first two lines. AFAIU, at the point where <code>let stdin ← IO.getStdin</code> is executed, no input has been provided (and similarly,  when <code>  let stdout ← IO.getStdout</code> is executed, no output exists yet). So, I do not understand what <code>stdin</code> and <code>stdout</code> really are after this execution. I suspect that (part of) my misunderstanding comes from a confusion about this <code>IO</code> business. In particular, although I have appreciated the \"cook <em>vs.</em> counter worker\" metaphor in 2.1,  I have the impression that no definition of what an \"effect\" or \"side effect\" was given. So the sentence</p>\n<blockquote>\n<p>The cook's notes represent IO actions that are produced by evaluating Lean expressions, and the counter worker's replies are the values that are passed back from effects.</p>\n</blockquote>\n<p>is very dense for me: I really do not know neither what IO actions nor what effects are.</p>",
        "id": 399456709,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698743545
    },
    {
        "content": "<blockquote>\n<p>So, I do not understand what stdin and stdout really are after this execution.</p>\n</blockquote>\n<p>They are \"handles\", to the input and output streams respectively. This controls whether your <code>putStrLn</code> goes to the console output, as compared to the output of a child process, a file, or some other thing</p>",
        "id": 399457779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698743983
    },
    {
        "content": "<p>in this context an \"effect\" is something like a change in the state of the real world, e.g. the words <code>How would you like to be addressed?</code> appearing on your console</p>",
        "id": 399458100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744112
    },
    {
        "content": "<p>IO actions are the elements of type <code>IO A</code>, they represent instructions to do a thing in the real world (an effect) and then report a result back (of type <code>A</code>)</p>",
        "id": 399458412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744223
    },
    {
        "content": "<p>for example <code>IO.getStdout</code> is an IO action which (describes the act of) going and retrieving a handle to the current console output stream, and <code>stdout.putStrLn \"How would you like to be addressed?\"</code> is an IO action which (describes the act of) printing <code>How would you like to be addressed?</code> to the stream identified by the <code>stdout</code> handle</p>",
        "id": 399458971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744431
    },
    {
        "content": "<p>Ah ok. So the actions that print the lines \"Hi there!\" into a .tex file or into a .txt file would both be represented by some IO term (probably of different, but similar type)?</p>",
        "id": 399459186,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698744535
    },
    {
        "content": "<p>they would probably have the same type, namely <code>IO Unit</code></p>",
        "id": 399459588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744703
    },
    {
        "content": "<p>which is the type of all IO actions that do a thing in the real world and return no result</p>",
        "id": 399459665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744726
    },
    {
        "content": "<p>they would have different bodies though (they would be different terms of this type)</p>",
        "id": 399459714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744749
    },
    {
        "content": "<p>Ah, so \" writing something in the console/in a text file\" is <em>not</em> a result?</p>",
        "id": 399459729,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698744754
    },
    {
        "content": "<p>no, the result is the pure value produced as a result of the action, this is usually bound to a variable with the <code>let x &lt;- action</code> syntax</p>",
        "id": 399459817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744792
    },
    {
        "content": "<p>so <code>IO.getStdout</code> is an action with a result (the output stream which we bind to variable <code>stdout</code>), while <code>stdout.putStrLn \"...\"</code> has no result (or rather, it has a result of type <code>Unit</code> that we don't bother to bind to a variable)</p>",
        "id": 399459984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744859
    },
    {
        "content": "<p>it has an <em>effect</em> on the real world, but it doesn't pass any pure values back to the code</p>",
        "id": 399460061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698744892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399460061\">said</a>:</p>\n<blockquote>\n<p>it has an <em>effect</em> on the real world, but it doesn't pass any pure values back to the code</p>\n</blockquote>\n<p>Oh, I guess that the \"back\" in this sentence is crucial.</p>",
        "id": 399460170,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698744927
    },
    {
        "content": "<p>Do you have an example of an action of type <code>IO Nat</code>, if that makes any sense at all?</p>",
        "id": 399460207,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698744946
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">IO.getNumHeartbeats</span>\n</code></pre></div>\n<p>this gets some global state (the current state of the heartbeat counter)</p>",
        "id": 399460433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745024
    },
    {
        "content": "<p>Anything with some kind of nondeterminism or real-world-state dependence is going to be an <code>IO A</code></p>",
        "id": 399460558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745076
    },
    {
        "content": "<p>because lean functions have to be pure functions, you can't have a <code>Unit -&gt; Nat</code> function which returns a different value every time you run it</p>",
        "id": 399460688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745111
    },
    {
        "content": "<p>but <code>foo</code> is effectively that, if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"{x} =?= {y}\"</span>\n</code></pre></div>\n<p>then there is no guarantee that <code>x</code> and <code>y</code> end up with the same value</p>",
        "id": 399460856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745178
    },
    {
        "content": "<p>Oh, I see. So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>has type <code>Nat -&gt; Nat</code> while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">IO.getWeekNumber</span>\n</code></pre></div>\n<p>(supposing that <code>IO.getWeekNumber</code> exists, for the sake of this example) is of type <code>Nat -&gt; IO Nat</code>?</p>",
        "id": 399461044,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698745260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399460688\">said</a>:</p>\n<blockquote>\n<p>because lean functions have to be pure functions, you can't have a <code>Unit -&gt; Nat</code> function which returns a different value every time you run it</p>\n</blockquote>\n<p>Can you speculate a bit about your use of \"pure\" here? What kind of gadget would you qualify as \"non-pure function\"?</p>",
        "id": 399461469,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698745420
    },
    {
        "content": "<p>You also have to use bind in order to \"sequence\" IO actions, unlike pure functions. <code>n + IO.getWeekNumber</code> does not typecheck because <code>IO.getWeekNumber</code> has type <code>IO Nat</code>, not <code>Nat</code>. The correct way to write a function of type <code>Nat -&gt; IO Nat</code> there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.getWeekNumber</span>\n  <span class=\"n\">return</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>where <code>do</code> is sugar for a usage of the <code>bind</code> function, which is used to compose <code>IO</code> actions together</p>",
        "id": 399461490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745432
    },
    {
        "content": "<p>A \"pure function\" is one whose type is not a monad thing like <code>A -&gt; IO B</code>, it's just <code>A -&gt; B</code></p>",
        "id": 399461706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399461490\">said</a>:</p>\n<blockquote>\n<p>You also have to use bind in order to \"sequence\" IO actions, unlike pure functions. <code>n + IO.getWeekNumber</code> does not typecheck because <code>IO.getWeekNumber</code> has type <code>IO Nat</code>, not <code>Nat</code>. The correct way to write a function of type <code>Nat -&gt; IO Nat</code> there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.getWeekNumber</span>\n  <span class=\"n\">return</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>where <code>do</code> is sugar for a usage of the <code>bind</code> function, which is used to compose <code>IO</code> actions together</p>\n</blockquote>\n<p>Wow, this is enlightening. Thanks!</p>",
        "id": 399461793,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698745530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399461706\">said</a>:</p>\n<blockquote>\n<p>A \"pure function\" is one whose type is not a monad thing like <code>A -&gt; IO B</code>, it's just <code>A -&gt; B</code></p>\n</blockquote>\n<p>But then the term you constructed above of type <code>Nat -&gt; IO Nat</code> is what? Not a function?</p>",
        "id": 399461906,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698745564
    },
    {
        "content": "<p>You can think of <code>A -&gt; IO B</code> as a pure function, but it is a pure function for producing an \"IO action\" of type <code>IO B</code>, it doesn't actually do the thing that this action describes. So for the same input it's always the same IO action output, but the resulting IO action may have different results when actually performing its effect using <code>#eval</code> or similar</p>",
        "id": 399461916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745569
    },
    {
        "content": "<p>Ah! Got it!</p>",
        "id": 399462004,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698745607
    },
    {
        "content": "<p>an <code>IO Nat</code> is not a number, it is instructions for how you might get a number if you ask the universe to help</p>",
        "id": 399462026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745618
    },
    {
        "content": "<p>Yes, I see now. You are saying that from the lean-theoretic point of view it is a honest function assigning to every input the same output, but this output is the action, not the <em>result</em> of the action. And the same action can yield different results when performed at different moments, for instance. Right?</p>",
        "id": 399462164,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698745680
    },
    {
        "content": "<p>Thanks! I can dive back in some exercice and try not to drown... <span aria-label=\"sea lion\" class=\"emoji emoji-1f9ad\" role=\"img\" title=\"sea lion\">:sea_lion:</span></p>",
        "id": 399462447,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698745789
    },
    {
        "content": "<p>(As an aside: is IO short for Input-Output, or completely unrelated?)</p>",
        "id": 399462563,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698745821
    },
    {
        "content": "<p>it is indeed input/output</p>",
        "id": 399462823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698745922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399461044\">said</a>:</p>\n<blockquote>\n<p>Oh, I see. So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>has type <code>Nat -&gt; Nat</code> while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">IO.getWeekNumber</span>\n</code></pre></div>\n<p>(supposing that <code>IO.getWeekNumber</code> exists, for the sake of this example) is of type <code>Nat -&gt; IO Nat</code>?</p>\n</blockquote>\n<p>Filippo -- did you know that <code>WithBot</code> is a monad? You can think of <code>WithBot Nat</code> as \"naturals + <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span>\", but you can also think of them as \"a Nat, or perhaps a failure\" and then you can just add these things up, but failure + x = failure. But there's a coercion from Nat to WithBot Nat and in the context of monads I think this is function is called <code>pure</code>. <code>WithBot</code> (which is really <code>Option</code>) is a great beginner example of a monad. It also shows that you can't get out of the monad: if you have a term of type <code>WithBot Nat</code>you can't just say \"OK but what is the actual Nat?\" because the answer might be \"oh we failed in the calculation 10 lines up, so there is no Nat any more\"</p>",
        "id": 399525061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698760087
    },
    {
        "content": "<p>Oh, never though at <code>WithBot</code> as a monad! Thanks for the insight.</p>",
        "id": 399537290,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698763748
    },
    {
        "content": "<p>Out of curiosity, how ready is Lean for general purpose programming? (i.e, writing executable programs and not just proving theorems)</p>",
        "id": 399564935,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698771572
    },
    {
        "content": "<p>Multiple people have done Advent of Code with it, for example.</p>",
        "id": 399566594,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698772059
    },
    {
        "content": "<p>I would say very ready</p>",
        "id": 399566643,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698772080
    },
    {
        "content": "<p>Indeed, <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/398565585\">very ready</a>, as it is now being used even by AWS for the Cedar model.</p>",
        "id": 399567287,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698772316
    },
    {
        "content": "<p>That's really cool. I am very happy to see a general purpose programming language and a very competent theorem proving environment in one ecosystem. I googled and found <a href=\"https://github.com/digama0/advent-of-code/\">this</a> and <a href=\"https://github.com/anurudhp/aoc2022/tree/main\">this</a></p>",
        "id": 399567468,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698772375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399567287\">said</a>:</p>\n<blockquote>\n<p>Indeed, <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild/near/398565585\">very ready</a>, as it is now being used even by AWS for the Cedar model.</p>\n</blockquote>\n<p>It seems that they are proving theorems about Cedar, rather than implement Cedar itself in Lean. <a href=\"https://github.com/cedar-policy/cedar-spec/tree/main/cedar-lean\">GitHub Link</a></p>",
        "id": 399568208,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1698772668
    },
    {
        "content": "<p>There is an <a href=\"https://blog.codeminer42.com/overcoming-challenges-and-crafting-in-the-uncharted-territory-of-lean4/\">article</a> describing building of a simple web API for a competition.</p>",
        "id": 399568300,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1698772695
    },
    {
        "content": "<p>Right, I said it was used for the <em>Cedar model</em>. But of course that model includes the full specification of Cedar. See the <code>cedar-spec/cedar-lean/Cedar/Spec</code> directory.</p>",
        "id": 399569879,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698773267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130290\">Agnishom Chattopadhyay</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399564935\">said</a>:</p>\n<blockquote>\n<p>Out of curiosity, how ready is Lean for general purpose programming? (i.e, writing executable programs and not just proving theorems)</p>\n</blockquote>\n<p>Lean as a programming language is already really nice, but don't expect that libraries exists. You can currently use it if you have no dependency at all (or use it to create a basic library). For instance you won't have regular expressions or http requests. So you need to think carefully before starting a project.</p>",
        "id": 399570592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698773523
    },
    {
        "content": "<p>Right. The main thing missing is libraries. Also, it's a bit dangerous to program in Lean4... once you do it for a while, you realize how much better it is than any other programming language.</p>",
        "id": 399593951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698782624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399458412\">said</a>:</p>\n<blockquote>\n<p>IO actions are the elements of type <code>IO A</code>, they represent instructions to do a thing in the real world (an effect) and then report a result back (of type <code>A</code>)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Retrieving this discussion, I have been thinking about this and I still don't understand well when reading FPIL: the definition there is</p>\n<blockquote>\n<p><code>IO α</code> is the type of a program that, when executed, will either throw an exception or return a value of type <code>α</code>  </p>\n</blockquote>\n<p>and I do not understand the role of the \"exception\" when comparing with your definition. For instance, <code>IO Unit</code> should either throw an exception or a term of type <code>Unit</code>. Now, looking at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Hello, world!\"</span>\n</code></pre></div>\n<p>how should I interpret the role of the \"exception\"?</p>",
        "id": 399708438,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698838943
    },
    {
        "content": "<p><code>IO A</code> is actually defined as <code>BaseIO (Except IO.Error A)</code>, where <code>BaseIO</code> is what I described and <code>Except</code> is another monad (it's equivalent to <code>Sum</code> but with constructors named <code>.ok</code> and <code>.error</code> instead of the more generic <code>.inl</code>  and <code>.inr</code>) which expresses the possibility of failure. So an IO action can perform an effect and then return a failure of type <code>IO.Error</code> instead of an actual value of type <code>A</code></p>",
        "id": 399708960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839159
    },
    {
        "content": "<p>And in the above case with <code>main</code>, when would this failure be returned?</p>",
        "id": 399709365,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698839305
    },
    {
        "content": "<p>It would be produced by <code>main</code> when you execute it</p>",
        "id": 399709407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839328
    },
    {
        "content": "<p><code>println</code> might throw an error if the underlying stream is closed, for example</p>",
        "id": 399709450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839344
    },
    {
        "content": "<p>or if you are piping the output to a file and you run out of disk space</p>",
        "id": 399709503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839368
    },
    {
        "content": "<p>the lean runtime, which is the one responsible for running <code>main</code>, checks if this IO action returned an error and if so it prints some information about it to the console and exits with an error code</p>",
        "id": 399709707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839451
    },
    {
        "content": "<p>or if you run main by just using <code>#eval main</code>, the lean server is the one that catches this error and draws a red squiggle over the command and shows the error message in the infoview</p>",
        "id": 399709830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839512
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 399709959,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698839557
    },
    {
        "content": "<p>On the other hand, your example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">IO.getNumHeartbeats</span>\n</code></pre></div>\n<p>certainly produces a <code>Nat</code>, but does it also have a side effect?</p>",
        "id": 399710196,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698839656
    },
    {
        "content": "<p>It actually does, since if you run it twice you get different numbers</p>",
        "id": 399710267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839689
    },
    {
        "content": "<p>it has the effect of increasing the number of heartbeats by 1 :)</p>",
        "id": 399710304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839706
    },
    {
        "content": "<p>Well, but this is the same for everything I do, even if it is not a <code>IO</code> action, no?</p>",
        "id": 399710369,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698839737
    },
    {
        "content": "<p>But in general IO actions aren't <em>required</em> to have an effect. In particular <code>pure x</code> is an IO action that has no effect and returns <code>x</code></p>",
        "id": 399710414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399710369\">said</a>:</p>\n<blockquote>\n<p>Well, but this is the same for everything I do, even if it is not a <code>IO</code> action, no?</p>\n</blockquote>\n<p>This is a bit complicated. For things that aren't IO actions, any effects they have in reality (like allocations or consuming CPU cycles) are not <em>observable</em> from the lean type system</p>",
        "id": 399710718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839881
    },
    {
        "content": "<p>this is actually more a statement about what lean can (or cannot) express than it is about what effects programs have</p>",
        "id": 399710834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839926
    },
    {
        "content": "<p>Oh, I see, very clear. Thanks again, I'll go back to the book!</p>",
        "id": 399710946,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698839976
    },
    {
        "content": "<p>for example pointer equality is not observable as far as lean is concerned, because if you could observe it you can prove false</p>",
        "id": 399710963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698839983
    },
    {
        "content": "<p>Wow, now you made me curious... why?</p>",
        "id": 399711014,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698840001
    },
    {
        "content": "<p>Because you can create the same object twice in different locations, and lean will say that these objects are equal but the \"address of\" operation applied to them results in different values, which violates the congruence property of equality: applying a function to equal things yields equal results</p>",
        "id": 399711353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698840100
    },
    {
        "content": "<p>Nice!</p>",
        "id": 399711666,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698840188
    },
    {
        "content": "<p>Nevertheless, observing addresses and pointer equality is sometimes useful or necessary, so lean has these functions anyway... but they are marked as <code>unsafe</code>: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ptrAddrUnsafe#doc\">docs#ptrAddrUnsafe</a></p>",
        "id": 399711692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698840198
    },
    {
        "content": "<p>I see, but we are steadily climbing beyond my paygrade now! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 399712335,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698840456
    },
    {
        "content": "<p>A simple case one gets <code>IO Nat</code> is in generating a random number. In my course I first grumbled about this and then realized that it was for a very good reason, since we want:</p>\n<ul>\n<li>different invocations to give different values.</li>\n<li>A function applied to equal arguments give equal results.</li>\n</ul>\n<p>One can \"run\" to a Nat but then it is clear that we have a state argument which is different for different invocations.</p>\n<p>Personally (as a mathematician) I found this example useful for understanding as there is no need for a real world <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> to justify needing state. Indeed, in my course I made a simple example separating only the relevant part of IO: <a href=\"https://github.com/siddhartha-gadgil/proofs-and-programs-2023/blob/2d3312143811f0679175c2614e454ad6d163608f/PnP2023/Lec_03_24/Sampling.lean#L100\">https://github.com/siddhartha-gadgil/proofs-and-programs-2023/blob/2d3312143811f0679175c2614e454ad6d163608f/PnP2023/Lec_03_24/Sampling.lean#L100</a></p>",
        "id": 399713358,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1698840843
    },
    {
        "content": "<p>And this example is the <code>rand</code> or the <code>run</code> function? Do you happen to have recorded your course?</p>",
        "id": 399717643,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698842591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/First.20maintenance.20release.20of.20Functional.20Programming.20in.20Lean/near/399717643\">said</a>:</p>\n<blockquote>\n<p>And this example is the <code>rand</code> or the <code>run</code> function? Do you happen to have recorded your course?</p>\n</blockquote>\n<p>This example is to show state being used. The <code>rand</code> function is like Lean's built in one, in that it gives a monadic value. Here it is <code>RandomM Nat</code> instead of <code>IO Nat</code> of Lean. The <code>run</code> is one that can get us out of the Monad, or in general to one level below (<code>TermElabM</code> to <code>MetaM</code> to <code>CoreM</code> ...). Because the Monad here is a simple one the result of running is the pure value, without having to fall back to error.</p>\n<p>I haven't recorded my course, though I did use Docgen4 to create docs: <a href=\"https://math.iisc.ac.in/~gadgil/proofs-and-programs-2023/doc/PnP2023.html\">https://math.iisc.ac.in/~gadgil/proofs-and-programs-2023/doc/PnP2023.html</a> with many details.</p>",
        "id": 399733894,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1698848052
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 399734366,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698848207
    },
    {
        "content": "<p>I'm catching up a bit on Zulip after a week of heads-down concentrated coding - thank you all for taking such good care of <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> 's questions! </p>\n<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> - thank you for reading the book carefully, and for showing up here with questions. It makes me very happy that you're getting value out of it, and that you're putting as much work into reading it as went into writing it. You've basically skipped ahead to chapter 5 in this discussion session :-)</p>\n<p>Thanks again!</p>",
        "id": 400417000,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1699211555
    },
    {
        "content": "<p>Thank you for writing it (and to all the people who helped me, of course)! I am now trying to attack your cat/feline/(will there be tigers? lions? <span aria-label=\"tiger\" class=\"emoji emoji-1f405\" role=\"img\" title=\"tiger\">:tiger:</span> ) example, with some struggle and much fun. You'll certainly see more questions.</p>",
        "id": 400417979,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699212643
    }
]