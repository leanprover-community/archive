[
    {
        "content": "<p>I am happy to announce the latest release of our community fork, Lean 3.10.0.  Thank to all contributors to this release: <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>!  Please be patient, the binaries are still in the oven and will be ready soon!  Excerpt from the changelog:</p>\n<p>Features:</p>\n<p>- <code>by calc ...</code> is now equivalent to <code>by refine calc ...</code> (<a href=\"https://github.com/leanprover-community/lean/issues/203\" title=\"https://github.com/leanprover-community/lean/issues/203\">lean#203</a>)<br>\n  - Flag to use out-of-date oleans (<a href=\"https://github.com/leanprover-community/lean/issues/208\" title=\"https://github.com/leanprover-community/lean/issues/208\">lean#208</a>)<br>\n  - Order notation by priority in pretty-printer (<a href=\"https://github.com/leanprover-community/lean/issues/207\" title=\"https://github.com/leanprover-community/lean/issues/207\">lean#207</a>)<br>\n  - Improve congruence lemmas for <code>coe_fn</code> (<a href=\"https://github.com/leanprover-community/lean/issues/209\" title=\"https://github.com/leanprover-community/lean/issues/209\">lean#209</a>)<br>\n  - Port <code>rename</code> tactic from mathlib (<a href=\"https://github.com/leanprover-community/lean/issues/205\" title=\"https://github.com/leanprover-community/lean/issues/205\">lean#205</a>)</p>\n<p>Bug fixes:</p>\n<p>- <code>simp [← foo]</code> avoids looping if <code>foo</code> is already in the simp set (<a href=\"https://github.com/leanprover-community/lean/issues/198\" title=\"https://github.com/leanprover-community/lean/issues/198\">lean#198</a>)</p>\n<p>Changes:</p>\n<p>- <code>init.category</code> has been renamed to <code>init.control</code> (<a href=\"https://github.com/leanprover-community/lean/issues/202\" title=\"https://github.com/leanprover-community/lean/issues/202\">lean#202</a>)<br>\n  - <code>string.has_decidable_eq</code> is now implemented by foot (<a href=\"https://github.com/leanprover-community/lean/issues/204\" title=\"https://github.com/leanprover-community/lean/issues/204\">lean#204</a>)</p>",
        "id": 196042552,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588411219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Lean.203.2E10/near/196042552\" title=\"#narrow/stream/113488-general/topic/Lean.203.2E10/near/196042552\">said</a>:</p>\n<blockquote>\n<p>Bug fixes:</p>\n<p>- <code>simp [← foo]</code> removes <code>foo</code> from the simp set (<a href=\"https://github.com/leanprover-community/lean/issues/198\" title=\"https://github.com/leanprover-community/lean/issues/198\">lean#198</a>)</p>\n</blockquote>\n<p>This lines is hard to read. Am I right to think it misses something like \"in addition to doing what you think it should do\"?</p>",
        "id": 196043767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588413111
    },
    {
        "content": "<p>Because right now it reads like: make sure <code>simp [← foo] == simp [-foo]</code></p>",
        "id": 196043811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588413147
    },
    {
        "content": "<p>Yes, it does what you think it does.  English is not my first language, so PRs to improve the wording are always welcome!</p>",
        "id": 196043901,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588413276
    },
    {
        "content": "<p>It's not mine either. Let's wait until America wakes up (or hope it's daytime in Mario's own timezone)</p>",
        "id": 196043917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588413331
    },
    {
        "content": "<p>Or ping <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span></p>",
        "id": 196043989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588413418
    },
    {
        "content": "<p>Before, <code>simp [← foo]</code> would do what you expect (add <code>foo</code> as a right-to-left rewrite rule). But if <code>foo</code> was already in the simp set as a left-to-right rule, it wasn't always removed properly. So <code>simp</code> would loop.</p>",
        "id": 196044009,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588413464
    },
    {
        "content": "<p>Yes, this is what I mean. Now we are looking for a proper changelog line</p>",
        "id": 196044068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588413530
    },
    {
        "content": "<p>\"<code>simp [← foo]</code> avoids looping if <code>foo</code> is already in the simp set\"?</p>",
        "id": 196044177,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588413632
    }
]