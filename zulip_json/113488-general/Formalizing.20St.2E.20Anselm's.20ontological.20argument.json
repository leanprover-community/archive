[
    {
        "content": "<p>This might be the <del>first</del> second attempt in the Lean community to formalize an ontological argument for the existence of God in Lean. It's a modified version of the formulation of St. Anselm's ontological argument by Alvin Plantinga. (See <a href=\"https://plato.stanford.edu/entries/ontological-arguments/#StAnsOntArg\">9.1 Formulation 1 of the SEP entry \"Ontological Arguments.\"</a>)</p>\n<blockquote>\n<ol>\n<li>God exists in the understanding but not in reality. (Assumption for <em>reductio</em>)</li>\n<li>Existence in reality is greater than existence in the understanding alone. (Premise)</li>\n<li>There exists a being in reality that can be conceived. (<em>Modified</em> premise)</li>\n<li>A being that exists in reality and can be conceived is greater than God. (From (1) and (2).)</li>\n<li>There exists a being that can be conceived and is greater than God. (From (3) and (4).)</li>\n<li>No being greater than God can be conceived. (From the definition of “God”.)</li>\n<li>Hence, it is false that God exists in the understanding but not in reality. (From (1), (5), (6).)</li>\n<li>God exists in the understanding. (Premise, to which even the Fool agrees.)</li>\n<li>Hence God exists in reality. (From (7), (8).)</li>\n</ol>\n</blockquote>\n<ul>\n<li>Git repository: <a href=\"https://git.sr.ht/~chabulhwi/lean-notes\">https://git.sr.ht/~chabulhwi/lean-notes</a></li>\n<li>Lean code: <a href=\"https://git.sr.ht/~chabulhwi/lean-notes/tree/master/item/Notes/Anselm.lean\">https://git.sr.ht/~chabulhwi/lean-notes/tree/master/item/Notes/Anselm.lean</a></li>\n<li>English documentation: <a href=\"https://git.sr.ht/~chabulhwi/lean-notes/tree/master/item/docs/en/Anselm.md\">https://git.sr.ht/~chabulhwi/lean-notes/tree/master/item/docs/en/Anselm.md</a></li>\n<li>Korean documentation: <a href=\"https://git.sr.ht/~chabulhwi/lean-notes/tree/master/item/docs/ko/Anselm.md\">https://git.sr.ht/~chabulhwi/lean-notes/tree/master/item/docs/ko/Anselm.md</a></li>\n</ul>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Lean code (flawed)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isMax</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isMax_unique</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">isMax</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">x_le_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hy.2</span> <span class=\"n\">hx.1</span>\n  <span class=\"k\">have</span> <span class=\"n\">y_le_x</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hx.2</span> <span class=\"n\">hy.1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">x_le_y</span> <span class=\"n\">y_le_x</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isMax_property</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmx</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnnqx</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hnqx</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hex</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hpy</span><span class=\"o\">,</span> <span class=\"n\">hqy</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_lt_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hlt</span> <span class=\"n\">hnqx</span> <span class=\"n\">hqy</span>\n    <span class=\"k\">have</span> <span class=\"n\">y_le_x</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hmx.2</span> <span class=\"n\">hpy</span>\n    <span class=\"n\">exact</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">x_lt_y</span> <span class=\"n\">y_le_x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">of_not_not</span> <span class=\"n\">hnnqx</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Anselm</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Conceivable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">conceivable</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Conceivable</span> <span class=\"o\">(</span><span class=\"n\">conceivable</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">InUnderstanding</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inUnderstanding</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">InUnderstanding</span> <span class=\"o\">(</span><span class=\"n\">inUnderstanding</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">InReality</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inReality</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">InReality</span> <span class=\"o\">(</span><span class=\"n\">inReality</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Being</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">Being</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Conceivable</span> <span class=\"n\">Being</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InUnderstanding</span> <span class=\"n\">Being</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">InReality</span> <span class=\"n\">Being</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isGod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">conceivable</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">lt_of_inUnderstanding_not_inReality_inReality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">isGod_inUnderstanding</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">},</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">exists_conceivable_and_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">),</span> <span class=\"n\">conceivable</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">},</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hgx</span>\n  <span class=\"n\">refine</span> <span class=\"n\">isMax_property</span> <span class=\"n\">Being</span> <span class=\"n\">conceivable</span> <span class=\"n\">inReality</span> <span class=\"n\">hgx</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">y</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_inUnderstanding_not_inReality_inReality</span> <span class=\"o\">(</span><span class=\"n\">isGod_inUnderstanding</span> <span class=\"n\">hgx</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">exists_conceivable_and_inReality</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">isGod_inReality</span>\n<span class=\"c\">/-</span><span class=\"cm\"> 'Anselm.isGod_inReality' depends on axioms: [Classical.choice, Quot.sound, propext,</span>\n<span class=\"cm\">Anselm.lt_of_inUnderstanding_not_inReality_inReality, Anselm.isGod_inUnderstanding,</span>\n<span class=\"cm\">Anselm.exists_conceivable_and_inReality] -/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Anselm</span>\n</code></pre></div>\n</div></div>\n<p><strong>Reference</strong></p>\n<p>Oppy, Graham, \"Ontological Arguments\", <em>The Stanford Encyclopedia of Philosophy</em> (Fall 2023 Edition), Edward N. Zalta &amp; Uri Nodelman (eds.), URL = &lt;<a href=\"https://plato.stanford.edu/archives/fall2023/entries/ontological-arguments/\">https://plato.stanford.edu/archives/fall2023/entries/ontological-arguments/</a>&gt;.</p>",
        "id": 398679346,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698323605
    },
    {
        "content": "<p>I'll write more messages later. I don't think St. Anselm's demonstrates shows God's existence.</p>",
        "id": 398679756,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698323750
    },
    {
        "content": "<p>Unfortunately this argument is contradictory as formalized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Conceivable</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">InUnderstanding</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">⟩</span>\n  <span class=\"n\">isGod_inUnderstanding</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">())</span> <span class=\"o\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 398681058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698324221
    },
    {
        "content": "<p>Rather than \"unfortunately\", I guess you meant \"and hence the proof of existence of God is complete\", right?</p>",
        "id": 398681980,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698324520
    },
    {
        "content": "<p>Of course, what I should have said is \"here's a much shorter proof\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">key</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Conceivable</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">InUnderstanding</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">⟩</span>\n  <span class=\"n\">isGod_inUnderstanding</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">())</span> <span class=\"o\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">},</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">key.elim</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_isGod_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">},</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">key.elim</span>\n</code></pre></div>",
        "id": 398682523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698324705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What if I remove <code>variable {Being : Type u}</code> and add the axiom <code>axiom Being.{u} : Type u</code>?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Fixed code (still flawed)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isMax</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isMax_unique</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">isMax</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">x_le_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hy.2</span> <span class=\"n\">hx.1</span>\n  <span class=\"k\">have</span> <span class=\"n\">y_le_x</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hx.2</span> <span class=\"n\">hy.1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">x_le_y</span> <span class=\"n\">y_le_x</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isMax_property</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmx</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnnqx</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hnqx</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hex</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hpy</span><span class=\"o\">,</span> <span class=\"n\">hqy</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_lt_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hlt</span> <span class=\"n\">hnqx</span> <span class=\"n\">hqy</span>\n    <span class=\"k\">have</span> <span class=\"n\">y_le_x</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hmx.2</span> <span class=\"n\">hpy</span>\n    <span class=\"n\">exact</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">x_lt_y</span> <span class=\"n\">y_le_x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">of_not_not</span> <span class=\"n\">hnnqx</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Anselm</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Conceivable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">conceivable</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Conceivable</span> <span class=\"o\">(</span><span class=\"n\">conceivable</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">InUnderstanding</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inUnderstanding</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">InUnderstanding</span> <span class=\"o\">(</span><span class=\"n\">inUnderstanding</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">InReality</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inReality</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">InReality</span> <span class=\"o\">(</span><span class=\"n\">inReality</span><span class=\"o\">)</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Being.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">Being</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Conceivable</span> <span class=\"n\">Being</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InUnderstanding</span> <span class=\"n\">Being</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InReality</span> <span class=\"n\">Being</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isGod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">conceivable</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">lt_of_inUnderstanding_not_inReality_inReality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">isGod_inUnderstanding</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">},</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">exists_conceivable_and_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">),</span> <span class=\"n\">conceivable</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">},</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hgx</span>\n  <span class=\"n\">refine</span> <span class=\"n\">isMax_property</span> <span class=\"n\">Being</span> <span class=\"n\">conceivable</span> <span class=\"n\">inReality</span> <span class=\"n\">hgx</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">y</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_inUnderstanding_not_inReality_inReality</span> <span class=\"o\">(</span><span class=\"n\">isGod_inUnderstanding</span> <span class=\"n\">hgx</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">exists_conceivable_and_inReality</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">isGod_inReality</span>\n<span class=\"c\">/-</span><span class=\"cm\"> 'Anselm.isGod_inReality' depends on axioms: [Anselm.Being, Classical.choice, Quot.sound, propext,</span>\n<span class=\"cm\">Anselm.lt_of_inUnderstanding_not_inReality_inReality, Anselm.isGod_inUnderstanding,</span>\n<span class=\"cm\">Anselm.exists_conceivable_and_inReality] -/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Anselm</span>\n</code></pre></div>\n</div></div>",
        "id": 398683524,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698325026
    },
    {
        "content": "<p>Nope:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Conceivable</span> <span class=\"n\">Being.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">InReality</span> <span class=\"n\">Being</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_conceivable_and_inReality</span>\n  <span class=\"n\">h.2.elim</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">},</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">key.elim</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_isGod_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">},</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">key.elim</span>\n</code></pre></div>",
        "id": 398684158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698325241
    },
    {
        "content": "<p>Hmm, I should understand how <code>letI</code> works. After all, It's just an exercise. Thanks anyway.</p>",
        "id": 398684563,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698325344
    },
    {
        "content": "<p>Gödel also had a proof of existence of God: maybe we should have a <code>God</code> folder in Mathlib.</p>",
        "id": 398684751,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698325398
    },
    {
        "content": "<p><code>letI</code> is irrelevant here, this works fine without it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">exists_conceivable_and_inReality.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">⟩</span>\n  <span class=\"n\">h.2.elim</span>\n</code></pre></div>",
        "id": 398684822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698325420
    },
    {
        "content": "<p>I actually want to make a counterargument to St. Anselm's argument. But I guess I can't formalize the modified version of the proof correctly in Lean.</p>",
        "id": 398685289,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698325583
    },
    {
        "content": "<p>Will replacing type classes with axioms fix my formalization?</p>",
        "id": 398685885,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698325800
    },
    {
        "content": "<p>I think so, but it would probably be better to put the axioms in a typeclass instead</p>",
        "id": 398686119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698325880
    },
    {
        "content": "<p>If you use axioms, then if they're false you can prove anything. If you use a typeclass and get something wrong, you can prove that the typeclass cannot exist but it doesn't break trust anywhere else</p>",
        "id": 398686304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698325948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument/near/398686119\">said</a>:</p>\n<blockquote>\n<p>I think so, but it would probably be better to put the axioms in a typeclass instead</p>\n</blockquote>\n<p>Okay, I'll try that!</p>",
        "id": 398686352,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698325966
    },
    {
        "content": "<p>I made a new type class, <code>Anselm</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Anselm</span> <span class=\"o\">(</span><span class=\"n\">Being</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Being</span> <span class=\"n\">where</span>\n  <span class=\"n\">conceivable</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">inUnderstanding</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">inReality</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">lt_of_inUnderstanding_not_inReality_inReality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"bp\">→</span>\n    <span class=\"n\">inReality</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n  <span class=\"n\">isMax_conceivable_inUnderstanding</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">conceivable</span> <span class=\"bp\">→</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span>\n  <span class=\"n\">exists_conceivable_and_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">),</span> <span class=\"n\">conceivable</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Fixed code (final)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isMax</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isMax_unique</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">isMax</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">x_le_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hy.2</span> <span class=\"n\">x</span> <span class=\"n\">hx.1</span>\n  <span class=\"k\">have</span> <span class=\"n\">y_le_x</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hx.2</span> <span class=\"n\">y</span> <span class=\"n\">hy.1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">x_le_y</span> <span class=\"n\">y_le_x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isMax_mt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmx</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">hmx.2</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">hlt</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isMax_property</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmx</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnnqx</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hnqx</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hex</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hpy</span><span class=\"o\">,</span> <span class=\"n\">hqy</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_lt_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hlt</span> <span class=\"n\">hnqx</span> <span class=\"n\">hqy</span>\n    <span class=\"k\">have</span> <span class=\"n\">y_le_x</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hmx.2</span> <span class=\"n\">y</span> <span class=\"n\">hpy</span>\n    <span class=\"n\">exact</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">x_lt_y</span> <span class=\"n\">y_le_x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">of_not_not</span> <span class=\"n\">hnnqx</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Anselm</span> <span class=\"o\">(</span><span class=\"n\">Being</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Being</span> <span class=\"n\">where</span>\n  <span class=\"n\">conceivable</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">inUnderstanding</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">inReality</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">lt_of_inUnderstanding_not_inReality_inReality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"bp\">→</span>\n    <span class=\"n\">inReality</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n  <span class=\"n\">isMax_conceivable_inUnderstanding</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">conceivable</span> <span class=\"bp\">→</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span>\n  <span class=\"n\">exists_conceivable_and_inReality</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">),</span> <span class=\"n\">conceivable</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Anselm</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Being</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Anselm</span> <span class=\"n\">Being</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isGod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">isMax</span> <span class=\"n\">x</span> <span class=\"n\">conceivable</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_unique</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">isGod</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">isMax_unique</span> <span class=\"n\">conceivable</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_mt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hgx</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">conceivable</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isMax_mt</span> <span class=\"n\">conceivable</span> <span class=\"n\">hgx</span> <span class=\"n\">hlt</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_inUnderstanding</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inUnderstanding</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isMax_conceivable_inUnderstanding</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_conceivable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">conceivable</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">And.left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isGod_inReality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hgx</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">isMax_property</span> <span class=\"n\">Being</span> <span class=\"n\">conceivable</span> <span class=\"n\">inReality</span> <span class=\"n\">hgx</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">y</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_inUnderstanding_not_inReality_inReality</span> <span class=\"o\">(</span><span class=\"n\">isGod_inUnderstanding</span> <span class=\"n\">hgx</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">exists_conceivable_and_inReality</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">isGod_inReality</span>\n<span class=\"c1\">-- 'Anselm.isGod_inReality' depends on axioms: [Classical.choice, Quot.sound, propext]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Anselm</span>\n</code></pre></div>\n</div></div>",
        "id": 398692913,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698328057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument/near/398679346\">said</a>:</p>\n<blockquote>\n<ol start=\"3\">\n<li>There exists a being in reality that can be conceived. (<em>Modified</em> premise)</li>\n</ol>\n</blockquote>\n<p>Step 3 of the original formulation by Alvin Plantinga is the following premise: \"A being having all of God’s properties plus existence in reality can be conceived.\" This premise is redundant. Since God is the greatest being that can be conceived, God itself can be conceived. Therefore, a being having all of God's properties can be conceived.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isGod_conceivable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">conceivable</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">And.left</span>\n</code></pre></div>",
        "id": 398705199,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698331487
    },
    {
        "content": "<p>I think we can only conclude from St. Anselm's argument that the following statement is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isGod_inReality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>This theorem doesn't state that God exists in reality. It merely says that if a being is God, it exists in reality. In order to prove the existence of God in reality, you need to show that <code>∃ (x : Being), isGod x ∧ inReality x</code>.</p>\n<p>For this reason, I think St. Anselm's argument doesn't show God's existence. Of course, I might have formalized it wrong.</p>",
        "id": 398710532,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698332957
    },
    {
        "content": "<p>The existence of god has been proven in Isabelle. Google shows me a couple of formalisations. But IIRC, there was some problem with the hypotheses being inconsistent, similar to what Eric found.</p>",
        "id": 398728053,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1698338651
    },
    {
        "content": "<p>Thanks. I'll check those out when I have more time. I hope we see a future where more philosophers try out Lean and use it to formalize subdisciplines of philosophy.</p>",
        "id": 398735141,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698341363
    },
    {
        "content": "<p>I have a feeling we already have plenty of doctors of philosophy here</p>",
        "id": 398735952,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698341735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument/near/398705199\">said</a>:</p>\n<blockquote>\n<p>Step 3 of the original formulation by Alvin Plantinga is the following premise: \"A being having all of God’s properties plus existence in reality can be conceived.\" This premise is redundant. Since God is the greatest being that can be conceived, God itself can be conceived. Therefore, a being having all of God's properties can be conceived.</p>\n</blockquote>\n<p>The way I see it, we are being asked to conceive of beings with a separated property of existence/nonexistence in reality, for which we may use a <code>Bool</code>. Then premise 3 does have content:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Anselm</span> <span class=\"o\">(</span><span class=\"n\">Being</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LinearOrder</span> <span class=\"o\">(</span><span class=\"n\">Being</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Conceivable</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">premise3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"n\">IsMax</span> <span class=\"n\">x</span> <span class=\"n\">Conceivable</span> <span class=\"bp\">→</span> <span class=\"n\">Conceivable</span> <span class=\"o\">(</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 398754494,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1698348798
    },
    {
        "content": "<p>The ordering on <code>Being × Bool</code> also makes it possible to transcribe premise 2 more faithfully</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">premise2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 398755196,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1698349115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span> If we adopt your view, <code>inReality</code> should also be a predicate on <code>Being × Bool</code>, not <code>Being</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inReality</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Then we can't say that \"Bulhwi exists in reality,\" since I'm not a pair of a being and its existence property. I'm a being. So I think <code>inReality</code> should be a predicate on <code>Being</code>.</p>",
        "id": 398822349,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698383752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument/near/398822349\">said</a>:</p>\n<blockquote>\n<p>Then we can't say that \"Bulhwi exists in reality,\" since I'm not a pair of a being and its existence property. I'm a being. So I think <code>inReality</code> should be a predicate on <code>Being</code>.</p>\n</blockquote>\n<p>I don't understand this point. You may well be a hallucination of mine i.e. <code>(bulhwi, false)</code>. If not then <code>(bulhwi, true)</code>.</p>",
        "id": 398832427,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1698388640
    },
    {
        "content": "<p>My point is that <code>Bulhwi</code> is neither <code>⟨Bulhwi, true⟩</code> nor <code>⟨Bulhwi, false⟩</code>. I'm a being, not a pair of a being and its existence property. <code>Bulhwi</code>'s type is and should be <code>Being</code>, not <code>Being × Bool</code>.</p>",
        "id": 398837153,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698390305
    },
    {
        "content": "<p>Well you need some way to map between an object not having the existence property to one that does, which currently you don't have.</p>",
        "id": 398837962,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1698390589
    },
    {
        "content": "<p>How would you do that?</p>",
        "id": 398838190,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698390674
    },
    {
        "content": "<p>I have outlined one way. I'm sure there are others.</p>",
        "id": 398838275,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1698390710
    },
    {
        "content": "<p>I don't feel like creating a type, say, <code>BeingNoExist</code>, of \"beings separated from their existence properties\" and considering the type <code>Being</code> to be equal to <code>BeingNoExist × Bool</code>. It presupposes that <code>∃ (α : Type u), Being = α × Bool</code>.</p>",
        "id": 398841372,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698391811
    },
    {
        "content": "<p>I was thinking of something similar this week! <a href=\"https://github.com/analytic-bias/agora\">https://github.com/analytic-bias/agora</a></p>",
        "id": 398979078,
        "sender_full_name": "Hypatia du Bois-Marie",
        "timestamp": 1698447864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument/near/398681058\">said</a>:</p>\n<blockquote>\n<p>Unfortunately this argument is contradictory as formalized:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Conceivable</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">InUnderstanding</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">⟩</span>\n  <span class=\"n\">isGod_inUnderstanding</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">())</span> <span class=\"o\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think that's exactly the point: formal methods yielding fierce recognition of human fallacies.</p>",
        "id": 398979244,
        "sender_full_name": "Hypatia du Bois-Marie",
        "timestamp": 1698448046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument/near/398710532\">said</a>:</p>\n<blockquote>\n<p>I think we can only conclude from St. Anselm's argument that the following statement is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isGod_inReality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span>\n</code></pre></div>\n</blockquote>\n<p>A user of a Korean-speaking philosophy discussion forum <a href=\"https://forum.owlofsogang.com/t/lean/3613/9\">said</a>, \"You didn't prove that <code>∃ (x : Being), isGod x ∧ inReality x</code> is not a theorem of a theory whose axioms are the premises of St. Anselm's argument (and the axioms of Lean's type theory).\"</p>",
        "id": 399021294,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698477141
    },
    {
        "content": "<p>That's true. So I'll rephrase my opinion:</p>\n<blockquote>\n<p>I think the conclusion of St. Anselm's argument is the following statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isGod_inReality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Being</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">isGod</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">inReality</span> <span class=\"n\">x</span>\n</code></pre></div>\n</blockquote>",
        "id": 399021461,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698477328
    },
    {
        "content": "<p>Interesting to see another approach to the ontological proof. I tried once (original version was written in Lean 3, later ported to 4) “classical” modal version: <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/9f83f7c6224eee8905b16aeebc4c234b4b216031/GroundZero/Theorems/Ontological.lean#L520-L521\">https://github.com/forked-from-1kasper/ground_zero/blob/9f83f7c6224eee8905b16aeebc4c234b4b216031/GroundZero/Theorems/Ontological.lean#L520-L521</a></p>",
        "id": 399064502,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1698509302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument/near/398728053\">said</a>:</p>\n<blockquote>\n<p>The existence of god has been proven in Isabelle. Google shows me a couple of formalisations. But IIRC, there was some problem with the hypotheses being inconsistent, similar to what Eric found.</p>\n</blockquote>\n<p>There are actually several versions of original Gödel’s proof that correct this issue.</p>",
        "id": 399064779,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1698509574
    },
    {
        "content": "<p>Cf <a href=\"https://arxiv.org/abs/2202.06264\">https://arxiv.org/abs/2202.06264</a></p>",
        "id": 399247276,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1698654308
    }
]