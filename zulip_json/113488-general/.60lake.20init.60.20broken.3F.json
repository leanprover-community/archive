[
    {
        "content": "<p><code>lake init</code> seems to be broken!</p>\n<p><code>lake init Bar</code> creates a <code>lakefile.lean</code> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">Bar</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Bar</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add library configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">Bar</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>that gives a <br>\n<code>'Bar' has already been declared</code> on <code>lean_exe</code>.</p>\n<p>Is it working for others?</p>",
        "id": 390821480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694649831
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">elan</span> <span class=\"c1\">--version</span>\n<span class=\"n\">elan</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">cdb40bff5</span> <span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"o\">)</span>\n<span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lake</span> <span class=\"n\">version</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">ec94173</span> <span class=\"o\">(</span><span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">%</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">ec941735c80d</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390821534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694649853
    },
    {
        "content": "<p>you aren't supposed to capitalize the package/exe name</p>",
        "id": 390821650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694649953
    },
    {
        "content": "<p>That's ... not my problem if I type <code>lake init Bar</code> and don't get an error message? :-)</p>",
        "id": 390821804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694650080
    },
    {
        "content": "<p>true, I'm not really happy with the way this all works right now</p>",
        "id": 390822025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694650246
    },
    {
        "content": "<p>but lake is expecting you to write <code>lake init bar</code> and the lib name is capitalized from your input</p>",
        "id": 390822072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694650285
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2540\">lean4#2540</a></p>",
        "id": 390822789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694650784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Ironically, this was caused by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364429598\">suggestion</a> that I should not decapitalize package names.</p>",
        "id": 390825374,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652378
    },
    {
        "content": "<p>We'll get there eventually. :-)</p>",
        "id": 390825468,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694652437
    },
    {
        "content": "<p>I am not sure how to make both you and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> happy then. Should we go back to decapitalizing packages? Should I make the exe name all lowercase? What is the desired solution here?</p>",
        "id": 390825614,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652502
    },
    {
        "content": "<p>Is there a reason packages and libs have to live in the same namespace?</p>",
        "id": 390825685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652546
    },
    {
        "content": "<p>I guess this is the lib and exe clashing</p>",
        "id": 390825751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Libs and exes have to live in the same namespace (or, more, accurately preserve their name) so that you can do things like <code>bar.fetch</code> to build <code>bar</code> in a custom target.</p>",
        "id": 390825840,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652618
    },
    {
        "content": "<p>Thus adding invisible namespaces would break that (or at least make it very confusing to use).</p>",
        "id": 390826071,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652735
    },
    {
        "content": "<p>that could be <code>exe.bar.fetch</code> or something</p>",
        "id": 390826079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652745
    },
    {
        "content": "<p>or even <code>build \"bar\"</code></p>",
        "id": 390826124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652780
    },
    {
        "content": "<p>it's not returning a value, right?</p>",
        "id": 390826140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No, it is.</p>",
        "id": 390826165,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652801
    },
    {
        "content": "<p>what value does an exe return?</p>",
        "id": 390826186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652815
    },
    {
        "content": "<p>which value do you mean? Do mean what is the type of <code>bar</code> or the type of <code>bar.fetch</code>?</p>",
        "id": 390826242,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652843
    },
    {
        "content": "<p>what is the type of <code>(&lt;- bar.fetch)</code></p>",
        "id": 390826300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652874
    },
    {
        "content": "<p><code>IndexBuildM (BuildJob FilePath)</code></p>",
        "id": 390826317,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652889
    },
    {
        "content": "<p>even after the <code>&lt;-</code>?</p>",
        "id": 390826340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652900
    },
    {
        "content": "<p>oh, sorry, <code>BuildJob FilePath</code>.</p>",
        "id": 390826366,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652917
    },
    {
        "content": "<p>what is the FilePath</p>",
        "id": 390826383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652933
    },
    {
        "content": "<p>the path to the exe.</p>",
        "id": 390826393,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694652939
    },
    {
        "content": "<p>that's a config value, presumably you know that up-front</p>",
        "id": 390826423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694652955
    },
    {
        "content": "<p>No, the config value is the relative path from the package's dir. The file path is the real path (e.g., relative to current working directory / workspace root).</p>",
        "id": 390826534,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653014
    },
    {
        "content": "<p>Anyway this is beside the point, <code>build \"bar\"</code> could also have the type <code>IndexBuildM (BuildJob FilePath)</code></p>",
        "id": 390826553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653024
    },
    {
        "content": "<p>No it could not.</p>",
        "id": 390826561,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653031
    },
    {
        "content": "<p>?</p>",
        "id": 390826594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390826534\">said</a>:</p>\n<blockquote>\n<p>No, the config value is the relative path from the package's dir. The file path is the real path (e.g., relative to current working directory / workspace root).</p>\n</blockquote>\n<p>I mean that you can calculate this without lots of build work, just using the workspace config info</p>",
        "id": 390826681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653088
    },
    {
        "content": "<p><code>bar</code> has type information that <code>\"bar\"</code> lacks that tells it type of the builds output.</p>",
        "id": 390826686,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653093
    },
    {
        "content": "<p>there is no type information</p>",
        "id": 390826697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653102
    },
    {
        "content": "<p>it's always <code>IndexBuildM (BuildJob FilePath)</code> for <code>lean_exe</code> targets IIUC</p>",
        "id": 390826714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653120
    },
    {
        "content": "<p>(and promises that <code>bar</code> is actually an executable of a specific pkg).</p>",
        "id": 390826724,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Something like <code>buildLeanExeOfPkg pkg `bar</code> can work, but that is much less pretty (and does not provide opportunity to avoid a hash lookup to find if bar is a part of pkg).</p>",
        "id": 390827030,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653303
    },
    {
        "content": "<p>there is a hash lookup in the end anyway</p>",
        "id": 390827110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653336
    },
    {
        "content": "<p>everything ends up as hash lookups into the build store</p>",
        "id": 390827192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653383
    },
    {
        "content": "<p>yes, but this adds multiple hash look-ups into each of the  workspaces packages to find the relevant <code>LeanExe</code>. This is tangential at the moment, though, because Lake does not currently implement this optimization.</p>",
        "id": 390827411,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653496
    },
    {
        "content": "<p>The nice thing, though, is that <code>bar.fetch</code> is high-level enough that it could be added without breaking usages.</p>",
        "id": 390827451,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653530
    },
    {
        "content": "<p>I feel like there are too many names generally, involved in creating a lake executable. In cargo there is only one name, used for the package name as well as the folder name (although the folder name doesn't matter)</p>",
        "id": 390827480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653543
    },
    {
        "content": "<p>If you have multiple binaries you can give them multiple names, but by default they just get the package name</p>",
        "id": 390827561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653576
    },
    {
        "content": "<p>which is the point of autogenerating the names</p>",
        "id": 390827591,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653597
    },
    {
        "content": "<p>they are still in the file</p>",
        "id": 390827607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653608
    },
    {
        "content": "<p>However, the problem here is that library and executable clash.</p>",
        "id": 390827610,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653609
    },
    {
        "content": "<p>And, in Lean, these are significantly different things.</p>",
        "id": 390827641,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653627
    },
    {
        "content": "<p>(because the binary has  main and the library does not)</p>",
        "id": 390827660,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653639
    },
    {
        "content": "<p>I don't see how that makes them significantly different</p>",
        "id": 390827706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653672
    },
    {
        "content": "<p>they seem to be quite a bit more different than just that under lake's setup</p>",
        "id": 390827767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653694
    },
    {
        "content": "<p>it could just be a boolean flag on a lib <code>isExe</code></p>",
        "id": 390827785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The thing is that for many executable packages we want to ship both a library and executable (e.g., Lake) and these have different modules (the exe has at least the extra module for the main funciton).</p>",
        "id": 390827856,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653770
    },
    {
        "content": "<p>in lake exes can't have multiple files, so you pretty much always need to have a lib and an exe for a hello world</p>",
        "id": 390827872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653782
    },
    {
        "content": "<p>Yes?</p>",
        "id": 390827948,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653810
    },
    {
        "content": "<p>why can't they just be regular libs?</p>",
        "id": 390827974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653825
    },
    {
        "content": "<p>not everything has to be a library</p>",
        "id": 390827998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653843
    },
    {
        "content": "<p>I would say an exe that is also a library is a minority situation</p>",
        "id": 390828026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653864
    },
    {
        "content": "<p>usually there will be some lib split but it need not be 99% lib 1% exe</p>",
        "id": 390828076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653901
    },
    {
        "content": "<p>besides, you should be able to depend on non-root files in a lib</p>",
        "id": 390828158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653944
    },
    {
        "content": "<p>and so even if the root file has a <code>main</code> in it that shouldn't matter if you aren't using it, hence exes can be libs too</p>",
        "id": 390828194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390828158\">said</a>:</p>\n<blockquote>\n<p>besides, you should be able to depend on non-root files in a lib</p>\n</blockquote>\n<p>This is a limitation of Lean, not Lake.</p>",
        "id": 390828196,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694653972
    },
    {
        "content": "<p>how so?</p>",
        "id": 390828219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694653983
    },
    {
        "content": "<p>you can import non-root files easily today</p>",
        "id": 390828254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390828194\">said</a>:</p>\n<blockquote>\n<p>and so even if the root file has a <code>main</code> in it that shouldn't matter if you aren't using it, hence exes can be libs too</p>\n</blockquote>\n<p>This is also not legal by Lean. There can only be one <code>main</code> in the imported modules and, if so, it will generated a main in the native object, which many OSes are unhappy with if used as library (as you noted for Lake).</p>",
        "id": 390828317,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654043
    },
    {
        "content": "<p>in the imported modules, yes. So don't import it</p>",
        "id": 390828391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390828254\">said</a>:</p>\n<blockquote>\n<p>you can import non-root files easily today</p>\n</blockquote>\n<p>I am confused, I thought you were saying to depend on files outside of the library root (e.g., <code>Foo.*</code> importing <code>Bar</code>)</p>",
        "id": 390828437,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390828391\">said</a>:</p>\n<blockquote>\n<p>in the imported modules, yes. So don't import it</p>\n</blockquote>\n<p>But then the module with <code>main</code> needs to be separately specified somewhere in the configuration, which is what <code>lean_exe</code> does.</p>",
        "id": 390828541,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654159
    },
    {
        "content": "<p>That is, let's say we have an exe/package <code>Foo</code> with a main in it, which imports <code>Foo.Lib</code> which has a bunch of useful stuff. Then project <code>Bar</code> depends on package <code>Foo</code> and does <code>import Foo.Lib</code>. If <code>Bar</code> has a main in it too then the resulting exe should build</p>",
        "id": 390828621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654183
    },
    {
        "content": "<p>Yes, but we also want to be able to build libraries into self-contained static and shared libraries, so the library needs to know not to include <code>Foo</code>.</p>",
        "id": 390828728,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654243
    },
    {
        "content": "<p>the declaration would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">Foo</span>\n<span class=\"n\">lake_exe</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">Bar</span>\n<span class=\"n\">require</span> <span class=\"n\">Foo</span> <span class=\"k\">from</span> <span class=\"bp\">...</span>\n<span class=\"n\">lake_exe</span> <span class=\"n\">Bar</span>\n</code></pre></div>\n<p>where <code>Foo.lean</code> and <code>Bar.lean</code> both have <code>import Foo.Lib</code></p>",
        "id": 390828770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654276
    },
    {
        "content": "<p>So how do we determine how to build the Foo static library?</p>",
        "id": 390828843,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654310
    },
    {
        "content": "<p>I'm not sure what you mean, there is no such target</p>",
        "id": 390828870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654328
    },
    {
        "content": "<p>That is unacceptable.</p>",
        "id": 390828886,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654337
    },
    {
        "content": "<p>there are just two executables in this example</p>",
        "id": 390828894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654342
    },
    {
        "content": "<p>All Lean libraries (at least pure ones) should be buildable as static or shared libraries.</p>",
        "id": 390828918,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654357
    },
    {
        "content": "<p>there are no lean libraries in this example</p>",
        "id": 390828934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654369
    },
    {
        "content": "<p>There is <code>Foo.Lib</code>.</p>",
        "id": 390828964,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654387
    },
    {
        "content": "<p><code>Foo.Lib</code> is just a file in the dependency hierarchy of <code>Foo</code></p>",
        "id": 390829025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654404
    },
    {
        "content": "<p>Which is a problem, if it is not an executable, it should be available separately as part of a static/shared library.</p>",
        "id": 390829079,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654442
    },
    {
        "content": "<p>I don't know what you mean by \"available separately\", it was not bundled as such but you can <code>import</code> any file you want</p>",
        "id": 390829138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654481
    },
    {
        "content": "<p>Buildable for FFIs.</p>",
        "id": 390829154,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654496
    },
    {
        "content": "<p>?</p>",
        "id": 390829181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654518
    },
    {
        "content": "<p>If I am writing some C or Rust code, it should be easy to produce a static/shared library of a Lean library to link with.</p>",
        "id": 390829229,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654528
    },
    {
        "content": "<p>I agree, but I don't see what that has to do with anything</p>",
        "id": 390829254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654543
    },
    {
        "content": "<p>I don't expect to have a library for every lean file</p>",
        "id": 390829278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654558
    },
    {
        "content": "<p>How would I do that for Foo?</p>",
        "id": 390829280,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654559
    },
    {
        "content": "<p>I do.</p>",
        "id": 390829292,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654568
    },
    {
        "content": "<p>We already know this overwhelms the linker</p>",
        "id": 390829310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654579
    },
    {
        "content": "<p>In what regard? Symbol or CLI size?</p>",
        "id": 390829353,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654608
    },
    {
        "content": "<p>The point of bundling them together in library is to reduce CLI size.</p>",
        "id": 390829376,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654633
    },
    {
        "content": "<p>Symbols size reduction will require a module system.</p>",
        "id": 390829435,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654646
    },
    {
        "content": "<p>In the example given, there is no target which says \"make a shared object for me\"</p>",
        "id": 390829481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654683
    },
    {
        "content": "<p>the only intermediate objects I would expect here are those that correspond to lean files in a library</p>",
        "id": 390829535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654722
    },
    {
        "content": "<p>And that is my problem. I should be able to make one for <code>Foo.Lib</code> (potentially grouped with other module library files used by <code>Foo</code>).</p>",
        "id": 390829538,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654724
    },
    {
        "content": "<p>You can make one, I didn't in the example</p>",
        "id": 390829557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654738
    },
    {
        "content": "<p>I don't think I should be required to make one</p>",
        "id": 390829631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654767
    },
    {
        "content": "<p>No I didn't mean by the creator of <code>Foo</code>, I meant by users of Foo.</p>",
        "id": 390829636,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654771
    },
    {
        "content": "<p>We want to heavily encourage you to do so.</p>",
        "id": 390829657,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654788
    },
    {
        "content": "<p>I'm not sure we should</p>",
        "id": 390829667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654796
    },
    {
        "content": "<p>That's fine. I disagree, though.</p>",
        "id": 390829690,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654811
    },
    {
        "content": "<p>API design for a library is very different than for an executable</p>",
        "id": 390829694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654812
    },
    {
        "content": "<p>it's really bad to make users accidentally promise a bunch of API surface area which is not supposed to be stable and present it as such</p>",
        "id": 390829739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654850
    },
    {
        "content": "<p>I do not think Lean is a language that is properly thought of without libraries. They are the core of Lean, executables are a downstream artifact.</p>",
        "id": 390829753,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654864
    },
    {
        "content": "<p>If the point of the program is to make an executable, there may not be any library</p>",
        "id": 390829817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654886
    },
    {
        "content": "<p>library design should be an explicit step</p>",
        "id": 390829841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654903
    },
    {
        "content": "<p>I think that is bad. Rarely it is useful to have an executable without a library.</p>",
        "id": 390829860,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654917
    },
    {
        "content": "<p>I don't think you can just legislate that</p>",
        "id": 390829885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694654938
    },
    {
        "content": "<p>I can certainly encourage it. And I have yet to see any counterexamples in the Lean ecosystem.</p>",
        "id": 390829920,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694654964
    },
    {
        "content": "<p>I think this freedom is desired, especially if I want to use Lean to create a very simple CLI</p>",
        "id": 390829957,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694654997
    },
    {
        "content": "<p>Lake is a library, but only half of it is really designed as such. Mathport is not a library. REPL is not a library. I can't think of any other examples of lean executables that are libraries?</p>",
        "id": 390830025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655010
    },
    {
        "content": "<p>I mean, this does not add any major overhead (outside of one line in the lakefile).</p>",
        "id": 390830041,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655024
    },
    {
        "content": "<p>My Python ENV manager (viper) is not a library</p>",
        "id": 390830085,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694655057
    },
    {
        "content": "<p>Mathport is certainly a library. I could easily see someone building on top of it to create a variant. Same thing with the REPL.</p>",
        "id": 390830106,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655074
    },
    {
        "content": "<p>the main issue, for the purpose of this discussion, is that making a library forces the hard question of having to <em>name</em> it, when both the library and the exe obviously want to lay claim to the same name</p>",
        "id": 390830108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655081
    },
    {
        "content": "<p>Mathport, as currently designed, is not a library</p>",
        "id": 390830124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655093
    },
    {
        "content": "<p>it is strictly speaking a thing you can import, but it is not usable as such</p>",
        "id": 390830139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655111
    },
    {
        "content": "<p>I think the simple thing to do here is just to lowercase the executable.</p>",
        "id": 390830153,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655116
    },
    {
        "content": "<p>what if you want the executable to have a capitalized name?</p>",
        "id": 390830222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655143
    },
    {
        "content": "<p>that is, the actual <code>Foo.exe</code> file coming out</p>",
        "id": 390830254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655158
    },
    {
        "content": "<p>Also, there is the fact that Lean allows you to prove things about code in other libraries. So even a pure executable may want to be used by someone else as a library for verification purposes.</p>",
        "id": 390830275,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655179
    },
    {
        "content": "<p>That is <em>even less</em> something that you can \"accidentally\" do well</p>",
        "id": 390830357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390830222\">said</a>:</p>\n<blockquote>\n<p>what if you want the executable to have a capitalized name?</p>\n</blockquote>\n<p>You can set <code>exeName</code> to an uppercase string.</p>",
        "id": 390830371,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655207
    },
    {
        "content": "<p>in that case, why does the exe even need a name?</p>",
        "id": 390830480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655241
    },
    {
        "content": "<p>For use in other configuration code.</p>",
        "id": 390830566,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655261
    },
    {
        "content": "<p>and if there is no such code?</p>",
        "id": 390830588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655269
    },
    {
        "content": "<p>Then it does not.</p>",
        "id": 390830612,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655277
    },
    {
        "content": "<p>so let's make it optional</p>",
        "id": 390830650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655293
    },
    {
        "content": "<p>(outside of CLI usage i.e., <code>lake build foo</code>).</p>",
        "id": 390830664,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> internally Lake still needs a unique name to identify it.</p>",
        "id": 390830740,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655322
    },
    {
        "content": "<p>also it should be human-readable for the CLI.</p>",
        "id": 390830787,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655340
    },
    {
        "content": "<p>it can just use the name of the package, etc etc</p>",
        "id": 390830823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655353
    },
    {
        "content": "<p>this is not a hard problem</p>",
        "id": 390830841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655360
    },
    {
        "content": "<p>No it cannot, it needs a unique name.</p>",
        "id": 390830922,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655377
    },
    {
        "content": "<p>Also it is currently using the name of the package. That is the problem here.</p>",
        "id": 390830980,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655397
    },
    {
        "content": "<p>Both the lib and exe are using the same name.</p>",
        "id": 390831020,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655413
    },
    {
        "content": "<p>well if the lib and the exe were the same thing this wouldn't be a problem</p>",
        "id": 390831075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655432
    },
    {
        "content": "<p>I am not sure why you are so objecting to the lowercasing of the name.</p>",
        "id": 390831086,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655436
    },
    {
        "content": "<p>I'm not, that was literally my suggestion to scott</p>",
        "id": 390831188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655476
    },
    {
        "content": "<p>but \"I don't want to?\" is a valid response</p>",
        "id": 390831247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655484
    },
    {
        "content": "<p>Where?</p>",
        "id": 390831301,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655502
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390821650\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390821650</a></p>",
        "id": 390831347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655519
    },
    {
        "content": "<p>How does that relate to automatic lowercasing by Lake? I remember you strongly objecting to that in the <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364429598\">previous thread</a>.</p>",
        "id": 390831504,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655576
    },
    {
        "content": "<p>I'm not objecting to the lowercasing</p>",
        "id": 390831747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655648
    },
    {
        "content": "<p>I am objecting to having to name a bunch of things that are irrelevant</p>",
        "id": 390831792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655664
    },
    {
        "content": "<p>and the issue in this case is that no matter whether you choose to uppercase or lowercase there will always be the possibility of conflicts so you need either a backup plan or an error message</p>",
        "id": 390832117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655755
    },
    {
        "content": "<p>You are only naming three things here, at least one of which is relevant. I would also argue the package name is relevant due to it being often the directory name. Lean also already requires some name duplication in modules/namespaces.</p>",
        "id": 390832158,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655769
    },
    {
        "content": "<p>I'm waiting for someone to find out what happens if they <code>lake init _package</code> or <code>lake init Nat</code> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 390832242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655797
    },
    {
        "content": "<p>Cargo.toml has only one occurrence of the package name in it</p>",
        "id": 390832381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655841
    },
    {
        "content": "<p>I want that</p>",
        "id": 390832426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390832117\">said</a>:</p>\n<blockquote>\n<p>and the issue in this case is that no matter whether you choose to uppercase or lowercase there will always be the possibility of conflicts so you need either a backup plan or an error message</p>\n</blockquote>\n<p>No? If the library is uppercase and the exe is lowercase than there is no potential for conflicts. Outside of special characters, which the fact that Lake even supports is somewhat surprising.</p>",
        "id": 390832453,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655855
    },
    {
        "content": "<p><code>lake init Foo</code> is a thing the user could write</p>",
        "id": 390832539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655883
    },
    {
        "content": "<p>no matter what your preferences are</p>",
        "id": 390832560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655891
    },
    {
        "content": "<p>Yes and that would work with this fix?</p>",
        "id": 390832590,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655900
    },
    {
        "content": "<p>what fix?</p>",
        "id": 390832644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655916
    },
    {
        "content": "<p>you would get a lib <code>Foo</code> and a exe <code>foo</code>?</p>",
        "id": 390832650,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655919
    },
    {
        "content": "<p>(with the lowercasing).</p>",
        "id": 390832691,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694655931
    },
    {
        "content": "<p>oh, would you like me to break that too? <code>lake init 0ver</code></p>",
        "id": 390832883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694655983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390832381\">said</a>:</p>\n<blockquote>\n<p>Cargo.toml has only one occurrence of the package name in it</p>\n</blockquote>\n<p>I really don't get why this matters. For simple use cases, the user will never touch these names again (so they are irrelevant). For complex cases, that just causes problems.</p>",
        "id": 390833035,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656035
    },
    {
        "content": "<p>it really doesn't</p>",
        "id": 390833075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656048
    },
    {
        "content": "<p>you just specify the name if you want something non-default</p>",
        "id": 390833127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390832883\">said</a>:</p>\n<blockquote>\n<p>oh, would you like me to break that too? <code>lake init 0ver</code></p>\n</blockquote>\n<p>Hence the fact that I said it breaks on special characters.</p>",
        "id": 390833167,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390833127\">said</a>:</p>\n<blockquote>\n<p>you just specify the name if you want something non-default</p>\n</blockquote>\n<p>The same applies here.</p>",
        "id": 390833275,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656097
    },
    {
        "content": "<p>The whole issue of this thread is about a name clash that occurs when you are doing something non-default and that being bad UX. The same thing would happen with the package default just in the opposite case.</p>",
        "id": 390833370,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656143
    },
    {
        "content": "<p>I definitely recall some funny things like <code>rEPL</code> coming out of a previous lowercasing mechanism though</p>",
        "id": 390833373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656145
    },
    {
        "content": "<p>Yes. For that reason, I am planning on lowercasing the whole name.</p>",
        "id": 390833408,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656183
    },
    {
        "content": "<blockquote>\n<p>when you are doing something non-default</p>\n</blockquote>\n<p>How is a new user supposed to know what default is when they've literally just wrote <code>lake init foo</code>? They might have learned about lean 10 minutes ago</p>",
        "id": 390833601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656321
    },
    {
        "content": "<p>To me it makes sense to inform the user up-front that they are naming logically distinct things (by Lake's view) rather than invisibly naming them all the same and then breaking mysteriously when that default fails.</p>",
        "id": 390833643,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656326
    },
    {
        "content": "<p>I think we should just have less things unless more things are needed</p>",
        "id": 390833717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656382
    },
    {
        "content": "<p>make everything anonymous with sensible defaults</p>",
        "id": 390833743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390833601\">said</a>:</p>\n<blockquote>\n<p>How is a new user supposed to know what default is when they've literally just wrote <code>lake init foo</code>? They might have learned about lean 10 minutes ago</p>\n</blockquote>\n<p>Yes, which is why we are trying to generate good automatic names. I could use hygiene to ensure it, but that seems less user-friendly.</p>",
        "id": 390833752,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390833717\">said</a>:</p>\n<blockquote>\n<p>I think we should just have less things unless more things are needed</p>\n</blockquote>\n<p>This, in my experience, is really bad for downstream use cases when a user needs to pick things apart for their usage.</p>",
        "id": 390833858,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656468
    },
    {
        "content": "<p>Enforcing (or at least heavily recommending) some logical structure upfront makes it easy to mix-and-match when necessary.</p>",
        "id": 390833902,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656499
    },
    {
        "content": "<p>but what if it's just a bare bones library? there is no structure to find</p>",
        "id": 390833914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656508
    },
    {
        "content": "<p>I think we should try to make it simple to hand-write a lakefile too</p>",
        "id": 390833952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656539
    },
    {
        "content": "<p>If its a bare bones library it would not have an executable. In which case, this problem does not appear. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 390833963,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656551
    },
    {
        "content": "<p><code>def main := IO.println \"hello world!\"</code></p>",
        "id": 390834014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656564
    },
    {
        "content": "<p>one line, done</p>",
        "id": 390834030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656573
    },
    {
        "content": "<p>then you do not need a library, which also eliminates this problem.</p>",
        "id": 390834045,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656583
    },
    {
        "content": "<p>why can't lakefiles be like that too?</p>",
        "id": 390834049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656584
    },
    {
        "content": "<p><code>lake_exe foo</code><br>\n<code>def main := IO.println \"hello world!\"</code><br>\n<span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 390834081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656610
    },
    {
        "content": "<p>That does work?</p>",
        "id": 390834094,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656622
    },
    {
        "content": "<p>The only addition is the <code>package foo</code> because Lake is a package manager, not a one-file manager.</p>",
        "id": 390834113,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656639
    },
    {
        "content": "<p>well that's not my problem</p>",
        "id": 390834122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656651
    },
    {
        "content": "<p>I actually need <code>import Lake</code>, <code>package foo</code> and <code>@[default_target]</code> to make that lakefile do something useful</p>",
        "id": 390834197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656689
    },
    {
        "content": "<p>Theoretically, Lake could auto generate a package from a target declaration. However, I feel like, in most cases, that is an error on the part of the user rather than some we want to succeed silently.</p>",
        "id": 390834242,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656731
    },
    {
        "content": "<p><code>import Lake</code> is understandable because of the Lake DSL</p>",
        "id": 390834249,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694656739
    },
    {
        "content": "<p><code>import Lake</code> is actually only necessary because of the LSP.</p>",
        "id": 390834262,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656756
    },
    {
        "content": "<p>lake could auto-add it when processing the file</p>",
        "id": 390834276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656770
    },
    {
        "content": "<p>Yes, it does not because of the LSP.</p>",
        "id": 390834292,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656781
    },
    {
        "content": "<p>in fact LSP could too, it knows it's looking at a lakefile</p>",
        "id": 390834295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694656783
    },
    {
        "content": "<p>Yes, but I am not in charge of the LSP.</p>",
        "id": 390834369,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656813
    },
    {
        "content": "<p>Thus, doing that would require an LSP PR, which was not in the cards back when I wrote that.</p>",
        "id": 390834448,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656864
    },
    {
        "content": "<p>However, I feel like the minimization is not worth it. After all, as long as <code>lake init</code> produces sensible defaults a user with simple needs should never have to touch it. So the bare bones complexity is not that important.</p>",
        "id": 390834673,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694656986
    },
    {
        "content": "<p>How radical is it to propose a toml file like Rust uses</p>",
        "id": 390834717,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694657019
    },
    {
        "content": "<p>I personally do not see the use. The only time most users care about build configurations is when they are complex, and those are the cases where programming is necessary (i.e., Cargo's <code>build.rs</code>).</p>",
        "id": 390834850,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657096
    },
    {
        "content": "<p>Recall that the current lakefile format is one of the reasons lake is slow to start up</p>",
        "id": 390834996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657189
    },
    {
        "content": "<p>It cuts through the need for LSP support, DSL knowledge, elaboration etc</p>",
        "id": 390835001,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694657194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> but only in the cases where you do not still need the <code>build.rs</code>. At which point, your configuration is likely simply enough it does not matter.</p>",
        "id": 390835155,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657307
    },
    {
        "content": "<p>the best configuration is no configuration</p>",
        "id": 390835218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657354
    },
    {
        "content": "<p>I agree, but Cargo does not support that either.</p>",
        "id": 390835268,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657393
    },
    {
        "content": "<p>Only interpreted languages tend to let you get away with that.</p>",
        "id": 390835344,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657424
    },
    {
        "content": "<p>I haven't tried, I wonder what the minimum requirements are</p>",
        "id": 390835349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657427
    },
    {
        "content": "<p>lean is an interpreted language</p>",
        "id": 390835357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657438
    },
    {
        "content": "<p>among other things</p>",
        "id": 390835372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657445
    },
    {
        "content": "<p>I remember the good old days when <code>leanpkg.toml</code> was created automatically and never edited by hand.</p>",
        "id": 390835383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694657453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I know,  but it was a conscious decision on Leo's/Sebastian's part to not allow no-package setups.</p>",
        "id": 390835412,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657484
    },
    {
        "content": "<p>oh that's a good point, another advantage of declarative formats like toml is that tools can sanely make edits to the file</p>",
        "id": 390835438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> That is my goal with a <code>lakefile.lean</code> for most end users.</p>",
        "id": 390835443,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657515
    },
    {
        "content": "<p><code>lake add mathlib</code> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 390835516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I mean that is pretty simple to automate: just write <code>require mathlib ...</code> to end of a lakefile.</p>",
        "id": 390835585,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657606
    },
    {
        "content": "<p>unless it's already there...</p>",
        "id": 390835616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657632
    },
    {
        "content": "<p><code>leanpkg new foo</code> and <code>leanpkg new Foo</code> both worked with zero surprise involved.</p>",
        "id": 390835617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694657632
    },
    {
        "content": "<p>what did they do?</p>",
        "id": 390835670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657648
    },
    {
        "content": "<p>Which is not hard for Lake to determine.</p>",
        "id": 390835675,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657651
    },
    {
        "content": "<p>in which case it should bump the version of mathlib, replacing the original</p>",
        "id": 390835717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657678
    },
    {
        "content": "<p>Is that what cargo does?</p>",
        "id": 390835754,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694657704
    },
    {
        "content": "<p>I think this a matter of preference. I dislike declarative configurations because it requires learning their particular syntax and makes complex configuring difficult. I love Ruby;s pure Ruby Gemfile/Rakefile approach and that is what mostly tried to copy with Lake.</p>",
        "id": 390835778,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694657719
    },
    {
        "content": "<p>I think cargo lets you do <code>cargo add lib@version</code> or something along those lines</p>",
        "id": 390835801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390835670\">said</a>:</p>\n<blockquote>\n<p>what did they do?</p>\n</blockquote>\n<p>Are you asking me what <code>leanpkg new foo</code> and <code>leanpkg new Foo</code> did? The first one created a folder named <code>foo</code> containing a Lean package called <code>foo</code>. The second one created a folder named <code>Foo</code> containing a Lean package called <code>Foo</code>. Isn't it amazing?</p>",
        "id": 390835962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694657847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I don't think it's just a matter of preference. It's also a matter of simplicity and general compatibility. It also gets a bit cyclic for Lake to alter the lake file itself</p>",
        "id": 390835963,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694657847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390835754\">said</a>:</p>\n<blockquote>\n<p>Is that what cargo does?</p>\n</blockquote>\n<p><code>cargo add foo</code> will add library foo if it is not already present, <code>cargo add foo@version</code> additionally sets the version of <code>foo</code> to <code>version</code></p>",
        "id": 390836003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694657875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390835963\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> I don't think it's just a matter of preference. It's also a matter of simplicity and general compatibility. It also gets a bit cyclic for Lake to alter the lake file itself</p>\n</blockquote>\n<p>I think the question here is compatibility with what? It seems like Lake should generally be in charge of managing lakefiles. This seems generally true for other package mangers as well (Cargo/Ruby/NPM/Yarn). While an external export format is nice, I do not think it used commonly enough to be relevant. Lean has a taken a similar approach with its source files which cannot be easily parsed by outside consumers either.</p>",
        "id": 390836299,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658055
    },
    {
        "content": "<p>compatibility with things that aren't lake?</p>",
        "id": 390836328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658079
    },
    {
        "content": "<p>Another Lean program can easily elaborate a lakefile as well.</p>",
        "id": 390836368,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658110
    },
    {
        "content": "<p>I have written several tools now that work on the edges of the lake ecosystem and the lakefiles are the hardest part</p>",
        "id": 390836378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658118
    },
    {
        "content": "<p>(Coming back from lunch and finding ~150 messages, I'm just popping in to say that I'm not planning on reading this thread until someone pings me with a conclusion. :-)</p>",
        "id": 390836442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694658135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Mac plans to auto-lowercase the input to produce the exe name</p>",
        "id": 390836490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658172
    },
    {
        "content": "<p>and then we had a long discussion about how lakefiles are unnecessarily complex and make the user name stuff that doesn't matter</p>",
        "id": 390836524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390836378\">said</a>:</p>\n<blockquote>\n<p>I have written several tools now that work on the edges of the lake ecosystem and the lakefiles are the hardest part</p>\n</blockquote>\n<p>My understanding is that is because you keep writing them in not-Lean.</p>",
        "id": 390836571,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658236
    },
    {
        "content": "<p>how weird</p>",
        "id": 390836616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658245
    },
    {
        "content": "<p>?</p>",
        "id": 390836691,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658299
    },
    {
        "content": "<p>Why should that be a requirement for parsing a config file?</p>",
        "id": 390836744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658342
    },
    {
        "content": "<p>Tools for most other languages are generally written in that language, so I think it should not be surprising that doing so out of the language is not well supproted.</p>",
        "id": 390836755,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390836744\">said</a>:</p>\n<blockquote>\n<p>Why should that be a requirement for parsing a config file?</p>\n</blockquote>\n<p>Why should it not be encouraged to use Lean for Lean tooling?</p>",
        "id": 390836854,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658397
    },
    {
        "content": "<p>I can parse almost any config file format in ~0 seconds, but starting up lean takes something like 30 ms before it can even start to do things and 200 ms before it is ready to actually elaborate the file</p>",
        "id": 390836865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658408
    },
    {
        "content": "<p>Any other config file format can be parsed by every language under the sun</p>",
        "id": 390836926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Ruby's <code>Gemfile</code> or <code>Rakefile</code>?</p>",
        "id": 390836962,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658477
    },
    {
        "content": "<p>Or even a Makefile for that mattter?</p>",
        "id": 390837023,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658507
    },
    {
        "content": "<p>those aren't config files, they are ruby files pretending to be config files</p>",
        "id": 390837038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658516
    },
    {
        "content": "<p>how about an autoconf configure file</p>",
        "id": 390837078,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658537
    },
    {
        "content": "<p>One of the earliest configuration files....</p>",
        "id": 390837092,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658548
    },
    {
        "content": "<p>TBH I think you could write an external parser for make and autoconf</p>",
        "id": 390837127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658574
    },
    {
        "content": "<p>it wouldn't be very fun but it isn't fundamentally hard to do so</p>",
        "id": 390837157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658596
    },
    {
        "content": "<p>Would it semantically understand it?</p>",
        "id": 390837247,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658649
    },
    {
        "content": "<p>If it doesn't do anything fancy, sure</p>",
        "id": 390837262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658660
    },
    {
        "content": "<p>I mean, you could probably do the same for a lakefile then.</p>",
        "id": 390837287,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658677
    },
    {
        "content": "<p>if it does, that's probably impossible anyway, the preprocessor is bananas</p>",
        "id": 390837292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658681
    },
    {
        "content": "<p>If the requirement is no fancy.</p>",
        "id": 390837297,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658684
    },
    {
        "content": "<p>I would love it if lakefiles were written in \"lean-lite\" that could be parsed by a simple parser</p>",
        "id": 390837342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390837292\">said</a>:</p>\n<blockquote>\n<p>if it does, that's probably impossible anyway, the preprocessor is bananas</p>\n</blockquote>\n<p>Which is kind of the point. There are many industry standard configurations that are only easily managed by their own tooling.</p>",
        "id": 390837378,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658724
    },
    {
        "content": "<p>the lean preprocessor is bananas too</p>",
        "id": 390837398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658740
    },
    {
        "content": "<p>because it's lean itself</p>",
        "id": 390837406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658747
    },
    {
        "content": "<p>I feel like time would be better spent improving Lean so that you like writing in it rather than making it easier for other languages to understand it.</p>",
        "id": 390837451,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658785
    },
    {
        "content": "<p>I'm not sure these examples are making a good argument that we should be copying them</p>",
        "id": 390837466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658800
    },
    {
        "content": "<p>I do like writing lean, that's not the problem</p>",
        "id": 390837485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658812
    },
    {
        "content": "<p>the problem is that the tooling isn't good enough yet</p>",
        "id": 390837561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658847
    },
    {
        "content": "<p>Yes and it certainly not going to get there if you keep writing the tooling in other languages. <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 390837606,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658883
    },
    {
        "content": "<p>I'm not trying to make lean understandable to other languages (well I am but that's a different discussion), I'm trying to make simple project configurations parseable in ~0 seconds</p>",
        "id": 390837617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658898
    },
    {
        "content": "<p>Why is that important?</p>",
        "id": 390837639,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658916
    },
    {
        "content": "<p>???</p>",
        "id": 390837655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658930
    },
    {
        "content": "<p>simple things should be simple</p>",
        "id": 390837664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658937
    },
    {
        "content": "<p>What are you using the configuration for that it needs to be parsed so quickly?</p>",
        "id": 390837692,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694658956
    },
    {
        "content": "<p><code>cache</code> is the obvious application</p>",
        "id": 390837743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694658968
    },
    {
        "content": "<p>Lake's start-up time is irrelevant to cache. Since a <code>cache get</code> is followed by a <code>lake build</code> and that has to pay the cost anyway.</p>",
        "id": 390837815,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659030
    },
    {
        "content": "<p>And if cache needs information from Lake, Lake could just invoke it with that information.</p>",
        "id": 390837870,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390837451\">said</a>:</p>\n<blockquote>\n<p>I feel like time would be better spent improving Lean so that you like writing in it rather than making it easier for other languages to understand it.</p>\n</blockquote>\n<p>By the way, I think this is the wrong mentality. You don't just get an awesome language by making the walled garden better, you also improve things by breaking down the walls and making it easy for people to enter and build pathways to it from all around</p>",
        "id": 390837930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390837815\">said</a>:</p>\n<blockquote>\n<p>Lake's start-up time is irrelevant to cache. Since a <code>cache get</code> is followed by a <code>lake build</code> and that has to pay the cost anyway.</p>\n</blockquote>\n<p>Only because parsing configuration is slow</p>",
        "id": 390837966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Building a pathway <em>to</em> it is very different from building  a pathway <em>from</em> it.</p>",
        "id": 390838000,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659159
    },
    {
        "content": "<p>pathways go both ways</p>",
        "id": 390838010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659168
    },
    {
        "content": "<p>Not necessarily.</p>",
        "id": 390838020,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659176
    },
    {
        "content": "<p>mine do</p>",
        "id": 390838027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390837966\">said</a>:</p>\n<blockquote>\n<p>Only because parsing configuration is slow</p>\n</blockquote>\n<p>I have no clue what you mean here?</p>",
        "id": 390838131,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659236
    },
    {
        "content": "<p>How does parsing the configuration have anything to do with the workflow?</p>",
        "id": 390838167,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390838027\">said</a>:</p>\n<blockquote>\n<p>mine do</p>\n</blockquote>\n<p>Could you explain what some of these pathways you are trying to build are? I am worried there is something of an XY problem here.</p>",
        "id": 390838235,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659315
    },
    {
        "content": "<p>Lake is slow to startup because it has to parse a lot of lakefiles, among other things</p>",
        "id": 390838370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> One option on the name front would be to just name the <code>lean_exe</code> <code>exe</code> and the <code>lean_lib</code> <code>lib</code> (and just set the the relevant names via <code>roots</code>/<code>exeName</code>. Would that be preferrable?</p>",
        "id": 390838376,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659397
    },
    {
        "content": "<p>yes it would</p>",
        "id": 390838396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659419
    },
    {
        "content": "<p>Jumping in --- as far as I understand, lake's start up time is very relevant</p>\n<ul>\n<li>We need to run <code>lake exe cache get</code> (or some equivalent replacement) before every <code>lake build</code> (is this agreed? I can explain the reasoning here if needed)</li>\n<li>This will then run <em>every</em> time someone opens a new window in VSCode.</li>\n<li>99% of the time everything will already be compiled (i.e. so we don't get to compare to the cost of actually building)</li>\n<li>and we expect that to be as fast as possible.</li>\n</ul>",
        "id": 390838397,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694659420
    },
    {
        "content": "<p>I'd previously said I wanted a noop <code>lake exe cache get</code> under 1s, but really I'd like more like 0.1s: this will be user perceptible time every time they open a new window.</p>",
        "id": 390838490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694659475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390838397\">said</a>:</p>\n<blockquote>\n<ul>\n<li>We need to run <code>lake exe cache get</code> (or some equivalent replacement) before every <code>lake build</code> (is this agreed? I can explain the reasoning here if needed)</li>\n</ul>\n</blockquote>\n<p>The <code>cache get</code> is part of the <code>lake build</code> (e.g. in my mathlib PR) so we do not need to pay the start-up cost twice.</p>",
        "id": 390838514,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659486
    },
    {
        "content": "<p>The <code>lean-cache</code> implementation is about 190ms but I think it will be smaller if we know what file we want to open</p>",
        "id": 390838545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659511
    },
    {
        "content": "<p>I simply do not believe we can get that time with the current state of the lean compiler, which is why I wrote it in not-lean</p>",
        "id": 390838669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Not paying even the <code>lake build</code> start-up cost can be solved server-side with better Lake-LSP integration.</p>",
        "id": 390838677,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659586
    },
    {
        "content": "<p>I think I agree with you both, in that case, and will let you get back to it. :-)</p>",
        "id": 390838715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694659620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Just to clarify, what I meant by paying twice is that right now we call <code>lake exe cache get</code> via CLI and then <code>lake build</code>(actually <code>lake print--paths</code>) via open VSCode, thus the start-up cost is not relevant to integrating cache get into the build because we are already paying it as part of <code>lake print-paths</code> (and integrating it will not cause us to pay it twice).</p>",
        "id": 390838884,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659738
    },
    {
        "content": "<p>But we're <strong>not</strong> paying it.</p>\n<p>Right now everyone doesn't run <code>lake exe cache get</code> as often as they ought to, because they actually have to type it.</p>",
        "id": 390838949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694659789
    },
    {
        "content": "<p>and because they know that it is slow, and will likely be a noop anyway</p>",
        "id": 390839022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694659816
    },
    {
        "content": "<p>For the record, I have suffered with slow <code>lake print-paths</code> before</p>",
        "id": 390839074,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694659852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390838949\">said</a>:</p>\n<blockquote>\n<p>But we're <strong>not</strong> paying it.</p>\n</blockquote>\n<p>I mean the Lake start-up cost, not the cache one. It is already paid by <code>lake print-paths</code>.</p>",
        "id": 390839105,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659868
    },
    {
        "content": "<p>the fact that it takes something like 4-5 seconds after opening a lean file for the yellow bars to appear is a very noticeable thing that has been oft remarked on</p>",
        "id": 390839144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659894
    },
    {
        "content": "<p>we used to have orange bar hell now we have no bar hell</p>",
        "id": 390839166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694659907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> It should not be taking 4-5 seconds. Lake only has a 1-2s startup cost (2 before the olean cache, 1 after). (from Scott's benchmarks)</p>",
        "id": 390839239,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694659938
    },
    {
        "content": "<p>This is unfortunately true. I regularly have time to wonder \"is something broken and I need to restart VSCode?\" before the bars appear at all.</p>",
        "id": 390839265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694659956
    },
    {
        "content": "<p>I wouldn't guess it is 4-5s for me, but still enough to allow a worried thought.</p>",
        "id": 390839301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694659979
    },
    {
        "content": "<p>There is something about it which is dependent on the size of the project, I have seen it vary by an order of magnitude</p>",
        "id": 390839338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660009
    },
    {
        "content": "<p>I have many students whose laptops are not fast and I can testify it feels like it's taking forever.</p>",
        "id": 390839367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694660029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I do not believe that mathlib has got the olean cache update to Lake yet, so by the next Lean release should happily cut the time in half.</p>",
        "id": 390839478,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694660097
    },
    {
        "content": "<p>It's especially annoying when you don't know yet whether Lean is correctly installed.</p>",
        "id": 390839503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694660118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390839338\">said</a>:</p>\n<blockquote>\n<p>There is something about it which is dependent on the size of the project, I have seen it vary by an order of magnitude</p>\n</blockquote>\n<p>Yeah, post-olean cache the problem is the importing (which is linear in the number of packages). This is mostly all caused by the fact that Lean does not support multiple asynchronous elaborations. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 390839599,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694660164
    },
    {
        "content": "<p>do you know the list of things that actually happens prior to drawing the yellow bar?</p>",
        "id": 390839637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660191
    },
    {
        "content": "<p>can we just draw it earlier?</p>",
        "id": 390839653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660206
    },
    {
        "content": "<p>Not off the top of my head. I would have to go look through the LSP code.</p>",
        "id": 390839703,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694660241
    },
    {
        "content": "<p>do you know what message is used to update that bar?</p>",
        "id": 390839902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660371
    },
    {
        "content": "<p>oh maybe it's <code>$/lean/fileProgress</code></p>",
        "id": 390839939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660390
    },
    {
        "content": "<p>Hm, it looks like <code>publishProgressAtPos</code> is called literally right at the beginning of <code>startFileWorker</code>, before it has even called lake, so I don't know why there would be any delay</p>",
        "id": 390840529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390838376\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> One option on the name front would be to just name the <code>lean_exe</code> <code>exe</code> and the <code>lean_lib</code> <code>lib</code> (and just set the the relevant names via <code>roots</code>/<code>exeName</code>. Would that be preferrable?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390838396\">said</a>:</p>\n<blockquote>\n<p>yes it would</p>\n</blockquote>\n<p>If this is preferred, I would be happy to make it. But I would like to make sure this is generally well-liked (since it is a major change). For one, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, does this also sound good to you?</p>",
        "id": 390840593,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694660702
    },
    {
        "content": "<p>what are the impacts of the change?</p>",
        "id": 390840722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660757
    },
    {
        "content": "<p>oops!</p>",
        "id": 390841010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694660882
    },
    {
        "content": "<p>Sorry, could you explain exactly what the proposed change is. I don't understand what \"name the <code>lean_exe</code> <code>exe</code> \" means.</p>",
        "id": 390841145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694660948
    },
    {
        "content": "<p>my understanding is that lakefiles now look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">foo</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">lib</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">exe</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 390841351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661047
    },
    {
        "content": "<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">foo</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">foo</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 390841387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661067
    },
    {
        "content": "<p>What if one has more than one library and executable in a repository. I have this in many places.</p>",
        "id": 390841444,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694661098
    },
    {
        "content": "<p>but I would like to know what, other than the textual content of the lakefile, would be affected by this</p>",
        "id": 390841446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661099
    },
    {
        "content": "<p>you can still name it something other than <code>exe</code> <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span></p>",
        "id": 390841467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661115
    },
    {
        "content": "<p>So I take it the change is how <code>lake new</code> works.</p>",
        "id": 390841556,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694661145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> However, this would need more configuration as a result. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">foo</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">lib</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Foo</span><span class=\"o\">]</span>\n  <span class=\"n\">libName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Foo\"</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">exe</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Foo</span>\n  <span class=\"n\">exeName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"foo\"</span>\n</code></pre></div>",
        "id": 390841571,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661158
    },
    {
        "content": "<p>Can we not simply edit <code>exe</code> and <code>lib</code>?</p>",
        "id": 390841652,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694661198
    },
    {
        "content": "<p>I think you know what I'm going to say: if it's the default, you shouldn't need to say it</p>",
        "id": 390841668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Problem is, the configurations do not have the name information form the package.</p>",
        "id": 390841718,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661233
    },
    {
        "content": "<p>the result of <code>grep Foo | wc -l</code> is not going down</p>",
        "id": 390841776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661245
    },
    {
        "content": "<p>Yes, that would require more internal fiddling to use the package configuration name in the defaults (via the DSL).</p>",
        "id": 390841918,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661316
    },
    {
        "content": "<p>or you can just use none</p>",
        "id": 390841940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661324
    },
    {
        "content": "<p>That also causes problems because I still need to fill it in somewhere.</p>",
        "id": 390841985,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Independent of the deeper issues, I really like having many libraries and executables. I am perfectly happy if <code>lake new</code> makes single ones named <code>exe</code> and <code>lib</code> so long as I can edit to the present generality.</p>",
        "id": 390842001,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694661358
    },
    {
        "content": "<p>Mathlib has several libraries, but they have name clash issues</p>",
        "id": 390842117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> It great to know that others are making use of multiple libraries and executables! I will certainly preserve that flexibility. The debate here has been about what, if anything, we should do to simplify the most basic cases (one lib and/or exe) for users.</p>",
        "id": 390842180,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661438
    },
    {
        "content": "<p>one other nice thing that cargo does: you don't even need to say whether you are building a lib or exe. If it's an exe you have <code>Cargo.toml</code> and <code>main.rs</code>, if it's a lib you have <code>Cargo.toml</code> and <code>lib.rs</code></p>",
        "id": 390842368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661520
    },
    {
        "content": "<p>(and of course there is configuration for everything if you want to do something else)</p>",
        "id": 390842402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> In Lake's case <code>lib.rs</code> is impossible because library modules have to correspond to the their names.</p>",
        "id": 390842583,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661632
    },
    {
        "content": "<p>impossible is a strong word</p>",
        "id": 390842603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661645
    },
    {
        "content": "<p>here's a minimal rust project:<br>\n<code>Cargo.toml</code>:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p><code>src/main.rs</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 390842712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661706
    },
    {
        "content": "<p>although the standard style looks more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"foo\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1.0\"</span>\n</code></pre></div>\n<p>and the cargo new style looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"foo\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1.0\"</span>\n<span class=\"n\">edition</span> <span class=\"bp\">=</span> <span class=\"s2\">\"2021\"</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">See</span> <span class=\"n\">more</span> <span class=\"n\">keys</span> <span class=\"n\">and</span> <span class=\"n\">their</span> <span class=\"n\">definitions</span> <span class=\"n\">at</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">doc.rust</span><span class=\"bp\">-</span><span class=\"n\">lang.org</span><span class=\"bp\">/</span><span class=\"n\">cargo</span><span class=\"bp\">/</span><span class=\"n\">reference</span><span class=\"bp\">/</span><span class=\"n\">manifest.html</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 390842873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> In Lean, the problem is what happens if a person creates <code>lake init main</code>?</p>",
        "id": 390842876,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661777
    },
    {
        "content": "<p>what's the problem?</p>",
        "id": 390842925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661811
    },
    {
        "content": "<p>what is should the name of the main root be if they have both a library and an executable?</p>",
        "id": 390842975,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661841
    },
    {
        "content": "<p>in cargo you use <code>cargo new foo</code> to make an exe and <code>cargo new foo --lib</code> to make a lib</p>",
        "id": 390843053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661869
    },
    {
        "content": "<p>The library has to be <code>Main</code> because Lean does not support module renaming, so what is the executable's name?</p>",
        "id": 390843059,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661873
    },
    {
        "content": "<p>so by default it's an exe (and not a lib)</p>",
        "id": 390843074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661884
    },
    {
        "content": "<p>there is no lib</p>",
        "id": 390843102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661901
    },
    {
        "content": "<p>it's just <code>Main.lean</code></p>",
        "id": 390843113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694661909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Sure, but I was talking about lake where <code>lake init main std</code> is the default which is lib+exe.</p>",
        "id": 390843126,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661915
    },
    {
        "content": "<p>I am asking what if the user wants to create both.</p>",
        "id": 390843140,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661927
    },
    {
        "content": "<p>That is, they explicitly choose <code>lake init main std</code> rather than <code>lake init main lib</code> or <code>lake init main exe</code>.</p>",
        "id": 390843260,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694661976
    },
    {
        "content": "<p>if they actually called the program <code>main</code>? They get an error, \"library name 'Main' conflicts with executable name 'Main'\"</p>",
        "id": 390843392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694662064
    },
    {
        "content": "<p>or a warning and you don't construct the lib</p>",
        "id": 390843505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694662112
    },
    {
        "content": "<p>or you rename the executable module to <code>MainExe</code></p>",
        "id": 390843652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694662199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> One disadvantage of defaulting the names to something fixed is that it does making add more libs/exes more of a pain.</p>",
        "id": 390844679,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694662702
    },
    {
        "content": "<p>And I definitely prefer configuring a single lib/exe to take 1 or 2 extra lines than multiple libs/exe taking 1-2 extra lines.</p>",
        "id": 390844787,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694662757
    },
    {
        "content": "<p>I guess what I could do is make the identifier optional in the DSL and in that case only default the name to the package.</p>",
        "id": 390845076,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694662886
    },
    {
        "content": "<p>Would it be possible for an exe config to be just </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 390845159,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694662923
    },
    {
        "content": "<p>Then <code>lake exe foo</code> would call it</p>",
        "id": 390845282,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694662978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> yes. In fact, <code>lean_exe foo where &lt;...&gt;</code> already expands to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[lean_exe]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"bp\">&lt;...&gt;</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 390845493,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663074
    },
    {
        "content": "<p>The problem here is naming that <code>def</code>?</p>",
        "id": 390845588,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694663125
    },
    {
        "content": "<p>That, and the name still needs to be unique as well.</p>",
        "id": 390845619,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663143
    },
    {
        "content": "<p>and libs and exes currently live in the same logical \"namespace\".</p>",
        "id": 390845694,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663167
    },
    {
        "content": "<p>(at least on the CLI, not for build keys)</p>",
        "id": 390845795,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663231
    },
    {
        "content": "<p>And this is also why the discussion about declarative config is relevant. This limitation wouldn't exist otherwise</p>",
        "id": 390845818,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694663247
    },
    {
        "content": "<p>I am happy to split the namespaces further on the CLI, but then I need a prefix for each different type. I am already somewhat unhappy with my choice of the <code>+</code> prefix for the module namespace.</p>",
        "id": 390845932,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390845818\">said</a>:</p>\n<blockquote>\n<p>And this is also why the discussion about declarative config is relevant. This limitation wouldn't exist otherwise</p>\n</blockquote>\n<p>Yes it would? They would still need unique names?</p>",
        "id": 390845973,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663318
    },
    {
        "content": "<p>The def name can easily be autogenerated when we do not care about it.</p>",
        "id": 390846010,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663337
    },
    {
        "content": "<p>It, however, is currently very useful when writing custom targets to make fetching declared targets easier (and more efficient in some cases).</p>",
        "id": 390846072,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663376
    },
    {
        "content": "<p>That is still a minor concern, though, the major one is keeping the names themselves distinct.</p>",
        "id": 390846209,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663430
    },
    {
        "content": "<p>distinct from what?</p>",
        "id": 390846235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> from each other within the same logical namespace?</p>",
        "id": 390846279,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663479
    },
    {
        "content": "<p>That is, you cannot have two libraries or executables with the same name.</p>",
        "id": 390846310,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663495
    },
    {
        "content": "<p>There needs to be a unique key for them in the build store and a way to name them from the CLI and from build scripts (potentially in other packages).</p>",
        "id": 390846507,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663606
    },
    {
        "content": "<p>just checked what cargo does, you can have multiple binaries and the names have to be distinct, but you can only have one lib and you need to use a \"workspace\" with multiple <code>Cargo.toml</code>s to have multiple libs in the same project</p>",
        "id": 390846635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yeah, that would not be acceptable for Lean.</p>",
        "id": 390846679,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663691
    },
    {
        "content": "<p>I'm not sure that's true</p>",
        "id": 390846697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663702
    },
    {
        "content": "<p>the cargo workspace would be analogous to the current lakefile.lean</p>",
        "id": 390846732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663718
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> already noted that.</p>",
        "id": 390846742,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663723
    },
    {
        "content": "<p>it's the thing that the server uses to orient itself</p>",
        "id": 390846748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663728
    },
    {
        "content": "<p>for the rest, you can still have multiple libs, they are just a bit more self contained which makes them easier to import from another project by just pointing to the subfolder</p>",
        "id": 390846818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663763
    },
    {
        "content": "<p>Rust demands a library project to be just a library, and an executable project to be just an executable.</p>\n<p>But if one wants executables in a library, they make <code>examples</code>, if one wants libraries in an executable project, they create \"library subprojects\" in it, and each project is published as a crate (a rust package).</p>\n<p>Check the file layout in <a href=\"https://github.com/dimforge/nalgebra\">https://github.com/dimforge/nalgebra</a> for what <code>examples</code> and \"library subprojects\" mean.</p>\n<p>This is how Rust solves the lib+exe problem, arguable it's more typing.</p>",
        "id": 390846844,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694663769
    },
    {
        "content": "<p>I've read the whole long discussion, in the hope that it eventually leads to  </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>init<span class=\"w\"> </span>foo\nlake<span class=\"w\"> </span>add<span class=\"w\"> </span>mathlib\nlake<span class=\"w\"> </span>lib<span class=\"w\"> </span>bar\nlake<span class=\"w\"> </span>build\n</code></pre></div>\n<p>then one has:</p>\n<ul>\n<li>exe: <code>foo</code></li>\n<li>libs: <code>foo</code>, <code>bar</code></li>\n<li>deps: from cache or cloud build</li>\n</ul>",
        "id": 390846855,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694663779
    },
    {
        "content": "<p>I really do not get why CLI solutions are so necessary. Why not just edit the file?</p>",
        "id": 390846947,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663842
    },
    {
        "content": "<p>because people mess that up more easily</p>",
        "id": 390846969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663859
    },
    {
        "content": "<p>there could be arcane horrors in the file for all you know</p>",
        "id": 390846987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663874
    },
    {
        "content": "<p>How? CLI commands are pain to remember and easily typo'd they do not come with syntax highlighting or hovers or error markers or any of the stuff a file in a good editor does.</p>",
        "id": 390847060,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663899
    },
    {
        "content": "<p><code>cargo add</code> was a recent addition, people said the same thing about the dependency section, how hard can it be to just add one line?</p>",
        "id": 390847124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663947
    },
    {
        "content": "<p>CLI commands also tend to easily break things without warning and without asking for confirmation and without an undo button.</p>",
        "id": 390847137,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694663957
    },
    {
        "content": "<p>but you have to look up the version, and also you want to download it and put things back in order</p>",
        "id": 390847175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694663983
    },
    {
        "content": "<p>for mathlib this is even more important since we want to change your lean-toolchain and download the cache</p>",
        "id": 390847292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664025
    },
    {
        "content": "<p>it's not just adding a line to the lakefile</p>",
        "id": 390847363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but neither of those things would be part of a standard declarative <code>lake add</code>. Both would require programmable hooks into the process.</p>",
        "id": 390847479,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664101
    },
    {
        "content": "<p>okay?</p>",
        "id": 390847503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664112
    },
    {
        "content": "<p>Which means you do want a nondeclarative configuration then.</p>",
        "id": 390847566,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664132
    },
    {
        "content": "<p>So you can define such hooks.</p>",
        "id": 390847600,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664147
    },
    {
        "content": "<p>I'm not sure what this has to do with the config file format</p>",
        "id": 390847606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664149
    },
    {
        "content": "<p>of course we want to be able to define hooks and so on</p>",
        "id": 390847640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664168
    },
    {
        "content": "<p>How and where does one define the hooks then?</p>",
        "id": 390847646,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664170
    },
    {
        "content": "<p>lean files, probably</p>",
        "id": 390847667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664182
    },
    {
        "content": "<p>a hook for people that lake-add this library is clearly outside the \"simple config\" subset</p>",
        "id": 390847760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664221
    },
    {
        "content": "<p>And then you need to add those hooks to the configuration and manage state between them and all that fun stuff and then you get the unwieldly mess that is \"declarative\" configurations like GitHub CI YAML files.</p>",
        "id": 390847840,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664249
    },
    {
        "content": "<p>what state?</p>",
        "id": 390847904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664299
    },
    {
        "content": "<p>I'm not sure what you mean by this</p>",
        "id": 390847924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664308
    },
    {
        "content": "<p>Between hooks.</p>",
        "id": 390847932,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664316
    },
    {
        "content": "<p>this is being run on the command line, I'm not sure where you plan to put that state</p>",
        "id": 390848110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664405
    },
    {
        "content": "<p>???</p>",
        "id": 390848160,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664434
    },
    {
        "content": "<p>if this runs after <code>lake add</code>, then it's making modifications to the user's file system, not storing state into the lake build cache for someone else to pick up</p>",
        "id": 390848235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664483
    },
    {
        "content": "<p>any state will persist because it's not in lake, it's on disk</p>",
        "id": 390848331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664529
    },
    {
        "content": "<p>For <code>lake add</code>, I could imagine a resolver hook, a pre-add hook, and a post-add hook. If you have a declarative configuration, you would generally specify each of these pointing to some external script to run. However, problems arise if those hooks need to talk to each other (or to other such hooks).</p>",
        "id": 390848427,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664587
    },
    {
        "content": "<p>What I'm talking about is not eliminating the lean code from lakefiles, just moving all the stuff that isn't turing-complete into a simpler format which can be parsed</p>",
        "id": 390848512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> And I still feel like this is an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. I have yet to understand why parsing such data is necessary outside of Lake.</p>",
        "id": 390848635,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664713
    },
    {
        "content": "<p>I don't see why the hooks talking to each other is something lake needs to deal with, lean code is plenty capable of doing that</p>",
        "id": 390848641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664718
    },
    {
        "content": "<p>I didn't even say anything about parsing outside of lake, using a simpler format is a benefit for lake too</p>",
        "id": 390848799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664806
    },
    {
        "content": "<p>I certainly understand that you want to do it. I just don't see what big, impactful project is being inhibited by it and thus why doing so should be a high priority. It is fine as a long-term TODO, but I see no short-term significant use.</p>",
        "id": 390848801,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664809
    },
    {
        "content": "<p>the short term significant problem is lake is slow</p>",
        "id": 390848830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664832
    },
    {
        "content": "<p>Lake is slow to do what?</p>",
        "id": 390848882,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664850
    },
    {
        "content": "<p>the main one which is relevant for this discussion is startup</p>",
        "id": 390848909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664874
    },
    {
        "content": "<p>I have a project with 6 packages depending on each other, nothing fancy. This should take 0 seconds to parse</p>",
        "id": 390848977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694664917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> As you already noted, writing the parser in Lean would already take about 200ms anyway.</p>",
        "id": 390849017,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694664954
    },
    {
        "content": "<p>Lake takes about a second that is not super-substantial overhead for a build (which in the common takes many seconds to minutes).</p>",
        "id": 390849145,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665011
    },
    {
        "content": "<p>just tested, <code>lake env true</code> in mathport takes 2282ms</p>",
        "id": 390849175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665028
    },
    {
        "content": "<p><code>true | lake serve</code> takes 5.6s</p>",
        "id": 390849324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, <code>lake env</code> is unfortunate bottleneck because it currently needs the elaborated configuration when it really should not. But for anything else <code>lake serve</code>, <code>lake script</code>, <code>lake build</code>, <code>lake exe</code>, etc. importing Lean hooks would be unavoidable.</p>",
        "id": 390849352,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665122
    },
    {
        "content": "<p><code>lake build Init</code> takes 1753ms</p>",
        "id": 390849433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665194
    },
    {
        "content": "<p>??? What is your point there?</p>",
        "id": 390849567,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665259
    },
    {
        "content": "<p><code>lake script list</code> also takes 1758ms, I assume that's the time it takes to get to the \"main menu\"</p>",
        "id": 390849592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665276
    },
    {
        "content": "<p>the point? It's very far from 0</p>",
        "id": 390849617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665301
    },
    {
        "content": "<p>this is 2 orders of magnitude slower than I want it to be</p>",
        "id": 390849636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665320
    },
    {
        "content": "<p>Yes, but that is importing hooks (and needs to do so), so that seems logical since import Lean is time-consuming.</p>",
        "id": 390849679,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665331
    },
    {
        "content": "<p>hopefully we can get at least 1 order of magnitude</p>",
        "id": 390849698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Are these tests post-olean cache?</p>",
        "id": 390849737,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665375
    },
    {
        "content": "<p>probably not</p>",
        "id": 390849751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665385
    },
    {
        "content": "<p>Do you have a <code>lakefile.olean</code>?</p>",
        "id": 390849765,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665401
    },
    {
        "content": "<p>we can all celebrate when they go down later</p>",
        "id": 390849771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665406
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 390849792,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665423
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 390849799,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665428
    },
    {
        "content": "<p>mathlib is still on v4.0.0</p>",
        "id": 390849916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665480
    },
    {
        "content": "<p>I would like to get the importing to be semi-constant time, that is certainly the next step.</p>",
        "id": 390849922,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665482
    },
    {
        "content": "<p>is there a new stable?</p>",
        "id": 390849927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665485
    },
    {
        "content": "<p>That is, make it dependent on the number of constants rather than the number of packages.</p>",
        "id": 390849962,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665507
    },
    {
        "content": "<p>what constants?</p>",
        "id": 390849995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No, that will be at the end of the month. The nightly already has it, of course.</p>",
        "id": 390849996,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390849995\">said</a>:</p>\n<blockquote>\n<p>what constants?</p>\n</blockquote>\n<p>The imported constants / environment extensions.</p>",
        "id": 390850033,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665560
    },
    {
        "content": "<p>That is, we only perform a full import once.</p>",
        "id": 390850080,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665571
    },
    {
        "content": "<p>imported by what?</p>",
        "id": 390850089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665577
    },
    {
        "content": "<p>Lake.</p>",
        "id": 390850096,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665582
    },
    {
        "content": "<p>the lakefiles?</p>",
        "id": 390850097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665583
    },
    {
        "content": "<p>By Lake from the lakefiles.</p>",
        "id": 390850109,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694665592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390849927\">said</a>:</p>\n<blockquote>\n<p>is there a new stable?</p>\n</blockquote>\n<p>(I'm planning to make <code>v4.1.0-rc1</code> and update Mathlib in about 24 hours.)</p>",
        "id": 390850260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694665685
    },
    {
        "content": "<p>I am frustrated that you can't have static data in lean, you shouldn't need to calculate that at run time, you already know what <code>import Lake</code> will do</p>",
        "id": 390850284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665706
    },
    {
        "content": "<p>I wonder whether you could put static data into the olean file and mmap it at startup</p>",
        "id": 390850428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694665791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Yes, the long-term goal would be to separate the serializable data from the dynamic hooks that require a proper Lean environment to evaluate. Then store the serializable data separately and load only it by default. Only when Lake actually needs the hooks would it load the dynamic data.</p>",
        "id": 390852298,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694667053
    },
    {
        "content": "<p>This would make e.g. <code>lake env</code> and <code>lake script list</code> much faster.</p>",
        "id": 390852326,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694667073
    },
    {
        "content": "<p>Going one step further, the functions could be compiled into shared libraries to elide importing altogether.</p>",
        "id": 390852459,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694667125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390829860\">said</a>:</p>\n<blockquote>\n<p>I think that is bad. Rarely it is useful to have an executable without a library.</p>\n</blockquote>\n<p>Incidentally, this recently came up in the rust zulip: <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/bin.2Blib.20packages/near/390583089\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/bin.2Blib.20packages/near/390583089</a></p>",
        "id": 390853572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694667846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390850260\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390849927\">said</a>:</p>\n<blockquote>\n<p>is there a new stable?</p>\n</blockquote>\n<p>(I'm planning to make <code>v4.1.0-rc1</code> and update Mathlib in about 24 hours.)</p>\n</blockquote>\n<p>Sorry for a different topic, but since having the same toolchain is a constant issue in lean, can we tag releases in Mathlib by toolchain so that if instead of master I point to the tag <code>lake update</code> is safe?</p>",
        "id": 390854459,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694668456
    },
    {
        "content": "<p>if you want <code>lake update</code> not to update mathlib, you can put the commit instead of master in the <code>require</code> line</p>",
        "id": 390854710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694668641
    },
    {
        "content": "<p>It should be possible to have <code>lake exe cache get</code> ensure that your project uses the same lean-toolchain as mathlib</p>",
        "id": 390854896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694668766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390854710\">said</a>:</p>\n<blockquote>\n<p>if you want <code>lake update</code> not to update mathlib, you can put the commit instead of master in the <code>require</code> line</p>\n</blockquote>\n<p>Yes, I do know that. Just a bit of convenience if there is a tag - I can safely update both toolchain and mathlib commit without having to check matches, and also if one of my project depends on another it is easy to check that they use the same mathlib (here again I can just depend on transitive dependence, but if I drop dependence I will have to be careful).</p>",
        "id": 390855368,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694669098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390853572\">said</a>:</p>\n<blockquote>\n<p>Incidentally, this recently came up in the rust zulip: <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/bin.2Blib.20packages/near/390583089\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/bin.2Blib.20packages/near/390583089</a></p>\n</blockquote>\n<p>My takeaway from that is that having bin+lib be simple to do in Lake is great feature it has over Cargo. <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 390856239,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694669770
    },
    {
        "content": "<p>Okay, I just pushed a <code>v4.0.0</code> tag to Mathlib, and will continue to do so for future bumps.</p>",
        "id": 390856476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694669958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390856239\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390853572\">said</a>:</p>\n<blockquote>\n<p>Incidentally, this recently came up in the rust zulip: <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/bin.2Blib.20packages/near/390583089\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/bin.2Blib.20packages/near/390583089</a></p>\n</blockquote>\n<p>My takeaway from that is that having bin+lib be simple to do in Lake is great feature it has over Cargo. <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>\n</blockquote>\n<p>If you are talking about the discussion with Lokathor at the end, I'm not sure Lake is in a significantly better position. You can't really change the dependencies of a project depending on whether you are building the bin or the lib</p>",
        "id": 390857159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694670467
    },
    {
        "content": "<p>and indeed this is a problem, when you want to pull in optional deps like <code>doc-gen</code> or <code>CLI</code></p>",
        "id": 390857286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694670551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> One nice thing about Lake/Lean, though, is that only builds what is imported so adding a unused dependency is very low cost (and does not cause code bloat). I do intend to convert <code>meta if ... require</code> to <code>require ... if</code> soon to make the manifest nicer though (which should make configuring optional dependencies more pain free).</p>",
        "id": 390858223,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694671151
    },
    {
        "content": "<p>Lake could also only download a dependency when it used, but I am not sure that is really worth the cost.</p>",
        "id": 390858457,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694671272
    },
    {
        "content": "<p>what is the cost?</p>",
        "id": 390858590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694671334
    },
    {
        "content": "<p>it seems pretty natural to me with the current architecture</p>",
        "id": 390858651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694671365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390856476\">said</a>:</p>\n<blockquote>\n<p>Okay, I just pushed a <code>v4.0.0</code> tag to Mathlib, and will continue to do so for future bumps.</p>\n</blockquote>\n<p>Thanks a lot.</p>",
        "id": 390860899,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694672560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390856476\">said</a>:</p>\n<blockquote>\n<p>Okay, I just pushed a <code>v4.0.0</code> tag to Mathlib, and will continue to do so for future bumps.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Will this be updated to keep up with the last version of mathlib compatible with <code>v4.0.0</code>?</p>",
        "id": 390861800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694673095
    },
    {
        "content": "<p>I wasn't thinking to do that, but could. It should be a branch rather than a tag in that case, and would require some automation.</p>",
        "id": 390864776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694674543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60lake.20init.60.20broken.3F/near/390858590\">said</a>:</p>\n<blockquote>\n<p>what is the cost? it seems pretty natural to me with the current architecture</p>\n</blockquote>\n<p>It would take some significant refactored because packages are resolved and store prior to build (and the deps are a static part of <code>Package</code> object). Furthermore, it is not entirely clear how to avoid accidently importing to different environments at the same time since builds are asynchronous if package resolution does not occur until build time.</p>",
        "id": 390879564,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694680110
    },
    {
        "content": "<p>I was thinking that you would \"resolve\" the package in the sense of downloading the lakefile and processing dependencies, but not downloading build artifacts for it or other extraDepTargets unless something in the package is needed</p>",
        "id": 390880037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694680280
    },
    {
        "content": "<p>I think if you don't at least download and process the lakefile, you don't even know what files it provides, such that you can resolve <code>import Foo.Bar</code> references into a dependency request for <code>Foo.Bar</code> from package <code>bar</code></p>",
        "id": 390880305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694680367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Oh, in that case, Lake already does that.</p>",
        "id": 390880340,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694680384
    },
    {
        "content": "<p>In a long-term plan some of that information could go in the manifest (i.e., the roots) which would enable mapping imports without needed to resolve the entire package.</p>",
        "id": 390880622,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694680477
    }
]