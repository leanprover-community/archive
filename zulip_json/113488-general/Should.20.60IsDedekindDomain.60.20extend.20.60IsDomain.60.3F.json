[
    {
        "content": "<p>Right now to assume a Dedekind domain we write <code>variable {R : Type _} [CommRing R] [IsDomain R] [IsDedekindDomain R]</code> since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsDedekindDomain#doc\">docs#IsDedekindDomain</a> takes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsDomain#doc\">docs#IsDomain</a> as a parameter. Should we use <code>extends</code> instead so we only write <code>variable {R : Type _} [CommRing R] [IsDedekindDomain R]</code>? (Are there any useful \"Dedekind rings\" that are <code>IsDedekindDomain</code> but not <code>IsDomain</code>?)</p>",
        "id": 374513253,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689146803
    },
    {
        "content": "<p>I don't know of any examples. Note that \"integrally closed\" already assumes the ring to be a domain.</p>",
        "id": 374514443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147132
    },
    {
        "content": "<p>That assumption could maybe be dropped. But I'm not yet convinced that it is useful to diverge from the standard maths setup here.</p>",
        "id": 374514570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147171
    },
    {
        "content": "<p>I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsDedekindDomain</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">IsDomain</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">isNoetherianRing</span> <span class=\"o\">:</span> <span class=\"n\">IsNoetherianRing</span> <span class=\"n\">A</span>\n  <span class=\"n\">dimensionLEOne</span> <span class=\"o\">:</span> <span class=\"n\">DimensionLEOne</span> <span class=\"n\">A</span>\n  <span class=\"n\">isIntegrallyClosed</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegrallyClosed</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>instead of the current situation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsDedekindDomain</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">isNoetherianRing</span> <span class=\"o\">:</span> <span class=\"n\">IsNoetherianRing</span> <span class=\"n\">A</span>\n  <span class=\"n\">dimensionLEOne</span> <span class=\"o\">:</span> <span class=\"n\">DimensionLEOne</span> <span class=\"n\">A</span>\n  <span class=\"n\">isIntegrallyClosed</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegrallyClosed</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 374515010,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689147269
    },
    {
        "content": "<p>I agree with this. I don't think mathematically there any interesting examples of Dedekind \"domains\" that are not domains (as the name suggest).</p>",
        "id": 374515184,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689147317
    },
    {
        "content": "<p>Or perhaps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsDedekindDomain</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"kd\">extends</span> <span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">IsNoetherianRing</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">IsIntegrallyClosed</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">dimensionLEOne</span> <span class=\"o\">:</span> <span class=\"n\">DimensionLEOne</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 374515348,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689147363
    },
    {
        "content": "<p>And we might even want to turn <code>DimensionLEOne</code> into a class so <code>IsDedekindDomain</code> can be defined without any of its own fields.</p>",
        "id": 374515392,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689147368
    },
    {
        "content": "<p>I would also agree.  It seems that the only potential gain in not assuming <code>IsDomain</code> is that you allow products of Dedekind domains to be Dedekind domains.  Does allowing products possibly simplify some arguments?</p>\n<p>In my mind, being a Dedekind domains is a property checked locally, so the \"global\" <code>IsDomain</code> is not really needed and not really harmful either!</p>",
        "id": 374515713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689147470
    },
    {
        "content": "<p>So should <code>IsIntegrallyClosed</code> also extend <code>IsDomain</code>? I don't really have an idea/pref...</p>",
        "id": 374515914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147517
    },
    {
        "content": "<p>Ah, it's even worse: currently you <em>cannot</em> drop <code>IsDomain</code> I think (because it is required by <code>IsIntegrallyClosed</code>.</p>",
        "id": 374516004,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689147549
    },
    {
        "content": "<p>But is it really?</p>",
        "id": 374516044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147559
    },
    {
        "content": "<p>I mean that you have to write <code>[IsDomain R] [IsDedekindDomain R]</code></p>",
        "id": 374516083,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689147575
    },
    {
        "content": "<p>Wouldn't it pick up the instance that is extended?</p>",
        "id": 374516132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147599
    },
    {
        "content": "<p>I think we can <em>technically</em> just drop that assumption from the defn of <code>IsIntegrallyClosed</code>.</p>",
        "id": 374516337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147650
    },
    {
        "content": "<p>Let me test</p>",
        "id": 374516345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147653
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>gives an error</p>",
        "id": 374516431,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689147674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/Should.20.60IsDedekindDomain.60.20extend.20.60IsDomain.60.3F/near/374516431\">said</a>:</p>\n<blockquote>\n<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>gives an error</p>\n</blockquote>\n<p>Indeed, this is what I want to change :)</p>",
        "id": 374516492,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689147697
    },
    {
        "content": "<p>Then I agree even more than before, you are not even changing the mathematics (in the sense that already now a Dedekind domain is a domain)</p>",
        "id": 374516657,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689147745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Should.20.60IsDedekindDomain.60.20extend.20.60IsDomain.60.3F/near/374516337\">said</a>:</p>\n<blockquote>\n<p>I think we can <em>technically</em> just drop that assumption from the defn of <code>IsIntegrallyClosed</code>.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsIntegrallyClosed</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- All integral elements of `Frac(R)` are also elements of `R`. -/</span>\n  <span class=\"n\">algebraMap_eq_of_integral</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FractionRing</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">FractionRing</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>typechecks</p>",
        "id": 374517110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147880
    },
    {
        "content": "<p>Would this more general definition be helpful? Does it mean that products of integrally closed things would be integrally closed?</p>",
        "id": 374517387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689147963
    },
    {
        "content": "<p>At least <code>Domain</code> is not in the name of <code>IsIntegrallyClosed</code>...</p>",
        "id": 374518788,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689148363
    },
    {
        "content": "<p>Am I right that there are two overlapping issues here?</p>\n<p>Anne wanted to simply reorganize assumptions, so that Dedekind domains stay domains, but the assumptions is <code>extend</code>ed.  The discussion got partially hijacked into the question of whether even assuming that Dedekind domains should be domains at all.</p>",
        "id": 374518797,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689148366
    },
    {
        "content": "<p>Is the <code>FractionRing</code> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>×</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\times \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo>×</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q} \\times \\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>?</p>",
        "id": 374518844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689148379
    },
    {
        "content": "<p>My personal view is that it might make some arguments easier to not have to carry around the <code>domain</code> hypothesis, though the name Dedekind <em>domain</em> should be reserved for something that is a domain!</p>",
        "id": 374518997,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689148426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Should.20.60IsDedekindDomain.60.20extend.20.60IsDomain.60.3F/near/374518844\">said</a>:</p>\n<blockquote>\n<p>Is the <code>FractionRing</code> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>×</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\times \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo>×</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q} \\times \\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>?</p>\n</blockquote>\n<p>I think so.  If I remember correctly, the \"total fraction ring\" of a product is the product of the total fraction rings.  Things get more subtle for connected schemes.</p>",
        "id": 374519212,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689148473
    },
    {
        "content": "<p>In that case, I'm inclined to drop <code>IsDomain</code> from <code>IsIntegrallyClosed</code> and rename <code>IsDedekindDomain</code> to <code>IsDedekindRing</code>.</p>",
        "id": 374519678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689148578
    },
    {
        "content": "<p>Johan, the first example of <a href=\"https://en.wikipedia.org/wiki/Total_ring_of_fractions\">Wikipedia</a> mentions products: it should be what I said.</p>",
        "id": 374520087,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689148683
    },
    {
        "content": "<p>Perfect!</p>",
        "id": 374520403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689148769
    },
    {
        "content": "<p>We should probably mention \"total ring of fractions\" in the docstring of <code>FractionRing</code>.</p>",
        "id": 374520450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689148788
    },
    {
        "content": "<p>I don't think I've heard of that concept before.</p>",
        "id": 374520476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689148797
    },
    {
        "content": "<p>There is a <a href=\"https://www.e-periodica.ch/cntmng?pid=ens-001:1979:25::101\">paper of Kleiman</a> on the total ring of fractions, clearing up issues that had arisen.</p>",
        "id": 374521113,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689148931
    },
    {
        "content": "<p>That paper is already mentioned here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">FieldTheory</span><span class=\"bp\">/</span><span class=\"n\">RatFunc.lean</span>\n<span class=\"mi\">90</span><span class=\"o\">:</span><span class=\"bp\">*</span> <span class=\"o\">[</span><span class=\"n\">Kleiman</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"n\">Misconceptions</span> <span class=\"n\">about</span> <span class=\"bp\">$</span><span class=\"n\">K_X</span><span class=\"bp\">$*</span><span class=\"o\">][</span><span class=\"n\">kleiman1979</span><span class=\"o\">]</span>\n<span class=\"mi\">91</span><span class=\"o\">:</span><span class=\"bp\">*</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">freedommathdance.blogspot.com</span><span class=\"bp\">/</span><span class=\"mi\">2012</span><span class=\"bp\">/</span><span class=\"mi\">11</span><span class=\"bp\">/</span><span class=\"n\">misconceptions</span><span class=\"bp\">-</span><span class=\"n\">about</span><span class=\"bp\">-</span><span class=\"n\">kx.html</span>\n</code></pre></div>",
        "id": 374528058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689150470
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5827\">#5827</a> adds \"total fraction ring\" to the docstring</p>",
        "id": 374530050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689150834
    },
    {
        "content": "<p>Should I open a PR now to make the proposed changes, or wait for the port to be officially over?</p>",
        "id": 374581737,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689160926
    },
    {
        "content": "<p>Certainly you can open the PR now. The question is only whether to mark it <code>after-port</code>.</p>",
        "id": 374777097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689210060
    },
    {
        "content": "<p>I went ahead and opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/5833\">#5833</a> (turn <code>DimensionLEOne</code> into a class) and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5834\">#5834</a> (make <code>IsDedekindDomain</code> extend all the hypotheses). Next two will be forgetting <code>IsDomain</code> in <code>IsIntegrallyClosed</code> and <code>IsDedekindDomain</code>.</p>",
        "id": 374852103,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689238979
    },
    {
        "content": "<p>Do you think that a Dedekind domain without the domain hypothesis should be called a Dedekind ring instead?</p>",
        "id": 374898956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689248480
    },
    {
        "content": "<p>That's what I've been using as a working assumption so far <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 374899078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689248509
    }
]