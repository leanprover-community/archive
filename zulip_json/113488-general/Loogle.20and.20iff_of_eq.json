[
    {
        "content": "<p>I have a query that takes quite a long time and has an interesting result:</p>",
        "id": 399619793,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698794780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ?a = ?b -&gt; (?a &lt;-&gt; ?b)</p>",
        "id": 399619801,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698794785
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 399619820,
        "sender_full_name": "loogle",
        "timestamp": 1698794807
    },
    {
        "content": "<p>Ah well it even times the bot out :D in the web UI we get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">Iff.of_eq</span> <span class=\"n\">Init.Core</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">iff_of_eq</span> <span class=\"n\">Std.Logic</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">Eq.to_iff</span> <span class=\"n\">Std.Logic</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>do we have plans to deduplicate this type of stuff eventually ?</p>",
        "id": 399619866,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698794839
    },
    {
        "content": "<p>Uh and this one: <a href=\"https://loogle.lean-lang.org/?q=%28%3Fa+-%3E+%3Fb%29+%3D+%28%3Fc+-%3E+%3Fd%29\">https://loogle.lean-lang.org/?q=%28%3Fa+-%3E+%3Fb%29+%3D+%28%3Fc+-%3E+%3Fd%29</a> throws a 502.</p>",
        "id": 399620308,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698795203
    },
    {
        "content": "<p>I think <code>iff_of_eq</code> and <code>Eq.to_iff</code> are both allowed (naming convention, dot notation)?</p>",
        "id": 399632395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698801247
    },
    {
        "content": "<p>It's not surprising it takes a long time: there are many theorems with iff and eq around. I don't see immediate low hanging fruit to improve that. Writing a query with <code>|-</code> can help a bit with speed.</p>",
        "id": 399696151,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698834075
    },
    {
        "content": "<p><code>Iff.of_eq</code> is also a legal dot-notation lemma (since in lean 4 you can make use of dot-notation for either an argument or the conclusion)</p>",
        "id": 399697273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698834447
    },
    {
        "content": "<p>it might be a good idea to use <code>alias</code> though to make it clear that the duplication is deliberate</p>",
        "id": 399697632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698834544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20and.20iff_of_eq/near/399620308\">said</a>:</p>\n<blockquote>\n<p>Uh and this one: <a href=\"https://loogle.lean-lang.org/?q=%28%3Fa+-%3E+%3Fb%29+%3D+%28%3Fc+-%3E+%3Fd%29\">https://loogle.lean-lang.org/?q=%28%3Fa+-%3E+%3Fb%29+%3D+%28%3Fc+-%3E+%3Fd%29</a> throws a 502.</p>\n</blockquote>\n<p>That’s <code>(?a -&gt; ?b) = (?c -&gt; ?d)</code>. Had to paste that into an URL decoder :-)</p>\n<p>That query only has <code>Eq</code> to index by, so it sequentially goes through every lemma that has an equality. Locally I get the heartbeat timeout. I guess you’d see this as an error message if the nginx proxy was just a bit  more patient, or the loogle host faster.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">projekte</span><span class=\"bp\">/</span><span class=\"n\">programming</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">loogle</span> <span class=\"c1\">--read-index  ./lake-packages/mathlib/build/lib/MathlibExtras/Find.extra '(?a -&gt; ?b) = (?c -&gt; ?d)'</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">0</span><span class=\"n\">m9</span><span class=\"o\">,</span><span class=\"mi\">904</span><span class=\"n\">s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">0</span><span class=\"n\">m9</span><span class=\"o\">,</span><span class=\"mi\">411</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">515</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 399699775,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698835263
    },
    {
        "content": "<p>A quick look at the flame graph of running <code>loogle</code> doesn't reveal any low-hanging fruit or unexpected time spent there, but I don't have much experience with these flame graphs. And continuation-passing style (e.g. with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.withNewLocalInstances#doc\">docs#Lean.Meta.withNewLocalInstances</a>) obscures things a bit.</p>",
        "id": 399704301,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698837036
    },
    {
        "content": "<p>You’ll now get a proper error message for the <code>(?a -&gt; ?b) = (?c -&gt; ?d)</code> query – after about 80s. (I bumped the proxy timeout.)</p>",
        "id": 399708800,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698839090
    }
]