[
    {
        "content": "<p>Anyone successfully added Duper to an existing project? The demo project and the live editor are on <code>v4.3.0-rc1</code> and my <code>v4.4.0-rc1</code> project added Duper by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">Duper</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/duper.git\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"v0.0.4\"</span>\n</code></pre></div>\n<p>then <code>import Duper</code> gives error</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Error output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>error: &gt; LEAN_PATH=./.lake/packages/std/.lake/build/lib:./.lake/packages/Qq/.lake/build/lib:./.lake/packages/aesop/.lake/build/lib:./.lake/packages/proofwidgets/.lake/build/lib:./.lake/packages/Cli/.lake/build/lib:./.lake/packages/mathlib/.lake/build/lib:./.lake/packages/auto/.lake/build/lib:./.lake/packages/Duper/.lake/build/lib:./.lake/build/lib DYLD_LIBRARY_PATH=./.lake/packages/std/.lake/build/lib:./.lake/packages/Qq/.lake/build/lib:./.lake/packages/aesop/.lake/build/lib:./.lake/packages/proofwidgets/.lake/build/lib:./.lake/packages/Cli/.lake/build/lib:./.lake/packages/mathlib/.lake/build/lib:./.lake/packages/auto/.lake/build/lib:./.lake/packages/Duper/.lake/build/lib:./.lake/build/lib:~/.elan/toolchains/leanprover--lean4---v4.4.0-rc1/lib/lean:~/.elan/toolchains/leanprover--lean4---v4.4.0-rc1/lib:./.lake/packages/auto/.lake/build/lib ~/.elan/toolchains/leanprover--lean4---v4.4.0-rc1/bin/lean ./.lake/packages/auto/././Auto/Lib/NatExtra.lean -R ./.lake/packages/auto/./. -o ./.lake/packages/auto/.lake/build/lib/Auto/Lib/NatExtra.olean -i ./.lake/packages/auto/.lake/build/lib/Auto/Lib/NatExtra.ilean -c ./.lake/packages/auto/.lake/build/ir/Auto/Lib/NatExtra.c<br>\nerror: stdout:<br>\n./.lake/packages/auto/././Auto/Lib/NatExtra.lean:112:40: error: tactic 'rewrite' failed, did not find instance of the pattern in the target expression<br>\n  Nat.succ ?n<br>\na b c : Nat<br>\n⊢ max a b &lt; c ↔ a &lt; c ∧ b &lt; c</p>\n<p>./.lake/packages/auto/././Auto/Lib/Pos.lean:97:43: error: unsolved goals<br>\nn n' : Nat<br>\nx✝ : n' + 2 ≠ 0<br>\nthis : 2 * n' + 2 * 2 + 1 = 2 * n' + 3 + 2<br>\n⊢ 3 % 2 = 1</p>\n<p>error: stdout:<br>\n./.lake/packages/auto/././Auto/Lib/BinTree.lean:434:42: error: unsolved goals<br>\nα : Type u_1<br>\nl : BinTree α<br>\nx : Option α<br>\nr : BinTree α<br>\np : α → Prop<br>\nh : ∀ (n : Nat), Option.allp p (get?' (node l x r) n)<br>\nn✝ n : Nat<br>\nh' :<br>\n  Option.allp p<br>\n    (match (2 * n + 3 + 2) % 2 with<br>\n    | 0 =&gt; get?' (left! (node l x r)) ((2 * n + 3 + 2) / 2)<br>\n    | Nat.succ n_1 =&gt; get?' (right! (node l x r)) ((2 * n + 3 + 2) / 2))<br>\n⊢ 5 % 2 = 1</p>\n<p>./.lake/packages/auto/././Auto/Embedding/LamSystem.lean:1639:4: error: dsimp made no progress</p>\n<p>./.lake/packages/auto/././Auto/Embedding/LamConv.lean:1610:2: error: dsimp made no progress<br>\n./.lake/packages/auto/././Auto/Embedding/LamConv.lean:1624:2: error: dsimp made no progress</p>\n</div></div>\n<p>and more.</p>",
        "id": 408767325,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702960262
    },
    {
        "content": "<p>These errors can be easily fixed by (not exhaustive but all are similar)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.max_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.lt_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">Nat.lt</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_one</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.max_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.max_le</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span> <span class=\"n\">id</span> <span class=\"n\">id</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mod_right</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_mod</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">have</span> <span class=\"n\">eq₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mod</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">LamTerm.rwGenAtIfSign</span><span class=\"o\">,</span> <span class=\"n\">LamTerm.isSign</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unfold</span> <span class=\"n\">LamTerm.mpAll</span><span class=\"bp\">?</span>\n</code></pre></div>\n</div></div>\n<p>respectively, but I wonder if these are known regression or needed migrations.</p>",
        "id": 408772441,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702961328
    },
    {
        "content": "<p>It looks like some of the proofs in lean-auto are breaking due to various changes from <code>v4.3.0-rc1</code> and <code>v4.4.0-rc1</code>. At first glance, I'm pretty sure that most of the spots that are breaking pertain to other lean-auto functionalities, rather than the functionalities Duper actually depends on. So I think this should be relatively easy to fix. I'll take a look and try to push a version of Duper that builds on <code>v4.4.0-rc1</code> as soon as I can. Sorry for the inconvenience, and thanks for letting me know of the issue.</p>",
        "id": 408774187,
        "sender_full_name": "Josh Clune",
        "timestamp": 1702961686
    },
    {
        "content": "<p>Thanks, also these breaking changes are brittle and I wonder if they are discussed before, the fixes are easy, but I don't know the new idiomatic way to write them as they look idiomatic to me as how they were. Changing <code>dsimp</code> to <code>unfold</code> or even <code>simp_all</code>, adding <code>rfl</code> after <code>simp</code> don't seem desired.</p>",
        "id": 408775594,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702961990
    },
    {
        "content": "<p>There are 10 errors in <code>.lake/packages/auto/Auto/Embedding/LamBitVec.lean</code> including <code>rfl</code> type mismatch, <code>rw</code> pattern mismatch and <code>apply</code> fails to unify etc. , they are less easy to fix, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">toNat_shiftLeft</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Std.BitVec</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a.toNat</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">shiftLeft_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">⟩⟩</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Std.BitVec.shiftLeft</span><span class=\"o\">,</span> <span class=\"n\">Std.BitVec.toNat</span><span class=\"o\">,</span> <span class=\"n\">Std.BitVec.ofNat</span><span class=\"o\">,</span> <span class=\"n\">Fin.ofNat'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.shiftLeft_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">toNat_shiftLeft</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Std.BitVec</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a.toNat</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">shiftLeft_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">⟩⟩</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Std.BitVec.shiftLeft</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Std.BitVec.toNat</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Std.BitVec.ofNat</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.shiftLeft_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.and_pow_two_is_mod</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(UPDATE: moved my messages to a new topic to focus on Duper discussions in the Duper topic)</p>",
        "id": 408778768,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702962584
    },
    {
        "content": "<p>5 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Duper\">#general &gt; Duper</a> by <span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span>.</p>",
        "id": 408781120,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702963076
    },
    {
        "content": "<p>I also had a look at this a few days ago and it looked to me that the definition of <code>Std.BitVec.ofNat</code> changed in Std recently in a commit <a href=\"https://github.com/leanprover/std4/commit/a93d4aab761b7962a6aab845b24837e192eaabc5#diff-016cf67138a14eca40a019d4b7686d711507727d4958ee2d41edcdd7a80a9e31R51\">here</a> which seems to be the main obstactle to bump <code>LamBitVec.lean</code>, which seems to be the biggest task to bump <code>lean-auto</code> to v4.4.0-rc1</p>\n<p>In particular <a href=\"https://github.com/leanprover/std4/commit/a93d4aab761b7962a6aab845b24837e192eaabc5#diff-016cf67138a14eca40a019d4b7686d711507727d4958ee2d41edcdd7a80a9e31R51\"><code>toNat_ofNat</code></a> is no longer <code>rfl</code>, and that seems to be the main issue that needs fixing there. If thats done, the rest seems to follow rather easily</p>",
        "id": 408873696,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1702979662
    },
    {
        "content": "<p>Duper v0.0.5 now builds on Lean v4.4.0-rc1. For now, I've simply sidestepped the issue of proving <code>toNat_ofNat</code> in lean-auto because that portion of the codebase isn't really relevant to Duper itself. I'll plan to properly address that later, but for now, I think this should work. Feel free to let me know if you run into any additional issues.</p>",
        "id": 408996290,
        "sender_full_name": "Josh Clune",
        "timestamp": 1703011692
    }
]