[
    {
        "content": "<p>Larry Paulson has written a blog post showing that Isabelle is nice for formalizing PL semantics, with a concrete example. Would be interesting to see someone reproducing it in Lean and comparing the two:<br>\n<a href=\"https://lawrencecpaulson.github.io/2023/03/08/Fun_Semantics.html\">https://lawrencecpaulson.github.io/2023/03/08/Fun_Semantics.html</a></p>",
        "id": 340853356,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1678452933
    },
    {
        "content": "<p>The agda people already responded: <a href=\"https://github.com/pigworker/Samizdat/blob/main/ExampleSemantics.agda\">https://github.com/pigworker/Samizdat/blob/main/ExampleSemantics.agda</a></p>",
        "id": 340853561,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1678452984
    },
    {
        "content": "<p>Would be nice to build on the Agda one and cut out all those repetitions with tactics</p>",
        "id": 340873012,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1678457656
    },
    {
        "content": "<p>The original blogpost is explicitly about breaking the myth that dependent types are \"THE\" way to do op-semantics.</p>",
        "id": 340892388,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678461986
    },
    {
        "content": "<p>Because typically this is done in something like Coq</p>",
        "id": 340892541,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678462009
    },
    {
        "content": "<p>So you have the entire software foundations series.</p>",
        "id": 340892832,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678462081
    },
    {
        "content": "<p>full of examples of how do to this in Coq.</p>",
        "id": 340892961,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678462112
    },
    {
        "content": "<p>I can't see why doing it in lean is going to tell us anything new</p>",
        "id": 340893010,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678462126
    },
    {
        "content": "<p>I dont think this is about telling something new, this is more about showing we can do it as well.</p>",
        "id": 340896858,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1678463038
    },
    {
        "content": "<p>Okay. I can give it a shot. It will be useful for me. But from what I recall reading here in Zulip, the creator of PLFA is creating a version in Lean. This might be a good demo for us.</p>",
        "id": 340903318,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678464516
    },
    {
        "content": "<p>As Hendrik says. A little Rosetta stone of semantics in theorem provers.</p>",
        "id": 340911639,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1678466514
    },
    {
        "content": "<p>Should also lend itself nicely to Aesop one-liners</p>",
        "id": 340911880,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678466572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/operational.20semantics/near/340892541\">said</a>:</p>\n<blockquote>\n<p>Because typically this is done in something like Coq</p>\n</blockquote>\n<p>By the way, as Jon pointed out in the blog post comments, this is a curious statement as Coq formalizations usually are not heavy in dependent types</p>",
        "id": 340912311,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678466675
    },
    {
        "content": "<p>Showing off aesop would be great! This week I chatted with the person behind the Isabelle and Coq formalization of WebAssembly, and he said he'd be quite curious about lean, but is under the impression that the automation is just not there yet, compared to Isabelle's.</p>",
        "id": 340913293,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1678466918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/operational.20semantics/near/340912311\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/operational.20semantics/near/340892541\">said</a>:</p>\n<blockquote>\n<p>Because typically this is done in something like Coq</p>\n</blockquote>\n<p>By the way, as Jon pointed out in the blog post comments, this is a curious statement as Coq formalizations usually are not heavy in dependent types</p>\n</blockquote>\n<p>I am not an expert on this stuff, so I won't speculate on the technical reasons. But even if Isabelle could sledgehammer the proofs away, I think usability-wise lean takes the cake. The fact that it is and works like a programming language makes it ridiculously easy for me to reason about what's happening and what to modularise away, compared to Isabelle, which often feels like some ancient sorcery ritual (especially for program generation stuff). There are some verification related things I am doing in lean, that I first tried on TLA+ and Isabelle. Lean simply makes more intuitive sense for the goal I am trying to achieve.</p>",
        "id": 340914857,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678467292
    },
    {
        "content": "<p>Having said that, I'll try a dependent types based approach</p>",
        "id": 340917214,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678467774
    },
    {
        "content": "<p>Coq has many libraries which helps with formalizing PL related stuff, like AutoSubst, which allows you to generate many weakening/substitution lemmas automatically. This may be one of the reasons why it is seen as the de facto proof-assistant to do this kind of work</p>",
        "id": 340943313,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1678475030
    },
    {
        "content": "<p>And also generic program logic libraries like Iris, which keeps coming up all the time right now when I look for work that proves things similar to the things that I'd like to prove (or at least like to have proven). But I wouldn't mind if lean catches up eventually :-)</p>",
        "id": 340962052,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1678481361
    },
    {
        "content": "<p>Could we write lean versions of these libraries?</p>",
        "id": 340964506,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678482340
    },
    {
        "content": "<p>Sure! It's just lots of work</p>",
        "id": 340965841,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1678482910
    },
    {
        "content": "<p>Since coq and lean use the same underlying theories, is it possible/feasible/(worthwhile considering) interoperability between coq and lean's term languages?</p>",
        "id": 340968782,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678484017
    },
    {
        "content": "<p><a href=\"https://github.com/larsk21/iris-lean\">https://github.com/larsk21/iris-lean</a></p>",
        "id": 340970991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678484995
    },
    {
        "content": "<p>unfortunately it is not under active development anymore as it was a student project</p>",
        "id": 340971174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678485059
    },
    {
        "content": "<p>I looked for previous work on this topic. In the book titled \"Hitchhiker's guide to logical verification\" written by people in this zulip, Chapter 8 covers how to do operational semantics and chapter 10, denotational semantics</p>",
        "id": 340977939,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678487648
    },
    {
        "content": "<p>In lean ofc</p>",
        "id": 340978222,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678487761
    },
    {
        "content": "<p>I have church-rosser for untyped lambda calculus (which isn't quite the original blog post - but maybe in the spirit of it):<br>\n<a href=\"https://github.com/calcu16/lean_complexity/blob/main/src/lambda_calculus/utlc/beta/church_rosser.lean\">https://github.com/calcu16/lean_complexity/blob/main/src/lambda_calculus/utlc/beta/church_rosser.lean</a><br>\nand<br>\n<a href=\"https://github.com/calcu16/lean_complexity/blob/main/src/lambda_calculus/utlc/beta_eta/church_rosser.lean\">https://github.com/calcu16/lean_complexity/blob/main/src/lambda_calculus/utlc/beta_eta/church_rosser.lean</a><br>\nI'm happy to try to get that portion of the repo into mathlib if there is interest (I think it needs a lot of cleaning up).</p>",
        "id": 340984145,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1678490347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Here's a Lean 4 version without using any fancy tactics: <a href=\"https://gist.github.com/kmill/2173918b6e5ade069c9b7662877ca4d7\">(gist link)</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">semantics</span>\n\n<span class=\"sd\">/-- A simple expression language. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">IF</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">exp</span>\n\n<span class=\"sd\">/-- Small-step semantics for the simple expression language. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Eval</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_T</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_F</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_Eval</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ_Eval</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_same</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_S0</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"n\">F</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_0S</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">F</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_SS</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_Eval1</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_Eval2</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">T_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"n\">T</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">F_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"n\">F</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Zero_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"n\">Zero</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tbool</span> <span class=\"bp\">|</span> <span class=\"n\">tnum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TP</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">tp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">T</span> <span class=\"n\">tbool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">F</span> <span class=\"n\">tbool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">Zero</span> <span class=\"n\">tnum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">p</span> <span class=\"n\">tbool</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">tnum</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">tnum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">tbool</span>\n\n<span class=\"sd\">/-- Type preservation: small-step evaluation preserves the type. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">type_preservation</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">he</span> <span class=\"n\">generalizing</span> <span class=\"n\">t</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">rename_i</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">ht</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- One last case. The strategy seems to be to do cases on every `TP a b` where</span>\n  <span class=\"c1\">-- `a` or `b` isn't a variable, which could be automated.</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n\n<span class=\"sd\">/-- Evaluator for expressions. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">evl</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exp.Zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"n\">evl</span> <span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_one_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">â</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Value preservation: the evaluator is constant modulo the small-step semantics. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">value_preservation</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">evl</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_one_ne_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_two_of_bool</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">tbool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tbool</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">at</span> <span class=\"n\">ht</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ht</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">evl</span><span class=\"o\">]</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">subst_vars</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">split</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n\n<span class=\"sd\">/-- Reflexive transitive closure of `Eval`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">EvalStar</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">EvalStar.Id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Eval.Star</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">EvalStar.Step</span> <span class=\"n\">h</span> <span class=\"n\">EvalStar.Id</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">exists_evalstar</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">â¨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">EvalStar.Id</span><span class=\"o\">â©</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_T</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">T</span> <span class=\"n\">u</span> <span class=\"bp\">â</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">generalize</span> <span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">subst_vars</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_F</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">F</span> <span class=\"n\">u</span> <span class=\"bp\">â</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">generalize</span> <span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">subst_vars</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_self</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eval.Star</span>\n  <span class=\"n\">constructor</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_of_Eval</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eval.EQ_Eval1</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eval.Star</span>\n  <span class=\"n\">constructor</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_of_Eval2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eval.EQ_Eval2</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eval.Star</span>\n  <span class=\"n\">constructor</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_not_EQ_of_succ_EQ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">y</span> <span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eval.Star</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_not_EQ_of_succ_EQ2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">Zero</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eval.Star</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n\n<span class=\"sd\">/-- The obvious consequence of `type_preservation`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">type_preservation_Star</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">type_preservation</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.Succ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.IF</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.EQ1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.EQ2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prediamond</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">}</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">â¨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">â©</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">thm</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">thm</span> <span class=\"n\">h'</span><span class=\"o\">â©</span>\n\n<span class=\"sd\">/-- Partial Church-Rosser property for big-step semantics. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">diamond</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hy</span> <span class=\"n\">generalizing</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hz</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">eval_not_EQ_of_succ_EQ</span><span class=\"o\">,</span> <span class=\"n\">eval_not_EQ_of_succ_EQ2</span><span class=\"o\">])</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">apply</span> <span class=\"n\">prediamond</span> <span class=\"n\">_</span> <span class=\"n\">EvalStar.IF</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">apply</span> <span class=\"n\">prediamond</span> <span class=\"n\">_</span> <span class=\"n\">EvalStar.Succ</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">e</span>\n    <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">EQ</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e.Star.EQ1</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS.Star</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">e</span>\n    <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">EQ</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">e.Star.EQ2</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS.Star</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rename_i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">EQ</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS.Star</span><span class=\"o\">,</span> <span class=\"n\">h.Star.EQ1</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">apply</span> <span class=\"n\">prediamond</span> <span class=\"n\">_</span> <span class=\"n\">EvalStar.EQ1</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rename_i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">e'</span> <span class=\"n\">ih</span> <span class=\"n\">z</span> <span class=\"n\">e</span>\n    <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">EQ</span> <span class=\"n\">b</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">e.Star.EQ2</span><span class=\"o\">,</span> <span class=\"n\">e'.Star.EQ1</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rename_i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">EQ</span> <span class=\"n\">b</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS.Star</span><span class=\"o\">,</span> <span class=\"n\">h.Star.EQ2</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rename_i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"n\">z</span> <span class=\"n\">h'</span>\n    <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">EQ</span> <span class=\"n\">z</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h'.Star.EQ1</span><span class=\"o\">,</span> <span class=\"n\">h.Star.EQ2</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rename_i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"n\">z</span> <span class=\"n\">h'</span>\n    <span class=\"c1\">-- an interesting application of ih</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">â¨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g'</span><span class=\"o\">â©</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">h'</span>\n    <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">EQ</span> <span class=\"n\">c</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">g.EQ2</span><span class=\"o\">,</span> <span class=\"n\">g'.EQ2</span><span class=\"o\">â©</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">semantics</span>\n</code></pre></div>",
        "id": 340991243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678494485
    },
    {
        "content": "<p>Kyle, did you just write all that? <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 340991354,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678494554
    },
    {
        "content": "<p>That's 181 lines (and could surely be done better) vs 115 for the Isabelle version.</p>",
        "id": 340991408,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678494591
    },
    {
        "content": "<p>Why is <code>EQ T F</code> stuck in the small step semantics? Or did I miss any rules?</p>",
        "id": 340999326,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1678499040
    },
    {
        "content": "<p>hm, that does seem like a bug in the formalization</p>",
        "id": 341026889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678519258
    },
    {
        "content": "<p>Here's a mostly-pointless golf of Kyle's proof (129 lines):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">semantics</span>\n\n<span class=\"sd\">/-- A simple expression language. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">exp</span> <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">IF</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Small-step semantics for the simple expression language. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Eval</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_T</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">IF</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_F</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">IF</span> <span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_Eval</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">IF</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ_Eval</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_same</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_S0</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">F</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_0S</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"bp\">.</span><span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">.</span><span class=\"n\">F</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_SS</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_Eval1</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_Eval2</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">T_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">F_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Zero_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"bp\">.</span><span class=\"n\">Zero</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tp</span> <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"bp\">|</span> <span class=\"n\">num</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TP</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">tp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"bp\">.</span><span class=\"n\">Zero</span> <span class=\"bp\">.</span><span class=\"n\">num</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">p</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">num</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n\n<span class=\"sd\">/-- Type preservation: small-step evaluation preserves the type. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">type_preservation</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">he</span> <span class=\"n\">generalizing</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">apply_assumption</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">casesm</span><span class=\"bp\">*</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evl</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">IF</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"n\">evl</span> <span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"sd\">/-- Value preservation: the evaluator is constant modulo the small-step semantics. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">value_preservation</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">evl</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_ne_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_two_of_bool</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"bp\">.</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tp.bool</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"bp\">;</span> <span class=\"n\">induction</span> <span class=\"n\">ht</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">evl</span><span class=\"o\">]</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">subst_vars</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">split</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">EvalStar</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">EvalStar.id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Eval.star</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">h</span> <span class=\"bp\">.</span><span class=\"n\">id</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">exists_evalstar</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">â¨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">â©</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_T</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"n\">u</span> <span class=\"bp\">â</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">generalize</span> <span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">exp.T</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">subst_vars</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_F</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">u</span> <span class=\"bp\">â</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">generalize</span> <span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">exp.F</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">subst_vars</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_self</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">Eval.EQ_same.star</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_of_Eval</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ_Eval1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">Eval.EQ_same.star</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_of_Eval2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ_Eval2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">Eval.EQ_same.star</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_not_EQ_of_succ_EQ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">y</span> <span class=\"bp\">.</span><span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Eval.EQ_S0.star</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_not_EQ_of_succ_EQ2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"bp\">.</span><span class=\"n\">Zero</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Eval.EQ_0S.star</span>\n\n<span class=\"sd\">/-- The obvious consequence of `type_preservation`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">type_preservation_Star</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">type_preservation</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.Succ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.IF</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">IF</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.EQ1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.EQ2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prediamond</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">}</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">â</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">â©</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">thm</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">thm</span> <span class=\"n\">h'</span><span class=\"o\">â©</span>\n\n<span class=\"sd\">/-- Partial Church-Rosser property for big-step semantics. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">diamond</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hy</span> <span class=\"n\">generalizing</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hz</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">eval_not_EQ_of_succ_EQ</span><span class=\"o\">,</span> <span class=\"n\">eval_not_EQ_of_succ_EQ2</span><span class=\"o\">])</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">prediamond</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"n\">IF</span><span class=\"o\">]</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">prediamond</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"n\">Succ</span><span class=\"o\">]</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">Succ_Eval</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h.star.EQ1</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS.star</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">Succ_Eval</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h.star.EQ2</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS.star</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">Succ_Eval</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS.star</span><span class=\"o\">,</span> <span class=\"n\">h.star.EQ1</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">prediamond</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"n\">EQ1</span><span class=\"o\">]</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">next</span> <span class=\"n\">h'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h.star.EQ2</span><span class=\"o\">,</span> <span class=\"n\">h'.star.EQ1</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">Succ_Eval</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS.star</span><span class=\"o\">,</span> <span class=\"n\">h.star.EQ2</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h'.star.EQ1</span><span class=\"o\">,</span> <span class=\"n\">h.star.EQ2</span><span class=\"o\">â©</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"o\">â¨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g'</span><span class=\"o\">â©</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">â¨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g.EQ2</span><span class=\"o\">,</span> <span class=\"n\">g'.EQ2</span><span class=\"o\">â©</span>\n</code></pre></div>",
        "id": 341027054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678519375
    },
    {
        "content": "<p>Here is a version of <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s code using <code>aesop</code>. It is around 150 lines, but the <code>aesop</code> tags and a few new lemmas are taking up room that can be freed up. Every proof except the last one is a one-liner.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Use</span>\n<span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Semantics</span>\n\n<span class=\"sd\">/-- A simple expression language. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">IF</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">exp</span>\n\n<span class=\"sd\">/-- Small-step semantics for the simple expression language. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Eval</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_T</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_F</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF_Eval</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ_Eval</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_same</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_S0</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"n\">F</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_0S</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">F</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_SS</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_Eval1</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ_Eval2</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">T_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"n\">T</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">cases</span> <span class=\"o\">[</span><span class=\"n\">Eval</span><span class=\"o\">,</span> <span class=\"n\">exp</span><span class=\"o\">])</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">F_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"n\">F</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">cases</span> <span class=\"o\">[</span><span class=\"n\">Eval</span><span class=\"o\">,</span> <span class=\"n\">exp</span><span class=\"o\">])</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Zero_simp</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span> <span class=\"n\">Eval</span> <span class=\"n\">Zero</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">cases</span> <span class=\"o\">[</span><span class=\"n\">Eval</span><span class=\"o\">,</span> <span class=\"n\">exp</span><span class=\"o\">])</span>\n\n\n<span class=\"kd\">@[aesop safe cases]</span> <span class=\"kd\">inductive</span> <span class=\"n\">tp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tbool</span> <span class=\"bp\">|</span> <span class=\"n\">tnum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tp</span>\n\n<span class=\"kd\">@[aesop unsafe constructors]</span> <span class=\"kd\">inductive</span> <span class=\"n\">TP</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">tp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">T</span> <span class=\"n\">tbool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">F</span> <span class=\"n\">tbool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">Zero</span> <span class=\"n\">tnum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">p</span> <span class=\"n\">tbool</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">tnum</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">tnum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">tbool</span>\n\n<span class=\"c1\">-- Are these lemmas necessary?</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">TP_Succ_not_tbool</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span><span class=\"o\">(</span><span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">tbool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">cases</span> <span class=\"o\">[</span><span class=\"n\">TP</span><span class=\"o\">,</span> <span class=\"n\">exp</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[aesop safe forward]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">TP_tnum_of_TP_Succ_tnum</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">tnum</span> <span class=\"bp\">â</span> <span class=\"n\">TP</span> <span class=\"n\">e</span> <span class=\"n\">tnum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">cases</span> <span class=\"o\">[</span><span class=\"n\">TP</span><span class=\"o\">,</span> <span class=\"n\">exp</span><span class=\"o\">])</span>\n\n<span class=\"sd\">/-- Type preservation: small-step evaluation preserves the type. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">type_preservation</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">he</span> <span class=\"n\">generalizing</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n\n<span class=\"sd\">/-- Evaluator for expressions. -/</span>\n<span class=\"kd\">@[aesop norm unfold]</span> <span class=\"kd\">def</span> <span class=\"n\">evl</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exp.Zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">IF</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"n\">evl</span> <span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_one_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n\n<span class=\"sd\">/-- Value preservation: the evaluator is constant modulo the small-step semantics. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">value_preservation</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">evl</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_two_of_bool</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">tbool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">evl</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tbool</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">at</span> <span class=\"n\">ht</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ht</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n\n<span class=\"sd\">/-- Reflexive transitive closure of `Eval`. -/</span>\n<span class=\"kd\">@[aesop unsafe [cases, constructors]</span><span class=\"o\">]</span> <span class=\"kd\">inductive</span> <span class=\"n\">EvalStar</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">EvalStar.Id</span>\n\n<span class=\"kd\">@[aesop unsafe apply]</span> <span class=\"kd\">def</span> <span class=\"n\">Eval.Star</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">EvalStar.Step</span> <span class=\"n\">h</span> <span class=\"n\">EvalStar.Id</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">exists_evalstar</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">â¨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">EvalStar.Id</span><span class=\"o\">â©</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_T</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">T</span> <span class=\"n\">u</span> <span class=\"bp\">â</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_F</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">F</span> <span class=\"n\">u</span> <span class=\"bp\">â</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_self</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">Eval.Star</span><span class=\"o\">,</span> <span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_of_Eval</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">Eval.EQ_Eval1</span><span class=\"o\">,</span> <span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eval_EQ_of_Eval2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">Eval.EQ_Eval2</span><span class=\"o\">,</span> <span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[aesop unsafe forward, aesop safe apply]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_not_EQ_of_succ_EQ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">y</span> <span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">Eval.Star</span><span class=\"o\">,</span> <span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[aesop unsafe forward, aesop safe apply]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_not_EQ_of_succ_EQ2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">Zero</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">Eval.Star</span><span class=\"o\">,</span> <span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"sd\">/-- The obvious consequence of `type_preservation`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">type_preservation_Star</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TP</span> <span class=\"n\">y</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">forward</span> <span class=\"o\">[</span><span class=\"n\">type_preservation</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[aesop safe apply]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.Succ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[trans]</span> <span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.trans</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">induction</span> <span class=\"n\">h'</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">constructors</span> <span class=\"o\">[</span><span class=\"n\">Eval</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[aesop safe apply]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.IF</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IF</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[aesop safe apply]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.EQ1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[aesop safe apply]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalStar.EQ2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">[</span><span class=\"n\">constructors</span> <span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">@[aesop safe apply]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prediamond</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">â</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">}</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000000</span>\n\n<span class=\"sd\">/-- Partial Church-Rosser property for big-step semantics. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">diamond</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">Eval</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">EvalStar</span> <span class=\"n\">y</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">EvalStar</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hy</span> <span class=\"n\">generalizing</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hz</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">checkpoint</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">terminal</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">warnOnNonterminal</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">apply</span> <span class=\"n\">prediamond</span> <span class=\"n\">_</span> <span class=\"n\">EvalStar.IF</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">z</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">z</span> <span class=\"n\">y_1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"o\">[</span><span class=\"n\">EvalStar.EQ1</span><span class=\"o\">,</span> <span class=\"n\">EvalStar.EQ2</span><span class=\"o\">,</span> <span class=\"n\">Eval.Star</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS</span><span class=\"o\">],</span> <span class=\"n\">safe</span> <span class=\"n\">constructors</span> <span class=\"o\">[</span><span class=\"n\">Eval</span><span class=\"o\">])</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">y_2</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x_1</span> <span class=\"n\">y_2</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span> <span class=\"o\">[</span><span class=\"n\">Eval.Star</span><span class=\"o\">],</span> <span class=\"n\">safe</span> <span class=\"n\">constructors</span> <span class=\"o\">[</span><span class=\"n\">Eval</span><span class=\"o\">])</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">x_2</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x_2</span> <span class=\"n\">y_1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"o\">[</span><span class=\"n\">EvalStar.EQ1</span><span class=\"o\">,</span> <span class=\"n\">EvalStar.EQ2</span><span class=\"o\">,</span> <span class=\"n\">Eval.Star</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS</span><span class=\"o\">],</span> <span class=\"n\">safe</span> <span class=\"n\">constructors</span> <span class=\"o\">[</span><span class=\"n\">Eval</span><span class=\"o\">])</span>\n  <span class=\"bp\">Â·</span> <span class=\"k\">let</span> <span class=\"o\">â¨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">â©</span> <span class=\"o\">:=</span> <span class=\"n\">a_ih</span> <span class=\"n\">a_1</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">w</span> <span class=\"n\">y_1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"o\">[</span><span class=\"n\">EvalStar.EQ1</span><span class=\"o\">,</span> <span class=\"n\">EvalStar.EQ2</span><span class=\"o\">,</span> <span class=\"n\">Eval.Star</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS</span><span class=\"o\">])</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">y_2</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">EQ</span> <span class=\"n\">x_1</span> <span class=\"n\">y_2</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"o\">[</span><span class=\"n\">EvalStar.EQ1</span><span class=\"o\">,</span> <span class=\"n\">EvalStar.EQ2</span><span class=\"o\">,</span> <span class=\"n\">Eval.Star</span><span class=\"o\">,</span> <span class=\"n\">Eval.EQ_SS</span><span class=\"o\">],</span> <span class=\"n\">safe</span> <span class=\"n\">constructors</span> <span class=\"o\">[</span><span class=\"n\">Eval</span><span class=\"o\">])</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Semantics</span>\n</code></pre></div>",
        "id": 341030279,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1678521534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/113488-general/topic/operational.20semantics/near/340999326\">said</a>:</p>\n<blockquote>\n<p>Why is <code>EQ T F</code> stuck in the small step semantics? Or did I miss any rules?</p>\n</blockquote>\n<p>Yes, that is likely an omission in the original; this was also noticed in the Agda formalization</p>",
        "id": 341087414,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1678529744
    },
    {
        "content": "<p>Necessity of dependent types aside, I did find Conor McBride's approach quite elegant. Here is a Lean 4 version, making use of tactics where possible (90 lines without blank and comment lines).<br>\nIn the end there wasn't really any part that could further be simplified with Aesop.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Semantics</span>\n\n<span class=\"sd\">/-- A simple type language. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"bp\">|</span> <span class=\"n\">num</span>\n\n<span class=\"sd\">/-- A simple expression language, intrinsically typed. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">â</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">.</span><span class=\"n\">num</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">.</span><span class=\"n\">num</span>\n  <span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">.</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n\n<span class=\"kn\">section</span>\n<span class=\"c1\">-- mutual notation/inductive workaround, I should really fix this at some point</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\"~&gt;\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eval</span>\n<span class=\"sd\">/-- Small-step semantics for the simple expression language. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Eval</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">ty</span> <span class=\"bp\">â</span> <span class=\"n\">Exp</span> <span class=\"n\">ty</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">if_true</span> <span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"k\">if</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">if_false</span> <span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"k\">if</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">if_eval</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">q</span> <span class=\"bp\">â</span>\n              <span class=\"bp\">.</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"k\">if</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ_eval</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">â</span>\n                <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_same</span> <span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_s0</span> <span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_0s</span> <span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_ss</span> <span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_tf</span> <span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_ft</span> <span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_l</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">x'</span> <span class=\"bp\">â</span>\n           <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">x'</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_r</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">y'</span> <span class=\"bp\">â</span>\n           <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">~&gt;</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">y'</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\" ~&gt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eval</span>\n\n<span class=\"sd\">/-- Typed evaluation. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Val</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">â</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">num</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- Lean's termination checker is (understandably) not happy when specified as polymorphic recursion</span>\n<span class=\"kd\">def</span> <span class=\"n\">Val.embed</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">â</span> <span class=\"n\">Val</span> <span class=\"n\">ty</span> <span class=\"bp\">â</span> <span class=\"n\">Exp</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">,</span>  <span class=\"n\">n</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">n.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Val</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ty</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"n\">ty</span> <span class=\"bp\">â</span> <span class=\"n\">Val</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">true</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">false</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>     <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">eval</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">eval</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">eval</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">y</span>\n\n<span class=\"sd\">/-- The reflexive-transitive closure -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">RTC</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â</span> <span class=\"n\">Î±</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â</span> <span class=\"n\">Î±</span> <span class=\"bp\">â</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">RTC</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">RTC</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">RTC</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RTC.one</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">RTC</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"bp\">Â·</span> <span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RTC.map</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â</span> <span class=\"n\">Î²</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hrs</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">RTC</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">RTC</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">refl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">hxz</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">hrs</span> <span class=\"n\">hxz</span><span class=\"o\">)</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RTC.trans</span> <span class=\"o\">:</span> <span class=\"n\">RTC</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">RTC</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"n\">RTC</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hxy</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">hyz</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">hyz</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\" ~&gt;* \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">RTC</span> <span class=\"n\">Eval</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.succ_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.zero_ne_succ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">â </span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n\n<span class=\"sd\">/-- Operational and denotational semantics coincide. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_eval</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~&gt;*</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">embed</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">RTC.map</span> <span class=\"bp\">.</span><span class=\"n\">succ_eval</span> <span class=\"o\">â¹</span><span class=\"n\">_</span><span class=\"o\">âº</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">Â«</span><span class=\"k\">if</span><span class=\"bp\">Â»</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- first evaluate the predicate</span>\n    <span class=\"c1\">-- (Lean needs some help here with the higher-order unification)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">RTC.trans</span> <span class=\"o\">(</span><span class=\"n\">RTC.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Exp.if</span> <span class=\"bp\">Â·</span> <span class=\"n\">t</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"bp\">.</span><span class=\"n\">if_eval</span> <span class=\"o\">â¹</span><span class=\"n\">_</span><span class=\"o\">âº)</span>\n    <span class=\"c1\">-- then do an if_true/if_false step depending on `p`</span>\n    <span class=\"n\">cases</span> <span class=\"n\">eval</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">RTC.step</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">constructor</span><span class=\"o\">)</span> <span class=\"o\">â¹</span><span class=\"n\">_</span><span class=\"o\">âº</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"n\">ty</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- first evaluate the LHS and RHS</span>\n    <span class=\"n\">apply</span> <span class=\"n\">RTC.trans</span> <span class=\"o\">(</span><span class=\"n\">RTC.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Exp.eq</span> <span class=\"bp\">Â·</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">.</span><span class=\"n\">eq_l</span> <span class=\"o\">â¹</span><span class=\"n\">_</span><span class=\"o\">âº)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">RTC.trans</span> <span class=\"o\">(</span><span class=\"n\">RTC.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Exp.eq</span> <span class=\"n\">_</span> <span class=\"bp\">Â·</span><span class=\"o\">))</span> <span class=\"bp\">.</span><span class=\"n\">eq_r</span> <span class=\"o\">â¹</span><span class=\"n\">_</span><span class=\"o\">âº)</span>\n    <span class=\"c1\">-- we want to worry about values, not terms</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">eval</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ey</span>\n    <span class=\"c1\">-- then do a case bash including one induction for the recursive `succ/succ` case</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ty</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">induction</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">generalizing</span> <span class=\"n\">ey</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">ey</span>\n    <span class=\"n\">case</span> <span class=\"n\">num.succ.succ</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">apply</span> <span class=\"n\">RTC.step</span> <span class=\"bp\">.</span><span class=\"n\">eq_ss</span>\n      <span class=\"c1\">-- massage goal a bit to fit IH</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Val</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ.injEq</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n    <span class=\"c1\">-- all non-recursive cases can be solved uniformly</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">exact</span> <span class=\"n\">RTC.one</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">constructor</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">refl</span>\n\n<span class=\"sd\">/-- Small steps preserve denotational semantics. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">step_eval</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hxy</span>\n  <span class=\"c1\">-- `simp` needs a bit extra help with unfolding `Val .num` to `Nat`</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hxy</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">Val</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"sd\">/-- Partial Church-Rosser is a direct consequence of the above two theorems. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">diamond</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">â</span> <span class=\"n\">x</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">z</span> <span class=\"bp\">â</span> <span class=\"bp\">â</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">~&gt;*</span> <span class=\"n\">u</span> <span class=\"bp\">â§</span> <span class=\"n\">z</span> <span class=\"bp\">~&gt;*</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hxy</span> <span class=\"n\">hxz</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">â¨(</span><span class=\"n\">eval</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">embed</span><span class=\"o\">,</span> <span class=\"n\">step_eval</span> <span class=\"n\">hxy</span> <span class=\"bp\">â¸</span> <span class=\"n\">eval_eval</span><span class=\"o\">,</span> <span class=\"n\">step_eval</span> <span class=\"n\">hxz</span> <span class=\"bp\">â¸</span> <span class=\"n\">eval_eval</span><span class=\"o\">â©</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Semantics</span>\n</code></pre></div>",
        "id": 341168814,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678558681
    }
]