[
    {
        "content": "<p>This is a meta-question. How would you measure the size of a proof? Consider for instance <code>rat.mul_one</code>, from <code>data/rat/basic.lean</code>. This is a two lines, 111 characters long tactic proof, including a call to <code>simp</code>. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">num_denom_cases_on&#39;</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"mi\">1</span> <span class=\"bp\">/.</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Then try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">run_cmd</span>\n<span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">decl</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"bp\">`</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">sizeof</span> <span class=\"err\">$</span> <span class=\"n\">to_string</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"o\">)</span>\n\n<span class=\"n\">run_cmd</span>\n<span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">decl</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"bp\">`</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span><span class=\"o\">,</span>\n   <span class=\"k\">proof</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">sizeof</span> <span class=\"err\">$</span> <span class=\"n\">to_string</span> <span class=\"k\">proof</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The first command says this proof is 7751 character long, and the second one says it pretty prints to 2015 characters. How long would you say this proof is? Do you have a better way to ask Lean what it thinks about this?</p>",
        "id": 182374889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575311594
    },
    {
        "content": "<p>I think the best measure would be something like \"number of nodes in the <code>expr</code>\"</p>",
        "id": 182392920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575322758
    },
    {
        "content": "<p>And how would you compute that?</p>",
        "id": 182393012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575322804
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">level</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">l</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">l₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">l₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>            <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span> <span class=\"n\">level</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">expr</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">t</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">local_const</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">bi</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">e</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">e</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">d</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span> <span class=\"n\">expr</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_decl</span> <span class=\"bp\">``</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"c1\">-- 2256</span>\n</pre></div>",
        "id": 182393549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575323196
    },
    {
        "content": "<p>Then again, this has a tendency to overcount duplicate subproofs. A better count would deduplicate those</p>",
        "id": 182393595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575323244
    },
    {
        "content": "<p>Would it be easy to deduplicate these? Maybe using Simon's traversing technology and collecting a list of subproofs? I don't know what I'm talking about.</p>",
        "id": 182393809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575323405
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">level</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">l</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">l₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">l₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>            <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">dedup_size_aux</span> <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span> <span class=\"n\">level</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">l</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"mi\">1</span> <span class=\"k\">else</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">l</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">dedup_size_aux</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n₁</span> <span class=\"err\">←</span> <span class=\"n\">dedup_size_aux</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n    <span class=\"n\">n₂</span> <span class=\"err\">←</span> <span class=\"n\">dedup_size_aux</span> <span class=\"n\">l₂</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n₁</span> <span class=\"err\">←</span> <span class=\"n\">dedup_size_aux</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n    <span class=\"n\">n₂</span> <span class=\"err\">←</span> <span class=\"n\">dedup_size_aux</span> <span class=\"n\">l₂</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span>            <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"mi\">1</span>\n  <span class=\"kn\">end</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">dedup_size</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">level</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">dedup_size_aux</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"err\">$</span>\n<span class=\"bp\">@</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">mk_rb_set</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">level</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">level</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">expr</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">t</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">local_const</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">bi</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">e</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">e</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">d</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span> <span class=\"n\">level</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span> <span class=\"n\">level</span> <span class=\"bp\">×</span> <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">dedup_size_aux</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span> <span class=\"n\">level</span> <span class=\"bp\">×</span> <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"mi\">1</span> <span class=\"k\">else</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">lift</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">ns</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">traverse</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"err\">∘</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">)</span> <span class=\"n\">ls</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">ns</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">local_const</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">bi</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n₁</span> <span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">n₂</span> <span class=\"err\">←</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">e</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n₁</span> <span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">n₂</span> <span class=\"err\">←</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">e</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n₁</span> <span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">n₂</span> <span class=\"err\">←</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">n₁</span> <span class=\"err\">←</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">n₂</span> <span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">n₃</span>  <span class=\"err\">←</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">dedup_size_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"n\">n₃</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">d</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">ns</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">traverse</span> <span class=\"n\">dedup_size_aux</span> <span class=\"n\">args</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">ns</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"mi\">1</span>\n  <span class=\"kn\">end</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">e</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">dedup_size</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">dedup_size_aux</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">mk_rb_set</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">level</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"bp\">@</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">mk_rb_set</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">expr</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_decl</span> <span class=\"bp\">``</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"c1\">-- 2256</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_decl</span> <span class=\"bp\">``</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"bp\">.</span><span class=\"n\">dedup_size</span> <span class=\"c1\">-- 633</span>\n</pre></div>",
        "id": 182395471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575324649
    },
    {
        "content": "<p>Thank you very much! I'll need time to decipher this, but first I must sleep...</p>",
        "id": 182397164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575325985
    }
]