[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">TopCommRing</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">cr</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">uniform</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">topological_add_group</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">CmplTopCommRing</span> <span class=\"kn\">extends</span> <span class=\"n\">TopCommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">sp</span> <span class=\"o\">:</span> <span class=\"n\">separated</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">uniform</span>\n</pre></div>",
        "id": 162644619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554486638
    },
    {
        "content": "<p>Should I use the <code>old_structure_cmd</code> or not? What are the pros and cons?</p>",
        "id": 162644647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554486659
    },
    {
        "content": "<p>I will say this: <em><code>old_structure_cmd</code> is not deprecated</em>. The name is really unfortunate, and it should be something more like <code>flat_structure</code></p>",
        "id": 162646713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488030
    },
    {
        "content": "<p><code>old_structure_cmd</code> will lay out a structure as a bunch of fields, inlining all fields of the parent(s). It then constructs \"parent coercions\" (also a bad name, it's an instance not a coercion) so that you can infer parents from the children</p>",
        "id": 162646846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488122
    },
    {
        "content": "<p>This can get expensive, especially for deep hierarchies or structures with many fields</p>",
        "id": 162646882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488156
    },
    {
        "content": "<p>The \"new structure cmd\" (aka the default) is to use a \"nested\" layout, where a structure <code>B extends A</code> contains a field <code>to_A</code> that allows access to all the fields of A. Some magic is then done so you can't tell the difference, but the parent coercions are now a lot simpler to define</p>",
        "id": 162647038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488253
    },
    {
        "content": "<p>The major downside of the new structure cmd is that you can't nest two structures with a common field, at least not if you don't want two copies of the field as data (and they can potentially be different, and bad things can happen). To avoid this, diamonds are just plain rejected. So <code>structure foo extends add_comm_group A, ring A</code> is rejected</p>",
        "id": 162647173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488355
    },
    {
        "content": "<p>For a structure without parents, I don't think it makes a difference which you use</p>",
        "id": 162647313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554488430
    },
    {
        "content": "<p>But my example has a parent (-;</p>",
        "id": 162647402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554488499
    },
    {
        "content": "<p>In the end, I want to put a category structure on both, get the induced forgetful functor, etc...<br>\nThis all goes quite smoothly.<br>\nNow, what I would like is if I have an type <code>R</code> and it turns out to have instances of <code>complete_space</code> and <code>topological_ring</code> etc... that I can just write<br>\n<code>{ \\alpha := R }</code> for the object of <code>CmplTopCommRing</code> and that type class inference figures out the other fields of the structure.</p>",
        "id": 162647569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554488630
    },
    {
        "content": "<p>Does that affect my choice for old/flat vs new/nested structures?</p>",
        "id": 162647623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554488650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why are flat structures expensive if you have deep hierarchies? As in, why more expensive then nested structures?</p>",
        "id": 162652936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554492028
    },
    {
        "content": "<p>Are all the \"grandparent coercions\" also inlined into the flat structure? Is that the issue?</p>",
        "id": 162652972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554492067
    },
    {
        "content": "<p>Yes, all transitive parent fields are pulled in. I think leo had examples like <code>decidable_linear_ordered_field</code> or something which were one line to write but just massive under the hood</p>",
        "id": 162654332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554493192
    }
]