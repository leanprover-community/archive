[
    {
        "content": "<p>Question about subsets of finite sets</p>\n<p>Hi all,</p>\n<p>I have played the Natural Number Game (<a href=\"https://adam.math.hhu.de\">https://adam.math.hhu.de</a>) and I've worked through a big chunk of Mathematics in Lean (<a href=\"https://leanprover-community.github.io/mathematics_in_lean/mathematics_in_lean.pdf\">https://leanprover-community.github.io/mathematics_in_lean/mathematics_in_lean.pdf</a>). To challenge myself I'd like to try and use Lean 4 to define and prove some basic things in the field of Graph theory. I'd like to only work with finite graphs so that I can always reason about things like the degree of a vertex etc. However, it seems that I have a fundamental misunderstanding about finite sets in Lean, specifically subsets of finite sets. The definition of Neighborhood in the following piece of code yields an error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Fintype</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Graphs will be finite and simple</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">adj</span>   <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">sym</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"n\">adj</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n  <span class=\"n\">irref</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">adj</span> <span class=\"n\">v</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.adj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Neighborhood</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V.filter</span> <span class=\"o\">(</span><span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error states:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Finset.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">Graph.adj</span> <span class=\"n\">G</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">V</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">V</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">V</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>\n<p>I have been staring at this for a while. It seems to me that V should be a of the type Finset { x // x ∈ V }, but I think I must be misunderstanding something. Does anybody have any advice on how I should go about defining the neighborhood of a vertex in this finite setting?</p>",
        "id": 402883867,
        "sender_full_name": "Pjotr Buys",
        "timestamp": 1700319734
    },
    {
        "content": "<p>In general, given a <code>V : Finset A</code>, you don't want to use <code>v : V</code>, but rather <code>v : A</code> with hypothesis <code>v \\in V</code></p>",
        "id": 402884279,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700320003
    },
    {
        "content": "<p>Thank you for the reply. I tried something like this too, but I can't seem to find how to pass that hypothesis through to the filter. If I try it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Neighborhood</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V.filter</span> <span class=\"o\">(</span><span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Graph.adj</span> <span class=\"n\">G</span> <span class=\"n\">v</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">v</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">V</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>\n<p>Which I understand but don't know how to get rid of.</p>",
        "id": 402884794,
        "sender_full_name": "Pjotr Buys",
        "timestamp": 1700320353
    },
    {
        "content": "<p><code>def Neighborhood (v : V) := V.filter (fun (w : α) =&gt; ∃ h : w ∈ V, (G.adj v ⟨w, h⟩))</code></p>",
        "id": 402884809,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700320365
    },
    {
        "content": "<p>I won't try to explain it. It takes some getting used to! But it will make sense eventually.</p>",
        "id": 402884890,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700320426
    },
    {
        "content": "<p>Reformulating  the constructors of <code>Graph</code> along the lines <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> suggested would probably be better in the long run.</p>",
        "id": 402885335,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700320744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113488-general/topic/Question.20about.20subsets.20of.20finite.20sets/near/402884809\">said</a>:</p>\n<blockquote>\n<p><code>def Neighborhood (v : V) := V.filter (fun (w : α) =&gt; ∃ h : w ∈ V, (G.adj v ⟨w, h⟩))</code></p>\n</blockquote>\n<p>The error is gone! I think I vaguely understand what is going on here. I will tinker around with it to get a better feel for what's going on. Thanks a lot!</p>",
        "id": 402885584,
        "sender_full_name": "Pjotr Buys",
        "timestamp": 1700320884
    },
    {
        "content": "<p>What's going on is the following: you fix a type <code>α</code> and <code>(V : Finset α)</code>. Then you speak about <code>V → V → Prop</code> (or related things). But <code>V</code> is not a type, and you can not have function from something that is not a type.</p>",
        "id": 402885740,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700320969
    },
    {
        "content": "<p>So, what Lean does for you is to replace <code>V</code> in <code>V → V → Prop</code> by a type.</p>",
        "id": 402885774,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700320990
    },
    {
        "content": "<p>This type is the subtype of <code>α</code> associated to <code>V</code>: its terms are pairs given by <code>(x : α)</code> and <code>(h : x ∈ α)</code></p>",
        "id": 402885887,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700321057
    },
    {
        "content": "<p>This subtype is denoted <code>{ x // x ∈ V } </code>. Mathematically it is the same thing as <code>V</code>, but not for Lean.</p>",
        "id": 402885975,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700321115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"666316\">@Pjotr Buys</span> if you have a set-theoretic background then there are couple of bumps along the way when you try and switch your thinking to Lean's more type-theoretic approach. To first approximation a set and a type are the same thing (they are both things \"without a definition\" in their respective foundations, and they both represent \"a collection of stuff\"). However one big difference between set theory and type theory is that a term <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> can be an element of many sets in set theory, but in Lean a term can only have one type. So when you start thinking about \"subsets\" of a type in type theory, or \"finite subsets\", you have to do things in a slightly different way. The type <code>Finset X</code> is the type of all finite subsets of a type <code>X</code>, so if <code>V : Finset X</code> then <code>V</code> is a <em>term</em> not a type, and this causes some subtleties. To be quite frank, experience with many students has shown that the best way to understand the details of how to deal with this subtlety is to just do exactly what you are doing -- try a project and ask questions when you're stuck. Good luck!</p>",
        "id": 402886394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700321333
    },
    {
        "content": "<p>An alternative:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Neighborhood</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.map</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V.attach.filter</span> <span class=\"o\">(</span><span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"bp\">.</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Whether that's less confusing or more, I'll leave to you to decide</p>",
        "id": 402886787,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700321571
    },
    {
        "content": "<p>This is all certainly very helpful. I am very new to type theory (or any theory particularly close to the foundations of logic) so it'll take some time to digest.</p>",
        "id": 402887858,
        "sender_full_name": "Pjotr Buys",
        "timestamp": 1700322349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666316\">Pjotr Buys</span> has marked this topic as resolved.</p>",
        "id": 402887867,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700322353
    }
]