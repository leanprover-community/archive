[
    {
        "content": "<p>I am trying to set up a lean4 project in one directory (while using lean 3 everywhere else). I have done </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">override</span> <span class=\"n\">set</span> <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span>\n<span class=\"n\">lake</span> <span class=\"n\">init</span> <span class=\"n\">lac</span>\n</code></pre></div>\n<p>but how do I get the current version of mathlib? I say <code>import tactic</code> but it doesn't know it?</p>",
        "id": 325194327,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675266548
    },
    {
        "content": "<p>Just 2 minutes ago I asked:<br>\n<a href=\"#narrow/stream/113489-new-members/topic/Lean.204.20first.20steps\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Lean.204.20first.20steps</a></p>",
        "id": 325194475,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675266597
    },
    {
        "content": "<p>You can add the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n</code></pre></div>\n<p>in the lakefile.lean that <code>lake init</code> created for you, then run <code>lake build</code></p>",
        "id": 325199625,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675267803
    },
    {
        "content": "<p>You can then import tactic with <code>import Mathlib.Tactic.Basic</code>, imports must be fully qualified in Lean 4, but the mathlib4 docs should be enough to tell you the names of what you need <a href=\"https://leanprover-community.github.io/mathlib4_docs\">https://leanprover-community.github.io/mathlib4_docs</a></p>",
        "id": 325199768,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675267835
    },
    {
        "content": "<p>Finally I recommend using <code>lake exec cache get</code> to download precompiled mathlib oleans, and you should ensure that the lean-toolchain of your project matches  the latest mathlib one to avoid problems.</p>",
        "id": 325200334,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675267959
    },
    {
        "content": "<p>You may wish to pin a specific mathlib version in the lakefile so that things don't break when mathlib moves</p>",
        "id": 325200428,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675267984
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lake#syntax-of-require\">https://github.com/leanprover/lake#syntax-of-require</a> for how to do this</p>",
        "id": 325200708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675268061
    },
    {
        "content": "<p>Instead of specifying exact revision in lakefile it is now done <code>manifest.json</code> which can be found in the directory <code>lean_packages</code> in your project directory.</p>",
        "id": 325200940,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675268138
    },
    {
        "content": "<p>I think <code>lake-manifest.json</code> is by default in the project root now? But that could indeed be the best practice these days</p>",
        "id": 325201850,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675268389
    },
    {
        "content": "<p>Does <code>lake</code> fully replace the <code>leanproject</code> command?</p>",
        "id": 325202341,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675268525
    },
    {
        "content": "<p>For now yes as far as I'm aware, at least I've not needed anything leanproject for Lean 4 yet. Seeing as <code>lake</code> is extensible via <code>lake exec</code> some functionality that used to be left for leanproject rather than leanpkg before should now be implementable via a lake extension</p>",
        "id": 325202851,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675268668
    },
    {
        "content": "<p>Lake also supports <code>lake init foo math</code> for a library only with a mathlib dependency.</p>",
        "id": 325205568,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675269360
    },
    {
        "content": "<p><code>lake</code> is still very far away from being as convenient as <code>leanproject</code> unfortunately.</p>",
        "id": 325207211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675269783
    },
    {
        "content": "<p>But there is no alternative.</p>",
        "id": 325207262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675269798
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lake/issues/150\">https://github.com/leanprover/lake/issues/150</a>. Right now you cannot tell lake: \"I want to create a new project depending on mathlib\" and hope things will just work. There is nothing remotely analogous to <code>leanproject new my_project</code> that would get you the latest lean3+mathlib and the mathlib oleans.</p>",
        "id": 325208082,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675270004
    },
    {
        "content": "<p>Realistically I think the best chance for that working out of the box is someone from the mathlib4 crowd stepping up and implementing it in Lake. It's such a surface-level that no deep knowledge of Lake should be necessary.</p>",
        "id": 325210102,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675270513
    },
    {
        "content": "<p>Certainly I would hope that Lean people would find it easier than modifying a Python project!</p>",
        "id": 325210198,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675270541
    },
    {
        "content": "<p>Forgive my ignorance but what does <code>lake exe cache get</code> do? I assumed it solve the oleans issue but didn't really follow.</p>",
        "id": 325210412,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675270592
    },
    {
        "content": "<p>Hang on, what is the relation between the file lake generates and my files? Do I just say <code>lake init foo</code> or maybe <code>lake init foo math</code> and put my proof files in the same directory?</p>",
        "id": 325210819,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675270696
    },
    {
        "content": "<p><code>lake init foo</code> or <code>lake new foo</code> generates a few files <code>lean-toolchain</code> <code>lakefile.lean</code> <code>Foo.lean</code> and perhaps <code>Main.lean</code> depending on use of the templates like <code>math</code>. A library author creates a folder <code>Foo</code> in the <code>foo</code> folder for the proof files (this is how std and mathlib are structured for example).</p>",
        "id": 325217122,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675271103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/set.20up.20lean.204.20project/near/325210412\">said</a>:</p>\n<blockquote>\n<p>Forgive my ignorance but what does <code>lake exe cache get</code> do? I assumed it solve the oleans issue but didn't really follow.</p>\n</blockquote>\n<p>Perhaps this only works for mathlib4?</p>",
        "id": 325218519,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675271469
    },
    {
        "content": "<p>I said <code>elan override set leanprover/lean4:stable</code> and I thought that would only apply locally but now it uses lean4 also for my lean3 files??? How do I avoid this?</p>",
        "id": 325225256,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675273164
    },
    {
        "content": "<p>Yes, <code>override</code> only affects the current directory. Are they all in the same directory?</p>",
        "id": 325226053,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675273376
    },
    {
        "content": "<p>no I created a new directory</p>",
        "id": 325226496,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675273480
    },
    {
        "content": "<p>Can you run <code>elan show</code> in the directory with the Lean 3 files?</p>",
        "id": 325226737,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675273541
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">installed</span> <span class=\"n\">toolchains</span>\n<span class=\"c1\">--------------------</span>\n\n<span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span>\n\n<span class=\"n\">active</span> <span class=\"n\">toolchain</span>\n<span class=\"c1\">----------------</span>\n\n<span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">283</span><span class=\"n\">f6ed8083a</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 325227033,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675273618
    },
    {
        "content": "<p>when I open with visual studio it says lean4</p>",
        "id": 325227327,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675273687
    },
    {
        "content": "<p>In VS Code did you open the Lean 3 folder using File &gt; Open Folder? I think it's easiest to use separate VS Code windows for each Lean version.</p>",
        "id": 325227705,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675273803
    },
    {
        "content": "<p>I tried this but it still uses lean4</p>",
        "id": 325230686,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675274590
    },
    {
        "content": "<p>Ok, I disabled lean4 in code now at least I can use my lean3 files.</p>",
        "id": 325232935,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1675275126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/set.20up.20lean.204.20project/near/325218519\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/set.20up.20lean.204.20project/near/325210412\">said</a>:</p>\n<blockquote>\n<p>Forgive my ignorance but what does <code>lake exe cache get</code> do? I assumed it solve the oleans issue but didn't really follow.</p>\n</blockquote>\n<p>Perhaps this only works for mathlib4?</p>\n</blockquote>\n<p>it only works for mathlib4 but is also very helpful for projects depending on mathlib4 also!</p>",
        "id": 325262707,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675283702
    },
    {
        "content": "<p>I wasn't able to use it in a project depending on mathlib4. lake kept rebuilding stuff after fetching cache. If you manage to do that then some documentation would be very nice.</p>",
        "id": 325269926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675286483
    },
    {
        "content": "<p>I don't think I did anything special to get it to work, I'm using it in CI for a project depending on mathlib4, you can see the action at <a href=\"https://github.com/KisaraBlue/ec-tate-lean/blob/master/.github/workflows/build.yml\">https://github.com/KisaraBlue/ec-tate-lean/blob/master/.github/workflows/build.yml</a> and the lakefile in the root directory there. But I didn't have to do anything special. I'm quite sure it's working as intended as the CI runs only take 5 mins, which doesn't seem possible without the oleans. Lake will compile the executable code (but not oleans) for some files in mathlib 4, so you still see some output about <code>compiling mathlib.blah</code> but not <code>building</code> iirc</p>",
        "id": 325271226,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675286927
    },
    {
        "content": "<p>If your project needs <code>std4</code> and/or <code>quote4</code>, let <code>mathlib4</code> require those for you as it pleases. I'm saying this because if you require the wrong version for those, <code>cache</code> will try to download files that have never been computed by <code>mathlib4</code> workflow due to hash incompatibilities</p>",
        "id": 325272762,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675287419
    },
    {
        "content": "<p>In which folder do you run <code>lake exe cache get</code>? Maybe I did this wrong.</p>",
        "id": 325273062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675287516
    },
    {
        "content": "<p>In the root folder of my project</p>",
        "id": 325273097,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1675287532
    },
    {
        "content": "<p>Maybe I tried something too complicated and ran it in the <code>lake-packages/mathlib</code> folder.</p>",
        "id": 325273212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675287575
    },
    {
        "content": "<p>Yes, that will make <code>cache</code> think it's running from inside the <code>mathlib4</code> repo itself and will put the olean files for <code>std4</code> and <code>quote4</code> in the wrong places</p>",
        "id": 325273478,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675287667
    },
    {
        "content": "<p>Notice that Lake downloads <code>std4</code> and <code>quote4</code> to <code>lake-packages</code>. <code>cache</code> needs to know that you're not in <code>mathlib4</code> itself so it can be aware that <code>std4</code>, <code>quote4</code> and <code>mathlib4</code> are in the same depth of your folder tree: they're all immediate children of <code>lake-packages</code></p>",
        "id": 325273823,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675287799
    },
    {
        "content": "<p>Ok, I'm pretty sure I did the wrong thing here.</p>",
        "id": 325274284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675287987
    },
    {
        "content": "<p>Since you understand lake, do you think you could work on preventing it to download doc-gen whenever someone one asks for mathlib?</p>",
        "id": 325274353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675288019
    },
    {
        "content": "<p>And if you did call <code>lake exe cache get</code> from <code>lake-packages/mathlib</code>, you should delete the <code>lake-packages</code> folder and let Lake download it again because it's full of useless/misplaced olean files</p>",
        "id": 325274375,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675288023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/set.20up.20lean.204.20project/near/325274353\">said</a>:</p>\n<blockquote>\n<p>Since you understand lake, do you think you could work on preventing it to download doc-gen whenever someone one asks for mathlib?</p>\n</blockquote>\n<p>I think that is an issue that has to be fixed from within lake, I am not sure we have people except mac who have good understanding of the lake implementation itself?</p>",
        "id": 325274524,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675288080
    },
    {
        "content": "<p>After trying that nothing worked so I nuked the whole <code>lake-packages</code> folder.</p>",
        "id": 325274607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675288097
    },
    {
        "content": "<p>Henrik, don't get me wrong, I <em>love</em> doc-gen, but not in this place.</p>",
        "id": 325274676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675288122
    },
    {
        "content": "<p>Oh I get that you don't want to download it all the time completely :D It annoys me as well.</p>",
        "id": 325274781,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675288154
    },
    {
        "content": "<p>How big is the doc-gen source anyway compared to the big oleans downloaded from cache? Is the problem that the entire history of the repo is cloned?</p>",
        "id": 325274885,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675288181
    },
    {
        "content": "<p>The main issue is that it downloads Unicode.lean as a dependency which ships dozens of MB of raw unicode data.</p>",
        "id": 325274994,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675288207
    },
    {
        "content": "<p><code>cache</code> does not put/get <code>doc-gen4</code> oleans</p>",
        "id": 325275257,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675288311
    },
    {
        "content": "<p>I think I have been doing this wrong also. Would <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  or someone else give a bulleted list of instructions to create a new Lean 4 library with a dependency on mathlib its oleans. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 325283530,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675291368
    },
    {
        "content": "<p>I will open a PR</p>",
        "id": 325284620,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675291856
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1998\">!4#1998</a></p>",
        "id": 325292295,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675295645
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">init</span> <span class=\"n\">MyProject</span> <span class=\"n\">math</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">toolchain</span> <span class=\"bp\">'</span><span class=\"n\">stable'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">the</span> <span class=\"n\">binary</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 325293182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675296129
    },
    {
        "content": "<p>I'll just take this to github. Thanks a <em>lot</em> for the PR!</p>",
        "id": 325293306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675296202
    },
    {
        "content": "<p>That's because your default toolchain is pointing to an old version. What does <code>elan toolchain list</code> show for you?</p>",
        "id": 325293843,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675296487
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">brutus</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">$</span> <span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">list</span>\n<span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">35</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">44</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">45</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">50</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">50</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">29</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">17</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">21</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">23</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">24</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">25</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">26</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">29</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">30</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">05</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">13</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">16</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">22</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">23</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">04</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">06</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">16</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">29</span>\n<span class=\"n\">semorrison</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">fix</span><span class=\"bp\">-</span><span class=\"mi\">1907</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">brutus</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">$</span>\n</code></pre></div>\n<p>I never think about toolchains, and my students don't either. Is this just an issue which will go away over time (e.g. when nobody's using Lean 3 any more?)</p>",
        "id": 325294172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675296720
    },
    {
        "content": "<p>I don't even know if <code>stable</code> is lean 3 or lean 4!</p>",
        "id": 325294225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675296736
    },
    {
        "content": "<p>I am not sure what's the recommended way to proceed here. You already have many recent toolchains so, for you, calling <code>elan default leanprover/lean4:nightly-2023-01-29</code> would do the trick. You would be able to call <code>lake init MyProject math</code></p>",
        "id": 325294455,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675296887
    },
    {
        "content": "<p>Okay, I've added a comment about that in the PR. The instructions recommend the users to set a more recent toolchain as default in order to be able to use the <code>math</code> option</p>",
        "id": 325299352,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675299768
    },
    {
        "content": "<p>If you're not on Windows, you have the option of not using <code>elan default</code> by running <code>elan run leanprover:lean4/nightly lake init MyProject math</code>, which affects the current command only.</p>",
        "id": 325326032,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1675320883
    },
    {
        "content": "<p>Unfortunately I think <code>elan run</code>does not yet work on Windows, though, so it might be best to avoid it in general instructions</p>",
        "id": 325326129,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1675320945
    },
    {
        "content": "<p>Does <code>lake +leanprover:lean4/nightly init MyProject math</code> work on Windows?</p>",
        "id": 325345873,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675329140
    },
    {
        "content": "<p>The PR was merged already so if someone feels confident with a better command, please open a new PR <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 325355634,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675332164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/set.20up.20lean.204.20project/near/325274994\">said</a>:</p>\n<blockquote>\n<p>The main issue is that it downloads Unicode.lean as a dependency which ships dozens of MB of raw unicode data.</p>\n</blockquote>\n<p>What does it need this data for?</p>",
        "id": 325965142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675606228
    },
    {
        "content": "<p>Mostly to know the name etc. of all the unicode code points afaik.</p>",
        "id": 325965666,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675606473
    },
    {
        "content": "<p>doc-gen4 uses it to render doc-strings to the best of its ability iirc.</p>",
        "id": 325965822,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675606548
    },
    {
        "content": "<p>Right, but a mathematician making a toy project with mathlib doesn't need doc-gen4.</p>",
        "id": 325967174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675607137
    },
    {
        "content": "<p>Yeah I've never denied that, I've been in favor of not pulling doc-gen4 unless the doc feature is enabled in the entire time, it is merely a technical challenge with an issue in the lake issue tracker that needs to be implemented.</p>",
        "id": 325967328,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675607194
    },
    {
        "content": "<p>Got it. Sorry, I'm totally ignorant of all things lake! (and also all things doc-gen :-) )</p>",
        "id": 325967717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675607277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/set.20up.20lean.204.20project/near/325965666\">said</a>:</p>\n<blockquote>\n<p>Mostly to know the name etc. of all the unicode code points afaik.</p>\n</blockquote>\n<p>Is this used at all?</p>",
        "id": 325970140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675608458
    },
    {
        "content": "<p>Ah, it's used to generate header names <a href=\"https://github.com/leanprover/doc-gen4/blob/162de994c2532d384529b8b7c2eb1ba4018b38ee/DocGen4/Output/DocString.lean#L35-L60\">here</a></p>",
        "id": 325970327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675608567
    },
    {
        "content": "<p>I'd argue that if not downloading doc-gen4 at all is currently challenging in Lake, it would be better to have very slightly uglier heading links in doc-gen than to have every lean user download dozens of megabytes of unicode data</p>",
        "id": 325970542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675608656
    },
    {
        "content": "<p>I'm not sure if its challenging, the issue is mostly that nobody is working on Lake right now because Mac is busy with other stuff.</p>",
        "id": 325970673,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675608719
    },
    {
        "content": "<p>Not all challenges are technical, it sounds like this is an availability challenge. To make my suggestion concrete: it's merge <a href=\"https://github.com/leanprover/doc-gen4/pull/112\">https://github.com/leanprover/doc-gen4/pull/112</a>, and revert it once Mac or someone else has time to improve <code>lake</code></p>",
        "id": 325971504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675609126
    },
    {
        "content": "<p>You could hard-code this list for now (I don't know what \"other\" means)</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Prelude Data.Char&gt; filter (\\c -&gt; isPunctuation c || isSeparator c) ['\\32'..'\\127']\n\" !\\\"#%&amp;'()*,-./:;?@[\\\\]_{}\"\n</code></pre></div>",
        "id": 325972041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675609382
    },
    {
        "content": "<p>For what it's worth, the rules for HTML ids are:</p>\n<blockquote>\n<p>HTML 5 is even more permissive, saying only that an id must contain at least one character and may not contain any space characters.</p>\n</blockquote>\n<p>So really just removing spaces is all that's necessary; the rest is cosmetic</p>",
        "id": 325972227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675609491
    },
    {
        "content": "<p>And the place where the cosmetic choice matter is in the URL fragment, which is also only allowed to contain <a href=\"https://stackoverflow.com/a/2849800/102441\">a hard-coded list of characters</a> (the rest of which will be ugly %-escaped things)</p>",
        "id": 325972436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675609591
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2079\">!4#2079</a> suggests a toolchain with a <a href=\"https://github.com/leanprover/lake/pull/152\">fix on Lake</a> for the <code>math</code> template<br>\n(it's a trivial <code>+2 −2</code> PR)</p>",
        "id": 325973390,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675609990
    },
    {
        "content": "<p>Trying to read the instructions above but I'm afraid I missed a step: I ran <code>lake init demo math</code> in my empty demo directory and tried to start coding in <code>Demo.lean</code>, but got the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">boltonbailey</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---stable/bin/lake print-paths Init` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">Error</span> <span class=\"n\">parsing</span> <span class=\"bp\">'././</span><span class=\"n\">lakefile.lean'.</span>  <span class=\"n\">Please</span> <span class=\"n\">restart</span> <span class=\"n\">the</span> <span class=\"n\">lean</span> <span class=\"n\">server</span> <span class=\"n\">after</span> <span class=\"n\">fixing</span> <span class=\"n\">the</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration</span> <span class=\"n\">file.</span>\n</code></pre></div>\n<p>What did I do wrong here?</p>",
        "id": 328939263,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676887643
    },
    {
        "content": "<p>Wild guess: somehow the version of lean/lake that made the lakefile is not the same as the one that is being used in the new project?</p>",
        "id": 328940288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676887965
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">demo</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lake</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">7</span><span class=\"n\">dbfaf9b751917a7fe020485bf57f41fdddcaafa</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328950820,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676890815
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">demo</span> <span class=\"bp\">%</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">7</span><span class=\"n\">dbfaf9b7519</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328951101,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676890919
    },
    {
        "content": "<p>How do I determine what version of lean is being used in the project?</p>",
        "id": 328951198,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676890938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/set.20up.20lean.204.20project/near/328950820\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">demo</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lake</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">7</span><span class=\"n\">dbfaf9b751917a7fe020485bf57f41fdddcaafa</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`$</span> <span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">`</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 328951863,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676891160
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">demo</span> <span class=\"bp\">%</span> <span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">cat</span><span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div>",
        "id": 328952011,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676891198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/set.20up.20lean.204.20project/near/328952011\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">demo</span> <span class=\"bp\">%</span> <span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">cat</span><span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is to get the lean toolchain used by lake in your project. So this works inside the project directory<br>\nIf you want to find the lean toolchain that is your default (and therefore used to initialise projects), <br>\n<code>$ elan toolchain list</code></p>",
        "id": 328952469,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676891343
    },
    {
        "content": "<p>the version currently in use will be marked <code>default</code></p>",
        "id": 328952568,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676891378
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">demo</span> <span class=\"bp\">%</span> <span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">list</span>\n<span class=\"n\">stable</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">44</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">45</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">46</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">50</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">19</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">05</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">23</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328952764,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676891439
    },
    {
        "content": "<blockquote>\n<p>So this works inside the project directory</p>\n</blockquote>\n<p>I ran this from the top-level of the project - lake did not create any <code>lean-toolchain</code> file in my directory.</p>",
        "id": 328953143,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676891578
    },
    {
        "content": "<p>okay. Try the following and tell us if it works. </p>\n<ol>\n<li>Leave the project directory</li>\n<li>Run <code>elan self update</code></li>\n<li>Run <code>elan default leanprover/lean4:nightly-2023-02-10</code></li>\n<li>Run <code>lake new &lt;project_name&gt; math</code></li>\n<li>Run <code>cd project_name/</code></li>\n</ol>",
        "id": 328953736,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676891829
    },
    {
        "content": "<p>The first step is important</p>",
        "id": 328953785,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676891851
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">%</span> <span class=\"n\">elan</span> <span class=\"n\">self</span> <span class=\"n\">update</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">self</span><span class=\"bp\">-</span><span class=\"n\">update</span> <span class=\"n\">is</span> <span class=\"n\">disabled</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">build</span> <span class=\"n\">of</span> <span class=\"n\">elan</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">you</span> <span class=\"n\">should</span> <span class=\"n\">probably</span> <span class=\"n\">use</span> <span class=\"n\">your</span> <span class=\"n\">system</span> <span class=\"n\">package</span> <span class=\"n\">manager</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"n\">elan</span>\n</code></pre></div>",
        "id": 328953812,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676891865
    },
    {
        "content": "<p>Is this an M1 issue? I have a Mac M1.</p>",
        "id": 328953888,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676891884
    },
    {
        "content": "<p>Which version of elan do you have? Maybe you're up to date anyway</p>",
        "id": 328954396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676892020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">%</span> <span class=\"n\">elan</span> <span class=\"c1\">--version</span>\n<span class=\"n\">elan</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328954428,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892036
    },
    {
        "content": "<p>This is fine. Skip to step 3</p>",
        "id": 328954527,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892090
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">%</span> <span class=\"n\">elan</span> <span class=\"c1\">--version</span>\n<span class=\"n\">elan</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span> <span class=\"o\">)</span>\n<span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">boltontest</span> <span class=\"n\">math</span>\n<span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">mathlibcontribution</span> <span class=\"bp\">%</span> <span class=\"n\">cd</span> <span class=\"n\">boltontest</span>\n<span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">boltontest</span> <span class=\"bp\">%</span> <span class=\"n\">ls</span>\n<span class=\"n\">Boltontest.lean</span> <span class=\"n\">lakefile.lean</span>\n<span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">boltontest</span> <span class=\"bp\">%</span>\n</code></pre></div>",
        "id": 328954803,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892198
    },
    {
        "content": "<p>run <code>lake update</code> inside the project folder</p>",
        "id": 328954860,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892218
    },
    {
        "content": "<p>wait, where is the lean-toolchain file</p>",
        "id": 328955035,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892279
    },
    {
        "content": "<p>Do you happen to have a <code>lean-toolchain</code> file inside the folder <code>mathilbcontribution</code>?</p>",
        "id": 328955100,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892303
    },
    {
        "content": "<p>Ok redoing it with step 2 produces the lean-toolchain file</p>",
        "id": 328955131,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892314
    },
    {
        "content": "<p>(I think you meant to say skip to step 2 above?)</p>",
        "id": 328955189,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892329
    },
    {
        "content": "<p>Nvm, cd into your project folder and run <code>lake update</code>.</p>",
        "id": 328955243,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892357
    },
    {
        "content": "<p>you should see mathlib being cloned. Is this happening?</p>",
        "id": 328955378,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892401
    },
    {
        "content": "<p>Yes</p>",
        "id": 328955462,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">boltontest</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">quote4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">JLimperg</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span>\n</code></pre></div>",
        "id": 328955521,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892447
    },
    {
        "content": "<p>Let me try importing mathlib files now</p>",
        "id": 328955558,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892467
    },
    {
        "content": "<p>I would try <code>lake exe cache</code> first</p>",
        "id": 328955668,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892499
    },
    {
        "content": "<p>It should save you 20-30 minutes if it works</p>",
        "id": 328955717,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892520
    },
    {
        "content": "<p>Yeah it was taking a while</p>",
        "id": 328955750,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892533
    },
    {
        "content": "<p>Glorious, it works. Thank you <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span></p>",
        "id": 328956259,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1676892704
    },
    {
        "content": "<p>You're welcome :)</p>",
        "id": 328956293,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  : This issue keeps coming up. People have some toolchain, but mathlib4 is using a different toolchain, and the build fails. Since we have a specific command just to start mathlib4 based projects, is it possible to change lake such that: </p>\n<p>When <code>lake new &lt;project_name&gt; math</code> is called (with the <code>math</code> command in the end), lake changes the default toolchain to match the mathlib4 toolchain from the cloned mathlib4 repo, and calls the required elan commands?</p>",
        "id": 328956965,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676892885
    },
    {
        "content": "<p>No, the default toolchain has to be chosen manually. What's happening is an old bug in the Lake <code>math</code> template. The solution is to set the default toolchain to a more recent one before doing <code>lake init ... math</code> so that command can run without the old bug</p>",
        "id": 328992818,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1676902993
    },
    {
        "content": "<p>Maybe it has to be better phrased in the mathlib4 readme because there I said the command first and then warned about the toolchain issue later. <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> do you want to improve those instructions?</p>",
        "id": 328993210,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1676903071
    },
    {
        "content": "<p>Sounds good. I can send a PR for this</p>",
        "id": 329023094,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1676910781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> Sorry I had to include another fix I just found in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2403\">!4#2403</a></p>",
        "id": 329313282,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677022422
    },
    {
        "content": "<p>No problem, I just reborsed it.</p>",
        "id": 329315477,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1677023574
    }
]