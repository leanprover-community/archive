[
    {
        "content": "<p>Hi there,</p>\n<p>For my master's thesis, my supervisor and I agreed that I will be formalizing \"something\" in a proof assistant. Yay!<br>\nWe still have a couple of options for what \"something\" is exactly. There are very fundamental options, and there are more \"high-level\" options. One of the candidates is chapter 4 in <a href=\"https://math.mit.edu/~poonen/papers/Qpoints.pdf\">https://math.mit.edu/~poonen/papers/Qpoints.pdf</a>, the most important theorem for me being Theorem 4.5.2. However, for this we need a lot of theory on schemes and sheaves (glueing of sheaves, Galois coverings, base change by a Galois action on a field), so it is probably way too ambitious. Does anyone have an idea as to \"how much\" work there would be involved in formalizing all this? Are there any obvious pieces of foundation missing in mathlib, any obvious bottlenecks?</p>",
        "id": 324554757,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675069188
    },
    {
        "content": "<p>I think we don't have anything about sheaves of modules or base change for schemes so it's probably a lot of work. But of course one can formalize some of the missing prerequisites!</p>",
        "id": 324556189,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675069665
    },
    {
        "content": "<p>I thought we did have base change for schemes, but we don't have sheaves of modules; I made them as part of a course I gave last term but I didn't PR them, and making the API for them will take a long time.</p>",
        "id": 324557484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675070110
    },
    {
        "content": "<p>Section 4.1 is not about sheaves of modules, but about a general sheaf on a topological space. I don't know whether that is better or worse.</p>",
        "id": 324557698,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675070185
    },
    {
        "content": "<p>Ah yes, we have it!</p>",
        "id": 324557702,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675070186
    },
    {
        "content": "<p>We also don't have group cohomology, quasiprojective schemes or varieties. I have people working on these things but we're not ready for 4.5.2. I supervised a master's project which did group cohomology, if you want to get a more realistic idea about what is feasible.</p>",
        "id": 324558523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675070455
    },
    {
        "content": "<p>Right. Thank you for your help. Then I have an idea what my thesis will be about.</p>",
        "id": 324559011,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675070630
    },
    {
        "content": "<p>Part of what's going on here is that there is a difference between \"I will write down a definition of group cohomology\" and \"I will formalise group cohomology and an API in a way which is acceptable to mathlib\" which are two extremely different things. Amelia's group cohomology work now uses a lot of simplicial machinery, for example. It means that the entire process is very slow. On the other hand before lockdown I had an undergrad do their thesis on a basic definition of H^0 and H^1 and the first few terms of the long exact sequence, and that was simple and cool</p>",
        "id": 324559126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675070671
    },
    {
        "content": "<p>The hold-up with projective varieties is that we needed to develop a theory of internal and external gradings on rings (and semirings, monoids etc) which ended up being a published paper.</p>",
        "id": 324559408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675070774
    },
    {
        "content": "<p>Whow, cool. But that sounds complicated indeed.</p>",
        "id": 324559448,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675070793
    },
    {
        "content": "<p>We now do have a definition of protective schemes but like group cohomology it's on a branch and not on master.</p>",
        "id": 324559484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675070812
    },
    {
        "content": "<p>So what is an \"API\" exactly, in this case? Is it the entirety of simple theorems that allows one to actually work with something without proving every little elementary detail?</p>",
        "id": 324559502,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675070821
    },
    {
        "content": "<p>I didn't even consider that chapter 4 deals mostly with projective schemes. I just assume that a couple of properties will hold for most of the schemes I work with, but of course to work with them in Lean, one first needs to define them indeed.</p>",
        "id": 324559858,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675070937
    },
    {
        "content": "<p>One you make a definition in Lean you have to prove a lot of totally obvious lemma, for example if you define \"finite modules\" the first lemma you prove is the fact that a module is finite iff there is a finite set of generators.</p>",
        "id": 324559928,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675070960
    },
    {
        "content": "<p>This is of course completely obvious, <em>it is</em> the definition, but it's a good thing to have it explicitly.</p>",
        "id": 324560041,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675071004
    },
    {
        "content": "<p>Then you prove that it is the same has having a finset of generator (mathematically this is the same as above, but not for Lean). Then that the zero module is finite, that finite is stable under isomorphisms and so on.</p>",
        "id": 324560164,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675071048
    },
    {
        "content": "<p>Yes exactly, it's all the elementary little details which a user of the theory will want to have access to. Otherwise the development is unusable. For example if mathlib just offers you an opaque definition of H^1(G,A) and you say \"great now I can state the theorem\" then the first thing you'll say after that is \"ok I now have a 1-cocycle, how do I get the cohomology class\" and you don't want the answer \"oh, we define group cohomology using some abstract derived functor nonsense, you're on your own if you have a cocycle\". The API needs to give you a way of making cohomology classes from cocycles (so you don't just need group cohomology, you need a surjection from cocycles with kernel coboundaries).</p>",
        "id": 324560182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675071055
    },
    {
        "content": "<p>You can have a look at a random file in mathlib to get an idea of what an API is.</p>",
        "id": 324560203,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675071067
    },
    {
        "content": "<p>Hm, right. Yeah, that makes sense. Also to prevent people from reinventing that wheel in their own projects, I guess.</p>",
        "id": 324560423,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675071145
    },
    {
        "content": "<p>Thank you</p>",
        "id": 324560440,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675071153
    },
    {
        "content": "<p>Note that often you develop the API while proving more interesting results (except from the very basic stuff). The first time you need that <code>R</code> is finite as an <code>R</code> module you prove the theorem and you put it in the API rather than proving it inside a bigger proof.</p>",
        "id": 324560680,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675071229
    },
    {
        "content": "<p>Conversely if you define cohomology as cocycles over coboundaries and then someone wants the Serre spectral sequence what are you going to do then? What you need from a good theory of group cohomology is enough extra functions and theorems so that everyone can do all the things they want to do with group cohomology despite the fact that we mathematicians all believe that everything is true \"by definition\" because we have 37 different definitions of group cohomology simultaneously in our head and are free to switch. That's not how formalising works. You have to choose one definition and then the API is there to make it look like it's all the definitions, eg you will need a surjection from n-cocycles to cohomology with kernel the n-coboundaries whether or not you defined it to be cocycles over coboundaries, you'll need the long exact sequence, you'll need Inf-Res etc etc. If you just make a definition and then don't check that your definition can be used to do all these things then your work isn't ready</p>",
        "id": 324560975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675071315
    },
    {
        "content": "<p>Hm, right. Got it. I will keep that in mind.</p>",
        "id": 324561632,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675071525
    },
    {
        "content": "<p>To give another example: section 4 uses fpqc morphisms, but right now we have no API for flatness at all, even for flat modules. This would be a very cool MSc project; to develop enough API for flatness in commutative algebra so that we can define and prove basic properties about flat morphisms of schemes. How much Lean experience do you have? Right now I have a PhD student who just proved that if I \\tensor M -&gt; M is injective for all ideals I of R then A tensor M -&gt; B tensor M is injective for all injections of R-modules A -&gt; B. Thus we are just beginning the journey towards a proof of \"several definitions of flatness coincide\". Once we have this we'll be able to start on stuff like \"a free module is flat\". My guess is that it will be at least a year before we can even state something like \"the identity morphism from a scheme to itself is flat\" because right now we don't have enough people working on this sort of thing. It's not hard, it just takes a while to do it right and we don't have the person-power.</p>",
        "id": 324563536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675072160
    },
    {
        "content": "<p>Currently, I have played a bit with Lean (mathlib) and coq (unimath). I was at the summer school in Cortona in july last year.</p>",
        "id": 324564231,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675072355
    },
    {
        "content": "<p>But I am strongly considering to do my thesis on a more fundamental topic. Perhaps I will revisit this topic in my own time, as a hobby. Or see if I can get a PhD position where I can spend part of my time on stuff like this.</p>",
        "id": 324564812,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675072561
    },
    {
        "content": "<p>I am very much hoping that in a couple of years' time stuff like 4.5.2 will be very much a possibility for an MSc project. I am pushing algebraic number theory and arithmetic geometry amongst my own group. One thing it's important to remember is that despite the fact that theorems like 4.5.2 are as old as the hills (probably they go back to the 60s if not before), the formalisation community seems to have attached no importance to getting their systems ready to formalise this stuff until around 2018 when this community here decided to start making stuff like this their targets. As a consequence we are figuring out how to develop a lot of this stuff in a theorem prover for the first time -- this is \"cutting edge research\", rather bizarrely.</p>",
        "id": 324569658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675073993
    },
    {
        "content": "<p>Yeah. That is still hard for me to wrap my head around, that this \"seemingly trivial\" stuff apparently is sometimes worthy of publishing. But I probably will get more than acquainted with all the hardships involved in the next 6 months ^^</p>",
        "id": 324572050,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1675074831
    }
]