[
    {
        "content": "<p>I made a quick Lean implementation of <a href=\"https://strathprints.strath.ac.uk/60166/1/McBride_LNCS2015_Turing_completeness_totally_free.pdf\">McBride's paper *Turing Completeness Totally Free*</a>, which essentially treats general recursion as a side effect, wrapping it in a monad. Combined with the unchained do notation I find it very powerful. Perhaps we can replace some partial definition with these, so that we can reason about them.</p>\n<p>TL; DR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Unsafe execution of general recursive function. -/</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">execute</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">⌁</span> <span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">s</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Example: Counting how many triplings are needed to put a number to 1</span>\n<span class=\"cm\">  step 1 = 0</span>\n<span class=\"cm\">  step k = step (k/2)       (k even)</span>\n<span class=\"cm\">  step k = 1 + step (3k+1)  (k odd)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">⌁</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">call</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"c1\">-- `call` represents the recursing function</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">call</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Starting from 17, we need three triplings:</span>\n<span class=\"c1\">--  17 -&gt; 52 ... 13 -&gt; 40 ... 5 -&gt; 16 ... 1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">execute</span> <span class=\"n\">step</span> <span class=\"mi\">17</span>  <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 395410609,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1696679017
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Full Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Type representing the computation process of a general recursive program.</span>\n<span class=\"sd\">`General S T X` represents a process that produces an `X`,</span>\n<span class=\"sd\">possibly requiring some calls to a function `(s : S) → T s` for help.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">General</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u''</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"sd\">/-- Immediately produce a value. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">Return</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">General</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">X</span>\n<span class=\"sd\">/-- Call the function, and describe what to do with the result. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">Call</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">General</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">General</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">X</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">General</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fold</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">General</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Return</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Call</span> <span class=\"n\">s</span> <span class=\"n\">κ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fold</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Uhh weird universes help</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">General.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Return</span>\n  <span class=\"n\">bind</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">fold</span> <span class=\"n\">k</span> <span class=\"n\">Call</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Type of general recursive function. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">PiG</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">General</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>  <span class=\"c1\">-- Syntax `(x : S) ⌁ T x`</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">TSyntax.Compat</span>\n<span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">bracketedExplicitBinders</span> <span class=\"s2\">\" ⌁ \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">expandBrackedBinders</span> <span class=\"bp\">``</span><span class=\"n\">PiG</span> <span class=\"n\">xs</span> <span class=\"n\">b</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Explain later</span>\n<span class=\"kd\">def</span> <span class=\"n\">call</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">⌁</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Call</span> <span class=\"bp\">·</span> <span class=\"n\">Return</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">expand</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">⌁</span> <span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">General</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">General</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">X</span>\n  <span class=\"o\">:=</span> <span class=\"n\">fold</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">g</span>\n\n<span class=\"sd\">/-- Unsafe execution of general recursive function. -/</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">execute</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">⌁</span> <span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Return</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">execute</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">expand</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">s</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Example: Counting how many triplings are needed to put a number to 1</span>\n<span class=\"cm\">  step 1 = 0</span>\n<span class=\"cm\">  step k = step (k/2)       (k even)</span>\n<span class=\"cm\">  step k = 1 + step (3k+1)  (k odd)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">⌁</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">call</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"c1\">-- `call` represents the recursing function</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">call</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Starting from 17, we need three triplings:</span>\n<span class=\"c1\">--  17 -&gt; 52 ... 13 -&gt; 40 ... 5 -&gt; 16 ... 1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">execute</span> <span class=\"n\">step</span> <span class=\"mi\">17</span>  <span class=\"c1\">-- 3</span>\n</code></pre></div>\n</div></div>",
        "id": 395410720,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1696679093
    },
    {
        "content": "<p>A few questions:</p>\n<ul>\n<li>How can I solve that universe level issue in the middle? Writing the most general level seems to interfere with monad typeclass interference? (Or I messed up when calculating the levels)</li>\n<li>Can this be easily combined with the do notation so general recursion compiles to this monad?</li>\n<li>Is programming like this actually practical?</li>\n</ul>",
        "id": 395411061,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1696679278
    },
    {
        "content": "<p>I think  the universe weirdness is unavoidable, and it's a consequence of the monad framework (and as a result, <code>do</code> notation) not being (maximally) universe-polymorphic</p>",
        "id": 395575033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696797995
    },
    {
        "content": "<p>Which is to say; there is no Monad.bind that can move from one universe to another.</p>",
        "id": 395575045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696798019
    },
    {
        "content": "<p>But this has been discussed a bunch before in other threads</p>",
        "id": 395575055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696798033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Free.20general.20recursion/near/395575055\">said</a>:</p>\n<blockquote>\n<p>But this has been discussed a bunch before in other threads</p>\n</blockquote>\n<p>Unfortunately, thread discoverability is an issue, especially to new people who do not know what the right search keywords are.   There are also no tags like in Q&amp;A sites, and, honestly, Zulip search is slow (actually, Zulip is unusable on my Samsung phone).</p>",
        "id": 395703994,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696859484
    },
    {
        "content": "<p>Zulip search is very bad on mobile, but works on on desktop</p>",
        "id": 395707218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696860424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/set.20image.20notation/near/314905323\">said</a>:</p>\n<blockquote>\n<p>Here's a <a href=\"#narrow/stream/113488-general/topic/Changing.20the.20functor.20typeclasses/near/265813573\">discussion about changing the typeclasses to achieve that in Lean 3</a>, and <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO/near/282494539\">one about universe-polymorphic IO in Lean 4</a>.</p>\n</blockquote>",
        "id": 395707498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696860509
    }
]