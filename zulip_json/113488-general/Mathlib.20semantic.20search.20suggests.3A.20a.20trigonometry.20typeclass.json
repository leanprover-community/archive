[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.20semantic.20search/near/336429981\">said</a>:</p>\n<blockquote>\n<p>I searched for \"sine rule\" and the autoformalization was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sin_cos_eq_sin_cos_of_cos_eq_cos</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">trigonometry</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">cos</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sin</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">sin</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">sin</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">sin</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Should we introduce a <code>[trigonometry α]</code> typeclass to generalize over <code>complex.sin</code> and <code>real.sin</code>?</p>\n</blockquote>\n<p><code>is_R_or_C.sin</code></p>",
        "id": 336513556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677252697
    },
    {
        "content": "<p>Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>z</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mo>=</mo><mover accent=\"true\"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\sin(\\overline{z})=\\overline{\\sin(z)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6306em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-3.5506em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.25em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.87em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25em;\"><span></span></span></span></span></span></span></span></span> you could even do it for my preferred variant (the fields which are finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-algebras)</p>",
        "id": 336513831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677252767
    },
    {
        "content": "<p>Is it canonical to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">sin</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\operatorname{sin} x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6679em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">sin</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> on any topological algebra as the RHS of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sin_eq_tsum\">docs#real.sin_eq_tsum</a>?</p>",
        "id": 336545481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677260724
    },
    {
        "content": "<p>Re sin: That's how <code>exp</code> works in the p-adics but <code>sin</code> and <code>cos</code> are less useful in that setting.</p>",
        "id": 336546811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677261088
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Mathlib.20semantic.20search\">#general &gt; Mathlib semantic search</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 336547092,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677261163
    }
]