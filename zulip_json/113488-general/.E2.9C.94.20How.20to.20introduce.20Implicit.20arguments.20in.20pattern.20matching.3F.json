[
    {
        "content": "<p>The answer is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Palindrome</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>  <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Palindrome</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sandwich</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"n\">as</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"o\">([</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">middle</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Palindrome</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">([</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]),</span> <span class=\"bp\">@</span><span class=\"n\">Palindrome.sandwich</span> <span class=\"n\">_</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">as</span>\n</code></pre></div>",
        "id": 317969727,
        "sender_full_name": "Erika Su",
        "timestamp": 1672066795
    },
    {
        "content": "<p>We would usually define <code>Palindrom</code> as <code>List a -&gt; Prop</code> and if you want to use the fact that some list is a palindrom use a <code>Subtype</code></p>",
        "id": 317971739,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672067713
    },
    {
        "content": "<p>The more Lean-y way is to use something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">View</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">half</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"n\">l</span> <span class=\"n\">is</span> <span class=\"n\">made</span> <span class=\"k\">from</span> <span class=\"n\">half</span> <span class=\"bp\">...</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">View</span> <span class=\"n\">l</span>\n  <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"n\">similar</span>\n</code></pre></div>",
        "id": 317975876,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1672069735
    },
    {
        "content": "<p>This way actually more code is reused, and the Idris style views are less beneficial because we have powerful automation.</p>",
        "id": 317975979,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1672069796
    },
    {
        "content": "<p>You can see the same style difference just from how we define <code>Fin</code>.</p>",
        "id": 317976074,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1672069825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> has marked this topic as resolved.</p>",
        "id": 318109215,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672152425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> has marked this topic as unresolved.</p>",
        "id": 318109228,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672152431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> has marked this topic as resolved.</p>",
        "id": 318109292,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672152456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> has marked this topic as unresolved.</p>",
        "id": 318109348,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672152479
    },
    {
        "content": "<p>If you know it is a palindrome you can always get the last element by returning the first element. The pattern matching you are trying here wont work because what you are doing is not a pattern match in the Lean sense.</p>",
        "id": 318110943,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672153096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20introduce.20Implicit.20arguments.20in.20pattern.20matching.3F/near/318110943\">said</a>:</p>\n<blockquote>\n<p>If you know it is a palindrome you can always get the last element by returning the first element. The pattern matching you are trying here wont work because what you are doing is not a pattern match in the Lean sense.</p>\n</blockquote>\n<p>The problem i encountered is that the code can't compile because as isn't introduced as a pattern variable......  I changed the code to make it clearer.</p>",
        "id": 318112419,
        "sender_full_name": "Erika Su",
        "timestamp": 1672153584
    },
    {
        "content": "<p>The simple reason is that <code>[a] ++ as ++ [a]</code> is not a pattern. You cannot match on a list this way. There are 2 ways to match on a list in lean that is <code>[]</code> and <code>x :: xs</code> you can also extend the match on the <code>xs</code> part to for example <code>x :: y :: xs</code>. What you cannot do is match on a chain of appends like this and you can also not match like this <code>x :: x :: xs</code> to make sure that the first two elements of a list are equivalent. You'll have to figure that out with a seperate if statement after a <code>x :: y :: xs</code> thing.</p>\n<p>What you want to write here is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Palindrome</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>  <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Palindrome</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sandwich</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"n\">as</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"o\">([</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">middle</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Palindrome</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Palindrome.sandwich</span> <span class=\"n\">_</span> <span class=\"n\">as</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">as</span>\n</code></pre></div>\n<p>because the <code>as</code> is an implicit argument to the sandwich and not to the List itself. I also would not recommend having the Palindrome itself as an implicit argument here.</p>",
        "id": 318113462,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672153951
    },
    {
        "content": "<p>Thanks, that's very helpful!</p>",
        "id": 318114230,
        "sender_full_name": "Erika Su",
        "timestamp": 1672154219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> has marked this topic as resolved.</p>",
        "id": 318114263,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672154230
    }
]