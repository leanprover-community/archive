[
    {
        "content": "<p>Hello everyone,<br>\nIn the following code when trying to rewrite using <code>rank_eq_count_non_zero_eigs</code> I get a very wierd error. The error is </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic 'rewrite' failed, did not find instance of the pattern in the target expression\n  rank (Aᴴ ⬝ A)\n</code></pre></div>\n<p>While the goal  is <br>\n<code>rank (Aᴴ ⬝ A) = Fintype.card { i // IsHermitian.eigenvalues (_ : IsHermitian (Aᴴ ⬝ A)) i ≠ 0 }</code></p>\n<p>Note the case with the Complex Matrix <code>(A: Matrix m n ℂ)</code> works, while the case of <code>(A: Matrix m n R</code> where <code>R: IsROrC</code> does not! Any thoughts appreciated!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rank_eq_count_non_zero_eigs</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">A.IsHermitian</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A.rank</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">hA.eigenvalues</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">ComplexOrder</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">GOOD_rank_eq_card_pos_eigs_conj_transpose_mul_self</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">PartialOrder</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">StarOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span>\n  <span class=\"n\">A.rank</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">Matrix.isHermitian_transpose_mul_self</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eigenvalues</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rank_conjTranspose_mul_self</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rank_eq_count_non_zero_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ⬝</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.isHermitian_transpose_mul_self</span> <span class=\"n\">A</span><span class=\"o\">)]</span> <span class=\"c1\">-- NO ERROR</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">BAD_rank_eq_card_pos_eigs_conj_transpose_mul_self</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">PartialOrder</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">StarOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"n\">A.rank</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">Matrix.isHermitian_transpose_mul_self</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eigenvalues</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rank_conjTranspose_mul_self</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rank_eq_count_non_zero_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ⬝</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.isHermitian_transpose_mul_self</span> <span class=\"n\">A</span><span class=\"o\">)]</span> <span class=\"c1\">--Error Here!!</span>\n</code></pre></div>",
        "id": 370748842,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1688039332
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">...</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rank_conjTranspose_mul_self</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">rank_eq_count_non_zero_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ⬝</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.isHermitian_transpose_mul_self</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- ⊢ StarOrderedRing.toStarRing = IsROrC.toStarRing</span>\n</code></pre></div>\n<p>So that's what's stopping the rewrite working: two star ring structures on R. And now you can look at how you've set things up, and indeed you have a hypothesis <code>IsROrC R</code> (which gives <code>R</code> a star ring structure) and <code>StarOrderedRing R</code> (which gives it another, perhaps different, one). I don't know enough about the typeclasses here to suggest a fix though.</p>",
        "id": 370757573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688040784
    },
    {
        "content": "<p>Thanks. I added the <code>StarOrderedRing</code> because  <code>rank_conjTranspose_mul_self</code> requires a <code>StarOrderedRing</code>? So what is the proper way to add StarOrderedRing here?</p>",
        "id": 370759322,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1688041101
    },
    {
        "content": "<p>Wierdly enough a rewrite the other way round works i.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">BAD_rank_eq_card_pos_eigs_conj_transpose_mul_self</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">PartialOrder</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">StarOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"n\">A.rank</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">Matrix.isHermitian_transpose_mul_self</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eigenvalues</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rank_conjTranspose_mul_self</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rank_eq_count_non_zero_eigs</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᴴ⬝</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.isHermitian_transpose_mul_self</span> <span class=\"n\">A</span><span class=\"o\">)]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The goal state before the <code>sorry</code> is <code>rank (Aᴴ ⬝ A) = rank (Aᴴ ⬝ A)</code> which should have been closed by <code>rfl</code> in the <code>rw </code>.  The doc for <code>rw</code> says:</p>\n<blockquote>\n<p>rw is like rewrite, but also tries to close the goal by \"cheap\" (reducible) rfl afterwards.</p>\n</blockquote>\n<p>Is this also related to the two Star Rings I placed or R?</p>",
        "id": 370759689,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1688041161
    },
    {
        "content": "<p>If <code>rfl</code> doesn't work then try <code>congr</code> or <code>congr'</code> or <code>convert rfl</code> -- tactics (not all of which might exist in Lean 4, but some will) which will just reduce the goals to precisely the parts which aren't rfl, and I conjecture that you'll be left with <code>⊢ StarOrderedRing.toStarRing = IsROrC.toStarRing</code> again (which is not provable because it's not true).</p>",
        "id": 370763500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688041874
    },
    {
        "content": "<p>So If I understand correctly, I cannot just add a <code>StarOrderedRing</code> instance on <code>IsROrC</code>, I need to bake it inside the <code>IsROrC</code> class. Looking at the <code>Complex.Basic</code> file there is a <code>partialOrder</code> definition. If I do something similar on IsROrC would that allow me to place a StarOrderedRing on IsROrC?</p>",
        "id": 370776138,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1688044106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/wierd.20rewrite.20fail/near/370763500\">said</a>:</p>\n<blockquote>\n<p>If <code>rfl</code> doesn't work then try <code>congr</code> or <code>congr'</code> or <code>convert rfl</code> -- tactics (not all of which might exist in Lean 4, but some will) which will just reduce the goals to precisely the parts which aren't rfl, and I conjecture that you'll be left with <code>⊢ StarOrderedRing.toStarRing = IsROrC.toStarRing</code> again (which is not provable because it's not true).</p>\n</blockquote>\n<p>And just for future reference what you said is correct. <code>convert rfl</code> shows that I am now required to prove <code>IsROrC.toStarRing = StarOrderedRing.toStarRing</code></p>",
        "id": 370776532,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1688044178
    }
]