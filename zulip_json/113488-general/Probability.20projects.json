[
    {
        "content": "<p>There will be a Lean for the Curious Mathematician event next week in Düsseldorf with several days of tutorial and a colloquium at the end. I am giving a talk in the colloquium, which will be about probability in mathlib.<br>\nIn the last part of the talk, I want to highlight formalization projects in probability that could now be done, given what is already in mathlib. I want to focus on small to medium scale projects that could interest people that are relatively new to Lean and want to start with something cool related to probability. I have a short list of topics but the best way to have diverse and interesting ideas is to ask everybody, hence this message.</p>\n<p>Do you have ideas about fomalization goals related to probability that could interest new contributors? Also, would you like me to tell people to contact you about that project, for you to work with them or guide them?</p>",
        "id": 388480885,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1693558268
    },
    {
        "content": "<p>There are many low hanging fruits in probabilistic combinatorics now that the basic definitions are done in LeanCamCombi. My code is still in Lean 3, but I have acquired mathport output and can get it ready for next week. Feel free to tell people to contact me!</p>",
        "id": 388481783,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693558624
    },
    {
        "content": "<p>Thanks! Do you have a concrete example of one of those low hanging fruits?</p>",
        "id": 388483695,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1693559368
    },
    {
        "content": "<p>What happened to the hedetniemi project? Could that be done now or is it old news?</p>",
        "id": 388489076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693561421
    },
    {
        "content": "<p>How about setting up the theory for white noise. It shouldn't be too difficult and it will finally let Kevin say that we have the Gaussian.</p>",
        "id": 388490657,
        "sender_full_name": "Jason KY.",
        "timestamp": 1693562027
    },
    {
        "content": "<p>Hedetniemi is too hard. Its prerequisite (there are graphs of arbitrarily large chromatic number and girth)  is definitely doable although I'm not sure it is new contributor-doable.</p>",
        "id": 388491290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693562266
    },
    {
        "content": "<p>Oh yes let me +1 the Gaussian -- Martin Hairer told me years ago that he would expect to see that in any formalised mathematics library. <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> you have a sketch plan for the formalisation, right?</p>",
        "id": 388491510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693562355
    },
    {
        "content": "<p>I do not. I had a sketch for the formalization of the Gaussian in Rn which was formalized by <span class=\"user-mention\" data-user-id=\"522728\">@Joy Hu</span>  but I don't think thats the correct generality that Martin was talking about</p>",
        "id": 388492204,
        "sender_full_name": "Jason KY.",
        "timestamp": 1693562610
    },
    {
        "content": "<p>Okay, there's a stupid problem for the chromatic-girth theorem: We have no definition of girth! Let me fix that quickly.</p>",
        "id": 388492219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693562619
    },
    {
        "content": "<p>Something like <a href=\"https://en.wikipedia.org/wiki/Abstract_Wiener_space\">https://en.wikipedia.org/wiki/Abstract_Wiener_space</a> should be closer to what Martin would call \"the Gaussian\", and it might be doable.</p>",
        "id": 388502886,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1693567208
    },
    {
        "content": "<p>Here are some ideas off the top of my head</p>\n<ul>\n<li>look for important theorems in other prob formalizations like <a href=\"https://github.com/IBM/FormalML\">https://github.com/IBM/FormalML</a></li>\n<li>go through an undergraduate probably book and look for topics there to formalize</li>\n<li>same but a statistics textbook</li>\n<li>overall probability is about applications both outside pure math, but also inside pure math like in probabilistic combinatorics.  One really wants to be able to use this probability theory library for all sorts of basic examples.  The notation of prob theory is really designed to make it easy to do prob theory quickly and abstract away all the measure theory details.  Can mathlib’s library be used with that level of easy.  To stress test it just try to formalize lots of basic examples of probabilistic arguments.  For example:<ul>\n<li>the first proof in probabilistic graph theory is often that $R(k,k) &gt; 2^{k/2}$ (see <a href=\"https://www.math.cmu.edu/~af1p/Teaching/Combinatorics/Slides/Ramsey.pdf\">here</a></li>\n<li>basic problems about percolation numbers on infinite random grid graphs</li>\n<li>really just opening up a graduate or undergraduate probability text book and looking at the exercises (not the ones about measure theory, but the ones about problem solving)</li>\n</ul>\n</li>\n</ul>",
        "id": 388522944,
        "sender_full_name": "Jason Rute",
        "timestamp": 1693574860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> has already done your first bullet point.</p>",
        "id": 388534121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693578319
    },
    {
        "content": "<p>We have now an open PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/5297\">#5297</a> for the Schwartz-Zippel lemma which is sorry-free. Part of my goal in writing this was to do something along the lines of verifying <a href=\"#narrow/stream/113488-general/topic/Verifying.20a.20deterministic.20algorithm\">probabilistic</a> <a href=\"#narrow/stream/113488-general/topic/proof.20by.20example\">proofs</a>.</p>",
        "id": 388587382,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693596673
    },
    {
        "content": "<p>I think this goal doesn't exactly fit into the framework of \"specific formalizations of mathematical theorems or definitions that can now be done due to new mathlib definitions\" but  is more along the lines of \"New FM/PL techniques that could be developed, but for which we were lacking the ability to do a proof-of-concept without these mathlib theorems\".</p>",
        "id": 388588312,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693597117
    },
    {
        "content": "<p>I think Kevin's suggestion <a href=\"#narrow/stream/113488-general/topic/Verifying.20a.20deterministic.20algorithm/near/192794048\">here</a> is pretty interesting. You could call it a \"derandomizing axiom of choice\" or something.</p>",
        "id": 388589504,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693597741
    },
    {
        "content": "<p>Oh yeah, it would be a cool project to prove that some primality test worked \"with probability at least 1/2\" or whatever; one could formalise this by saying that if we tried it with all possibilities for the \"random\" input, at least half would fail if the number isn't prime.</p>",
        "id": 388593903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693599819
    },
    {
        "content": "<p>Nice!</p>\n<p>Let me add some ideas (various levels of difficulty, but I believe most of these are still not unreasonable given the current state of Mathlib).</p>\n<p>Ideas involving somewhat conrete calculations:</p>\n<ul>\n<li>Construct standard distributions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> (uniform distribution on an interval, exponential distribution, one-dimensional gaussian, Cauchy-distribution, gamma-distributions, ...) and provide results about their cdf, density (Radon-Nikodym derivative), expected value, variance, higher moments, cumulants, continuity with respect to parameters (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6551\">#6551</a> provides a cheap route to cases where parameters amount to scaling and shift or other applications of continuous transfromations), Laplace transform or characteristic function, ...<ul>\n<li>(Some steps involve explicit integrations of real functions, which makes these probably rather difficult projects!)</li>\n</ul>\n</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Tippett%E2%80%93Gnedenko_theorem\">Univariate extreme value statistics</a> for i.i.d. random variables (i.e., somewhat explicit calculations with cdfs of maxima/minima of i.i.d. random variables, but nothing as bad as actually explicit integrations; Gumbel, Fréchet, and Weibull limits).<ul>\n<li>(To connect the cdf convergence to convergence in distribution will be easy once the last implication of portmanteau lands.)</li>\n</ul>\n</li>\n</ul>\n<p>Less calculation-heavy ideas:</p>\n<ul>\n<li>Construct the <a href=\"https://en.wikipedia.org/wiki/Total_variation_distance_of_probability_measures\">total variation distance</a> between probability measures on a given space (hopefully an easy project).</li>\n<li>Construct the <a href=\"https://en.wikipedia.org/wiki/L%C3%A9vy%E2%80%93Prokhorov_metric\">Lévy-Prokhorov metric</a> on probability measures on a metric space (this part should be very doable!). Prove that it metrizes the topology of weak convergence if the underlying space is Polish (this should be doable once the last implication of portmanteau lands).</li>\n<li>Construct arbitrary products of probability measures (not just finite products). I haven't checked the status of the existing extension theorems for measures in Mathlib, so it is unclear to me how much is missing.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Prokhorov%27s_theorem\">Prokhorov's theorem</a>, Lévy inversion (of \"Fourier transform\"), and then the Central Limit Theorem. There is a cheap way to get the Prokhorov's theorem on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> (a.k.a. <a href=\"https://en.wikipedia.org/wiki/Helly%27s_selection_theorem\">Helly's selection theorem</a>) with cdfs, and this suffices for the CLT, but my personal preference is to do Prokhorov via Riesz representation theorem (PRs planned but not properly started yet) in good generality right away.</li>\n<li>Some applications of Kolmogorov's 0-1-law <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.measure_zero_or_one_of_measurableSet_limsup_atTop#doc\">docs#ProbabilityTheory.measure_zero_or_one_of_measurableSet_limsup_atTop</a> (e.g., deterministic radius of convergence for random power series with independent coefficients, ...)</li>\n</ul>",
        "id": 388605350,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1693605520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113488-general/topic/Probability.20projects/near/388502886\">said</a>:</p>\n<blockquote>\n<p>Something like <a href=\"https://en.wikipedia.org/wiki/Abstract_Wiener_space\">https://en.wikipedia.org/wiki/Abstract_Wiener_space</a> should be closer to what Martin would call \"the Gaussian\", and it might be doable.</p>\n</blockquote>\n<p>Yes! Gaussians in a good generality would be absolutely lovely, and probably rather doable! The Wikipedia link you give is definitely in the right spirit, but what are the good references? I can mainly think of Svante Jansson's <a href=\"https://www.cambridge.org/core/books/gaussian-hilbert-spaces/658C87D5A0E7FB440FC34D82B08167FC\">Gaussian Hilbert Spaces</a>. (But is this still too specific for the Mathlib generality?)</p>",
        "id": 388606156,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1693606058
    },
    {
        "content": "<p>Thanks everyone for all the ideas! </p>\n<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> , the directions you highlight overlap a lot with the ones I noted. In particular it would be good to have all the standard distributions and we need to flesh out our tools to describe them. Right now we have for example definitions for cdf and pdf but not many of their properties or links between them. </p>\n<p>About the Gaussian distribution: I would love to have it in a very general way and that sounds like a cool project. I also think that having a Gaussian on R^n now might be better than waiting for the full generality. It looks like some people have had that on branches or personal repos for a while and it would be great to see a PR.<br>\nWith <span class=\"user-mention\" data-user-id=\"572064\">@Peter Pfaffelhuber</span>  we have finished a formalization of Kolmogorov's extension theorem (PRs coming after LftCM) and a natural follow up to that could be to define a Brownian motion. I am not sure one of us will do it: other interesting projects may monopolize our attention instead. To define the Brownian motion, two small and very doable projects are building a family of Gaussians indexed on finsets of the reals on one hand, and proving the Kolmogorov continuity theorem on the other hand.</p>\n<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> , thanks for the ideas and for pointing out FormalML. I know about that repository (and exchanged a pair of emails with the authors at some point) and it indeed contains interesting results. The authors also have an interesting approach which is quite different from ours: they seem to build the tools they need in just the right generality to get to their goals and not more, while our probability theory folder contains a lot of code to do the foundations in great generality (which means slower progress towards applications).<br>\nThere are also a few entries in Isabelle's AFP about Markov decision processes which can inspire mathlib projects.</p>\n<p>Something else I saw recently in other theorem provers is <a href=\"https://www.isa-afp.org/entries/Executable_Randomized_Algorithms.html\">https://www.isa-afp.org/entries/Executable_Randomized_Algorithms.html</a>, in which the authors build executable algorithms that consume coin flips as a source of randomness and build links between the algorithms and the probability mass functions that describe their outcomes. Related to that, I would love to be able to prove things about algorithms that interact with a random environment and also actually run them in experiments. That sounds however more long term, especially if we want to deal with continuous random variables and the related issues of floats approximating reals etc.</p>\n<p>About probabilistic algorithms like Miller-Rabin, I feel like I need to read all those threads to understand more what we could want to prove about them.</p>\n<p>The talk is on Thursday, so if someone thinks about something else (especially something neatly packaged like \"prove theorem X!\") please let me know.<br>\nAfter the talk I'll gather all those in a document somewhere.</p>",
        "id": 388687647,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1693657444
    },
    {
        "content": "<p>There are certainly many things to be done. Let me add some opinions and ideas:</p>\n<ul>\n<li>In my opinion, many projects involving concrete probability distributions will benefit from an implementation of characteristic functions, which is still lacking. As an example, not all Gaussian distributions on $\\mathbb R^n$ have a density, but all have a (unique) characteristic function. In addition, computing moments in various cases is much simpler once the characteristic function is available. (Other examples where characteristic functions may be advantageous include the proof of two rvs to be identically distributed, e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>∼</mo><mn>1</mn><mo>−</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U \\sim 1-U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>∼</mo><mi>U</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U\\sim U([0,1])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mopen\">([</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">])</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>U</mi><mo>∼</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">-\\log U \\sim \\exp(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, or the thinning of a binomal/Poisson distribution is again binomial/Poisson, or the introduction of infinitely divisible distributions.)</li>\n<li>In geometric probability, it is an exercise to prove <a href=\"https://en.wikipedia.org/wiki/Buffon%27s_needle_problem\">Buffons needle problem</a>, which is among the <a href=\"https://www.cs.ru.nl/~freek/100/\">list of 100 theorems</a> (if one cares about lists). </li>\n<li>With the formalization of the Kolmogorov Extension Theorem, it is also possible to define a probability space with (countably) infinite iid rvs. This allows to state and prove <a href=\"https://en.wikipedia.org/wiki/Kolmogorov%27s_zero%E2%80%93one_law\">Kolmogorov's 0-1-law</a>, or to define e.g. percolation or a simple random walk. For percolation, it could be a project to define the model and the event \"there is an infinite cluster\", for the random walk, the <a href=\"https://en.wikipedia.org/wiki/Law_of_the_iterated_logarithm\">law of iterated logarithm</a> could be achieveable. </li>\n<li>I really like the idea to prove that certain algorithms (which use coin flips, or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U([0,1])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mopen\">([</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">])</span></span></span></span>-rvs) produce an output with a certain distribution. This is actually often a problem in applications (mathematical biology in my case).</li>\n</ul>",
        "id": 388726120,
        "sender_full_name": "Peter Pfaffelhuber",
        "timestamp": 1693686174
    },
    {
        "content": "<p>Good point about the characteristic function. It's also an interesting project because it could use the relatively new Fourier transform files in mathlib.</p>\n<p>We already have Kolmogorov's 0-1 law. See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.measure_zero_or_one_of_measurableSet_limsup_atTop#doc\">docs#ProbabilityTheory.measure_zero_or_one_of_measurableSet_limsup_atTop</a> . But we don't have any application of that theorem.</p>",
        "id": 388790645,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1693724903
    },
    {
        "content": "<p>Interesting, I was not aware of the formalized Kolmogorov 0-1-law.  Then, a project could be: (i) define percolation of any infinite graph (i.e. for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, say any edge is open independently probability <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>), and (ii) prove that the probability that there exists an infinite cluster is either 0 or 1.</p>",
        "id": 389600763,
        "sender_full_name": "Peter Pfaffelhuber",
        "timestamp": 1694075394
    },
    {
        "content": "<p>It would be excellent to have some percolation theory formalized in Lean, and I would be very curious about how much of the basic facts are actually doable - there is so much of \"one can clearly see\" especially for topological statements that it could actually be very nontrivial.</p>",
        "id": 389625400,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1694083390
    },
    {
        "content": "<p>Let me add that monotonicity in precolation would be nice to formalize. For this, you usually use a coupling, and couplings are in general tedious to construct and often come with hand-waving arguments. The one for percolation (for different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>), however, seems doable. <br>\nAnother point to make, e.g. on percolation is: Usually, you write something like: Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G=(V,E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> be a connected graph and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mi>e</mi></msub><msub><mo stretchy=\"false\">)</mo><mrow><mi>t</mi><mo>∈</mo><mi>E</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">X = (X_e)_{t \\in E}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1774em;\"><span></span></span></span></span></span></span></span></span></span> bond-percolation on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> with parameter <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>... Here, you are talking more about the distribution of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> than on a concrete probability space. In Lean, you always have to construct a probability space first, or is there a way around that?</p>",
        "id": 389647327,
        "sender_full_name": "Peter Pfaffelhuber",
        "timestamp": 1694090019
    },
    {
        "content": "<p>I agree that these would be very nice!</p>\n<p>But for the percolation coupling, one still needs an infinite product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨂</mo><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow></msub><mrow><mi mathvariant=\"normal\">U</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bigotimes_{e \\in E} \\mathrm{Uniform}([0,1])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Uniform</span></span><span class=\"mopen\">([</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">])</span></span></span></span> of probability measures. This is one reason I suggested constructing infinite product measures <a href=\"#narrow/stream/113488-general/topic/Probability.20projects/near/388605350\">above</a>. Of course there are workarounds for this particular case and for countable products of Borel probability measures on Polish spaces or whatnot, but I think Mathlib should have the general product of any probability measures.</p>\n<p>Another place where the products are needed is in constructions of stochastic processes (even discrete time finite state space Markov chains, let alone more general ones).</p>\n<p>(Of course often one can get away assuming that something follows a product measure. In Lean just as in math, you can <em>assume</em> that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mi>e</mi></msub><msub><mo stretchy=\"false\">)</mo><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">(X_e)_{e \\in E}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1774em;\"><span></span></span></span></span></span></span></span></span></span> is a collection of independent random variables --- this we can readily spell with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.iIndepFun#doc\">docs#ProbabilityTheory.iIndepFun</a> . This is enough for, e.g., applying the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> law to the event of the existence of an infinite percolation cluster. But at times --- such as for proving monotonicity for percolation --- one actually needs to <em>construct</em> the product measure.)</p>",
        "id": 389664632,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694094569
    },
    {
        "content": "<p>Another related nice small(ish?) probability project is <a href=\"https://en.wikipedia.org/wiki/FKG_inequality\">FKG-inequality</a>, or probably more appropriately the <a href=\"https://en.wikipedia.org/wiki/Ahlswede%E2%80%93Daykin_inequality\">Ahlswede-Daykin inequality</a>. I think these would be rather doable (right away) and useful \"probability\" projects. (Although the formalization can essentially avoid any use of probability theory...)</p>",
        "id": 389666021,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694094876
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> has done this</p>",
        "id": 389687309,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694099657
    },
    {
        "content": "<p>FKG is not done yet but AD is, although not in Lean 4.</p>",
        "id": 389692585,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694100759
    },
    {
        "content": "<p>Oh, nice! Do you have a link to a repo and do you plan to PR it in Mathlib4? I would really love to see it (+Holley+FKG) in Mathlib.</p>",
        "id": 389714171,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694106759
    },
    {
        "content": "<p>Let me dig it up!</p>",
        "id": 389719469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694108507
    },
    {
        "content": "<p>Btw this is why we have things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sups#doc\">docs#Finset.sups</a></p>",
        "id": 389719572,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694108532
    },
    {
        "content": "<p>Great! Then in terms of percolation, the existence of the critical point should be easy, and the fact that it is positive on a graph of bounded degree should not be too difficult. Proving $p_c&lt;1$ on the square lattice on the other hand, would already be a good test of the probability and graph parts of mathlib and how they interact.</p>",
        "id": 389742196,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1694115305
    },
    {
        "content": "<p>I absolutely love this prospect. But in addition to Kolmogorov's 0-1 law, the existence of the critical point still needs monotonicity, right? Do you see a satisfactory path to monotonicity without <em>constructing</em> the general products of probability measures? (Of course it is just another extension theorem, and many have been done already, so maybe not prohibitively difficult but...)</p>\n<p>I fully agree that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>c</mi></msub><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p_c(\\Z^2) &lt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is going to be an interesting new kind of test for Mathlib!</p>",
        "id": 389767098,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694125044
    },
    {
        "content": "<p>I think the existence of the critical point is a consequence of Bollobas-Thomason? Not sure though.</p>",
        "id": 389815973,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694153095
    },
    {
        "content": "<p>The definition of the critical point directly in infinite volume is a direct consequence of monotonicity. But indeed it would be great to have some general theory on sharp thresholds as well!</p>",
        "id": 389832451,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1694160849
    },
    {
        "content": "<p>This is part of the stuff I'm formalising for LeanCamCombi since it appeared in the Extremal &amp; Probabilistic Combinatorics course this year.</p>",
        "id": 389832969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694161061
    },
    {
        "content": "<p>Are you doing BKKL and OSSS and all that ?</p>",
        "id": 389833169,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1694161134
    },
    {
        "content": "<p>What are those?</p>",
        "id": 389833256,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694161171
    },
    {
        "content": "<p>Criteria on the existence of sharp thresholds in terms of influences or in terms of stochastic algorithms. Many \"modern\" proofs in perxolation are based on those, e.g. recent work by Duminil-Copin et al</p>",
        "id": 389833536,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1694161273
    },
    {
        "content": "<p>I assume the first one is BKKKL (i.e. <a href=\"https://link.springer.com/article/10.1007/bf02808010\">https://link.springer.com/article/10.1007/bf02808010</a>)</p>",
        "id": 389835438,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1694162014
    },
    {
        "content": "<p>Never heard of those! I'm approaching the subject from the (very discrete) combinatorics side of things.</p>",
        "id": 389835633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694162098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/Probability.20projects/near/389835438\">said</a>:</p>\n<blockquote>\n<p>I assume the first one is BKKKL (i.e. <a href=\"https://link.springer.com/article/10.1007/bf02808010\">https://link.springer.com/article/10.1007/bf02808010</a>)</p>\n</blockquote>\n<p>Ooops - yes, either this one, or KKL <a href=\"https://ieeexplore.ieee.org/document/21923\">https://ieeexplore.ieee.org/document/21923</a></p>",
        "id": 389913439,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1694190476
    },
    {
        "content": "<p>The <a href=\"https://lftcm2023.github.io/colloquium/index.html\">talk</a> is up now. I definitely like the idea of multi-armed bandits as a formalization target, there are indeed a few achievable basic results in that field that would be broadly useful.</p>",
        "id": 390064651,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694293648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/113488-general/topic/Probability.20projects/near/389714171\">said</a>:</p>\n<blockquote>\n<p>Oh, nice! Do you have a link to a repo and do you plan to PR it in Mathlib4? I would really love to see it (+Holley+FKG) in Mathlib.</p>\n</blockquote>\n<p>See <a href=\"#narrow/stream/116395-maths/topic/Discrete.20correlation.20inequalities\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Discrete.20correlation.20inequalities</a> !</p>",
        "id": 393106533,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674255
    },
    {
        "content": "<p>Is there any plan to formalise the Kolmogorov extension theorem?</p>",
        "id": 395387932,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696665529
    },
    {
        "content": "<p>Peter Pfaffelhuber and I have formalized that theorem over the summer. We only need to find time to PR it. I may start with a first piece today.</p>",
        "id": 395389909,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1696666599
    },
    {
        "content": "<p>Is the code anywhere public?</p>",
        "id": 395395113,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696670531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/113488-general/topic/Probability.20projects/near/389664632\">said</a>:</p>\n<blockquote>\n<p>I agree that these would be very nice!</p>\n<p>But for the percolation coupling, one still needs an infinite product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨂</mo><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow></msub><mrow><mi mathvariant=\"normal\">U</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bigotimes_{e \\in E} \\mathrm{Uniform}([0,1])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Uniform</span></span><span class=\"mopen\">([</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">])</span></span></span></span> of probability measures. This is one reason I suggested constructing infinite product measures <a href=\"#narrow/stream/113488-general/topic/Probability.20projects/near/388605350\">above</a>. Of course there are workarounds for this particular case and for countable products of Borel probability measures on Polish spaces or whatnot, but I think Mathlib should have the general product of any probability measures.</p>\n</blockquote>\n<p>Where can I find countable products of Borel probability measures on Polish spaces?<br>\nI assume the general infinite product measure construction is still missing<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_def\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_def</a></p>",
        "id": 403499338,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1700618826
    },
    {
        "content": "<p>I don't think they exists. In the quoted comment I intended to say that there would (in principle) be unsatisfactory ways (\"workarounds\") to implement products in lesser generality (something like countable products with nice enough spaces). But in my opinion Mathlib should go directly for the full generality.</p>\n<p>A workaround for countable product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is to map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"double-struck\">N</mi></msup></mrow><annotation encoding=\"application/x-tex\">[0,1) \\to [0,1)^\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0952em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8452em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span></span> by considering binary representations of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\in [0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> and then out of the sequence of bits get a sequence of sequences of bits by an enumeration <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N \\to \\N \\times \\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>. The push-forward of the Lebesgue measure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is then a measure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"double-struck\">N</mi></msup></mrow><annotation encoding=\"application/x-tex\">[0,1)^\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0952em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8452em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span></span> which is a countable product of Lebesgue measures on the factors. (You can then get countable products of probability measures on other nice spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"fraktur\">X</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{X}_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8414em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> by combining this trick with pushing forward the Lebesgue measures on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>'s further by measurable maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mi mathvariant=\"fraktur\">X</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">[0,1)\\to\\mathfrak{X}_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8414em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.) </p>\n<p>But to summarize, I don't think anything beyond finite products of probability measures exists currently! And I still don't think Mathlib should settle for anything less than arbitrary products of probability spaces.</p>",
        "id": 403677790,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700694177
    },
    {
        "content": "<p>Note that for non-probability measures, the finite product case is the most general reasonable, so <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.pi_def#doc\">docs#MeasureTheory.Measure.pi_def</a> is good generality.</p>",
        "id": 403677987,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700694283
    },
    {
        "content": "<p>(And to be clear, for the percolation coupling mentioned, the specific trick of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"double-struck\">N</mi></msup></mrow><annotation encoding=\"application/x-tex\">[0,1)^\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0952em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8452em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span></span> is immediately sufficient: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨂</mo><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow></msub><mrow><mi mathvariant=\"normal\">U</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">f</mi></mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bigotimes_{e \\in E} \\mathrm{Unif} ([0,1])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">Unif</span></span><span class=\"mopen\">([</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">])</span></span></span></span> is of this form, since the edge set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is countable.)</p>",
        "id": 403678550,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700694612
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> I am mostly wondering if fair coin measure on <code>ℕ → Bool</code> has already been constructed.</p>",
        "id": 404154392,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1700944135
    }
]