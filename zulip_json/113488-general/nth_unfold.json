[
    {
        "content": "<p>I want to know is there a tactic like \"nth_unfold\". If a function appears in many places of a equation, I want to unfold it at a special place, what can I do?<br>\nI think a good way is using \"nth_rw\", but I do not know how to get the definition equation of a function.<br>\nFor example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">id₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">id₁</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">id₁</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>how to prove the example directly?</p>",
        "id": 376760406,
        "sender_full_name": "loooong",
        "timestamp": 1689792089
    },
    {
        "content": "<p>Your code doesn't compile for me as it stands. Can you please edit your post to make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 376760864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689792200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627075\">loooong</span> <a href=\"#narrow/stream/113488-general/topic/nth_unfold/near/376760406\">said</a>:</p>\n<blockquote>\n<p>I want to know is there a tactic like \"nth_unfold\". If a function appears in many places of a equation, I want to unfold it at a special place, what can I do?<br>\nI think a good way is using \"nth_rw\", but I do not know how to get the definition equation of a function.<br>\nFor example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">id₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">id₁</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">id₁</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>how to prove the example directly?</p>\n</blockquote>\n<p>you can use the <code>conv</code> tactic to modify/unfold particular parts of your code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">id₁</span>\n</code></pre></div>\n<p>Your particular example can also be proved by trivial induction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 376761110,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689792251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/nth_unfold/near/376760864\">said</a>:</p>\n<blockquote>\n<p>Your code doesn't compile for me as it stands. Can you please edit your post to make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>\n</blockquote>\n<p>I think import something from Mathlib4 is okay to check this code. Since the below chat suggests on using <code>conv</code> mode or induction can both work as expected so I will not make the mwe. Thank you anyway!</p>",
        "id": 376762166,
        "sender_full_name": "loooong",
        "timestamp": 1689792532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/113488-general/topic/nth_unfold/near/376761110\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"627075\">loooong</span> <a href=\"#narrow/stream/113488-general/topic/nth_unfold/near/376760406\">said</a>:</p>\n<blockquote>\n<p>I want to know is there a tactic like \"nth_unfold\". If a function appears in many places of a equation, I want to unfold it at a special place, what can I do?<br>\nI think a good way is using \"nth_rw\", but I do not know how to get the definition equation of a function.<br>\nFor example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">id₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">id₁</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">id₁</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>how to prove the example directly?</p>\n</blockquote>\n<p>you can use the <code>conv</code> tactic to modify/unfold particular parts of your code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">id₁</span>\n</code></pre></div>\n<p>Your particular example can also be proved by trivial induction:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! The <code>conv</code> mode can modify goal in a delicate style, which is what I want to find.<br>\nI also want to know is there a name for the definition equation of a function?</p>",
        "id": 376763002,
        "sender_full_name": "loooong",
        "timestamp": 1689792750
    },
    {
        "content": "<p>I'm also quite very surprised that this cannot be simply proven by <code>rfl</code>...</p>",
        "id": 376763539,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689792897
    },
    {
        "content": "<p>I don't know if there's a specific name for this, the fact that id₁ reduces to its definition is referred to as delta-reduction, if that's any help. I also believe Lean automatically generates these sorts of theorems, but I'm not capable of finding where to find them now</p>",
        "id": 376764591,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689793170
    },
    {
        "content": "<p>looking more into it, lean elaborates the definition of  <code>id₁ n</code> to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Nat.rec</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n_ih.1</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">}</span> <span class=\"o\">})</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>whereas the right-hand side is elaborated to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.rec</span> <span class=\"mi\">0</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Nat.succ</span>\n          <span class=\"o\">(</span><span class=\"n\">Nat.rec</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">}</span>\n              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n_ih.1</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">}</span> <span class=\"o\">})</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"n\">n</span>\n</code></pre></div>\n<p>The definitional equality breaks because the two terms are not elaborated the same way. Does anyone know if this an intended behaviour ?</p>",
        "id": 376769083,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689794327
    },
    {
        "content": "<p>For context, this also can't be proven by reflexivity in lean 3 and, more surprisingly, in coq.</p>",
        "id": 376769671,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689794477
    },
    {
        "content": "<p>If it were a judgemental equality then it can indefinitely unfold and there's a normalization problem iirc</p>",
        "id": 377743866,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1690092796
    }
]