[
    {
        "content": "<p>I am looking to parse strings representing formulas in first order logic into an inductive type. I found a couple of libraries related to parsing, <code>Lean.Data.Parsec</code> and <code>Lean.Parser.Basic</code>. It seems that the latter may be designed for the syntax of Lean itself and therefore may not be what I am looking for? Is there information on how to use <code>Lean.Data.Parsec</code>? Are there others? It would be nice to eventually have a proof that the parsing is unique, that is, if two strings parse to the same instance of the inductive type, then the strings are identical, so I don't know if that means that I should try to write something custom? Is there a specific algorithm that would give the best running time for this grammar? Any advice is welcome.</p>\n<p>This is the grammar:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>space = ' '\nleft_paren = '('\nright_paren = ')'\nname = ('a' | ... | 'z' | 'A' | ... | 'Z' | '0' | ... | '9' | '_' | ''')+\nformula_ = pred | eq | true | not | imp | forall\npred = name (left_paren name (space name)* right_paren)?\neq = left_paren name space 'eq' space name right_paren\ntrue = 'true'\nnot = left_paren 'not' space formula right_paren\nimp = left_paren formula space 'imp' space formula right_paren\nforall = left_paren 'forall' space name space formula right_paren\n</code></pre></div>\n<p>This is the inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 385826707,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692336851
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span>! Probably the easiest way to use those libraries and parse into an inductive type like that is to use them in Lean directly as syntax extensions and macros. A great resource there is the <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">metaprogramming book</a>. You can also call the parsing functions directly but I don't know that that's very documented, although the code is fairly readable, so you'd be more on your own there. Also, <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> also has a tool that would allow you to do that from Lean syntax extensions:  You can see <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20Partax.2C.20the.20Parser.20Compiler\">this thread</a>. I haven't played around with it yet so I can't comment how easy that would be (I really want to find some time soon to do so!) but it might be worth a try for your use case!</p>",
        "id": 385844248,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1692344115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> Thank you!</p>",
        "id": 385951485,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692376117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> / <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span>  Unfortunately, I am not sure my tool is sufficiently customizable at the moment to generate an inductive from Lean syntax. However, I have been looking for more potential use cases to adapt the tool to, so I would be happy to take a look at supporting this one! I can probably spend some of this weekend and  this coming Monday trying this out.</p>",
        "id": 385952111,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692376410
    },
    {
        "content": "<p>Thank you. I'm not certain I fully understand everything mentioned here, so I will expand the details of my use case, and ask if it still fits. I am working on writing a simple proof checker in Lean that will read in text files containing formulas in this syntax as part of a list of proof steps. The hope is to compile the Lean code and run it as a standalone executable.</p>",
        "id": 385953812,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692377213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> One factor in what is the best solution here is how closely you wish to follow this grammar. For instance, does <code>name</code> need to follow that pattern or would a Lean <code>ident</code> be sufficient? if you are willing, to adjust the grammar a little, it could be easily set up as a Lean DSL. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span><span class=\"bp\">+</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" eq \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"true\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"not \"</span> <span class=\"n\">formula</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">formula</span> <span class=\"s2\">\" imp \"</span> <span class=\"n\">formula</span>  <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"forall \"</span> <span class=\"n\">ident</span> <span class=\"n\">formula</span>  <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n</code></pre></div>",
        "id": 385954301,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692377408
    },
    {
        "content": "<p>Sorry, posted that before reading your additional context.</p>",
        "id": 385954429,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692377483
    },
    {
        "content": "<p>In that case, a grammar like the one above plus Partax should be able to help.</p>",
        "id": 385954481,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692377512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> <del>Are you planning to support Windows with your standalone executable? If so, you will need a fix in Lean, because currently Lean executable do run outside a MSYS2 environment on Windows.</del> My apologies, I confused a Lean built from the source with the release Lean.</p>",
        "id": 385955222,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692377794
    },
    {
        "content": "<p>No, I don't think so, at least I'm not worried about it at this point.</p>",
        "id": 385955625,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692377956
    },
    {
        "content": "<p>I am guessing that my <code>name</code> grammar is probably a subset of a Lean <code>ident</code>?</p>",
        "id": 385955805,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692378019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Kayla Thomas</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20strings.20into.20inductive.20types/near/385955805\">said</a>:</p>\n<blockquote>\n<p>I am guessing that my <code>name</code> grammar is probably a subset of a Lean <code>ident</code>?</p>\n</blockquote>\n<p>not really, for example <code>0_1</code> would be a <code>name</code> in your grammar above, and it's not a Lean <code>ident</code> (but maybe you don't want it to be either)?</p>",
        "id": 385956019,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1692378120
    },
    {
        "content": "<p>I would be alright with disallowing it.</p>",
        "id": 385956153,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692378169
    },
    {
        "content": "<p>for what it's worth, I at least would find that use case very useful <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>! I probably have some time to look into it next week as well, would be happy to do so</p>",
        "id": 385956242,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1692378205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Kayla Thomas</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20strings.20into.20inductive.20types/near/385955625\">said</a>:</p>\n<blockquote>\n<p>No, I don't think so, at least I'm not worried about it at this point.</p>\n</blockquote>\n<p>In that case, the second question is how much do you can about whitespace? You mentioned that you want the parsing to be unique. So I guess you probably want to be strict about that?</p>",
        "id": 385956598,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692378347
    },
    {
        "content": "<p>I am on the fence about that. If it is not too difficult to have the option of being strict about white space, that would be ideal maybe.</p>",
        "id": 385957278,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692378641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  Does being strict about the amount of whitespace make it harder? Where does it break down? Does the Lean syntax not support that?</p>",
        "id": 386043019,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692419787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> Lean does support it, it just requires more annotations. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"(\"</span> <span class=\"n\">many1WsIdent</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"n\">ident</span> <span class=\"n\">ws</span>  <span class=\"s2\">\" eq \"</span> <span class=\"n\">ws</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"true\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"not \"</span> <span class=\"n\">ws</span> <span class=\"n\">formula</span> <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"n\">formula</span> <span class=\"n\">ws</span> <span class=\"s2\">\" imp \"</span> <span class=\"n\">ws</span> <span class=\"n\">formula</span> <span class=\"n\">noWs</span>  <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"forall \"</span> <span class=\"n\">ws</span> <span class=\"n\">ident</span> <span class=\"n\">ws</span> <span class=\"n\">formula</span>  <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n</code></pre></div>\n<p>where <code>many1WsIdent</code> is a custom parser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Extra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">many1Ws</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">sepBy1</span> <span class=\"n\">p</span> <span class=\"s2\">\" \"</span> <span class=\"n\">checkWsBefore</span>\n<span class=\"kd\">def</span> <span class=\"n\">many1WsIdent</span> <span class=\"o\">:=</span> <span class=\"n\">many1Ws</span> <span class=\"n\">Lean.Parser.ident</span>\n</code></pre></div>",
        "id": 386137788,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692472526
    },
    {
        "content": "<p>Cool. Is there a \"one or more\" option? That would be preferable in place of the <code>many1Space(ident)</code>.</p>",
        "id": 386138111,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692472872
    },
    {
        "content": "<p>Or is that what that is?</p>",
        "id": 386138223,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692472952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> I updated to explain that that is a custom parser. Still, even this formulation isn't strict on the amount of whitespace. If you want exactly 1 space it requires another custom parser.</p>",
        "id": 386138567,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692473259
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 386138635,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692473301
    },
    {
        "content": "<p>This looks promising.</p>",
        "id": 386138719,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692473403
    },
    {
        "content": "<p>Are <code>ws</code> and <code>noWs</code> custom too?</p>",
        "id": 386138882,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692473566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> no they are builtin, but <code>ws</code> accepts any amount of whitespace.</p>",
        "id": 386139057,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692473699
    },
    {
        "content": "<p>Hmm. I can't find them in the online api doc, but if I click on them in Visual Code they take me to <code>checkWsBefore</code> and <code>checkNoWsBefore</code>, but I'm not sure where the abbreviation or notation is defined.</p>",
        "id": 386139358,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692473955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> it is defined through a <code>register_parser_alias</code> in <code>Lean.Parser</code></p>",
        "id": 386139804,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692474448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> Here is the full example with only 1 space accepted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Extra</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkTailSpace</span> <span class=\"o\">(</span><span class=\"n\">prev</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">prev.getTailInfo</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">original</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">trailing</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trailing</span> <span class=\"bp\">==</span> <span class=\"s2\">\" \"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                        <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBeforeFn</span> <span class=\"o\">(</span><span class=\"n\">errorMsg</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ParserFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">prev</span> <span class=\"o\">:=</span> <span class=\"n\">s.stxStack.back</span>\n  <span class=\"k\">if</span> <span class=\"n\">checkTailSpace</span> <span class=\"n\">prev</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">s.mkError</span> <span class=\"n\">errorMsg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore</span> <span class=\"o\">(</span><span class=\"n\">errorMsg</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"space before\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">epsilonInfo</span>\n  <span class=\"n\">fn</span>   <span class=\"o\">:=</span> <span class=\"n\">checkSpaceBeforeFn</span> <span class=\"n\">errorMsg</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[combinator_formatter checkSpaceBefore]</span> <span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore.formatter</span> <span class=\"o\">:</span> <span class=\"n\">Formatter</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"kd\">@[combinator_parenthesizer checkSpaceBefore]</span> <span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore.parenthesizer</span> <span class=\"o\">:</span> <span class=\"n\">Parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">checkSpaceBefore</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">many1Space</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">sepBy1</span> <span class=\"n\">p</span> <span class=\"s2\">\" \"</span> <span class=\"n\">space</span>\n<span class=\"kd\">def</span> <span class=\"n\">many1SpaceIdent</span> <span class=\"o\">:=</span> <span class=\"n\">many1Space</span> <span class=\"n\">Lean.Parser.ident</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"(\"</span> <span class=\"n\">many1SpaceIdent</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"n\">ident</span> <span class=\"n\">space</span>  <span class=\"s2\">\" eq \"</span> <span class=\"n\">space</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"true\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"not \"</span> <span class=\"n\">space</span> <span class=\"n\">formula</span> <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"n\">formula</span> <span class=\"n\">space</span> <span class=\"s2\">\" imp \"</span> <span class=\"n\">space</span> <span class=\"n\">formula</span> <span class=\"n\">noWs</span>  <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"forall \"</span> <span class=\"n\">space</span> <span class=\"n\">ident</span> <span class=\"n\">space</span> <span class=\"n\">formula</span>  <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n</code></pre></div>",
        "id": 386139865,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692474490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Thank you! I think I will need to go through the metaprogramming book to understand it.</p>",
        "id": 386140272,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692474802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> And here is a final versions that produces <code>Formula</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Extra</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkTailSpace</span> <span class=\"o\">(</span><span class=\"n\">prev</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">prev.getTailInfo</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">original</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">trailing</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trailing</span> <span class=\"bp\">==</span> <span class=\"s2\">\" \"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                        <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBeforeFn</span> <span class=\"o\">(</span><span class=\"n\">errorMsg</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ParserFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">prev</span> <span class=\"o\">:=</span> <span class=\"n\">s.stxStack.back</span>\n  <span class=\"k\">if</span> <span class=\"n\">checkTailSpace</span> <span class=\"n\">prev</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">s.mkError</span> <span class=\"n\">errorMsg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore</span> <span class=\"o\">(</span><span class=\"n\">errorMsg</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"space before\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">epsilonInfo</span>\n  <span class=\"n\">fn</span>   <span class=\"o\">:=</span> <span class=\"n\">checkSpaceBeforeFn</span> <span class=\"n\">errorMsg</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[combinator_formatter checkSpaceBefore]</span> <span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore.formatter</span> <span class=\"o\">:</span> <span class=\"n\">Formatter</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"kd\">@[combinator_parenthesizer checkSpaceBefore]</span> <span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore.parenthesizer</span> <span class=\"o\">:</span> <span class=\"n\">Parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">checkSpaceBefore</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">many1Space</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">sepBy1</span> <span class=\"n\">p</span> <span class=\"s2\">\" \"</span> <span class=\"n\">space</span>\n<span class=\"kd\">def</span> <span class=\"n\">many1SpaceIdent</span> <span class=\"o\">:=</span> <span class=\"n\">many1Space</span> <span class=\"n\">ident</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"(\"</span> <span class=\"n\">many1SpaceIdent</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"n\">ident</span> <span class=\"n\">space</span>  <span class=\"s2\">\" eq \"</span> <span class=\"n\">space</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"true\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"not \"</span> <span class=\"n\">space</span> <span class=\"n\">formula</span> <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"n\">formula</span> <span class=\"n\">space</span> <span class=\"s2\">\" imp \"</span> <span class=\"n\">space</span> <span class=\"n\">formula</span> <span class=\"n\">noWs</span>  <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"forall \"</span> <span class=\"n\">space</span> <span class=\"n\">ident</span> <span class=\"n\">space</span> <span class=\"n\">formula</span>  <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">Name</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"k\">forall</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"formula% \"</span> <span class=\"n\">formula</span>  <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"n\">macro_rules</span>  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs.elemsAndSeps.map</span> <span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"bp\">·.</span><span class=\"n\">getId</span><span class=\"o\">)</span>\n    <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.pred</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">f.getId</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"n\">eq</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.eq</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">a.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">b.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.true</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.not</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"n\">imp</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.imp</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.forall</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">a.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"c1\">-- #eval formula% (forall x f(a b c)) -- Formula.forall `x (Formula.pred `f [`a, `b, `c])</span>\n</code></pre></div>",
        "id": 386140994,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692475385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Wow! Thank you!</p>",
        "id": 386141429,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1692475824
    },
    {
        "content": "<p>an issue with that is that it works within Lean (with this <code>formal%</code> syntax) but you wouldn't be able to simply call this on a file you read from IO (unless you Link with Lean and build this into the environment), or maybe use Partax? <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> would Partax allow <span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> to parse this from file? do these custom parsers make it more complicated?</p>",
        "id": 386452968,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1692643256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> Yes, that is the use case Partax was originally designed for. Here is the full example using Partax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Partax</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Extra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Parser</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkTailSpace</span> <span class=\"o\">(</span><span class=\"n\">prev</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">prev.getTailInfo</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">original</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">trailing</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trailing</span> <span class=\"bp\">==</span> <span class=\"s2\">\" \"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                        <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBeforeFn</span> <span class=\"o\">(</span><span class=\"n\">errorMsg</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ParserFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">prev</span> <span class=\"o\">:=</span> <span class=\"n\">s.stxStack.back</span>\n  <span class=\"k\">if</span> <span class=\"n\">checkTailSpace</span> <span class=\"n\">prev</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">s.mkError</span> <span class=\"n\">errorMsg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore</span> <span class=\"o\">(</span><span class=\"n\">errorMsg</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"space before\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">epsilonInfo</span>\n  <span class=\"n\">fn</span>   <span class=\"o\">:=</span> <span class=\"n\">checkSpaceBeforeFn</span> <span class=\"n\">errorMsg</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[combinator_formatter checkSpaceBefore]</span>\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore.formatter</span> <span class=\"o\">:</span> <span class=\"n\">Formatter</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[combinator_parenthesizer checkSpaceBefore]</span>\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore.parenthesizer</span> <span class=\"o\">:</span> <span class=\"n\">Parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">checkSpaceBefore</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">many1Space</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">sepBy1</span> <span class=\"n\">p</span> <span class=\"s2\">\" \"</span> <span class=\"n\">space</span>\n<span class=\"kd\">def</span> <span class=\"n\">many1SpaceIdent</span> <span class=\"o\">:=</span> <span class=\"n\">many1Space</span> <span class=\"n\">ident</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"(\"</span> <span class=\"n\">many1SpaceIdent</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"n\">ident</span> <span class=\"n\">space</span>  <span class=\"s2\">\" eq \"</span> <span class=\"n\">space</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"true\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"not \"</span> <span class=\"n\">space</span> <span class=\"n\">formula</span> <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"n\">formula</span> <span class=\"n\">space</span> <span class=\"s2\">\" imp \"</span> <span class=\"n\">space</span> <span class=\"n\">formula</span> <span class=\"n\">noWs</span>  <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"forall \"</span> <span class=\"n\">space</span> <span class=\"n\">ident</span> <span class=\"n\">space</span> <span class=\"n\">formula</span>  <span class=\"n\">noWs</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"k\">forall</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"formula% \"</span> <span class=\"n\">formula</span>  <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"n\">macro_rules</span>  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs.elemsAndSeps.map</span> <span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"bp\">·.</span><span class=\"n\">getId</span><span class=\"o\">)</span>\n    <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.pred</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">f.getId</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"n\">eq</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.eq</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">a.getId</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">b.getId</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.true</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.not</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"n\">imp</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.imp</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Formula.forall</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">a.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">formula</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- Formula.forall `x (Formula.pred `f [`a, `b, `c])</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Partax.LParse</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkSpaceBefore</span> <span class=\"o\">(</span><span class=\"n\">errorMsg</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"space before\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LParseM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getIgnoredBefore</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"s2\">\" \"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span> <span class=\"k\">do</span> <span class=\"n\">LParse.error</span> <span class=\"n\">errorMsg</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">many1Space</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">LParseM</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LParseM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">go</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getIgnoredBefore</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"s2\">\" \"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span> <span class=\"k\">then</span>\n      <span class=\"n\">go</span> <span class=\"n\">args</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">Lean.mkNullNode</span> <span class=\"n\">args</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Partax.LParse</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Partax</span> <span class=\"k\">in</span>\n<span class=\"n\">compile_parser_category</span> <span class=\"n\">formula</span> <span class=\"k\">with</span> <span class=\"o\">{</span><span class=\"n\">CompileConfig.lParse</span> <span class=\"k\">with</span>\n  <span class=\"n\">parserAliases</span> <span class=\"o\">:=</span> <span class=\"n\">CompileConfig.lParse.parserAliases</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span> <span class=\"bp\">``</span><span class=\"n\">checkSpaceBefore</span> <span class=\"bp\">``</span><span class=\"n\">LParse.checkSpaceBefore</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span> <span class=\"bp\">``</span><span class=\"n\">many1Space</span> <span class=\"bp\">``</span><span class=\"n\">LParse.many1Space</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Formula.ofSyntax</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.elemsAndSeps.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">getId</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">Formula.pred</span> <span class=\"n\">f.getId</span> <span class=\"n\">xs.toList</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"n\">eq</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">Formula.eq</span> <span class=\"n\">a.getId</span> <span class=\"n\">b.getId</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">Formula.true</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">Formula.not</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ofSyntax</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"n\">imp</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">Formula.imp</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ofSyntax</span><span class=\"bp\">?</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ofSyntax</span><span class=\"bp\">?</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">formula</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">Formula.forall</span> <span class=\"n\">a.getId</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ofSyntax</span><span class=\"bp\">?</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">throw</span> <span class=\"s2\">\"ill-formed syntax\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">formula.run'</span> <span class=\"s2\">\"(forall x f(a b c))\"</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"n\">Formula.ofSyntax</span><span class=\"bp\">?</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Except.ok (Formula.forall `x (Formula.pred `f [`a, `b, `c]))</span>\n</code></pre></div>",
        "id": 386479655,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692654205
    },
    {
        "content": "<p>However, if you just wish to parse strings outside a Lean metaprogramming context, it might just be better to write the parser yourself using the raw parser combinators provided by something like Partax.</p>",
        "id": 386479864,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692654328
    },
    {
        "content": "<p>This is especially true when you are already using custom parsers in the syntax itself. One of the future plans for Partax is to provide a new <code>syntax</code>-like command that has better support for defining custom tokens/parsers, so that you can still use the pretty sugar, but that does not exist yet.</p>",
        "id": 386480233,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692654550
    }
]