[
    {
        "content": "<p>Hello all, I've encountered a confusing error message saying \"code generation failed, VM does not have code for 'weeks'\",  but there is defination existing before. Could anyone understand this error or how to solve it? Much obliged！</p>",
        "id": 380245675,
        "sender_full_name": "Marianne",
        "timestamp": 1690793187
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/k92VRWhFW15uT1mGv8yXEOCh/微信图片_20230731155732.png\">微信图片_20230731155732.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/k92VRWhFW15uT1mGv8yXEOCh/微信图片_20230731155732.png\" title=\"微信图片_20230731155732.png\"><img src=\"/user_uploads/3121/k92VRWhFW15uT1mGv8yXEOCh/微信图片_20230731155732.png\"></a></div>",
        "id": 380245818,
        "sender_full_name": "Marianne",
        "timestamp": 1690793212
    },
    {
        "content": "<p>As you've written <code>noncomputable theory</code> at the top of the file, Lean doesn't worry if it doesn't know how to compute your functions. As your functions involve real numbers, they noncomputable. (Some functions involving reals are computable, but not many!)</p>",
        "id": 380247019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690793425
    },
    {
        "content": "<p>The solution is essentially: don't use <code>#eval</code>. Note that <code>norm_num</code> still works fine for doing calculations in tactic mode.</p>",
        "id": 380247242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690793464
    },
    {
        "content": "<p>Alternatively you could change to using the rationals rather than the reals.</p>",
        "id": 380248263,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690793639
    },
    {
        "content": "<p>Thank you for your help! So … you mean I'd better delete\"#eval\" and use \"norm_num\" or rational instead ?</p>",
        "id": 380248901,
        "sender_full_name": "Marianne",
        "timestamp": 1690793740
    },
    {
        "content": "<p>You should update to Lean 4 if at all possible. But yes, <code>#eval</code> will not do real number calculations, you will need to stick to a \"computable field\" if you want to use Lean like a computer algebra package with things like <code>#eval</code>. It all depends on whether you're going for \"let's let Lean compute the answer\" or \"let's tell Lean the answer and get it to prove that it's the correct answer\".</p>",
        "id": 380252274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690794337
    },
    {
        "content": "<p>Thank you for your advice~ But I'm afraid I cannot update to Lean 4. <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span>  Actually, I'm trying to let Lean compute the answer (learn to solve easy math problems)</p>",
        "id": 380254671,
        "sender_full_name": "Marianne",
        "timestamp": 1690794759
    },
    {
        "content": "<p>As for the question of real number, I'm not sure what I should do, since I didn't write \"noncomputable theory\" before, but the error still exists like this:</p>",
        "id": 380255274,
        "sender_full_name": "Marianne",
        "timestamp": 1690794859
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/BmMj4J92LiNVLVKpnPIl3sg2/微信图片_20230731155448.png\">微信图片_20230731155448.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BmMj4J92LiNVLVKpnPIl3sg2/微信图片_20230731155448.png\" title=\"微信图片_20230731155448.png\"><img src=\"/user_uploads/3121/BmMj4J92LiNVLVKpnPIl3sg2/微信图片_20230731155448.png\"></a></div>",
        "id": 380255490,
        "sender_full_name": "Marianne",
        "timestamp": 1690794893
    },
    {
        "content": "<p>You can't use <code>#eval</code> with reals.</p>",
        "id": 380255709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690794930
    },
    {
        "content": "<p>Reals are really complicated objects -- they are equivalence classes of Cauchy sequences and inherently noncomputable. Maybe you want to use floats or rationals?</p>",
        "id": 380256126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690794995
    },
    {
        "content": "<p>Oh! So I should not define 200/50/1000 as reals?</p>",
        "id": 380257054,
        "sender_full_name": "Marianne",
        "timestamp": 1690795159
    },
    {
        "content": "<p>There's <code>#norm_num</code> for symbolically evaluating numbers, and it works fine with reals.</p>",
        "id": 380259606,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690795626
    },
    {
        "content": "<p>You probably have to put <code>@[simp]</code> in front of every definition that you want <code>#norm_num</code> to unfold while it evaluates.</p>",
        "id": 380259754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690795661
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html##norm_num\">https://leanprover-community.github.io/mathlib_docs/commands.html##norm_num</a></p>",
        "id": 380260350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690795756
    },
    {
        "content": "<p>Thanks a lot !!</p>",
        "id": 380264262,
        "sender_full_name": "Marianne",
        "timestamp": 1690796340
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/flOKGFQi6O1eZ0NAERJgnDXa/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/flOKGFQi6O1eZ0NAERJgnDXa/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/flOKGFQi6O1eZ0NAERJgnDXa/image.png\"></a></div>",
        "id": 380264450,
        "sender_full_name": "Marianne",
        "timestamp": 1690796368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"636844\">Marianne</span> has marked this topic as resolved.</p>",
        "id": 380268386,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690797089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"636844\">Marianne</span> has marked this topic as unresolved.</p>",
        "id": 380269021,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690797204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"636844\">Marianne</span> has marked this topic as unresolved.</p>",
        "id": 380269024,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690797205
    },
    {
        "content": "<p>Sorry for bother again...I've just realized that I don't really understand why @[simp] has to be put in front of every definition, what's the function here?</p>",
        "id": 380270024,
        "sender_full_name": "Marianne",
        "timestamp": 1690797399
    },
    {
        "content": "<p>What <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  said was that you must put <code>@[simp]</code>in front of every definition  \"that you want #norm_num to unfold while it evaluates\".</p>\n<p>If you want <code>simp</code> and other tactics like <code>norm_num</code> to simplify a definition when it is encountered (i.e., replace lhs by rhs), you should indicate this by saying <code>@[simp]</code></p>",
        "id": 380272068,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690797759
    },
    {
        "content": "<p><code>norm_num</code> alternates between looking for numbers it can normalize and using <code>simp</code> to make further progress</p>",
        "id": 380272229,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690797790
    },
    {
        "content": "<p>Probably, @[simp] can be regarded as a bridge between finding / computing something ?</p>",
        "id": 380274263,
        "sender_full_name": "Marianne",
        "timestamp": 1690798148
    },
    {
        "content": "<p>It just adds it to the \"<code>simp</code> set\", which is a list of lemmas and definitions that <code>simp</code> uses. Here's an overview: <a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a></p>",
        "id": 380276154,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690798508
    },
    {
        "content": "<p>Putting <code>@[simp]</code> on <code>current_savings</code> adds the lemma <code>current_savings = 200</code> for example. Then whenever <code>simp</code> comes across <code>current_savings</code> it replaces it with <code>200</code>.</p>",
        "id": 380276526,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690798571
    },
    {
        "content": "<p>I see~Thank you so much for your illustration <span aria-label=\"smile cat\" class=\"emoji emoji-1f638\" role=\"img\" title=\"smile cat\">:smile_cat:</span></p>",
        "id": 380277602,
        "sender_full_name": "Marianne",
        "timestamp": 1690798776
    }
]