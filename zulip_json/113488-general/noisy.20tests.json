[
    {
        "content": "<p>Dear All,</p>\n<p>in the <code>mathlib3</code> days, test files should not produce any form of output.  I believe that this restriction was lifted in <code>Mathlib4</code>, due to the fact that the tactics that would allow to catch \"noise\" and make sure that it was of the right kind were unavailable.</p>\n<p>Now, <code>#guard_msgs</code> allows for such catching and I thought that I would try out one PR where I add <code>#guard_msgs</code> for all the tests that contain a sorry: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6868\">#6868</a>.  The test files are still noisy after this, just a little less!</p>\n<p>However, if there is interest in going back to quiet tests, then this should be a step forward!</p>",
        "id": 388069596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693388687
    },
    {
        "content": "<p>(The CI test that is currently failing is <code>Detect changes to header SHAs</code> and I am hoping that it will go away by running it again!)</p>",
        "id": 388069838,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693388774
    },
    {
        "content": "<p>I think it is not so useful to use <code>#guard_msgs</code> to catch <code>sorry</code> specifically. It is better suited to catching errors and warnings from the thing under test</p>",
        "id": 388072318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693389669
    },
    {
        "content": "<p>But yes, I would definitely like us to move to quiet tests</p>",
        "id": 388072393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693389697
    },
    {
        "content": "<p>In most cases you can replace <code>sorry</code> by an axiom or hypothesis</p>",
        "id": 388072425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693389711
    },
    {
        "content": "<p>Oh, sorry, I misread. Yes #guard_msgs should be used for everything <em>except</em> the sorries.</p>",
        "id": 388072432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693389713
    },
    {
        "content": "<p>Ok, good!  As I said, this was mostly a RFC and it seems that we are all on the same line!  Catching sorries seemed the easiest fix to try, I'll try with the <code>unused_variables</code> then, maybe.</p>",
        "id": 388072616,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389768
    },
    {
        "content": "<p>that should also not be caught by <code>#guard_msgs</code> unless it is under test :)</p>",
        "id": 388072683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693389795
    },
    {
        "content": "<p>Some of the noisy tests depend on the output of <code>apply?</code> and the give out <em>a lot</em> of information.  Should these be all caught?</p>",
        "id": 388072697,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389799
    },
    {
        "content": "<p>Mario, of course!  I only caught sorries in test files.</p>",
        "id": 388072730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389817
    },
    {
        "content": "<p>use <code>set_option linter.unusedVariables false</code> to suppress it if you can't avoid it otherwise</p>",
        "id": 388072736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693389820
    },
    {
        "content": "<p>My plan was to simply prefix the unused variable with <code>_</code>.</p>",
        "id": 388072847,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389852
    },
    {
        "content": "<blockquote>\n<p>Mario, of course!  I only caught sorries in test files.</p>\n</blockquote>\n<p>By \"under test\" I mean that <code>#guard_msgs</code> should be capturing output from the thing the test is about, and anything else should just be quiet</p>",
        "id": 388072889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693389872
    },
    {
        "content": "<p>But setting the linter in the failing declarations is also ok: what is preferred?</p>",
        "id": 388072920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389881
    },
    {
        "content": "<p>using <code>_</code> for unused variables is also fine</p>",
        "id": 388072954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693389896
    },
    {
        "content": "<p>whichever one is easier, I don't think it matters much</p>",
        "id": 388073052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693389924
    },
    {
        "content": "<p>Ah, I understand my misinterpretation of \"test\"!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/noisy.20tests/near/388072889\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Mario, of course!  I only caught sorries in test files.</p>\n</blockquote>\n<p>By \"under test\" I mean that <code>#guard_msgs</code> should be capturing output from the thing the test is about, and anything else should just be quiet</p>\n</blockquote>",
        "id": 388073063,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389929
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6872\">#6872</a> removes the <code>unused_variables</code> linter on the statements where it complained.</p>",
        "id": 388075044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693390766
    },
    {
        "content": "<p>Given that I already had code to add some text before some other text for the <code>#guard_msgs</code>, this was easier than prefixing a <code>_</code> to the unused variables (and then realizing that the unused variable was a non-declared <code>this</code> of an unused <code>have</code>!)</p>",
        "id": 388075423,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693390927
    },
    {
        "content": "<p>actually it would be easier for review if you had used <code>_</code>, because in many cases it's not obvious why there are unused variables and it could be hiding a tactic bug</p>",
        "id": 388076083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693391177
    },
    {
        "content": "<p>Done!</p>",
        "id": 388077114,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693391530
    },
    {
        "content": "<p>Not a huge improvement, but the lines printed by <code>test/*</code> are 970 in the PR, vs 985 on current master.</p>",
        "id": 388078997,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693392296
    },
    {
        "content": "<p>Got to start somewhere though :-)</p>",
        "id": 388082293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693393617
    },
    {
        "content": "<p>The output of testing mathlib makes it hard to figure out which test file produced which output: is there a way to obtain the messages printed by each <code>lake env lean test/...</code> separately?  I can always run the command locally, but I was wondering if I am just missing something from the CI output.</p>",
        "id": 388085298,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693394854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/noisy.20tests/near/388072425\">said</a>:</p>\n<blockquote>\n<p>In most cases you can replace <code>sorry</code> by an axiom or hypothesis</p>\n</blockquote>\n<p>An axiom seems safer to me, as a hypothesis could be located by an eager tactic and defeat the point of the test</p>",
        "id": 390906320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694689763
    },
    {
        "content": "<p>Either one is fine with me</p>",
        "id": 390910505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694691544
    },
    {
        "content": "<p>I've revamped <a href=\"https://github.com/leanprover-community/mathlib4/pull/6868\">#6868</a> using <code>axiom test_sorry</code> instead of <code>#guard_msgs</code> for the <code>sorry</code>.  I tried to make the files that are touched by the PR entirely quiet, which means that I also added some <code>_</code> for unused variables and some <code>#guard_msgs</code> for outputs of <code>exact?/apply?/rw?</code>.</p>\n<p>Adding the axiom also made some instances/defs noncomputable and I marked those as Lean instructed me to!</p>\n<p>On master, there are about 950 lines of output from tests, this PR removes about 300 of those lines.</p>",
        "id": 390973148,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694707153
    },
    {
        "content": "<p>(Quite a few of those lines became inputs to <code>#guard_msgs</code>: the PR add 563 lines, most of which are really <code>Try this</code> messages.)</p>",
        "id": 390973486,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694707261
    },
    {
        "content": "<p>This is an update on the noisy tests.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Test</span>                                <span class=\"n\">No</span> <span class=\"n\">of</span> <span class=\"n\">lines</span> <span class=\"n\">of</span> <span class=\"n\">output</span>\n<span class=\"c1\">----------------------------------------------------------</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">DeriveFintype.lean</span>             <span class=\"mi\">7</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">Expr.lean</span>                      <span class=\"mi\">4</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">FBinop.lean</span>                    <span class=\"mi\">1</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span>                      <span class=\"mi\">57</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">Imports.lean</span>                   <span class=\"mi\">4</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">MLList.lean</span>                    <span class=\"mi\">5</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">MaxPowDiv.lean</span>                 <span class=\"mi\">1</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">TypeCheck.lean</span>                 <span class=\"mi\">7</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">eqns.lean</span>                      <span class=\"mi\">1</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">finset_repr.lean</span>               <span class=\"mi\">4</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">finsupp_notation.lean</span>          <span class=\"mi\">1</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">left_right.lean</span>                <span class=\"mi\">2</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">search</span><span class=\"bp\">/</span><span class=\"n\">DepthFirst.lean</span>         <span class=\"mi\">1</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">success_if_fail_with_msg.lean</span>  <span class=\"mi\">1</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">symm.lean</span>                      <span class=\"mi\">1</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">trace.lean</span>                     <span class=\"mi\">2</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">vec_notation.lean</span>              <span class=\"mi\">6</span>\n</code></pre></div>\n<p>(all remaining tests have no output)</p>",
        "id": 392050120,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695190153
    },
    {
        "content": "<p>Thanks so much!</p>",
        "id": 392051510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695191095
    }
]