[
    {
        "content": "<p>In current mathlib, we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>which is a little bit unpleasant -- I've been bitten by this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6348\">#6348</a>.</p>\n<p>This is due to the inductive definition of the cast, which is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Nat.unaryCast</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.unaryCast</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>(so <code>1</code> is mapped to <code>0 + 1</code>, not <code>1</code>, which is why the <code>rfl</code> above breaks for <code>n = 1</code>).</p>\n<p>We could fix this by changing the definition to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Nat.unaryCast'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.unaryCast'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>but at the expense of the loss of the defeq</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(which works currently, but would be broken with the new definition).</p>\n<p>For me, good defeqs for <code>1</code> are more important than coincidental defeqs in arithmetic equations, so I would be ready to refactor mathlib (not only in cardinals) by changing the definition of <code>Nat.unaryCast</code> to <code>Nat.unaryCast'</code>.  But since it's a pretty fundamental change (and probably quite painful), I'd be happy to read your thoughts about that before I start.</p>",
        "id": 381758956,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691142092
    },
    {
        "content": "<p>Should we instead set <code>Cardinal.natCast n := Quotient.mk (Fin n)</code>?</p>",
        "id": 381765373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143129
    },
    {
        "content": "<p>That gives us nice defeqs for toNat</p>",
        "id": 381765651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143170
    },
    {
        "content": "<p>I think there might have been an abandoned Lean3 PR that did that</p>",
        "id": 381769416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143764
    },
    {
        "content": "<p>It's not just for cardinals: in any type using the default <code>Nat.unaryCast</code> for <code>natCast</code>, defeqs for <code>1</code> are currently broken (while defeqs for all other natural numbers work just fine).</p>",
        "id": 381805784,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691149539
    },
    {
        "content": "<p>I assume the alternative would be to redefine the <code>One</code> instance to be <code>0 + 1</code>?</p>",
        "id": 381812363,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691150524
    },
    {
        "content": "<p>No, because then the cast of <code>1</code> would be <code>0 + (0 + 1)</code>...</p>",
        "id": 381813577,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691150719
    },
    {
        "content": "<p>It uses the <code>One</code> instance in the inductive definition.</p>",
        "id": 381813722,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691150742
    },
    {
        "content": "<p>My understanding is that <code>unaryCast</code> is just a compatibility shim for code that existing before <code>natCast</code> was introduced</p>",
        "id": 381835822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691153981
    },
    {
        "content": "<p>Note that there are many other types where <code>($n : X) = (($n : ℕ) : X)</code> is not defeq; two that come to mind are <code>Fin k</code> with <code>n = 0</code> and <code>Polynomial</code> (due to <code>irreducible_def</code>)</p>",
        "id": 381836857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691154129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Nat.2EunaryCast.20and.20one/near/381765373\">said</a>:</p>\n<blockquote>\n<p>Should we instead set <code>Cardinal.natCast n := Quotient.mk (Fin n)</code>?</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6384\">#6384</a>.</p>",
        "id": 382152741,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691244167
    }
]