[
    {
        "content": "<p>Okay, I hope that the explanation for this is that I am very stupid, but I am very confused: I am getting an 'unknown identifier' error for a lemma that is in mathlib. I did import the relevant file, I am in a working Lean project, and I checked some lemmas from the same file - they work ! I tried copy-pasting the name of the lemma from the mathlib page because I thought I might have made a typo, it made no difference. Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">set.ssubset_iff_insert</span>  <span class=\"c1\">-- that one is fine...</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">set.subset_insert_iff_of_not_mem</span>  <span class=\"c1\">--unknown identifier 'set.subset_insert_iff_of_not_mem'</span>\n</code></pre></div>\n<p>Here is the mathlib link: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/basic.html#set.subset_insert_iff_of_not_mem\">https://leanprover-community.github.io/mathlib_docs/data/set/basic.html#set.subset_insert_iff_of_not_mem</a><br>\nThe lemma that checks on the previous line is the next lemma in data.set.basic. I admit that I am totally mystified... :-(</p>",
        "id": 349188490,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681411776
    },
    {
        "content": "<p>It works for me. What's your mathlib version? Probably it is outdated and you do not in fact have <code>set.subset_insert_iff_of_not_mem</code> in your local copy of mathlib.</p>",
        "id": 349189076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681411912
    },
    {
        "content": "<p>How do I find out what my mathlib version is ?</p>",
        "id": 349189282,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681411955
    },
    {
        "content": "<p>I forgot to say that I ran 'leanproject get-mathlib-cache' before posting, but maybe that is not sufficient.</p>",
        "id": 349189378,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681411984
    },
    {
        "content": "<p><a href=\"https://mathlib-changelog.org/theorem/set.subset_insert_iff_of_not_mem\">https://mathlib-changelog.org/theorem/set.subset_insert_iff_of_not_mem</a> says that lemma was added fairly recently. Odds are you downloaded mathlib before the 22nd of February.</p>",
        "id": 349189393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681411987
    },
    {
        "content": "<p>Are you working on the mathlib repository or on a separate project (in the sense of <code>leanproject</code>)?</p>",
        "id": 349189498,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681412020
    },
    {
        "content": "<p>A separate project. Do I just need to run 'leanproject upgrade-mathlib' ?</p>",
        "id": 349189650,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681412064
    },
    {
        "content": "<p>Yes. I personally do <code>leanproject up</code>, which should be a synonym of <code>leanproject upgrade-mathlib</code>.</p>",
        "id": 349189744,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681412096
    },
    {
        "content": "<p>Well, I launched the command, let's see what happens.</p>",
        "id": 349189851,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681412127
    },
    {
        "content": "<p>I'm bookmarking that changelog page, it's very useful.</p>",
        "id": 349190076,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681412186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/113488-general/topic/Unknown.20identifier.20.3F/near/349189282\">said</a>:</p>\n<blockquote>\n<p>How do I find out what my mathlib version is ?</p>\n</blockquote>\n<p>The answer to this question is \"Go to <code>leanpkg.toml</code>\". The one from <a href=\"https://github.com/YaelDillies/LeanCamCombi\">LeanCamCombi</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"lean-cam-combi\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1\"</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"leanprover-community/lean:3.50.3\"</span>\n<span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">\"src\"</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"n\">mathlib</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">git</span> <span class=\"bp\">=</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib\"</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"s2\">\"dc65937e7a0fff4677f0f5a7086f42da70a69575\"</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This means that LeanCamCombi uses version 3.50.3 of the community version of Lean, and version dc65937e7a0fff4677f0f5a7086f42da70a69575 (this is actually a commit identifier) of mathlib.</p>",
        "id": 349190329,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681412276
    },
    {
        "content": "<p>Yup, now it works ! Whew, I'm so relieved that it was me doing something stupid and not a horrible bug in my mathlib installation. (Also, I now know how to update. Somehow I thought that 'leanproject get-mathlib-cache' was enough. I'm not sure.) Thank you very much !</p>",
        "id": 349190419,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681412294
    },
    {
        "content": "<p><code>leanproject get-mathlib-cache</code> (aka <code>leanproject get-m</code>) downloads the <em>cache</em> for the version of mathlib you're on, but it does not change the version itself.</p>",
        "id": 349190596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681412354
    },
    {
        "content": "<p>If you're working alone on that project, then you should never need <code>leanproject get-m</code> because <code>leanproject up</code> runs it for you (but if a collaborator runs <code>leanproject up</code>, or just you from another machine, then you'll need to run <code>leanproject get-m</code> once you pull their changes).</p>",
        "id": 349191009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681412473
    },
    {
        "content": "<p>I'm working alone on this particular project, but I just started another project with a group of people, so that last piece of information will definitely be useful.</p>",
        "id": 349191195,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681412528
    },
    {
        "content": "<p>By the way part of my project is based on your mathlib file on simplicial complexes. I actually needed abstract simplicial complexes, but I reused some of the basic structure of the file, as I have almost no experience with setting up Lean definitions and having a model was very helpful. So I'm really glad that it was there !</p>",
        "id": 349191975,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681412804
    },
    {
        "content": "<p>Oh great! In fact, <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> already \"abstracted\" my simplicial complex files on <a href=\"https://github.com/leanprover-community/mathlib/tree/shing-asc\">branch#shing-asc</a>, if you want to compare. And did you know I have a lot more simplicial complex material on <a href=\"https://github.com/leanprover-community/mathlib/tree/sperner-again\">branch#sperner-again</a>?</p>",
        "id": 349192331,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681412910
    },
    {
        "content": "<p>No, I don't know about anything not in mathlib. I'll check out these branches. My main focus was shellability and the calculation of the Euler-Poincaré characteristic of a finite shellable complex.</p>",
        "id": 349192517,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681412970
    },
    {
        "content": "<p>If you need this material, I can move it to mathlib, but I would rather do it after the port because it's mostly unpolished. I also have a definition of the Euler characteristic in the generality of incidence algebras in <a href=\"https://github.com/leanprover-community/mathlib/pull/11656\">#11656</a> with <span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span>, although there's some work to be done to connect it to concrete examples.</p>",
        "id": 349192897,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681413086
    },
    {
        "content": "<p>Well, I proved everything I needed about abstract simplicial complexes and I have moved on to the applications I had in mind (showing that a certain poset is isomorphic to the face poset of a shellable abstract simplicial complex and using that to calculate some alternating sums on the poset). So there's no rush.</p>",
        "id": 349193398,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681413265
    },
    {
        "content": "<p>Interesting, Shing Tak Lam seems to have an essentially equivalent but much better (in Lean) definition of dimension, but we have a different definition of \"pure\".</p>",
        "id": 349193946,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681413474
    },
    {
        "content": "<p>Although we're both third year Cambridge undergraduates, Shing had way more experience when he wrote that code than when I wrote mine which inspired his. Sperner's lemma was basically my first project!</p>",
        "id": 349194249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681413585
    },
    {
        "content": "<p>Cool ! I decided to try and formalize my simplest paper as my first project. Turns out it was less simple than I thought. (Because importing non-formalized results is cheating, so I have to formalize the prerequisites too.)</p>",
        "id": 349195149,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1681413911
    },
    {
        "content": "<p>Formalising a paper, however simple it is, is no simple task!</p>",
        "id": 349195450,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681414023
    },
    {
        "content": "<p>Well, whew, I am done ! (It's only the first half of the paper, but that's what I had set out to do anyway.) I thought that it would take a couple of weeks and it took two months, which is about par for the course whenever I set out to write a maths result.<br>\nNext steps: (1) clean the code and (2) translate it into Lean4 (I think that all the prerequisites are already ported - famous last words, I know, I know), probably at the same time.<br>\n<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , would it be okay if I use yours and <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> 's code as inspiration for step (1) ? I would give credit where credit is due, of course.</p>",
        "id": 356495476,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683468453
    },
    {
        "content": "<p>Absolutely no problem! I wouldn't be working on mathlib if I didn't want my code to be reused <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 356496306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683468749
    },
    {
        "content": "<p>And this is great news! I'm excited to see the result.</p>",
        "id": 356496404,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683468782
    },
    {
        "content": "<p>Thanks ! Oh yeah, I forgot goal number 3: learn to write a fancy website like that of the sphere eversion project. That should only take 5 years... <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 356498517,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683469508
    },
    {
        "content": "<p>Modulo the initial set-up (which people here can help with), making the fancy website is little more than writing the TeX code and then letting the machines do their work.</p>",
        "id": 356512795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683474347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> congratulations! Which paper of yours have you half-formalised?</p>",
        "id": 356513803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683474745
    },
    {
        "content": "<p>Sections 1-4 of this:<br>\n<a href=\"https://alco.centre-mersenne.org/item/10.5802/alco.66.pdf\">https://alco.centre-mersenne.org/item/10.5802/alco.66.pdf</a><br>\nIncluding all the prerequisites about abstract simplicial complexes. There is no \"sorry\" anywhere in the files and they all build, but I had to increase the timeout and memory limits quite a lot.  And okay, to be honest I didn't formalize the stuff about geometric realizations; it's probably not as hard as I imagined at first, and I can sort of see how it would go, but it would require a lot of additional time.<br>\nI had to doubt that the results were correct, but I wanted to see how hard it would be to convince Lean of that. In fact I spent most of the time on the background material, so I guess that this kind of thing will become easier as mathlib grows, but there will still need to be some progress before we can convince more people to attempt it.</p>",
        "id": 356534791,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683484335
    },
    {
        "content": "<p>Now that I think about it, this particular paper is supposed to give a \"better\" (as in \"more natural\") proof of a bunch of combinatorial identities that I had encountered while calculating the cohomology of Siegel modular varieties, and if which I was much less certain, before we managed to reprove them in a geometric way.In fact, I'm still not sure that the original proof is 100% correct. Formalising that original proof would probably have been much easier - no background required, it was all brute force inductions - and it would have made me feel better about them at the time. On the other hand, looking for a better proof was a lot of fun too. I'm not sure what the conclusion of all this is.</p>",
        "id": 356535279,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683484610
    },
    {
        "content": "<p>I just regard these sorts of projects as useful data points. If you want to formalise 8 pages of formalisable mathematics, how long does it take? Depends on lots of things. But right now we're getting it to \"in many areas it's now possible for a small team to do this\" which is good to see</p>",
        "id": 356556412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683499247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Well here's another useful data point for you: one month later, I have a Lean4 version of my formalization project (starting from the Lean3 version and zero knowledge of Lean4):<br>\n<a href=\"https://github.com/smorel394/TS1\">https://github.com/smorel394/TS1</a><br>\nI also cleaned stuff up a lot between the two versions, though it's still far from perfect.  I realized that some of the statements generalize, but I'm not sure in which direction I should take them; I need to learn more stuff about the infinite symmetric group.</p>",
        "id": 363503850,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685886960
    },
    {
        "content": "<p>Congratulations <span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> and thank you for this insightful related <a href=\"https://youtu.be/oEeXAvW_Y5k\">talk</a>!</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"oEeXAvW_Y5k\" href=\"https://youtu.be/oEeXAvW_Y5k\"><img src=\"https://uploads.zulipusercontent.net/34a2a120eb47ec1f32218174ac9191dbc11e7957/68747470733a2f2f692e7974696d672e636f6d2f76692f6f4565584176575f59356b2f64656661756c742e6a7067\"></a></div>",
        "id": 369098971,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1687592370
    },
    {
        "content": "<p>I like it that Deligne asks at the end of the video whether Lean can do transport of structure. He knows exactly where the struggles are <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 369243121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687630564
    },
    {
        "content": "<p>There’s an older video of a lecture by Deligne about motives I think where he talks about “transport of structure” in the context of the Galois action on ell-adic cohomology. I’m not surprised he asked that question :)</p>",
        "id": 369243849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687630842
    },
    {
        "content": "<p>Jake Levinson and I have been thinking a bit about \"transport of structure\" again. We have some meta code, and a plan, but nothing to show off yet.</p>",
        "id": 369316657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687674030
    },
    {
        "content": "<p>Oh dear, I was careful not to mention it to Kevin so it wouldn't end on his twitter feed, but I guess it's  impossible to hide this kind of stuff now that everything is online.<br>\nI was annoyed that I spent too much time on introductory stuff and not enough on the project itself, but then I talked to people and they said they were happy I did that. Still, I think it should be possible to find a better balance.</p>",
        "id": 369618001,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1687770485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Unknown.20identifier.20.3F/near/369243121\">said</a>:</p>\n<blockquote>\n<p>I like it that Deligne asks at the end of the video whether Lean can do transport of structure. He knows exactly where the struggles are <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>We actually continued that discussion after the talk was over and we were no longer being recorded. There was no definite conclusion apart from the fact that it's hard. (I was bitten by that very thing when I realized that I had proved shellability of a certain simplicial complex in Lean and wanted to apply it to a complex that was \"obviously isomorphic\" for a mathematician, but not so obviously for Lean. Also, I hadn't told Lean that shellability was transported along isomorphisms...)</p>",
        "id": 369619133,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1687770703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/113488-general/topic/Unknown.20identifier.20.3F/near/369618001\">said</a>:</p>\n<blockquote>\n<p>I was annoyed that I spent too much time on introductory stuff and not enough on the project itself, but then I talked to people and they said they were happy I did that. Still, I think it should be possible to find a better balance.</p>\n</blockquote>\n<p>Welcome to the experience of giving Lean talks for an advanced mathematical audience <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 369621279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687771145
    },
    {
        "content": "<p>Also, not sure if anybody watched Björg Poonen's talk of the next day, but he made a Lean joke during it. I was a really nice moment.</p>",
        "id": 369627817,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1687772418
    },
    {
        "content": "<p>I'll put it on my watch list</p>",
        "id": 369628196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687772494
    },
    {
        "content": "<p>Here's a direct pointer into Bjorn's talk: <a href=\"https://www.youtube.com/watch?v=djYSWwgSeI4&amp;t=1391s\">https://www.youtube.com/watch?v=djYSWwgSeI4&amp;t=1391s</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"djYSWwgSeI4\" href=\"https://www.youtube.com/watch?v=djYSWwgSeI4&amp;t=1391s\"><img src=\"https://uploads.zulipusercontent.net/0ea79fc7099448696dd0e4254311c25b45ccae46/68747470733a2f2f692e7974696d672e636f6d2f76692f646a5953577767536549342f64656661756c742e6a7067\"></a></div>",
        "id": 370073738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687874138
    },
    {
        "content": "<p>Seemingly well received by at least one person</p>",
        "id": 370084261,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687875844
    },
    {
        "content": "<p><em>Proof:</em> <code>sorry</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">□</mi></mrow><annotation encoding=\"application/x-tex\">\\square</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;\"></span><span class=\"mord amsrm\">□</span></span></span></span></p>",
        "id": 370099577,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687878239
    }
]