[
    {
        "content": "<p>I am trying to prove that a function defined on ordinals <code>f : Ordinal → α </code> is not injective in the first <code>Order.Succ #α</code> elements. However, I am a bit stuck there. I have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">limitation</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.ord</span> <span class=\"bp\">$</span> <span class=\"n\">Order.succ</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">limitation_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">limitation</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">limitation</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cardinal_no_max</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ℵ</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">IsMax</span> <span class=\"n\">ℵ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ℵ</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">IsMax</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"bp\">$</span> <span class=\"n\">Cardinal.cantor</span> <span class=\"n\">ℵ</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_le</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.cantor</span> <span class=\"n\">ℵ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">limitation_not_injective</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">limitation</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_inj</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Order.succ</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Cardinal.mk_le_of_injective</span> <span class=\"n\">h_inj</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Order.succ</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Order.lt_succ_of_not_isMax</span> <span class=\"o\">(</span><span class=\"n\">cardinal_no_max</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p>However, <code>Cardinal.mk_le_of_injective</code> does not work since the domain and codomain live in different universes. Anyone maybe a pointer how to handle this?</p>",
        "id": 405364011,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1701437435
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.lift_mk_le_lift_mk_of_injective#doc\">docs#Cardinal.lift_mk_le_lift_mk_of_injective</a> instead</p>",
        "id": 405369014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701439080
    }
]