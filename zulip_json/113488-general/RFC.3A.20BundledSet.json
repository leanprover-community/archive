[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/6442\">#6442</a>, I define <code>BundledSet</code> as I suggested in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a> and migrate <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Flag#doc\">docs#Flag</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsemigroup#doc\">docs#Subsemigroup</a> to <code>BundledSet</code>s. Before migrating more files (and adding missing features), I would like to get some feedback: if this is not going to be merged, then I would prefer not to waste my time on the refactor.</p>",
        "id": 382829301,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691474273
    },
    {
        "content": "<p>The main change is that instead of a bunch of custom structures I define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">BundledSet</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">carrier</span>\n</code></pre></div>\n<p>This way we can generalize lots of boilerplate code to <code>BundledSet</code>.</p>",
        "id": 382829691,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691474413
    },
    {
        "content": "<p>I already generalized the construction of a <code>CompleteLattice</code> suitable for algebraic subobjects and <code>*.closure</code>. Other generalizations I have in mind:</p>\n<ul>\n<li><code>*.eqLocus</code>;</li>\n<li>optional: <code>*.ker</code></li>\n<li><code>prod</code>, <code>pi</code></li>\n<li><code>map</code>/<code>comap</code> with a <code>GaloisConnection</code>;<ul>\n<li>if we migrate bundled homs to a common data type, then we can also have <code>map_id</code>, <code>map_map</code> etc.</li>\n</ul>\n</li>\n</ul>",
        "id": 382830410,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691474634
    },
    {
        "content": "<p>I think it's worth experimenting with this, for sure</p>",
        "id": 382832301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691475266
    },
    {
        "content": "<p>Should the type of <code>p</code> above be <code>p : Set α → Prop</code> rather than <code>p : α → Prop</code>?</p>",
        "id": 382920058,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1691493967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20BundledSet/near/382920058\">said</a>:</p>\n<blockquote>\n<p>Should the type of <code>p</code> above be <code>p : Set α → Prop</code> rather than <code>p : α → Prop</code>?</p>\n</blockquote>\n<p>Yes, it was a typo.</p>",
        "id": 382992210,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691507550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> can you document any potential downsides you see for <a href=\"https://github.com/leanprover-community/mathlib4/pull/6442\">#6442</a>? And how dependent / independent are these changes from <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a>, as I believe that RFC still has some pending issues that would probably want resolving?</p>",
        "id": 383002405,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691509368
    },
    {
        "content": "<h3>Potential downsides</h3>\n<ul>\n<li>If we use generic <code>BundledSet.closure</code> etc, then one can see  something like <code>BundledSet M IsSubsemigroup</code> in the info view. I guess, this can be fixed by some meta programming.</li>\n<li>As in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a>, you have to write <code>{carrier := s, prop := { mul_mem := _, one_mem := _}}</code> instead of <code>carrier := s, mul_mem' := _, one_mem' := _</code>.</li>\n</ul>",
        "id": 383031176,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691515792
    }
]