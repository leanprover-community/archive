[
    {
        "content": "<p>GCC/Clang is unable to identify <code>log2</code> as bit scanning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uint16_t</span> <span class=\"n\">lean_uint16_log2</span><span class=\"o\">(</span><span class=\"n\">uint16_t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">size_t</span> <span class=\"n\">res</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"n\">while</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">res</span><span class=\"bp\">++;</span>\n        <span class=\"n\">a</span> <span class=\"bp\">/=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"n\">res</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n<span class=\"n\">uint16_t</span> <span class=\"n\">lean_uint16_log2_opt</span><span class=\"o\">(</span><span class=\"n\">uint16_t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"bp\">//</span> <span class=\"n\">GCC</span> <span class=\"n\">optimizes</span> <span class=\"n\">this</span> <span class=\"n\">to</span> <span class=\"n\">bsr</span><span class=\"bp\">/</span><span class=\"n\">tzcnt</span>\n    <span class=\"bp\">//</span> <span class=\"n\">clang</span> <span class=\"n\">cannot</span>\n    <span class=\"n\">uint16_t</span> <span class=\"n\">res</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"n\">while</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">res</span><span class=\"bp\">++;</span>\n        <span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"n\">res</span> <span class=\"bp\">?</span> <span class=\"n\">res</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n<span class=\"n\">uint16_t</span> <span class=\"n\">lean_uint16_log2_opt2</span><span class=\"o\">(</span><span class=\"n\">uint16_t</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"bp\">//</span> <span class=\"n\">both</span> <span class=\"n\">work</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">return</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"n\">return</span> <span class=\"mi\">15</span> <span class=\"bp\">^</span> <span class=\"n\">__builtin_clzs</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Generates:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_uint16_log2</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">short</span><span class=\"o\">):</span>                  <span class=\"bp\">#</span> <span class=\"bp\">@</span><span class=\"n\">lean_uint16_log2</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">short</span><span class=\"o\">)</span>\n        <span class=\"n\">xor</span>     <span class=\"n\">eax</span><span class=\"o\">,</span> <span class=\"n\">eax</span>\n        <span class=\"n\">cmp</span>     <span class=\"n\">di</span><span class=\"o\">,</span> <span class=\"mi\">2</span>\n        <span class=\"n\">jb</span>      <span class=\"bp\">.</span><span class=\"n\">LBB0_2</span>\n<span class=\"bp\">.</span><span class=\"n\">LBB0_1</span><span class=\"o\">:</span>                                <span class=\"bp\">#</span> <span class=\"bp\">=&gt;</span><span class=\"n\">This</span> <span class=\"n\">Inner</span> <span class=\"n\">Loop</span> <span class=\"n\">Header</span><span class=\"o\">:</span> <span class=\"n\">Depth</span><span class=\"bp\">=</span><span class=\"mi\">1</span>\n        <span class=\"n\">movzx</span>   <span class=\"n\">ecx</span><span class=\"o\">,</span> <span class=\"n\">di</span>\n        <span class=\"n\">inc</span>     <span class=\"n\">eax</span>\n        <span class=\"n\">mov</span>     <span class=\"n\">edi</span><span class=\"o\">,</span> <span class=\"n\">ecx</span>\n        <span class=\"n\">shr</span>     <span class=\"n\">edi</span>\n        <span class=\"n\">cmp</span>     <span class=\"n\">cx</span><span class=\"o\">,</span> <span class=\"mi\">3</span>\n        <span class=\"n\">ja</span>      <span class=\"bp\">.</span><span class=\"n\">LBB0_1</span>\n<span class=\"bp\">.</span><span class=\"n\">LBB0_2</span><span class=\"o\">:</span>\n        <span class=\"n\">ret</span>\n<span class=\"n\">lean_uint16_log2_opt</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">short</span><span class=\"o\">):</span>              <span class=\"bp\">#</span> <span class=\"bp\">@</span><span class=\"n\">lean_uint16_log2_opt</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">short</span><span class=\"o\">)</span>\n        <span class=\"n\">xor</span>     <span class=\"n\">ecx</span><span class=\"o\">,</span> <span class=\"n\">ecx</span>\n        <span class=\"n\">xor</span>     <span class=\"n\">eax</span><span class=\"o\">,</span> <span class=\"n\">eax</span>\n        <span class=\"n\">test</span>    <span class=\"n\">edi</span><span class=\"o\">,</span> <span class=\"n\">edi</span>\n        <span class=\"n\">je</span>      <span class=\"bp\">.</span><span class=\"n\">LBB1_2</span>\n<span class=\"bp\">.</span><span class=\"n\">LBB1_1</span><span class=\"o\">:</span>                                <span class=\"bp\">#</span> <span class=\"bp\">=&gt;</span><span class=\"n\">This</span> <span class=\"n\">Inner</span> <span class=\"n\">Loop</span> <span class=\"n\">Header</span><span class=\"o\">:</span> <span class=\"n\">Depth</span><span class=\"bp\">=</span><span class=\"mi\">1</span>\n        <span class=\"n\">movzx</span>   <span class=\"n\">edx</span><span class=\"o\">,</span> <span class=\"n\">di</span>\n        <span class=\"n\">inc</span>     <span class=\"n\">eax</span>\n        <span class=\"n\">mov</span>     <span class=\"n\">edi</span><span class=\"o\">,</span> <span class=\"n\">edx</span>\n        <span class=\"n\">shr</span>     <span class=\"n\">edi</span>\n        <span class=\"n\">cmp</span>     <span class=\"n\">dx</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n        <span class=\"n\">ja</span>      <span class=\"bp\">.</span><span class=\"n\">LBB1_1</span>\n<span class=\"bp\">.</span><span class=\"n\">LBB1_2</span><span class=\"o\">:</span>\n        <span class=\"n\">sub</span>     <span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n        <span class=\"n\">cmovb</span>   <span class=\"n\">eax</span><span class=\"o\">,</span> <span class=\"n\">ecx</span>\n        <span class=\"n\">ret</span>\n<span class=\"n\">lean_uint16_log2_opt2</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">short</span><span class=\"o\">):</span>             <span class=\"bp\">#</span> <span class=\"bp\">@</span><span class=\"n\">lean_uint16_log2_opt2</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">short</span><span class=\"o\">)</span>\n        <span class=\"n\">lzcnt</span>   <span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">di</span>\n        <span class=\"n\">xor</span>     <span class=\"n\">eax</span><span class=\"o\">,</span> <span class=\"mi\">15</span>\n        <span class=\"n\">test</span>    <span class=\"n\">edi</span><span class=\"o\">,</span> <span class=\"n\">edi</span>\n        <span class=\"n\">cmove</span>   <span class=\"n\">eax</span><span class=\"o\">,</span> <span class=\"n\">edi</span>\n        <span class=\"n\">ret</span>\n</code></pre></div>",
        "id": 397880953,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1697926816
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/WE9zs8aGr\">https://godbolt.org/z/WE9zs8aGr</a></p>",
        "id": 397880969,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1697926842
    }
]