[
    {
        "content": "<p>There's some subtlety I don't understand in the below code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Coalgebra.id'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.id</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Coalgebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span>\n  <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n  <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.assoc</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"bp\">Δ</span> <span class=\"n\">id'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">id'</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">ε_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">ε</span> <span class=\"n\">id'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"n\">a</span>\n  <span class=\"n\">id_ε</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">id'</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>It works fine in the web editor, but when I run it locally (clarification: in a scratch file in mathlib) I get <code>unknown identifier 'id''</code> in the definition of <code>Coalgebra</code>. What is going on?</p>",
        "id": 401780079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699887261
    },
    {
        "content": "<p>It probably has something to do with autoImplicit.</p>",
        "id": 401781136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699887601
    },
    {
        "content": "<p>E.g. this fails in the web editor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Coalgebra.id'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.id</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">Coalgebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span>\n  <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n  <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.assoc</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"bp\">Δ</span> <span class=\"n\">id'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">id'</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">ε_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">ε</span> <span class=\"n\">id'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"n\">a</span>\n  <span class=\"n\">id_ε</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">id'</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 401781271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699887628
    },
    {
        "content": "<p>My guess is that the web editor doesn't turn off auto implicit by default.</p>",
        "id": 401781625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699887705
    },
    {
        "content": "<p>But <code>mathlib4</code> does: <a href=\"https://github.com/leanprover-community/mathlib4/blob/d030880f14fc5219d77c688b9c42e367c588c805/lakefile.lean#L8\">https://github.com/leanprover-community/mathlib4/blob/d030880f14fc5219d77c688b9c42e367c588c805/lakefile.lean#L8</a></p>",
        "id": 401781748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699887730
    },
    {
        "content": "<p>When you say \"open locally\", are you opening a copy a mathlib? Or are you working in a project which depends on mathlib?</p>",
        "id": 401782086,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699887812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/works.20in.20web.20editor.2C.20not.20locally/near/401781625\">said</a>:</p>\n<blockquote>\n<p>My guess is that the web editor doesn't turn off auto implicit by default.</p>\n</blockquote>\n<p>This constantly bites me, and I wish it would; but I'm sure there are people who have the opposite opinion</p>",
        "id": 401784908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699888580
    },
    {
        "content": "<p>I should have said that I tried adding <code>set_option autoImplicit true</code> locally and this didn't fix the local error. (so we have established that it's possible to break working code in the web editor, but I still don't know how to get my non-working local code to work)</p>",
        "id": 401786689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699889055
    },
    {
        "content": "<p>does go to definition work on <code>id'</code> in the definition of <code>Coalgebra</code> your web editor?</p>",
        "id": 401786964,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889133
    },
    {
        "content": "<p><code>id'</code> is an unknown identifier locally.</p>",
        "id": 401787041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699889157
    },
    {
        "content": "<p>sorry, I meant web</p>",
        "id": 401787123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889165
    },
    {
        "content": "<p>well, it doesn't for me. so it's unknown also for the web editor.</p>",
        "id": 401787276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889209
    },
    {
        "content": "<p>jump to definition doesn't work in the web editor as far as I know?</p>",
        "id": 401787277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699889209
    },
    {
        "content": "<p>If I put your original code in a fresh file in a fresh project which <em>depends</em> on mathlib, then I get no errors locally.</p>",
        "id": 401787393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889254
    },
    {
        "content": "<p>Oh interesting! Yes, I was dumping it in mathlib. So what other option is mathlib setting which is messing this code up?</p>",
        "id": 401787648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699889316
    },
    {
        "content": "<p>I suppose the global option in the lakefile overrides the option in the file?</p>",
        "id": 401787735,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889341
    },
    {
        "content": "<p>It shouldn't</p>",
        "id": 401787813,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699889364
    },
    {
        "content": "<p>right, so something is still wrong.</p>",
        "id": 401787950,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889396
    },
    {
        "content": "<p>yeah indeed the code works fine in NNG :-)</p>",
        "id": 401787969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699889401
    },
    {
        "content": "<p>The option in the file is working fine in mathlib, you can e.g. change <code>Type</code> to <code>Type u</code> and this works fine with autoImplicit true. But <code>id'</code> still doesn't work.</p>",
        "id": 401788365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699889477
    },
    {
        "content": "<p>I got it, it's not autoImplicit, but rather relaxedAutoImplicit. This should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">relaxedAutoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Coalgebra.id'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.id</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Coalgebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span>\n  <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n  <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.assoc</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"bp\">Δ</span> <span class=\"n\">id'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">id'</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">ε_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">ε</span> <span class=\"n\">id'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"n\">a</span>\n  <span class=\"n\">id_ε</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">id'</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 401788980,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889630
    },
    {
        "content": "<p>well rather it's <em>both</em>. If one of the two options is set to false, then you get the error.</p>",
        "id": 401789121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889658
    },
    {
        "content": "<p>both options are false by default in mathlib.</p>",
        "id": 401789265,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699889695
    },
    {
        "content": "<p><del>I am quite confused about why this fixes the problem, to be honest.</del> (oh, I get it now). But thanks!</p>",
        "id": 401801377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699892372
    },
    {
        "content": "<p>Note that Adam's version is nonsense</p>",
        "id": 401801936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699892488
    },
    {
        "content": "<p>It parameterizies <code>coassoc</code> with an  <code>id'</code> variabl</p>",
        "id": 401801998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699892501
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Coalgebra.coassoc</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Coalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">id'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">TensorProduct.assoc</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">Coalgebra.</span><span class=\"bp\">Δ</span> <span class=\"n\">id'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Coalgebra.</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">id'</span> <span class=\"n\">Coalgebra.</span><span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Coalgebra.</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401802186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699892541
    },
    {
        "content": "<p>Is that not what happens in the web editor with Kevin's original code?</p>",
        "id": 401802245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699892555
    },
    {
        "content": "<p>Oh sure, but my point is that this doesn't \"fix\" the problem, this hides it</p>",
        "id": 401802335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699892578
    },
    {
        "content": "<p>Oh ok, yeah I agree. By \"fix\" I really mean \"we should now understand what's going on.\"</p>",
        "id": 401802493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699892614
    },
    {
        "content": "<p>I think the key observation is that the <code>Foo</code> namespace is not open within <code>class Foo</code></p>",
        "id": 401802662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699892645
    },
    {
        "content": "<p>The real problem is that <code>id'</code> has two explicit variables.</p>",
        "id": 401802878,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699892695
    },
    {
        "content": "<p>That's not enough to fix it, you also need <code>open Coalgebra in</code></p>",
        "id": 401802978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699892719
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">relaxedAutoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Coalgebra.id'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.id</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Coalgebra</span> <span class=\"k\">in</span>\n<span class=\"kd\">class</span> <span class=\"n\">Coalgebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span>\n  <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n  <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.assoc</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"bp\">Δ</span> <span class=\"o\">(</span><span class=\"n\">id'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"o\">(</span><span class=\"n\">id'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">ε_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">id'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n  <span class=\"n\">id_ε</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.comm</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">TensorProduct.map</span> <span class=\"o\">(</span><span class=\"n\">id'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">id'</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 401803146,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699892759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/works.20in.20web.20editor.2C.20not.20locally/near/401802662\">said</a>:</p>\n<blockquote>\n<p>I think the key observation is that the <code>Foo</code> namespace is not open within <code>class Foo</code></p>\n</blockquote>\n<p>That's right. If we rename <code>Coalgebra</code> to <code>Coalgebra.Foo</code> then I suppose everything will become clear (even with the original code)</p>",
        "id": 401803775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699892915
    },
    {
        "content": "<p>Of course, you should really write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Coalgebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span>\n  <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n  <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct.assoc</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">TensorProduct.map</span> <span class=\"bp\">Δ</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"bp\">∘ₗ</span> <span class=\"bp\">Δ</span> <span class=\"bp\">=</span> <span class=\"n\">TensorProduct.map</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"bp\">Δ</span> <span class=\"bp\">∘ₗ</span> <span class=\"bp\">Δ</span>\n  <span class=\"n\">ε_id</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">TensorProduct.map</span> <span class=\"n\">ε</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"bp\">∘ₗ</span> <span class=\"bp\">Δ</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">id</span>\n  <span class=\"n\">id_ε</span> <span class=\"o\">:</span> <span class=\"n\">TensorProduct.rid</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">TensorProduct.map</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">ε</span> <span class=\"bp\">∘ₗ</span> <span class=\"bp\">Δ</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">id</span>\n</code></pre></div>",
        "id": 401804361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893073
    },
    {
        "content": "<p>Where <code>.id</code> is just <code>LinearMap.id</code>, which doesn't need a second name</p>",
        "id": 401804453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893100
    },
    {
        "content": "<p>And stating the proof fields as equalities of morphisms makes <code>ext</code> super powerful for proving them</p>",
        "id": 401804579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893129
    },
    {
        "content": "<p>You both think that it's better to be composing those linear maps rather than evaluating them at x, for all x?</p>",
        "id": 401805259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699893335
    },
    {
        "content": "<p>I am currently writing a thesis section about that very principle!</p>",
        "id": 401805438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893391
    },
    {
        "content": "<p>It means that if <code>A</code> is a tensor product or a direct sum, you can start the proof with <code>ext; dsimp</code> and you're already only dealing with pure tensors or single elements of the direct sum</p>",
        "id": 401805566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/works.20in.20web.20editor.2C.20not.20locally/near/401805259\">said</a>:</p>\n<blockquote>\n<p>You both think that it's better to be composing those linear maps rather than evaluating them at x, for all x?</p>\n</blockquote>\n<p>I defer to the experts:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/works.20in.20web.20editor.2C.20not.20locally/near/401805438\">said</a>:</p>\n<blockquote>\n<p>I am currently writing a thesis section about that very principle!</p>\n</blockquote>",
        "id": 401805766,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699893490
    },
    {
        "content": "<p>yup, I can confirm that my proofs for the first example of a coalgebra in Wikipedia just completely broke with this refactor, but when fixed they were shorter with this new definition.</p>",
        "id": 401805846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699893521
    },
    {
        "content": "<p><del>I'm surprised, I would have thought a lot of things would be easier to prove while <code>id'</code> was a free variable and not just the identity function!</del> nevermind, you're proving instances not lemmas</p>",
        "id": 401806080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/works.20in.20web.20editor.2C.20not.20locally/near/401805259\">said</a>:</p>\n<blockquote>\n<p>You both think that it's better to be composing those linear maps rather than evaluating them at x, for all x?</p>\n</blockquote>\n<p>The compromise would be to write the applied version because that's what mathematicians expect to read, but then write an <code>abbrev</code> that takes the equalities of morphisms, and always use that</p>",
        "id": 401806274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893662
    },
    {
        "content": "<p>oh sorry, I independently fixed the <code>id'</code> problem :-) But I fixed it in a different way to you: I did <code>open LinearMap</code> and then used <code>id</code>. What is this <code>.id</code> thing? I've never understood that. It means \"look in every namespace until you find the right one\"??</p>",
        "id": 401806459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699893721
    },
    {
        "content": "<p>\"Look at the namespace for the type you're expecting to fill this hole\" was my understanding, but might be wrong</p>",
        "id": 401806656,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699893779
    },
    {
        "content": "<p>No, it means that if the type expected is <code>LinearMap</code> then <code>.id</code> will mean <code>LinearMap.id</code>, etc.</p>",
        "id": 401806684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699893786
    },
    {
        "content": "<p>if you have a hole <code>(_ : Foo X)</code>, then <code>(.bar : Foo X)</code> means <code>(Foo.bar : Foo X)</code></p>",
        "id": 401806688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893786
    },
    {
        "content": "<p><span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span></p>",
        "id": 401806715,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699893798
    },
    {
        "content": "<p>Oh I've learnt so much in this thread :-) Thanks all!</p>",
        "id": 401806925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699893858
    }
]